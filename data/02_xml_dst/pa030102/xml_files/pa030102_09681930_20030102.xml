<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005019A1-20030102-P00001.TIF SYSTEM "US20030005019A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00002.TIF SYSTEM "US20030005019A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00003.TIF SYSTEM "US20030005019A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00004.TIF SYSTEM "US20030005019A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00005.TIF SYSTEM "US20030005019A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00006.TIF SYSTEM "US20030005019A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00007.TIF SYSTEM "US20030005019A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00008.TIF SYSTEM "US20030005019A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00009.TIF SYSTEM "US20030005019A1-20030102-P00009.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00010.TIF SYSTEM "US20030005019A1-20030102-P00010.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00011.TIF SYSTEM "US20030005019A1-20030102-P00011.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00012.TIF SYSTEM "US20030005019A1-20030102-P00012.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00013.TIF SYSTEM "US20030005019A1-20030102-P00013.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00014.TIF SYSTEM "US20030005019A1-20030102-P00014.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00015.TIF SYSTEM "US20030005019A1-20030102-P00015.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00016.TIF SYSTEM "US20030005019A1-20030102-P00016.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00017.TIF SYSTEM "US20030005019A1-20030102-P00017.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00018.TIF SYSTEM "US20030005019A1-20030102-P00018.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00019.TIF SYSTEM "US20030005019A1-20030102-P00019.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00020.TIF SYSTEM "US20030005019A1-20030102-P00020.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00021.TIF SYSTEM "US20030005019A1-20030102-P00021.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00022.TIF SYSTEM "US20030005019A1-20030102-P00022.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00023.TIF SYSTEM "US20030005019A1-20030102-P00023.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00024.TIF SYSTEM "US20030005019A1-20030102-P00024.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00025.TIF SYSTEM "US20030005019A1-20030102-P00025.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00026.TIF SYSTEM "US20030005019A1-20030102-P00026.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00027.TIF SYSTEM "US20030005019A1-20030102-P00027.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00028.TIF SYSTEM "US20030005019A1-20030102-P00028.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00029.TIF SYSTEM "US20030005019A1-20030102-P00029.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00030.TIF SYSTEM "US20030005019A1-20030102-P00030.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00031.TIF SYSTEM "US20030005019A1-20030102-P00031.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00032.TIF SYSTEM "US20030005019A1-20030102-P00032.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00033.TIF SYSTEM "US20030005019A1-20030102-P00033.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00034.TIF SYSTEM "US20030005019A1-20030102-P00034.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00035.TIF SYSTEM "US20030005019A1-20030102-P00035.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00036.TIF SYSTEM "US20030005019A1-20030102-P00036.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00037.TIF SYSTEM "US20030005019A1-20030102-P00037.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00038.TIF SYSTEM "US20030005019A1-20030102-P00038.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00039.TIF SYSTEM "US20030005019A1-20030102-P00039.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00040.TIF SYSTEM "US20030005019A1-20030102-P00040.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00041.TIF SYSTEM "US20030005019A1-20030102-P00041.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00042.TIF SYSTEM "US20030005019A1-20030102-P00042.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00043.TIF SYSTEM "US20030005019A1-20030102-P00043.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00044.TIF SYSTEM "US20030005019A1-20030102-P00044.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00045.TIF SYSTEM "US20030005019A1-20030102-P00045.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00046.TIF SYSTEM "US20030005019A1-20030102-P00046.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00047.TIF SYSTEM "US20030005019A1-20030102-P00047.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00048.TIF SYSTEM "US20030005019A1-20030102-P00048.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00049.TIF SYSTEM "US20030005019A1-20030102-P00049.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00050.TIF SYSTEM "US20030005019A1-20030102-P00050.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00051.TIF SYSTEM "US20030005019A1-20030102-P00051.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00052.TIF SYSTEM "US20030005019A1-20030102-P00052.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00053.TIF SYSTEM "US20030005019A1-20030102-P00053.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00054.TIF SYSTEM "US20030005019A1-20030102-P00054.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00055.TIF SYSTEM "US20030005019A1-20030102-P00055.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00056.TIF SYSTEM "US20030005019A1-20030102-P00056.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00057.TIF SYSTEM "US20030005019A1-20030102-P00057.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00058.TIF SYSTEM "US20030005019A1-20030102-P00058.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00059.TIF SYSTEM "US20030005019A1-20030102-P00059.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00060.TIF SYSTEM "US20030005019A1-20030102-P00060.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-P00061.TIF SYSTEM "US20030005019A1-20030102-P00061.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00000.TIF SYSTEM "US20030005019A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00001.TIF SYSTEM "US20030005019A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00002.TIF SYSTEM "US20030005019A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00003.TIF SYSTEM "US20030005019A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00004.TIF SYSTEM "US20030005019A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005019A1-20030102-D00005.TIF SYSTEM "US20030005019A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005019</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09681930</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Application frameworks for mobile devices</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Kuldipsingh</given-name>
<family-name>Pabla</family-name>
</name>
<residence>
<residence-us>
<city>Santa Clara</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Rajesh</given-name>
<family-name>Kanungo</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Venkatesh</given-name>
<family-name>Narayanan</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>MARTINE &amp; PENILLA, LLP</name-1>
<name-2>SUN MICROSYSTEMS, INC.</name-2>
<address>
<address-1>710 LAKEWAY DRIVE</address-1>
<address-2>SUITE 170</address-2>
<city>SUNNYVALE</city>
<state>CA</state>
<postalcode>94085</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An application framework for mobile devices is described comprising a three-tier software architecture for wireless devices to allow high-powered backend services to be accessible by low-powered wireless client devices. The present invention defines a layered end-to-end architecture and an application framework, called mobilet framework, for client devices to allow applications to run on wireless devices in a vendor-neutral and platform independent manner. The wireless device may be viewed as a cache or a viewport through which high-end services can be accessed. The cache may be synchronized periodically with the servers and/or service providers through a gateway portal targeted specifically at low-end wireless devices. The mobilet framework for low-end client devices defines an Application Programming Interface as well as an abstraction for platform independent applications called mobilets. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This Application is related to U.S. Utility Application No., entitled &ldquo;Application Framework For Mobile Devices&rdquo;, filed on Jun. 22, 2001, specification of which is herein incorporated by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention relates to the field of software architecture for wireless devices. More specifically the invention relates to an application framework for wireless client devices to allow applications to run on these devices in a vendor-neutral and platform independent manner. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever. Sun, Sun Microsystems, the Sun logo, Solaris, Java, JavaOS, JavaStation, HotJava Views, Jini and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States and other countries. All SPARC trademarks are used under license and are trademarks of SPARC International, Inc., in the United States and other countries. Products bearing SPARC trademarks are based upon an architecture developed by Sun Microsystems, Inc. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> 2. Background Art </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The wireless communication environment is characterized by the existence of multiple commercial networks, such as Mobitex, Cellular Digital Packet Data (CDPD), Global System for Mobile communication (GSM), Radio Frequency (RF), satellite, cellular and/or Wireless Application Protocol (WAP), XHTML (Extended Hyper Text Markup Language), or Wireless LAN (Local Area Network) networks, and numerous other protocols. Incompatibility between these networks makes it impossible to create common applications for devices that use these protocols. Current systems operate in an end-to-end fashion. That is, services are linked from provider to clients of that provider and are usually independent of other providers. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Another problem is that wireless devices like cellular phones, pagers, Personal Data Assistants (PDA) have very small footprints (i.e. they are small). Thus, they have limited memory, processing capacities, and display size, hence, are limited in the size of applications that they can process. Current systems cannot support multiple applications. For example, some cellular phones have four lines of display and some have up to six. The differing capabilities limits the size of applications that are available for these devices. The proposed application framework makes these limitations transparent. The framework allows service providers to field applications or provide applications to these wireless devices without much knowledge about what these devices are actually capable of. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The following definitions are examples of the various forms of wireless communication protocols. They are not intended to be a complete list of the various protocols used in the wireless communication industry. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> CDPD (Cellular Digital Packet Data) is a specification for supporting wireless access to the Internet and other public packet-switched networks. CDPD is an open specification that adheres to the layered structure of the Open Systems Interconnection model and has the ability to be extended in the future. CDPD&apos;s support for packet-switching means that a persistent link is not needed. The same broadcast channel may be shared among a number of users at the same time. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> GSM (Global System for Mobile) is a digital mobile telephone system that is widely used in Europe and other parts of the world. GSM uses a variation of time division multiple access (TDMA) and is the most widely used of the three digital wireless telephone technologies (TDMA, GSM, and CDMA (code-division multiple access)). </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Mobitex is a packet switched system for mobile data communication. This means that all data are transferred over radio waves in customized units or packets. This way, the network is used efficiently, and connection times are very short. One advantage of this is that subscribers only pay for packets of data that are sent and not for the connection time with, for example, a mobile telephone. This means that the system connects senders and receivers wherever they are in the area covered (known as roaming). A great advantage of the Mobitex network is that messages that are sent are coded in a special way so that the network automatically corrects mistakes and requests a re-send. So the receiver can be sure that no distorted or incorrect messages are delivered. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> An application framework for mobile devices is described. In one embodiment, a three-tier software architecture for wireless devices to allow high-powered backend services to be accessible by low-powered wireless client devices. The present invention defines a layered end-to-end architecture and an application framework for client devices to allow applications to run on these wireless devices in a vendor-neutral and platform independent manner thereby making footprint and protocol restrictions transparent to the client. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one or more embodiments, a wireless device may be viewed as a cache or a viewport through which high-end services can be accessed. The cache may be synchronized periodically with the servers and/or service providers through a gateway portal targeted specifically at low-end wireless devices. Some of these services may be local, some remote and some split in-between the low-end client and the higher end server. The present mobilet framework for low-end client devices defines an Application Programming Interface (API) as well as an abstraction for platform independent (e.g. Java) applications called mobilets. This framework allows server application and client application interaction on a class of devices in a vendor neutral manner.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram of the end-to-end protocol view for the wireless client, in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an illustration of the layered structure of the client tier, in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a state diagram depicting the life of a mobilet in the framework, in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of a processing environment comprising an object-oriented runtime environment capable of providing a suitable software execution environment for an embodiment of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of one embodiment of a computer system capable of providing a suitable hardware execution environment for an embodiment of the present invention</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The invention defines a three-tier software architecture for wireless devices to allow high-powered backend services to be accessible by low-powered wireless client devices. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It will be apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In general, low-powered wireless devices like cell phones, pagers, and Personal Data Assistants (PDA), have small footprints and communicate using various incompatible protocols. Usually, wireless devices use protocols that are service provider dependent therefore making it difficult to run common applications across services (i.e. protocol). In addition, these devices are limited in display size, memory and processing power. For example, some devices have four lines of display and some have up to six. Moreover, the specifications on wireless devices constantly vary as manufacturers vie to reduce footprint while providing more functionality. This makes it difficult to standardize and provide applications across protocols. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Different service providers use different protocols to communicate with clients on their wireless networks, making it virtually impossible to develop applications that are device independent. This invention defines a framework whereby wireless applications can be run independent of protocol, footprint, and display size. That is, applications developed for this framework will be able to run on any wireless device without prior knowledge of the capabilities of the devices. For purposes of this specification, applications that run on this framework are called mobilets because of their applicability to mobile (i.e. wireless) services. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Traditionally, Internet devices like screen phones and set top boxes have been fat clients. That is, they have a high-end rendering engine and a set of services resident in the devices. This functionality requires the devices to have more memory and more processing power than is cost efficient for small devices. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The present invention describes a three-tier software architecture for wireless devices to allow high-powered backend services to be accessible by low powered wireless client devices. For example, services that are generally available on desktop and similar environments can be made available to the mobile user independent of service provider. The present invention defines a layered end-to-end architecture and an application (i.e. mobilet) framework for client devices to allow applications to run on these wireless devices in a vendor-neutral and platform independent manner. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> A wireless device can be viewed as a cache or a viewport through which high-end services can be accessed. The cache may be synchronized periodically with the servers and/or service providers through a gateway portal targeted specifically at low-end wireless devices. Some of these services may be local, some remote and some split in-between the low-end client and the higher end server. The present mobilet framework for low-end client devices defines an Application Programming Interface (API) as well as an abstraction for platform independent (e.g. Java) applications called mobilets. This framework allows server application and client application interaction on a class of devices in a vendor neutral manner. </paragraph>
</section>
<section>
<heading lvl="1">Layered End-to-End Protocol Architecture </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> This is a peer-to-peer set of layers defined to optimize definition of services by abstracting out the effects of rapid changes in technology. In one or more embodiments, each layer of the architecture provides a certain set of services to the upper layer and uses certain services from the layer below. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In one embodiment, the expense of online connectivity for the wireless user forces the focus on offline content accessing with the exception of time-sensitive data (e.g. stock quotes). Thus, the mobile device acts as a cache or reservoir of information that may periodically synchronize with a server to update its cache. Optionally, a push service may send important events to the device. This means that continuous connectivity is not necessary unless time sensitive and real-time information is needed. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a diagram of the end-to-end protocol view for the wireless clients. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> There are seven protocol layers and three service tiers in the model. The model is based on the OSI 7 layer architecture specified in &ldquo;Computer Networks&rdquo; by Tanenbaum. The three-tier architecture comprises the client tier, the gateway tier, and the server tier. The client tier, block <highlight><bold>101</bold></highlight>, comprises a KVM (K Virtual Machine) or equivalent virtual machine capable of scheduling device independent applications. The KVM is the small device equivalent of the Java Virtual Machine (JVM). Like JVM, the KVM coexists with the native operating system and other software on the client device. Other Java packages are used to provide an API for Web like (e.g. WAP, XHTML) functionality, sandbox security, a framework for running Java applications, and other services. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The Wireless Gateway tier <highlight><bold>102</bold></highlight> is responsible for providing services that lighten the load on the client by doing as much preprocessing as possible and for any protocol translation between the server and the client device. For example, the gateway performs content transformation to WML (Wireless Markup Language) or XHTML, converts from HTTP (Hyper Text Transport Protocol) to WAP, does Byte-code verification, authenticates Java applications, provides push services, and other services. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The Server tier <highlight><bold>103</bold></highlight> comprises a large group of services that may be available on enterprise servers. Some of the services are provider dependent and run on client devices. Examples of services are banking applications, brokerage services, etc. Servers may also use push services to push client applications into the client device making the client applications portals into the services provided by the server. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Each layer of the architecture provides a certain service and the subdivision is arranged to provide certain advantages. For example, different vendors may choose to implement or support different standards for communication with their clients. Client devices may have different capabilities or may use different implementation to provide same functionality. It also allows software to be easily portable between client devices. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Layers 1 and 2 are the physical and data link layers. The connections on the server side (i.e. server to gateway communication) may be through an Ethernet, Wide Area Network (WAN), the Internet, or other similar communication network. The gateway to client side communication may be through any of the available wireless communication protocols such as GSM, CDMA, and TDMA. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Layer 3 is a network layer with IP (Internet Protocol) communication between the server and the gateway. The gateway to client side may use IP or WAP protocol for communication. Layer 4 is the transport layer probably using TCP (Transmission Control Protocol) on the server to gateway side and WAP, UDP (User Datagram Protocol), or TCP on the gateway to client side. The WAP may be more efficient because it allows data for compression, however, most current Web transport services use TCP. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Layer 5 is the session layer involving HTTP, HTTPS (i.e., secure HTTP), and other forms of communication between services on the server to gateway side. WAP may be the most efficient system on the gateway to client side because it has an efficient mechanism for Gets and Sets functions. Layer 6 is the presentation for markup and may use HTML, or XML (Extensible Markup Language) for server to gateway communication. The gateway to client side may use WML (Wireless Markup Language), or XHTML for communication. WML is more than a markup language because it has telephony extensions. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The final layer, 7, is the applications layer. This layer includes preparation of graphical data for presentation, action oriented metaphors, directory services, mail services, and etc. Graphical data between the server and the gateway is presented in a format such as GIF (Graphical Interchange Format) or JPEG. This data is converted in the gateway tier to a format such as WAP compressed 4-bit graphics (i.e. bitmaps) for communication to the client device. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Action oriented metaphors, such as JavaScripts and applets, from the server side are converted by the gateway to WMLScript and mobilets, respectively, before transmission to the client device. For directory services, the gateway acts as proxy to the client tier. Mail services may be sent via standard text paging systems to the client from the gateway. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In this three-tier architecture, the gateway is below the application layer and acts as a general purpose protocol transformation engine. Therefore, the gateway has very little to do with how server applications and client applications interact in a peer-to-peer fashion. The gateway can be used to do bytecode verification and to target client devices belonging to a particular category. The wireless gateway handles communications between server and client in order to accommodate bandwidth restrictions, space restrictions, and security concerns that are specific to wireless devices, and also Internet constraints by providing some kind of barrier and transformation between client and server. For example, the gateway may take Web pages from a server and strip out of the contents some unnecessary information and make it available to wireless phones without any problem. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Authentication, security, and encryption issues on the server to gateway side may be handled using digital certificates, Secure Sockets, Digital Hashes (e.g. MD5), RSA and DES encryption of various strengths. </paragraph>
</section>
<section>
<heading lvl="1">Client Tier Internal Architecture </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The protocol mapping and end-to-end architecture discussed above highlights the difficulty in developing applications based on any particular set of protocols even for the same class of devices. It is harder still for general purpose wireless service providers to support client applications on the vast array of wireless devices even with the help of transformation gateway support since applications do not have access to the same set of local services. The present invention defines local services available on the client device that would allow applications to run provider-neutral and in platform independent manner. A layered architecture is defined that encapsulates protocol and system specific implementation features in abstractions. For example, the client does not have to worry about the markup language (WML or XHTML) or whether or not the protocol engine is implemented in native or Java. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an illustration of the layered structure of the client tier. The RTOS (Real Time Operating System) layer <highlight><bold>202</bold></highlight> comprises the wireless small device operating system <highlight><bold>224</bold></highlight> with its linking and networking APIs block <highlight><bold>220</bold></highlight>. The hot updates object <highlight><bold>222</bold></highlight> allows updates and installation of new pieces of software on the client device RTOS layer without affecting other layers in the architecture and without the client device requesting for the update. RTOS <highlight><bold>224</bold></highlight> is generally native code (i.e. device dependent), but may be written in object-oriented language like Java. In one or more embodiments, layers <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and block <highlight><bold>210</bold></highlight> may be written in native code. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> On top of the RTOS layer <highlight><bold>202</bold></highlight> is the virtual machine (VM) layer <highlight><bold>204</bold></highlight>. VM layer <highlight><bold>204</bold></highlight> comprises the K Virtual Machine <highlight><bold>206</bold></highlight> and system classes <highlight><bold>226</bold></highlight> through <highlight><bold>234</bold></highlight>. System classes <highlight><bold>206</bold></highlight> through <highlight><bold>226</bold></highlight> are integral part of the K Virtual Machine. As discussed earlier, the K Virtual Machine is a small device version of the Java Virtual Machine (JVM). The KVM allows multi-threading in order to make inter-mobilet interaction easy and predictable. Although KVM and JVM are used in this specification, it would be obvious to those of ordinary skills that any virtual machine that performs similar functions can be used instead to provide similar functionality. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The final layer is the application layer <highlight><bold>208</bold></highlight>. This layer contains the platform specific mobilet framework object class <highlight><bold>210</bold></highlight>, the platform independent mobilet framework object class <highlight><bold>212</bold></highlight>, and application object classes <highlight><bold>214</bold></highlight> through <highlight><bold>218</bold></highlight>. This arrangement allows application objects <highlight><bold>214</bold></highlight> through <highlight><bold>218</bold></highlight> to be platform and vendor neutral. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Application objects <highlight><bold>214</bold></highlight> through <highlight><bold>218</bold></highlight> are the mobilets. In one or more embodiments, the present invention is used to track shipping packages. For example, assuming FedEx has a shipment for a client, mobilet <highlight><bold>21</bold></highlight> <highlight><bold>6</bold></highlight> could be subscribed to during shipping, which would automatically provision (i.e. push out to) the client&apos;s wireless device. Another example is if a client is about to receive a package from FedEx, the recipient&apos;s wireless phone will automatically be provisioned with FedEx mobilet <highlight><bold>216</bold></highlight> if the sender had provided a phone number during shipping. When the package arrives at the recipient&apos;s door, they will either get a phone call, or mobilet <highlight><bold>216</bold></highlight> runs and alerts the client of the arrival. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Basically, service providers may have mobilets ready to run on service recipient&apos;s wireless devices. The present invention allows service providers like FedEx to alert clients of important events if the clients have wireless devices that can be provisioned with mobilets. Also, a client sending a package to somebody else may track the package with their cell phone if the cell phone has a tracking mobilet (e.g. FedEx mobilet <highlight><bold>216</bold></highlight>). Similarly, a client using their cell phone can connect to a stock ticker provider to get the current value of stocks. The service provider or ticker provider can push the mobilet required to view the ticker to the wireless device. Thus, the present invention allows wireless device users to subscribe to services on the fly. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The platform handles all communications between the wireless device and the service provider using mobilets that implement user interface functions. Functionally, mobilets would be capable of determining how the platform works, what kind of user interfaces are supported, and the best way to display information. For example, if the device does not have a browser then mobilets handle the browser function. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Available services include subscription, publishing, sinking, etc. A service provider may publish available services and clients can subscribe to available services on the fly. Sinking allows clients that have desktop machines from which they can access e-mail, calendar, and other functions to sink-up their cell phones or wireless devices with their desktop to allow access to those functions from the wireless device. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A service provider may broadcast availability of certain services. Client&apos;s that are interested may pick and choose those services they would like to subscribe to, for example, stock ticker for tracking investments and FedEx mobilet for tracking packages. If a client is not subscribing to FedEx but the client would like to track an incoming package or outgoing package then the client&apos;s service provider can push that mobilet into the client&apos;s wireless device. Another example is that a client may be interested in subscribing to some services available on the Internet. </paragraph>
</section>
<section>
<heading lvl="1">Mobilet Framework </heading>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> A mobilet, like an applet, is an application written to the mobilet framework specifications. It resides on top of a thin runtime container (Mobilet framework). Mobilets have a default behavior unless the mobilet developer overrides the APIs. Although mobilets can communicate with each other through the framework, the state of each mobilet is managed by a mobilet manager. Thus, the mobilet manager manages all the mobilets in the framework. The mobilet manager is responsible for starting, stopping, initializing, suspending, etc. for all mobilets. For example, a mobilet cannot requisition the display screen of the wireless device without permission from the mobilet manager. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Most wireless devices are usually very limited in visual display capability therefore only one application may operate in the foreground. This invention provides a desktop type metaphor that is a desktop kind of feel for applications on the wireless device. This means that the user should be able to switch between applications just like on the desktop. But in general, only one application will be active in the foreground at a time. The remaining applications may be in the background. Other applications may be active in the background so long as they are not consuming much resource. For example, one thread could be waiting on a circuit and when it becomes active, it might try to take the foreground by requesting for access from the mobilet manager. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Each mobilet has an identification (ID) that uniquely refers to it. The mobilet ID may contain references to its name, and other information (e.g. platform dependent messages). The contents of the mobilet ID are generally not visible to the mobilet except for certain method calls. The mobilet manager handles each mobilet without a pointer that way one mobilet cannot interfere in the operations of another mobilet. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The mobilet manager creates a registry of all mobilets in the framework. When a mobilet is started and is initialized, its ID is stored in the mobilet registry. The mobilet manager may then pass an object (e.g. a cookie) to the mobilet so that the mobilet may discover the environment around it. Most of the environment information is stored in the mobilet manager, but a cookie is a safe interaction because it is in standard API, i.e., standard object calls. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The mobilet manager is responsible for giving mobilets life by giving them a mobilet ID and stuffing them in the mobilet registry. The manager is responsible for initializing, stopping, stocking, putting the mobilets in the background. No mobilet function happens directly without permission from the mobilet manager. So if one mobilet wants access to the screen, it must request it through the mobilet manager. If it&apos;s okay (e.g. a higher priority task or the current active task is preemptable), then the manager will shut down the active mobilet by placing it in the background before bringing the requesting mobilet to the foreground. Examples of higher priority tasks include event messenger and instant messenger services. These services may notify the user and request confirmation whether the user wants to view the messages instantly. However, no mobilet may directly request other mobilet to relinquish access. Access must always be obtained through the mobilet manager, so there is an access control to minimize the possibilities for destructive interaction. For example, in order to notify the user and request confirmation whether or not to view a message, the service must first request access for the screen from the mobilet manager. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The mobilet manager does validation of the mobilet ID with collaboration from the mobilet registry. References to a mobilet are via its ID. The registry is a table of what kind of services are available, i.e., what type of mobilets are available, there capabilities, and what kind of information they contain. For example, the e-mail may want to use a calendar function so it would inquire from the mobilet registry for available services. If there is a calendar function, it may then request, from the mobilet manager, that the calendar function be put in the foreground. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The mobilet manager handles launching of applications (i.e. mobilets), inter-mobilet communication, lifecycle of mobilets, registration of mobilets, the state of each mobilet, user interface (i.e. interaction), etc. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a state diagram of the life of a mobilet. At state <highlight><bold>300</bold></highlight>, the mobilet is initialized; the mobilet manager passes a context (e.g. a cookie) to allow the mobilet to determine its environment. The mobilet manager then creates the mobilet by giving it an ID and publishing it in the registry. After registration is complete, the mobilet may request move to the foreground, if granted, the mobilet is put in state <highlight><bold>304</bold></highlight>, otherwise it is in state <highlight><bold>302</bold></highlight>. At state <highlight><bold>304</bold></highlight>, the mobilet has access to resources like the display, and other user interface components. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> If access is not granted to proceed to foreground <highlight><bold>304</bold></highlight>, the mobilet is put in the background state <highlight><bold>302</bold></highlight>. A mobilet can only be destroyed from either the background state <highlight><bold>302</bold></highlight> or from the paused state <highlight><bold>306</bold></highlight>. The mobilet manager may move the mobilet between the background state <highlight><bold>302</bold></highlight>, foreground state <highlight><bold>304</bold></highlight>, and the paused state <highlight><bold>306</bold></highlight>, depending on priorities and usage requirements. In this fashion, the mobilet manager manages the state of the mobilet once it has been initialized and is in the framework. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Because the framework makes the wireless device act like a cache of services, it allows for download of proxy stubs that convert the wireless device into a service provider. Thus, in the service provider configuration, the wireless device may be used to provide services to other wireless devices, for example. The framework also provides persistent storage for client applications and sandbox security to prevent collision and inadvertent destruction of services. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In one or more embodiments of the present invention, sample Java&trade; language source code implementing the framework and its embedded services are provided in Appendix A. </paragraph>
</section>
<section>
<heading lvl="1">Embodiment of a Processing Environment </heading>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> An embodiment of the invention is directed, though not limited, to distributed applications, such as those in which a server application serves one or more wireless client applications. Such systems may be implemented using object-oriented programming environments that produce executable software objects. To facilitate object compatibility between the client and server, the software objects may be implemented in a platform independent manner, or the client and server systems may share common or compatible operating platforms. The clients and server may execute within separate machine or virtual machine runtime environments, within a single runtime environment, or a combination of the foregoing arrangements. The following description refers to an embodiment of a virtual machine-based runtime environment, though it will be obvious that the invention is not limited to such. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Applications typically comprise one or more object classes. Classes written in high-level programming languages, such as the Java&trade; programming language, may be compiled into machine independent bytecode class files. Alternatively, classes may be compiled into machine dependent, executable program code for direct execution by a given hardware platform. In the machine independent case, each class file contains code and data in a platform-independent format called the class file format. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The computer system acting as the execution vehicle contains a program called a virtual machine, which is responsible for executing the code in each class file. (A hardware system may also be used that directly executes bytecode of class files.) </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In a virtual machine environment, the classes of an application are loaded on demand from the network (stored on a server), or from a local file system, when first referenced during the application&apos;s execution. The virtual machine locates and loads each class file, parses the class file format, allocates memory for the class&apos;s various components, and links the class with other already loaded classes. This process makes the code in the class readily executable by the virtual machine. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates the compile and runtime environments for an example processing system. In the compile environment, a software developer creates source files <highlight><bold>400</bold></highlight>, which contain the programmer readable class definitions written in the source programming language, including data structures, method implementations and references to other classes. Source files <highlight><bold>400</bold></highlight> are provided to pre-compiler <highlight><bold>401</bold></highlight>, which compiles source files <highlight><bold>400</bold></highlight> into &ldquo;.class&rdquo; files <highlight><bold>402</bold></highlight> that contain bytecodes executable by a virtual machine. Bytecode class files <highlight><bold>402</bold></highlight> are stored (e.g., in temporary or permanent storage) on a server, and are available for download over a network. Alternatively, bytecode class files <highlight><bold>402</bold></highlight> may be stored locally in a directory on the client platform. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The runtime environment contains a virtual machine (VM) <highlight><bold>405</bold></highlight> which is able to execute bytecode class files and execute native operating system (&ldquo;O/S&rdquo;) calls to operating system <highlight><bold>409</bold></highlight> when necessary during execution. Virtual machine <highlight><bold>405</bold></highlight> provides a level of abstraction between the machine independence of the bytecode classes and the machine-dependent instruction set of the underlying computer hardware <highlight><bold>410</bold></highlight>, as well as the platform-dependent calls of operating system <highlight><bold>409</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Class loader and bytecode verifier (&ldquo;class loader&rdquo;) <highlight><bold>403</bold></highlight> is responsible for loading bytecode class files <highlight><bold>402</bold></highlight> and supporting class libraries <highlight><bold>404</bold></highlight> into virtual machine <highlight><bold>405</bold></highlight> as needed. Class loader <highlight><bold>403</bold></highlight> also verifies the bytecodes of each class file to maintain proper execution and enforcement of security rules. Within the context of runtime system <highlight><bold>408</bold></highlight>, either an interpreter <highlight><bold>406</bold></highlight> executes the bytecodes directly, or a &ldquo;just-in-time&rdquo; (JIT) compiler <highlight><bold>407</bold></highlight> transforms the bytecodes into machine code, so that they can be executed by the processor (or processors) in hardware <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The runtime system <highlight><bold>408</bold></highlight> of virtual machine <highlight><bold>405</bold></highlight> supports a general stack architecture. The manner in which this general stack architecture is supported by the underlying hardware <highlight><bold>410</bold></highlight> is determined by the particular virtual machine implementation, and reflected in the way the bytecodes are interpreted or JIT-compiled. Other elements of the runtime system include thread management (e.g., scheduling) and garbage collection mechanisms. </paragraph>
</section>
<section>
<heading lvl="1">Embodiment of Computer Execution Environment (Hardware) </heading>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> An embodiment of the invention can be implemented as computer software in the form of computer readable code executed on any computer processing platform, or in the form of software (e.g., bytecode class files) that is executable within a runtime environment running on such a processing platform. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment, including embedded devices (e.g., web phones, set-top boxes, etc.) and &ldquo;thin&rdquo; client processing environments (e.g., network computers (NC&apos;s), etc.). An example of a general computer system is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. The computer system described below is for purposes of example only. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, keyboard <highlight><bold>510</bold></highlight> and mouse <highlight><bold>511</bold></highlight> are coupled to a system bus <highlight><bold>518</bold></highlight>. The keyboard and mouse are for introducing user input to the computer system and communicating that user input to processor <highlight><bold>513</bold></highlight>. Other suitable input devices may be used in addition to, or in place of, the mouse <highlight><bold>511</bold></highlight> and keyboard <highlight><bold>510</bold></highlight>. I/O (input/output) unit <highlight><bold>519</bold></highlight> coupled to system bus <highlight><bold>518</bold></highlight> represents such I/O elements as a printer, A/V (audio/video) I/O, etc. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Computer <highlight><bold>500</bold></highlight> includes a video memory <highlight><bold>514</bold></highlight>, main memory <highlight><bold>515</bold></highlight> and mass storage <highlight><bold>512</bold></highlight>, all coupled to system bus <highlight><bold>518</bold></highlight> along with keyboard <highlight><bold>510</bold></highlight>, mouse <highlight><bold>511</bold></highlight> and processor <highlight><bold>513</bold></highlight>. The mass storage <highlight><bold>512</bold></highlight> may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus <highlight><bold>518</bold></highlight> may contain, for example, address lines for addressing video memory <highlight><bold>514</bold></highlight> or main memory <highlight><bold>515</bold></highlight>. The system bus <highlight><bold>518</bold></highlight> also includes, for example, a data bus for transferring data between and among the components, such as processor <highlight><bold>513</bold></highlight>, main memory <highlight><bold>515</bold></highlight>, video memory <highlight><bold>514</bold></highlight> and mass storage <highlight><bold>512</bold></highlight>. Alternatively, multiplexed data/address lines may be used instead of separate data and address lines. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In one embodiment of the invention, the processor <highlight><bold>513</bold></highlight> is a SPARC&trade; microprocessor from Sun Microsystems, Inc. or a microprocessor manufactured by Intel, such as the 80X86, or Pentium processor, or a microprocessor manufactured by Motorola, such as the 680X0 processor. However, any other suitable microprocessor or microcomputer may be utilized. Main memory <highlight><bold>515</bold></highlight> is comprised of dynamic random access memory (DRAM). Video memory <highlight><bold>514</bold></highlight> is a dual-video random access memory. One port of the video memory <highlight><bold>514</bold></highlight> is coupled to video amplifier <highlight><bold>516</bold></highlight>. The video amplifier <highlight><bold>516</bold></highlight> is used to drive the cathode ray tube (CRT) raster monitor <highlight><bold>517</bold></highlight>. Video amplifier <highlight><bold>516</bold></highlight> is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory <highlight><bold>514</bold></highlight> to a raster signal suitable for use by monitor <highlight><bold>517</bold></highlight>. Monitor <highlight><bold>517</bold></highlight> is a type of monitor suitable for displaying graphic images. Alternatively, the video memory could be used to drive a flat panel or liquid crystal display (LCD), or any other suitable data presentation device. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Computer <highlight><bold>500</bold></highlight> may also include a communication interface <highlight><bold>520</bold></highlight> coupled to bus <highlight><bold>518</bold></highlight>. Communication interface <highlight><bold>520</bold></highlight> provides a two-way data communication coupling via a network link <highlight><bold>521</bold></highlight> to a local network <highlight><bold>522</bold></highlight>. For example, if communication interface <highlight><bold>520</bold></highlight> is an integrated services digital network (ISDN) card or a modem, communication interface <highlight><bold>520</bold></highlight> provides a data communication connection to the corresponding type of telephone line, which comprises part of network link <highlight><bold>521</bold></highlight>. If communication interface <highlight><bold>520</bold></highlight> is a local area network (LAN) card, communication interface <highlight><bold>520</bold></highlight> provides a data communication connection via network link <highlight><bold>521</bold></highlight> to a compatible LAN. Communication interface <highlight><bold>520</bold></highlight> could also be a cable modem or wireless interface. In any such implementation, communication interface <highlight><bold>520</bold></highlight> sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Network link <highlight><bold>521</bold></highlight> typically provides data communication through one or more networks to other data devices. For example, network link <highlight><bold>521</bold></highlight> may provide a connection through local network <highlight><bold>522</bold></highlight> to local server computer <highlight><bold>523</bold></highlight> or to data equipment operated by an Internet Service Provider (ISP) <highlight><bold>524</bold></highlight>. ISP <highlight><bold>524</bold></highlight> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &ldquo;Internet&rdquo; <highlight><bold>525</bold></highlight>. Local network <highlight><bold>522</bold></highlight> and Internet <highlight><bold>525</bold></highlight> both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link <highlight><bold>521</bold></highlight> and through communication interface <highlight><bold>520</bold></highlight>, which carry the digital data to and from computer <highlight><bold>500</bold></highlight>, are exemplary forms of carrier waves transporting the information. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Computer <highlight><bold>500</bold></highlight> can send messages and receive data, including program code, through the network(s), network link <highlight><bold>521</bold></highlight>, and communication interface <highlight><bold>520</bold></highlight>. In the Internet example, remote server computer <highlight><bold>526</bold></highlight> might transmit a requested code for an application program through Internet <highlight><bold>525</bold></highlight>, ISP <highlight><bold>524</bold></highlight>, local network <highlight><bold>522</bold></highlight> and communication interface <highlight><bold>520</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The received code may be executed by processor <highlight><bold>51</bold></highlight> <highlight><bold>3</bold></highlight> as it is received, and/or stored in mass storage <highlight><bold>512</bold></highlight>, or other non-volatile storage for later execution. In this manner, computer <highlight><bold>500</bold></highlight> may obtain application code in the form of a carrier wave. Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code or data, or in which computer readable code or data may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Thus, an application framework for mobile devices have been described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents. 
<image file="US20030005019A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030005019A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030005019A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030005019A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030005019A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030005019A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030005019A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030005019A1-20030102-P00008.TIF" id="EMI-00008"></image>
<image file="US20030005019A1-20030102-P00009.TIF" id="EMI-00009"></image>
<image file="US20030005019A1-20030102-P00010.TIF" id="EMI-00010"></image>
<image file="US20030005019A1-20030102-P00011.TIF" id="EMI-00011"></image>
<image file="US20030005019A1-20030102-P00012.TIF" id="EMI-00012"></image>
<image file="US20030005019A1-20030102-P00013.TIF" id="EMI-00013"></image>
<image file="US20030005019A1-20030102-P00014.TIF" id="EMI-00014"></image>
<image file="US20030005019A1-20030102-P00015.TIF" id="EMI-00015"></image>
<image file="US20030005019A1-20030102-P00016.TIF" id="EMI-00016"></image>
<image file="US20030005019A1-20030102-P00017.TIF" id="EMI-00017"></image>
<image file="US20030005019A1-20030102-P00018.TIF" id="EMI-00018"></image>
<image file="US20030005019A1-20030102-P00019.TIF" id="EMI-00019"></image>
<image file="US20030005019A1-20030102-P00020.TIF" id="EMI-00020"></image>
<image file="US20030005019A1-20030102-P00021.TIF" id="EMI-00021"></image>
<image file="US20030005019A1-20030102-P00022.TIF" id="EMI-00022"></image>
<image file="US20030005019A1-20030102-P00023.TIF" id="EMI-00023"></image>
<image file="US20030005019A1-20030102-P00024.TIF" id="EMI-00024"></image>
<image file="US20030005019A1-20030102-P00025.TIF" id="EMI-00025"></image>
<image file="US20030005019A1-20030102-P00026.TIF" id="EMI-00026"></image>
<image file="US20030005019A1-20030102-P00027.TIF" id="EMI-00027"></image>
<image file="US20030005019A1-20030102-P00028.TIF" id="EMI-00028"></image>
<image file="US20030005019A1-20030102-P00029.TIF" id="EMI-00029"></image>
<image file="US20030005019A1-20030102-P00030.TIF" id="EMI-00030"></image>
<image file="US20030005019A1-20030102-P00031.TIF" id="EMI-00031"></image>
<image file="US20030005019A1-20030102-P00032.TIF" id="EMI-00032"></image>
<image file="US20030005019A1-20030102-P00033.TIF" id="EMI-00033"></image>
<image file="US20030005019A1-20030102-P00034.TIF" id="EMI-00034"></image>
<image file="US20030005019A1-20030102-P00035.TIF" id="EMI-00035"></image>
<image file="US20030005019A1-20030102-P00036.TIF" id="EMI-00036"></image>
<image file="US20030005019A1-20030102-P00037.TIF" id="EMI-00037"></image>
<image file="US20030005019A1-20030102-P00038.TIF" id="EMI-00038"></image>
<image file="US20030005019A1-20030102-P00039.TIF" id="EMI-00039"></image>
<image file="US20030005019A1-20030102-P00040.TIF" id="EMI-00040"></image>
<image file="US20030005019A1-20030102-P00041.TIF" id="EMI-00041"></image>
<image file="US20030005019A1-20030102-P00042.TIF" id="EMI-00042"></image>
<image file="US20030005019A1-20030102-P00043.TIF" id="EMI-00043"></image>
<image file="US20030005019A1-20030102-P00044.TIF" id="EMI-00044"></image>
<image file="US20030005019A1-20030102-P00045.TIF" id="EMI-00045"></image>
<image file="US20030005019A1-20030102-P00046.TIF" id="EMI-00046"></image>
<image file="US20030005019A1-20030102-P00047.TIF" id="EMI-00047"></image>
<image file="US20030005019A1-20030102-P00048.TIF" id="EMI-00048"></image>
<image file="US20030005019A1-20030102-P00049.TIF" id="EMI-00049"></image>
<image file="US20030005019A1-20030102-P00050.TIF" id="EMI-00050"></image>
<image file="US20030005019A1-20030102-P00051.TIF" id="EMI-00051"></image>
<image file="US20030005019A1-20030102-P00052.TIF" id="EMI-00052"></image>
<image file="US20030005019A1-20030102-P00053.TIF" id="EMI-00053"></image>
<image file="US20030005019A1-20030102-P00054.TIF" id="EMI-00054"></image>
<image file="US20030005019A1-20030102-P00055.TIF" id="EMI-00055"></image>
<image file="US20030005019A1-20030102-P00056.TIF" id="EMI-00056"></image>
<image file="US20030005019A1-20030102-P00057.TIF" id="EMI-00057"></image>
<image file="US20030005019A1-20030102-P00058.TIF" id="EMI-00058"></image>
<image file="US20030005019A1-20030102-P00059.TIF" id="EMI-00059"></image>
<image file="US20030005019A1-20030102-P00060.TIF" id="EMI-00060"></image>
<image file="US20030005019A1-20030102-P00061.TIF" id="EMI-00061"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An application framework for mobile devices comprising: 
<claim-text>a multi-tier architecture comprising a first tier capable of processing device-independent applications, a third tier providing a plurality of services to said first tier, a second tier for preprocessing communications between said first tier and said third tier thereby reducing processing requirements on said first tier; </claim-text>
<claim-text>a plurality of peer-to-peer communication layers between said third tier and said first tier through said second tier, said second tier providing protocol translation between said third tier and said first tier. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said plurality of peer-to-peer layers comprises: 
<claim-text>at least one physical data link layer </claim-text>
<claim-text>a network layer; </claim-text>
<claim-text>a transport layer; </claim-text>
<claim-text>a session layer; </claim-text>
<claim-text>a presentation layer; and </claim-text>
<claim-text>an applications layer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one physical data link layer comprises landline communication between said third tier and said second tier, and wireless communication between said second tier and said first tier. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said network layer uses Internet Protocol communication between said third tier and said second tier, and wireless applications protocol between said second tier and said first tier. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said transport layer uses transport control protocol between said third tier and said second tier, and wireless applications protocol between said second tier and said first tier. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said session layer uses hypertext transport protocol between said third tier and said second tier and amongst services in said third tier, and wireless applications protocol between said second tier and said first tier. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said presentation layer uses a markup language between said third tier and said second tier, and a wireless markup language between said second tier and said first tier. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said application layer prepares graphical data for presentation, said graphical data being available in any suitable graphical format and communicated from said third tier to said second tier, said second tier converting said graphical data to a wireless graphics format for transmission to said first tier. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first tier is a wireless device. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said wireless device is a cellular phone. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said wireless device is a palm device. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said wireless device includes a software architecture comprising: 
<claim-text>a real-time operating system layer; </claim-text>
<claim-text>a virtual machine layer having at least one system class; and </claim-text>
<claim-text>an application layer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said real-time operating system layer comprises: a wireless small device operating system; a plurality of linking and networking application programming interfaces; and an object for updating and installing software in said wireless device. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said application layer comprises: 
<claim-text>a platform specific framework object class; </claim-text>
<claim-text>a platform independent framework object class; and </claim-text>
<claim-text>at least one application object class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said at least one application object class may operate in any of a plurality of states, wherein said plurality of states comprises an initialization state, a background state, a foreground state, a destroy state, and a paused state. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The application framework of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising a manager object for managing each of said at least one application object class in said plurality of states. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. An application framework for mobile devices comprising: 
<claim-text>a multi-tier architecture comprising a client tier having a virtual machine capable of processing device-independent applications, a server tier providing a plurality of services to said client tier in the form of said device-independent applications, a gateway tier for preprocessing communications between said client tier and said server tier thereby reducing processing requirements on said client tier; </claim-text>
<claim-text>a plurality of peer-to-peer communication layers between said server tier and said client tier through said gateway tier, said gateway tier providing protocol translation between said server tier and said client tier; </claim-text>
<claim-text>a manager object in said client tier for managing said device-independent applications, each of said device-independent applications having a plurality of states, wherein said plurality of states comprises an initialization state, a background state, a foreground state, a destroy state, and a paused state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A multi-tier system for providing vendor-neutral communication to mobile devices comprising: 
<claim-text>a client device having a virtual machine capable of processing device-independent applications, a plurality of servers providing a plurality of services to said client device in the form of said device-independent applications, a gateway for preprocessing communications between said client device and said plurality of servers thereby reducing processing requirements on said client device; </claim-text>
<claim-text>a plurality of peer-to-peer communication layers between said plurality of servers and said client device through said gateway, said gateway providing protocol translation between said plurality of servers and said client device; </claim-text>
<claim-text>a manager object in said client device for managing said device-independent applications, each of said device-independent applications having a plurality of states, wherein said plurality of states comprises an initialization state, a background state, a foreground state, a destroy state, and a paused state.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005019A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005019A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005019A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005019A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005019A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005019A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
