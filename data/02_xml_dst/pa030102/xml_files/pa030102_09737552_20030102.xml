<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004705A1-20030102-M00001.NB SYSTEM "US20030004705A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00001.TIF SYSTEM "US20030004705A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00002.NB SYSTEM "US20030004705A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00002.TIF SYSTEM "US20030004705A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00003.NB SYSTEM "US20030004705A1-20030102-M00003.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00003.TIF SYSTEM "US20030004705A1-20030102-M00003.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00004.NB SYSTEM "US20030004705A1-20030102-M00004.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00004.TIF SYSTEM "US20030004705A1-20030102-M00004.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00005.NB SYSTEM "US20030004705A1-20030102-M00005.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00005.TIF SYSTEM "US20030004705A1-20030102-M00005.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00006.NB SYSTEM "US20030004705A1-20030102-M00006.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00006.TIF SYSTEM "US20030004705A1-20030102-M00006.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-M00007.NB SYSTEM "US20030004705A1-20030102-M00007.NB" NDATA NB>
<!ENTITY US20030004705A1-20030102-M00007.TIF SYSTEM "US20030004705A1-20030102-M00007.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00001.CDX SYSTEM "US20030004705A1-20030102-C00001.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00001.MOL SYSTEM "US20030004705A1-20030102-C00001.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00001.TIF SYSTEM "US20030004705A1-20030102-C00001.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00002.CDX SYSTEM "US20030004705A1-20030102-C00002.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00002.MOL SYSTEM "US20030004705A1-20030102-C00002.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00002.TIF SYSTEM "US20030004705A1-20030102-C00002.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00003.CDX SYSTEM "US20030004705A1-20030102-C00003.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00003.MOL SYSTEM "US20030004705A1-20030102-C00003.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00003.TIF SYSTEM "US20030004705A1-20030102-C00003.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00004.CDX SYSTEM "US20030004705A1-20030102-C00004.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00004.MOL SYSTEM "US20030004705A1-20030102-C00004.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00004.TIF SYSTEM "US20030004705A1-20030102-C00004.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00005.CDX SYSTEM "US20030004705A1-20030102-C00005.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00005.MOL SYSTEM "US20030004705A1-20030102-C00005.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00005.TIF SYSTEM "US20030004705A1-20030102-C00005.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00006.CDX SYSTEM "US20030004705A1-20030102-C00006.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00006.MOL SYSTEM "US20030004705A1-20030102-C00006.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00006.TIF SYSTEM "US20030004705A1-20030102-C00006.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00007.CDX SYSTEM "US20030004705A1-20030102-C00007.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00007.MOL SYSTEM "US20030004705A1-20030102-C00007.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00007.TIF SYSTEM "US20030004705A1-20030102-C00007.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-C00008.CDX SYSTEM "US20030004705A1-20030102-C00008.CDX" NDATA CDX>
<!ENTITY US20030004705A1-20030102-C00008.MOL SYSTEM "US20030004705A1-20030102-C00008.MOL" NDATA MOL>
<!ENTITY US20030004705A1-20030102-C00008.TIF SYSTEM "US20030004705A1-20030102-C00008.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-P00900.TIF SYSTEM "US20030004705A1-20030102-P00900.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-P00901.TIF SYSTEM "US20030004705A1-20030102-P00901.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00000.TIF SYSTEM "US20030004705A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00001.TIF SYSTEM "US20030004705A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00002.TIF SYSTEM "US20030004705A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00003.TIF SYSTEM "US20030004705A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00004.TIF SYSTEM "US20030004705A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00005.TIF SYSTEM "US20030004705A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00006.TIF SYSTEM "US20030004705A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00007.TIF SYSTEM "US20030004705A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00008.TIF SYSTEM "US20030004705A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00009.TIF SYSTEM "US20030004705A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00010.TIF SYSTEM "US20030004705A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00011.TIF SYSTEM "US20030004705A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00012.TIF SYSTEM "US20030004705A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00013.TIF SYSTEM "US20030004705A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00014.TIF SYSTEM "US20030004705A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00015.TIF SYSTEM "US20030004705A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00016.TIF SYSTEM "US20030004705A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00017.TIF SYSTEM "US20030004705A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00018.TIF SYSTEM "US20030004705A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00019.TIF SYSTEM "US20030004705A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00020.TIF SYSTEM "US20030004705A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00021.TIF SYSTEM "US20030004705A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00022.TIF SYSTEM "US20030004705A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00023.TIF SYSTEM "US20030004705A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00024.TIF SYSTEM "US20030004705A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00025.TIF SYSTEM "US20030004705A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00026.TIF SYSTEM "US20030004705A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00027.TIF SYSTEM "US20030004705A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00028.TIF SYSTEM "US20030004705A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00029.TIF SYSTEM "US20030004705A1-20030102-D00029.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00030.TIF SYSTEM "US20030004705A1-20030102-D00030.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00031.TIF SYSTEM "US20030004705A1-20030102-D00031.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00032.TIF SYSTEM "US20030004705A1-20030102-D00032.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00033.TIF SYSTEM "US20030004705A1-20030102-D00033.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00034.TIF SYSTEM "US20030004705A1-20030102-D00034.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00035.TIF SYSTEM "US20030004705A1-20030102-D00035.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00036.TIF SYSTEM "US20030004705A1-20030102-D00036.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00037.TIF SYSTEM "US20030004705A1-20030102-D00037.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00038.TIF SYSTEM "US20030004705A1-20030102-D00038.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00039.TIF SYSTEM "US20030004705A1-20030102-D00039.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00040.TIF SYSTEM "US20030004705A1-20030102-D00040.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00041.TIF SYSTEM "US20030004705A1-20030102-D00041.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00042.TIF SYSTEM "US20030004705A1-20030102-D00042.TIF" NDATA TIF>
<!ENTITY US20030004705A1-20030102-D00043.TIF SYSTEM "US20030004705A1-20030102-D00043.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004705</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09737552</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20001218</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/27</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>704</class>
<subclass>009000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus for factoring ambiguous finite state transducers</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60194493</doc-number>
<document-date>20000403</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Andre</given-name>
<family-name>Kempe</family-name>
</name>
<residence>
<residence-non-us>
<city>Biviers</city>
<country-code>FR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Xerox Corporation</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>OLIFF &amp; BERRIDGE</name-1>
<name-2></name-2>
<address>
<address-1>P O BOX 19928</address-1>
<city>ALEXANDRIA</city>
<state>VA</state>
<postalcode>22320</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method factors an ambiguous finite state transducer (FST) into two finite state transducers. The first FST is functional (i.e., unambiguous). The second FST retains the ambiguity of the original FST but is fail-safe (i.e., no failing paths) when applied to the output of the first FST. That is, the application of the second FST to an input string never leads to a state that does not provide a transition for the next symbol in the input. Subsequently, the first FST can be factorized into a left-sequential FST and a right-sequential FST that jointly represent a bi-machine. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> Priority is claimed from U.S. Provisional Application No. 60/194,493, filed Apr. 3, 2000 by the same inventor and assignee, which is hereby incorporated herein by reference. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Cross-reference is made to U.S. patent application Ser. Nos.: 09/BBB,BBB, entitled &ldquo;Method And Apparatus For Factoring Unambiguous Finite State Transducers&rdquo; (Attorney Docket No.D/A0052Q); 09/CCC,CCC, entitled &ldquo;Method And Apparatus For Aligning Ambiguity In Finite State Transducers&rdquo; (Attorney Docket No. D/A0052Q1); 09/DDD,DDD, entitled &ldquo;Method And Apparatus For Factoring Finite State Transducers With Unknown Symbols&rdquo; (Attorney Docket No. D/A0052Q2); 09/EEE,EEE, entitled &ldquo;Method And Apparatus For Extracting Infinite Ambiguity When Factoring Finite State Transducers&rdquo; (Attorney Docket No. D/A0052Q3); 09/FFF,FFT, entitled &ldquo;Method And Apparatus For Reducing The Intermediate Alphabet Occurring Between Cascaded Finite State Transducers&rdquo; (Attorney Docket No. D/A0052Q4); 09/GGG,GGG, entitled &ldquo;Method And Apparatus For Extracting Short Runs Of Ambiguity From Finite State Transducers&rdquo; (Attorney Docket No. D/A0052Q5), which are all hereby incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The invention relates to finite-state language processing, and more particularly to methods for efficiently processing finite-state networks in language processing and other applications. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Many basic steps in language processing, ranging from tokenization to phonological and morphological analysis, disambiguation, spelling correction, and shallow parsing can be performed efficiently by means of finite-state transducers. Such transducers are generally compiled from regular expressions, a formal language for representing sets and relations. Although regular expressions and methods for compiling them into automata have been part of elementary computer science for decades, the application of finite-state transducers to natural-language processing has given rise to many extensions to the classical regular-expression calculus. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The term language is used herein in a general sense to refer to a set of strings of any kind. A string is a concatenation of zero or more symbols. In the examples set forth below, the symbols are, in general, single characters such as &ldquo;a&rdquo;, but user-defined multicharacter symbols such as &ldquo;&plus;Noun&rdquo; are also possible. Multicharacter symbols are considered as atomic entities rather than as concatenations of single-character strings. A string that contains no symbols at all is called the empty string and the language that contains the empty string but no other strings is known as the empty string language. A language that contains no strings at all, not even the empty string, is called the empty language or null language. The language that contains every possible string of any length is called the universal language. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A set of ordered string pairs such as &lcub;&lt;&ldquo;a&rdquo;, &ldquo;bb&rdquo;&gt;, &lt;&ldquo;cd&rdquo;, &ldquo;&rdquo;&gt;&rcub; is called a relation. The first member of a pair is called the upper string, and the second member is called the lower string. A string-to-string relation is a mapping between two languages: the upper language and the lower language. They correspond to what is usually called the domain and the range of a relation. In this case, the upper language is &lcub;&ldquo;a&rdquo;, &ldquo;cd&rdquo;&rcub; and the lower language is &lcub;&ldquo;bb&rdquo;, &ldquo;&rdquo;&rcub;. A relation such as &lcub;&lt;&ldquo;a&rdquo;, &ldquo;a&rdquo;&gt;&rcub; in which every pair contains the same string twice is called an identity relation. If a relation pairs every string with a string that has the same length, the relation is an equal-length relation. Every identity relation is obviously an equal-length relation. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Finite-state automata are considered to be networks, or directed graphs that consist of states and labeled arcs. A network contains a single initial state, also called the start state, and any number of final states. In the figures presented herewith, states are represented as circles and arcs are represented as arrows. In the included diagrams, the start state is always the leftmost state and final states are marked by a double circle. Each state acts as the origin for zero or more arcs leading to some destination state. A sequence of arcs leading from the initial state to a final state is called a path. An arc may be labeled either by a single symbol such as &ldquo;a&rdquo; or a symbol pair such as &ldquo;a:b&rdquo;, where &ldquo;a&rdquo; designates the symbol on the upper side of the arc and &ldquo;b&rdquo; the symbol on the lower side. If all the arcs of a network are labeled by a single symbol, the network is called a simple automaton; if at least one label is a symbol pair the network is a transducer. Simple finite-state automata and transducers will not be treated as different types of mathematical objects herein. The framework set forth herein reflects closely the data structures in the Xerox implementation of finite-state networks. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> A few simple examples illustrating some linguistic applications of finite-state networks are set forth below. The following sections will describe how such networks can be constructed. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Every path in a finite-state network encodes a string or an ordered pair of strings. The totality of paths in a network encodes a finite-state language or a finite-state relation. For example, the network illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> encodes the language &lcub;&ldquo;clear&rdquo;, &ldquo;clever&rdquo;, &ldquo;ear&rdquo;, &ldquo;ever&rdquo;, &ldquo;fat&rdquo;, &ldquo;fatter&rdquo;&rcub;. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Each state in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> has a number, thereby facilitating references to paths through the network. There is a path for each of the six words in the language. For example, the path &lt;0-e-3-v-9-e-4-r-5&gt; represents the word &ldquo;ever&rdquo;. A finite-state network is a very efficient encoding for a word list because all words beginning and ending in the same way can share a part of the network and every path is distinct from every other path. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> If the number of words in a language is finite, then the network that encodes it is acyclic; that is, no path in the network loops back onto itself. Such a network also provides a perfect hash function for the language, a function that assigns or maps each word to a unique number in the range from 0 to n&minus;1, where n is the number of paths in the network. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The network illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an example of a lexical transducer. It encodes the relation &lcub;&lt;&ldquo;leaf&plus;NN&rdquo;, &ldquo;leaf&rdquo;&gt;, &lt;&ldquo;leaf&plus;NNS&rdquo;, &ldquo;leaves&rdquo;&gt;, &lt;&ldquo;left&plus;JJ&rdquo;, &ldquo;left&rdquo;&gt;, &lt;&ldquo;leave&plus;NN&rdquo;, &ldquo;leave&rdquo;&gt;, &lt;&ldquo;leave&plus;NNS&rdquo;, &ldquo;leaves&rdquo;&gt;, &lt;&ldquo;leave&plus;VB&rdquo;, &ldquo;leave&rdquo;&gt;, &lt;&ldquo;leave&plus;VBZ&rdquo;, &ldquo;leaves&rdquo;&gt;, &lt;&ldquo;leave&plus;VBD&rdquo;, &ldquo;left&rdquo;&gt;&rcub;. The substrings beginning with &ldquo;&plus;&rdquo; are multicharacter symbols. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In order to make the diagrams less cluttered, it is traditional to combine several arcs into a single multiply-labeled arc. For example, the arc from state 5 to state 6 abbreviates four arcs that have the same origin and destination but a different label: &ldquo;&plus;NN:0&rdquo;, &ldquo;&plus;NNN:s&rdquo;, &ldquo;&plus;VB:0&rdquo;, &ldquo;&plus;VBZ:s&rdquo;. In this example, &ldquo;0&rdquo; is the epsilon symbol, standing for the empty string. Another important convention illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is that identity pairs such as &ldquo;e:e&rdquo; are represented as a single symbol &ldquo;e&rdquo;. Because of this convention, the network in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> could also be interpreted as a transducer for the identity relation on the language. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The lower language of the lexical transducer in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> consists of inflected surface forms &ldquo;leaf&rdquo;, &ldquo;leave&rdquo;, &ldquo;leaves&rdquo;, and &ldquo;left&rdquo; (i.e., language to be modeled). The upper language consists of the corresponding lexical forms or lemmas, each containing a citation form of the word followed by a part-of-speech tag. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Lexical transducers can be used for analysis or for generation. For example, to find the analyses for the word &ldquo;leaves&rdquo;, one needs to locate the paths that contain the symbols &ldquo;1&rdquo;, &ldquo;e&rdquo;, &ldquo;v&rdquo;, &ldquo;e&rdquo;, and &ldquo;s&rdquo; as such on the lower side of the arc label. The network in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> contains three such paths: </paragraph>
<paragraph id="P-0018" lvl="2"><number>&lsqb;0018&rsqb;</number> 0-1-1-e-2-a-3-v-4-e-5-&plus;NNS:s-6, </paragraph>
<paragraph id="P-0019" lvl="2"><number>&lsqb;0019&rsqb;</number> 0-1-1-e-2-a-3-v-4-e-5-&plus;VBZ:s-6, </paragraph>
<paragraph id="P-0020" lvl="2"><number>&lsqb;0020&rsqb;</number> 0-1-1-e-2-a-3-f:v-8-&plus;NNS:e-9-0:s-6. </paragraph>
<paragraph id="P-0021" lvl="7"><number>&lsqb;0021&rsqb;</number> The result of the analysis is obtained by concatenating the symbols on the upper side of the paths: &ldquo;leave&plus;NNS&rdquo;, &ldquo;leave&plus;VBZ&rdquo;, and &ldquo;leaf&plus;NNS&rdquo;. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The process of generating a surface form from a lemma, say &ldquo;leave&plus;VBD&rdquo;, is the same as for analysis except that the input form is matched against the upper side arc labels and the output is produced from the opposite side of the successful path or paths. In the case at hand, there is only one matching path: </paragraph>
<paragraph id="P-0023" lvl="2"><number>&lsqb;0023&rsqb;</number> 0-1-1-e-2-a:f-12-v:t-13-e:0-14-&plus;VBD:0-6 </paragraph>
<paragraph id="P-0024" lvl="7"><number>&lsqb;0024&rsqb;</number> This path maps &ldquo;leave&plus;VBD&rdquo; to &ldquo;left&rdquo;, and vice versa. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The term &ldquo;apply&rdquo; is used herein to describe the process of finding the path or paths that match a given input and returning the output. As the example above shows, a transducer can be applied downward or upward. There is no privileged input side. In the implementation described here, transducers are inherently bi-directional. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Lexical transducers provide a very efficient method for morphological analysis and generation. A comprehensive analyzer for a language such as English, French, or German contains tens of thousands of states and hundreds of thousands of arcs, but it can be compressed to a relatively small size in the range of approximately 500 KB to 2 MB. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A relation may contain an infinite number of ordered pairs. One example of such a relation is the mapping from all lowercase strings to the corresponding uppercase strings. This relation contains an infinite number of pairs such as &lt;&ldquo;abc&rdquo;, &ldquo;ABC&rdquo;&gt;, &lt;&ldquo;xyzzy&rdquo;, &ldquo;XYZZY&rdquo;&gt;, and so on. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> sketches the corresponding lower/upper case transducer. The path that relates &ldquo;xyzzy&rdquo; to &ldquo;XYZZY&rdquo; cycles many times through the single state of the transducer. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows that path in linearized form. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The lower/upper case relation may be thought of as the representation of a simple orthographic rule. In fact, all kinds of string-changing rules may be viewed in this way, that is, as infinite string-to-string relations. The networks that represent phonological rewrite rules, two-level rules, or the GEN relation in Optimality Theory are of course in general more complex than the simple transducer illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may also be interpreted in another way, that is, as representing the application of the upper/lower case rule to the string &ldquo;xyzzy&rdquo;. In fact, rule application is formally a composition of two relations; in this case, the identity relation on the string &ldquo;xyzzy&rdquo; and the upper/lower case relation in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> A composition is an operation on two relations. If one relation contains the pair &lt;x, y&gt; and the other relation contains the pair &lt;y, z&gt;, the relation resulting from composing the two will contain the pair &lt;x, z&gt;. Composition brings together the &ldquo;outside&rdquo; components of the two pairs and eliminates the common one in the middle. For example, the composition of &lcub;&lt;&ldquo;leave&plus;VBD&rdquo;, &ldquo;left&rdquo;&gt;&rcub; with the lower/upper case relation yields the relation &lcub;&lt;&ldquo;leave&plus;VBD&rdquo;, &ldquo;LEFT&rdquo;&gt;&rcub;. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> It is useful to have a general idea of how composition is carried out when string-to-string relations are represented by finite-state networks. Composition is advantageously thought of as a two-step procedure. First, the paths of the two networks that have a matching string in the middle are lined up and merged, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. For the sake of perspicuity, the upper and lower symbols are shown explicitly on different sides of the arc except that zero (i.e., epsilon) is represented by a blank. The string &ldquo;left&rdquo; is then eliminated in the middle, yielding the transducer in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> that directly maps &ldquo;leave&plus;VBD&rdquo; to &ldquo;LEFT&rdquo;. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Once rule application is thought of as composition, it immediately can be seen that a rule can be applied to several words, or even infinitely many words at the same time if the words are represented by a finite-state network. Lexical transducers are typically created by composing a set of transducers for orthographic rules with a transducer encoding the source lexicon. Two rule transducers can also be composed with one another to yield a single transducer that gives the same result as the successive application of the original rules. This is a well-known fundamental insight in computational phonology. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The formal properties of finite-state automata are considered briefly below. All the networks presented in this background have the three important properties defined Table 1.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="70PT" align="left"/>
<colspec colname="2" colwidth="133PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>Epsilon-free</entry>
<entry>There are no arcs labeled with the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>epsilon (&egr;) symbol alone.</entry>
</row>
<row>
<entry></entry>
<entry>Deterministic</entry>
<entry>No state has more than one outgoing</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>arc with the same label.</entry>
</row>
<row>
<entry></entry>
<entry>Minimal</entry>
<entry>There is no other network with</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>exactly the same paths that has</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>fewer states.</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> If a network encodes a regular language and if it is epsilon-free, deterministic and minimal, the network is guaranteed to be the best encoding for that language in the sense that any other network for the same language has the same number of states and arcs and differs only with respect to the order of the arcs, which generally is irrelevant. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The situation is more complex in the case of regular relations. Even if a transducer is epsilon-free, deterministic, and minimal in the sense of Table 1, there may still be another network with fewer states and arcs for the same relation. If the network has arcs labeled with a symbol pair that contains an epsilon on one side, these one-sided epsilons could be distributed differently, or perhaps even eliminated, and this might reduce the size of the network. For example, the two networks in <cross-reference target="DRAWINGS">FIGS. 7 and 8</cross-reference> encode the same relation, &lcub;&lt;&ldquo;aa&rdquo;, &ldquo;a&rdquo;&gt;, &lt;&ldquo;ab&rdquo;, &ldquo;ab&rdquo;&gt;&rcub;. They are both deterministic and minimal but one is smaller than the other due to a more optimal placement of the one-sided epsilon transition. In the general case there is no way to determine whether a given transducer is the best encoding for an arbitrary relation. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> For transducers, the intuitive notion of determinism makes sense only with respect to a given direction of application. But there are still two ways to think about determinism, as shown in Table 2.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="147PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center">TABLE 2</entry>
</row>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>Functional</entry>
<entry>For any input there is at most one output.</entry>
</row>
<row>
<entry></entry>
<entry>Sequential</entry>
<entry>No state has more than one arc with the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>same symbol on the input side.</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Although the transducers in <cross-reference target="DRAWINGS">FIGS. 7 and 8</cross-reference> are functional (i.e., unambiguous) in both directions, the one in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is not sequential in either direction. When it is applied downward, to the string &ldquo;aa&rdquo;, there are two paths that have to be pursued initially, even though only one will succeed. The same is true in the other direction as well. In other words, there is local ambiguity at the start state because &ldquo;a&rdquo; may have to be deleted or retained. In this case, the ambiguity is resolved by the next input symbol one step later. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> If the relation itself is unambiguous in the relevant direction and if all the ambiguities in the transducer resolve themselves within some fixed number of steps, the transducer is called sequentiable. That is, an equivalent sequential transducer in the same direction can be constructed. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows the downward sequentialized version of the transducer in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The sequentialization process combines the locally ambiguous paths into a single path that does not produce any output until the ambiguity has been resolved. In the case at hand, the ambiguous path contains just one arc. When a &ldquo;b&rdquo; is seen, the delayed &ldquo;a&rdquo; is produced as output and then the &ldquo;b&rdquo; itself in a one-sided epsilon transition. Otherwise, an &ldquo;a&rdquo; must follow, and in this case there is no delayed output. In effect, the local ambiguity is resolved with one symbol lookahead. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The network in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is sequential but only in the downward direction. Upward sequentialization produces the network shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, which clearly is the best encoding for this simple relation. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Even if a transducer is functional, it may well be unsequentiable if the resolution of a local ambiguity requires an unbounded amount of lookahead. For example, the simple transducer illustrated in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> cannot be sequentialized in either direction. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> This transducer reduces any sequence of &ldquo;a&rdquo;s that is preceded by a &ldquo;b&rdquo; to an epsilon or copies it to the output unchanged depending on whether the sequence of as is followed by a &ldquo;c&rdquo;. A sequential transducer would have to delay the decision until it reached the end of an arbitrarily long sequence of &ldquo;a&rdquo;s. It is clearly impossible for any finite-state device to accumulate an unbounded amount of delayed output. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> However, in such cases it is always possible to split the functional but unsequentiable transducer into a bimachine, as will be described in further detail below. A bimachine for an unambiguous relation consists of two sequential transducers that are applied in a sequence. The first half of the bimachine processes the input from left-to-right; the second half of the bimachine processes the output of the first half from right-to-left. Although the application of a bimachine requires two passes, a bimachine is in general more efficient to apply than the original transducer because the two components of the bimachine are both sequential. There is no local ambiguity in either the left-to-right or the right-to-left half of the bimachine if the original transducer is unambiguous in the given direction of application. <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference> together show a bimachine derived from the transducer in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The left-to-right half of the bimachine (<cross-reference target="DRAWINGS">FIG. 11</cross-reference>) is only concerned about the left context of the replacement. A string of &ldquo;a&rdquo;s that is preceded by &ldquo;b&rdquo; is mapped to a string of &ldquo;a1&rdquo;s, an auxiliary symbol (or diacritic) to indicate that the left context has been matched. The right-to-left half of the bimachine (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>) maps each instance of the auxiliary symbol &ldquo;a1&rdquo; either to &ldquo;a&rdquo; or to an epsilon depending on whether it is preceded by &ldquo;c&rdquo; when the intermediate output is processed from right-to-left. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The bimachine in <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference> encodes exactly the same relation as the transducer in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. The composition of the left-to-right half (<cross-reference target="DRAWINGS">FIG. 11</cross-reference>) of the bimachine with the reverse of the right-to-left half (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>) yields the original single transducer (<cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In accordance with the invention, there is provided a method and apparatus for factoring an ambiguous finite-state transducer (FST) into an unambiguous FST (i.e., functional) and a fail-safe FST (i.e., there are no failing paths). In addition, the functional transducer can be factored into a left-sequential FST and a right-sequential FST that jointly represent a bimachine. Advantageously, by factoring the ambiguous FST according to the present invention, input strings may be processed more efficiently by lexical transducers by not following failing paths. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In accordance with one aspect of the invention, the method, and apparatus therefor, for factoring an ambiguous FST into an unambiguous FST and a fail-safe FST includes the step of preprocessing the ambiguous FST to create a fully-unfolded FST having a plurality of states and arcs, with each arc having one input symbol and one output symbol. Subsequently, the plurality of arcs of the fully-unfolded FST are grouped into ambiguity fields. If an arc is outside of any ambiguity field, the arc is copied to the unambiguous FST, and in addition the arc is copied to the fail-safe FST while replacing the corresponding input symbol with the corresponding output symbol. However, if an arc is inside an ambiguity field, the arc is copied to the unambiguous FST while replacing the corresponding output symbol with a diacritic, and in addition the arc is copied to the fail-safe FST while replacing the corresponding input symbol with the diacritic.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> These and other aspects of the invention will become apparent from the following description read in conjunction with the accompanying drawings wherein the same reference numerals have been applied to like parts and in which: </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example of a simple finite state automaton; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example of a lexical transducer; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an example of a lower/upper case transducer; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example of a path in a lower/upper case transducer; </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an example of merging two paths; </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the result of composing the networks shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a transducer that encodes the relation &lsqb;a:0 a&verbar;a b&rsqb;; </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a transducer that encodes the relation &lsqb;a &lsqb;a:0&verbar;b&rsqb;&rsqb;; </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a transducer that encodes the relation &lsqb;a:0 &lsqb;a&verbar;b:a 0:b&rsqb;&rsqb;; </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates a transducer that encodes the relation &lsqb;a&plus;&commat;&minus;&gt;0&verbar;&verbar;b<highlight><subscript>&minus;</subscript></highlight>c&rsqb;; </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference> together illustrate a bimachine derived from the transducer shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>; </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates an example of an ambiguous FST having arcs <highlight><bold>100</bold></highlight>-<highlight><bold>115</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>12</bold></highlight>; </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates a first factor of the FST shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> or unambiguous FST, having arcs <highlight><bold>200</bold></highlight>-<highlight><bold>209</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>9</bold></highlight>; </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates a second factor of the FST shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> or fail-safe FST, having arcs <highlight><bold>300</bold></highlight>-<highlight><bold>311</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>6</bold></highlight>, which forms part of a trimachine that includes the FSTs (Finites State Transducers) in FIGS. <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>; </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates a left-sequential FST with arcs <highlight><bold>400</bold></highlight>-<highlight><bold>406</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>6</bold></highlight>, which forms part of a trimachine that includes the FSTs in FIGS. <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> and a modified bimachine that includes the FSTs in <cross-reference target="DRAWINGS">FIGS. 16 and 18</cross-reference>; </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates a right-sequential FST with arcs <highlight><bold>500</bold></highlight>-<highlight><bold>508</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>, which forms part of a trimachine that includes the FSTs in FIGS. <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>; </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> illustrates an ambiguous right-to-left FST with arcs <highlight><bold>600</bold></highlight>-<highlight><bold>614</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>11</bold></highlight> that is fail-safe for the output of the left-sequential FST shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>; </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a flow diagram that sets forth the steps for factorizing ambiguous FSTs; </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates an ambiguous FST with arcs <highlight><bold>700</bold></highlight>-<highlight><bold>713</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>; </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> illustrates a minimal FST with arcs <highlight><bold>800</bold></highlight>-<highlight><bold>816</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>10</bold></highlight> of the FST shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>; </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> illustrates a left-deterministic input finite-state automaton with arcs <highlight><bold>900</bold></highlight>-<highlight><bold>911</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>7</bold></highlight> built from the minimal FST shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>; </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> illustrates a left-unfolded FST with arcs <highlight><bold>1000</bold></highlight>-<highlight><bold>1022</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>13</bold></highlight>; </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> illustrates a right-deterministic input finite-state automaton with arcs <highlight><bold>1200</bold></highlight>-<highlight><bold>1213</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>9</bold></highlight>; </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> illustrates a fully (i.e., left and right) unfolded FST with arcs <highlight><bold>1300</bold></highlight>-<highlight><bold>1329</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>17</bold></highlight>; </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> illustrates a first preliminary factor or non-minimal functional FST with arcs <highlight><bold>1400</bold></highlight>-<highlight><bold>1429</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>17</bold></highlight>; </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> illustrates a second preliminary factor or non-minimal ambiguous FST with arcs <highlight><bold>1500</bold></highlight>-<highlight><bold>1529</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>17</bold></highlight>; </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> illustrates a first final factor or minimal functional FST (i.e., unambiguous FST) with arcs <highlight><bold>1600</bold></highlight>-<highlight><bold>1616</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>9</bold></highlight>; </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> illustrates a second final factor or minimal ambiguous FST (i.e., fail-safe FST) without failing paths with arcs <highlight><bold>1700</bold></highlight>-<highlight><bold>1710</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>6</bold></highlight>; </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> illustrates a functional FST, with states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, that describes a mapping such that every &ldquo;a&rdquo; that occurs between an &ldquo;x&rdquo; and a &ldquo;y&rdquo; on the input side is replaced by a &ldquo;b&rdquo; on the output side; </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 31 and 32</cross-reference> illustrate the functional FST shown in <cross-reference target="DRAWINGS">FIG. 30</cross-reference> converted into a bimachine B consisting of a left-deterministic automaton A<highlight><subscript>1</subscript></highlight>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>2</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 31</cross-reference> and a right-deterministic automaton A<highlight><subscript>2</subscript></highlight>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>1</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 32</cross-reference>; </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 33</cross-reference> illustrates a left-sequential FST T<highlight><subscript>1</subscript></highlight>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>2</bold></highlight>, that can be obtained from the left-deterministic automaton A<highlight><subscript>1 </subscript></highlight>shown in <cross-reference target="DRAWINGS">FIG. 31</cross-reference>; </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> illustrates a right-sequential FST T<highlight><subscript>2</subscript></highlight>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>1</bold></highlight>, that can be obtained from the right-deterministic automaton A<highlight><subscript>2 </subscript></highlight>shown in <cross-reference target="DRAWINGS">FIG. 33</cross-reference>; </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 35</cross-reference> illustrates a functional FST with epsilon (&egr;) on the input side, with arcs <highlight><bold>1900</bold></highlight>-<highlight><bold>1910</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>; </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 36</cross-reference> illustrates a FST, with arcs <highlight><bold>2000</bold></highlight>-<highlight><bold>2006</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight>, and with epsilon removal by output symbol concatenation of the FST shown in <cross-reference target="DRAWINGS">FIG. 35</cross-reference>; </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 37 and 38</cross-reference> illustrate the factorization of the FST shown in <cross-reference target="DRAWINGS">FIG. 36</cross-reference> into a left-sequential FST, with states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 37</cross-reference> and a right-sequential FST, with states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 38</cross-reference>; </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 39</cross-reference> is a flow diagram that sets forth the steps for factoring unambiguous FSTs; </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 40</cross-reference> illustrates a left-sequential FST produced using the steps set forth in <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>2</bold></highlight>; </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 41</cross-reference> illustrates a right-sequential FST produced using the steps set forth in <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, with states <highlight><bold>0</bold></highlight>-<highlight><bold>1</bold></highlight>; </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 42</cross-reference> is a flow diagram that sets forth the steps for aligning ambiguity in FSTs; </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 43</cross-reference> illustrates the FST shown in <cross-reference target="DRAWINGS">FIG. 30</cross-reference> that is concatenated with boundary symbols on the right side and minimized, with arcs <highlight><bold>2200</bold></highlight>-<highlight><bold>2211</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>9</bold></highlight>; </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 44</cross-reference> illustrates a left-deterministic input automaton of the FST shown in <cross-reference target="DRAWINGS">FIG. 43</cross-reference>, with arcs <highlight><bold>2300</bold></highlight>-<highlight><bold>2307</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>5</bold></highlight>; </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 45</cross-reference> illustrates states in the FST shown in <cross-reference target="DRAWINGS">FIG. 43</cross-reference> with aligned ambiguity; </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 46</cross-reference> illustrates a non-minimal FST, with arcs <highlight><bold>2500</bold></highlight>-<highlight><bold>2517</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>, and with aligned ambiguity of the FST shown in <cross-reference target="DRAWINGS">FIG. 30</cross-reference>; </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 47</cross-reference> illustrates a minimal FST, with arcs <highlight><bold>2600</bold></highlight>-<highlight><bold>2612</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>10</bold></highlight>, and with aligned ambiguity of the FST shown in <cross-reference target="DRAWINGS">FIG. 30</cross-reference>; </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 48</cross-reference> illustrates a left-sequential FST, with arcs <highlight><bold>2700</bold></highlight>-<highlight><bold>2708</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>7</bold></highlight>, and with aligned ambiguity of the FST shown in <cross-reference target="DRAWINGS">FIG. 47</cross-reference>; </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 49</cross-reference> illustrates a right-sequential FST, with arcs <highlight><bold>2800</bold></highlight>-<highlight><bold>2812</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>9</bold></highlight>, and with aligned ambiguity of the FST shown in <cross-reference target="DRAWINGS">FIG. 47</cross-reference>; </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 50</cross-reference> is a flow diagram which sets forth the steps for factoring FSTs with unknown symbols; </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 51</cross-reference> illustrates a regular relation, with arcs <highlight><bold>3000</bold></highlight>-<highlight><bold>3012</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, in which every symbol other than &ldquo;x&rdquo; or &ldquo;y&rdquo; that occurs between &ldquo;x&rdquo; and &ldquo;y&rdquo; on the input side, is replaced by the symbol &ldquo;a&rdquo; on the output side; </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 52</cross-reference> illustrates a left-sequential FST, with arcs <highlight><bold>3100</bold></highlight>-<highlight><bold>3108</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>2</bold></highlight>, in which the unknown symbols is replaced according to the flow diagram set forth in <cross-reference target="DRAWINGS">FIG. 50</cross-reference>; </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 53</cross-reference> illustrates a right-sequential FST, with arcs <highlight><bold>3200</bold></highlight>-<highlight><bold>3211</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, in which the unknown symbol is replaced according to the flow diagram set forth in <cross-reference target="DRAWINGS">FIG. 50</cross-reference>; </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 54</cross-reference> illustrates an FST, with arcs <highlight><bold>3300</bold></highlight>-<highlight><bold>3306</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>5</bold></highlight>, in which infinite ambiguity is described by epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 55</cross-reference> illustrates a first factor, with arcs <highlight><bold>3400</bold></highlight>-<highlight><bold>3404</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>5</bold></highlight>, of the FST shown in <cross-reference target="DRAWINGS">FIG. 54</cross-reference> that emits diacritics; </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 56</cross-reference> illustrates a second factor, with arcs <highlight><bold>3500</bold></highlight>-<highlight><bold>3504</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, of the FST shown in <cross-reference target="DRAWINGS">FIG. 54</cross-reference> that maps the diacritics, emitted in the first factor illustrated in <cross-reference target="DRAWINGS">FIG. 55</cross-reference>, to epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 57</cross-reference> illustrates an FST, with arcs <highlight><bold>3600</bold></highlight>-<highlight><bold>3604</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, in which infinite ambiguity is described by epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 58</cross-reference> is a flow diagram that sets forth the steps for extracting infinite ambiguity when factoring finite state transducers; </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 59</cross-reference> is a flow diagram that sets forth the step <highlight><bold>3718</bold></highlight> for building the first factor in the flow diagram in <cross-reference target="DRAWINGS">FIG. 58</cross-reference> in greater detail; </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 60</cross-reference> is a flow diagram that sets forth the step <highlight><bold>3720</bold></highlight> for building the second factor in the flow diagram in <cross-reference target="DRAWINGS">FIG. 58</cross-reference> in greater detail; </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 61</cross-reference> illustrates an FST, with arcs <highlight><bold>3800</bold></highlight>-<highlight><bold>3806</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight>, and with boundaries; </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 62</cross-reference> illustrates preparation of a first factor &Xgr;<highlight><subscript>1</subscript></highlight>, with arcs <highlight><bold>3900</bold></highlight>-<highlight><bold>3906</bold></highlight> and <highlight><bold>4000</bold></highlight>-<highlight><bold>4002</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight> and 1 p-3 p, from the form of the FST shown in <cross-reference target="DRAWINGS">FIG. 61</cross-reference> that has diacritics instead of epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 63</cross-reference> illustrates preparation of a second factor &Xgr;<highlight><subscript>2</subscript></highlight>, with arcs <highlight><bold>4100</bold></highlight>-<highlight><bold>4112</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>4</bold></highlight>, from the form of the FST shown in <cross-reference target="DRAWINGS">FIG. 61</cross-reference> that maps diacritics to epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 64</cross-reference> illustrates the first factor &Xgr;<highlight><subscript>1</subscript></highlight>, with arcs <highlight><bold>4200</bold></highlight>-<highlight><bold>4207</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>7</bold></highlight>, from the form of the FST shown in <cross-reference target="DRAWINGS">FIG. 61</cross-reference> that emits diacritics; </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 65</cross-reference> illustrates the second factor &Xgr;<highlight><subscript>2 </subscript></highlight>, with arcs <highlight><bold>4300</bold></highlight>-<highlight><bold>431</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>, from the form of the FST shown in <cross-reference target="DRAWINGS">FIG. 61</cross-reference> that maps diacritics to epsilon loops (&egr;-loops); </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 66</cross-reference> is a flow diagram that sets forth the steps for reducing the intermediate alphabet occurring between two FSTs; </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 67</cross-reference> illustrates the manner in which to extract short runs of ambiguity from four FSTs operate in a cascade; </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 68</cross-reference> illustrates part of a second factor of a FST, with arcs <highlight><bold>4500</bold></highlight>-<highlight><bold>4502</bold></highlight>, <highlight><bold>4510</bold></highlight>-<highlight><bold>4513</bold></highlight>, <highlight><bold>4520</bold></highlight>-<highlight><bold>4522</bold></highlight>; </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 69</cross-reference> illustrates part of a second factor of a FST, in which the second factor has reduced diacritics, with arcs <highlight><bold>4600</bold></highlight>, <highlight><bold>4601</bold></highlight>, <highlight><bold>4610</bold></highlight>, <highlight><bold>4611</bold></highlight>, <highlight><bold>4620</bold></highlight>, and <highlight><bold>4621</bold></highlight>; </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 70</cross-reference> illustrates the FST, with arcs <highlight><bold>4700</bold></highlight>-<highlight><bold>4704</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>5</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 55</cross-reference> with a reduced set of intermediate diacritics; </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 71</cross-reference> illustrates the FST, with arcs <highlight><bold>4800</bold></highlight>-<highlight><bold>4804</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 56</cross-reference> with a reduced set of intermediate diacritics; </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 72</cross-reference> is a flow diagram that sets forth the steps for extracting short runs of ambiguity from FSTs; </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 73</cross-reference> illustrates an example of an FST, with arcs <highlight><bold>5000</bold></highlight>-<highlight><bold>5017</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>, and with &ldquo;short&rdquo; ambiguity; </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference> illustrates the first factor of the FST shown in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, with arcs <highlight><bold>5100</bold></highlight>-<highlight><bold>5109</bold></highlight> and states <highlight><bold>0</bold></highlight>-<highlight><bold>8</bold></highlight>, and with factored short ambiguity that emits diacritics; </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 75</cross-reference> illustrates the second factor of the FST shown in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, with arcs <highlight><bold>5200</bold></highlight>-<highlight><bold>5206</bold></highlight> and state <highlight><bold>0</bold></highlight>, and with factored short ambiguity that maps diacritics to output symbols; and </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 76</cross-reference> illustrates a general purpose computer for carrying out the present inventions.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> This disclosure is organized as follows. Some of the principal terms and conventions used in this description are set forth below. Following that, a simplified overview of the factorization processes (i.e., methods detaining processing instructions or operations) is presented in the context of other finite-state operations. Finally, the factorization processes are described in more detail, using more complex examples with more features that are relevant for factorization. </paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> A. Terminology </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Set forth below are definitions of some of the principal terms used in this specification. Other terms are explained at their first occurrence. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> An input prefix of a state q of an FST (Finite State Transducer) or transducer is the part of an input string on a particular path that ranges from the initial state to the state q. An input prefix would be an accepted input string if q were a final state. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> An input suffix of a state q of an FST is the part of an input string on a particular path that ranges from the state q to a final state. An input suffix would be an accepted input string if q were an initial state. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> The input prefix set of a state q of an FST is the set of all input prefixes of q. The input prefix set of an arc a is the input prefix set of its source state. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> The suffix set of a state q of an FST is the set of all input suffixes of q. The input suffix set of an arc a is the input suffix set of its destination state. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> An ambiguity field is a maximal set of alternative subpaths that all accept the same sub-string in the same position of the same input string. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Ambiguity is a relation that maps an input string to more than one output strings, or alternatively, a set of arc sequences in an FST that encodes such a relation. Finite ambiguity maps an input string to a finite number of output strings; infinite ambiguity maps an input string to an infinite number of output strings. An FST is ambiguous if it contains at least one ambiguity of either type. It is finitely ambiguous if it contains only finite ambiguity, and infinitely ambiguous otherwise. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> A diacritic is a special symbol. It is usually distinct from the input and output symbols of an unfactored FST, and serves a particular purpose as a placeholder typically in an intermediate processing step. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> The unknown symbol (or any symbol), represented by &ldquo;&quest;&rdquo;, denotes any symbol in the known alphabet and any unknown symbol. In a finite-state graph, it only denotes any unknown symbol. </paragraph>
<paragraph id="P-0133" lvl="7"><number>&lsqb;0133&rsqb;</number> B. Conventions </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The conventions below are followed in this disclosure. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> In finite-state graphs: Every FST has one initial state, labeled with number 0, and one or more final states marked by double circles. The initial state can also be final. All other state numbers and all arc numbers have no meaning for the FST but are just used to reference a state or an arc from within the text. An arc with n labels designates a set of n arcs with one label each that all have the same source and destination. In a symbol pair occurring as an arc label, the first symbol is the input and the second the output symbol. For example, in the symbol pair &ldquo;a:b&rdquo;, &ldquo;a&rdquo; is the input and &ldquo;b&rdquo; the output symbol. Simple (i.e. unpaired) symbols occurring as an arc label represent identity pairs. For example, &ldquo;a&rdquo; means &ldquo;a:a&rdquo;. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Use of brackets: Curly brackets (&ldquo;&lcub; &rcub;&rdquo;) include a set of objects of the same type, e.g., &lcub;100, 102, 106&rcub; denotes a set of arcs that are referred to by their numbers. Ceiling brackets (&ldquo;&boxdr; &boxdl;&rdquo;) include an ordered set of arcs that constitute a path or subpaths through an FST, e.g., &boxdr;100, 101, 102, 103&boxdl; is a path consisting of the four named arcs. Angle brackets (&ldquo;&lt; &gt;&rdquo;) include an n-tuple of objects of possibly different types, e.g., &lt;q<highlight><superscript>s</superscript></highlight>, q<highlight><superscript>d</superscript></highlight>, &sgr;<highlight><superscript>in</superscript></highlight>, &sgr;<highlight><superscript>out</superscript></highlight>&gt; denotes a quadruple of two states and two symbols. </paragraph>
<paragraph id="P-0137" lvl="7"><number>&lsqb;0137&rsqb;</number> C. Factoring Ambiguous Finite State Transducers </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> This initial Section C of the specification, which refers to FIGS. <highlight><bold>13</bold></highlight>-<highlight><bold>29</bold></highlight>, describes a method for factoring an ambiguous transducer into two transducers. The first of them is functional, i.e., unambiguous. The second retains the ambiguity of the original transducer but is fail-safe when applied to the output of the first one, i.e., the application of the second transducer to an input string never leads to a state that does not provide a transition for the next symbol in the input. That is, the second factor has no failing paths. Subsequently, the functional transducer can be factored into a left-sequential and a right-sequential transducer that jointly represent a bimachine. The proposed factorization allows faster processing of input strings because no failing paths need to be followed. It also allows the functional and the ambiguous part of a transducer to be manipulated separately, which can be useful with parsers or part-of-speech taggers. </paragraph>
<paragraph id="P-0139" lvl="7"><number>&lsqb;0139&rsqb;</number> C.1 Summary of Factoring Ambiguous Finite State Transducers </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> An ambiguous finite-state transducer (&ldquo;FST&rdquo;) is an object that accepts a set of possible input strings, and for every accepted input string, outputs one or more output strings by following different alternative paths from an initial state to a final state. In addition, there may be a number of other paths that are followed from the initial state up to a certain point where they fail. Following these latter failing paths is necessary (up until the point they fail) to determine whether they can be successful, but that represents an inefficiency (loss of time). </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> A method is proposed herein for factoring an ambiguous FST with failing paths into two factors which are Finite State Transducers (FSTs). Factor 1 is functional (i.e. unambiguous) but still has failing paths, while factor 2 retains the ambiguity of the original FST but is fail-safe when applied to the output of factor 1. The application of factor 2 never leads to a state that does not provide a transition for the next input symbol, i.e., factor 2 has no failing paths. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> Subsequently, factor 1 can in turn be factorized into a left-sequential and a right-sequential FST that jointly represent a bimachine. See Marcel Paul Schuitzenberger, &ldquo;A remark on finite transducers,&rdquo; <highlight><italic>Information and Control, </italic></highlight>4:185-187 (1961) and Emmanuel Roche and Yves Schabes, eds., <highlight><italic>Finite</italic></highlight>-<highlight><italic>State Language Processing</italic></highlight>, MIT Press (Cambridge, Mass., U.S.A 1997), 1-66. As used herein, the terms &ldquo;left-sequential,&rdquo; &ldquo;left-deterministic,&rdquo; &ldquo;right-deterministic,&rdquo; and the like are shorthand terms intended to mean &ldquo;left-to-right-sequential,&rdquo; &ldquo;left-to-right-deterministic,&rdquo; and &ldquo;right-to-left-deterministic,&rdquo; respectively, as would be known to a practitioner of ordinary skill in the art. These two sequential FSTs plus factor 2 of the first factorization together represent a trimachine. Any input string is processed by this trimachine, first deterministically from left to right, then deterministically from right to left, and finally ambiguously but without failing paths from left to right. Alternatively, the trimachine can be converted into a modified bimachine by composing the right-sequential with the ambiguous FST. The FST that results from this composition is ambiguous but without failing paths. Any input string is processed by the modified bimachine, first deterministically from left to right and then ambiguously but without failing paths from right to left. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> The proposed factorization offers the following advantages: First, with a trimachine or a modified bimachine input strings can be processed faster than with an ordinary FST because no time is spent on failing paths. Second, the functional and the ambiguous part of an FST can be studied and manipulated separately which can be useful with FSTs representing rule systems that generate ambiguous results such as parsers or part-of-speech taggers. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> Although FSTs are inherently bi-directional, they are often intended to be used in a given direction. The proposed factorization is performed with respect to the direction of application. The two sides (or tapes or levels) of an FST are referred to herein as input side and output side. </paragraph>
<paragraph id="P-0145" lvl="7"><number>&lsqb;0145&rsqb;</number> C.2 Overview of Factoring Ambiguous Finite State Transducers </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> This section gives a simplified overview of the factorization process that is explained in more detail at a later stage, and situates it in a context of other finite-state operations. A simple example is used. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> As mentioned above, an ambiguous FST returns for every accepted input string one or more output strings by following different alternative paths from the initial state to a final state. In addition there may be a number of other paths that are followed from the initial state up to a certain point where they fail. For example, the FST in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> has for the input string &ldquo;cabca&rdquo; two successful paths formed by the ordered arc sets &boxdr;<highlight><bold>101</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>108</bold></highlight>, <highlight><bold>112</bold></highlight>, <highlight><bold>115</bold></highlight>&boxdl; and &boxdr;<highlight><bold>104</bold></highlight>, <highlight><bold>109</bold></highlight>, <highlight><bold>113</bold></highlight>, <highlight><bold>115</bold></highlight>&boxdl; respectively, and three failing paths formed by the ordered arc sets &boxdr;<highlight><bold>100</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>105</bold></highlight>&boxdl;, &boxdr;<highlight><bold>100</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>106</bold></highlight>&boxdl;, and &boxdr;<highlight><bold>100</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>107</bold></highlight> &boxdl;, respectively. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Even for input strings that are not accepted there may be more than one failing path. Following all of them is necessary but represents an inefficiency (loss of time). For example, the input string &ldquo;caba&rdquo; is not accepted but requires following five failing paths, namely &boxdr;<highlight><bold>100</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>105</bold></highlight>&boxdl;, &boxdr;<highlight><bold>100</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>106</bold></highlight>&boxdl;, &boxdr;<highlight><bold>101</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>107</bold></highlight>&boxdl;, &boxdr;<highlight><bold>101</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>108</bold></highlight>&boxdl;, and &boxdr;<highlight><bold>101</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>109</bold></highlight>&boxdl;. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> The factorization process set forth herein builds two FSTs, a first factor and a second factor, from an ambiguous FST such that in the first factor, a set of alternative arcs is collapsed into one arc that is labeled with a diacritic on the output side, and in the second factor, this diacritic is mapped to a set of alternative output symbols. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> The FST in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> contains two ambiguity fields. The first ambiguity field spans from state <highlight><bold>1</bold></highlight> to state <highlight><bold>10</bold></highlight>, and maps the substring &ldquo;abb&rdquo; of the input string &ldquo;cabba&rdquo; to the set of alternative output substrings &lcub;xxx, xyy, yzy&rcub;. In the first factor, this ambiguity field is collapsed into a single subpath ranging from state <highlight><bold>1</bold></highlight> to state <highlight><bold>7</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, that maps the substring &ldquo;abb&rdquo; to the intermediate substring &ldquo;&psgr;<highlight><subscript>0</subscript></highlight>bb&rdquo;. Factor 2 maps this intermediate substring to the set of alternative output substrings &lcub;xxx, xyy, yzy&rcub; by following the alternative subpaths &boxdr;<highlight><bold>302</bold></highlight>, <highlight><bold>305</bold></highlight>, <highlight><bold>307</bold></highlight>&boxdl;, &boxdr;<highlight><bold>302</bold></highlight>, <highlight><bold>304</bold></highlight>, <highlight><bold>306</bold></highlight>&boxdl;, and &boxdr;<highlight><bold>301</bold></highlight>, <highlight><bold>303</bold></highlight>, <highlight><bold>306</bold></highlight>&boxdl; respectively, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. The second ambiguity field shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> spans from state <highlight><bold>5</bold></highlight> to state <highlight><bold>11</bold></highlight>, and maps the substring &ldquo;bc&rdquo; of the input string &ldquo;cabca&rdquo; to the set of alternative output substrings &lcub;xx, yy&rcub;. In the first factor, this ambiguity field is collapsed into a single subpath ranging from state <highlight><bold>4</bold></highlight> to state <highlight><bold>8</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, that maps the substring &ldquo;bc&rdquo; to the intermediate substring &ldquo;&psgr;<highlight><subscript>1</subscript></highlight>c&rdquo;. The second factor maps this intermediate substring to the set of alternative output substrings &lcub;xx, yy&rcub; by following the alternative subpaths &boxdr;<highlight><bold>308</bold></highlight>, <highlight><bold>310</bold></highlight>&boxdl; and &boxdr;<highlight><bold>309</bold></highlight>, <highlight><bold>311</bold></highlight>&boxdl; respectively, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. Note that in the first factor a diacritic is only used on the first arc of an ambiguity field, and that the other arcs of an ambiguity field simply accept an input symbol without modifying it. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> All substrings that are accepted outside an ambiguity field are mapped by the first factor to their final output (<cross-reference target="DRAWINGS">FIG. 14</cross-reference>). This output is then accepted by the second factor without any further modification, by means of a loop on the initial state. In the above example this loop consists of the arc <highlight><bold>300</bold></highlight> that is actually a set of four looping arcs with one symbol each (<cross-reference target="DRAWINGS">FIG. 15</cross-reference>). </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> The first factor is functional (i.e. unambiguous) but not sequential, i.e., even for accepted input strings it can contain failing paths (<cross-reference target="DRAWINGS">FIG. 14</cross-reference>). For the input string &ldquo;cabca&rdquo; it has one successful path formed by the ordered arc set &boxdr;<highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, <highlight><bold>207</bold></highlight>, <highlight><bold>209</bold></highlight>&boxdl; and one failing path formed by the ordered arc set &boxdr;<highlight><bold>200</bold></highlight>, <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>&boxdl;. The second factor is ambiguous (it retains the ambiguity of the original FST) but it is fail-safe for all strings in the output language of the first factor, i.e., an arc is never traversed in vain (<cross-reference target="DRAWINGS">FIG. 15</cross-reference>). </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Since the first factor is functional (<cross-reference target="DRAWINGS">FIG. 14</cross-reference>), it can be factored into a left-sequential FST (<cross-reference target="DRAWINGS">FIG. 16</cross-reference>) and a right-sequential FST (<cross-reference target="DRAWINGS">FIG. 17</cross-reference>) that jointly represent a bimachine. See Schuitzenberger (1961) and Roche and Schabes (1997), cited above. These two sequential FSTs plus the second factor of the first factorization (described above) together represent a trimachine. The trimachine obtained from the above example is shown in FIGS. <highlight><bold>16</bold></highlight>-<highlight><bold>17</bold></highlight> and <highlight><bold>15</bold></highlight>. When the trimachine is applied to an input string, its left-sequential FST maps the input string &ldquo;cabca&rdquo; deterministically from left to right (LR) to the intermediate string &ldquo;cabca<highlight><subscript>1</subscript></highlight>&rdquo; (<cross-reference target="DRAWINGS">FIG. 16</cross-reference>). Then, the right-sequential FST maps this string deterministically from right to left (RL) to another intermediate string &ldquo;yz&psgr;<highlight><subscript>1</subscript></highlight>cy&rdquo; (<cross-reference target="DRAWINGS">FIG. 17</cross-reference>). Finally, the ambiguous FST (the original second factor) maps that string from left to right (LR) to the set of alternative output strings &lcub;yzxxy, yzyyy&rcub; (<cross-reference target="DRAWINGS">FIG. 15</cross-reference>). Note that the first two FSTs of a trimachine are sequential, and that the last two FSTs are fail-safe for their respective input. Input strings that are not accepted, fail in the first (left-sequential) FST on one single path, and require no further attention. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Finally, the trimachine (FIGS. <highlight><bold>16</bold></highlight>-<highlight><bold>17</bold></highlight> and <highlight><bold>15</bold></highlight>) can be converted into a modified bimachine (<cross-reference target="DRAWINGS">FIGS. 16 and 18</cross-reference>) by composing the right-sequential FST with a right-to-left form of the ambiguous FST (<cross-reference target="DRAWINGS">FIGS. 17 and 15</cross-reference>). Although it is possible in the current example, it is not always possible to reverse the ambiguous FST because this may create failing paths. In general, the original FST must be first reversed and then factored (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>). The reversed first factor can then be reversed back and factorized into a bimachine. The reversed second factor can be composed with the right-sequential FST of this bimachine. The left-sequential FST of the modified bimachine maps the input string &ldquo;cabca&rdquo; deterministically from left to right, to the intermediate string &ldquo;cabca<highlight><subscript>1</subscript></highlight>&rdquo; (<cross-reference target="DRAWINGS">FIG. 16</cross-reference>). The ambiguous FST maps this string from right to left to the set of alternative output strings &lcub;yzxxy, yzyyy&rcub; (<cross-reference target="DRAWINGS">FIG. 18</cross-reference>). Note that the first FST of a modified bimachine is sequential, and that the second FST is fail-safe for the output of the first one. Input strings that are not accepted, fail in the first (left-sequential) FST on one single path, and require no further attention. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> The following Sections C.3-C.5 explain the factorization of ambiguous FSTs in more detail, and refer to a flow chart set forth in <cross-reference target="DRAWINGS">FIG. 19</cross-reference> and finite state transducers and automata in FIGS. <highlight><bold>20</bold></highlight>-<highlight><bold>29</bold></highlight>. These sections use a more complex example than the previous section to show more features of an FST that are relevant for factorization. </paragraph>
<paragraph id="P-0156" lvl="7"><number>&lsqb;0156&rsqb;</number> C.3 Starting Point of Factorization </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> The factorization of the ambiguous FST in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> requires identifying maximal sets of alternative arcs that must be collapsed in the first factor and unfolded again in the second factor. Two arcs are alternative with respect to each other if they are situated at the same position on two alternative paths that accept the same input string. This means the two arcs must have (a) the same input symbol and (b) identical sets of input prefixes and input suffixes. For example, the two arcs <highlight><bold>705</bold></highlight> and <highlight><bold>706</bold></highlight> constitute such a maximal set of alternative arcs (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>). The two arcs both accept the input symbol &ldquo;b&rdquo; and have the input prefix set &lcub;a<highlight><superscript>n</superscript></highlight>ab&rcub; and the input suffix set &lcub;ca, cb, cc&rcub;. Two arcs are not alternative and must not be collapsed if they accept different input symbols, or if they have no prefixes or no suffixes in common. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> In general, an FST can contain arcs where neither of these two premises (i.e., neither equivalent nor disjoint prefixes and suffixes) is true. In the above example this concerns the two arcs <highlight><bold>703</bold></highlight> and <highlight><bold>704</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>). They have identical input symbols &ldquo;b&rdquo; and identical input prefix sets &lcub;a<highlight><superscript>n</superscript></highlight>a&rcub; but their input suffix sets, &lcub;&egr;, bca, bcb, bcc&rcub; and &lcub;bca, bcb, bcc&rcub; respectively, are neither equivalent nor disjoint. These two arcs are only partially alternative arcs, and it is not decidable whether to collapse them. To make this question always decidable, the original FST is pre-processed in such a way that the sets of input prefixes and input suffixes of all arcs become either equivalent or disjoint, without altering the relation that is described by the FST. </paragraph>
<paragraph id="P-0159" lvl="7"><number>&lsqb;0159&rsqb;</number> C.4 Factorization Pre-Processing </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The first steps of the pre-processing consists of concatenating the FST (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>) on both sides (i.e., the start state and the final state(s)) with boundary symbols, &num;, (step <highlight><bold>1110</bold></highlight>) and minimizing the result (step <highlight><bold>1112</bold></highlight>). The resulting FST is shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. This operation causes that the properties of initiality and finality, otherwise carried only by states, to be also carried by arcs making them easier to handle. It also allows creating multiple copies of the former initial state (now state <highlight><bold>1</bold></highlight>) in subsequent operations, which is not possible with the original FST under the convention that an FST has only one initial state (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>). The resulting FST of the first pre-processing step will be referred to as the minimal FST. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> The second step of the pre-processing consists of a left-unfolding of the minimal FST (step <highlight><bold>1114</bold></highlight>), based on its left-deterministic input finite state automaton (input FSA). The input FSA, which is illustrated in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, is obtained (step <highlight><bold>1114</bold></highlight>) by extracting the input side from the minimal FST (<cross-reference target="DRAWINGS">FIG. 21</cross-reference>) and determinizing it from left to right. Every state of the input FSA (<cross-reference target="DRAWINGS">FIG. 22</cross-reference>) corresponds to a set of states of the minimal FST (<cross-reference target="DRAWINGS">FIG. 21</cross-reference>), and is assigned a set of state numbers (<cross-reference target="DRAWINGS">FIG. 22</cross-reference>). Every state of the minimal FST is copied to the (new) left-unfolded FST (<cross-reference target="DRAWINGS">FIG. 23</cross-reference>) as many times as it occurs in different state sets of the input FSA. The copying of the arcs is described below. For example, state <highlight><bold>8</bold></highlight> of the minimal FST occurs in the states sets of both state <highlight><bold>2</bold></highlight> and <highlight><bold>5</bold></highlight> of the input FSA, and is therefore copied twice to the left-unfolded FST, where the two copies have the state numbers <highlight><bold>9</bold></highlight> and <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> Every state q of the left-unfolded FST corresponds to one state q<highlight><superscript>m </superscript></highlight>of the minimal FST and to one state q<highlight><superscript>L </superscript></highlight>of the left-deterministic input FSA. The relation between these states can be expressed by: </paragraph>
<paragraph id="P-0163" lvl="2"><number>&lsqb;0163&rsqb;</number> &forall;q&isin;Q,q<highlight><superscript>m</superscript></highlight>&isin;Q<highlight><superscript>m</superscript></highlight>,q<highlight><superscript>L</superscript></highlight>&isin;Q<highlight><superscript>L</superscript></highlight>: </paragraph>
<paragraph id="P-0164" lvl="3"><number>&lsqb;0164&rsqb;</number> q<highlight><superscript>m</superscript></highlight>&equals;m(q) </paragraph>
<paragraph id="P-0165" lvl="3"><number>&lsqb;0165&rsqb;</number> q<highlight><superscript>L</superscript></highlight>&equals;L(q) </paragraph>
<paragraph id="P-0166" lvl="7"><number>&lsqb;0166&rsqb;</number> In the left-unfolded FST of the above example (<cross-reference target="DRAWINGS">FIG. 23</cross-reference>), every state is labeled with a triple of state numbers &lt;q, q<highlight><superscript>m</superscript></highlight>, q<highlight><superscript>L</superscript></highlight>&gt;. For example, states <highlight><bold>9</bold></highlight> and <highlight><bold>10</bold></highlight> are labeled with the triples &lt;<highlight><bold>9</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>5</bold></highlight>&gt; and &lt;<highlight><bold>10</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>2</bold></highlight>&gt; respectively which means that they are both copies of state <highlight><bold>8</bold></highlight> of the minimal FST but correspond to different states of the left-deterministic input FSA, namely to the states <highlight><bold>5</bold></highlight> and <highlight><bold>2</bold></highlight> respectively. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Every state q of the left-unfolded FST (<cross-reference target="DRAWINGS">FIG. 23</cross-reference>) inherits the full set of outgoing arcs of the corresponding state q<highlight><superscript>m </superscript></highlight>of the minimal FST. Every arc of the left-unfolded FST points to one of the copies of its original destination state, namely to the state q with the appropriate L(q). For example, the set of outgoing arcs &lcub;<highlight><bold>801</bold></highlight>, <highlight><bold>802</bold></highlight>, <highlight><bold>803</bold></highlight>&rcub; of state <highlight><bold>1</bold></highlight> of the minimal FST is inherited by both state <highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight> of the left-unfolded FST where it becomes &lcub;<highlight><bold>1002</bold></highlight>, <highlight><bold>1001</bold></highlight>, <highlight><bold>1003</bold></highlight> &rcub; and &lcub;<highlight><bold>1005</bold></highlight>, <highlight><bold>1004</bold></highlight>, <highlight><bold>1006</bold></highlight>&rcub;. Arc <highlight><bold>801</bold></highlight> of the minimal FST (<cross-reference target="DRAWINGS">FIG. 21</cross-reference>) points to state <highlight><bold>1</bold></highlight> (q<highlight><superscript>m</superscript></highlight>&equals;1), and the corresponding arc <highlight><bold>901</bold></highlight> of the left-deterministic input FSA (<cross-reference target="DRAWINGS">FIG. 22</cross-reference>) points to state <highlight><bold>2</bold></highlight> (q<highlight><superscript>L</superscript></highlight>&equals;2). Therefore, the arcs <highlight><bold>1002</bold></highlight> and <highlight><bold>1005</bold></highlight> of the left-unfolded FST, that are copies of the arc <highlight><bold>801</bold></highlight> of the minimal FST, must both point to the state q with m(q)&equals;1 and L(q)&equals;2, i.e., to state <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> The left-unfolded FST describes the same relation as the minimal FST. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> The third step of the pre-processing consists of a right-unfolding of the previously left-unfolded FST (step <highlight><bold>1116</bold></highlight>), based on its right-deterministic input FSA (calculated in step <highlight><bold>1115</bold></highlight>). The right-deterministic input FSA and the right-unfolded FST are illustrated in <cross-reference target="DRAWINGS">FIGS. 24 and 25</cross-reference>, respectively. This step is performed exactly as the second step, except that the left-unfolded FST is reversed before the operation, and reversed back afterwards. The reversal consists of making the initial state final and the only final state initial, and changing the direction of all arcs, without minimization or determinization that would change the structure of the FST. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> Every state q of the fully (i.e. left and right) unfolded FST (<cross-reference target="DRAWINGS">FIG. 25</cross-reference>) corresponds to one state q<highlight><superscript>m </superscript></highlight>of the minimal FST (<cross-reference target="DRAWINGS">FIG. 21</cross-reference>), to one state q<highlight><superscript>L </superscript></highlight>of the left-deterministic input FSA (<cross-reference target="DRAWINGS">FIG. 22</cross-reference>), and to one state q<highlight><superscript>R </superscript></highlight>of the right-deterministic input FSA (<cross-reference target="DRAWINGS">FIG. 24</cross-reference>). The relation between these states can be expressed by: </paragraph>
<paragraph id="P-0171" lvl="2"><number>&lsqb;0171&rsqb;</number> &forall;q&egr;Q,q<highlight><superscript>m</superscript></highlight>&egr;Q<highlight><superscript>m</superscript></highlight>,q<highlight><superscript>L</superscript></highlight>&egr;Q<highlight><superscript>L</superscript></highlight>,q<highlight><superscript>R</superscript></highlight>&egr;Q<highlight><superscript>R</superscript></highlight>: </paragraph>
<paragraph id="P-0172" lvl="3"><number>&lsqb;0172&rsqb;</number> q<highlight><superscript>m</superscript></highlight>&equals;m(q) </paragraph>
<paragraph id="P-0173" lvl="3"><number>&lsqb;0173&rsqb;</number> q<highlight><superscript>L</superscript></highlight>&equals;L(q) </paragraph>
<paragraph id="P-0174" lvl="3"><number>&lsqb;0174&rsqb;</number> q<highlight><superscript>R</superscript></highlight>&equals;R(q) </paragraph>
<paragraph id="P-0175" lvl="7"><number>&lsqb;0175&rsqb;</number> In the fully unfolded FST of the above example (illustrated in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>), every state is labeled with a quadruple of state numbers (q, q<highlight><superscript>m</superscript></highlight>, q<highlight><superscript>L</superscript></highlight>, q<highlight><superscript>R</superscript></highlight>). For example, the states <highlight><bold>11</bold></highlight>, <highlight><bold>12</bold></highlight>, <highlight><bold>13</bold></highlight>, and <highlight><bold>14</bold></highlight> are labeled with the quadruples &lt;<highlight><bold>11</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>2</bold></highlight>&gt;, &lt;<highlight><bold>12</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>4</bold></highlight>&gt;, &lt;<highlight><bold>13</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>2</bold></highlight>, <highlight><bold>4</bold></highlight> &gt;, and &lt;<highlight><bold>14</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>2</bold></highlight>, <highlight><bold>2</bold></highlight>&gt; which means that they are all copies of state <highlight><bold>8</bold></highlight> of the minimal FST (q<highlight><superscript>m</superscript></highlight>&equals;8). </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Every state q of the unfolded FST has the same input prefix set as the corresponding state q<highlight><superscript>L </superscript></highlight>of the left-deterministic input FSA and the same input suffix set as the corresponding state q<highlight><superscript>R </superscript></highlight>of the right-deterministic input FSA: </paragraph>
<paragraph id="P-0177" lvl="2"><number>&lsqb;0177&rsqb;</number> &forall;q&egr;Q: </paragraph>
<paragraph id="P-0178" lvl="3"><number>&lsqb;0178&rsqb;</number> PRE<highlight><superscript>in</superscript></highlight>(q)&equals;PRE<highlight><superscript>in</superscript></highlight>(L(q)) </paragraph>
<paragraph id="P-0179" lvl="3"><number>&lsqb;0179&rsqb;</number> SUF<highlight><superscript>in</superscript></highlight>(q)&equals;SUF<highlight><superscript>in</superscript></highlight>(R(q)) </paragraph>
<paragraph id="P-0180" lvl="7"><number>&lsqb;0180&rsqb;</number> Consequently, two states of the unfolded FST have equal input prefix sets if they correspond to the same state q<highlight><superscript>L</superscript></highlight>, and equal input suffix sets if they correspond to the same state q<highlight><superscript>R</superscript></highlight>: </paragraph>
<paragraph id="P-0181" lvl="2"><number>&lsqb;0181&rsqb;</number> &forall;q<highlight><subscript>i</subscript></highlight>,q<highlight><subscript>j</subscript></highlight>&egr;Q: </paragraph>
<paragraph id="P-0182" lvl="3"><number>&lsqb;0182&rsqb;</number> PRE<highlight><superscript>in</superscript></highlight>(q<highlight><subscript>i</subscript></highlight>)&equals;PRE<highlight><superscript>in</superscript></highlight>(q<highlight><subscript>j</subscript></highlight>)<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00001"/>L(q<highlight><subscript>l</subscript></highlight>)&equals;L(q<highlight><subscript>j</subscript></highlight>) </paragraph>
<paragraph id="P-0183" lvl="3"><number>&lsqb;0183&rsqb;</number> SUF<highlight><subscript>in</subscript></highlight>(q<highlight><subscript>l</subscript></highlight>)&equals;SUF<highlight><superscript>in</superscript></highlight>(q<highlight><subscript>j</subscript></highlight>)<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00002"/>R(q<highlight><subscript>i</subscript></highlight>)&equals;R(q<highlight><subscript>j</subscript></highlight>) </paragraph>
<paragraph id="P-0184" lvl="7"><number>&lsqb;0184&rsqb;</number> The input prefix and input suffix sets of the states of the unfolded FST are either identical or disjoint. Partial overlaps cannot occur. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> Equivalent states of the unfolded FST are different copies of the same state of the minimal FST. This means, two states are equivalent if and only if they correspond to the same state q<highlight><superscript>m </superscript></highlight>of the minimal FST: </paragraph>
<paragraph id="P-0186" lvl="2"><number>&lsqb;0186&rsqb;</number> q<highlight><subscript>i</subscript></highlight>&equiv;q<highlight><subscript>j</subscript></highlight>:<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00003"/>m(q<highlight><subscript>l</subscript></highlight>)&equals;m(q<highlight><subscript>j</subscript></highlight>) </paragraph>
<paragraph id="P-0187" lvl="7"><number>&lsqb;0187&rsqb;</number> Every arc a of the fully unfolded FST can be described by a quadruple: </paragraph>
<paragraph id="P-0188" lvl="2"><number>&lsqb;0188&rsqb;</number> a&equals;&lt;s,d,&sgr;<highlight><superscript>in</superscript></highlight>,&sgr;<highlight><superscript>out</superscript></highlight>&gt; with a &egr; A, s, d &egr; Q, &sgr;<highlight><superscript>in </superscript></highlight>&Sgr;<highlight><superscript>in</superscript></highlight>, &sgr;<highlight><superscript>out </superscript></highlight>&egr; &Sgr;<highlight><superscript>out </superscript></highlight></paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> where s and d are the source and destination state, and &sgr;<highlight><superscript>in </superscript></highlight>and &sgr;<highlight><superscript>out </superscript></highlight>the input and output symbol of the arc a respectively. For example, the arc <highlight><bold>1302</bold></highlight> of the fully unfolded FST (<cross-reference target="DRAWINGS">FIG. 25</cross-reference>) can be described by the quadruple &lt;1, 4, a, y&gt; which means that the arc goes from state <highlight><bold>1</bold></highlight> to state <highlight><bold>4</bold></highlight> and maps &ldquo;a&rdquo; to &ldquo;y&rdquo;. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Alternative arcs represent alternative transductions of the same input symbol in the same position of an input string. Two arcs are alternative arcs with respect to each other if and only if they have the same input symbol and equal input prefix and suffix sets. The input prefix set of an arc is the input prefix set of its source state, and the input suffix set of an arc is the input suffix set of its destination state:  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mrow>
  <msub>
    <mi>a</mi>
    <mi>i</mi>
  </msub>
  <mo>&it;</mo>
  <mover>
    <mo>&Tilde;</mo>
    <mi>alt</mi>
  </mover>
  <mo>&it;</mo>
  <mstyle>
    <mtext>&emsp;</mtext>
  </mstyle>
  <mo>&it;</mo>
  <mrow>
    <msub>
      <mi>a</mi>
      <mi>j</mi>
    </msub>
    <mo>:</mo>
    <mrow>
      <mo>&DoubleLeftRightArrow;</mo>
      <mstyle>
        <mtext>&emsp;</mtext>
      </mstyle>
      <mo>&it;</mo>
      <mrow>
        <mrow>
          <mo>(</mo>
          <mrow>
            <msubsup>
              <mi>&sigma;</mi>
              <mi>i</mi>
              <mi>in</mi>
            </msubsup>
            <mo>=</mo>
            <msubsup>
              <mi>&sigma;</mi>
              <mi>j</mi>
              <mi>in</mi>
            </msubsup>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>&Wedge;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mrow>
              <msup>
                <mi>PRE</mi>
                <mi>in</mi>
              </msup>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>s</mi>
                  <mi>i</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mrow>
              <msup>
                <mi>PRE</mi>
                <mi>in</mi>
              </msup>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>s</mi>
                  <mi>j</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>&Wedge;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mrow>
              <msup>
                <mi>SUF</mi>
                <mi>in</mi>
              </msup>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>d</mi>
                  <mi>i</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mrow>
              <msup>
                <mi>SUF</mi>
                <mi>in</mi>
              </msup>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>d</mi>
                  <mi>j</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030004705A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="25.9119" file="US20030004705A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0191" lvl="7"><number>&lsqb;0191&rsqb;</number> Equivalent arcs are different copies of the same arc of the minimal FST. Two arcs are equivalent if they have the same input and output symbol, and equivalent source and destination states: </paragraph>
<paragraph id="P-0192" lvl="2"><number>&lsqb;0192&rsqb;</number> a<highlight><subscript>i</subscript></highlight>&equiv;a<highlight><subscript>j</subscript></highlight>:<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00004"/>(&sgr;<highlight><subscript>i</subscript></highlight><highlight><superscript>in</superscript></highlight>&equals;&sgr;<highlight><subscript>J</subscript></highlight><highlight><superscript>in</superscript></highlight>)&Lgr;(&sgr;<highlight><subscript>i</subscript></highlight><highlight><superscript>out</superscript></highlight>&equals;&sgr;<highlight><subscript>J</subscript></highlight><highlight><superscript>out</superscript></highlight>)&Lgr;(s<highlight><subscript>l</subscript></highlight>&equiv;s<highlight><subscript>j</subscript></highlight>)&Lgr;(d<highlight><subscript>i</subscript></highlight>&equiv;d<highlight><subscript>j</subscript></highlight>) </paragraph>
<paragraph id="P-0193" lvl="7"><number>&lsqb;0193&rsqb;</number> Two equivalent arcs are also alternative with respect to each other but not vice versa. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> The fully unfolded FST describes the same relation as the minimal FST. The previously undecidable question whether two arcs are alternative to each other and should be collapsed, is decidable for the fully unfolded FST. </paragraph>
<paragraph id="P-0195" lvl="7"><number>&lsqb;0195&rsqb;</number> C.5 Factors </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> After the pre-processing, preliminary factors can be built as shown in <cross-reference target="DRAWINGS">FIGS. 26 and 27</cross-reference>. All states of the fully unfolded FST (<cross-reference target="DRAWINGS">FIG. 25</cross-reference>) are copied to both factors. All arcs of the unfolded FST are grouped to disjoint maximal sets of alternative arcs. For the above unfolded FST shown in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>, this gives the arc sets &lcub;<highlight><bold>1300</bold></highlight>&rcub;, &lcub;<highlight><bold>1301</bold></highlight>, <highlight><bold>1305</bold></highlight>&rcub;, &lcub;<highlight><bold>1302</bold></highlight>&rcub;, &lcub;<highlight><bold>1303</bold></highlight>&rcub;, &lcub;<highlight><bold>1304</bold></highlight>&rcub;, &lcub;<highlight><bold>1306</bold></highlight>, <highlight><bold>1310</bold></highlight>&rcub;, &lcub;<highlight><bold>1307</bold></highlight>&rcub;, &lcub;<highlight><bold>1308</bold></highlight>&rcub;, &lcub;<highlight><bold>1309</bold></highlight>&rcub;, &lcub;<highlight><bold>1311</bold></highlight>, <highlight><bold>1327</bold></highlight>&rcub;, &lcub;<highlight><bold>1312</bold></highlight>, <highlight><bold>1313</bold></highlight>&rcub;, &lcub;<highlight><bold>1314</bold></highlight>, <highlight><bold>1329</bold></highlight>&rcub;, &lcub;<highlight><bold>1315</bold></highlight>, <highlight><bold>1316</bold></highlight>&rcub;, &lcub;<highlight><bold>1317</bold></highlight>, <highlight><bold>1320</bold></highlight>&rcub;, &lcub;<highlight><bold>1318</bold></highlight>, <highlight><bold>1321</bold></highlight>&rcub;, &lcub;<highlight><bold>1319</bold></highlight>, <highlight><bold>1322</bold></highlight>&rcub;, &lcub;<highlight><bold>1323</bold></highlight>&rcub;, &lcub;<highlight><bold>1324</bold></highlight>&rcub;, &lcub;<highlight><bold>1325</bold></highlight>&rcub;, &lcub;<highlight><bold>1326</bold></highlight>&rcub;, and &lcub;<highlight><bold>1328</bold></highlight>&rcub;. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> Arc sets can have different locations with respect to ambiguity fields. Singleton sets (e.g., &lcub;<highlight><bold>1300</bold></highlight>&rcub; or &lcub;<highlight><bold>1302</bold></highlight>&rcub;) and sets where all arcs are equivalent with respect to each other (there is no such example illustrated in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>) do not contain an ambiguity. These arc sets are outside any ambiguity field. All other arc sets (e.g., &lcub;<highlight><bold>1315</bold></highlight>, <highlight><bold>1316</bold></highlight>&rcub;) contain an ambiguity. They are inside an ambiguity field where three different (possibly co-occurring) locations can be distinguished: an arc set A is at the beginning of an ambiguity field if and only if the source states of all arcs in the set are equivalent (e.g., &lcub;<highlight><bold>1301</bold></highlight>, <highlight><bold>1305</bold></highlight>&rcub; and &lcub;<highlight><bold>1312</bold></highlight>, <highlight><bold>1313</bold></highlight> &rcub;): </paragraph>
<paragraph id="P-0198" lvl="2"><number>&lsqb;0198&rsqb;</number> Begin(A):<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00005"/>&forall;a<highlight><subscript>l</subscript></highlight>,a<highlight><subscript>J</subscript></highlight>&egr;A:s<highlight><subscript>i</subscript></highlight>&equiv;s<highlight><subscript>j</subscript></highlight>; </paragraph>
<paragraph id="P-0199" lvl="7"><number>&lsqb;0199&rsqb;</number> an arc set A is at the end of an ambiguity field if and only if the destination states of all arcs in the set are equivalent (e.g., &lcub;<highlight><bold>1317</bold></highlight>, <highlight><bold>1320</bold></highlight>&rcub; and &lcub;<highlight><bold>1314</bold></highlight>, <highlight><bold>1329</bold></highlight>&rcub;): </paragraph>
<paragraph id="P-0200" lvl="2"><number>&lsqb;0200&rsqb;</number> End(A):<custom-character file="US20030004705A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00006"/>&forall;a<highlight><subscript>l</subscript></highlight>,a<highlight><subscript>j</subscript></highlight>&egr;A:d<highlight><subscript>i</subscript></highlight>&equiv;d<highlight><subscript>J</subscript></highlight>; </paragraph>
<paragraph id="P-0201" lvl="7"><number>&lsqb;0201&rsqb;</number> and an arc set A is at an ambiguity fork, i.e., at a position where two or more ambiguity fields with a common (overlapping) beginning separate from each other, if and only if there is an arc a<highlight><subscript>i</subscript></highlight>, in this set and an arc a<highlight><subscript>k </subscript></highlight>in another set so that both arcs have the same input symbol, equivalent source states, and disjoint input suffix sets. This means that the corresponding state q<highlight><superscript>m</superscript></highlight>&equals;m(s<highlight><subscript>i</subscript></highlight>)&equals;m(s<highlight><subscript>k</subscript></highlight>) of the minimal FST can be left via either arc, a<highlight><subscript>i</subscript></highlight>, or a<highlight><subscript>k</subscript></highlight>, but one of them is on a failing path, and therefore should not be taken (e.g., &lcub;<highlight><bold>1317</bold></highlight>, <highlight><bold>1320</bold></highlight> &rcub; and &lcub;<highlight><bold>1318</bold></highlight>, <highlight><bold>1321</bold></highlight> &rcub;):  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mrow>
  <mrow>
    <mrow>
      <mi>Fork</mi>
      <mo>&af;</mo>
      <mrow>
        <mo>(</mo>
        <mi>A</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>:</mo>
    <mrow>
      <mo>&DoubleLeftRightArrow;</mo>
      <mrow>
        <mo>&Exists;</mo>
        <mrow>
          <msub>
            <mi>a</mi>
            <mi>i</mi>
          </msub>
          <mo>&Element;</mo>
          <mi>A</mi>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
  <mo>,</mo>
  <mrow>
    <msub>
      <mi>a</mi>
      <mi>k</mi>
    </msub>
    <mo>&NotElement;</mo>
    <mrow>
      <mi>A</mi>
      <mo>:</mo>
      <mrow>
        <mrow>
          <mo>(</mo>
          <mrow>
            <msubsup>
              <mi>&sigma;</mi>
              <mi>i</mi>
              <mi>in</mi>
            </msubsup>
            <mo>=</mo>
            <msubsup>
              <mi>&sigma;</mi>
              <mi>k</mi>
              <mi>in</mi>
            </msubsup>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>&Wedge;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <msub>
              <mi>s</mi>
              <mi>i</mi>
            </msub>
            <mo>&Congruent;</mo>
            <msub>
              <mi>s</mi>
              <mi>k</mi>
            </msub>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>&Wedge;</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mrow>
                <msup>
                  <mi>SUF</mi>
                  <mi>in</mi>
                </msup>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <msub>
                    <mi>d</mi>
                    <mi>i</mi>
                  </msub>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>&NotEqual;</mo>
              <mrow>
                <msup>
                  <mi>SUF</mi>
                  <mi>in</mi>
                </msup>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <msub>
                    <mi>d</mi>
                    <mi>k</mi>
                  </msub>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>.</mo>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030004705A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="21.12075" file="US20030004705A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> Every arc of the unfolded FST (<cross-reference target="DRAWINGS">FIG. 25</cross-reference>) is represented in both factors. Arcs that are outside any ambiguity field (step <highlight><bold>1118</bold></highlight>) are copied to the first preliminary factor (step <highlight><bold>1120</bold></highlight>) as they are (<cross-reference target="DRAWINGS">FIG. 26</cross-reference>). In the second preliminary factor, they are represented (step <highlight><bold>1122</bold></highlight>) by an arc looping on the initial state and labeled with the output symbol of the original arc (<cross-reference target="DRAWINGS">FIG. 27</cross-reference>). This means, these functional transductions of symbols are performed by the first factor, and the second factor only accepts the output symbols by means of looping arcs. For example, arc <highlight><bold>1302</bold></highlight> labeled with &ldquo;a:y&rdquo; is copied to the first factor as it is, and a looping arc <highlight><bold>1500</bold></highlight> labeled with &ldquo;y&rdquo; is created in the second factor. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> All arcs of an arc set that is inside an ambiguity field (step <highlight><bold>1118</bold></highlight>) are copied to both preliminary factors with their original location (regarding their source and destination) but with modified labels (FIGS. <highlight><bold>26</bold></highlight>-<highlight><bold>27</bold></highlight>). They are copied to the first preliminary factor (step <highlight><bold>1124</bold></highlight>) with their common original input symbol &sgr;<highlight><superscript>in </superscript></highlight>and a common intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>(as output), and to the second factor (step <highlight><bold>1126</bold></highlight>) with this intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>(as input) and their different original output symbols &sgr;<highlight><superscript>out</superscript></highlight>. This causes the copy of the arc set in the first factor to perform a functional transduction and to collapse into one single arc when the first factor is minimized. The intermediate symbol of an arc set can be a diacritic that is unique within the whole FST, i.e., that is not used for any other arc set. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> If there is concern about the size of the factors and their alphabets, diacritics should be used sparingly. In this case, the choice of a common intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>for a set of alternative arcs depends on the location of the arc set with respect to an ambiguity field, as follows. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> At the beginning of an ambiguity field, the common intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>is a diacritic that must be unique within the whole FST. For example, the arc set &lcub;<highlight><bold>1312</bold></highlight>, <highlight><bold>1313</bold></highlight>&rcub; (<cross-reference target="DRAWINGS">FIG. 25</cross-reference>) gets the diacritic &psgr;<highlight><subscript>2</subscript></highlight>, i.e., the arcs change their labels from &lcub;b:x, b:y&rcub; to &lcub;b:&psgr;<highlight><subscript>2</subscript></highlight>, b:&psgr;<highlight><subscript>2</subscript></highlight>&rcub; in the first factor and to &lcub;&psgr;<highlight><subscript>2</subscript></highlight>:x, &psgr;<highlight><subscript>2</subscript></highlight>:y&rcub; in the second factor. In addition, an arc labeled with the empty string &egr; is inserted in the second factor from the initial state of the FST to the source state of every arc in the set, which causes the ambiguity field to begin at the initial state after minimization. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> At a fork position that does no coincide with the beginning of an ambiguity field, the common intermediate symbol a &sgr;<highlight><superscript>mid </superscript></highlight>is a diacritic that needs to be unique only among all arc sets that have the same input symbol and the same input prefix set. This diacritic can be re-used with other forks. For example, the arc set &lcub;<highlight><bold>1317</bold></highlight>, <highlight><bold>1320</bold></highlight>&rcub;gets the diacritic &oslash;<highlight><subscript>0</subscript></highlight>, i.e., the arcs change their labels from &lcub;c:x, c:y&rcub; to &lcub;c:&oslash;<highlight><subscript>0</subscript></highlight>, c:&oslash;<highlight><subscript>0</subscript></highlight>&rcub; in the first factor and to &lcub;&oslash;<highlight><subscript>0</subscript></highlight>:x, &oslash;<highlight><subscript>0</subscript></highlight>:y&rcub; in the second factor. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> In all other positions inside an ambiguity field, the common intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>equals the common input symbol &sgr;<highlight><superscript>in </superscript></highlight>of all arcs in a set. For example, the arc set &lcub;<highlight><bold>1315</bold></highlight>, <highlight><bold>1316</bold></highlight>&rcub; gets the intermediate symbol &ldquo;b&rdquo;, i.e., the arcs change their labels from &lcub;b:x, b:y&rcub; to &lcub;b, b&rcub; in the first factor and keep their labels in the second factor. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> At the end of an ambiguity field, one of the above rules for intermediate symbols &sgr;<highlight><superscript>mid </superscript></highlight>is applied. In addition, an arc labeled with the empty string &egr; is inserted in the second factor from the destination state of every arc in the set to the initial state of the FST, which causes the ambiguity field to end at the initial (final) state after minimization. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> The final factors shown in FIGS. <highlight><bold>28</bold></highlight>-<highlight><bold>29</bold></highlight> are obtained by replacing all boundary symbols, &num;, with the empty string &egr; and minimizing the preliminary factors shown in FIGS. <highlight><bold>26</bold></highlight>-<highlight><bold>27</bold></highlight> (steps <highlight><bold>1128</bold></highlight> and <highlight><bold>1130</bold></highlight>, respectively). The first factor (i.e., an unambiguous FST), which is shown in <cross-reference target="DRAWINGS">FIG. 28</cross-reference>, realizes a functional transduction of every accepted input string by mapping every symbol outside an ambiguity field to the corresponding unique output symbol and every symbol inside an ambiguity field to a corresponding unique intermediate symbol. The second factor (i.e., a fail-safe FST), which is shown in <cross-reference target="DRAWINGS">FIG. 29</cross-reference>, accepts every unambiguous output symbol without altering it, and maps every intermediate symbol to a set of alternative output symbols. </paragraph>
<paragraph id="P-0210" lvl="7"><number>&lsqb;0210&rsqb;</number> D. Improvements to Bimachine Factorization </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> This section describes three improvements to the bimachine factorization process proposed by Roche and Schabes (1997), which is cited above. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> Any functional (i.e., unambiguous) FST can be converted into a bimachine (see Sch&uuml;tzenberger, 1961, cited above), which in turn can be factored into a left-sequential FST and a right-sequential FST that together are equivalent to the bimachine. Processes for those transformations were proposed by Roche and Schabes. Such transformed bimachines have the advantage of having higher processing speed by virtue of their sequentiality (i.e., no backtracking is necessary), despite the fact that one FST has been replaced with two. Moreover, left and right context dependencies are made explicit, which allows them to be handled separately. However, the Roche and Schabes method can create a large number of additional symbols, and furthermore, the method is not applicable to FSTs that contain transitions for the unknown symbol. The methods set forth herein solve those problems. They create symbols more sparingly and avoid a direct factorization of the unknown symbol. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> Although FSTs are inherently bidirectional, they are often intended to be used in a given direction. The original Roche and Schabes factorization method and the improvements set forth below are performed with respect to the direction of application. In this document, the two sides of an FST are referred to as the input side and the output side. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> A bimachine can be described by a quintuple, as follows: </paragraph>
<paragraph id="P-0215" lvl="2"><number>&lsqb;0215&rsqb;</number> B&equals;&lt;&Sgr;<highlight><subscript>in</subscript></highlight>,&Sgr;<highlight><subscript>out</subscript></highlight>,A<highlight><subscript>1</subscript></highlight>,A<highlight><subscript>2</subscript></highlight>,&dgr;&gt;. </paragraph>
<paragraph id="P-0216" lvl="7"><number>&lsqb;0216&rsqb;</number> It consists of an input alphabet &Sgr;<highlight><subscript>in</subscript></highlight>, an output alphabet &Sgr;<highlight><subscript>out</subscript></highlight>, a left-deterministic automaton A<highlight><subscript>1</subscript></highlight>, a right-deterministic automaton A<highlight><subscript>2</subscript></highlight>, and an emission function &dgr; that can be represented by a matrix, which is shown in Table 3. One way to obtain the output is that the two automata process the same input sequence, left-to-right and right-to-left respectively, and generate a sequence of states (i.e., state numbers) each. Based on these two state sequences and on the original input sequence, the emission function matrix shown in Table 3 generates the output sequence. </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> As discussed above, methods are known for converting a functional FST into a bimachine, and for factoring a bimachine into two sequential FSTs. The Roche and Schabes method is described with reference to FIGS. <highlight><bold>30</bold></highlight>-<highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> illustrates a functional FST that describes a mapping such that every &ldquo;a&rdquo; that occurs between an &ldquo;x&rdquo; and a &ldquo;y&rdquo; on the input side is replaced by a &ldquo;b&rdquo; on the output side. </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> This functional FST T shown in <cross-reference target="DRAWINGS">FIG. 30</cross-reference> can be converted into a bimachine B as illustrated in <cross-reference target="DRAWINGS">FIGS. 31 and 32</cross-reference>. The left-deterministic automaton A<highlight><subscript>1 </subscript></highlight><highlight><bold>1810</bold></highlight> of B is equal to the input side of T. The right-deterministic automaton A<highlight><subscript>2 </subscript></highlight><highlight><bold>1812</bold></highlight> is equal to the reversed input side of T. Every state of A<highlight><subscript>1 </subscript></highlight>and A<highlight><subscript>2 </subscript></highlight>corresponds to a set of states of T, and is assigned a set of state numbers. Every row of the emission function matrix &dgr; corresponds to one state of A<highlight><subscript>1</subscript></highlight>, and every column corresponds to one state of A<highlight><subscript>2</subscript></highlight>, as shown in Table 3.  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 3</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00001">
<number>1</number>
<image id="EMI-C00001" he="42.49665" wi="92.90295" file="US20030004705A1-20030102-C00001.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00001" file="US20030004705A1-20030102-C00001.CDX"/>
<chemistry-mol-file id="CHEMMOL-00001" file="US20030004705A1-20030102-C00001.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> To obtain an output, e.g., for the input sequence &ldquo;xaxaya&rdquo;, A<highlight><subscript>1 </subscript></highlight>processes this sequence as shown in Table 4, from left to right (LR), and generates the state sequence 0121200 consisting of the numbers of all states on the path that match the input (<cross-reference target="DRAWINGS">FIG. 31</cross-reference>). Then, A<highlight><subscript>2 </subscript></highlight>processes the same input as shown in Table 4, from right to left (RL), and generates the state sequence 000100 (written from right to left). The input sequence and the two state sequences constitute a sequence of triples, &lt;0,x,0&gt;, &lt;1,a,0&gt;, &lt;2,x,0&gt;, &lt;1,a,1&gt;, &lt;2,y,0&gt;, &lt;0,a0&gt;, where every triple &lt;q<highlight><subscript>1</subscript></highlight>,&sgr;<highlight><superscript>in</superscript></highlight>,q<highlight><subscript>2</subscript></highlight>&gt; consists of a state q<highlight><subscript>1 </subscript></highlight>of A<highlight><subscript>1</subscript></highlight>, an input symbol &sgr;<highlight><superscript>in</superscript></highlight>, and a state q<highlight><subscript>2 </subscript></highlight>of A<highlight><subscript>2</subscript></highlight>. Every triple can be mapped to an output symbol &sgr;<highlight><superscript>out </superscript></highlight>by means of the emission function matrix (no matter in which direction and order). For example, the triple &lt;1,a,0&gt; is mapped to the output symbol &ldquo;a&rdquo; because the corresponding matrix element (row 1, column 0) contains among others a transition where the symbol &ldquo;a&rdquo; is mapped to itself. The triple &lt;1,a,1&gt; is mapped to &ldquo;b&rdquo;. The whole sequence of triples is mapped to &ldquo;xaxbya&rdquo; (FIGS. <highlight><bold>31</bold></highlight>-<highlight><bold>32</bold></highlight>), as shown in Table 4.  
<table-cwu id="TABLE-US-00004">
<number>4</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="14PT" align="center"/>
<colspec colname="2" colwidth="133PT" align="center"/>
<colspec colname="3" colwidth="28PT" align="center"/>
<colspec colname="4" colwidth="42PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center">TABLE 4</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="4" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>A<highlight><subscript>1</subscript></highlight>:</entry>
<entry>xaxaya</entry>
<entry>
<chemistry-cwu id="CHEM-US-00002">
<number>2</number>
<image id="EMI-C00002" he="10.0926" wi="22.31145" file="US20030004705A1-20030102-C00002.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00002" file="US20030004705A1-20030102-C00002.CDX"/>
<chemistry-mol-file id="CHEMMOL-00002" file="US20030004705A1-20030102-C00002.MOL"/>
</chemistry-cwu>
</entry>
<entry>012120&lsqb;0&rsqb;</entry>
</row>
<row>
<entry> </entry>
</row>
<row>
<entry>A<highlight><subscript>2</subscript></highlight>:</entry>
<entry>xaxaya</entry>
<entry>
<chemistry-cwu id="CHEM-US-00003">
<number>3</number>
<image id="EMI-C00003" he="10.0926" wi="22.31145" file="US20030004705A1-20030102-C00003.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00003" file="US20030004705A1-20030102-C00003.CDX"/>
<chemistry-mol-file id="CHEMMOL-00003" file="US20030004705A1-20030102-C00003.MOL"/>
</chemistry-cwu>
</entry>
<entry>&lsqb;0&rsqb;000100</entry>
</row>
<row>
<entry> </entry>
</row>
<row>
<entry>&dgr;:</entry>
<entry>(0,x,0)(1,a,0)(2,x,0)(1,a,1)(2,y,0)(0,a,0)</entry>
<entry>&rarr;</entry>
<entry>xaxbya</entry>
</row>
<row><entry namest="1" nameend="4" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> This process of producing an output is equivalent to first applying a left-sequential FST T<highlight><subscript>1 </subscript></highlight>and then a right-sequential FST T<highlight><subscript>2</subscript></highlight>. In this case, T<highlight><subscript>1 </subscript></highlight>maps the input to a sequence of intermediate symbols, and T<highlight><subscript>2 </subscript></highlight>maps this intermediate sequence to an output sequence. An intermediate symbol &sgr;<highlight><superscript>mid </superscript></highlight>corresponds to a pair &lt;q<highlight><subscript>1</subscript></highlight>,&sgr;<highlight><superscript>in</superscript></highlight>&gt; consisting of a state q<highlight><subscript>1 </subscript></highlight>of T<highlight><subscript>1 </subscript></highlight>and an input symbol &sgr;<highlight><superscript>in</superscript></highlight>. </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> A factorization matrix {circumflex over (&dgr;)} is set forth in Table 5; it results from an emission function matrix that is enhanced with intermediate symbols &sgr;<highlight><superscript>mid</superscript></highlight>. Here, every transition has the form &sgr;<highlight><superscript>in</superscript></highlight>:&sgr;<highlight><superscript>mid</superscript></highlight>:&sgr;<highlight><superscript>out</superscript></highlight>. Every intermediate symbol consists of the respective input symbol plus an index that is equal to the number of the corresponding state q<highlight><subscript>1 </subscript></highlight>of A<highlight><subscript>1 </subscript></highlight>(and equal to the row number).  
<table-cwu id="TABLE-US-00005">
<number>5</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 5</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00004">
<number>4</number>
<image id="EMI-C00004" he="46.80585" wi="213.61725" file="US20030004705A1-20030102-C00004.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00004" file="US20030004705A1-20030102-C00004.CDX"/>
<chemistry-mol-file id="CHEMMOL-00004" file="US20030004705A1-20030102-C00004.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> The left-sequential FST T<highlight><subscript>1 </subscript></highlight><highlight><bold>1814</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 33</cross-reference>) can be obtained from the left-deterministic automaton A<highlight><subscript>1 </subscript></highlight>(<cross-reference target="DRAWINGS">FIG. 31</cross-reference>) by replacing every arc that starts at a state q<highlight><subscript>1 </subscript></highlight>and is labeled with &sgr;<highlight><superscript>in </superscript></highlight>in by an arc labeled with &sgr;<highlight><superscript>in</superscript></highlight>:&sgr;<highlight><superscript>mid </superscript></highlight>(mapping an input symbol to an intermediate symbol), corresponding to the row of q<highlight><subscript>1 </subscript></highlight>(see Table 5 and <cross-reference target="DRAWINGS">FIG. 33</cross-reference>). Note that &sgr;<highlight><superscript>mid </superscript></highlight>does not change for the same &sgr;<highlight><superscript>in </superscript></highlight>within one row. For example, the arc that leads from state <highlight><bold>1</bold></highlight> (&equals;q<highlight><subscript>1</subscript></highlight>) to state <highlight><bold>2</bold></highlight> of A<highlight><subscript>1 </subscript></highlight>and is labeled with &ldquo;a&rdquo; is replaced by an arc labeled with &ldquo;a:a<highlight><subscript>1</subscript></highlight>&rdquo; in T<highlight><subscript>1</subscript></highlight>, corresponding to row 1 of the factorization matrix {circumflex over (&dgr;)}. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> The right-sequential FST T<highlight><subscript>2 </subscript></highlight><highlight><bold>1816</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 34</cross-reference>) can be obtained from the right-deterministic automaton A<highlight><subscript>2 </subscript></highlight>(<cross-reference target="DRAWINGS">FIG. 32</cross-reference>) by replacing every arc that starts at a state q<highlight><subscript>2 </subscript></highlight>and is labeled with &sgr;<highlight><superscript>in </superscript></highlight>by a set of arcs labeled with different &sgr;<highlight><superscript>mid</superscript></highlight>:&sgr;<highlight><superscript>out</superscript></highlight>, corresponding to the column of q<highlight><subscript>2 </subscript></highlight>(see Table 5 and <cross-reference target="DRAWINGS">FIG. 34</cross-reference>). All arcs in this set have the same source and destination state as the original arc that they replace. Note that &sgr;<highlight><superscript>mid </superscript></highlight>changes for the same &sgr;<highlight><superscript>in </superscript></highlight>within one column. For example, the arc that leads from state <highlight><bold>1</bold></highlight> (&equals;q<highlight><subscript>2</subscript></highlight>) to state <highlight><bold>0</bold></highlight> of A<highlight><subscript>2 </subscript></highlight>and is labeled with &ldquo;a&rdquo;, is replaced by a set of arcs labeled in T<highlight><subscript>2 </subscript></highlight>with &ldquo;a<highlight><subscript>0</subscript></highlight>:a&rdquo;, &ldquo;a<highlight><subscript>1</subscript></highlight>:b&rdquo;, and &ldquo;a<highlight><subscript>2</subscript></highlight>:a&rdquo;, respectively, corresponding to column 1 of the factorization matrix {circumflex over (&dgr;)}. </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> The input sequence &ldquo;xaxaya&rdquo;, e.g., is mapped (LR) by T<highlight><subscript>1 </subscript></highlight><highlight><bold>1814</bold></highlight> to &ldquo;x<highlight><subscript>0</subscript></highlight>a<highlight><subscript>1</subscript></highlight>x<highlight><subscript>2</subscript></highlight>a<highlight><subscript>1</subscript></highlight>y<highlight><subscript>2</subscript></highlight>a<highlight><subscript>0</subscript></highlight>&rdquo;, which in turn is mapped (RL) by T<highlight><subscript>2 </subscript></highlight><highlight><bold>1816</bold></highlight> to &ldquo;xaxbya&rdquo; (FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>). The known factorization approach works essentially as set forth above. It does not explicitly create a factorization matrix, but the resulting left-sequential and right-sequential FSTs are the same (FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>). </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> The above example of a functional FST (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>) describes an equal-length relation, where pairs of corresponding strings (in the input and output language) are of equal length. This type of FST does not contain &egr; (epsilon, the empty string) on either side. If an &egr; occurs on the output side of a functional FST, it can be handled like an ordinary symbol. If it occurs on the input side, it requires pre-processing. </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> The known method proposes to remove all arcs with &egr; on the input side, and to concatenate their output symbols with the output of adjacent non-epsilon arcs. For example, the path &boxdr;<highlight><bold>903</bold></highlight>, <highlight><bold>1906</bold></highlight>, <highlight><bold>1909</bold></highlight>, <highlight><bold>1910</bold></highlight>&boxdl; labeled with &boxdr;&egr;:v, &egr;:v, &egr;:z, &egr;:v&boxdl; (<cross-reference target="DRAWINGS">FIG. 35</cross-reference>) is &ldquo;compressed&rdquo; into a single arc &boxdr;<highlight><bold>2003</bold></highlight>&boxdl; labeled with &boxdr;c:vvzv&boxdl; (<cross-reference target="DRAWINGS">FIG. 36</cross-reference>). The resulting FST does not contain e on the input side (<cross-reference target="DRAWINGS">FIG. 36</cross-reference>). It can be factored into a left-sequential FST (<cross-reference target="DRAWINGS">FIG. 37</cross-reference>) and a right-sequential FST (<cross-reference target="DRAWINGS">FIG. 38</cross-reference>) by the process set forth above. </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> Note that the original (<cross-reference target="DRAWINGS">FIG. 35</cross-reference>) and pre-processed (<cross-reference target="DRAWINGS">FIG. 36</cross-reference>) FST describe slightly different relations. For example, when the original FST outputs the sequence &ldquo;v-v-z-v&rdquo; consisting of four symbols, the pre-processed FST outputs the sequence &ldquo;vvzv&rdquo; consisting of one symbol. If this output is to be further processed by another FST, then this difference can matter. The other FST may not accept the multi-character symbol &ldquo;vvzv&rdquo;. In this case, a conversion (from &ldquo;vvzv&rdquo;, a single four-character symbol, to &ldquo;v-v-z-v&rdquo;, four single-character symbols) would be required. </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> The above process for converting a functional FST into a bimachine, for factoring this bimachine into a left-sequential and a right-sequential FST, and for eliminating arcs with &egr; on the input side can cause several problems. First problem: the factorization process can create a relatively large number of additional arcs and symbols (FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>) in comparison to the original FST (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>), because intermediate symbols are obtained by combining input symbols with (possibly many) row numbers of the emission function matrix (FIGS. <highlight><bold>31</bold></highlight>-<highlight><bold>32</bold></highlight> and Tables 3-5). Second problem: the pre-processing step for eliminating arcs with &egr; on the input side can create many additional symbols by creating many different concatenations of the existing output symbols that may be numerous already. Third problem: the factorization process is not applicable to FSTs with transitions for the unknown symbol, denoted by &ldquo;&quest;&rdquo; (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>). Such transitions map any symbol that is not in the alphabet of the FST to itself. If a &quest;-transition is factored into two transitions, &quest;:&quest;<highlight><subscript>i </subscript></highlight>in T<highlight><subscript>1 </subscript></highlight>and &quest;<highlight><subscript>i</subscript></highlight>:&quest; in T<highlight><subscript>2 </subscript></highlight>(FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>), then T<highlight><subscript>1 </subscript></highlight>will map an actually occurring input symbol &sgr;<highlight><superscript>in </superscript></highlight>to the intermediate symbol &sgr;<highlight><superscript>mid</superscript></highlight>&equals;&quest;<highlight><subscript>i</subscript></highlight>, and T<highlight><subscript>2 </subscript></highlight>should map &quest;<highlight><subscript>i </subscript></highlight>to &sgr;<highlight><superscript>out </superscript></highlight>(&equals;&sgr;<highlight><subscript>in</subscript></highlight>). This, however, is not possible without the memorization of all unknown symbols that occur in an input string, and a &ldquo;special handling&rdquo; of such cases at runtime. </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> Some solutions to these problems are set forth below. </paragraph>
<paragraph id="P-0231" lvl="7"><number>&lsqb;0231&rsqb;</number> D.1 Reduction of the Intermediate Alphabet </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> A solution to the first problem described above is as follows, and is considered with reference to the flow chart set forth in <cross-reference target="DRAWINGS">FIG. 39</cross-reference>. In the factorization matrix {circumflex over (&dgr;)} (Table 5), every intermediate symbol has an index corresponding to the row number. This is not necessary. Rows that are equal in the emission matrix &dgr; (Table 3) can use the same index in the factorization matrix {circumflex over (&dgr;)} (Table 5). Equal rows do not need to be distinguished. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> Initially, an emission matrix is determined (step <highlight><bold>2110</bold></highlight>). After the emission matrix is determined, the emission matrix is split into a set of emission sub-matrices, one for every input symbol (step <highlight><bold>2112</bold></highlight>). Table 6 shows the emission sub-matrix &dgr;<highlight><subscript>a </subscript></highlight>for the input symbol &ldquo;a&rdquo;, for the example discussed above with reference to FIGS. <highlight><bold>30</bold></highlight>-<highlight><bold>34</bold></highlight>. Here, the rows 0 and 2 are equal and use both the index 0. Row 1 is different, and uses the index 1. The indices of all rows are show in the vector next to the sub-matrix. Based on these indices and on the convention that the index 0 is not expressed, the intermediate symbols are &ldquo;a&rdquo; for the rows 0 and 2, and &ldquo;a<highlight><subscript>1</subscript></highlight>&rdquo; for row 1, as shown on the right side of the Table 6.  
<table-cwu id="TABLE-US-00006">
<number>6</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 6</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00005">
<number>5</number>
<image id="EMI-C00005" he="43.68735" wi="127.6884" file="US20030004705A1-20030102-C00005.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00005" file="US20030004705A1-20030102-C00005.CDX"/>
<chemistry-mol-file id="CHEMMOL-00005" file="US20030004705A1-20030102-C00005.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0234" lvl="7"><number>&lsqb;0234&rsqb;</number> With these intermediate symbols shown in Table 6, a factorization sub-matrix {circumflex over (&dgr;)}<highlight><subscript>a </subscript></highlight>is created for the input symbol &ldquo;a&rdquo;, as described above while referring to Tables 3 and 5 (step <highlight><bold>2114</bold></highlight>). The resulting factorization sub-matrix {circumflex over (&dgr;)}<highlight><subscript>a </subscript></highlight>for the input symbol &ldquo;a&rdquo; is set forth in Table 7. Note that only one additional symbol is introduced for the input symbol &ldquo;a&rdquo;.  
<table-cwu id="TABLE-US-00007">
<number>7</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 7</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00006">
<number>6</number>
<image id="EMI-C00006" he="42.9786" wi="78.72795" file="US20030004705A1-20030102-C00006.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00006" file="US20030004705A1-20030102-C00006.CDX"/>
<chemistry-mol-file id="CHEMMOL-00006" file="US20030004705A1-20030102-C00006.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> In the same way, we separately build an emission sub-matrix &dgr; for every other input symbol (step <highlight><bold>2112</bold></highlight>), define row indices and intermediate symbols, and create a factorization sub-matrix {circumflex over (&dgr;)} (step <highlight><bold>2114</bold></highlight>). Tables 8 and 9 illustrate this process for the input symbol &ldquo;x&rdquo;. No additional symbols are introduced, neither for &ldquo;x&rdquo; nor for any of the remaining input symbols. In these cases, all rows are equal and can use the index 0, that by convention is not expressed.  
<table-cwu id="TABLE-US-00008">
<number>8</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 8</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00007">
<number>7</number>
<image id="EMI-C00007" he="44.3961" wi="114.9876" file="US20030004705A1-20030102-C00007.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00007" file="US20030004705A1-20030102-C00007.CDX"/>
<chemistry-mol-file id="CHEMMOL-00007" file="US20030004705A1-20030102-C00007.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number>  
<table-cwu id="TABLE-US-00009">
<number>9</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 9</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row>
<entry>
<chemistry-cwu id="CHEM-US-00008">
<number>8</number>
<image id="EMI-C00008" he="43.91415" wi="74.9007" file="US20030004705A1-20030102-C00008.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00008" file="US20030004705A1-20030102-C00008.CDX"/>
<chemistry-mol-file id="CHEMMOL-00008" file="US20030004705A1-20030102-C00008.MOL"/>
</chemistry-cwu>
</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> Based on the factorization sub-matrices of all input symbols, a left-sequential FST and a right-sequential FST are constructed (step <highlight><bold>2116</bold></highlight>) using the above process discussed while referring to FIGS. <highlight><bold>30</bold></highlight>-<highlight><bold>34</bold></highlight> and Tables 3-5. In the present example, the resulting left and right sequential FSTs T<highlight><subscript>1 </subscript></highlight>and T<highlight><subscript>2 </subscript></highlight>shown in FIGS. <highlight><bold>40</bold></highlight>-<highlight><bold>41</bold></highlight> have considerably fewer symbols and arcs than those produced by the original approach shown in FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0238" lvl="7"><number>&lsqb;0238&rsqb;</number> D.2 Ambiguity Alignment A solution to the second problem described above is as follows, considered with reference to the flow chart of <cross-reference target="DRAWINGS">FIG. 42</cross-reference>. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> Instead of removing all arcs labeled with &egr; (epsilon, the empty string), those arcs are replaced with a diacritic that can be factored like an ordinary symbol. This creates two problems that the following approach has to resolve. </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Firstly, &egr; represents a non-determinism. Therefore, the left-sequential FST and right-sequential FST built by factorization should not contain &egr; on the input side. This issue will be addressed at the end of this section. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> Second, the number of &egr;-arcs preceding or following a set A of alternative arcs that match the same input symbol after the same input prefix, can be different for different arcs in A. In the example of FIGS. <highlight><bold>43</bold></highlight>-<highlight><bold>44</bold></highlight>, this concerns the arc set &lcub;<highlight><bold>2207</bold></highlight>, <highlight><bold>2205</bold></highlight> &rcub; that matches &ldquo;c&rdquo; after &ldquo;a&rdquo; (see also <cross-reference target="DRAWINGS">FIG. 35</cross-reference>). Here, the arc 2207 is preceded by one &egr;-arc and the arc <highlight><bold>105</bold></highlight> is preceded by no &dgr;-arcs. When the arc set &lcub;<highlight><bold>2200</bold></highlight>, <highlight><bold>2201</bold></highlight>&rcub; that matches &ldquo;a&rdquo; at the beginning of an input sequence is merged into one arc in the left-sequential FST, and the arc set &lcub;<highlight><bold>2207</bold></highlight>, <highlight><bold>2205</bold></highlight>&rcub; is merged into another arc, then there should be an &egr;-arc between <highlight><bold>2200</bold></highlight> and <highlight><bold>2205</bold></highlight> that could be merged with the &egr;-arc 2204. In such cases, additional &egr;-arcs are introduced to align all arcs of a set A. This places every arc in A at the same distance to the preceding non-&egr;-arc. This approach is referred to as ambiguity alignment. It is performed as follows. </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> First, the original (or input) FST T is concatenated on the right side with a boundary symbol, &num; (step <highlight><bold>2410</bold></highlight>), and is minimized (<cross-reference target="DRAWINGS">FIG. 43</cross-reference>) (step <highlight><bold>2412</bold></highlight>). The property of finality, so far carried only by states, is now also carried by arcs and is, therefore, easier to handle. The result of this step will be referred to as the minimal FST. </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> Then, a left-deterministic input FSA is created by extracting the input side of the minimal FST, and determinizing it from left to right (<cross-reference target="DRAWINGS">FIG. 44</cross-reference>) (step <highlight><bold>2414</bold></highlight>). Every state of the input FSA corresponds to a set of states of the minimal FST, and is assigned a set of state numbers. Here, we follow the convention that &egr;-arcs can be traversed only before (but not after) a non-&egr;-arc. This has an impact on the state sets in the input FSA. For example, state <highlight><bold>1</bold></highlight> of the input FSA is assigned the set &lcub;<highlight><bold>1</bold></highlight>,<highlight><bold>2</bold></highlight>&rcub; rather than the set &lcub;<highlight><bold>4</bold></highlight>,<highlight><bold>2</bold></highlight>&rcub; because the &egr;-arc <highlight><bold>2204</bold></highlight> of the minimal FST is not traversed with the arc <highlight><bold>2200</bold></highlight>, but rather with the arc <highlight><bold>2207</bold></highlight>. </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> Finally, an FST with aligned ambiguity can be created (step <highlight><bold>2416</bold></highlight>). It will be referred to as an aligned FST. Every state of the minimal FST is copied to the (new) aligned FST as many times as it occurs in different state sets of the input FSA (<cross-reference target="DRAWINGS">FIG. 45</cross-reference>) (step <highlight><bold>2418</bold></highlight>). The copying of the arcs is described in detail after. For example, state <highlight><bold>5</bold></highlight> of the minimal FST occurs in the states sets of both state <highlight><bold>2</bold></highlight> and <highlight><bold>3</bold></highlight> of the input FSA, and is therefore copied twice to the aligned FST, where the two copies have the state numbers <highlight><bold>3</bold></highlight> and <highlight><bold>4</bold></highlight>. Every state q of the aligned FST corresponds to one state q<highlight><superscript>m </superscript></highlight>of the minimal FST and to one state q<highlight><superscript>L </superscript></highlight>of the left-deterministic input FSA. Every state q is labeled with a triple of state numbers &lt;q, q<highlight><superscript>m</superscript></highlight>, q<highlight><superscript>L</superscript></highlight>&gt; (<cross-reference target="DRAWINGS">FIG. 45</cross-reference>). For example, the states <highlight><bold>3</bold></highlight> and <highlight><bold>4</bold></highlight> are labeled with the triples &lt;3, 5, 2&gt; and &lt;4, 5, 3&gt;, respectively, which means that they are both copies of state <highlight><bold>5</bold></highlight> of the minimal FST but correspond to different states of the input FSA, namely to the states <highlight><bold>2</bold></highlight> and <highlight><bold>3</bold></highlight>, respectively. States of the minimal FST that do not occur in any state set of the input FSA (because all of their incoming arcs arc &egr;-arcs), are not copied to the aligned FST. For example, the states <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>6</bold></highlight> are not copied (see <cross-reference target="DRAWINGS">FIG. 45</cross-reference>, dashed circles).  
<table-cwu id="TABLE-US-00010">
<number>10</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 10</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Alternative Sub-Paths In</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="28PT" align="center"/>
<colspec colname="2" colwidth="98PT" align="left"/>
<colspec colname="3" colwidth="91PT" align="left"/>
<tbody valign="top">
<row>
<entry>A<highlight><subscript>L</subscript></highlight></entry>
<entry>T<highlight><subscript>m</subscript></highlight></entry>
<entry>T<highlight><subscript>a</subscript></highlight></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0&lsqb;a&rsqb;1</entry>
<entry>&lcub;0&lsqb;a:x&rsqb;1, 0&lsqb;a:y&rsqb;2&rcub;</entry>
<entry>&lcub;0&lsqb;a:x&rsqb;1, 0&lsqb;a:y&rsqb;2&rcub;</entry>
</row>
<row>
<entry>0&lsqb;c&rsqb;3</entry>
<entry>&lcub;0&lsqb;&egr;:y,c:z&rsqb;5, 0&lsqb;&egr;:v,&egr;:v,c:z&rsqb;7&rcub;</entry>
<entry>&lcub;0&lsqb;&ohgr;:&egr;,&ohgr;:y,c:z&rsqb;4,</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>0&lsqb;&ohgr;:v,&ohgr;:v,c:z&rsqb;5&rcub;</entry>
</row>
<row>
<entry>1&lsqb;c&rsqb;2</entry>
<entry>&lcub;1&lsqb;&egr;:v,c:z&rsqb;8, 2&lsqb;c:z&rsqb;5&rcub;</entry>
<entry>&lcub;1&lsqb;&ohgr;:v,c:z&rsqb;6, 2&lsqb;&ohgr;:&egr;,c:z&rsqb;3&rcub;</entry>
</row>
<row>
<entry>2&lsqb;b&rsqb;4</entry>
<entry>&lcub;5&lsqb;b:y&rsqb;8&rcub;</entry>
<entry>&lcub;3&lsqb;b:y&rsqb;7&rcub;</entry>
</row>
<row>
<entry>2&lsqb;&num;&rsqb;5</entry>
<entry>&lcub;8&lsqb;&num;&rsqb;9&rcub;</entry>
<entry>&lcub;6&lsqb;&num;&rsqb;8&rcub;</entry>
</row>
<row>
<entry>3&lsqb;b&rsqb;4</entry>
<entry>&lcub;5&lsqb;b:y&rsqb;8&rcub;</entry>
<entry>&lcub;4&lsqb;b:y&rsqb;7&rcub;</entry>
</row>
<row>
<entry>3&lsqb;&num;&rsqb;5</entry>
<entry>&lcub;7&lsqb;&egr;:v,&num;&rsqb;9&rcub;</entry>
<entry>&lcub;5&lsqb;&ohgr;:v,&num;&rsqb;8&rcub;</entry>
</row>
<row>
<entry>4&lsqb;&num;&rsqb;5</entry>
<entry>&lcub;8&lsqb;&num;&rsqb;9&rcub;</entry>
<entry>&lcub;7&lsqb;&num;&rsqb;8&rcub;</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> For each arc in the left-deterministic FSA, a corresponding sub-path in the minimal FST is identified (step <highlight><bold>2420</bold></highlight>). For the copying of arcs from the minimal to the aligned FST, alternative sub-paths of the minimal FST are recorded in Table 10 (step <highlight><bold>2422</bold></highlight>). Column 1 of Table 10 lists all arcs of the input FST with their source and destination states. For example, &ldquo;<highlight><bold>0</bold></highlight>&boxdr;c&boxdl;<highlight><bold>3</bold></highlight>&rdquo; means that the input FSA contains an arc labeled with &ldquo;c&rdquo; that leads from state <highlight><bold>0</bold></highlight> to state <highlight><bold>3</bold></highlight>. Column 2 shows the corresponding set of sub-paths in the minimal FST consisting each of one or more arcs and a source and destination state. For example, &lcub;<highlight><bold>0</bold></highlight>&boxdr;&egr;:y,c:z&boxdl;<highlight><bold>5</bold></highlight>, <highlight><bold>0</bold></highlight>&boxdr;&egr;:v,&egr;:v,c:z&boxdl;<highlight><bold>7</bold></highlight>&rcub; means that the arc <highlight><bold>0</bold></highlight>&boxdr;c&boxdl;<highlight><bold>3</bold></highlight> of the input FST corresponds to two sub-paths in the minimal FST, namely one sub-path labeled with &boxdr;&egr;:y,c:z&boxdl; e that leads from state <highlight><bold>0</bold></highlight> to state <highlight><bold>5</bold></highlight>, and another sub-paths labeled with &boxdr;&egr;:v,&egr;:v,c:z&boxdl; that leads from state 0 to state 7. Note that every sub-path contains only one non-&egr;-arc. This arc is always the last one, and can be preceded by &egr;-arcs. </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> Subsequently, all sub-paths within one set are aligned (to equal length) by pre-pending arcs labeled with &ldquo;&ohgr;:&egr;&rdquo; (column 3 of Table 10) (step <highlight><bold>2424</bold></highlight>). All previously existing &egr; are replaced on the input side by the diacritic &ohgr;. For example, the above mentioned set becomes &lcub;<highlight><bold>0</bold></highlight>&boxdr;&ohgr;:&egr;,&ohgr;:y,c:z&boxdl;<highlight><bold>4</bold></highlight>, <highlight><bold>0</bold></highlight>&boxdr;&ohgr;:v,&ohgr;:v,c:z&boxdl;<highlight><bold>5</bold></highlight>&rcub; where all sub-paths are now three arcs long. Here, the source and destination states q (in the aligned FST; <cross-reference target="DRAWINGS">FIG. 45</cross-reference>) are determined by the state numbers of the corresponding states in both the minimal FST (q<highlight><superscript>m</superscript></highlight>) and the input FSA (q<highlight><superscript>L</superscript></highlight>). For example, the destination state of the sub-path <highlight><bold>0</bold></highlight>&boxdr;&ohgr;:&egr;,&ohgr;:y,c:z&boxdl;<highlight><bold>4</bold></highlight> corresponds to the state <highlight><bold>5</bold></highlight> (&equals;q<highlight><superscript>m</superscript></highlight>) in the minimal FST and to the state <highlight><bold>3</bold></highlight> (&equals;q<highlight><superscript>L</superscript></highlight>) in the input FSA. The aligned FST contains one state that corresponds to this q<highlight><superscript>m </superscript></highlight>and q<highlight><superscript>L</superscript></highlight>, namely the state <highlight><bold>4</bold></highlight> that is labeled with the triple &lt;4,5,3&gt;. All other source and destination states are determined in the same way. </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> All aligned sub-paths are inserted into the aligned FST as described in Table 10 (step <highlight><bold>2426</bold></highlight>). Additional states are inserted where required (<cross-reference target="DRAWINGS">FIG. 46</cross-reference>, circles without numbers). Finally, the boundary symbol, &ldquo;&num;&rdquo;, is replaced by &egr; (step <highlight><bold>2428</bold></highlight>), and the aligned FST is minimized (<cross-reference target="DRAWINGS">FIG. 47</cross-reference>) (step <highlight><bold>2430</bold></highlight>). It describes the same relation as the minimal FST if &ohgr; is considered as the empty string. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> The aligned FST is functional and can be factorized by the previously described process (step <highlight><bold>2432</bold></highlight>), including improvements described herein (FIGS. <highlight><bold>48</bold></highlight>-<highlight><bold>49</bold></highlight>). The diacritic &ohgr; is factored like an ordinary symbol. In the resulting left-sequential FST T<highlight><subscript>1 </subscript></highlight>(only), &ohgr; is replaced on the input side by the diacritic &dgr; that represents a &ldquo;deterministic empty string.&rdquo;</paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> In an arbitrary FST, &egr; represents a non-determinism whenever a state has an outgoing arc for a particular input symbol &sgr;<highlight><superscript>in </superscript></highlight>and an &egr;-arc. Both arcs must be traversed because the &egr;-arc (or a chain of &egr;-arcs) can lead to a state that has an outgoing arc for &sgr;<highlight><superscript>in</superscript></highlight>. This non-deterministic situation cannot occur with &dgr; in a left-sequential FST T<highlight><subscript>1 </subscript></highlight>resulting from the factorization of an aligned FST. In T<highlight><subscript>1</subscript></highlight>, every state has either an arc for a particular &sgr;<highlight><superscript>in</superscript></highlight>, or a &dgr;-arc (or a chain of &dgr;-arcs) that leads to a state that has an arc for &sgr;<highlight><superscript>in</superscript></highlight>, or none of either. Due to the structure of an aligned FST, no state of T<highlight><subscript>1 </subscript></highlight>can have both arcs. This means that every state of T<highlight><subscript>1 </subscript></highlight>is sequential. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> For example, the state <highlight><bold>0</bold></highlight> of the original FST in this example (<cross-reference target="DRAWINGS">FIG. 35</cross-reference>) is non-sequential. It has two sub-paths &boxdr;<highlight><bold>1900</bold></highlight>&boxdl; and &boxdr;<highlight><bold>1901</bold></highlight>&boxdl; that accept the input prefix &ldquo;a&rdquo;, and two sub-paths &boxdr;<highlight><bold>1902</bold></highlight>, <highlight><bold>1905</bold></highlight>&boxdl; and &boxdr;<highlight><bold>1903</bold></highlight>, <highlight><bold>1906</bold></highlight>, <highlight><bold>1909</bold></highlight>&boxdl; that accept the input prefix &ldquo;c&rdquo;. In the aligned FST, these sub-paths are converted into &boxdr;<highlight><bold>2600</bold></highlight>&boxdl; and &boxdr;<highlight><bold>2601</bold></highlight>&boxdl; for &ldquo;a&rdquo;, and into &boxdr;<highlight><bold>2602</bold></highlight>, <highlight><bold>2606</bold></highlight>, <highlight><bold>2609</bold></highlight>&boxdl; and &boxdr;<highlight><bold>2603</bold></highlight>, <highlight><bold>2607</bold></highlight>, <highlight><bold>2610</bold></highlight>&boxdl; for &ldquo;c&rdquo;. In T<highlight><subscript>1 </subscript></highlight>(<cross-reference target="DRAWINGS">FIG. 48</cross-reference>), the sub-paths for &ldquo;a&rdquo; are merged into one subpath &boxdr;<highlight><bold>2700</bold></highlight>&boxdr;, and the sub-paths for &ldquo;c&rdquo; are merged into another subpath &boxdr;<highlight><bold>2701</bold></highlight>, <highlight><bold>2703</bold></highlight>, <highlight><bold>2705</bold></highlight>&boxdl;. The non-sequentiality of the original FST does not occur in T<highlight><subscript>1</subscript></highlight>. If T<highlight><subscript>1 </subscript></highlight>is applied to an input string starting with &ldquo;a&rdquo;, it is sufficient to traverse the arc <highlight><bold>2700</bold></highlight> that results from merging all arc of the original FST that accept &ldquo;a&rdquo;, and it is not necessary to traverse the &dgr;-arc <highlight><bold>2701</bold></highlight> (and possibly other following &dgr;-arcs) because they cannot lead to an arc for &ldquo;a&rdquo;. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> When T<highlight><subscript>1 </subscript></highlight>is applied to an input string, a &dgr;-arc must not be traversed if another (non-&dgr;-) arc can be traversed. A &dgr;-arc must be traversed if no other (non-&dgr;-) arc can be traversed. This behavior is deterministic, and T<highlight><subscript>1 </subscript></highlight>is, therefore, sequential. If T<highlight><subscript>1 </subscript></highlight>is applied, e.g., to the input sequence &ldquo;cb&rdquo;, it produces the intermediate sequence &ldquo;&ohgr;&ohgr;<highlight><subscript>1</subscript></highlight>cb&rdquo; as follows: The &dgr;-arcs <highlight><bold>2701</bold></highlight> and <highlight><bold>2703</bold></highlight> must be traversed because at that point there are no arcs that would accept the input symbol &ldquo;c&rdquo;. Then, the arcs <highlight><bold>2705</bold></highlight> and <highlight><bold>2708</bold></highlight> are traversed and match &ldquo;c&rdquo; and &ldquo;b&rdquo;, respectively. The &dgr;-arc <highlight><bold>2707</bold></highlight> must not be traversed because the state <highlight><bold>6</bold></highlight> has an outgoing arc (namely <highlight><bold>2708</bold></highlight>) that matches &ldquo;b&rdquo;. When the right-sequential FST T<highlight><subscript>2 </subscript></highlight>is applied to an intermediate sequence, the diacritics &ohgr; and &ohgr;<highlight><subscript>1 </subscript></highlight>are treated like ordinary symbols, and &egr; as the ordinary empty string (FIGS. <highlight><bold>48</bold></highlight>-<highlight><bold>49</bold></highlight>). </paragraph>
<paragraph id="P-0252" lvl="7"><number>&lsqb;0252&rsqb;</number> D.3 Factorization of the Unknown Symbol The following method describes a solution to the third problem described above, and is considered with reference to the flow chart set forth in <cross-reference target="DRAWINGS">FIG. 50</cross-reference>. However, it should be noted that the solution to the first problem described above has a side effect of solving many instances of this problem as well. </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> The unknown symbol, &ldquo;&quest;&rdquo;, of the first example (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>) is factored into &quest;:&quest;<highlight><subscript>i </subscript></highlight>and &quest;<highlight><subscript>i</subscript></highlight>:&quest; only by the original process (FIGS. <highlight><bold>33</bold></highlight>-<highlight><bold>34</bold></highlight>) but not by the improved process set forth herein (FIGS. <highlight><bold>41</bold></highlight>-<highlight><bold>42</bold></highlight>). The original process factors every symbol, including the unknown one. The improved process does not factor symbols that are always mapped to the same output. However, factorization cannot be avoided, even within the improved process, for symbols that are mapped to different output. In the first example (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>), this concerns only the symbol &ldquo;a&rdquo; that is mapped either to &ldquo;b&rdquo; or to itself depending on the context (<cross-reference target="DRAWINGS">FIGS. 30 and 40</cross-reference>-<highlight><bold>41</bold></highlight>). </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 51</cross-reference> illustrates a functional FST that describes a mapping where every symbol other than &ldquo;x&rdquo; or &ldquo;y&rdquo; that occurs between &ldquo;x&rdquo; and &ldquo;y&rdquo; on the input side, is replaced by the symbol &ldquo;a&rdquo; on the output side. For example, the input sequence &ldquo;ixixiy&rdquo; is mapped to &ldquo;ixixay&rdquo;. The factorization of this FST requires the factorization of the unknown symbol, &ldquo;&quest;&rdquo;. The above-mentioned problem of memorizing an actually-occurring unknown symbol (e.g. &ldquo;i&rdquo;) can be avoided by factoring &ldquo;&quest;&rdquo;, not into the two labels &ldquo;&quest;:&quest;<highlight><subscript>1</subscript></highlight>&rdquo; and &ldquo;&quest;<highlight><subscript>i</subscript></highlight>:&sgr;<highlight><superscript>out</superscript></highlight>&rdquo; ,where &sgr;<highlight><superscript>out </superscript></highlight>is one of several alternative output symbols, but rather (step <highlight><bold>2910</bold></highlight>) into the two label sequences &boxdr;&quest;, &dgr;:&lgr;<highlight><subscript>i</subscript></highlight>&boxdl;<highlight><subscript>LR</subscript></highlight>, which is copied to a left-deterministic FST (step <highlight><bold>2912</bold></highlight>) and &boxdr;&lgr;<highlight><subscript>i</subscript></highlight>:&egr;, &quest;:&sgr;<highlight><superscript>out</superscript></highlight>&boxdl;<highlight><subscript>RL</subscript></highlight>, which is copied to a right-deterministic FST (step <highlight><bold>2914</bold></highlight>) (FIGS. <highlight><bold>52</bold></highlight>-<highlight><bold>53</bold></highlight>). Here, &lgr;<highlight><subscript>i </subscript></highlight>is a diacritic and &dgr; is the above-explained deterministic empty string. For example, the arcs <highlight><bold>3005</bold></highlight> and <highlight><bold>3007</bold></highlight> of the original FST (<cross-reference target="DRAWINGS">FIG. 51</cross-reference>) that map &ldquo;&quest;&rdquo; either to &ldquo;a&rdquo; or to itself depending on the context, are represented in T<highlight><subscript>1 </subscript></highlight>by the arc sequence &boxdr;<highlight><bold>3107</bold></highlight>, <highlight><bold>3108</bold></highlight>&boxdl; (<cross-reference target="DRAWINGS">FIG. 52</cross-reference>) and in T<highlight><subscript>2 </subscript></highlight>by the two arc sequences &boxdr;<highlight><bold>3206</bold></highlight>, <highlight><bold>3210</bold></highlight>&boxdl; and &boxdr;<highlight><bold>3203</bold></highlight>, <highlight><bold>3211</bold></highlight>&boxdl; (<cross-reference target="DRAWINGS">FIG. 53</cross-reference>). A direct factorization of &ldquo;&quest;&rdquo; is thereby avoided. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> When the left-sequential FST T<highlight><subscript>1 </subscript></highlight>is applied, e.g., to the input sequence &ldquo;ixixiy&rdquo;, it produces, from left to right, the intermediate sequence &ldquo;ixi&lgr;<highlight><subscript>1</subscript></highlight>xi&lgr;<highlight><subscript>1</subscript></highlight>y&rdquo; on the path &boxdr;<highlight><bold>3100</bold></highlight>, <highlight><bold>3103</bold></highlight>, <highlight><bold>3107</bold></highlight>, <highlight><bold>3108</bold></highlight>, <highlight><bold>3103</bold></highlight>, <highlight><bold>3107</bold></highlight>, <highlight><bold>3108</bold></highlight>, <highlight><bold>3102</bold></highlight>&boxdl;. T<highlight><subscript>2 </subscript></highlight>maps the latter sequence, from right to left, to the output &ldquo;ixixay&rdquo; on the path &boxdr;<highlight><bold>3204</bold></highlight>, <highlight><bold>3206</bold></highlight>, <highlight><bold>3210</bold></highlight>, <highlight><bold>3202</bold></highlight>, <highlight><bold>3203</bold></highlight>, <highlight><bold>3211</bold></highlight>, <highlight><bold>3202</bold></highlight>, <highlight><bold>3200</bold></highlight>&boxdl; (FIGS. <highlight><bold>52</bold></highlight>-<highlight><bold>53</bold></highlight>). </paragraph>
<paragraph id="P-0256" lvl="7"><number>&lsqb;0256&rsqb;</number> E. Complete Factorization of Arbitrary Finite State Transducers </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> This section describes different enhancements to factorization processes, such as the process described in Section C above, to make them more generally applicable and more efficient. </paragraph>
<paragraph id="P-0258" lvl="7"><number>&lsqb;0258&rsqb;</number> E.1 Extraction Of Infinite Ambiguity </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> This section describes. This means that all infinite ambiguity is extracted and separately described. The process is meant to be applied before the previously proposed method set forth in Section C of factoring finitely ambiguous FSTs, which method is not applicable to FSTs with infinite ambiguity. However, it can also be used in other contexts. In particular, it will be shown how different factorization processes can be applied together. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> Infinite ambiguity is always described by &ldquo;&egr;-loops,&rdquo; i.e., loops where the input symbol of every arc is an &egr; (epsilon, empty string). In the proposed factorization, every &egr;-loop in the first factor is replaced by a single arc with &egr; on the input side and a diacritic on the output side. This means that the first factor does not contain any infinite ambiguity. Instead of (perhaps infinitely) traversing an &egr;-loop, a diacritic is emitted. The second factor maps every diacritic to one or more &egr;-loops. This means that the second factor retains the infinite ambiguity of the original FST. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 54</cross-reference> shows a simple example of an FST with infinite ambiguity, consisting of the two &egr;-loops &boxdl;<highlight><bold>3301</bold></highlight>, <highlight><bold>3302</bold></highlight>&boxdl; and &boxdl;<highlight><bold>3304</bold></highlight>, <highlight><bold>3305</bold></highlight>&boxdl;. The FST maps the input string &ldquo;abc&rdquo; to the output string &ldquo;xyz&rdquo;, and inserts an undefined number of substrings &ldquo;rs&rdquo; inside. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> FIGS. <highlight><bold>55</bold></highlight>-<highlight><bold>56</bold></highlight> show the same example after factorization. The first factor (<cross-reference target="DRAWINGS">FIG. 55</cross-reference>) maps the input string &ldquo;abc&rdquo; to the intermediate string &ldquo;x&xgr;<highlight><subscript>0</subscript></highlight>y&xgr;<highlight><subscript>1</subscript></highlight>z&rdquo;. The second factor maps the diacritics, &xgr;<highlight><subscript>0 </subscript></highlight>and &xgr;<highlight><subscript>1</subscript></highlight>, to &egr;-loops, and every other symbol of the intermediate string to itself (<cross-reference target="DRAWINGS">FIG. 56</cross-reference>). Although the diacritics are single symbols, they each describe an infinite ambiguity. Actually, both diacritics describe the same infinite ambiguity in this example, and it would be sufficient to use two occurrences of the same diacritic, e.g. &xgr;<highlight><subscript>0</subscript></highlight>, instead. This issue will be addressed further below. </paragraph>
<paragraph id="P-0263" lvl="0"><number>&lsqb;0263&rsqb;</number> The diacritic {circumflex over (&egr;)} denotes the (ordinary) empty string, like &egr; (<cross-reference target="DRAWINGS">FIG. 56</cross-reference>). Both have the same effect when the FST is applied to an input sequence or when it is involved in standard finite-state operations. However, {circumflex over (&egr;)} should be preserved in minimization and determinisation, whereas &egr; is removed. The reason to preserve {circumflex over (&egr;)} here and in the following example is that otherwise, the second factor would become larger (<cross-reference target="DRAWINGS">FIGS. 56 and 63</cross-reference>). </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> The above example, illustrated in <cross-reference target="DRAWINGS">FIG. 54</cross-reference>, contains only simple &egr;-loops. Such loops could be removed by physically removing their arcs. However, &egr;-loops can be more complicated. They can overlap with each other, with non-&egr;-loops, or with other parts of the FST. This means that &egr;-loops must be removed without physically removing any of their arcs. </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 57</cross-reference> shows a more complex example of an FST with infinite ambiguity. In all of the figures corresponding to this example, thin arcs are used for &egr;-transitions, and thick arcs are used for non-&egr;-transitions. None of the &egr;-arcs <highlight><bold>3601</bold></highlight>, <highlight><bold>3603</bold></highlight>, and <highlight><bold>3604</bold></highlight> can be physically removed because they are not only part of &egr;-loops but, among others, also part of the complete paths &boxdr;<highlight><bold>3601</bold></highlight>&boxdl; and &boxdr;<highlight><bold>3600</bold></highlight>, <highlight><bold>3603</bold></highlight>, <highlight><bold>3604</bold></highlight>, <highlight><bold>3600</bold></highlight>&boxdl; that accept the input strings &egr; and &ldquo;aa&rdquo;, respectively. </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> To extract all infinite ambiguity from an arbitrary FST, the method proceeds as follows, and as shown in the flow charts of FIGS. <highlight><bold>58</bold></highlight>-<highlight><bold>60</bold></highlight>. First, the original FST is concatenated on both sides with boundary symbols, &num;, (step <highlight><bold>3710</bold></highlight>) and the result is minimized using standard known processes (step <highlight><bold>3712</bold></highlight>). As described above, this operation causes the properties of initiality and finality, so far described only by states, to be also described by arcs; they are, therefore, easier to handle (<cross-reference target="DRAWINGS">FIG. 61</cross-reference>). </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> Then, each state q<highlight><subscript>i </subscript></highlight>is assigned the set &Egr;<highlight><subscript>i </subscript></highlight>of &egr;-loops that all start (and end) at q<highlight><subscript>i </subscript></highlight>(step <highlight><bold>3714</bold></highlight>), and a diacritic &xgr;<highlight><subscript>i </subscript></highlight>that is considered as equivalent to the set &Egr;<highlight><subscript>i </subscript></highlight>(<cross-reference target="DRAWINGS">FIG. 61</cross-reference>) (step <highlight><bold>3716</bold></highlight>). For example, state <highlight><bold>1</bold></highlight> is assigned the set &lcub;&boxdr;<highlight><bold>3802</bold></highlight>, <highlight><bold>3805</bold></highlight>, <highlight><bold>3806</bold></highlight>&boxdl;, &boxdr;<highlight><bold>3803</bold></highlight>, <highlight><bold>3806</bold></highlight>&boxdl;&rcub; and the diacritic &xgr;<highlight><subscript>0</subscript></highlight>, which means that two &egr;-loops consisting of the named arcs start at state <highlight><bold>1</bold></highlight> and that these &egr;-loops are equivalent to &xgr;<highlight><subscript>0</subscript></highlight>. The two &egr;-loops generate the (output) substrings &ldquo;(rst)*&rdquo; and &ldquo;(vt)*&rdquo; (where the &ldquo;*&rdquo; symbol represents zero-or-more occurrences of the preceding symbol or bracketed set of symbols) respectively. There are different methods to obtain the information in the sets E <highlight><subscript>i</subscript></highlight>. One method is, starting iteratively from every state q<highlight><subscript>i</subscript></highlight>, to traverse every sequence of &egr;-arcs. If a sequence ends at its start state, it describes an &egr;-loop, and is added to the set E <highlight><subscript>i </subscript></highlight>of q<highlight><subscript>i</subscript></highlight>. This method is well known by those skilled in the art. </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> Both factors, &Xgr;<highlight><subscript>1 </subscript></highlight>and &Xgr;<highlight><subscript>2</subscript></highlight>, are built from this form of the FST (<cross-reference target="DRAWINGS">FIG. 61</cross-reference>) (step <highlight><bold>3717</bold></highlight>). Generally, two steps are required to build the first factor (step <highlight><bold>3718</bold></highlight>): First, at every state q<highlight><subscript>i </subscript></highlight>with a non-empty set E <highlight><subscript>i</subscript></highlight>, an arc must be inserted that maps &egr; to &xgr;<highlight><subscript>i </subscript></highlight>that represents E<highlight><subscript>i</subscript></highlight>. Second, all &egr;-loops must be removed without physically removing their arcs. The details of these steps for building the first factor &Xgr;<highlight><subscript>1 </subscript></highlight>(step <highlight><bold>3718</bold></highlight>) are set forth in the flow diagram in <cross-reference target="DRAWINGS">FIG. 59</cross-reference>. </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> In the first factor, for every state q<highlight><subscript>i </subscript></highlight>with a non-empty set E<highlight><subscript>i</subscript></highlight>, an auxiliary state q<highlight><subscript>i</subscript></highlight><highlight><superscript>aux </superscript></highlight>and an auxiliary arc a<highlight><subscript>1</subscript></highlight><highlight><superscript>aux </superscript></highlight>that leads from q<highlight><subscript>i</subscript></highlight><highlight><superscript>aux </superscript></highlight>to q<highlight><subscript>i </subscript></highlight>are inserted (<cross-reference target="DRAWINGS">FIG. 62</cross-reference>) (step <highlight><bold>3722</bold></highlight>). The arc a<highlight><subscript>i</subscript></highlight><highlight><superscript>arc </superscript></highlight>is labeled with &ldquo;&egr;.&xgr;<highlight><subscript>i</subscript></highlight>&rdquo; (step <highlight><bold>3724</bold></highlight>), i.e., it emits the diacritic &xgr;<highlight><subscript>i </subscript></highlight>when it is traversed. For example, state <highlight><bold>1</bold></highlight> is preceded by state <highlight><bold>1</bold></highlight> p, and the arc <highlight><bold>4000</bold></highlight> labeled with &ldquo;&egr;.&xgr;<highlight><subscript>0</subscript></highlight>&rdquo; leads from state <highlight><bold>1</bold></highlight> p to <highlight><bold>1</bold></highlight>. By default, all incoming arcs of every state q<highlight><subscript>i </subscript></highlight>are redirected to the corresponding auxiliary state q<highlight><subscript>i</subscript></highlight><highlight><superscript>aux </superscript></highlight>so that the diacritic is emitted before q<highlight><subscript>i </subscript></highlight>is reached (step <highlight><bold>3726</bold></highlight>). An incoming arc a requires no redirection if the set E<highlight><subscript>i </subscript></highlight>of its destination state q<highlight><subscript>i </subscript></highlight>is a repetition, relative to a, of a subset of E<highlight><subscript>i-l </subscript></highlight>of the source state q<highlight><subscript>i-1 </subscript></highlight>of a. This is the case if every &egr;-loop in E<highlight><subscript>i </subscript></highlight>can be obtained by rotation of an &egr;-loop in E<highlight><subscript>i-l </subscript></highlight>over a. Here, a redirection of a would not be wrong, but it is redundant. For example, the arc <highlight><bold>3901</bold></highlight> must be redirected from state <highlight><bold>2</bold></highlight> to <highlight><bold>2</bold></highlight> p because it is not an &egr;-arc (FIGS. <highlight><bold>61</bold></highlight>-<highlight><bold>62</bold></highlight>). The arc <highlight><bold>3906</bold></highlight> requires no redirection from state <highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight> p because every &egr;-loop of its destination state <highlight><bold>1</bold></highlight> is a repetition of an &egr;-loop of its source state <highlight><bold>3</bold></highlight> relative to the arc <highlight><bold>3906</bold></highlight>; namely the &egr;-loop &boxdr;<highlight><bold>3902</bold></highlight>, <highlight><bold>3905</bold></highlight>, <highlight><bold>3906</bold></highlight>&boxdl; of state 1 is obtained by rotating the &egr;-loop &boxdr;<highlight><bold>3906</bold></highlight>, <highlight><bold>3902</bold></highlight>, <highlight><bold>3905</bold></highlight>&boxdl; of state <highlight><bold>3</bold></highlight> over the arc <highlight><bold>3906</bold></highlight>, and the &egr;-loop &nabla;<highlight><bold>3903</bold></highlight>, <highlight><bold>3906</bold></highlight>&boxdl; of state <highlight><bold>1</bold></highlight> results from rotating the &egr;-loop &boxdr;<highlight><bold>3906</bold></highlight>, <highlight><bold>3903</bold></highlight>&boxdl; of state <highlight><bold>3</bold></highlight> over the same arc <highlight><bold>3906</bold></highlight>. The arc <highlight><bold>3903</bold></highlight> must be redirected from state <highlight><bold>3</bold></highlight> to <highlight><bold>3</bold></highlight> p because the &egr;-loop &boxdr;<highlight><bold>3906</bold></highlight>, <highlight><bold>3902</bold></highlight>, <highlight><bold>3905</bold></highlight>&boxdl; of state <highlight><bold>3</bold></highlight> cannot be obtained by rotating any of the &egr;-loops of state <highlight><bold>1</bold></highlight> over the arc <highlight><bold>3903</bold></highlight>. This preliminary form of factor 1 will be referred to as &Xgr;<highlight><subscript>1</subscript></highlight>&prime;. </paragraph>
<paragraph id="P-0270" lvl="0"><number>&lsqb;0270&rsqb;</number> To remove all &egr;-loops without removing their arcs, the &egr; on the input side of every arc of all &egr;-loops is temporarily replaced by a diacritic &zgr;<highlight><subscript>j </subscript></highlight>(FIGS. <highlight><bold>61</bold></highlight>-<highlight><bold>62</bold></highlight>) (step <highlight><bold>3728</bold></highlight>). This diacritic is different for every concerned arc. For example, on the arc <highlight><bold>3902</bold></highlight>, the &egr; is replaced by &zgr;<highlight><subscript>0 </subscript></highlight>and on the arc <highlight><bold>3905</bold></highlight> it is replaced by &zgr;<highlight><subscript>i</subscript></highlight>. Every &egr;-loop in &Xgr;<highlight><subscript>1</subscript></highlight>&prime; is then described by a sequence of &zgr;<highlight><subscript>j</subscript></highlight>. For example, the &egr;-loop &boxdr;<highlight><bold>3902</bold></highlight>, <highlight><bold>3905</bold></highlight>, <highlight><bold>3906</bold></highlight>&boxdl; on state <highlight><bold>1</bold></highlight> is described by the sequence &boxdr;&zgr;<highlight><subscript>0</subscript></highlight>, &zgr;<highlight><subscript>1</subscript></highlight>, &zgr;<highlight><subscript>2</subscript></highlight>&boxdl; that consists of the new input symbols of this &egr;-loop (FIGS. <highlight><bold>61</bold></highlight>-<highlight><bold>62</bold></highlight>). Then, a constraint C<highlight><subscript>&zgr;</subscript></highlight> is formulated to disallow all &egr;-loops in all sets E<highlight><subscript>i</subscript></highlight>, by disallowing the corresponding &zgr;<highlight><subscript>j</subscript></highlight>sequences (step <highlight><bold>3730</bold></highlight>). In this second example, the constraint is: </paragraph>
<paragraph id="P-0271" lvl="2"><number>&lsqb;0271&rsqb;</number> C<highlight><subscript>&zgr;</subscript></highlight>&equals;<custom-character file="US20030004705A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00007"/>(&quest;*((&zgr;<highlight><subscript>0</subscript></highlight>&zgr;<highlight><subscript>1</subscript></highlight>&zgr;<highlight><subscript>2</subscript></highlight>)&cup;(&zgr;<highlight><subscript>3</subscript></highlight>&zgr;<highlight><subscript>2</subscript></highlight>)&cup;(&zgr;<highlight><subscript>1</subscript></highlight>&zgr;<highlight><subscript>2</subscript></highlight>&zgr;<highlight><subscript>0</subscript></highlight>)&cup;(&zgr;<highlight><subscript>2</subscript></highlight>&zgr;<highlight><subscript>0</subscript></highlight>&zgr;<highlight><subscript>1</subscript></highlight>)&cup;(&zgr;<highlight><subscript>2</subscript></highlight>&zgr;<highlight><subscript>3</subscript></highlight>))&quest;*) </paragraph>
<paragraph id="P-0272" lvl="7"><number>&lsqb;0272&rsqb;</number> When the constraint C<highlight><subscript>70</subscript></highlight> is composed onto the input side of &Xgr;<highlight><subscript>1</subscript></highlight>&prime; (step <highlight><bold>3732</bold></highlight>), all &egr;-loops disappear:  
<math-cwu id="MATH-US-00003">
<number>3</number>
<math>
<mrow>
  <msubsup>
    <mi>&Xi;</mi>
    <mn>1</mn>
    <mi>&Prime;</mi>
  </msubsup>
  <mo>=</mo>
  <mrow>
    <msub>
      <mi>C</mi>
      <mi>&zeta;</mi>
    </msub>
    <mo>&it;</mo>
    <msubsup>
      <mi>&bull;&Xi;</mi>
      <mn>1</mn>
      <mi>&prime;</mi>
    </msubsup>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00003" file="US20030004705A1-20030102-M00003.NB"/>
<image id="EMI-M00003" wi="216.027" he="11.99205" file="US20030004705A1-20030102-M00003.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0273" lvl="7"><number>&lsqb;0273&rsqb;</number> However, instances of the &zgr;<highlight><subscript>j</subscript></highlight>-arcs remain if they are also part of another path than these &egr;-loops. Finally, every &zgr;<highlight><subscript>j </subscript></highlight>in &Xgr;<highlight><subscript>1</subscript></highlight>&Prime; is replaced again with an &egr; (step <highlight><bold>3734</bold></highlight>), the boundary symbol, &ldquo;&num;&rdquo;, is replaced by &egr; (step <highlight><bold>3736</bold></highlight>), and the first factor is minimized (step <highlight><bold>3738</bold></highlight>) (<cross-reference target="DRAWINGS">FIG. 64</cross-reference>). The final form of the first factor will be referred to &Xgr;<highlight><subscript>1</subscript></highlight>. Note that an initially introduced diacritic &zgr;<highlight><subscript>i </subscript></highlight>can disappear from &Xgr;<highlight><subscript>1 </subscript></highlight>because none of the incoming arcs of a particular state have been redirected. </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> The second factor is built (step <highlight><bold>3720</bold></highlight>) from the same modified form of the original FST as the first factor (<cross-reference target="DRAWINGS">FIG. 61</cross-reference>). The details of building the second factor &Xgr;<highlight><subscript>2 </subscript></highlight>(step <highlight><bold>3720</bold></highlight>) are set forth in <cross-reference target="DRAWINGS">FIG. 60</cross-reference>. The second factor must map any diacritic &zgr;<highlight><subscript>i </subscript></highlight>to the corresponding set E<highlight><subscript>i </subscript></highlight>of &egr;-loops. For every state q<highlight><subscript>i </subscript></highlight>with a non-empty set E<highlight><subscript>i</subscript></highlight>, two auxiliary arcs, both labeled with the diacritic &zgr;<highlight><subscript>i</subscript></highlight>, are created (<cross-reference target="DRAWINGS">FIG. 63</cross-reference>) (step <highlight><bold>3740</bold></highlight>). One arc leads from the initial state of the FST to q<highlight><subscript>i </subscript></highlight>(step <highlight><bold>3742</bold></highlight>), the other from q<highlight><subscript>i </subscript></highlight>to the only final state (step <highlight><bold>3744</bold></highlight>). This preliminary form of the second factor will be referred to as &Xgr;<highlight><subscript>2</subscript></highlight>&prime;. After q<highlight><subscript>i </subscript></highlight>is reached by such an auxiliary arc, all &egr;-loops of q<highlight><subscript>i </subscript></highlight>can be traversed any number of times before q<highlight><subscript>i </subscript></highlight>is left by the other auxiliary arc. Only those paths that contain complete &egr;-loops of a state q<highlight><subscript>i </subscript></highlight>must be kept in &Xgr;<highlight><subscript>2</subscript></highlight>&prime;, i.e., all other paths, that contain partial &egr;-loops, must be removed. For example, the paths &boxdr;<highlight><bold>4101</bold></highlight>, (<highlight><bold>4106</bold></highlight>, <highlight><bold>4110</bold></highlight>, <highlight><bold>4112</bold></highlight>)*, <highlight><bold>4104</bold></highlight>&boxdl; (where, once again, the &ldquo;*&rdquo; symbol represents zero or more repeats) containing all &egr;-loops of state <highlight><bold>1</bold></highlight> must be kept, and the paths &boxdr;<highlight><bold>4101</bold></highlight>, (<highlight><bold>4106</bold></highlight>, <highlight><bold>4110</bold></highlight>, <highlight><bold>4112</bold></highlight>)*, <highlight><bold>4106</bold></highlight>, <highlight><bold>4108</bold></highlight>&boxdl; must be removed (<cross-reference target="DRAWINGS">FIG. 63</cross-reference>). The paths to be kept consist of twice the same diacritic on the input side, i.e., &zgr;<highlight><subscript>i</subscript></highlight>&zgr;<highlight><subscript>i </subscript></highlight>(step <highlight><bold>3746</bold></highlight>). To allow only these paths, &Xgr;<highlight><subscript>2</subscript></highlight>&prime; is composed with a constraint (step <highlight><bold>3748</bold></highlight>):  
<math-cwu id="MATH-US-00004">
<number>4</number>
<math>
<mrow>
  <mrow>
    <mrow>
      <msubsup>
        <mi>&Xi;</mi>
        <mn>2</mn>
        <mi>&Prime;</mi>
      </msubsup>
      <mo>=</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <munder>
            <mo>&Union;</mo>
            <mi>i</mi>
          </munder>
          <mo>&it;</mo>
          <mrow>
            <msub>
              <mi>&xi;</mi>
              <mi>i</mi>
            </msub>
            <mo>&it;</mo>
            <msub>
              <mi>&xi;</mi>
              <mi>i</mi>
            </msub>
          </mrow>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>)</mo>
  </mrow>
  <mo>&it;</mo>
  <msubsup>
    <mi>&bull;&Xi;</mi>
    <mn>2</mn>
    <mi>&prime;</mi>
  </msubsup>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00004" file="US20030004705A1-20030102-M00004.NB"/>
<image id="EMI-M00004" wi="216.027" he="24.01245" file="US20030004705A1-20030102-M00004.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0275" lvl="7"><number>&lsqb;0275&rsqb;</number> This composition removes all undesired paths. In this example, the constraint is (<cross-reference target="DRAWINGS">FIG. 63</cross-reference>):  
<math-cwu id="MATH-US-00005">
<number>5</number>
<math>
<mrow>
  <msubsup>
    <mi>&Xi;</mi>
    <mn>2</mn>
    <mi>&Prime;</mi>
  </msubsup>
  <mo>=</mo>
  <mrow>
    <mo>(</mo>
    <mrow>
      <mrow>
        <mo>(</mo>
        <mrow>
          <msub>
            <mi>&xi;</mi>
            <mn>0</mn>
          </msub>
          <mo>&it;</mo>
          <msub>
            <mi>&xi;</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>)</mo>
      </mrow>
      <mo>&Union;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <msub>
            <mi>&xi;</mi>
            <mn>1</mn>
          </msub>
          <mo>&it;</mo>
          <msub>
            <mi>&xi;</mi>
            <mn>1</mn>
          </msub>
        </mrow>
        <mo>)</mo>
      </mrow>
      <mo>&Union;</mo>
      <mrow>
        <mrow>
          <mo>(</mo>
          <mrow>
            <msub>
              <mi>&xi;</mi>
              <mn>2</mn>
            </msub>
            <mo>&it;</mo>
            <msub>
              <mi>&xi;</mi>
              <mn>2</mn>
            </msub>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>&it;</mo>
        <msubsup>
          <mi>&bull;&Xi;</mi>
          <mn>2</mn>
          <mi>&prime;</mi>
        </msubsup>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00005" file="US20030004705A1-20030102-M00005.NB"/>
<image id="EMI-M00005" wi="216.027" he="11.02815" file="US20030004705A1-20030102-M00005.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0276" lvl="7"><number>&lsqb;0276&rsqb;</number> The resulting &Xgr;<highlight><subscript>2</subscript></highlight>&Prime; maps any sequence of two identical diacritics &zgr;<highlight><subscript>i</subscript></highlight>&zgr;<highlight><subscript>i </subscript></highlight>to itself, and inserts the corresponding set E<highlight><subscript>i </subscript></highlight>of &egr;-loops in between (step <highlight><bold>3750</bold></highlight>). The second occurrence of every &zgr;<highlight><subscript>i </subscript></highlight>is actually unwanted. It is removed by the composition:  
<math-cwu id="MATH-US-00006">
<number>6</number>
<math>
<mrow>
  <msubsup>
    <mi>&Xi;</mi>
    <mn>2</mn>
    <mi>&Prime;&prime;</mi>
  </msubsup>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mo>?</mo>
        <mrow>
          <mover>
            <mi>&varepsilon;</mi>
            <mo>^</mo>
          </mover>
          <mo>:</mo>
          <mo>?</mo>
        </mrow>
      </mrow>
      <mo>)</mo>
    </mrow>
    <mo>&it;</mo>
    <msubsup>
      <mi>&bull;&Xi;</mi>
      <mn>2</mn>
      <mi>&Prime;</mi>
    </msubsup>
    <mo>&it;</mo>
    <mrow>
      <mi>&bull;</mi>
      <mo>&af;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mo>?</mo>
          <mrow>
            <mo>:</mo>
            <mrow>
              <mi>&varepsilon;</mi>
              <mo>&it;</mo>
              <msup>
                <mo>?</mo>
                <mo>*</mo>
              </msup>
              <mo>&it;</mo>
              <mrow>
                <mo>?</mo>
                <mrow>
                  <mo>:</mo>
                  <mover>
                    <mi>&varepsilon;</mi>
                    <mo>^</mo>
                  </mover>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00006" file="US20030004705A1-20030102-M00006.NB"/>
<image id="EMI-M00006" wi="216.027" he="11.02815" file="US20030004705A1-20030102-M00006.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0277" lvl="7"><number>&lsqb;0277&rsqb;</number> The resulting &Xgr;<highlight><subscript>2</subscript></highlight>&prime;&Prime; maps any single diacritic &zgr;<highlight><subscript>i </subscript></highlight>to the corresponding set E<highlight><subscript>i</subscript></highlight>. The {circumflex over (&egr;)} denotes the (ordinary) empty string, like &egr;. Both have the same effect when the FST is applied to an input sequence or when it is involved in standard finite-state operations. However, {circumflex over (&egr;)} should be preserved in minimization and determinisation, whereas &egr; is removed. The reason for preserving {circumflex over (&egr;)} is to prevent the final form of the second factor from otherwise becoming larger. If the size is of no concern, &egr; can be used instead. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> The final form of the second factor, &Xgr;<highlight><subscript>2 </subscript></highlight>, must accept any sequence of output symbols of the first factor, &Xgr;<highlight><subscript>i</subscript></highlight>, i.e., any sequence in &Sgr;<highlight><subscript>1</subscript></highlight><highlight><superscript>out</superscript></highlight>*. Within such a sequence, every diacritic &xgr;<highlight><subscript>i </subscript></highlight>must be mapped to the corresponding set &Egr;<highlight><subscript>i </subscript></highlight>of &egr;-loops, and every other symbol must remain unchanged. &Xgr;<highlight><subscript>2 </subscript></highlight>is obtained by (step <highlight><bold>3752</bold></highlight>):  
<math-cwu id="MATH-US-00007">
<number>7</number>
<math>
<mrow>
  <msub>
    <mi>&Xi;</mi>
    <mn>2</mn>
  </msub>
  <mo>=</mo>
  <msup>
    <mrow>
      <mo>(</mo>
      <mrow>
        <munderover>
          <mo>&Sum;</mo>
          <mn>1</mn>
          <mi>out</mi>
        </munderover>
        <mo>&it;</mo>
        <mrow>
          <mi>&bull;</mi>
          <mo>&af;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msubsup>
                <mi>&Xi;</mi>
                <mn>2</mn>
                <mi>&Prime;&prime;</mi>
              </msubsup>
              <mo>&Union;</mo>
              <mrow>
                <mo>&Not;</mo>
                <mrow>
                  <munder>
                    <mo>&Union;</mo>
                    <mi>i</mi>
                  </munder>
                  <mo>&it;</mo>
                  <msub>
                    <mi>&xi;</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>)</mo>
    </mrow>
    <mo>*</mo>
  </msup>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00007" file="US20030004705A1-20030102-M00007.NB"/>
<image id="EMI-M00007" wi="216.027" he="29.9943" file="US20030004705A1-20030102-M00007.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0279" lvl="7"><number>&lsqb;0279&rsqb;</number> This operation has the side effect that all diacritics &xgr;<highlight><subscript>i </subscript></highlight>that initially have been introduced by the process but have disappeared later from &Xgr;<highlight><subscript>1 </subscript></highlight>are also removed from &Xgr;<highlight><subscript>2</subscript></highlight>. Finally, &Xgr;<highlight><subscript>2 </subscript></highlight>is minimized (<cross-reference target="DRAWINGS">FIG. 65</cross-reference>) (step <highlight><bold>3754</bold></highlight>). </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> Jointly in a cascade, the two factors, &Xgr;<highlight><subscript>1 </subscript></highlight>and &Xgr;<highlight><subscript>2</subscript></highlight>, describe the same relation and perform the same mapping as the original FST (see FIGS. <highlight><bold>64</bold></highlight>-<highlight><bold>65</bold></highlight>). When &Xgr;<highlight><subscript>1 </subscript></highlight>and &Xgr;<highlight><subscript>2 </subscript></highlight>are composed with each other, the original FST is obtained. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> The size increase of the second factor, compared to the original FST, is not necessarily a concern. The second factor could be an intermediate result that is further processed. For example, the &egr;-loops in the second factor could be removed, or modified, or preserved, and the second factor could then be composed again with the first factor or with a part of it that results from another factorization (step <highlight><bold>3721</bold></highlight>). It is discussed below in Section E.4 how different factorization processes can be applied together. </paragraph>
<paragraph id="P-0282" lvl="7"><number>&lsqb;0282&rsqb;</number> E.2 Post-Reduction of the Intermediate Alphabet </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> The following section describes a method, while referring to the flow chart in <cross-reference target="DRAWINGS">FIG. 66</cross-reference>, for reducing the number of diacritics and other intermediate symbols occurring between two factors that result from any factorization such as extraction of infinite ambiguity, factorization of a finitely ambiguous FST, or bimachine factorization. The method is described with reference to the flow chart of <cross-reference target="DRAWINGS">FIG. 66</cross-reference>. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> In one embodiment, the method can be used with any other two FSTs that operate in a cascade (step <highlight><bold>1410</bold></highlight>). With longer cascades, it can be applied pair-wise to all FSTs, preferably starting from the last pair. <cross-reference target="DRAWINGS">FIG. 67</cross-reference> illustrates an example in which four FSTs <highlight><bold>4451</bold></highlight>-<highlight><bold>4454</bold></highlight> operate in a cascade. The method for reducing the number of diacritics and other intermediate symbols occurring between two FSTs that operate in a cascade in this example is performed first on the pair of FSTs <highlight><bold>4453</bold></highlight> and <highlight><bold>4454</bold></highlight>, then on the pair of FSTs <highlight><bold>4452</bold></highlight> and <highlight><bold>4453</bold></highlight>, and finally on the pair of FSTs <highlight><bold>4451</bold></highlight> and <highlight><bold>4452</bold></highlight>, as indicated by reference numbers <highlight><bold>4461</bold></highlight>, <highlight><bold>4462</bold></highlight>, and <highlight><bold>4463</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> First, the process is applied to the second factor, or in the general case, to the second FST of a pair. <cross-reference target="DRAWINGS">FIG. 68</cross-reference> shows part of the second factor resulting from any factorization. The transitions and states that are relevant for the current purpose are represented by solid arcs and circles, and all other transitions and states are represented by dashed arcs and circles. </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> The first step consists of constituting (i.e., identifying) non-overlapping equivalence classes of diacritics in the input alphabet (i.e., symbols) of the second factor (step <highlight><bold>4412</bold></highlight>). Two symbols, e.g., &psgr;<highlight><subscript>i </subscript></highlight>and &psgr;<highlight><subscript>j</subscript></highlight>, are considered equivalent if for every arc with &psgr;<highlight><subscript>i </subscript></highlight>on the input side, there is another arc with &psgr;<highlight><subscript>j </subscript></highlight>on the input side and vice versa, so that both arcs have the same source and destination state and the same output symbol. From the above example (<cross-reference target="DRAWINGS">FIG. 68</cross-reference>), we obtain the non-overlapping equivalence classes &lcub;&psgr;<highlight><subscript>0</subscript></highlight>&rcub;, &lcub;&psgr;<highlight><subscript>1</subscript></highlight>, &psgr;<highlight><subscript>2</subscript></highlight>&rcub;, and &lcub;&psgr;<highlight><subscript>3</subscript></highlight>, &psgr;<highlight><subscript>4</subscript></highlight>&rcub;. Here, &psgr;<highlight><subscript>0 </subscript></highlight>constitutes a class on its own because it first co-occurs with &psgr;<highlight><subscript>1 </subscript></highlight>and &psgr;<highlight><subscript>2 </subscript></highlight>in the arc set &lcub;<highlight><bold>4500</bold></highlight>, <highlight><bold>4501</bold></highlight>, <highlight><bold>4502</bold></highlight>&rcub;, and later with &psgr;<highlight><subscript>3 </subscript></highlight>and &psgr;<highlight><subscript>4 </subscript></highlight>in the arc set &lcub;<highlight><bold>4520</bold></highlight>, <highlight><bold>4521</bold></highlight>, <highlight><bold>4522</bold></highlight>&rcub;. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> When the equivalence classes are constituted, all occurrences of all diacritics are replaced by the representative of their class which can be, e.g., the first member of the class (step <highlight><bold>4414</bold></highlight>). This replacement must be performed on both the output side of the first factor and the input side of the second factor (step <highlight><bold>4416</bold></highlight>). The resulting first factor and the second factor can then be minimized (step <highlight><bold>4418</bold></highlight>). <cross-reference target="DRAWINGS">FIG. 69</cross-reference> shows the effect of this replacement on the first factor of the current example (cf. <cross-reference target="DRAWINGS">FIG. 68</cross-reference>). <cross-reference target="DRAWINGS">FIG. 70</cross-reference> shows the first factor and <cross-reference target="DRAWINGS">FIG. 71</cross-reference> shows the second factor of a previous example with a reduced set of intermediate diacritics (cf. FIGS. <highlight><bold>55</bold></highlight>-<highlight><bold>56</bold></highlight>). </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> The process reduces the set of intermediate diacritics a posteriori, i.e., it cannot prevent their creation in the first place. The process can be applied not only to diacritics but to every symbol in the intermediate alphabet of two factors. </paragraph>
<paragraph id="P-0289" lvl="7"><number>&lsqb;0289&rsqb;</number> E.3 Extraction of Short Ambiguity The following section describes a method for extracting &ldquo;short&rdquo; ambiguity. The method is described with reference to the flow chart of <cross-reference target="DRAWINGS">FIG. 72</cross-reference>. Generally, the method factorizes any arbitrary FST into two FSTs. The first factor, T<highlight><subscript>1</subscript></highlight>, contains most of the original FST, and the second factor, T<highlight><subscript>2</subscript></highlight>, contains those parts of the ambiguity of the original FST that are one arc long, regardless of whether this is finite or infinite ambiguity. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 73</cross-reference> shows an ambiguous FST. Part of the ambiguity is only one arc long. The method starts with building sets of arcs with the same source and destination state, and the same input symbol (step <highlight><bold>4910</bold></highlight>). A set of arcs must contain more than one arc. Here, &egr; is treated like an ordinary symbol, both on the input side and the output side. In the current example the arc sets are: &lcub;<highlight><bold>5000</bold></highlight>, <highlight><bold>5001</bold></highlight>&rcub;, &lcub;<highlight><bold>5004</bold></highlight>, <highlight><bold>5005</bold></highlight>, <highlight><bold>5006</bold></highlight>&rcub;, &lcub;<highlight><bold>5007</bold></highlight>, <highlight><bold>5008</bold></highlight>&rcub;, &lcub;<highlight><bold>5009</bold></highlight>, <highlight><bold>5010</bold></highlight>&rcub;, &lcub;<highlight><bold>5011</bold></highlight>, <highlight><bold>5012</bold></highlight>, <highlight><bold>5013</bold></highlight>&rcub;, and &lcub;<highlight><bold>5015</bold></highlight>, <highlight><bold>5016</bold></highlight>&rcub;. Every arc set is assigned a set of alternative output symbols and a unique diacritic &ggr;<highlight><subscript>i </subscript></highlight>that is considered equivalent to the symbol set (step <highlight><bold>4912</bold></highlight>). Equal symbol sets have the same diacritic. Different symbol sets can overlap. For the current example, we obtain: &lcub;<highlight><bold>5000</bold></highlight>,<highlight><bold>5001</bold></highlight>&rcub;:&ggr;<highlight><subscript>0</subscript></highlight>:&lcub;x,y&rcub;; &lcub;<highlight><bold>5009</bold></highlight>,<highlight><bold>5010</bold></highlight>&rcub;:&ggr;<highlight><subscript>0</subscript></highlight>:&lcub;x,y&rcub;; &lcub;5004,5005,5006&rcub;:&ggr;<highlight><subscript>1</subscript></highlight>:&lcub;x,y,z&rcub;; &lcub;<highlight><bold>5011</bold></highlight>,<highlight><bold>5012</bold></highlight>,<highlight><bold>5013</bold></highlight>&rcub;:&ggr;<highlight><subscript>1</subscript></highlight>:&lcub;x,y,z&rcub;; &lcub;<highlight><bold>5007</bold></highlight>,<highlight><bold>5008</bold></highlight>&rcub;:&ggr;<highlight><subscript>2</subscript></highlight>:&lcub;x,z&rcub;; &lcub;<highlight><bold>5015</bold></highlight>,<highlight><bold>5016</bold></highlight>&rcub;:&ggr;<highlight><subscript>2</subscript></highlight>:&lcub;x,z&rcub;. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> Based on these sets, the first factor, i.e. &Ggr;<highlight><subscript>1</subscript></highlight>, is created from the original FST. The output symbol of every arc is replaced by the diacritic &ggr;<highlight><subscript>i </subscript></highlight>of the set that the arc belongs to (step <highlight><bold>4914</bold></highlight>). For example, the output symbols of the arcs <highlight><bold>5000</bold></highlight> and <highlight><bold>5001</bold></highlight> are replaced by &ggr;<highlight><subscript>0</subscript></highlight>. The resulting &Ggr;<highlight><subscript>1 </subscript></highlight>is minimized (<cross-reference target="DRAWINGS">FIG. 74</cross-reference>) (step <highlight><bold>4916</bold></highlight>). It can still be ambiguous because only the ambiguity that is one arc long has been extracted. </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> The second factor (<cross-reference target="DRAWINGS">FIG. 75</cross-reference>), i.e. &Ggr;<highlight><subscript>2</subscript></highlight>, is directly created from the above symbol sets (step <highlight><bold>4918</bold></highlight>). &Ggr;<highlight><subscript>2 </subscript></highlight>has only a single state and a set of arcs that loop on this state. The arcs either map a diacritic &ggr;<highlight><subscript>i </subscript></highlight>to any of the output symbols that correspond to &ggr;<highlight><subscript>i</subscript></highlight>, or they map any of the ordinary output symbols of &Ggr;<highlight><subscript>1 </subscript></highlight>to itself. </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> Although the method presented in this section cannot extract ambiguity that is longer than one arc (and that can be extracted by other factorization processes), it has the advantage of creating intermediate diacritics more sparingly, i.e., it prevents a priori the creation of some redundant diacritics. The method can be used as a preprocessing step for those other factorization processes. </paragraph>
<paragraph id="P-0294" lvl="7"><number>&lsqb;0294&rsqb;</number> E.4 Applications </paragraph>
<paragraph id="P-0295" lvl="0"><number>&lsqb;0295&rsqb;</number> This final section summarizes different factorizations and related processes, and describes how they can be applied together to any arbitrary FST. </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> Each of the following processes factorizes an FST into two FSTs that are referred to as a first factor and a second factor. When applied to an input sequence, the two factors operate in a cascade. The first factor maps the input to intermediate sequences which in turn are mapped by the second factor to final output sequences: </paragraph>
<paragraph id="P-0297" lvl="2"><number>&lsqb;0297&rsqb;</number> (A) Extraction of infinite ambiguity. Factorization of an arbitrary FST such that the first factor, &Xgr;<highlight><subscript>1</subscript></highlight>, is at most finitely ambiguous, and the second, &Xgr;<highlight><subscript>2</subscript></highlight>, retains all infinite ambiguity of the original FST . </paragraph>
<paragraph id="P-0298" lvl="2"><number>&lsqb;0298&rsqb;</number> (B) Extraction of &ldquo;short&rdquo; ambiguity. Factorization of an arbitrary FST such that the second factor, &Ggr;<highlight><subscript>2</subscript></highlight>, contains all ambiguity that is one arc long, and the first factor, &Ggr;<highlight><subscript>1</subscript></highlight>, contains all other parts of the original FST. </paragraph>
<paragraph id="P-0299" lvl="2"><number>&lsqb;0299&rsqb;</number> (C) Extraction of finite ambiguity. Factorization of a finitely ambiguous FST such that the first factor, &PSgr;<highlight><subscript>1</subscript></highlight>, is functional, i.e., unambiguous, and the second, &PSgr;<highlight><subscript>2</subscript></highlight>, retains all finite ambiguity of the original FST. Factor &PSgr;<highlight><subscript>2 </subscript></highlight>is fail-safe for any output from &PSgr;<highlight><subscript>1</subscript></highlight>, i.e., in every state of &PSgr;<highlight><subscript>2 </subscript></highlight>there is always a transition for the next symbol generated by &PSgr;<highlight><subscript>1</subscript></highlight>. </paragraph>
<paragraph id="P-0300" lvl="2"><number>&lsqb;0300&rsqb;</number> (D) Factorization of any functional FST such that the first factor, B<highlight><subscript>1</subscript></highlight>, is left-sequential and processes an input sequence from left to right, and the second, B<highlight><subscript>2</subscript></highlight>, is right-sequential and processes an intermediate sequence from right to left. B<highlight><subscript>1 </subscript></highlight>and B<highlight><subscript>2 </subscript></highlight>are jointly equivalent to a bimachine. </paragraph>
<paragraph id="P-0301" lvl="0"><number>&lsqb;0301&rsqb;</number> Each of the following processes improves one or more of the above factorizations: </paragraph>
<paragraph id="P-0302" lvl="2"><number>&lsqb;0302&rsqb;</number> (A) Reduction of the intermediate alphabet of any two FSTs that operate in a cascade. The process is applicable to the two factors resulting from any above factorization. It removes a posteriori all redundant intermediate symbols but it cannot a priori prevent their creation. </paragraph>
<paragraph id="P-0303" lvl="2"><number>&lsqb;0303&rsqb;</number> (B) Ambiguity alignment in any (at most) finitely ambiguous FST: The process deals with &egr; (epsilon, the empty string) on the input side of an FST. It introduces additional &egr;-arc to &ldquo;align&rdquo; a set of arcs that have all the same input symbol and the same set of alternative input prefixes. The process can be used as a preprocessing step before bimachine factorization, or before the factorization of finitely ambiguous FSTs. </paragraph>
<paragraph id="P-0304" lvl="2"><number>&lsqb;0304&rsqb;</number> (C) Reduction of the number of diacritics in the intermediate alphabet of two sequential FSTs that jointly represent a bimachine. This process is applicable in the course of bimachine factorization. </paragraph>
<paragraph id="P-0305" lvl="2"><number>&lsqb;0305&rsqb;</number> (D) &ldquo;Indirect factorization&rdquo; of the unknown symbol. The process is applicable in the course of bimachine factorization and of factorization of finitely ambiguous FSTs. </paragraph>
<paragraph id="P-0306" lvl="0"><number>&lsqb;0306&rsqb;</number> The foregoing factorization processes can be jointly applied to any arbitrary FST. </paragraph>
<paragraph id="P-0307" lvl="7"><number>&lsqb;0307&rsqb;</number> F. System </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> It will be recognized that portions of the foregoing processes (i.e., methods detaining processing instructions or operations) may be readily implemented in software as methods using software development environments that provide source code that can be used on a variety of general purpose computers. Alternatively, portions of the processes may be implemented partially or fully in hardware using standard logic circuits. Whether software or hardware is used to implement different portions of the processes varies depending on speed and efficiency requirements of the system being designed. </paragraph>
<paragraph id="P-0309" lvl="0"><number>&lsqb;0309&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 76</cross-reference> illustrates a general purpose computer embodying a data processing system for performing the methods in accordance with the present invention. More specifically, it will be recognized the many of the foregoing methods, which include language processing methods <highlight><bold>22</bold></highlight> and FST factorization methods <highlight><bold>23</bold></highlight>, can be implemented in various ways, including hardware <highlight><bold>30</bold></highlight>, software <highlight><bold>20</bold></highlight>, and combinations of hardware and software as shown in <cross-reference target="DRAWINGS">FIG. 76</cross-reference> on general purpose computer <highlight><bold>10</bold></highlight>. The language processing methods <highlight><bold>22</bold></highlight> that use FSTs, compiled for example from regular expressions using compiler <highlight><bold>26</bold></highlight>, that are described above include tokenization, phonological and morphological analysis, disambiguation, spelling correction, and shallow parsing. The FST factorization methods <highlight><bold>23</bold></highlight> include those described in Sections C, D, and E above. It will further be recognized that the methods and processes set forth herein are combinable in various ways to produce advantageous results. </paragraph>
<paragraph id="P-0310" lvl="0"><number>&lsqb;0310&rsqb;</number> It will also be recognized by those skilled in the art that any resulting language processing method(s) incorporating the present invention, having computer-readable program code, may be embodied within one or more computer-usable media such as memory devices or transmitting devices, thereby making a computer program product or article of manufacture. As such, the terms &ldquo;article of manufacture&rdquo; and &ldquo;computer program product&rdquo; as used herein are intended to encompass a computer program existent (permanently, temporarily, or transitorily) on any computer-usable medium such as on any memory device or in any transmitting device. </paragraph>
<paragraph id="P-0311" lvl="0"><number>&lsqb;0311&rsqb;</number> The invention has been described with reference to a particular embodiment. Modifications and alterations will occur to others upon reading and understanding this specification taken together with the drawings. The embodiments are but examples, and various alternatives, modifications, variations or improvements may be made by those skilled in the art from this teaching which are intended to be encompassed by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for factoring an ambiguous finite-state transducer (FST) into an unambiguous FST and a fail-safe FST, comprising the steps of: 
<claim-text>preprocessing the ambiguous FST to create a fully-unfolded FST having a plurality of states and arcs, with each arc having at least one input symbol and at least one output symbol; </claim-text>
<claim-text>grouping the plurality of arcs of the fully-unfolded FST into ambiguity fields; and </claim-text>
<claim-text>for each of the plurality of arcs: 
<claim-text>if the arc is outside of any ambiguity field, copying the arc to the unambiguous FST, and copying the arc to the fail-safe FST while replacing the corresponding input symbol with the corresponding output symbol; and </claim-text>
<claim-text>if the arc is inside an ambiguity field, copying the arc to the unambiguous FST while replacing the corresponding output symbol with a diacritic, and copying the arc to the fail-safe FST while replacing the corresponding input symbol with the diacritic. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the step of factoring the unambiguous FST into a left-sequential FST and a right-sequential FST. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said preprocessing further comprises the steps of: 
<claim-text>concatenating at least one boundary symbol to the ambiguous FST; </claim-text>
<claim-text>minimizing the ambiguous FST to create a minimal FST with an input side and an output side; </claim-text>
<claim-text>left-unfolding the minimal FST to create a left-unfolded FST; and </claim-text>
<claim-text>right-unfolding the left-unfolded FST to create a fully-unfolded FST. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said preprocessing further comprises: 
<claim-text>determining a left-deterministic input finite state automaton by extracting the input side from the minimal FST and determinizing it from left to right; </claim-text>
<claim-text>assigning each state of the left-deterministic input finite state automaton that corresponds to a set of states of the minimal FST a set of state numbers; and </claim-text>
<claim-text>copying every state in the minimal FST to the left-unfolded FST as many times as it occurs in different state sets of the left-deterministic input finite state automaton. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein grouping the plurality of arcs into ambiguity fields further comprises grouping the plurality of arcs into disjoint maximal sets of alternative arcs. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, in which arcs grouped together must have: 
<claim-text>identical input symbols; </claim-text>
<claim-text>identical sets of input prefixes; and </claim-text>
<claim-text>identical sets of input suffixes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the unambiguous FST and the fail-safe FST are adapted for performing language processing. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the language processing comprises one of tokenization, phonological analysis, morphological analysis, disambiguation, spelling correction, and shallow parsing. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein input prefix and input suffix sets of the states of the fully-unfolded FST are one of identical and disjoint. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the unambiguous FST and the fail-safe FST are lexical transducers. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An apparatus for factoring an ambiguous finite-state transducer (FST) into an unambiguous FST and a fail-safe FST, comprising: 
<claim-text>means for preprocessing the ambiguous FST to create a fully-unfolded FST having a plurality of states and arcs, with each arc having at least one input symbol and at least one output symbol; </claim-text>
<claim-text>means for grouping the plurality of arcs of the fully-unfolded FST into ambiguity fields; and </claim-text>
<claim-text>for each of the plurality of arcs: 
<claim-text>if the arc is outside of any ambiguity field, copying the arc to the unambiguous FST, and copying the arc to the fail-safe FST while replacing the corresponding input symbol with the corresponding output symbol; and </claim-text>
<claim-text>if the arc is inside an ambiguity field, copying the arc to the unambiguous FST while replacing the corresponding output symbol with a diacritic, and copying the arc to the fail-safe FST while replacing the corresponding input symbol with the diacritic. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the unambiguous FST and the fail-safe FST are adapted for performing language processing. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the language processing comprises one of tokenization, phonological analysis, morphological analysis, disambiguation, spelling correction, and shallow parsing. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the unambiguous FST and the fail-safe FST are lexical transducers. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein input prefix and input suffix sets of the states of the fully-unfolded FST are one of identical and disjoint.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004705A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004705A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004705A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004705A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004705A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004705A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004705A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004705A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004705A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004705A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004705A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004705A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004705A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004705A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004705A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004705A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004705A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030004705A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030004705A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030004705A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030004705A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030004705A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030004705A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030004705A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030004705A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030004705A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030004705A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030004705A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030004705A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030004705A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00030">
<image id="EMI-D00030" file="US20030004705A1-20030102-D00030.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00031">
<image id="EMI-D00031" file="US20030004705A1-20030102-D00031.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00032">
<image id="EMI-D00032" file="US20030004705A1-20030102-D00032.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00033">
<image id="EMI-D00033" file="US20030004705A1-20030102-D00033.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00034">
<image id="EMI-D00034" file="US20030004705A1-20030102-D00034.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00035">
<image id="EMI-D00035" file="US20030004705A1-20030102-D00035.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00036">
<image id="EMI-D00036" file="US20030004705A1-20030102-D00036.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00037">
<image id="EMI-D00037" file="US20030004705A1-20030102-D00037.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00038">
<image id="EMI-D00038" file="US20030004705A1-20030102-D00038.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00039">
<image id="EMI-D00039" file="US20030004705A1-20030102-D00039.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00040">
<image id="EMI-D00040" file="US20030004705A1-20030102-D00040.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00041">
<image id="EMI-D00041" file="US20030004705A1-20030102-D00041.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00042">
<image id="EMI-D00042" file="US20030004705A1-20030102-D00042.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00043">
<image id="EMI-D00043" file="US20030004705A1-20030102-D00043.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
