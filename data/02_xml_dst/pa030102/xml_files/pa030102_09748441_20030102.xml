<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001721A1-20030102-D00000.TIF SYSTEM "US20030001721A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00001.TIF SYSTEM "US20030001721A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00002.TIF SYSTEM "US20030001721A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00003.TIF SYSTEM "US20030001721A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00004.TIF SYSTEM "US20030001721A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00005.TIF SYSTEM "US20030001721A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00006.TIF SYSTEM "US20030001721A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001721A1-20030102-D00007.TIF SYSTEM "US20030001721A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001721</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09748441</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20001227</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>340</class>
<subclass>005800</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>340</class>
<subclass>531000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Authentication of remote appliance messages using an embedded cryptographic device</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60219086</doc-number>
<document-date>20000718</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Wolfgang</given-name>
<family-name>Daum</family-name>
</name>
<residence>
<residence-us>
<city>Louisville</city>
<state>KY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Scott</given-name>
<middle-name>Charles</middle-name>
<family-name>Evans</family-name>
</name>
<residence>
<residence-us>
<city>Burnt Hills</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>Erik</middle-name>
<family-name>Hershey</family-name>
</name>
<residence>
<residence-us>
<city>Ballston Lake</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>John S. Beulick</name-1>
<name-2>Armstrong Teasdale LLP</name-2>
<address>
<address-1>ONE METROPOLITAN SQUARE</address-1>
<city>ST. LOUIS</city>
<state>MO</state>
<postalcode>63102</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method for authenticating appliance messages sent between an appliance and an appliance communication center over an appliance communications network includes maintaining a shared message counter at both the appliance communication center. A shared message counter at both the appliance communication center and the remotely located appliance. An authentication algorithm is applied to the appliance message and the shared message counter to generate an authentication word. The appliance message is then transmitted to the appliance or the communication center along with the authentication word. Upon receiving the appliance message, the appliance or the communication center will apply an authentication algorithm to the appliance message and the shared counter to generate an authentication word. The generated authentication word may be compared to the word received with the appliance message to determine authenticity of the message. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims the benefit of U.S. Provisional Application No. 60/219,086, filed Jul. 18, 2000 and titled Internet Enabled Appliance Command Structure.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to home appliances such as refrigerators, dishwashers, and air conditioners. In particular, the present invention relates to authentication of messages transmitted and received between network enabled appliances and a central controller. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Appliances of the past were stand alone devices, operating on their own without cooperation between or communication among other devices. As a result (as one example) great expenditures of time and effort by repair personnel were required to diagnose problems in an appliance and to take corrective action. As another example, the current and proper operation of an appliance generally could not be determined without being physically present at the appliance. Thus, for example, whether or not the gas burner in a stove had been left on could not be determined without physical inspection. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> However, remote testing and operation of appliances, even if it were available today, must be carefully controlled. In particular, authentication of messages between, for example, a service center (which may send appliance operation commands, for example) and the appliance (which may respond with status information, for example) becomes important. However, in the past, no authentication technique for appliance communications has been available. Furthermore, no suitable technique has been available for protecting the authentication technique against compromised authentication parameters, such as authentication keys. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A need has long existed in the industry for a mechanism that provides for authentication of remote appliance messages that addresses the problems noted above and others previously experienced. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The present invention provides for a method for authenticating appliance messages sent between an appliance and an appliance communication center over an appliance communications network. The method includes maintaining a shared message counter at both the appliance communication center and the remotely located appliance. An authentication algorithm is applied to the appliance message and the shared message counter to generate an authentication word. The appliance message is then transmitted to the appliance or the appliance communication center along with the authentication word. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Upon receiving the appliance message, the appliance or the appliance communication center will apply an authentication algorithm to the appliance message and the shared counter to generate an authentication word. The generated authentication word may be compared to the word received with the appliance message to determine authenticity of the message. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention also provides for a method by which an existing authentication keying variable, K, is replaced with a new authentication keying variable, K&prime;. K&prime; is generated from K one byte at a time. A first authentication word, W<highlight><subscript>1</subscript></highlight>, is generated using the existing authentication keying variable K, a counter, C, and a master keying variable, KM. Then, a portion of W<highlight><subscript>1 </subscript></highlight>is selected as a first portion of K&prime;. The remaining bytes in K&prime; are generated by iteratively generating new authentication words, W<highlight><subscript>n </subscript></highlight>based on C, KM, and a concatenation of a prior authentication word and K. A portion of W<highlight><subscript>n </subscript></highlight>is then selected as an additional portion of K&prime;.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an appliance communication network. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a command frame for communicating over the appliance network. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a command frame with extended fields. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a command frame with a subdivided CMD field for User Community, Field, and Command. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a system for remote appliance monitoring, control, and diagnosis using an Embedded Cryptographic Device (ECD). </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a flow diagram of the cryptographic algorithm used to generate an authentication word. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a flow diagram of modifying an authentication keying variable K using a master keying variable, KM. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a flow diagram of the authentication process.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Turning to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, that figure illustrates an appliance network <highlight><bold>100</bold></highlight> including a range or oven <highlight><bold>102</bold></highlight>, a microwave <highlight><bold>104</bold></highlight>, an air conditioner <highlight><bold>106</bold></highlight>, and a refrigerator <highlight><bold>108</bold></highlight>. As an example, the oven <highlight><bold>102</bold></highlight> connects through a serial bus <highlight><bold>110</bold></highlight> to an Appliance Communication Controller (ACC) <highlight><bold>112</bold></highlight>. The ACC <highlight><bold>112</bold></highlight> connects to and communicates over the power line <highlight><bold>114</bold></highlight> to the ACC <highlight><bold>116</bold></highlight>. The ACC <highlight><bold>116</bold></highlight>, in turn, connects to an Internet gateway <highlight><bold>118</bold></highlight>, such as that provided by a laptop or desktop computer (e.g., through a modem dial-up, T1 line, and the like). The appliance network <highlight><bold>100</bold></highlight> also includes a bar code scanner <highlight><bold>120</bold></highlight> that provides additional input flexibility. As will be described in more detail below, the appliance network <highlight><bold>100</bold></highlight> provides a command structure for secure bidirectional communication of appliance related data over a public access network. The command structure includes extendable addressing and commands, identifiers to ensure connection to the correct appliance, and support for context sensitive commands. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The command structure may be used over any multidrop network including Ethernet over 10 base T, power line carrier, RS422, and the like. The preferred embodiment uses a power line carrier. Power line carrier communication modules are manufactured, for example, by Domosys. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, that figure shows a command frame <highlight><bold>200</bold></highlight> divided into multiple fields. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows each field name, and the number of bits for each field. The fields are as follows: </paragraph>
<paragraph id="P-0020" lvl="1"><number>&lsqb;0020&rsqb;</number> STX&mdash;8 bits&mdash;Start of Transmission (the preferred pattern is 0&times;02). </paragraph>
<paragraph id="P-0021" lvl="1"><number>&lsqb;0021&rsqb;</number> RX ADD&mdash;16 bits&mdash;Receiver address. RX ADD is a 16 bit extendable field. 256 values of the 65536 possible values are reserved for broadcast and extension addresses. The address 00FF is reserved for broadcast messages. Other addresses ending in FF translate the address field to the extended field as explained below. </paragraph>
<paragraph id="P-0022" lvl="1"><number>&lsqb;0022&rsqb;</number> TX ADD&mdash;16 bits&mdash;Transmitter address. TX ADD is a 16 bit extendable field. 256 values of the 65536 possible values are reserved for extension addresses. Extension addresses end in FF and translate the address field to the extended field. </paragraph>
<paragraph id="P-0023" lvl="1"><number>&lsqb;0023&rsqb;</number> NUM BYTES&mdash;16 bits&mdash;Number of Bytes. NUM BYTES gives the number of bytes that follows in the command frame, excluding the ETX bits. Thus, messages sizes may be as large as 65536&plus;ETX&plus;TX ADD&plus;RX ADD&plus;STX bytes. </paragraph>
<paragraph id="P-0024" lvl="1"><number>&lsqb;0024&rsqb;</number> CMD&mdash;16 bits&mdash;CMD defines the command to be issued to the appliance. This is a 16 bit extendable field. 256 values of the 65536 possible values are reserved for extension addresses. Extension addresses end in FF and translate the address field to the extended field. As explained in more detail below, this field may contain a context switch command as well as control commands. </paragraph>
<paragraph id="P-0025" lvl="1"><number>&lsqb;0025&rsqb;</number> MFG&mdash;16 bits&mdash;MFG defines the manufacturer of the appliance. This is a 16 bit extendable field. 256 values of the 65536 possible values are reserved for extension addresses. Extension addresses end in FF and translate the address field to the extended field. </paragraph>
<paragraph id="P-0026" lvl="1"><number>&lsqb;0026&rsqb;</number> APPL TYPE&mdash;16 bits&mdash;APPL TYPE is the appliance type field and defines the type of appliance which participates in context switching. APPL TYPE is a 16 bit extendable field. 256 values of the 65536 possible values are reserved for extension addresses. Extension addresses end in FF and translate the address field to the extended field. </paragraph>
<paragraph id="P-0027" lvl="1"><number>&lsqb;0027&rsqb;</number> DATA&mdash;variable number of bytes&mdash;The DATA field is typically used in conjunction with the CMD field. As examples, the DATA field may include encryption, display data, software updates, diagnostic commands, remote control access, and the like. </paragraph>
<paragraph id="P-0028" lvl="1"><number>&lsqb;0028&rsqb;</number> CRC&mdash;12 bits&mdash;The CRC field provides a 12 bit cyclic redundancy check computed over all bytes of the data packet except for the STX and ETX bytes, and the CRC field itself. </paragraph>
<paragraph id="P-0029" lvl="1"><number>&lsqb;0029&rsqb;</number> ETX&mdash;8 bits&mdash;ETX provides an End-of-Transmission character, preferably 0&times;03. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As noted above, several of the command frame fields are extendable. Field extension allows increasing a selected field in increments of 8 bits. Thus, for example, a 16 bit field may be extended to a 24 bit field. If it is determined that more than 24 bits are needed, then the 24 bit field may be extended to a 32 bit field, and so on. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an example of a command frame <highlight><bold>300</bold></highlight> that extends the RX address field <highlight><bold>302</bold></highlight> to a 24 bit field. As shown, the RX address field holds the address 14FC12. The command frame also shows the TX address field <highlight><bold>304</bold></highlight> extended to 32 bits and holding the address 123EC254. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Note, however, that alternative command frames may be used, such as the CEBus&trade; command frame. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Each appliance may support one or more contexts. Contexts define a current mode of operation for the appliance, and thus may be used to accept or reject certain commands that are valid only in certain contexts. The contexts may include, as examples: </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Service and Technology using local access, which includes commands directed by appliance field service technicians working within the home, and manufacturer engineering community developing products in their laboratories. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Service and Technology using remote access, which includes commands directed by appliance manufacturers product service organizations accessing remotely via the internet. Such access would be restricted from certain functionality, such as activating a burner on a cook-top. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Manufacturing, which includes commands directed by the appliance manufacturer on the factory floor for diagnostic testing, calibration, writing configuration parameters, etc. This community could also be used by the manufacturer to download new firmware to the appliances after they are already installed in the field. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Sales &amp; Marketing, which includes commands directed by dealers on the showroom floor to demonstrate features to potential customers without necessarily activating all the loads. For instance, all the features of a microwave could be activated without actually turning on the magnetron. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Customer &amp; Consumer Local Access, which includes commands directed by the product owner, or anyone granted access by the product owner, when that person(s) has access to the product in his immediate vicinity (i.e. access directly through the power line). </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Customer &amp; Consumer Remote Access, which includes commands directed by the product owner, or anyone granted access by the product owner, when that person (s) does not have access to the product in his immediate vicinity (i.e. has to go over the internet). Such access would be restricted from certain functionality, such as activating a burner on a cook-top. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Other Appliances and Extensions, which includes commands generated by other appliances or products. Such as a dishwasher signaling a hot water heater that it is about to demand x gallons of water, or a clothes dryer signaling a TV that it has finished its cycle so the appropriate message may be displayed. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Security, which includes commands directed to changing the user community context. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Context selection, and the resulting additional control or access provided in a certain context, is controlled through encryption in the command frame <highlight><bold>200</bold></highlight>. For example, encrypted commands may be provided in the DATA field, as explained in the encryption section below. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In one implementation, context switching occurs as a result of a command that is not understood by the appliance or the ACC at the appliance or a command that is not allowed in the currently active context. When the appliance or the ACC receives a command that it does not understand or a command that is not allowed in the current context one of two responses preferably occur. In one embodiment the appliance or ACC will query the gateway or the server for a context switch. The gateway or server will determine if a context switch is allowed. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> If the context switch request is valid then the server or gateway will determine if the context switch may be done locally (within the ACC) via a single command, within the LAN (from the gateway or server to the ACC) or across the internet. As an example, an Internet download may also be a fee based context switch. Such fee based context switches may be used for diagnostics, service, and other features for which a fee will be charged. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In general, each ACC will have a unique mutli-bit address, including an 8-BIT extendable building identifier prefix, while an appliance will have a unique serial number and a model number. The ACC is cognizant of the appliances to which it is connected by communicating with the appliances, for example, to discover their serial number and model number. To switch contexts, an authorization string may be transmitted in the command frame <highlight><bold>200</bold></highlight>, e.g., API&rarr;Node Number &ldquo;Request Community N&rdquo; (INCL BLDG &num;). The appliance may then authenticate the message and reply &ldquo;Authorized for community N&rdquo; (INCL BLDG &num;) or &ldquo;Authorization not recognized&rdquo;. When authorization is available, the node may, for example, remain authorized for a predetermined time (e.g., 5 minutes). </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Additional commands are provided for explicit Deauthorization, bus arbitration (e.g., where one node becomes bus master, another node is a slave, and all other nodes &ldquo;hold off&rdquo; the bus). A command may also be provided to turn Free hold off (i.e., release all nodes from the hold off state so that they may try to gain control of the bus via arbitration, where hold off is the term used to describe the condition of nodes which are inhibited from talking while the secure context switching transaction is completed), and for Authorization standby (i.e., the temporary mode used to describe the condition where request for authorization to switch to a new context has been submitted, but waiting back for the response from the authorizing entity). </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Appliances receive command frames over the appliance network <highlight><bold>100</bold></highlight> and respond appropriately. To this end, the CMD field may be split into subfields as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Preferably, the CMD field includes a 4-bit User Community field, a 4-bit Field field, and an 8-bit Command field. The User Community specifies the highest level of the command structure, the Field field specifies a second level, and the Command field specifies the command within the User Community and Field to perform. Command structures may be stored in a memory in the appliance itself or the ACC connected to the appliance. Thus, for example, when an ACC receives a command from another device in the appliance network <highlight><bold>100</bold></highlight>, the command will be translated into an action for the appliance to perform. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an exemplary system <highlight><bold>500</bold></highlight> for remote appliance monitoring, control, and diagnosis using an Embedded Cryptographic Device (ECD) for message authentication. The system <highlight><bold>500</bold></highlight> includes an appliance communication center <highlight><bold>510</bold></highlight>, a communication network <highlight><bold>535</bold></highlight>, and home appliances such as a refrigerator <highlight><bold>550</bold></highlight>, a dishwasher <highlight><bold>540</bold></highlight>, and an oven <highlight><bold>545</bold></highlight>, for example. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The appliance communication center <highlight><bold>510</bold></highlight> preferably includes a CPU <highlight><bold>515</bold></highlight>, a shared counter <highlight><bold>525</bold></highlight>, an Embedded Cryptographic Device (ECD) <highlight><bold>520</bold></highlight>, and a communication interface <highlight><bold>530</bold></highlight>. The shared counter <highlight><bold>525</bold></highlight> provides, as an example, register or other memory space in which the CPU <highlight><bold>515</bold></highlight> may maintain counters as explained below. The shared counter <highlight><bold>525</bold></highlight> need not be a separate memory. Rather, the shared counter <highlight><bold>525</bold></highlight> may be included in the ECD <highlight><bold>520</bold></highlight>, for example. The ECD <highlight><bold>520</bold></highlight> preferably stores an algorithm used to authenticate data it receives from an appliance such as the refrigerator <highlight><bold>550</bold></highlight>. To that end, the ECD <highlight><bold>520</bold></highlight> may include program and data memory from which the CPU <highlight><bold>515</bold></highlight> executes the cryptographic algorithm, or may include a dedicated CPU, program memory, and data memory with which to process the cryptographic algorithm and share results with the CPU <highlight><bold>515</bold></highlight>. The CPU <highlight><bold>520</bold></highlight> is preferably linked to a communication interface <highlight><bold>530</bold></highlight> that connects the appliance communication center <highlight><bold>510</bold></highlight> to a communication network <highlight><bold>535</bold></highlight> using, for example, a network interface card, cable modem, dial up connection, or the like. The communication network <highlight><bold>535</bold></highlight> may be, for example, the Internet, and the communication interface <highlight><bold>530</bold></highlight> preferably communicates with the communication network <highlight><bold>535</bold></highlight> using the TCP/IP protocol. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As mentioned above, the system <highlight><bold>500</bold></highlight> also includes home appliances such as a refrigerator <highlight><bold>550</bold></highlight>, a dishwasher <highlight><bold>540</bold></highlight>, and an oven <highlight><bold>545</bold></highlight>, as examples. The refrigerator <highlight><bold>550</bold></highlight> preferably includes a CPU <highlight><bold>555</bold></highlight>, a shared counter <highlight><bold>565</bold></highlight>, an ECD <highlight><bold>560</bold></highlight>, and a communication interface <highlight><bold>570</bold></highlight>. As noted above, the shared counter <highlight><bold>565</bold></highlight> may be part of the ECD <highlight><bold>560</bold></highlight>, and the ECD <highlight><bold>560</bold></highlight> may provide program and data memory to the CPU <highlight><bold>555</bold></highlight>, or may implement a CPU, program memory and data memory dedicated to cryptographic processing. The CPU <highlight><bold>555</bold></highlight> is linked to a communication interface <highlight><bold>570</bold></highlight> that connects the refrigerator <highlight><bold>550</bold></highlight> to the communication network <highlight><bold>535</bold></highlight>, using for example, an ACC or other powerline carrier communication device coupled to a gateway to the communication network <highlight><bold>535</bold></highlight>. Other home appliances, such as the dishwasher <highlight><bold>540</bold></highlight> and the oven <highlight><bold>545</bold></highlight> are also connected to the communication network <highlight><bold>535</bold></highlight> and include the message authentication cryptographic hardware explained above. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In operation, the appliance communication center <highlight><bold>510</bold></highlight> preferably sends messages forming a reduced message set protocol (RMSP) over the communication network <highlight><bold>535</bold></highlight> to the home appliances <highlight><bold>540</bold></highlight>, <highlight><bold>545</bold></highlight>, <highlight><bold>550</bold></highlight>. The reduced message set protocol (RMSP) is a relatively small library of messages that provide query, command, and information messages between the appliance communication center <highlight><bold>510</bold></highlight> and the home appliances. The home appliances such as the refrigerator <highlight><bold>550</bold></highlight> then authenticate the message, if required, received from the appliance communication center <highlight><bold>510</bold></highlight>. If the message received by the refrigerator <highlight><bold>550</bold></highlight> from the appliance communication center <highlight><bold>510</bold></highlight> is authentic, the refrigerator <highlight><bold>550</bold></highlight> may then act on a command included in the message. Furthermore, the refrigerator <highlight><bold>550</bold></highlight> may transmit responsive messages back to the appliance communication center <highlight><bold>510</bold></highlight>. The appliance communication center <highlight><bold>510</bold></highlight> may then authenticate the message from the refrigerator <highlight><bold>550</bold></highlight>, if required, and take an appropriate action. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In general, query messages do not require authentication by the home appliances <highlight><bold>540</bold></highlight>, <highlight><bold>545</bold></highlight>, <highlight><bold>550</bold></highlight> that receive them. Examples of query messages include, &ldquo;what is your counter setting&quest;&rdquo;, &ldquo;what is the next counter setting you expect the appliance communication center <highlight><bold>510</bold></highlight> to use&quest;&rdquo;, &ldquo;do you have a message to send&quest;&rdquo;, &ldquo;repeat the last message you sent&rdquo;, or &ldquo;repeat the last message you accepted.&rdquo;</paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Command messages, however, generally require authentication because they request the appliance to take a specific action. Examples of command messages include &ldquo;perform the commanded action&rdquo;, for example &ldquo;shut off&rdquo;, &ldquo;turn on&rdquo;, &ldquo;change your authentication keying variable&rdquo;, or &ldquo;raise/lower your temperature.&rdquo; Another example of a command message is &ldquo;continue&rdquo;. The Continue message indicates that the appliance communication center <highlight><bold>510</bold></highlight> has received an authenticated message from the appliance, and that the appliance should now increment its shared counter. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The home appliances <highlight><bold>540</bold></highlight>, <highlight><bold>545</bold></highlight>, and <highlight><bold>550</bold></highlight>, may send query response messages or information messages. The query response messages preferably do not require authentication by the appliance communication center <highlight><bold>510</bold></highlight> that receives them. Examples of query response messages include &ldquo;my counter setting is x&rdquo;, where x is the counter setting in the appliance, &ldquo;the next counter setting I expect the appliance communication center <highlight><bold>510</bold></highlight> to use is y&rdquo;, &ldquo;I have a message to send&rdquo;, &ldquo;I do not have a message to send&rdquo;, or &ldquo;the last message I sent was z&rdquo;. Information messages are preferably authenticated. Examples of information messages include &ldquo;I am reporting the following information: Q.&rdquo; Q may be diagnostic information requested by the appliance communication center <highlight><bold>510</bold></highlight> or a reportable condition detected by sensors communicating locally to the home appliance such as the refrigerator <highlight><bold>550</bold></highlight>, for example. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a flow diagram <highlight><bold>600</bold></highlight> of the authentication algorithm used to produce an authentication word, W. At step <highlight><bold>610</bold></highlight>, the CPU <highlight><bold>515</bold></highlight> at an appliance communication center <highlight><bold>510</bold></highlight> generates an M-byte message, MSG, with bits MSG&equals;(m<highlight><subscript>8(M&minus;1)&plus;7</subscript></highlight>, . . . , m<highlight><subscript>8(M&minus;1)</subscript></highlight>, . . . , m<highlight><subscript>15</subscript></highlight>, . . . , m<highlight><subscript>8</subscript></highlight>, m<highlight><subscript>7</subscript></highlight>, . . . , m<highlight><subscript>0</subscript></highlight>) that are grouped into M bytes (MSG<highlight><subscript>M&minus;1</subscript></highlight>, . . . , MSG<highlight><subscript>1</subscript></highlight>, MSG<highlight><subscript>0</subscript></highlight>). Next, at step <highlight><bold>612</bold></highlight>, an index value is determined as MAX(3, M&minus;1). That is, the greater of the two values 3 or M&minus;1 is the value of the index. At step <highlight><bold>615</bold></highlight>, the CPU <highlight><bold>515</bold></highlight> reads or obtains a 3-byte (preferably) shared counter, C, with bits C&equals;(c<highlight><subscript>23</subscript></highlight>, . . . c<highlight><subscript>16</subscript></highlight>, c<highlight><subscript>15</subscript></highlight>, . . . , c<highlight><subscript>8</subscript></highlight>, c<highlight><subscript>7</subscript></highlight>, . . . , c<highlight><subscript>0</subscript></highlight>) that are grouped into 3 bytes (C<highlight><subscript>2</subscript></highlight>, C<highlight><subscript>1</subscript></highlight>, C<highlight><subscript>0</subscript></highlight>) from the shared counter <highlight><bold>525</bold></highlight>. The shared counter <highlight><bold>525</bold></highlight> is preferably initially set to all zeros when the appliance is first connected to the network. Additionally, at step <highlight><bold>620</bold></highlight>, the CPU reads or obtains an X-byte authentication keying variable, K, with bits K&equals;(k<highlight><subscript>8X&minus;1</subscript></highlight>, . . . , k<highlight><subscript>8X&minus;8</subscript></highlight>, . . . , k<highlight><subscript>15</subscript></highlight>, . . . , k<highlight><subscript>8</subscript></highlight>, k<highlight><subscript>7</subscript></highlight>, . . . , k<highlight><subscript>0</subscript></highlight>), that are grouped into X bytes (K<highlight><subscript>X-&minus;1</subscript></highlight>, K<highlight><subscript>X&minus;2</subscript></highlight>, . . . , K<highlight><subscript>2</subscript></highlight>, K<highlight><subscript>1</subscript></highlight>, K<highlight><subscript>0</subscript></highlight>). In the preferred embodiment, X&equals;6. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The authentication word, W, is a function of the M-byte message, the 3-byte shared counter, and the X-byte authentication keying variable. That is, W&equals;&fnof;(M,C,K). The complexity of the function, f, is generally appropriate for the class of CPUs that may be present in home appliances. At step <highlight><bold>625</bold></highlight>, a 4-byte working register, R, is allocated with bits R&equals;(r<highlight><subscript>31</subscript></highlight>, . . . , r<highlight><subscript>24</subscript></highlight>, r<highlight><subscript>23</subscript></highlight>, . . . , r<highlight><subscript>16</subscript></highlight>, r<highlight><subscript>15</subscript></highlight>, . . . , r<highlight><subscript>8</subscript></highlight>, r<highlight><subscript>7</subscript></highlight>, . . . , r<highlight><subscript>0</subscript></highlight>) that are grouped into four bytes (R<highlight><subscript>3</subscript></highlight>, R<highlight><subscript>2</subscript></highlight>, R<highlight><subscript>1</subscript></highlight>, R<highlight><subscript>0</subscript></highlight>). Then, at step <highlight><bold>630</bold></highlight>, R<highlight><subscript>3 </subscript></highlight>is initialized as a directional code. That is, R<highlight><subscript>3</subscript></highlight>&equals;(r<highlight><subscript>31</subscript></highlight>, . . . , r<highlight><subscript>24</subscript></highlight>) is set to (0, . . . , 0) when the transmission is to be sent from a remote terminal <highlight><bold>550</bold></highlight> to an appliance communication center <highlight><bold>510</bold></highlight>, and to (1,. . . , 1) when the transmission is to be sent from an appliance communication center <highlight><bold>510</bold></highlight> to a remote terminal <highlight><bold>550</bold></highlight>. Also, the counter n is set to zero. At step <highlight><bold>635</bold></highlight>, R<highlight><subscript>2</subscript></highlight>, R<highlight><subscript>1</subscript></highlight>, and Ro are initialized to equal the current value of the 3-byte shared counter C. That is, (R<highlight><subscript>2</subscript></highlight>, R<highlight><subscript>1</subscript></highlight>, R<highlight><subscript>0</subscript></highlight>)&equals;(r<highlight><subscript>23</subscript></highlight>, . . . r<highlight><subscript>16</subscript></highlight>, r<highlight><subscript>15</subscript></highlight>, . . . , r<highlight><subscript>8</subscript></highlight>, r<highlight><subscript>7</subscript></highlight>, . . . , r<highlight><subscript>0</subscript></highlight>)&equals;(c<highlight><subscript>23</subscript></highlight>, . . . c<highlight><subscript>16</subscript></highlight>, c<highlight><subscript>15</subscript></highlight>, . . . , c<highlight><subscript>8</subscript></highlight>, c<highlight><subscript>7</subscript></highlight>, . . . , c<highlight><subscript>0</subscript></highlight>) Steps <highlight><bold>636</bold></highlight> and <highlight><bold>637</bold></highlight>, respectively, initialize loop control variables i </paragraph>
<paragraph id="P-0057" lvl="7"><number>&lsqb;0057&rsqb;</number> and j to 0. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Next at step <highlight><bold>645</bold></highlight>, the Boolean dot product P of R<highlight><subscript>2 </subscript></highlight>and R<highlight><subscript>0 </subscript></highlight>(bit-by-bit Boolean AND) is formed as: p<highlight><subscript>0</subscript></highlight>&equals;r<highlight><subscript>16</subscript></highlight>r<highlight><subscript>0</subscript></highlight>, p<highlight><subscript>7</subscript></highlight>&equals;r<highlight><subscript>17</subscript></highlight>r<highlight><subscript>1</subscript></highlight>, p<highlight><subscript>2</subscript></highlight>&equals;r<highlight><subscript>18</subscript></highlight>r<highlight><subscript>2</subscript></highlight>, p<highlight><subscript>3</subscript></highlight>&equals;r<highlight><subscript>19</subscript></highlight>r<highlight><subscript>3</subscript></highlight>, p<highlight><subscript>4</subscript></highlight>&equals;r<highlight><subscript>20</subscript></highlight>r<highlight><subscript>4</subscript></highlight>, p<highlight><subscript>5</subscript></highlight>&equals;r<highlight><subscript>21</subscript></highlight>r<highlight><subscript>5</subscript></highlight>, p<highlight><subscript>6</subscript></highlight>&equals;r<highlight><subscript>22</subscript></highlight>r<highlight><subscript>6</subscript></highlight>, and p<highlight><subscript>7</subscript></highlight>&equals;r<highlight><subscript>23</subscript></highlight>r<highlight><subscript>7 </subscript></highlight>where p&equals;(p<highlight><subscript>7</subscript></highlight>, p<highlight><subscript>6</subscript></highlight>, p<highlight><subscript>5</subscript></highlight>, p<highlight><subscript>4</subscript></highlight>, p<highlight><subscript>3</subscript></highlight>, p<highlight><subscript>2</subscript></highlight>, p<highlight><subscript>1</subscript></highlight>, p<highlight><subscript>0</subscript></highlight>) Then at step <highlight><bold>650</bold></highlight>, Q is formed by performing a bit-by-bit exclusive-or of P with (0,1,1,0,1,0,1), where Q&equals;(q<highlight><subscript>7</subscript></highlight>, q<highlight><subscript>6</subscript></highlight>, q<highlight><subscript>5</subscript></highlight>, q<highlight><subscript>4</subscript></highlight>, q<highlight><subscript>3</subscript></highlight>, q<highlight><subscript>2</subscript></highlight>, q<highlight><subscript>1</subscript></highlight>, q<highlight><subscript>0</subscript></highlight>). Next, at step <highlight><bold>655</bold></highlight>, S&equals;(s<highlight><subscript>7</subscript></highlight>, s<highlight><subscript>6</subscript></highlight>, s<highlight><subscript>5</subscript></highlight>, s<highlight><subscript>4</subscript></highlight>, s<highlight><subscript>3</subscript></highlight>, s<highlight><subscript>2</subscript></highlight>, s<highlight><subscript>1</subscript></highlight>, s<highlight><subscript>0</subscript></highlight>) is formed by adding Q to the i-th key byte, K<highlight><subscript>i</subscript></highlight>, i.e., (k<highlight><subscript>8i&plus;7</subscript></highlight>, k<highlight><subscript>8i&plus;6</subscript></highlight>, k<highlight><subscript>8i&plus;5</subscript></highlight>, k<highlight><subscript>8i&plus;4</subscript></highlight>, k<highlight><subscript>8i&plus;3</subscript></highlight>, k<highlight><subscript>8i&plus;2</subscript></highlight>, k<highlight><subscript>8i&plus;1</subscript></highlight>, k<highlight><subscript>8i</subscript></highlight>), using binary addition and discarding the left-most carry bit. Then, at step <highlight><bold>658</bold></highlight>, the byte S is end-around rotated to form the new byte S&prime;&equals;(s<highlight><subscript>6</subscript></highlight>, s<highlight><subscript>5</subscript></highlight>, s<highlight><subscript>4</subscript></highlight>, s<highlight><subscript>3</subscript></highlight>, s<highlight><subscript>2</subscript></highlight>, s<highlight><subscript>1</subscript></highlight>, s<highlight><subscript>0</subscript></highlight>, s<highlight><subscript>7</subscript></highlight>). Then, at step <highlight><bold>660</bold></highlight>, T is formed by performing a bit-by-bit exclusive-or of S&prime; with the byte R<highlight><subscript>3</subscript></highlight>. Next, at step <highlight><bold>665</bold></highlight>, F is formed by performing a bit-by-bit exclusive-or of T with byte MSG<highlight><subscript>(modulo(index&plus;1)</subscript></highlight>. Next at step <highlight><bold>670</bold></highlight>, the following replacements occur: byte R<highlight><subscript>3 </subscript></highlight>with byte R<highlight><subscript>2</subscript></highlight>, byte R<highlight><subscript>2 </subscript></highlight>with byte R<highlight><subscript>1</subscript></highlight>, byte R<highlight><subscript>1 </subscript></highlight>with byte R<highlight><subscript>0</subscript></highlight>, and byte R<highlight><subscript>0 </subscript></highlight>with byte F. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Then, at step <highlight><bold>672</bold></highlight>, j is incremented by unity. Then, at step <highlight><bold>675</bold></highlight>, if j&lE;index, program flow passes back to step <highlight><bold>645</bold></highlight>; otherwise, program flow proceeds to step <highlight><bold>678</bold></highlight>. At step <highlight><bold>678</bold></highlight>, i is incremented by unity. Then at step <highlight><bold>680</bold></highlight>, if i&lE;(X&minus;1), program flow passes back to step <highlight><bold>637</bold></highlight>; otherwise, the program flow proceeds to step <highlight><bold>685</bold></highlight>. At step <highlight><bold>685</bold></highlight>, the CPU performs an end around shift of the R register by one bit, that is, it replaces (r<highlight><subscript>31</subscript></highlight>, r<highlight><subscript>30</subscript></highlight>, . . . , r<highlight><subscript>1</subscript></highlight>, r<highlight><subscript>0</subscript></highlight>) by (r<highlight><subscript>30</subscript></highlight>, r<highlight><subscript>29</subscript></highlight>, . . . , r<highlight><subscript>0</subscript></highlight>, r<highlight><subscript>31</subscript></highlight>). </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Next, at step <highlight><bold>688</bold></highlight>, n is incremented by unity. Then, at step <highlight><bold>690</bold></highlight>, if n&lt;c, program flow passes to step <highlight><bold>636</bold></highlight>; otherwise, the program flow passes to step <highlight><bold>692</bold></highlight>. Note that the constant c is a system parameter, preferably <highlight><bold>128</bold></highlight> (although other values are also suitable depending on the particular system implementation), that controls how many times the processing steps <highlight><bold>636</bold></highlight>-<highlight><bold>690</bold></highlight> repeat. At step <highlight><bold>692</bold></highlight>, the authentication word W is formed by setting W&equals;R, that is, w<highlight><subscript>31</subscript></highlight>&equals;r<highlight><subscript>31</subscript></highlight>, w<highlight><subscript>30</subscript></highlight>&equals;r<highlight><subscript>30</subscript></highlight>, . . . , w<highlight><subscript>0</subscript></highlight>&equals;r<highlight><subscript>0</subscript></highlight>. Finally, at step <highlight><bold>695</bold></highlight>, the authentication word W is transmitted with the message. Note that the message itself is not scrambled or encrypted. Rather, the authentication word W is provided to allow a receiver to determine whether the message is genuine. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Because an authentication keying variable may sometimes be compromised by outside attack, the present authentication techniques provide a mechanism for generating one or more replacement authentication keying variables using a single additional master keying variable. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a flow diagram <highlight><bold>700</bold></highlight> of an algorithm that allows the authentication keying variable, K, to be changed in an appliance without having physical access to the appliance. To this end, a &ldquo;master&rdquo; keying variable, KM may be installed in the embedded cryptographic devices <highlight><bold>520</bold></highlight>, <highlight><bold>560</bold></highlight>. The new authentication keying variable K&prime; is generated one byte at a time. While the new authentication keying variable K&prime; may be the same size as the original authentication keying variable K, it need not be. The algorithm illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is generalized to allow for the generation of a new authentication keying variable K&prime; having Z bytes. The command to change the authentication keying variable may also specify a change in the length of the authentication keying variable. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> First, at step <highlight><bold>710</bold></highlight>, the home appliance receives from the appliance communication center <highlight><bold>510</bold></highlight> a command message to change its keying variable K. Next, at step <highlight><bold>720</bold></highlight>, the authentication algorithm as described in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is run using the master keying variable KM instead of the original K. The original authentication keying variable K is treated (processed) as the message. The result is a four-byte authentication word WO. Next, at step <highlight><bold>730</bold></highlight>, a byte of the authentication word, WO, for example, bits w<highlight><subscript>0</subscript></highlight>, w<highlight><subscript>1</subscript></highlight>, . . . , w<highlight><subscript>7 </subscript></highlight>are selected as the first eight bits of the new authentication keying variable, K&prime;, the zero-th byte of K&prime;. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> At step <highlight><bold>735</bold></highlight>, the method checks to see if Z (the number of bytes to be generated to complete the new authentication keying variable K&prime;) is equal to 1. If it is, the method proceeds to step <highlight><bold>790</bold></highlight>. If not, the method continues to step <highlight><bold>738</bold></highlight>. At step <highlight><bold>738</bold></highlight>, a loop counter variable i is initialized to 1. Subsequently, at step <highlight><bold>740</bold></highlight>, the authentication algorithm is applied using the master keying variable KM and processing the message comprised of the concatenation of K and W<highlight><subscript>(i&minus;1) </subscript></highlight>to produce the authentication word W<highlight><subscript>i</subscript></highlight>. Then, at step <highlight><bold>750</bold></highlight>, the first byte of W<highlight><subscript>i </subscript></highlight>is selected as the i<highlight><superscript>th </superscript></highlight>byte of the new authentication keying variable, K&prime;. At step <highlight><bold>752</bold></highlight>, the loop counter variable i is incremented. Then, at step <highlight><bold>755</bold></highlight>, the condition i&lt;Z is evaluated. If the condition is true, the method will return to step <highlight><bold>740</bold></highlight>. In this way, the method will continue to iteratively generate the subsequent bytes of K&prime;. This will continue until the condition at step <highlight><bold>755</bold></highlight> evaluates to false, at which time the method will proceed to step <highlight><bold>790</bold></highlight>. At step <highlight><bold>790</bold></highlight>, the fully formed K&prime; replaces K. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a flow chart of the authentication process <highlight><bold>800</bold></highlight>. First, at step <highlight><bold>810</bold></highlight>, a receiver (e.g., the refrigerator <highlight><bold>550</bold></highlight>), receives an authentication word W, and a message M, from the appliance communication center <highlight><bold>510</bold></highlight>. Next, at step <highlight><bold>820</bold></highlight>, the refrigerator <highlight><bold>550</bold></highlight> retrieves its shared counter value, C, and its keying variable K. Then at step <highlight><bold>830</bold></highlight>, the refrigerator <highlight><bold>550</bold></highlight> generates a local authentication word W to compare with the authentication word sent from the appliance communication center <highlight><bold>510</bold></highlight>. Next, at step <highlight><bold>840</bold></highlight>, the local authentication word is compared to the received authentication word. If the two authentication words match exactly, then at step <highlight><bold>850</bold></highlight>, the message M, from the appliance communication center <highlight><bold>510</bold></highlight> is accepted by the refrigerator <highlight><bold>550</bold></highlight> and acted on. If the two authentication words do not match exactly, then at step <highlight><bold>860</bold></highlight>, the message M is rejected. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Generally, the shared counters referenced above are preferably non-resettable, non-volatile, and incremented after each message sent or received. In general, an ECD increments its shared counter when it receives an answer from the appliance communication center <highlight><bold>510</bold></highlight> in response to a message sent to the appliance communication center <highlight><bold>510</bold></highlight>. The appliance communication center <highlight><bold>510</bold></highlight> may store shared counters and keying variable for numerous home appliances distributed across numerous buildings, campuses, geographic regions, and the like. Thus, a single appliance communication center <highlight><bold>510</bold></highlight> may provide message authentication for a large number of home appliances by accessing the particular shared counter and keying variable for each appliance as messages are sent to and received from that appliance. The appliance communication center <highlight><bold>510</bold></highlight> may check the connection between the appliance communication center <highlight><bold>510</bold></highlight> and a receiver using a command that requires no action, except authentication and shared counter incrementation. A connection check may occur at predetermined elapsed times without communication from the receiver (e.g., 8 hours, 1 day, and the like). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> After sending a message requiring authentication to an ECD, the appliance communication center <highlight><bold>510</bold></highlight> may query the ECD for the next counter setting that the ECD expected the appliance communication center <highlight><bold>510</bold></highlight> to use. If the shared counter had not been incremented, then the appliance communication center <highlight><bold>510</bold></highlight> may ask for a copy of the last message that the ECD had accepted. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> It is also noted that the algorithm as presented above is not restricted to the particular implementation set forth above. Thus, the authentication keying variable length, shared counter length, number of iterations, and the like may be changed depending on the specific implementation desired and computational capacity available. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The present invention provides a mechanism by which messages sent between an appliance and an appliance communication center may be authenticated, thus providing security within the appliance network. Further, if a system compromise were to occur, a mechanism is provided to generate a new authentication keying variable within the appliance. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> While the invention has been described with reference to a preferred embodiment, those skilled in the art will understand that various changes may be made and equivalents may be substituted without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular step, structure, or material to the teachings of the invention without departing from its scope. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed, but that the invention will include all embodiments falling within the scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for replacing an existing authentication keying variable K with a new authentication keying variable K&prime; generated from K, the method comprising: 
<claim-text>generating a first authentication word, W<highlight><subscript>1</subscript></highlight>, based on the existing keying variable K, a counter, C, and a master keying variable, KM; </claim-text>
<claim-text>selecting a portion of W<highlight><subscript>1 </subscript></highlight>as a first-portion of K&prime;; and </claim-text>
<claim-text>completing remaining portions of K&prime; by iteratively: 
<claim-text>generating new authentication words, W<highlight><subscript>n </subscript></highlight>based on C, KM, and a concatenation of a prior authentication word and K; and </claim-text>
<claim-text>selecting an additional portion of W<highlight><subscript>n </subscript></highlight>as an additional portion of K&prime;. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein generating new authentication words, W<highlight><subscript>n</subscript></highlight>, comprises generating new authentication words based on C, KM, and a concatenation of an immediately prior authentication word W<highlight><subscript>n&minus;1 </subscript></highlight>and K. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein K&prime; is different in length than K. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein K&prime; is equal in length to K. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising receiving an authentication keying variable replacement message at an appliance. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein selecting a portion of W<highlight><subscript>1 </subscript></highlight>comprises selecting 8-bits of W<highlight><subscript>1</subscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein selecting a portion of W<highlight><subscript>1 </subscript></highlight>comprises selecting the first 8-bits of W<highlight><subscript>1</subscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein selecting an additional portion of W<highlight><subscript>n </subscript></highlight>as an additional portion of K&prime; comprises selecting the first 8-bits of W<highlight><subscript>n </subscript></highlight>as nth 8-bits of K&prime;. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A replacement authentication key generator comprising: 
<claim-text>a processing circuit; and </claim-text>
<claim-text>a memory coupled to the processing circuit, the memory storing instructions for execution by the processing circuit for: 
<claim-text>generating a first authentication word, W<highlight><subscript>1</subscript></highlight>, based on the existing keying variable K, a counter, C, and a master keying variable, KM; </claim-text>
<claim-text>selecting a portion of W<highlight><subscript>1 </subscript></highlight>as a first portion of K&prime;; and </claim-text>
<claim-text>completing remaining portions of K&prime; by iteratively: 
<claim-text>generating new authentication words, W<highlight><subscript>n </subscript></highlight>based on C, KM, and a concatenation of a prior authentication word and K; and </claim-text>
<claim-text>selecting an additional portion of W<highlight><subscript>n </subscript></highlight>as an additional portion of K&prime;. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the instructions for generating new authentication words, W<highlight><subscript>n</subscript></highlight>, comprises generating new authentication words based on C, KM, and a concatenation of an immediately prior authentication word W<highlight><subscript>n&minus;1 </subscript></highlight>and K. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein K&prime; is different in length than K. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein K&prime; is equal in length to K. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the instructions for selecting a portion of W<highlight><subscript>1 </subscript></highlight>comprises selecting 8-bits of W<highlight><subscript>1</subscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the instructions for selecting a portion of W<highlight><subscript>1 </subscript></highlight>comprises selecting the first 8-bits of W<highlight><subscript>1</subscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The replacement authentication key generator of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the instructions for selecting an additional portion of W<highlight><subscript>n </subscript></highlight>as an additional portion of K&prime; comprises selecting the first 8-bits of W<highlight><subscript>n </subscript></highlight>as nth 8-bits of K&prime;. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. In an appliance communication network, a method for authenticating appliance messages, the method comprising: 
<claim-text>maintaining at an appliance communication center a shared message counter, the shared message counter shared between the communication center and a remotely located appliance; </claim-text>
<claim-text>applying an appliance message and the shared message counter, as stored in the communication center, to an authentication algorithm to generate a first authentication word; and </claim-text>
<claim-text>transmitting the appliance message and the first authentication word as an authenticated message to the appliance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising: 
<claim-text>receiving the authenticated message at the appliance; </claim-text>
<claim-text>applying the shared message counter, as stored in the appliance, and the appliance message to the authentication algorithm to generate a second authentication word; and </claim-text>
<claim-text>comparing the first authentication word and the second authentication word to determine authenticity of the authenticated message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising incrementing the shared message counter, as stored in the appliance, after receiving a genuine authenticated message at the appliance. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein applying comprises applying an authentication keying variable, K. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein applying comprises: 
<claim-text>establishing a working register R, comprising at least bytes R<highlight><bold>0</bold></highlight>, R<highlight><bold>1</bold></highlight>, R<highlight><bold>2</bold></highlight>, R<highlight><bold>3</bold></highlight>; </claim-text>
<claim-text>initializing R<highlight><bold>3</bold></highlight> to a directional code, representing a transmission from the appliance communication center to the appliance; </claim-text>
<claim-text>initializing at least R<highlight><bold>2</bold></highlight>, R<highlight><bold>1</bold></highlight>, and RO to the bytes C<highlight><bold>2</bold></highlight>, C<highlight><bold>1</bold></highlight>, and C<highlight><bold>0</bold></highlight> of the shared message counter, as stored in the communication center, respectively; </claim-text>
<claim-text>iteratively performing, a first number of times, the steps of: 
<claim-text>performing at least one arithmetic, logical and shifting operation on R; </claim-text>
<claim-text>shifting R; and </claim-text>
</claim-text>
<claim-text>setting the first authentication word equal to the value contained in R. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein performing a transformation of R comprises iteratively performing, as many times as there are bytes in K, the steps of: 
<claim-text>establishing an index, equal to the greater of: 
<claim-text>a non-zero constant; and </claim-text>
<claim-text>a number of bytes in the message less one; and </claim-text>
</claim-text>
<claim-text>iteratively performing, a number of times equal to the index plus one: 
<claim-text>forming P as the dot product of R<highlight><bold>2</bold></highlight> and RO; </claim-text>
<claim-text>forming Q as the bitwise exclusive or of P </claim-text>
<claim-text>with the constant expression &lsquo;<highlight><bold>01010101</bold></highlight>&rsquo;; </claim-text>
<claim-text>forming S by adding Q to K; </claim-text>
<claim-text>forming S&prime; by end around rotating S; </claim-text>
<claim-text>forming T as the bitwise exclusive or of S&prime; and R<highlight><bold>3</bold></highlight>; </claim-text>
<claim-text>forming F as the bitwise exclusive or of T with a byte of the appliance message; and </claim-text>
<claim-text>replacing R<highlight><bold>3</bold></highlight> with R<highlight><bold>2</bold></highlight>, R<highlight><bold>2</bold></highlight> with R<highlight><bold>1</bold></highlight>, R<highlight><bold>1</bold></highlight> with R<highlight><bold>0</bold></highlight>, and R<highlight><bold>0</bold></highlight> with F. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the non-zero constant is at least 3. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein maintaining comprises maintaining a separate shared counter for a plurality of appliances. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising incrementing the shared message counter, as stored in the communication center, after transmitting the authenticated message to the appliance. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. An appliance communication center comprising: 
<claim-text>network connections terminating at appliances; </claim-text>
<claim-text>a processing circuit; </claim-text>
<claim-text>a memory storing a plurality of shared counters, each shared counter shared between the communication center and an appliance, the memory further storing instructions for: 
<claim-text>maintaining at an appliance communication center </claim-text>
</claim-text>
<claim-text>a shared message counter, the shared message counter shared between the communication center and a remotely located appliance; </claim-text>
<claim-text>applying an appliance message and the shared message counter, as stored in the communication center, to an authentication algorithm to generate a first authentication word; and </claim-text>
<claim-text>transmitting the appliance message and the first authentication word as an authenticated message to the appliance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The appliance communication center of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the instructions for maintaining comprises maintaining a separate shared counter for a plurality of appliances. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The appliance communication center of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the instructions further comprise incrementing the shared message counter, as stored in the communication center, after transmitting the authenticated message to the appliance. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. In an appliance, an appliance message authentication device comprising: 
<claim-text>a processor; and </claim-text>
<claim-text>a memory coupled to the processor, the memory storing instructions for execution by the processor for: 
<claim-text>receiving the authenticated message at the appliance; </claim-text>
<claim-text>applying the shared message counter, as stored in the appliance, and the appliance message to the authentication algorithm to generate a second authentication word; and </claim-text>
<claim-text>comparing the first authentication word and the second authentication word to determine authenticity of the authenticated message. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The appliance message authentication device of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein the instructions further comprise incrementing the shared message counter, as stored in the appliance, after receiving a genuine authenticated message at the appliance. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. In an appliance communication network, a method for authenticating appliance messages, the method comprising: 
<claim-text>maintaining at an appliance a shared message counter, the shared message counter shared between the appliance and a remotely located appliance communication center; </claim-text>
<claim-text>applying an appliance message and the shared message counter, as stored in the appliance, to an authentication algorithm to generate a first authentication word; and </claim-text>
<claim-text>transmitting the appliance message and the first authentication word as an authenticated message to the appliance communication center. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of claim <highlight><bold>30</bold></highlight>, further comprising: 
<claim-text>receiving the authenticated message at the appliance communication center; </claim-text>
<claim-text>applying the shared message counter, as stored in the appliance communication center, and the appliance message to the authentication algorithm to generate a second authentication word; and </claim-text>
<claim-text>comparing the first authentication word and the second authentication word to determine authenticity of the authenticated message.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001721A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001721A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001721A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001721A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001721A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001721A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001721A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001721A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
