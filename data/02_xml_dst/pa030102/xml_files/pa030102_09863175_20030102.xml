<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004903A1-20030102-D00000.TIF SYSTEM "US20030004903A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00001.TIF SYSTEM "US20030004903A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00002.TIF SYSTEM "US20030004903A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00003.TIF SYSTEM "US20030004903A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00004.TIF SYSTEM "US20030004903A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00005.TIF SYSTEM "US20030004903A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00006.TIF SYSTEM "US20030004903A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004903A1-20030102-D00007.TIF SYSTEM "US20030004903A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004903</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09863175</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010523</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/18</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>706</class>
<subclass>013000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Process and system for developing a predictive model</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60263024</doc-number>
<document-date>20010119</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Matthias</given-name>
<family-name>Kehder</family-name>
</name>
<residence>
<residence-us>
<city>Amesbury</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>S.</middle-name>
<family-name>Dillon</family-name>
</name>
<residence>
<residence-us>
<city>Newburyport</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Barry L. Kelmachter</name-1>
<name-2>BACHMAN &amp; LaPOINTE, P.C.</name-2>
<address>
<address-1>900 Chapel Street, Suite 1201</address-1>
<city>New Haven</city>
<state>CT</state>
<postalcode>06510-2802</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention relates to a computer implemented process for developing a model which predicts the value of a single dependent variable based on the value of at least one independent variable. The process comprises the steps of creating a dataset containing a plurality of observations each containing a value for the dependent variable and values for the at least one independent variable, creating from the dataset a plurality of original chromosomes each comprising a possible predictive model, developing a quantitative fitness measure for each chromosome, and creating a new generation of chromosomes by selecting a number of the original chromosomes based upon the fitness measures, crossing the selected original chromosomes by at least one of a cloning and a pure (standard) crossover technique, and mutating the crossed chromosomes. A system for carrying out the process of the present invention is also described. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATION(S) </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is related to and claims the benefit of provisional U.S. patent application serial No. 60/263,024, filed Jan. 19, 2001, entitled ANALYTICAL AUTOMATION OF STATISTICAL AND NEURAL NETWORK MODEL BUILDING.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a process and a system for developing a model which predicts the value of single or multiple dependent variable(s) based on the value of one or multiple independent variables. The present invention also relates to a unique chromosome structure used in the process. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Although the analytical process of applying statistical (S) and neural network (NN) models to e-commerce business-to-business and business-to-customer marketing applications is very useful, the process has two major problems. The first problem lies with the creation of the analytical variables needed to accurately represent the marketing problem. Currently, this process requires a statistical expert and is very time consuming. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The second problem lies in the sheer number of different combinations of variables that can be included in a model. As a simple example, assume an analysis requires the selection of 15 variables from a data set of 50 variables. This process would generate 2.25 trillion combinations of variable data sets. As tasks become more complex so does the analysis. Consider a moderately complex task of creating a logistic regression model, which is to be built from a data set that consists of 1000 independent variables. The number of valid model combinations would be incredibly large, requiring an enormous, time consuming effort. In addition to the complexity of the shear number of variable combinations that may need to be generated, there exists the added complexity of conditions. For example, NN models require structural optimization, i.e. identifying the hidden nodes and hidden layers. Since independent variables are used to predict the dependent variables and hence the outcome, the independent variables need to be selected carefully. This added requirement of structural optimization would produce a number of variable combinations that would be staggering. As a very simple example of the task required for a constraint (small) NN and using the values above, the number of variable combinations that can be generated by choosing 15 variables from a list of 50, and determining between one and two hidden layers, with each hidden layer having a choice of up to 25 hidden nodes, is incredible. In fact, an actual application of a moderately sized neural network would increase the number of possible combinations significantly. Again as the model complexity grows, the number of variable combinations for these types of problems becomes so large that, with current computer CPU speeds, it is almost impossible to test every single model combination within a reasonable timeframe, especially for larger commercial problems. In addition, models and data sets both suffer from decay. This means that the data becomes out of sync with the business problem at hand during the exhaustive search. For this reason, a solution found by an exhaustive search will most likely not be optimal anymore by the time the solution is found. Although correlation analysis techniques can be used to narrow down the variables to a more acceptable (and reasonable) number (Pearson&apos;s correlation may be used to determine the 15 strongest correlations against the dependent variable), traditional statistical techniques have one major inherent flaw&mdash;the moment the number of variables is reduced, a large part of the analytical solution space is eliminated. If the best solution consists of variables that correlation analysis did not select, the variable selection process will have kept the statistical process from ever finding the best, or optimum, solution. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Furthermore, there are still close to an infinite number of independent variable transformations and manipulations that can be applied to each independent variable. Additionally, interaction terms, or terms that are the product of two independent variables, need to be identified. This is because these terms reveal complex behavior in combination with each other, but not individually. The problem is finding the right transformations, manipulations, and interactions for the independent variables in order to accurately describe the variance of a dependent variable, simultaneously. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Consequently, a need exists for an analytical method of applying statistical (S) and neural network (NN) models to e-commerce, business-to-business, and business-to-customer marketing applications that optimizes the process of determining data transformations, manipulations, and interactions for independent variables in order to accurately describe the variance of a dependent variable. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Accordingly, it is an object of the present invention to provide an evolutionary process for developing a predictive model. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> It is another object of the present invention to provide a process as above which is capable of analyzing large volumes of operational or demographic data and produce a near optimum predictive model. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> It is a further object of the present invention to provide a process as above which maps statistical ideas to genes. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> It is still another object of the present invention to provide a system for performing the process of the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The foregoing objects are attained by the process and the system of the present invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In accordance with the present invention, a computer implemented process for developing models which predict the value of a single dependent variable based on the value of at least one independent variable is provided. The process broadly comprises the steps of (a) providing a dataset containing a plurality of observations each containing a value for the dependent variable and values for the at least one independent variable, (b) creating from the dataset an initial generation of chromosomes each comprising a possible predictive model, (c) determining a quantitative fitness measure for each of said chromosomes in the initial generation, and (d) creating a next generation of chromosomes by selecting a number of the chromosomes in the initial generation, crossing the selected initial generation chromosomes by at least one of cloning and a crossover technique, and mutating the crossed chromosomes. Steps (c) and (d) of the process are repeated for a number of iterations to create a generation of chromosomes which provides a near optimum result. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A system for performing the process of the present invention broadly comprises means for creating an initial generation of chromosomes from a dataset with each chromosome in the initial generation comprising a possible predictive model, means for determining a quantitative fitness measure for each chromosome in the initial generation; and means for selecting a number of initial generation chromosomes, for crossing the selected initial generation chromosomes by at least one of cloning and a crossover technique, and for mutating new chromosomes. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Other details of the process and the system of the present invention, as well as other objects and advantages attendant thereto are set forth in the following detailed description and the accompanying drawings wherein like reference numerals depict like elements.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic representation of the structure of a chromosome formed in accordance with the process of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schematic representation illustrating a trim process used in the process of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a graph illustrating a maximum range trim using 4 Outlier bits; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a graph showing outlier bit probabilities for a scenario with 4 outlier bits; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic representation of a contrast gene with 4 contrasts and a category cutoff of 10; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a schematic representation of a computer system for performing the process of the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic representation of a crossover process used in the process of the present invention; and </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart illustrating the process of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT(S) </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As previously mentioned, the present invention relates to a computer implemented process for developing a predictive model which predicts the value of a single dependent variable based on the value of one or multiple independent variables. The process may be performed using any suitable computer known in the art, programmed in any suitable language known in the art, and having an operating system including, but not limited to, Windows 98, Windows NT, Windows 2000, Linux, and Sun OS. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The process of the present invention begins with the creation of a training dataset containing a plurality of observations. Each observation contains a value for the single dependent variable and preferably values for any number of independent variables. The training dataset is created from raw data. During the creation of the training dataset, business rules and sampling may be applied to reduce the number of data observations in the training dataset. A business rule is a logical statement that tests the condition of a dataset observation. A business rule can consist of one or more comparisons that test the value of different variables. Two or more comparisons can be combined with Boolean operators such as OR, AND, or NOT. Business rules are used to reduce the size of a raw data file by excluding observations that do not satisfy active business rules. Once the training dataset has been created, it may be stored in a memory device associated with a computer <highlight><bold>100</bold></highlight> or in a database in the computer <highlight><bold>100</bold></highlight>, or both. Thereafter, one begins the process of creating an initial generation of chromosomes using the training dataset. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The process of the present invention is based on repeatedly evaluating a number of chromosomes <highlight><bold>10</bold></highlight> called a generation. The number of chromosomes <highlight><bold>10</bold></highlight> in a generation can be fixed or vary in some defined pattern. For example, in a fixed generation scenario, all generations are of the same size as the first or initial generation. Alternatively, in a variable generation scenario, one can start with a relatively large generation size and decrease to a target size over a given number of generations. Thereafter, one uses generations of the target size for all subsequent generations. This alternative requires more computer resources initially but the larger generations initially explore larger portions of the search space and can sometimes identify solutions sooner than would be the case using smaller generations. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> It is an object of the present invention to create a process which explores all promising areas of a search space that might contain the best solution(s). This means searching the area represented by the observations in the training dataset for a model that best predicts values for the dependent variable. The method used to create the initial chromosome generation can affect the number of generations required to identify a satisfactory model. Therefore, a user can specify generation size as well as the method to be used to create the initial generation. The size of the initial generation is preferably based on input parameters. One can specify both an initial and a target generation size. By making the two sizes equal, one uses a fixed number of chromosomes for all generations. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In a preferred process in accordance with the present invention, either a random method or a distributed method is used to create the chromosomes <highlight><bold>10</bold></highlight> in the initial generation. The random method creates each chromosome <highlight><bold>10</bold></highlight> using random methods to select the genes&apos; values within each observed variable segment <highlight><bold>12</bold></highlight>. Similar methods are used to create the required number of interaction variable segments <highlight><bold>14</bold></highlight> by selecting observed variables, available operators, and include genes based on random selection. The chromosomes <highlight><bold>10</bold></highlight> thus produced have different numbers of active variables. It is possible that one or more variables will be inactive in all chromosomes. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The distributed method creates chromosomes <highlight><bold>10</bold></highlight> containing single variable models and creates two chromosomes <highlight><bold>10</bold></highlight> for each observed variable&mdash;one with a positive coefficient and one with a negative coefficient. The distributed method insures that all variables are represented in the initial generation. This method creates a generation with at least twice as many chromosomes as there are variables in the training dataset. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Each chromosome <highlight><bold>10</bold></highlight> created in the initial generation contains the elements of a predictive model and preferably has a fixed length. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates the structure of a chromosome <highlight><bold>10</bold></highlight> in accordance with the present invention. As can be seen from this figure, each chromosome <highlight><bold>10</bold></highlight> has a plurality of observed variable segments <highlight><bold>12</bold></highlight> with each segment <highlight><bold>12</bold></highlight> comprising a group of genes describing an observed variable in the training dataset. In a preferred embodiment of the present invention, there is within each chromosome <highlight><bold>10</bold></highlight>, a variable gene segment <highlight><bold>12</bold></highlight> for each variable in the training dataset. In other words, there are observed continuous variable segments <highlight><bold>12</bold></highlight>&prime; and observed categorical variable segments <highlight><bold>12</bold></highlight>&Prime;. Each chromosome <highlight><bold>10</bold></highlight> also contains a plurality of interaction variable segments <highlight><bold>14</bold></highlight> with each segment <highlight><bold>14</bold></highlight> being formed by a group of genes which describe a variable derived from two observed variables. The number of interaction variable segments <highlight><bold>14</bold></highlight> is set as a parameter for model development. For example, there can be <highlight><bold>20</bold></highlight> interaction variable segments per chromosome. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Each chromosome <highlight><bold>10</bold></highlight> further includes an intercept or bias gene <highlight><bold>16</bold></highlight>. The intercept or bias gene <highlight><bold>16</bold></highlight> specifies the embedded model output when the variable components sum to zero. The intercept or bias gene <highlight><bold>16</bold></highlight> is located in the chromosome <highlight><bold>10</bold></highlight> after all interaction variable gene segments <highlight><bold>14</bold></highlight>. It consists of 64 bits including 1 sign bit, 11 exponent bits, and 52 mantissa bits. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Each observed continuous variable segment <highlight><bold>12</bold></highlight>&prime; comprises the following genes&mdash;an include/exclude gene <highlight><bold>18</bold></highlight>, a coefficient gene <highlight><bold>20</bold></highlight>, a minimum outlier gene <highlight><bold>22</bold></highlight>, a maximum outlier gene <highlight><bold>24</bold></highlight>, a transformation gene <highlight><bold>27</bold></highlight>, and a ranking gene <highlight><bold>29</bold></highlight>. Each observed categorical variable segment <highlight><bold>12</bold></highlight>&Prime; comprises the following genes&mdash;an include/exclude gene <highlight><bold>18</bold></highlight>, a contrast gene <highlight><bold>26</bold></highlight>, and one or more coefficient genes <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A continuous variable is a variable that can have any number of numeric values. Examples could be next week&apos;s stock price or a customer&apos;s account balance. A variable is classified as continuous if the number of values found in the dataset exceed the category cutoff parameter. A categorical variable is a variable having a limited number of unique values in a dataset. A binary variable is a special type of categorical that has only two possible values or categories. The category cutoff parameter specifies the maximum number of categories for a categorical variable. The number may range from 1 to 32 for example. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The include/exclude gene <highlight><bold>18</bold></highlight> plays an important role in the construction of each model. The include/exclude gene <highlight><bold>18</bold></highlight> limits the number of variables which are turned on for a particular model. Thus, if the data set has 1000 variables, each chromosome will include data about the 1000 variables; however, only a certain number of the variables, such as 10-20 will be turned on. This is done using a binary configuration for the include/exclude gene which consumes 1 bit where a &ldquo;0&rdquo; indicates a particular observed variable is turned off and a &ldquo;1&rdquo; indicates that a particular observed variable is turned on. Thus, for a particular observed variable gene segment <highlight><bold>12</bold></highlight>, the include/exclude gene <highlight><bold>18</bold></highlight> indicates if the variable described by that segment is included in the embedded model. The include/exclude gene allows the process to determine the appropriate subset of variables within each solution space. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The coefficient gene <highlight><bold>20</bold></highlight> contains the coefficient value for the observed variable described by the variable segment and preferably comprises a plurality of bits such as 64 bits. Within these plurality of bits, there is a super bit consisting of multiple bits where if there is any change in these bits, i.e. one of the bits becomes flipped, they all flip. This helps optimize the model. The super bit may comprise any multiple selected bits in the 64 bits. The coefficient gene helps get rid of statistical estimation methods by embedding the coefficient into the gene. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Observed values for a continuous variable in the training dataset vary over a range defined by maximum and minimum values. When the range of values for a variable is large (the maximum and/or minimum differ greatly from the median value), a small number of extreme values can have a disproportionate effect on model development. In such cases, a more useful model can be developed by restating the extreme high or low values in an orderly fashion to values closer to the median. This technique is called trimming outliers. This is done to obtain a natural fit without any bias. The outlier genes <highlight><bold>22</bold></highlight> and <highlight><bold>24</bold></highlight> clean up records in the training dataset so they have the least bias on the predictions. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In the chromosome creation technique of the present invention, a maximum constraint between the median value and the maximum observed value and a minimum constraint between the median and minimum observed value are created. These constraint values represent a target range of values that is less than the actual range. Variable values that fall outside the constraint range are restated to have the nearest constraint value. As a result of the trimming process, the constraint values become the re-stated values for observed values in the trim areas. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The constraint values are developed by applying a ratio to the existing range of values to identify those values that need to be trimmed. A minimum trim ratio is applied to the difference between the median and the observed minimum value for a variable to determine the area where values are to be trimmed. A maximum trim ratio is applied in the same manner to the difference between the median and maximum value. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates the trim concepts utilized in the present invention where A<highlight><subscript>t</subscript></highlight>&equals;min. trim ratio&times;A and B<highlight><subscript>t</subscript></highlight>&equals;max. trim ratio&times;B. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Both the numerator and the denominator of these ratios are defined as binary numbers with a number of precision bits specified for each requested model&mdash;a parameter called the number of outlier bits. The denominator of the trim ratio equals the maximum value of a binary number having the specified number of outlier bits. For example, a precision of 10 bits equals 1023 in decimal format. The numerator of each trim ratio is genetically derived. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The maximum outlier gene <highlight><bold>24</bold></highlight> in a continuous variable segment contains the numerator of the maximum trim ratio. The minimum outlier gene <highlight><bold>22</bold></highlight> contains the numerator for a minimum trim ratio. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram illustrating a maximum trim scenario with 4 outlier bits. In this scenario, the maximum outlier gene is 5 (which in binary form is 0101) and the maximum value of a binary number having the specified number of 4 outlier bits is 15 (which in binary is 1111). The max. trim ratio is therefore 0101/111 (5/15). Thus 1/3 of the range from the median to the observed maximum is trimmed by the maximum outlier gene. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The outlier genes <highlight><bold>22</bold></highlight> and <highlight><bold>24</bold></highlight> in a continuous variable gene segment define the range of values over which trimming is done and that range of values used for the variable when determining fitness. The outlier genes <highlight><bold>22</bold></highlight> and <highlight><bold>24</bold></highlight> are represented in the chromosome <highlight><bold>10</bold></highlight> for each continuous variable as two stranded genes. The number of bits used to represent the genes <highlight><bold>22</bold></highlight> and <highlight><bold>24</bold></highlight> is dynamic for every application. The number of bits are defined at start-up and remain constant throughout generations of chromosomes, i.e. the number of bits used does not change per chromosome or per generation. The bits representing these genes are treated using true binary representation. It should be noted that outlier trimming is only applicable to continuous variables, not categorical variables. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In the process of the present invention, the user can specify the number of outlier bits and thereby control the number of units used to define the range of values. More bits allow trimming with more units and greater precision. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The other way to control the trim process is by specifying a mutation probability for each outlier bit. Each probability controls the likelihood that a particular bit is mutated. Setting a trim probability to 1.0 exposes that bit to the full likelihood of being flipped as a result of mutation. On the other hand, setting trim probability to a small value such as 0.01 or 0.001 makes it very unlikely the bit will be flipped by mutation. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates how probabilities might be specified for a scenario with four outlier bits. It should be noted that the location of the fourth bit depends on the display convention since it is the most significant bit and the one that changes the overall value by the largest amount if changed because this avoids trimming too much. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The contrast gene <highlight><bold>26</bold></highlight> is used for variables classified as categorical and is used to automatically determine the optimal contrasts for the categorical variables. The contrast gene makes categorical variables useful in the analytical process by representing categorical variables intelligently and numerically to the analytical process of the present invention. As previously mentioned, a categorical variable has a limited number of unique values in the training dataset and the values have no significance that allows one value to be compared to another. Categorical variables are divided into two types&mdash;nominal and ordinal. Nominal variables, such as the race of a person, have no order, while ordinal variables have an order. A table associated with this gene determines how many binary variables or flags known as contrasts or indicators can be created out of a particular categorical variable. The contrast gene allows one to use information which is not otherwise usable. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The process of the present invention allows the user to control what variables are classified as categorical versus continuous variables via the category cutoff parameter. The process of the present invention assigns a binary number to each variable category with a specified number of bits. This coding scheme allows the system to create the subgroups called contrasts equal in number to the number of bits used for coding. By specifying a value for the parameter called maximum contrasts, the user specifies the maximum number of contrasts that can be created as binary codes in the binary code assigned to each category. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> As can be seen from the foregoing, the process of the present invention uses the contrasts for a categorical variable as a type of variable and identifies those contrasts (variable values) that are useful in a predictive model. The system default values for maximum contrasts are developed based on an analysis of statistical significance and these values increase with the number of observations in the training dataset, but can be restated without changing the contrast gene usability. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The contrast gene <highlight><bold>26</bold></highlight> in a variable gene segment consists of contrast bit strings equal in number to the maximum categories allowed for a requested model as specified by the category cutoff parameter. The number of contrast bit strings actually used for a variable depends on the number of categories for that variable. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> For example, a requested model with a category cutoff of 10 and maximum contrasts of 4 would have a contrast gene made up of 10 strings of 4 bits in each categorical variable gene segment. Such a model is shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. For a categorical variable having six values (categories) only the first six contrast strings are used in the associated variable segment. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The transformation gene <highlight><bold>27</bold></highlight> is used to eliminate skewness and kurtosis from a distribution relating to a particular observed variable and to transform the data distribution to provide maximum usability. The transformation gene <highlight><bold>27</bold></highlight> determines a value Y which defines the skewed data curve such as in the equation x1&equals;x<highlight><superscript>Y</superscript></highlight>. If the value of Y is determined to be 1, then no transformation is needed. If the value of Y is something other than 1, then a transformation is in order. At a value of zero, the natural log is performed. To determine the value of Y, one first determines the possible range (PR) for Y and the desired degree of precision. For example, if the desired precision is 10, the maximum binary value is 1023. The process then determines the value of the power transformation. To determine Y, the value of the chromosome is multiplied by the range of Y. The resulting number is then divided by the maximum binary value to determine an intermediate value. The minimum potential value for Y is then added to the intermediate value to determine the value of Y. Thus if the value of the chromosome is 750, the potential range for Y is 10 with the minimum value of Y being &minus;5, and the maximum binary value is 1023, then </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Y</italic></highlight>&equals;(10*(750/1023))&minus;5&equals;7.5&minus;5&equals;2.5. </in-line-formula></paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In accordance with the present invention, the requirements and underlying assumptions for the transformation gene are that every continuous (non-categorical) variable will have a transformation gene. In order to apply the transformation gene, the following information must be present: minimum permissible power transformation, maximum permissible power transformation, and the number of bits to divide the power transformation range by. In addition, since a power transformation of one equals itself, there is no need for an on/off switch. All transformation genes are initialized to one, but are not limited to that. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The ranking gene <highlight><bold>29</bold></highlight> helps improve the predictability of the independent variable and applies only to continuous variables. This gene aids in the ranking and creation of fixed and variable width rankings for ordered variables. The ranking gene divides a variable distribution into a number of fixed width groups whose width is dictated by the user. The ranking gene includes a number of precision bits, such as 100 bits, and a number of consecutive bits, such as four bits, which tells us the boundaries for each group in the range. The number of boundaries which are found determines the number of variable width groups into which the variable distribution is ranked. The power of the ranking gene is that it can turn an unusable continuous distribution into useful or predictable information by creating a different distribution. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Each interaction gene segment <highlight><bold>14</bold></highlight> represents an interaction variable derived from two observed variables found in the training dataset. The value of an interaction term can be developed using one of six operators applied to two observed variables. Each interaction gene segment <highlight><bold>14</bold></highlight> consists of the following genes&mdash;an include/exclude gene <highlight><bold>28</bold></highlight>, a coefficient gene <highlight><bold>30</bold></highlight>, a first variable gene <highlight><bold>32</bold></highlight>, an operator gene <highlight><bold>34</bold></highlight>, and a second variable gene <highlight><bold>36</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The include/exclude gene <highlight><bold>28</bold></highlight> in an interaction variable segment <highlight><bold>14</bold></highlight> is used in the same way as in the observed variable segment <highlight><bold>12</bold></highlight>. This gene <highlight><bold>28</bold></highlight> indicates if the interaction variable described by the interaction gene segment <highlight><bold>14</bold></highlight> is included in the chromosome model. Those interaction variables included in the embedded model have the include/exclude gene set to the ON state. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The coefficient gene <highlight><bold>30</bold></highlight> contains the coefficient value for the interaction variable described by the interaction gene segment <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The first variable gene <highlight><bold>32</bold></highlight> identifies the first of two observed variables in the training dataset used to derive the value of the interaction variable. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The second variable gene <highlight><bold>36</bold></highlight> identifies the second of two observed variables in the training dataset used to derive the value of the interaction variable. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In a preferred embodiment of the present invention, the first and second variables used in the first and second variable genes <highlight><bold>32</bold></highlight> and <highlight><bold>36</bold></highlight> are randomly selected from the training dataset. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The operator gene <highlight><bold>34</bold></highlight> identifies the operator used to derive an interaction value from two observed variables. The operator may be addition (value is the sum of two observed variables), multiplication (value is the product of two observed variables), division (value is one variable divided by the second variable), subtraction (value is the mathematical difference between two observed values), difference squared (value is the square of the difference between two observed variables), or absolute difference (value is the absolute difference between two observed variables and the result is always positive or zero). </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> When the observed variables are categorical, the operators are applied to the index of each observed variable category/value. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Assume the following observed categorical variables are used to derive an interaction variable (IA Var02)  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Variable Categories/Index</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>Name</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="10">
<colspec colname="1" colwidth="28PT" align="left"/>
<colspec colname="2" colwidth="21PT" align="left"/>
<colspec colname="3" colwidth="21PT" align="left"/>
<colspec colname="4" colwidth="21PT" align="left"/>
<colspec colname="5" colwidth="21PT" align="left"/>
<colspec colname="6" colwidth="21PT" align="left"/>
<colspec colname="7" colwidth="21PT" align="left"/>
<colspec colname="8" colwidth="21PT" align="left"/>
<colspec colname="9" colwidth="21PT" align="left"/>
<colspec colname="10" colwidth="21PT" align="left"/>
<tbody valign="top">
<row>
<entry>Var01</entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>values</entry>
<entry>9</entry>
<entry>9x</entry>
<entry>9n</entry>
<entry>10</entry>
<entry>10x</entry>
<entry>10n</entry>
<entry>11</entry>
<entry>11x</entry>
<entry>11xx</entry>
</row>
<row>
<entry>index</entry>
<entry>1</entry>
<entry>2</entry>
<entry>3</entry>
<entry>&ensp;4</entry>
<entry>&ensp;5</entry>
<entry>&ensp;6</entry>
<entry>&ensp;7</entry>
<entry>&ensp;8</entry>
<entry>&ensp;9</entry>
</row>
<row>
<entry>Var 04</entry>
</row>
<row>
<entry>values</entry>
<entry>NE</entry>
<entry>SW</entry>
<entry>NW</entry>
<entry>SE</entry>
</row>
<row>
<entry>index</entry>
<entry>1</entry>
<entry>2</entry>
<entry>3</entry>
<entry>&ensp;4</entry>
</row>
<row><entry namest="1" nameend="10" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> If Var01 has a value of 10n and Var04 has a value of SW, then IA Var02&equals;(6)*(2)&equals;12. In the gene segment, this result is then multiplied by the coefficient value in the coefficient gene of IA Var02. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The number of interaction gene segments <highlight><bold>14</bold></highlight> added to the end of each chromosome <highlight><bold>10</bold></highlight> is either determined by a fixed parameter or applying a predetermined rule such as the square root of the number of variables in the training dataset. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The chromosomes <highlight><bold>10</bold></highlight> which have been created in the initial generation indicate how to build a statistical model as well as contain data used in the statistical model. It thus becomes desirable to determine how well each chromosome <highlight><bold>10</bold></highlight> in the initial generation acts as predictor. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the computer <highlight><bold>100</bold></highlight> is used to evaluate the ability of each chromosome <highlight><bold>10</bold></highlight> in the initial generation to predict an event or a model. To this end, the computer <highlight><bold>100</bold></highlight> includes a data pipe module <highlight><bold>102</bold></highlight> which receives raw data and a database <highlight><bold>104</bold></highlight>. The database <highlight><bold>104</bold></highlight> contains all datasets for a requested model plus all model parameters set using a user interface component <highlight><bold>106</bold></highlight> (one user interface per user). The database <highlight><bold>104</bold></highlight> may incorporate a memory device (not shown) or be connected to a memory device. Stored within the database <highlight><bold>104</bold></highlight> are the training dataset, meta data, a validation dataset, parameters for a requested model, and best model elements. The computer <highlight><bold>100</bold></highlight> is further provided with at least one modeler module <highlight><bold>108</bold></highlight>, preferably a plurality of modeler modules <highlight><bold>108</bold></highlight>, a scheduler module <highlight><bold>110</bold></highlight>, and a plurality of fitness evaluators <highlight><bold>112</bold></highlight>. During model development, an assigned modeler module <highlight><bold>108</bold></highlight> and fitness evaluator <highlight><bold>112</bold></highlight> obtain required data from the database <highlight><bold>104</bold></highlight> and store elements of the best model in the database <highlight><bold>104</bold></highlight>. The user interface component <highlight><bold>106</bold></highlight> obtains data from the database when preparing reports such as lift charts and classification tables or displaying elements of the best model. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Each modeler module <highlight><bold>108</bold></highlight> develops a predictive model in response to a model request from a user interface component <highlight><bold>106</bold></highlight>. When a user submits a requested model for development, the system assigns the task to an idle modeler module <highlight><bold>108</bold></highlight>. The system can have any number of modeler modules <highlight><bold>108</bold></highlight> based on the expected number of model requests active at any given time. The assigned modeler module <highlight><bold>108</bold></highlight> remains dedicated to the requested model until the specified number of generations are developed and evaluated. If the user specifies running continuously, the dedicated modeler module <highlight><bold>108</bold></highlight> is dedicated to the requested model until a user manually stops model development. Each modeler module <highlight><bold>108</bold></highlight> executes the process of the present invention by creating successive generations of chromosomes <highlight><bold>10</bold></highlight>. The modeler module <highlight><bold>108</bold></highlight> sends each generation to the scheduler module <highlight><bold>110</bold></highlight> who sends them to the fitness evaluators <highlight><bold>112</bold></highlight> and receives the results that are then used to create the next generation. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The scheduler module <highlight><bold>110</bold></highlight> receives evaluation requests from all active modelers <highlight><bold>108</bold></highlight>. Each request includes a generation of chromosomes for a requested model. As previously discussed, each chromosome <highlight><bold>10</bold></highlight> contains the elements of a predictive model that must be evaluated to determine how well that model predicts values for the dependent variable in the training dataset (a process called fitness evaluation). The scheduler module <highlight><bold>110</bold></highlight> coordinates the evaluation of chromosome generations created by all modelers. The scheduler sends each chromosome to an idle fitness evaluator <highlight><bold>112</bold></highlight>. The fitness evaluator <highlight><bold>112</bold></highlight> develops the value for a user specified fitness metric. The fitness metric selected by the user may be percent correctly classified that can be used with a categorical dependent variable, a linear correlation which can be used with a continuous dependent variable, or an upper lift which is a fitness measure based on only the top quantiles of a generation. The fitness evaluator <highlight><bold>112</bold></highlight> returns the fitness metric to the scheduler module <highlight><bold>110</bold></highlight> and when values are received for all chromosomes in a generation, the scheduler module <highlight><bold>110</bold></highlight> returns the information to the requesting modeler <highlight><bold>108</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Each fitness evaluator <highlight><bold>112</bold></highlight> applies the chromosome model to each observation in the associated training dataset to determine a predicted value for the dependent variable. Fitness evaluation compares the predicted and actual values for each observation and develops a single fitness metric that represents how well the predicted and actual values match across all observations in the training dataset. The system of the present invention can have any number of fitness evaluators <highlight><bold>112</bold></highlight>. After completing the evaluation of a chromosome, the fitness evaluator <highlight><bold>112</bold></highlight> sends the fitness metric to the scheduler module <highlight><bold>110</bold></highlight> and becomes available to evaluate another chromosome from the same generation or another requested model. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> After the chromosomes <highlight><bold>10</bold></highlight> in the initial generation have been evaluated and assigned a fitness metric, a genetic algorithm is used by an assigned modeler module <highlight><bold>108</bold></highlight> in the computer <highlight><bold>100</bold></highlight> to create the next generation of chromosomes. The genetic algorithm involves the steps of selection, crossover, and mutation. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the process of the present invention to create an initial generation and successive generations. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The selection step identifies those chromosomes <highlight><bold>10</bold></highlight> in the initial generation which will be used to create the next generation of chromosomes. The selection of chromosomes is random and akin to a lottery wheel. While this selection is basically a random process, each chromosome <highlight><bold>10</bold></highlight> in the initial generation does not have an equal chance for selection. Each chromosome <highlight><bold>10</bold></highlight> in the initial generation is represented in the lottery by a weighted value that increases the chance of selection in proportion to the fitness measure assigned by the fitness evaluation. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The purpose of crossover is to produce candidate chromosomes for the next generation. The parameters which have been selected specify the target number of chromosomes in each generation and a virus rate. The virus rate determines the number of chromosomes (target number times the virus rate) in each generation that are created with a random process. Chromosomes introduced by the virus rate are not the result of selection, crossover, or any consideration of fitness. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> A chromosome <highlight><bold>10</bold></highlight> selected for breeding, can be used in one of two ways&mdash;cloning or pure (standard) crossover. A crossover rate may be set by the user to control the proportion used for each type of crossover. For example, a 70% crossover rate means 70% of selected chromosomes are used to create offspring through a crossover process and the remaining 30% are used for simple cloning. The cloning process creates a chromosome for the new generation that is a duplicate of a chromosome selected from the current generation. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The crossover process creates two offspring chromosomes <highlight><bold>60</bold></highlight> and <highlight><bold>62</bold></highlight> for the next generation based on two selected parent chromosomes <highlight><bold>64</bold></highlight> and <highlight><bold>66</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The process uses genes from each parent to create each of the offspring chromosomes. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> A user controls the crossover process by specifying a number of crossover points <highlight><bold>70</bold></highlight> or selecting a uniform crossover process. When one specifies a number of crossover points <highlight><bold>70</bold></highlight>, the system of the present invention places each point at a random location in the chromosome. The crossover points <highlight><bold>70</bold></highlight> define blocks of genes that are exchanged to create a child. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows how offspring are created with two crossover points. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The crossover process creates an offspring by taking genes from one parent up to the first crossover, and taking genes from the other parent between the first and second crossover points. Genes from the first parent are taken between the second and third crossover points. This alternating process can continue for any number of crossover points. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The uniform crossover process uses every possible point in a chromosome as a crossover point. Instead of alternating the use of gene blocks, the system uses a random process to determine if genes from the other parent will be used for the next block. For a chromosome with many genes, crossover (using a gene from the other parent) occurs at half the eligible crossover points. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Crossover points can occur at any point in a variable gene segment. For any variable, a child can have the include/exclude gene from one parent and the coefficient gene from the other parent. The active variables in a child chromosome (created with crossover) must be active in one of the parents but the overall set of active variables will likely be different from either parent. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The chromosomes created by breeding (cloning and crossover) are considered candidates for the next generation and subjected to mutation. Mutation is a random process that reverses selected bits in the candidate chromosomes based on the probability value entered as the mutation rate. During mutation, bits are randomly flipped within the chromosomes in order to insure diversity within a generation. It should be noted that selected bits in the Outlier genes can be protected from mutation by assigning relatively small outlier bit probabilities. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> As mentioned above, the virus rate determines the number of chromosomes created with a random process. The system uses a random process to create the number of chromosomes that equals the virus rate applied to the desired population size. The remaining chromosomes in the generation are created through crossover. Because the chromosomes introduced by the virus rate are created without regard to fitness measures or any other characteristic of the current generation, they tend to introduce diversity into a new generation that explores new areas of a search space. Increasing the virus rate tends to explore new areas while decreasing the rate tends to fine tune the best models already attained. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> After the next generation has been created, each chromosome in the next generation has its fitness evaluated as before. Following the fitness evaluation, the genetic algorithm is applied to the next generation of chromosomes as discussed above to create a new generation of chromosomes. This iterative process of chromosome creation, evaluation, and next generation chromosome creation continues within one of the computer <highlight><bold>100</bold></highlight> until the user stops the process. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> One of the advantages to the process of the present invention is that improvements are found in each generation of chromosomes. Still another advantage to the process of the present invention is that it significantly reduces human errors and improves the ability to create a predictive model. Yet another advantage to the process of the present invention is that it can be used in a wide variety of business settings to predict a wide range of helpful models. Still another advantage to the process of the present invention is that the gene mapping employed in the process to form each chromosome reduces the probability of not selecting the right combination of variables to almost zero. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> It is apparent that there has been provided in accordance with the present invention a process and a system for developing a predictive model which fully satisfies the objects, means and advantages set forth hereinbefore. While the present invention has been described in the context of specific embodiments thereof, other alternatives, modifications, and variations will become apparent to those skilled in the art having read the foregoing description. Therefore, it is intended to embrace those alternatives, modifications, and variations as fall within the broad scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer implemented process for developing a model which predicts the value of a single dependent variable based on the value of at least one independent variable comprising the steps of: 
<claim-text>(a) providing a dataset containing a plurality of observations each containing a value for said dependent variable and values for said at least one independent variable; </claim-text>
<claim-text>(b) creating from said dataset of an initial generation of chromosomes each comprising a predictive model; </claim-text>
<claim-text>(c) determining a quantitative fitness measure for each chromosome in said initial generation; and </claim-text>
<claim-text>(d) creating a next generation of chromosomes by selecting a number of chromosomes from said initial generation, crossing said selected chromosomes by at least one of a cloning and a crossover technique, and mutating said chromosomes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising (e) determining new fitness measures for said chromosomes in said next generation, and (f) repeating said selecting, crossing and mutating steps to create a successive generation of chromosomes. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising continuously repeating steps (e) and (f) for said successive generation of chromosomes to create another successive generation of chromosomes. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said initial generation chromosome creating step is performed using a random method. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said initial generation chromosome creating step is performed using a distributed method. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said chromosome creating step comprises forming a chromosome having a plurality of observed variable segments each formed by a plurality of genes, a plurality of interaction segments each formed by a plurality of genes, and an intercept gene positioned after said plurality of interaction segments. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising limiting the number of interaction segments in each said chromosome to a fixed parameter or applying a predetermined rule to determine the number of interaction gene segments. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said chromosome forming step comprises forming at least one observed continuous variable gene segment so as to contain an include/exclude gene, a coefficient gene, a minimum outlier gene, a maximum outlier gene, a transformation gene, and a ranking gene. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising forming a plurality of observed continuous variable gene segments and using said include/exclude gene to indicate whether a variable for a particular one of said observed continuous variable segments is included in an embedded model. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, further comprising using said coefficient gene to identify a coefficient value for an observed continuous variable described by the particular one of said observed variable segments. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising forming said coefficient gene from a plurality of binary bits and designating a number of said binary bits as a super bit where all of said bits flip under certain conditions. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising using said outlier genes in each said observed continuous variable segment to trim a distribution range for the observed value in said observed continuous variable segment. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising representing said outlier genes in a double stranded format. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising using said transformation gene to eliminate skewness and kurtosis from a distribution range for said observed variable in said observed continuous variable segment and to transform said distribution range as close as possible to normality. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said chromosome forming step comprises forming at least one observed categorical variable segment consisting of an include/exclude gene, a contrast gene, and at least one coefficient gene. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising forming a plurality of observed categorical variable segments and using said include/exclude gene to indicate whether a variable for a particular one of said observed categorical variable segments is included in an embedded model. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising using said coefficient gene to identify a coefficient value for the observed categorical variable described by the particular one of said observed variable segments. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising forming said coefficient gene from a plurality of binary bits and designating a number of said binary bits as a super bit where all of said bits flip under certain conditions. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising using said contrast gene to indicate a maximum number of categories allowed for a requested model. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said chromosome forming step further comprises forming each interaction segment to contain an include/exclude gene, a coefficient gene, a first variable gene, a second variable gene, and an operator gene. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising using said include/exclude gene to indicate if a particular interaction variable described by a particular interaction segment is included in the model. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising using the coefficient gene to indicate a coefficient value for the interaction variable described by a particular interaction segment. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising using said first variable gene to identify a first observed variable used to derive a value of the interaction variable. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising using said operator gene to select an operator used to derive an interaction value from two observed variables. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said operator is selected from the group consisting of addition, multiplication, subtraction, difference squared, division, and absolute difference. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising using said second variable gene to identify a second of two observed variables used to derive the value of the interaction variable. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, further comprising randomly selecting said first and second variable genes in each of said interaction segments. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said fitness measure determining step comprises providing a scheduler module and a plurality of fitness evaluator modules and using said scheduler module to direct one of said chromosomes in said generation to be measured to an available one of said evaluator modules. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein said fitness measure determining step comprises selecting a fitness metric and determining a fitness rating for said one chromosome using said fitness metric. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, further comprising providing at least one modeler module, accumulating a fitness measure for each said chromosome in said scheduler module, and transmitting said accumulated fitness measures from said scheduler module to said at least one modeler module. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising performing said new generation chromosome creating step using said at least one modeler module. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, further comprising weighting each said chromosome in said generation and said selecting step comprising randomly selecting said weighted chromosomes. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A process according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein said procreated step comprises selecting a crossover rate and a number of crossover points and creating two offspring chromosomes from two selected parent chromosomes using said selected crossover rate and said crossover points. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A system for creating a predictive model comprising: 
<claim-text>means for creating an initial generation of chromosomes from a dataset with each chromosome in said initial generation comprising a predictive model; </claim-text>
<claim-text>means for determining a quantitative fitness measure for each chromosome in said initial generation; and </claim-text>
<claim-text>means for selecting a number of said initial generation chromosomes, for crossing the selected initial generation chromosomes by at least one of cloning and a pure (standard) crossover technique, and for mutating the crossed chromosomes into a next generation of chromosomes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, further comprising a computer and said initial generation chromosome creating means comprising at least one modeler module within said computer. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, further comprising a scheduler module in said computer and at least one fitness evaluator in said computer forming said means for determining a quantitative fitness measure. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising a plurality of fitness evaluators in said computers and said scheduler module determining which of said plurality of fitness evaluators shall determine the fitness measure for a particular one of said chromosomes. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, wherein said at least one modeler module also forms said means for selecting a number of initial generation chromosomes, for crossing the selected initial generation chromosomes, and for mutating the crossed chromosomes. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, further comprising a user interface module. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, further comprising a database within said computer for storing datasets and best predictive models and said at least one modeler module communicating with said database. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A chromosome for predicting a model comprising a plurality of observed variable segments, a plurality of interaction segments and an intercept gene. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, further comprising said intercept gene being positioned on said chromosome after said plurality of interaction segments. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said plurality of interaction segments is limited in number to a preset value or by a predetermined rule. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said observed variable segments contain at least one observed continuous variable segment comprising an include/exclude gene, a coefficient gene, a minimum outlier gene, a maximum outlier gene, a transforming gene, and a ranking gene. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, wherein each of said outlier genes is represented in a double stranded format. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said observed variable segments contain at least one observed categorical variable segment comprising an include/exclude gene, a contrast gene, and at least one coefficient gene. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein each of said interaction segments contains an include/exclude gene, a coefficient gene, a first variable, a second variable, and an operator. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A chromosome according to <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein each of said first and second variables is randomly selected from a number of variables in a dataset.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004903A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004903A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004903A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004903A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004903A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004903A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004903A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004903A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
