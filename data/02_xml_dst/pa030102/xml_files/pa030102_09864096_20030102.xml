<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002648A1-20030102-D00000.TIF SYSTEM "US20030002648A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002648A1-20030102-D00001.TIF SYSTEM "US20030002648A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002648A1-20030102-D00002.TIF SYSTEM "US20030002648A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002648</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09864096</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010523</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04M007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>379</class>
<subclass>229000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Control interface for computer supported telephony applications (CSTA) protocols</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Mark</given-name>
<middle-name>Bernard</middle-name>
<family-name>Hettish</family-name>
</name>
<residence>
<residence-us>
<city>Cary</city>
<state>NC</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Siemens Information and Communications Networks, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Siemens Corporation</name-1>
<name-2>Attn: Elsa Keller, Legal Administrator</name-2>
<address>
<address-1>Intellectual Property Department</address-1>
<address-2>186 Wood Avenue South</address-2>
<city>Iselin</city>
<state>NJ</state>
<postalcode>08830</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A control interface for CSTA protocols utilizes ActiveX properties, methods, events, and pages to access all of the events and services provided by the CSTA protocols. Common paradigms such as Invoke_ID and timers are built in to the interface. The interface further provides statistics and diagnostics via property pages. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates to methods and apparatus for implementing computer supported telephony applications. More particularly, the invention relates to a control interface for facilitating the implementation of CSTA protocols. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Brief Description of the Prior Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> It is well known in the art to couple a computer to a PBX switch in order to provide enhanced telephony services. Such services include voice mail, fax on demand, text to speech email retrieval, call forwarding, interactive voice response systems, etc. Most of these applications are built around the CSTA standard which is a standard for the protocols used across the link between a computer and a PBX switch. The CSTA standard protocols utilize ASN.1, Abstract Syntax Notation number One, an international standard for specifying data used in communication protocols. Although ASN.1 is powerful, it is a complex language. The CSTA standard has been implemented in various proprietary PBX-Computer interfaces such as the &ldquo;Call Bridge for Work Groups&rdquo; which is the interface used in the Siemens Hicom 300 PBX. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Although the CSTA has made the development of telephony application somewhat uniform, the protocols provided by the CSTA are relatively low level. Even with the &ldquo;Call Bridge for Work Groups&rdquo; interface, a telephony application must take responsibility for many low level functions of the interface. For example, even using the &ldquo;Call Bridge for Work Groups&rdquo; interface, an application must take responsibility for creating, maintaining, and tearing down a TCP/IP socket connections; building and parsing the ASN.1 encoded CSTA stream; handling the reception system status heartbeat messages; sending and handling the result of System Status heartbeat messages; and managing the generation and timing of invoke Ids. In addition, many applications would also want to add diagnostic user interface features to indicate status, statistics and errors as they pertain to a particular connection. All of these functions must be implemented by the application. Many of these, such as the ASN.1 builder/parser are time-consuming and/or costly to develop/purchase. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> It is known in the art to provide a higher level interface to some of the &ldquo;Call Bridge for Work Groups&rdquo;&mdash;CSTA interface. An earlier Siemens product provided limited ActiveX support for the following CSTA Services: Monitor Start, Monitor Stop, Divert Call, System Status Filter; and the following CSTA Events: connected, conferenced, connection cleared, delivered, diverted, established, held, agent logged off, agent logged on, network reached, agent not ready, queued, agent ready, retrieved, service initiated, transferred, agent work not ready, agent work ready, call info, system status, and universal failure error. However, there have not been any full high level interfaces addressing all of the features and events of the &ldquo;Call Bridge for Work Groups&rdquo;&mdash;CSTA interface. Moreover, there have not been any high level interface which aid in creation of common paradigms used in telephony applications. Furthermore, there have not been any high level interfaces which aid in the provision of diagnostic functions in telephony applications. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> It is therefore an object of the invention to provide a high level control interface to CSTA protocols. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> It is also an object of the invention to provide a control interface which significantly reduces the development time and effort for creating telephony applications which interface with CSTA protocols. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> It is another object of the invention to provide a control interface which may be bypassed if the developer chooses to work directly with CSTA for certain functions. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> It is yet another object of the invention to provide a control interface based on an industry standard language which is easily incorporated into many different programming environments. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> It is another object of the invention to provide a control interface which frees the programmer from detailed knowledge of ASN.1. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> It is still another object of the invention to provide a control interface which is easily configurable. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> It is another object of the invention to provide a control interface which facilitates the easy creation of user interfaces. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> It is still another object of the invention to provide a control interface which provides easy to use diagnostic interfaces. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In accord with these objects which will be discussed in detail below, the control interface according to the invention utilizes component based interface objects such as Microsoft ActiveX or Sun Microsystems JavaBeans to provide a high level interface to all of the &ldquo;Call Bridge for Work Groups&rdquo;&mdash;CSTA protocols. The presently preferred embodiment of the invention utilizes ActiveX. ActiveX controls generally include properties, methods, and events. According to the invention, the properties interface is used to set and get configuration values; the methods interface is used to initialize and shut down the control interface as well as to send CSTA messages to the control interface; and the events interface is used to transfer asynchronous data including CSTA events, data within events, CSTA responses, system status CSTA requests, and other control notifications. Property pages are also provided for implementing user interfaces and diagnostics. The control interface permits the automatic generation of common paradigms including: invoke ID generation, invoke ID timing, send heartbeat messages, and reply to heartbeat messages. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The control interface maintains a rich set of statistics including messages/sec, number of requests, number of responses, number of events, number of errors and number or rejects. All are tabulated on the incoming and outgoing link and all are displayable via a property page. Statuses are also displayable via a property page. Errors are logged internally by the control interface and can be displayed via a property page. Moreover, the control interface provides an ActiveX method by which applications can log error information including application defined error strings that are displayable via a property page.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high level block diagram of the platform architecture according to the invention including, the Call Bridge&mdash;CSTA interface of a PBX switch, the control interface of the invention, and an application generically referred to as a Tserver; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a high level block diagram of the control architecture of the invention illustrating the flow of data between the control interface of the invention and the Call Bridge&mdash;CSTA interface of a PBX switch. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> platform architecture according to the invention includes the Call Bridge interface <highlight><bold>10</bold></highlight> of a PBX switch, the control interface <highlight><bold>12</bold></highlight>, and a telephony application <highlight><bold>14</bold></highlight> referred to herein as Tserver. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> As mentioned above, the control interface <highlight><bold>12</bold></highlight> is preferably an ActiveX control that provides property, method and event interfaces to the application <highlight><bold>14</bold></highlight> on one side and a CSTA interface to Call Bridge <highlight><bold>12</bold></highlight> on the other side. In addition, property pages <highlight><bold>16</bold></highlight> are preferably provided to support such items as configuration, status and statistics viewing and error viewing as described in more detail below. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The control interface <highlight><bold>12</bold></highlight> communicates with the Call Bridge <highlight><bold>10</bold></highlight> using the CSTA protocol via a TCP/IP based socket connection <highlight><bold>18</bold></highlight>. As an ActiveX control, the control interface <highlight><bold>12</bold></highlight> provides three interfaces to the Tserver <highlight><bold>14</bold></highlight>. These interfaces include the properties interface <highlight><bold>20</bold></highlight>, the methods interface <highlight><bold>22</bold></highlight>, and the events interface <highlight><bold>24</bold></highlight>. The properties interface <highlight><bold>20</bold></highlight> is used to set and get configuration values. The methods interface <highlight><bold>22</bold></highlight> is used to initialize the control interface <highlight><bold>12</bold></highlight>, shutdown the control interface <highlight><bold>12</bold></highlight> and to send CSTA messages to the control interface <highlight><bold>12</bold></highlight>. The events interface <highlight><bold>24</bold></highlight> is used by the control interface <highlight><bold>12</bold></highlight> to send asynchronous data to the Tserver <highlight><bold>14</bold></highlight>. These data include CSTA events (including data within the events), CSTA responses, the System Status CSTA request and any other notifications that the control interface <highlight><bold>12</bold></highlight> needs to send. Property pages <highlight><bold>16</bold></highlight> are provided and can be activated by the Tserver application via the appropriate method calls. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>,the internal architecture of the control interface <highlight><bold>12</bold></highlight> is shown surrounded by phantom lines. The main processing component <highlight><bold>26</bold></highlight> handles any set and get property requests <highlight><bold>20</bold></highlight>. It also handles methods <highlight><bold>22</bold></highlight>, those related to initialization and shutdown as well as those related to sending CSTA services. Where needed it will use the ASN.1 parser <highlight><bold>28</bold></highlight> and builder <highlight><bold>30</bold></highlight> to receive and send CSTA messages from/to the Call Bridge CSTA interface. According to the presently preferred embodiment, the Main Processing <highlight><bold>26</bold></highlight> and ASN.1 components <highlight><bold>28</bold></highlight>, <highlight><bold>30</bold></highlight> are implemented as part of the main thread of an ActiveX dynamically linked library (DLL). </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, all communications between the Call Bridge CSTA interface <highlight><bold>18</bold></highlight> and the main processing <highlight><bold>26</bold></highlight> is via the Winsock DLL <highlight><bold>32</bold></highlight>. A socket connection is established upon which ASN.1 encoded CSTA messages are sent and received to and from the Call Bridge CSTA interface. According to the invention, a receive thread <highlight><bold>34</bold></highlight> will wait on the socket for a signal that indicates an incoming ASN.1 encoded CSTA message. When such a message is received, the receive thread <highlight><bold>34</bold></highlight> will post a message to the main thread and control is passed to the main thread. The main thread reads the CSTA message from the socket. The message is then parsed by the ASN.1 parser component <highlight><bold>28</bold></highlight>. Data from the parsed message is then sent to the Tserver <highlight><bold>14</bold></highlight> along with the notification of the arrival of the message. This is preferably accomplished in a single event call. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> According to the presently preferred embodiment, the ASN.1 builder and parser components utilize the same Open Source Solutions (OSS components) as the Call Bridge CSTA interface. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The control interface is preferably based on the MFC environment, utilizes an InprocServer32 type of ActiveX control, and supports the ActiveX apartment threading model. It will be appreciated that MFC based ActiveX controls must fire events from the main thread. This requirement is the reason the receive thread <highlight><bold>34</bold></highlight> merely posts a message to the main thread <highlight><bold>26</bold></highlight> instead of handling the parsing of the message and the firing of the event itself. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The control interface according to the invention is preferably implemented with the Microsoft Developer studio through which a library of C-language files a re compiled. The following discussion includes a description of the various, properties, methods, events, and pages defined by the invention to implement the control interface. </paragraph>
</section>
<section>
<heading lvl="1">Properties </heading>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The following are the major properties are used by the present invention: Call Bridge CSTA Port Number, Call Bridge CSTA Server Name, Control ID, and Error logging. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The port number is a numeric representation of the Call Bridge CSTA port to which the control interface connects. The server name is a string that contains the host file name of the Call Bridge CSTA server. This scheme requires that an entry be made in the host file that contains the Call Bridge CSTA server name and its associated IP address. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> If the Tserver allows server name entry then the person running the application must know the Call Bridge CSTA server name. If the Tserver application does not allow server name entry then whatever hard coded value it uses must be the name that is used in the host file. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The Control ID is a string that identifies the type of the control interface. For this control interface, the string is CallBridge CSTA for Tservers and is read-only. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The error logging property is a Boolean value that indicates whether or not the control interface should send internal error events to the application. These events are used to allow for debugging of the control interface. The default value of this property signifies that events should not be sent to the application. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The control interface provides two methods for managing the control: one to initialize the connection and one to tear down the connection. </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> ControlOpenConnection( ) </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> calls to FireControlConnectionopen( ) and </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> ControlCloseConnection( ) calls to </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> FireControlConnectionClosed( ). </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In order to allow applications to differentiate between versions of the invention a new version property is used. The code for this property is similar to that of the Control ID Property with a BSTR value of the format &lt;major version&gt;.&lt;minor version&gt;. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> According to the invention an option is provided for the control interface to send system status heartbeats to Callbridge CSTA and track the system status responses. This option is controlled via a new property, the heartbeat property. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The Heartbeat property is similar to the Error Logging property, and includes a Boolean flag that enables or disables the heartbeat. The default is disabled. This property is persistent. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The heartbeat implementation performs the following actions when enabled. After 30 seconds of inactivity on the incoming link it sends a System Status Enabled to Callbridge CSTA. If the reply comes within 10 seconds then it starts the inactivity timer again. If the reply does not come within 10 seconds then it sends the FireControlLinkClosed( ) event. Timers 1 and 2 are reserved for heartbeat timer usage. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The present invention supports timed requests. If a response does not come back within a certain period of time an event will be fired indicating this condition. Timed requests are implemented as properties. These properties allow the user to enable request timing and to set the number of seconds that the control is to wait before deeming that a response has been lost. The first property enables or disables the timing of requests. The second property assigns the time to wait for a response. This property will accept values from 10 seconds to 60 seconds. The maximum of 60 seconds is partially determined by the implementation, system timers can only accept up to a maximum of 64 seconds. The lower threshold of 10 is to avoid values that can easily cause necessary timeouts under certain load conditions. Each of these properties is persistent. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The internal invoke ID manager returns invoke IDs in the range of 100 to 0xFFFF (the UINT maximum). This value is then directly used as the timer ID for the SetTimer( ) routine. Timer values 1-99 are reserved for possible future timer usages within the control interface. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> When a request is about to be sent, a timer is started with a timer ID equal to the invoke ID. The period of the timer is set from the Timed Requests property value. When a response, error, or reject is received, the parsed invoke ID (which equals the timer ID) is passed to the KillTimer( ) routine and no action is taken. If a timer times out, a message is sent to the WindowProc( ) with one of the parameters containing the timer ID (invoke ID). In this situation, KillTimer( ) is called to free the timer and an event is sent that contains the invoke ID. The event that will be used is FireUniversalError( ) with a class of performance_errors and a value of performanceLimitExceeded. </paragraph>
</section>
<section>
<heading lvl="1">Methods </heading>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The control interface supplies methods for CSTA service support as well as other peripheral support needed. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> It supports CSTA services via the following methods. All methods return the Invoke ID of the request if they complete without any errors. Any negative value indicates an error condition. </paragraph>
<paragraph id="P-0046" lvl="1"><number>&lsqb;0046&rsqb;</number> MonitorStart( ) </paragraph>
<paragraph id="P-0047" lvl="1"><number>&lsqb;0047&rsqb;</number> MonitorStop( ) </paragraph>
<paragraph id="P-0048" lvl="1"><number>&lsqb;0048&rsqb;</number> DivertCall( ), includes divert type and private user data parameter </paragraph>
<paragraph id="P-0049" lvl="1"><number>&lsqb;0049&rsqb;</number> SystemStatus( ), includes cause parameter </paragraph>
<paragraph id="P-0050" lvl="1"><number>&lsqb;0050&rsqb;</number> AlternateCall( ), includes device ID to toggle, current call ID, and held call ID </paragraph>
<paragraph id="P-0051" lvl="1"><number>&lsqb;0051&rsqb;</number> AnswerCall( ), includes answering call ID and answering device ID </paragraph>
<paragraph id="P-0052" lvl="1"><number>&lsqb;0052&rsqb;</number> ChangeMonitorFilter( ), includes xref id, call filter, agent filter, feature filter, and maintenance filter </paragraph>
<paragraph id="P-0053" lvl="1"><number>&lsqb;0053&rsqb;</number> ClearConnection( ), includes call ID to clear, device ID to clear </paragraph>
<paragraph id="P-0054" lvl="1"><number>&lsqb;0054&rsqb;</number> ConferenceCall( ), includes held call ID, held device ID, active call ID, and active device ID </paragraph>
<paragraph id="P-0055" lvl="1"><number>&lsqb;0055&rsqb;</number> ConsultationCall( ), includes held call ID, held device ID, called device ID, private user-user data length, and private user-user data </paragraph>
<paragraph id="P-0056" lvl="1"><number>&lsqb;0056&rsqb;</number> GenerateDigits, includes calling device ID and digits </paragraph>
<paragraph id="P-0057" lvl="1"><number>&lsqb;0057&rsqb;</number> HoldCall( ), includes call ID and device ID </paragraph>
<paragraph id="P-0058" lvl="1"><number>&lsqb;0058&rsqb;</number> MakeCall( ), includes originating device ID, called device ID, and auto-answer mode </paragraph>
<paragraph id="P-0059" lvl="1"><number>&lsqb;0059&rsqb;</number> ReconnectCall( ), includes cleared call ID, cleared device ID, retrieved call ID, and retrieved device ID </paragraph>
<paragraph id="P-0060" lvl="1"><number>&lsqb;0060&rsqb;</number> RetrieveCall( ), includes call ID and device ID </paragraph>
<paragraph id="P-0061" lvl="1"><number>&lsqb;0061&rsqb;</number> RouteTrigger( ), includes device ID and trigger </paragraph>
<paragraph id="P-0062" lvl="1"><number>&lsqb;0062&rsqb;</number> RouteSelect( ), includes xref ID and device ID </paragraph>
<paragraph id="P-0063" lvl="1"><number>&lsqb;0063&rsqb;</number> RejectCall( ), includes xref ID </paragraph>
<paragraph id="P-0064" lvl="1"><number>&lsqb;0064&rsqb;</number> RouteEnd( ), includes xref ID </paragraph>
<paragraph id="P-0065" lvl="1"><number>&lsqb;0065&rsqb;</number> SingleStepTransfer( ), includes active call ID, active device ID, transfer to device ID, private user-user data length, and private user-user data </paragraph>
<paragraph id="P-0066" lvl="1"><number>&lsqb;0066&rsqb;</number> SnapshotDevice( ), includes device ID </paragraph>
<paragraph id="P-0067" lvl="1"><number>&lsqb;0067&rsqb;</number> TransferCall( ), includes held call ID, held device ID, active call ID, active device ID </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> According to the presently preferred embodiment, query device requests are handled via separate methods, one for each type of query as listed below. </paragraph>
<paragraph id="P-0069" lvl="1"><number>&lsqb;0069&rsqb;</number> QueryDeviceDoNotDisturb( ), includes device ID </paragraph>
<paragraph id="P-0070" lvl="1"><number>&lsqb;0070&rsqb;</number> QueryDeviceFowarding( ), includes device ID </paragraph>
<paragraph id="P-0071" lvl="1"><number>&lsqb;0071&rsqb;</number> QueryDeviceDeviceInfo( ), includes device ID </paragraph>
<paragraph id="P-0072" lvl="1"><number>&lsqb;0072&rsqb;</number> QueryDeviceAgentState( ), includes device ID </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> According to the presently preferred embodiment, set feature requests are handled via separate methods, one for each type of feature as listed below. </paragraph>
<paragraph id="P-0074" lvl="1"><number>&lsqb;0074&rsqb;</number> SetFeatureGroupAgent( ), includes device ID and state </paragraph>
<paragraph id="P-0075" lvl="1"><number>&lsqb;0075&rsqb;</number> SetFeatureDoNotDisturb( ), includes device ID and state </paragraph>
<paragraph id="P-0076" lvl="1"><number>&lsqb;0076&rsqb;</number> SetFeatureForwarding( ), includes device ID, type, forwarding DN, private type, private DN, and private system forwarding type </paragraph>
<paragraph id="P-0077" lvl="1"><number>&lsqb;0077&rsqb;</number> SetFeatureAgentState( ), includes device ID, state, and group </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Several services support optional parameters. According to the presently preferred embodiment of the invention, the parameters are handled in the following manner. </paragraph>
<paragraph id="P-0079" lvl="1"><number>&lsqb;0079&rsqb;</number> call ID&mdash;For any service that supports an optional call ID, the application should pass the value LONG &minus;1 to indicate that the call ID is not present. </paragraph>
<paragraph id="P-0080" lvl="1"><number>&lsqb;0080&rsqb;</number> user-user data&mdash;For any service that supports user-user data a length parameter will also be provided. A 0 length parameter indicates that the user-user data is not present. </paragraph>
<paragraph id="P-0081" lvl="1"><number>&lsqb;0081&rsqb;</number> auto answer flag&mdash;This parameter is required on the make call request. </paragraph>
<paragraph id="P-0082" lvl="1"><number>&lsqb;0082&rsqb;</number> filter&mdash;The optional filter parameter of the monitor start request is not exposed to the application. The application should use change monitor filter in order to change this value. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The invention provides some unique parameter types for services as described below. </paragraph>
<paragraph id="P-0084" lvl="1"><number>&lsqb;0084&rsqb;</number> user-user data&mdash;This field is thought of as a data byte stream. However, data byte streams are not easily passed between the application and Active-X controls. For this reason it is required that the application store the user-user data into a string (type BSTR in the control definition). The control interface treats it not as a string but as a byte array of data that is as long as the accompanying length that the application has passed in. </paragraph>
<paragraph id="P-0085" lvl="1"><number>&lsqb;0085&rsqb;</number> device IDs&mdash;If a device ID is a dialable number it is passed in as the ASCII representation of that dialable number. If a device ID is a device number it is passed in as the &lsquo;&num;&rsquo; followed by the ASCII representation of the device number. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The invention supports the following new service responses: SystemStatusResponse( ) which includes invoke ID. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The invention supports the following additional methods which are used to enable and disable the filtering of System Status requests that are received from Callbridge. </paragraph>
<paragraph id="P-0088" lvl="1"><number>&lsqb;0088&rsqb;</number> ControlSystemStatusFilterStart( ) </paragraph>
<paragraph id="P-0089" lvl="1"><number>&lsqb;0089&rsqb;</number> ControlSystemStatusFilterStop( ) </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The invention supports the following additional methods which are used to connect to and disconnect from the Callbridge gateway. </paragraph>
<paragraph id="P-0091" lvl="1"><number>&lsqb;0091&rsqb;</number> ControlOpenConnection( ) </paragraph>
<paragraph id="P-0092" lvl="1"><number>&lsqb;0092&rsqb;</number> ControlCloseConnection( ) </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The invention also provides a new method which is used to enable an application to log errors. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> Application generated errors are logged in the control error log and displayable with the control error log viewer. </paragraph>
<paragraph id="P-0095" lvl="1"><number>&lsqb;0095&rsqb;</number> ControlLogError( ), parameters include an error number, error code, information string, file name and line number </paragraph>
</section>
<section>
<heading lvl="1">Events </heading>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The invention supports ActiveX events to handle CSTA events, CSTA services, CSTA responses and other control related events. The CSTA events are supported via the following ActiveX events. All events pass back the cross-reference ID. </paragraph>
<paragraph id="P-0097" lvl="1"><number>&lsqb;0097&rsqb;</number> FireCallInformation( ), includes call ID, device ID, invoking device ID, account info length, and account info </paragraph>
<paragraph id="P-0098" lvl="1"><number>&lsqb;0098&rsqb;</number> FireConferenced( ), includes subject device ID, added device ID, primary call ID, primary device ID, secondary call ID, secondary device ID, conference ID list, local connection state, cause, private immediate connect to agent flag, and private cause </paragraph>
<paragraph id="P-0099" lvl="1"><number>&lsqb;0099&rsqb;</number> FireConnectionCleared( ), includes dropped call ID, dropped device ID, releasing device ID, local connection state, and cause </paragraph>
<paragraph id="P-0100" lvl="1"><number>&lsqb;0100&rsqb;</number> FireDelivered( ), includes call ID, device ID, alerting device ID, calling device ID, called device ID, last redirect device ID, private held device ID, local connection state, cause, private ANI flag, private user-user data length, private user-user data, private trunk, and private ACD DN </paragraph>
<paragraph id="P-0101" lvl="1"><number>&lsqb;0101&rsqb;</number> FireDiverted( ), includes diverted call ID, diverted device ID, diverting device ID, destination device ID, local connection state, and cause </paragraph>
<paragraph id="P-0102" lvl="1"><number>&lsqb;0102&rsqb;</number> FireEstablished( ), includes answered call ID, answered device ID, answering device ID, calling device ID, called device ID, last redirect device ID, private held call ID, local connection state, and cause </paragraph>
<paragraph id="P-0103" lvl="1"><number>&lsqb;0103&rsqb;</number> FireHeld( ), includes held call ID, held device ID, holding device ID, local connection state, cause, and private cause </paragraph>
<paragraph id="P-0104" lvl="1"><number>&lsqb;0104&rsqb;</number> FireNetworkReached( ), includes call ID, device ID, trunk, called device ID, local connection state, and cause </paragraph>
<paragraph id="P-0105" lvl="1"><number>&lsqb;0105&rsqb;</number> FireQueued( ), includes queued call ID, queued device ID, queue device ID, calling device ID, called device ID, last redirect device ID, private held device ID, local connection state, and cause </paragraph>
<paragraph id="P-0106" lvl="1"><number>&lsqb;0106&rsqb;</number> FireRetrieved( ), includes retrieved call ID, retrieved device ID, retrieving device ID, local connection state, and cause </paragraph>
<paragraph id="P-0107" lvl="1"><number>&lsqb;0107&rsqb;</number> FireServiceInitiated( ), includes new call ID, new device ID, requested device ID, and local connection state </paragraph>
<paragraph id="P-0108" lvl="1"><number>&lsqb;0108&rsqb;</number> FireTransferred( ), includes primary old call ID, primary old device ID, secondary old call ID, secondary old device ID, transferring device ID, transferred-to device ID, new call ID, new device ID, local connection state, cause, private cause, private user-user data length, and private user-user data </paragraph>
<paragraph id="P-0109" lvl="1"><number>&lsqb;0109&rsqb;</number> FireAgentLoggedOn( ), includes agent device ID, agent ID, and group ID </paragraph>
<paragraph id="P-0110" lvl="1"><number>&lsqb;0110&rsqb;</number> FireAgentLoggedOff( ), includes agent device ID, agent ID, and group ID </paragraph>
<paragraph id="P-0111" lvl="1"><number>&lsqb;0111&rsqb;</number> FireAgentReady( ), includes agent device Id </paragraph>
<paragraph id="P-0112" lvl="1"><number>&lsqb;0112&rsqb;</number> FireAgentNotReady( ), includes agent device ID </paragraph>
<paragraph id="P-0113" lvl="1"><number>&lsqb;0113&rsqb;</number> FireAgentWorkNotReady( ), includes agent device ID </paragraph>
<paragraph id="P-0114" lvl="1"><number>&lsqb;0114&rsqb;</number> FireDoNotDisturb( ), includes device ID and state </paragraph>
<paragraph id="P-0115" lvl="1"><number>&lsqb;0115&rsqb;</number> FireFailed( ), includes call ID, device ID, called device ID, local connection state, and cause </paragraph>
<paragraph id="P-0116" lvl="1"><number>&lsqb;0116&rsqb;</number> FireForwarding( )&mdash;device ID, forward type, forward DN, private forward type, private forward DN </paragraph>
<paragraph id="P-0117" lvl="1"><number>&lsqb;0117&rsqb;</number> FireOriginated( )&mdash;originating call ID, originating device ID, called device ID, local connection state, cause </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Several events support optional parameters. These parameters are handled in the following manner. </paragraph>
<paragraph id="P-0119" lvl="1"><number>&lsqb;0119&rsqb;</number> Local connection state&mdash;The value SHORT &minus;1 is returned if this optional field is not present. </paragraph>
<paragraph id="P-0120" lvl="1"><number>&lsqb;0120&rsqb;</number> cause&mdash;The value SHORT &minus;1 is returned if this optional held is not present. </paragraph>
<paragraph id="P-0121" lvl="1"><number>&lsqb;0121&rsqb;</number> private cause&mdash;The value SHORT &minus;1 is returned if this optional field is not present. </paragraph>
<paragraph id="P-0122" lvl="1"><number>&lsqb;0122&rsqb;</number> immediate connect to agent flag&mdash;This field supports three values: SHORT 0 indicates a FALSE condition, SHORT 1 indicates a TRUE condition, and SHORT &minus;1 indicates a not present condition. </paragraph>
<paragraph id="P-0123" lvl="1"><number>&lsqb;0123&rsqb;</number> ANI flag&mdash;This field supports three values: SHORT 0 indicates a FALSE condition, SHORT 1 indicates a TRUE condition, and SHORT &minus;1 indicates a not present condition. </paragraph>
<paragraph id="P-0124" lvl="1"><number>&lsqb;0124&rsqb;</number> trunk number&mdash;The value LONG &minus;1 is returned if this optional held is not present. </paragraph>
<paragraph id="P-0125" lvl="1"><number>&lsqb;0125&rsqb;</number> private forwarding type&mdash;This field supports three values: SHORT 0 indicates a FALSE condition, SHORT 1 indicates a TRUE condition, and SHORT &minus;1 indicates a not present condition. </paragraph>
<paragraph id="P-0126" lvl="1"><number>&lsqb;0126&rsqb;</number> private forwarding DN&mdash;The value &ldquo;&rdquo; (a NULL string) is returned if this optional field is not present. </paragraph>
<paragraph id="P-0127" lvl="1"><number>&lsqb;0127&rsqb;</number> ACD DN&mdash;The value &ldquo;&rdquo; (a NULL string) is returned if this optional field is not present. </paragraph>
<paragraph id="P-0128" lvl="1"><number>&lsqb;0128&rsqb;</number> device IDs&mdash;In any instance where the dialable number or device number is not present the value &ldquo;&rdquo; (a NULL string) is returned. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> The invention provides the following unique parameters for events. </paragraph>
<paragraph id="P-0130" lvl="1"><number>&lsqb;0130&rsqb;</number> user-user data&mdash;This is the same as the parameter described above with regard to services. </paragraph>
<paragraph id="P-0131" lvl="1"><number>&lsqb;0131&rsqb;</number> conference list&mdash;This parameter is encoded in the following format: &lt;ASCII call ID&gt;,&lt;ASCII device ID&gt;/&lt;ASCII call ID&gt;,&lt;ASCII device ID&gt;/ . . . </paragraph>
<paragraph id="P-0132" lvl="1"><number>&lsqb;0132&rsqb;</number> device IDs&mdash;If a device ID is a dialable number it is returned as the ASCII representation of that dialable number. If a device ID is a device number it is returned as the &lsquo;&num;&rsquo; followed by the ASCII representation of the device number. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> The invention supports control events via the following ActiveX events. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The following events are used to indicate System Status filtering conditions. </paragraph>
<paragraph id="P-0135" lvl="1"><number>&lsqb;0135&rsqb;</number> FireControlFilterStartResult( ) </paragraph>
<paragraph id="P-0136" lvl="1"><number>&lsqb;0136&rsqb;</number> FireControlFilterStopResult( ) </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> The following events are used to indicate the status of the connection to Callbridge. </paragraph>
<paragraph id="P-0138" lvl="1"><number>&lsqb;0138&rsqb;</number> FireControlConnectionOpen( ) </paragraph>
<paragraph id="P-0139" lvl="1"><number>&lsqb;0139&rsqb;</number> FireControlConnectionClosed( ) </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> The invention supports the receiving of the following CSTA services from Callbridge CSTA. These services are supported via the following ActiveX events. </paragraph>
<paragraph id="P-0141" lvl="1"><number>&lsqb;0141&rsqb;</number> FireSystemStatusService, includes invoke ID, and type </paragraph>
<paragraph id="P-0142" lvl="1"><number>&lsqb;0142&rsqb;</number> FireRouteEndService( ), includes xref ID, and private cause </paragraph>
<paragraph id="P-0143" lvl="1"><number>&lsqb;0143&rsqb;</number> RouteRequestService( ), includes xref ID, called device ID, calling device ID, routed call ID, and routed device ID </paragraph>
<paragraph id="P-0144" lvl="1"><number>&lsqb;0144&rsqb;</number> ReRouteRequestService( ), includes xref ID </paragraph>
<paragraph id="P-0145" lvl="1"><number>&lsqb;0145&rsqb;</number> The invention supports CSTA responses via the following ActiveX events. All results return the invoke ID. </paragraph>
<paragraph id="P-0146" lvl="1"><number>&lsqb;0146&rsqb;</number> FireSystemStatusReqResult( ) </paragraph>
<paragraph id="P-0147" lvl="1"><number>&lsqb;0147&rsqb;</number> FireMonitorStartResult( ), includes call filter, agent filter, feature filter, and maintenance filter </paragraph>
<paragraph id="P-0148" lvl="1"><number>&lsqb;0148&rsqb;</number> FireMonitorStopResult( ) </paragraph>
<paragraph id="P-0149" lvl="1"><number>&lsqb;0149&rsqb;</number> FireDivertCallResult( ) </paragraph>
<paragraph id="P-0150" lvl="1"><number>&lsqb;0150&rsqb;</number> FireUniversalError( ), passes back the class and value values instead of just a single error code. The Invoke ID is also passed back. </paragraph>
<paragraph id="P-0151" lvl="1"><number>&lsqb;0151&rsqb;</number> FireReject( ), passes back the class and value values instead of just a single error code. The Invoke ID is also passed back. </paragraph>
<paragraph id="P-0152" lvl="1"><number>&lsqb;0152&rsqb;</number> FireAlternateCallResult( ) </paragraph>
<paragraph id="P-0153" lvl="1"><number>&lsqb;0153&rsqb;</number> FireAnswerCallResult( ) </paragraph>
<paragraph id="P-0154" lvl="1"><number>&lsqb;0154&rsqb;</number> FireChangeMonitorFiiterResult( ), includes call filter, agent filter, feature filter, and maintenance filter </paragraph>
<paragraph id="P-0155" lvl="1"><number>&lsqb;0155&rsqb;</number> FireClearConnectionResult( ) </paragraph>
<paragraph id="P-0156" lvl="1"><number>&lsqb;0156&rsqb;</number> FireConferenceCallResult( ), includes new call ID and new device ID </paragraph>
<paragraph id="P-0157" lvl="1"><number>&lsqb;0157&rsqb;</number> FireConsultationCallResult( ), includes new call ID and new device ID </paragraph>
<paragraph id="P-0158" lvl="1"><number>&lsqb;0158&rsqb;</number> FireGenerateDigitsResult( ) </paragraph>
<paragraph id="P-0159" lvl="1"><number>&lsqb;0159&rsqb;</number> FireHoldCallResult( ) </paragraph>
<paragraph id="P-0160" lvl="1"><number>&lsqb;0160&rsqb;</number> FireMakeCallResult( ), includes new call ID and new device ID </paragraph>
<paragraph id="P-0161" lvl="1"><number>&lsqb;0161&rsqb;</number> FireQueryDoNotDisturbResult( ), includes state </paragraph>
<paragraph id="P-0162" lvl="1"><number>&lsqb;0162&rsqb;</number> FireQueryFowardingResult( ), includes type count, type list, DN list, private type count, private type list, and private DN list </paragraph>
<paragraph id="P-0163" lvl="1"><number>&lsqb;0163&rsqb;</number> FireQueryDeviceInfoResult( ), includes device ID, type, private type, private sub-type, private attribute, and calls queued </paragraph>
<paragraph id="P-0164" lvl="1"><number>&lsqb;0164&rsqb;</number> FireQueryAgentStateResult( ), includes state, agent ID, group </paragraph>
<paragraph id="P-0165" lvl="1"><number>&lsqb;0165&rsqb;</number> FireReconnectCallResult( ) </paragraph>
<paragraph id="P-0166" lvl="1"><number>&lsqb;0166&rsqb;</number> FireRetrieveCallResult( ) </paragraph>
<paragraph id="P-0167" lvl="1"><number>&lsqb;0167&rsqb;</number> FireSetFeatGroupAgentResult( ) </paragraph>
<paragraph id="P-0168" lvl="1"><number>&lsqb;0168&rsqb;</number> FireSetFeatDNDResult( ) </paragraph>
<paragraph id="P-0169" lvl="1"><number>&lsqb;0169&rsqb;</number> FireSetFeatFwdResult( ) </paragraph>
<paragraph id="P-0170" lvl="1"><number>&lsqb;0170&rsqb;</number> FireSetFeatAgentStateResult( ) </paragraph>
<paragraph id="P-0171" lvl="1"><number>&lsqb;0171&rsqb;</number> FireSingleStepXferStateResult( ), includes transferred call ID and transferred device ID </paragraph>
<paragraph id="P-0172" lvl="1"><number>&lsqb;0172&rsqb;</number> FireSnapshotDeviceResult( ), includes call ID 1 through call ID 5 and local connection state 1 through local connection state 5 </paragraph>
<paragraph id="P-0173" lvl="1"><number>&lsqb;0173&rsqb;</number> FireSystemStatusResult( ) </paragraph>
<paragraph id="P-0174" lvl="1"><number>&lsqb;0174&rsqb;</number> FireTransferCallResult( ), includes new call ID and new device ID </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> The invention provides the following unique parameters for responses. </paragraph>
<paragraph id="P-0176" lvl="1"><number>&lsqb;0176&rsqb;</number> DN lists&mdash;The query device forwarding response may contain two DN lists, one for each forwarding type present and one for each private forwarding type present. The DN list format is the ASCII equivalent of the device ID separated by commas with each double entry followed by a single slash: &lt;ASCII device ID&gt;/&lt;ASCII device ID&gt;/ . . . </paragraph>
<paragraph id="P-0177" lvl="1"><number>&lsqb;0177&rsqb;</number> type lists&mdash;The query device forwarding response may contain up to 20 different forwarding types. Normally these would be represented each as a separate short parameter but Active-X controls have a limit and do not allow 22 parameters to be passed back in events. Because of this, the forwarding types and the private forwarding types are encoded into a BSTR parameter. The encoding format is the ASCII equivalent of the forwarding type separated by commas. The last entry is not followed by a comma. A length field is returned equal to the number of types. </paragraph>
<paragraph lvl="0"><in-line-formula>&lt;ASCII type&gt;,&lt;ASCII type&gt;, . . .&lt;ASCII type&gt;</in-line-formula></paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> The control framework provided by Microsoft includes several methods which can be overridden to provide certain actions. The invention overrides the OnDraw( ) function to provide a bitmapped display for the control. In particular, the invention provides two bitmaps. One is used for toolbar type displays and one is used display when the control is inserted into an application. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> The WindowProc( ) routine is where the messages are received and where link error conditions are handled. This routine uses FireLinkConnectionClosed( ). </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> The process_xxx routines handle the parsing of the incoming CSTA message. According to the invention, these routines handle the new CSTA messages, additional information and parameters that are to be passed in the ActiveX events described above. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> As mentioned above, the invention supports ActiveX apartment threading. This is implemented via the following code:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>BOOL</entry>
</row>
<row>
<entry>CCbCstaCtrl::CCbCstaCtrlFactory::UpdateRegistry(BOOLbRegister)</entry>
</row>
<row>
<entry>&lcub;</entry>
</row>
<row>
<entry>// TODO: Verify that your control follows apartment-model</entry>
</row>
<row>
<entry>threading rules.</entry>
</row>
<row>
<entry>// Refer to MFC TechNote 64 for more information.</entry>
</row>
<row>
<entry>// If your control does not conform to the</entry>
</row>
<row>
<entry>apartment-model rules, then</entry>
</row>
<row>
<entry>// you must modify the code below, changing the 6th</entry>
</row>
<row>
<entry>parameter from</entry>
</row>
<row>
<entry>// afxRegApartmentThreading to 0.</entry>
</row>
<row>
<entry>if (bRegister)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>return AfxOleRegisterControlClass</entry>
</row>
<row>
<entry></entry>
<entry>(AfxGetInstanceHandle( ),</entry>
</row>
<row>
<entry></entry>
<entry>m_clsid,</entry>
</row>
<row>
<entry></entry>
<entry>m_lpszProgID,</entry>
</row>
<row>
<entry></entry>
<entry>IDS_CBCSTA,</entry>
</row>
<row>
<entry></entry>
<entry>IDB_CSTA,</entry>
</row>
<row>
<entry></entry>
<entry>afxRegApartmentThreading,</entry>
</row>
<row>
<entry></entry>
<entry>_dwCbCstaOleMisc,</entry>
</row>
<row>
<entry></entry>
<entry>_tlid</entry>
</row>
<row>
<entry></entry>
<entry>_wVerMajor,</entry>
</row>
<row>
<entry></entry>
<entry>_wVerMinor);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>else</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>return AfxOleUnregisterClass(m_clsid,m_lpszProgID);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&rcub;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Apartment threading allows multiple instances of a control within a single process. When instantiated in this manner, each instance of the control will attempt to form a separate connection with a Callbridge server. By using the server name and port properties on each control it is possible to have controls within the same process connects as different hosts connected to the same Callbridge server or different hosts connected to different Callbridge servers. </paragraph>
</section>
<section>
<heading lvl="1">Property Pages </heading>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> According to the invention, support has been added to collect a number of different statuses and statistics. All statuses and statistics to be kept are defined below and are displayable via new property pages. The purpose of these property pages are to provide methods for allowing a quick glance at items that show how the control interface is operating. These pages are mainly intended for support purposes. According to the presently preferred embodiment, four property pages are provided: the link status page, the statistics page, the error viewing property page, and the configuration property page. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> The link status page includes the following information. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> For the Callbridge link: </paragraph>
<paragraph id="P-0186" lvl="2"><number>&lsqb;0186&rsqb;</number> 1. Link Status&mdash;Connected or Not Connected, </paragraph>
<paragraph id="P-0187" lvl="2"><number>&lsqb;0187&rsqb;</number> 2. Link Down Count&mdash;number of times link has been down, </paragraph>
<paragraph id="P-0188" lvl="2"><number>&lsqb;0188&rsqb;</number> 3. Link Up Count&mdash;number of times link has been brought up. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> For the Application link: </paragraph>
<paragraph id="P-0190" lvl="2"><number>&lsqb;0190&rsqb;</number> 1. Link Status&mdash;Connected or Not Connected, </paragraph>
<paragraph id="P-0191" lvl="2"><number>&lsqb;0191&rsqb;</number> 2. Event Acceptance State&mdash;Frozen or Unfrozen. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> For heartbeat messages sent by Callbridge to the control interface: </paragraph>
<paragraph id="P-0193" lvl="2"><number>&lsqb;0193&rsqb;</number> 1. Heartbeats Received&mdash;number of System Status Normals received from Callbridge CSTA, </paragraph>
<paragraph id="P-0194" lvl="2"><number>&lsqb;0194&rsqb;</number> 2. Heartbeats Acked&mdash;number of heartbeat messages acknowledged. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> For heartbeat messages sent to Callbridge from the control interface: </paragraph>
<paragraph id="P-0196" lvl="2"><number>&lsqb;0196&rsqb;</number> 1. Heartbeats Sent&mdash;Number of System Status Normals sent to Callbridge CSTA, </paragraph>
<paragraph id="P-0197" lvl="2"><number>&lsqb;0197&rsqb;</number> 2. Heartbeats Acked&mdash;number of heartbeat messages acknowledged, </paragraph>
<paragraph id="P-0198" lvl="2"><number>&lsqb;0198&rsqb;</number> 3. Heartbeats Failed&mdash;number of heartbeat messages not acknowledged. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> The link status property page has a Clear button that will clear all the above items except the Link Statuses and Event Acceptance State. According to the presently preferred embodiment, all items on the link status property page are updated every 10 seconds. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> The statistics property page includes the following information: </paragraph>
<paragraph id="P-0201" lvl="2"><number>&lsqb;0201&rsqb;</number> 1. CSTA Requests, responses, errors, rejects and events received, </paragraph>
<paragraph id="P-0202" lvl="2"><number>&lsqb;0202&rsqb;</number> 2. CSTA Requests, responses, errors, rejects and events sent, </paragraph>
<paragraph id="P-0203" lvl="2"><number>&lsqb;0203&rsqb;</number> 3. Messages per second received, </paragraph>
<paragraph id="P-0204" lvl="2"><number>&lsqb;0204&rsqb;</number> 4. Messages per second sent. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> The statistics property page has a Clear button that will clear all the above items. According to the presently preferred embodiment, all items on the statistics property page are updated every 10 seconds. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> Before discussing the error viewing page, the error logging according to the invention will be discussed. According to the invention, internal errors may be sent to an application via events if the error the logging property is set to TRUE. In addition a simple error log is maintained. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> The su_log_message( ) takes error message information and writes an ASCII representation to a circular file. This implementation has the following characteristics: The file has a fixed size. The file resides in the system directory. The file will is named CSTA_TSERVER_ERROR_LOG.LOG. The file will is viewable via a simple text editor. The file is viewable via the error log property page. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> If error logging is implemented, a property page is provided that allows a user to view the error log. The error viewing property page has the following characteristics: </paragraph>
<paragraph id="P-0209" lvl="2"><number>&lsqb;0209&rsqb;</number> 1. Error entries are displayed in a tree view format, </paragraph>
<paragraph id="P-0210" lvl="2"><number>&lsqb;0210&rsqb;</number> 2. Error details are expandable/contractible, </paragraph>
<paragraph id="P-0211" lvl="2"><number>&lsqb;0211&rsqb;</number> 3. A refresh button allows the display to be refreshed. </paragraph>
<paragraph id="P-0212" lvl="2"><number>&lsqb;0212&rsqb;</number> In addition, the following strings are used by the error viewing property page: </paragraph>
<paragraph id="P-0213" lvl="3"><number>&lsqb;0213&rsqb;</number> IDS CBCSTATSERVER PPG ERROR VIEW Error Viewing Property Page </paragraph>
<paragraph id="P-0214" lvl="3"><number>&lsqb;0214&rsqb;</number> IDS CBCSTATSERVER PPG ERROR VIEW CAPTION Error Viewing </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> The configuration property page provides an interface for setting and viewing all properties. This property page displays all properties and allows read/write properties to be changed. The following strings will be created for this property page. </paragraph>
<paragraph id="P-0216" lvl="1"><number>&lsqb;0216&rsqb;</number> IDS CBCSTATSERVER PPG CONFIG </paragraph>
<paragraph id="P-0217" lvl="1"><number>&lsqb;0217&rsqb;</number> IDS CBCSTATSERVER_PPG_CONFIG_CAPTION </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> There have been described and illustrated herein methods and apparatus for a control interface for CSTA protocols. While particular embodiments of the invention have been described, it is not intended that the invention be limited thereto, as it is intended that the invention be as broad in scope as the art will allow and that the specification be read likewise. It will therefore be appreciated by those skilled in the art that yet other modifications could be made to the provided invention without deviating from its spirit and scope as so claimed. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A control interface for controlling CSTA protocols in a PBX switch, said control interface comprising: 
<claim-text>(a) a computing platform coupled to the PBX switch; and </claim-text>
<claim-text>(b) component based interface objects running on the computing platform and defining properties, methods, and events, said properties, methods and events being mapped to control substantially every event and service of said PBX switch. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said component based interface objects is ActiveX. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein ActiveX properties are mapped to session configuration. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein ActiveX includes property pages and said property pages are mapped to session configuration. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein ActiveX methods and events are mapped to startup and teardown a connection to the PBX switch. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein substantially all CSTA and private data fields are supported. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein invoke ID generation is automatic and configurable. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein invoke ID timing is automatic and configurable. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein heartbeat messages and replies are automatically generated. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said heartbeat messages and replies are configurable. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein statuses and errors are automatically logged. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A control interface according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said statuses and errors are viewable via ActiveX property pages. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method for controlling CSTA protocols in a PBX switch, said method comprising the steps of: 
<claim-text>(a) coupling a computing platform to the PBX switch; and </claim-text>
<claim-text>(b) running component based interface objects on the computing platform, wherein the component based interface objects defines properties, methods, and events which are mapped to control substantially every event and service of the PBX switch. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said component based interface objects is ActiveX. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein ActiveX properties are mapped to session configuration. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein ActiveX includes property pages and said property pages are mapped to session configuration. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein ActiveX methods and events are mapped to startup and teardown a connection to the PBX switch. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein substantially all CSTA and private data fields are supported. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein invoke ID generation is automatic and configurable. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein invoke ID timing is automatic and configurable. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein heartbeat messages and replies are automatically generated. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said heartbeat messages and replies are configurable. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein statuses and errors are automatically logged. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein said statuses and errors are viewable via ActiveX property pages.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002648A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002648A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002648A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
