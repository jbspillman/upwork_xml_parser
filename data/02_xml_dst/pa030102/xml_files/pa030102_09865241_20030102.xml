<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005210A1-20030102-D00000.TIF SYSTEM "US20030005210A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00001.TIF SYSTEM "US20030005210A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00002.TIF SYSTEM "US20030005210A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00003.TIF SYSTEM "US20030005210A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00004.TIF SYSTEM "US20030005210A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00005.TIF SYSTEM "US20030005210A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00006.TIF SYSTEM "US20030005210A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00007.TIF SYSTEM "US20030005210A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005210A1-20030102-D00008.TIF SYSTEM "US20030005210A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005210</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09865241</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010524</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>108000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Intelligent CAM cell for CIDR processor</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Damodar</given-name>
<middle-name>Reddy</middle-name>
<family-name>Thummalapally</family-name>
</name>
<residence>
<residence-us>
<city>Milpitas</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Mohit</given-name>
<family-name>Sharma</family-name>
</name>
<residence>
<residence-non-us>
<city>Richmond Town</city>
<country-code>IN</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Pamela</given-name>
<family-name>Kumar</family-name>
</name>
<residence>
<residence-non-us>
<city>Bangalore</city>
<country-code>IN</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>ATTNE: THELEN REID &amp; PRIEST LLP</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 640640</address-1>
<city>SAN JOSE</city>
<state>CA</state>
<postalcode>95164-0640</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An intelligent content addressable memory (CAM) cell for CIDR co-processors is disclosed. The CAM cell is operative to search and compare external data from an external search data key with stored data. The CAM cell comprises means for containing the stored data and means for enabling a mask prefix read path for a work matching the external search data key. Furthermore, the CAM cell includes means for merging a mask prefix pattern of all matching entries in order to generate a device longest prefix match. A comparison is made between the device longest prefix match and word mask prefix data in order to find the desired data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to intelligent content addressable memory (CAM) cells for use in co-processors using Classless Inter Domain Routing (CIDR) protocol which is a subset of the Internet Protocol (IP). More particularly, the present invention relates to intelligent CAM cells for use as building blocks for a database and which are capable of performing a hierarchical search in the database. </paragraph>
</section>
<section>
<heading lvl="1">DESCRIPTION OF THE RELATED ART </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Content addressable memory cells are well known in the art and are used to compare a search word with a set of stored words. An indication of whether or not the search word matches the stored words is produced for each stored word. A distinguishing characteristic of a CAM is that each stored word is uniquely identified on the basis of the content of the word itself, rather than by its address within the memory array. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A CAM includes an array of memory cells arranged in a matrix of rows and columns. Each memory cell stores a single bit of digital information. The bits stored in a row of memory elements constitute a stored word. During a match operation, a search word of input data is applied to all the rows, and an indication is produced for each row as to whether or not the search word matches the word stored therein. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> An important use for a CAM is to facilitate searches on conventional indexed random access memory (RAM). The CAM stores a series of &ldquo;tags&rdquo; which represent address locations in the RAM. Match operations are performed on the CAM in order to detect the locations of data stored in the RAM. When match data is presented to the CAM, the CAM responds with a &ldquo;tag&rdquo; representing the address location in RAM containing the desired data. This address location is then driven to the RAM&apos;s address lines in order to access the data. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A common problem which is encountered in such types of search operations is when there is a &ldquo;multiple match&rdquo; (i.e., more than one row of the CAM tries to indicate a match with the match data). If the CAM lines are connected directly to the RAM&apos;s address lines, then a multiple match will cause more than one RAM address line to be asserted simultaneously. In such a situation, not only will some RAMS be incapable of responding properly, but assertion of multiple address lines may even be destructive for some RAMs. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> U.S. Pat. No. 5,454,094 entitled METHOD AND APPARATUS FOR DETECTING MULTIPLE MATCHES IN A CONTENT ADDRESSABLE MEMORY, issued on Sep. 26, 1995 (the disclosure of which is incorporated by reference herein), attempts to overcome this problem by ensuring that when a CAM is used with a conventional RAM that is not suited to receive multiple matches, the RAM never sees more than one asserted address line. It also tries to ensure that the system is alerted to the fact that a multiple match has occurred, so that appropriate action may be taken (such as treating the stored data as invalid, or rechecking the CAM contents). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Consequently, U.S. Pat. No. 5,454,094 provides a method and apparatus for detecting multiple matches in a CAM. The invention according the &apos;094 patent attempts to protect the attached RAM by ensuring that only one address line of the RAM is asserted at a time. It also provides a signal to alert the system that a multiple match has occurred. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In brief, the invention covered by U.S. Patent &apos;094 converts information from the CAM lines into a logarithm index. It then converts this logarithm index into a unary code in which only one digit is asserted, and sends the unary code to the address lines of the RAM. Because the unary code never has more than one asserted digit, the RAM is protected from any multiple matches generated by the CAM. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> If the information on the CAM lines has only one asserted digit, then the unary code will be identical to the CAM output. If, however, the CAM has asserted more than one address line, then the unary code will differ from the CAM output and will be inaccurate. This situation is detected by producing an inverted unary code and ANDing each digit of the inverted unary code with the corresponding digit of the original CAM output. If the result contains any asserted digits, then there has been a multiple match. A signal is generated to inform the system of this condition so that the unary code sent to the RAM can be ignored. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> U.S. Pat. No. 6,101,573 entitled BIT LINE AND/OR MATCH LINE PARTITIONED CONTENT ADDRESSABLE MEMORY, issued on Aug. 8, 2000 (the disclosure of which is incorporated by reference herein), describes a bit line and/or match line partitioned content addressable memory. In brief, the &apos;573 patent discloses cache memory formed of a content addressable memory and a cache RAM. The content addressable memory is divided into two or more sections by an AND gate array that serves to selectively either block or unblock the bit lines that supply an input data word to the bit storage and comparison cells of the content addressable memory. The generation of match signals for each section is also selectively blocked by preventing the match signal discharge to ground. The match signals from a blocked section are not passed to the RAM. The AND gate array and match signal disable may be controlled by the least significant bit of the input data word, higher order bits of the input data word, or may be controlled by a bit selected by program control from among the bits of the input data word. When a portion of the bit lines are blocked by the AND gate array, then the capacitance of the bit lines to be driven is reduced and the number of match lines discharged is halved thereby reducing power consumption. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to the &apos;573 patent, the content addressable memory has: a plurality of rows of bit storage and comparison cells within an array of bit storage and comparison cells wherein each row stores a data word. The memory further has a plurality of bits lines running through said array between corresponding bit storage and comparison cells within adjacent rows for transmitting an input data word from a data word input at one point on said bit lines along said bit lines to each row coupled to said bit lines. The input data word being compared with a respective stored data word by each row detects a match that is indicated by a match signal upon a match line for that row. The array is divided into at least two sections by one or more sets of gating circuits that operate to perform one or more of a) selectively blocking said input data word being transmitted along said bit lines beyond said gating circuits and b) selectively blocking generation of said match signals for at least one section. The gating circuits being controlled to block or unblock in response to at least one bit of said input data word. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The prior art recognizes that significant power consumption advantages can be achieved by partitioning the content addressable memory using gating circuits disposed in the bit lines running through the content addressable memory and/or disabling generation of match signal for a section of the content addressable memory. The sections of the content addressable memory thus formed can share their supporting circuitry, e.g. input circuitry, and so the modification requires only a small increase in circuit area through the provision of the gating circuits and control, and yet is able to provide a significant decrease in power consumption. Dividing the bit lines into sections has the result that when a portion of the bit line is blocked off by the gating circuit, the capacitance of the bit line being driven is reduced. Reducing the capacitance decreases the amount of power consumed in changing the signal value on the bit line. Blocking generation of the match signals for a section also decreases power consumption as these are normally all precharged and then all that do not match are discharged. At the same time, the &apos;573 patent acknowledges that partitioning the content addressable memory reduces the associativity which is certainly a disadvantage, albeit a small one. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> According to U.S. Pat. No. 5,568,415, entitled CONTENT ADDRESSABLE MEMORY HAVING A PAIR OF MEMORY CELLS STORING DON&apos;T CARE STATES FOR ADDRESS TRANSLATION, issued on Oct. 22, 1996 (the disclosure of which is incorporated by reference herein), the content addressable memory has a pair of single-bit memory cells storing together two bits of information representing either an invalid state, a logic zero state, a logic one state, or a don&apos;t care state. Each of the memory cells has a pair of transistors. One of the transistors connects a common node to a respective one of a pair of address lines, and another of the transistors connects the common node to a potential of a predefined logic level. Each of the transistors has a gate receiving a logic level of the bit of information stored in a respective memory cell so that one of the transistors is conductive in response to the logic level of the bit of the information when the other of the transistors is not conductive in response to the logic level of the bit of information. Each of the memory cells also includes a transistor connected to the match line and having a gate connected to the common node. The content addressable memory is especially adapted for use in a translation buffer providing variable page granularity. The don&apos;t care states permit multiple virtual page numbers to match a single entry storing information for multiple physical pages. The invalid state eliminates the need for a dedicated valid bit in each entry. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> U.S. Pat. No. 5,890,201, entitled CONTENT ADDRESSABLE MEMORY HAVING MEMORY CELLS STORING DON&apos;T CARE STATES FOR ADDRESS TRANSLATION, issued on Mar. 30, 1999 (the disclosure of which is incorporated by reference herein), discloses a method of accessing a content addressable memory storing two bits of information representing either an invalid state, a logic zero state, a logic one state, or a don&apos;t care state. The stored information is compared with a one bit signal. A match is indicated when the one bit signal represents a logic zero and the stored information represents the don&apos;t care state, or when the one bit signal represents a logic one and the stored information represents a don&apos;t care state. An absence of a match is indicated when the one bit signal represents a logic zero and the stored information represents an invalid state, or when the one bit signal represents a logic one and the stored information represents the invalid state. The content addressable memory is especially adapted for use in a translation buffer providing variable page granularity. The don&apos;t care state permits multiple virtual page numbers to match a single entry storing information for multiple physical pages. The invalid state eliminates the need for a dedicated valid bit in each entry. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> U.S. Pat. No. 6,118,682, entitled METHOD AND APPARATUS FOR READING MULTIPLE MATCHED ADDRESSES, issued on Sep. 13, 2000, (the disclosure of which is incorporated by reference herein) is directed toward providing a content addressable memory which enables multiple matches to be simply and efficiently examined during a multiple match cycle, regardless of the size of the storage device. For example, where two matched entries in a content addressable memory correspond to a search address, exemplary embodiments reduce the task of examining the locations of these matches to processing only two matched addresses as opposed to having to match all entries of the content addressable memory. By providing efficient access to multiple matched entries of a memory, the multiple matches can actually be used in an ordered manner to access different branches of a secondary memory. The use of a relatively simple control scheme enables the control logic to be implemented on a single integrated circuit chip with the memory device itself (e.g., a content addressable memory). Moreover, in contrast to conventional content addressable memories, the invention of the &apos;682 patent enables the user to reset an original multiple matched condition, thereby allowing the user to perform several examinations of the data/address. Thus, if an error occurs during processing of multiple matches, the user can easily restart the examination process. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> All the above-mentioned prior art recognize that in the current highly advanced state of information technology, the ability to store, obtain, access, retrieve and transmit information in the least possible time is highly critical. However, none of the currently available technology support the fast pace of state of the art systems. For instance in a 32-bit database system, it could take as long as 31 clock cycles to search and retrieve the stored data. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> As the use of the Internet for voice and data communication increases, the need for faster and accurate transfer and retrieval of data increases. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Typically, data or voice communication over the Internet is performed in accordance with a specific protocol. Each protocol specifies how the data is sent from the source point to the destination point. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> As mentioned earlier, the IP protocol governs data and voice communication over the Internet. The CIDR protocol, which is a subset of the IP protocol, governs addressing over the Internet. Under the CIDR protocol, the correct destination address is the one that is associated with the longest prefix. Each Internet address in the CIDR protocol is associated with an IP address and a sub-net mask value. In each router, routing tables are constructed out of prefix information and are searched using the destination address to determine the exit port of the router. According to the CIDR protocol, a sub-net mask value could only include a series of consecutive &ldquo;1s&rdquo; followed by &ldquo;0s&rdquo;. &ldquo;1&rdquo; represents that the corresponding bit in the associated IP address is used to determine the final physical address of the destination. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A transfer of information between two points begins by the user sending a packet of information to the receiver. Depending upon the location of the receiver, the information may have to travel through several networks before it reaches the receiver. It therefore, becomes very important that the information travels accurately through the shortest possible route from the sender to the receiver. It becomes all the more difficult because different destinations may have portions of their address in common with each other. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> As the number of networks and destinations which are interconnected increases by the day, it is highly important that routers in each network are able to route the information as fast as possible to the final destination. The current technology takes a long time to determine the correct address in a router to route the information. For example, a 32 bit address could require up to 31 clock cycles to be determined in the currently available technology. In networks incorporating a wider address such as 128 bits, it would take more time to accurately determine the address of the final destination. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Thus there is a need for search cell capable of searching a database in the shortest possible time without compromising on the accuracy of the results. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The applicants&apos; own co-pending application No. ______ filed on ______ overcomes many of the problems associated with the prior art and discloses a novel search cell for use as a building block of a database and which is capable of performing hierarchical searches in the database as well as a method thereof. The novel search cell of the co-pending application includes a plurality of Logic Content Addressable Memory Cells (LCAMS) arranged in rows and columns. Each LCAM cell includes first and second memory cells, a first comparator coupled to the first and second memory cells for comparing the content of the first memory cell with one bit of test information. To search for a second data type entry, the search cell searches for the longest prefix entry belonging to the first data type by comparing test information with the entries stored in the first storage unit. Once the longest prefix entry is determined, a corresponding entry in the second storage unit is output as the output of the search cell. The contents of said U.S. Patent Application are deemed to have been incorporated herein by reference. </paragraph>
</section>
<section>
<heading lvl="1">OBJECTS AND SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> It is therefore, an object of the present invention to provide intelligent content addressable memory (CAM) cells for use in co-processors using Classless Inter Domain Routing (CIDR) protocol which avoids the disadvantages of the prior art. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> It is a further object of the present invention to provide intelligent CAM cells and a search method using them which avoids pre-sorting for routing table entries. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> It is yet another object of the present invention to provide a method using intelligent content addressable memory cells which avoid duplicate entries in routing table entries. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> It is yet another object of the present invention to provide a simple method for deleting a specific entry in routing tables and auto updating algorithms to avoid duplicate entries in the database. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> It is yet a further object of the present invention to provide a Tag cell with a reset path to invalidate a specific entry matching external search data and mask prefix data. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> It is yet a further object of the present invention to provide a Tag cell with an option to invalidate all entries matching external search key data or an entry matching external search key data and mask prefix data. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> It is another object of the present invention to provide a novel CAM cell for reducing search operation latency for results. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The above and other objects of the present invention are achieved by the novel intelligent content addressable memory cells of the present invention which particularly avoid pre-sorting of the routing table entries and also prevent duplication of entries and employ a novel search algorithm for performing the search operations. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The intelligent content addressable memory cells of the present invention comprise logic CAM cells (LCAM cells) that consist of a ternary CAM cell, at least a pair of mask prefix read path transistors, and at least a pair of prefix comparison transistors. The prefix comparison is between a device longest prefix match (DLPM) and word mask prefix data. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The typical environment in which the present invention will be utilized has been described in the applicant&apos;s co-pending application referred to above. The environment is typically a network such as the Internet which would include sub-networks that are connected according to a specific connection topology. The different topologies for connecting the networks will be known to a person skilled in the art. The networks themselves could be connected to each other through different communication means such as telephone lines, ISDN lines, satellites, and other means. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Each local network in a network configuration includes a router for routing the received packet of information to different destinations. Each router includes several input and output ports, each having a specific address connecting to multiple end points and subscribers. A port of a router may even be connected to the input port of another network. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Each network also includes a router table. The router table in each network stores the information used in the operation of the network. The information could include the physical address of the input/output ports of the respective router or the prefix information associated with the address of routers accessible through input /output ports. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The novel Search Algorithm of the present invention essentially consists of the following steps: </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> 1. Comparison of external search key data (C/NC) with all valid entries in the entire routing table. </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> 2. Generation of &ldquo;device longest prefix match&rdquo; (DLPM). </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> 3. Comparison of DLPM pattern with mask prefix pattern of all entries, which matched with the external search key in step 1. </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> 4. Accessing associated data for the entry, which has &ldquo;associated data word line&rdquo; (ADWL) asserted in step-3. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> 5. Generation of &ldquo;system longest prefix match&rdquo; (SLPM) pattern. </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> 6. Sampling of SLPM and comparison of DLPM pattern. </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> 7. Outputting the associated data read in step 4. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Comparison of external search key data with valid entries in the entire routing table is conventional. In a preferred embodiment, the routing table entries may be distributed among multiple devices in a depth cascaded system. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> As will be clear to a person skilled in the art, in each entry, only unmasked data bits participate in comparison. The masked data bits do not participate in comparison. For every unique mask prefix pattern, there can be a maximum of one entry matching external search key in the entire routing table. Similarly, for a word width of 32 bits, there can be a maximum of 32 entries matching external search key data in the entire routing table. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Once the comparison is effected, MATCH-1L signals are asserted for the entries matching external search key data. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The &ldquo;device longest prefix match (DLPM)&rdquo; is generated by reading mask prefix pattern for all entries matching external key data in step 1. The MATCH-1L signals are used to enable mask prefix pattern read. The mask prefix pattern is read for entries, which have the MATCH-1L signal asserted. In each device in a depth cascaded system, the mask prefix pattern of all matching entries are read and merged to generate the &ldquo;device longest prefix match (DLPM)&rdquo;. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Comparison of the DLPM pattern with mask prefix pattern of all entries which matched with external search key in step 1 is performed by comparing Word Array Longest Prefix Match (WALPM) with DLPM to identify the word array which has an entry with a mask pattern the same as DLPM. The DLPM is driven on NLP (invert of DLPM) lines into a word array which has an entry matching the external key data in step-1 and also having the mask pattern the same as the DLPM. This completely dispenses with the conventional requirement to drive the DLPM into all word arrays, thereby resulting in a saving of time, as well as power. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Only one entry in the device will have a mask prefix pattern matching with the DLPM pattern. Each entry has an ADWL signal and will be asserted for the entry which: </paragraph>
<paragraph id="P-0050" lvl="2"><number>&lsqb;0050&rsqb;</number> a) has MATCH-1L asserted in step 1. (i.e. matched external search key data in step 1); and </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> b) has a mask prefix pattern which matches the DLPM. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Thereafter, associated data for the entry, which has ADWL asserted in step-3, is accessed. The ADWL signal is used to access the associated data memory cells. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Once the associated data is accessed, the &ldquo;system longest prefix match&rdquo; (SLPM) pattern is generated by merging the DLPM pattern from all devices on depth expansion (DBX) pins. The depth expansion pins, are common for all devices. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> All devices need to sample DBX pins for SLPM and compare with their respective DLPM pattern. Only one device will have a DLPM matching SLPM. The device matching SLPM will output associated data read in step 4 on search results bus pins. The search results bus pins are common for all devices in a depth cascaded system. Only one device can drive the search results pins at a time. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The algorithm of the present invention is extremely suitable for pipeline architecture. In pipeline mode, the search results will be output every cycle. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The present invention also provides a novel method for matching by the following Matching Entry Algorithm: </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> 1. Comparison of external search key data (L/NC) with all valid entries in the entire routing table. The routing table entries may be distributed among multiple devices in the depth cascaded system. As in the search operation, in each entry, only unmasked data bits participate in comparison. The masked data bits do not participate in the comparison. Again as in the search algorithm, for every unique mask prefix pattern, there can be a maximum of one entry matching external search key in the entire routing table. Likewise, for a word width of 32 bits, there can be a maximum of 32 entries matching external search key data in the entire routing table. After the comparison, MATCH-1L signals are asserted for the entries matching external search key data in a manner identical to step 1 of the search algorithm. </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> 2. Driving the external mask prefix pattern on LP/NLP lines into word arrays which have matched in step 1. However, unlike the DLPM in the case of the Search operation, the external mask prefix pattern is driven onto LP/NLP lines. Thereafter, the external mask prefix pattern is compared with the mask prefix pattern of all entries that matched with the external search key in step 1. As can be appreciated, there can be a maximum of one entry in the routing table with the mask prefix pattern matching with the external mask prefix pattern. </paragraph>
<paragraph id="P-0059" lvl="3"><number>&lsqb;0059&rsqb;</number> Again, as in search algorithm, each entry has an ADWL signal. The ADWL will be asserted for the entry which: </paragraph>
<paragraph id="P-0060" lvl="4"><number>&lsqb;0060&rsqb;</number> a) has MATCH-1 L asserted in step 1. (i.e. matched external search key data in step 1); and </paragraph>
<paragraph id="P-0061" lvl="4"><number>&lsqb;0061&rsqb;</number> b) has a prefix pattern which matches the external mask prefix pattern. </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> 3. Using the ADWL signal to access the tag cell and also the associated data cells. </paragraph>
<paragraph id="P-0063" lvl="3"><number>&lsqb;0063&rsqb;</number> For a delete matching entry command, logic &lsquo;1&rsquo; will be written into the tag cell of the entry which has the ADWL asserted. </paragraph>
<paragraph id="P-0064" lvl="3"><number>&lsqb;0064&rsqb;</number> For write associated data of a matching entry command, the associated data is modified for the entry which has the ADWL asserted. </paragraph>
<paragraph id="P-0065" lvl="3"><number>&lsqb;0065&rsqb;</number> For read associated data of a matching entry command, the associated data is read for the entry which has the ADWL asserted. </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> 4. Forcing all devices to output a &ldquo;device match flag&rdquo; information on an open drain output pin. If the external search key matches both the data and mask prefix patterns in the routing table, the NSMF pin will be asserted logic &ldquo;0&rdquo;. The device match flag is based on the ADWL signal. </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> 5. Sampling of NSMF pin to find whether the entry exists in the routing table. This information can be used for various purposes. </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> 6. Autoupdating of algorithm as follows: </paragraph>
<paragraph id="P-0069" lvl="3"><number>&lsqb;0069&rsqb;</number> (a) Issuing &ldquo;read NLP of a matching entry&rdquo;. The NSMF pin gets asserted (logic &ldquo;0&rdquo;) if an entry matching both data and mask prefix pattern exists in the database. </paragraph>
<paragraph id="P-0070" lvl="3"><number>&lsqb;0070&rsqb;</number> (b) Sampling NSMF pin. </paragraph>
<paragraph id="P-0071" lvl="3"><number>&lsqb;0071&rsqb;</number> If NSMF&equals;&lsquo;1&rsquo; then issue &ldquo;write entry to the database at a free location&rdquo; command. The entry is added in the device which holds system free addresses. The existence of the free location indicates that the device is not full. </paragraph>
<paragraph id="P-0072" lvl="3"><number>&lsqb;0072&rsqb;</number> In a preferred embodiment, both steps (a) and (b) can be integrated into one command called Autoupdate. This command can be used to avoid duplicate entries in the routing table.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The present invention will now be described in greater detail with reference to the accompanying drawings wherein: </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>a</italic></highlight>) is a block diagram of a first embodiment of the intelligent CAM of the present invention, which can be used to store routing tables using CIDR protocol and also avoid pre-sorting of the routing table entries. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>b</italic></highlight>) is a modified version of first embodiment of the intelligent cam shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>a</italic></highlight>). </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>(<highlight><italic>a</italic></highlight>) is a block diagram of a second embodiment of the intelligent CAM of the present invention which can be used to store routing tables using the CIDR protocol and to avoid pre-sorting of the routing table entries as well as prevent duplication of entries. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>(<highlight><italic>b</italic></highlight>) is a modified version of first embodiment shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>(<highlight><italic>a</italic></highlight>). </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of a typical word structure used in the intelligent CAM of the present invention. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is block diagram of a typical sample array architecture of the present invention. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic diagram for a word array prefix buffer/latch. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a schematic diagram for a MATCH-1 buffer/latch circuit. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic diagram for a MATCH-2 buffer/latch circuit. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a schematic diagram of a prior art storage cell. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a schematic diagram of a prior art compare/XOR circuit </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>(<highlight><italic>a</italic></highlight>) is a schematic diagram of a prior art ternary CAM cell. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>(<highlight><italic>b</italic></highlight>) is a schematic diagram for a variation of a prior art ternary CAM cell. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>(<highlight><italic>a</italic></highlight>) is schematic diagram of a typical tag cell of the present invention. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>(<highlight><italic>b</italic></highlight>) is a schematic diagram for second type of tag cell having the option for deletion of all entries matching the external search key.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Referring to the drawings, <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>a</italic></highlight>) shows a schematic for a first embodiment of the novel logic CAM(LCAM) cell of the present invention. The LCAM cell consists of Ternary CAM cell B<highlight><bold>10</bold></highlight>, mask prefix read path transistors N<highlight><bold>10</bold></highlight> and N<highlight><bold>11</bold></highlight>, and prefix comparison transistors N<highlight><bold>12</bold></highlight> and N<highlight><bold>13</bold></highlight>. The prefix comparison is between device longest prefix match (DLPM) and word mask prefix data. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The chip may be divided into four quadrants. Each quadrant may be divided further into multiple arrays. Each array may be further divided into multiple word arrays. Each word array stores multiple words. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> For a chip with four quadrants, 8 arrays per quadrant, 4 word arrays per array, and 32 words per word array, the total number of words (entries) in the device is equal to 4096 (&equals;4*8*4*32). </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In an array the words will be stacked in rows and columns. The words placed in a column is referred to as a word array. In the above example, each word array has 32 words. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The external search key data is driven onto C/NC lines. The stored data in the ternary CAM cells is compared with external search key data. As mentioned above, only unmasked bits in the word are compared against respective compare data lines C/NC. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The NMOS transistors N<highlight><bold>10</bold></highlight> and N<highlight><bold>11</bold></highlight> enable mask prefix P/NP read path for a word matching external search key data. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> When mask prefix P&equals;1 (NP&equals;0), the data bit is referred as masked and doesn&apos;t participate in comparison with the respective external search key data bit. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The PA signals are precharged to logic &lsquo;1&rsquo; level in the word array prefix latches prior to reading of the mask prefix. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> MATCH-1L remains at low (logic &lsquo;0&rsquo;) for all words which do not match with external search key data. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> When MATCH-1L is low, NMOS transistor N<highlight><bold>11</bold></highlight> is OFF. For a matched entry, MATCH-L is asserted logic &lsquo;1&rsquo; and NMOS transistor N<highlight><bold>11</bold></highlight> is ON. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> If MATCH-1L&equals;1 and P&equals;1, then N<highlight><bold>11</bold></highlight> is ON and N<highlight><bold>10</bold></highlight> is OFF. The PA signal is not affected with reading of this mask prefix bit. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> If MATCH-1L&equals;1 and P&equals;0, then both N<highlight><bold>11</bold></highlight> and N<highlight><bold>10</bold></highlight> are ON. This results in discharge of PA to logic &lsquo;0&rsquo; level (GND). </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The device longest prefix match (DLPM) comparison logic consists of NMOS transistors N<highlight><bold>12</bold></highlight> and N<highlight><bold>13</bold></highlight>. The MATCH-2 signal is precharged to logic &lsquo;1&rsquo; level for entries matching external search key data prior to driving DLPM on NLP for comparison. If there is a mismatch between word mask prefix P and DLPM, the MATCH-2 is discharged to logic level &lsquo;0&rsquo; (GND). </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Only the following three valid combinations for P and DLPM are possible: 11, 10, 00. The signal NLP is an invert of DLPM. The MATCH-2 gets discharged to logic level &lsquo;0&rsquo; (GND) if both transistors N<highlight><bold>12</bold></highlight> and N<highlight><bold>13</bold></highlight> are ON.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="14PT" align="left"/>
<colspec colname="2" colwidth="70PT" align="center"/>
<colspec colname="3" colwidth="119PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>P</entry>
<entry>DLPM/NLP</entry>
<entry>MATCH2 Discharge Path</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>1</entry>
<entry>1/0</entry>
<entry>OFF as N13 is OFF</entry>
</row>
<row>
<entry></entry>
<entry>1</entry>
<entry>0/1</entry>
<entry>ON as both N12 and N13 are ON</entry>
</row>
<row>
<entry></entry>
<entry>0</entry>
<entry>0/1</entry>
<entry>OFF as N12 is OFF</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> DWL is asserted to access (write/read) data storage cells. PWL is asserted to access (write/read) mask prefix storage cells. The BL/NBL are shared between data and mask cells for read/write path. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>b</italic></highlight>) depicts a variation of the embodiment shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>a</italic></highlight>) wherein the data and mask prefix cells are accessed with the same wordline but use separate data paths (BL/NBL) for data cell, and LP/NLP for mask cell. The mask cell read/write data path and DLPM comparison write path share same data line NLP. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In FIGS. <highlight><bold>2</bold></highlight>(<highlight><italic>a</italic></highlight>) and (<highlight><italic>b</italic></highlight>), a second embodiment of the logic CAM(LCAM) cell of the present invention is shown. This cell is similar to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>(<highlight><italic>a</italic></highlight>) but for two extra NMOS transistors N<highlight><bold>25</bold></highlight> and N<highlight><bold>26</bold></highlight>. The NMOS transistors N<highlight><bold>23</bold></highlight>, N<highlight><bold>24</bold></highlight>, N<highlight><bold>25</bold></highlight>, and N<highlight><bold>26</bold></highlight> form a regular COMPARE/XOR circuit as is well known in the art. The addition of the N<highlight><bold>25</bold></highlight> and N<highlight><bold>26</bold></highlight> transistors enables the device to support an additional feature of searching for an entry matching both data and mask prefix patterns. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> To delete a specific entry in the routing table, entry data and mask patterns are checked. To match the specific mask pattern, a conventional comparator will be required. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The second pull down path N<highlight><bold>25</bold></highlight>-N<highlight><bold>26</bold></highlight> covers four combinations of P&equals;0 and LP&equals;1.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="14PT" align="left"/>
<colspec colname="2" colwidth="63PT" align="center"/>
<colspec colname="3" colwidth="126PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center">TABLE 2</entry>
</row>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>P</entry>
<entry>LP/NLP</entry>
<entry>MATCH-2 Discharge Path</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>1</entry>
<entry>1/0</entry>
<entry>OFF as N13 is OFF</entry>
</row>
<row>
<entry></entry>
<entry>1</entry>
<entry>0/1</entry>
<entry>ON as both N12 and N13 are ON</entry>
</row>
<row>
<entry></entry>
<entry>0</entry>
<entry>0/1</entry>
<entry>OFF as N12 is OFF</entry>
</row>
<row>
<entry></entry>
<entry>0</entry>
<entry>1/0</entry>
<entry>ON as both N25 and N26 are ON</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> With this LCAM cell, all matching entry commands can be implemented. The matching entry commands include: </paragraph>
<paragraph id="P-0109" lvl="2"><number>&lsqb;0109&rsqb;</number> Write Associated Data for matching entry, </paragraph>
<paragraph id="P-0110" lvl="2"><number>&lsqb;0110&rsqb;</number> Read Associated data of a matching entry, </paragraph>
<paragraph id="P-0111" lvl="2"><number>&lsqb;0111&rsqb;</number> Autoupdate, Delete Matching entry. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a typical word structure for the disclosed invention. Each word consists of LCAM (logic CAM) cells, MATCH-1 buffer/latch, MATCH-2 buffer/latch, word tag cell, and Associated Data (AD) cells. The LCAM cells store word data and respective prefix pattern. Each word has a tag cell to store information to indicate whether it is a valid entry or not. When the device is reset, all words (entries) become invalid. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> For each word, there are associated data cells. The associated data cells are used to store the position of the word or the next hop port id or parameters. The device outputs associated data on results bus pins if a match is found for external search key data. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> All LCAM cells in a word share MATCH-1, MATCH-1L, and MATCH-2 signals. These signals run parallel to the wordline. Each word has a dedicated set of match signals MATCH-1, MATCH-1 L, and MATCH-2. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The bitlines BL/NBL, compare lines C/NC, prefix line P, and longest prefix line NLP run vertical and are shared among all words in a word array. Each bit in LCAM word array, there is a pair of BL/NBL signals, a pair of C/NC signals, prefix line P, and longest prefix line NLP. For 32-bit LCAM word, there will be 32 pairs of BL/NBL signals, 32 pairs of C/NC signals, 32 P signals, and 32 NLP signals. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The BL/NBL signals are used for word read and write operations. The C/NC signals carry external search key data for the MATCH-1 comparison. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> The P signals are used for prefix reading in the word array for entries matching external search key. For entry(word) matching the external search key data, MATCH-1L is asserted. The prefix is read from entries which have MATCH-1L asserted. If multiple words match external search key, the merging of the prefix happens on the P lines during the prefix read. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> The NLP signals carry inverted device longest prefix pattern for comparison with mask pattern of entries matching the external search key. The MATCH-2 buffer/latch output is used to access the word&apos;s associated data. This enables reading of associated data of an entry(word) matching the external search key and which also has longest prefix pattern. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows sample array architecture of the present invention. There are two word arrays in the array. Each word array has 32 words. Each word array has dedicated prefix latches, comparator for word array longest prefix match(WALPM) and device LPM, write drivers for compare signals (C/NC), write path for NLP signals, sense amplifiers for LCAM cells read, and match flag latch. The associated data has dedicated write drivers for writing and sense amplifiers for reading. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The comparison between WALPM and DLPM is enabled by the respective word array MF signal. If MF&equals;0, the mismatch between WALPM and DLPM is forced. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> proposes a typical circuit for a word array prefix buffer/latch in accordance with the present invention. The inverters <highlight><bold>150</bold></highlight> and <highlight><bold>151</bold></highlight> form a latch. The PMOS device P<highlight><bold>50</bold></highlight> is used to precharge word array prefix signal PA. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The latch (<highlight><bold>150</bold></highlight> and <highlight><bold>151</bold></highlight>) can be reset through NMOS transistor N<highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> The PMOS transistors P<highlight><bold>51</bold></highlight> and P<highlight><bold>52</bold></highlight> are used to sample the PA signal level into word array prefix latch (<highlight><bold>150</bold></highlight> and <highlight><bold>151</bold></highlight>). The PA signal sampling is done after the mask prefix for matched entries is read/merged. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> The NMOS transistor N<highlight><bold>51</bold></highlight> is used to merge word array prefixes to generate the device longest prefix match. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> The PB signal is shared among all word arrays in one or multiple word arrays. The PB signal is precharged to logic &lsquo;1&rsquo; level after the latch (<highlight><bold>150</bold></highlight> and <highlight><bold>151</bold></highlight>) is reset and before NCLK is asserted. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> The word array prefix latch is reset prior to asserting the NCLK signal to sample the PA state. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> The signals NPC and NCLK are active low signals, and is an active high signal. All signals NPC, NCLK and RST are timed signals. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows the proposed circuit for MATCH-1 buffer/latch function in accordance with the invention. The inverters I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight> form a master latch, and I<highlight><bold>62</bold></highlight> and I<highlight><bold>63</bold></highlight> form a slave latch. The PMOS devices P<highlight><bold>60</bold></highlight> and P<highlight><bold>61</bold></highlight> form a precharge path to logic level &lsquo;1&rsquo; for MATCH-1 signal. The signal ENTRY_TAG will be &lsquo;0&rsquo; for a valid entry and is equal to logic &lsquo;1&rsquo; for invalid entry. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> For an invalid entry (ENTRY_TAG&equals;1), the MATCH-1 signal remains at logic &lsquo;0&rsquo; as NMOS transistor N<highlight><bold>63</bold></highlight> is ON and PMOS transistor P<highlight><bold>60</bold></highlight> is OFF. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> The master latch (I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight>) can be reset through PMOS transistor P<highlight><bold>62</bold></highlight>. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> The transistor N<highlight><bold>64</bold></highlight> is used to transfer master latch (I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight>)data to slave latch (I<highlight><bold>62</bold></highlight> and I<highlight><bold>63</bold></highlight>). </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> The NMOS transistors N<highlight><bold>60</bold></highlight> and N<highlight><bold>61</bold></highlight> are used to sample the MATCH-1 signal level into the master latch (I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight>). </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> The NMOS transistor N<highlight><bold>62</bold></highlight> is used to read match information for the word array. The NMF signal is common to all words in a word array. The NMF signal is precharged to logic &lsquo;1&rsquo; level after the master latch (I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight>) is reset and before MCLK is asserted. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The MATCH-1 master latch is reset prior to asserting MCLK signal to sample MATCH-1 status into the master latch. The MATCH-1 slave latch clock SCLK is asserted to transfer the master latch data (I<highlight><bold>60</bold></highlight> and I<highlight><bold>61</bold></highlight>) into the slave latch (I<highlight><bold>62</bold></highlight> and I<highlight><bold>63</bold></highlight>). The output of the slave latch MATCH-2 i.e. MATCH-2_TAG is used to control MATCH-2 precharge path. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> The MATCH-1L signal is the MATCH-1 master latch output. This is routed to all LCAM bits in the word to enable the prefix (mask bits) read path for the word. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> The signals NPC and NRST are active low, and MCLK and SCLK are active high signals. All the signals NPC, NRST, MCLK and SCLK are timed signals. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows the inventive MATCH-2 buffer/latch function. The inverters I<highlight><bold>70</bold></highlight> and I<highlight><bold>71</bold></highlight> form a latch. The PMOS devices P<highlight><bold>70</bold></highlight> and P<highlight><bold>71</bold></highlight> form precharge path to logic level &lsquo;1&rsquo; for the MATCH-2 signal. The signal MATCH-2 TAG goes to logic &lsquo;1&rsquo; for an entry matching the external search key. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> For mismatched entries (MATCH-2 TAG&equals;O), the MATCH-2 signal remains at logic &lsquo;0&rsquo; as NMOS transistor N<highlight><bold>73</bold></highlight> is ON and PMOS transistor P<highlight><bold>80</bold></highlight> is OFF. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> The latch (I<highlight><bold>70</bold></highlight> and I<highlight><bold>71</bold></highlight>) can be reset through PMOS transistor P<highlight><bold>72</bold></highlight>. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> The NMOS transistors N<highlight><bold>70</bold></highlight> and N<highlight><bold>71</bold></highlight> are used to sample the MATCH-2 signal level into latch (I<highlight><bold>70</bold></highlight> and I<highlight><bold>71</bold></highlight>). The MATCH-2 sampling is done after comparison between DLPM (device longest prefix match) and the prefix of entries with MATCH-1L asserted is over. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> The NMOS transistor N<highlight><bold>72</bold></highlight> is used to read match information for the word array. The NMF signal is common to all words in a word array. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The NMF signal is precharged to a logic &lsquo;1&rsquo; level after the latch (I<highlight><bold>70</bold></highlight> and I<highlight><bold>71</bold></highlight>) is reset and before CLK is asserted. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> The MATCH-2 latch is reset prior to asserting the CLK signal to sample MATCH-2 status. ADWL signal is the latch output. The ADWL is used as a wordline for associated data cells. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> The signals NPC and NRST are active low signals, and CLK is active high signal. All the signals NPC, NRST and CLK are timed signals. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> discloses a typical prior art storage cell. The inverters I<highlight><bold>80</bold></highlight> and I<highlight><bold>81</bold></highlight> form a latch. The NMOS transistors N<highlight><bold>80</bold></highlight> and N<highlight><bold>81</bold></highlight> are access transistors. To access the bit for cell read/write, the wordline WL has to be asserted (logic &lsquo;1&rsquo;). The BL/NBL are precharged prior to WL assertion. To write into cell, data is put on BL and inverted data is put on NBL by write drivers, and the wordline is asserted. To read stored data in the cell, precharge the BL and NBL to logic &lsquo;1&rsquo; followed by an assertion of wordline. The storage cell drives BL and NBL after WL is asserted. If storage cell has D&equals;0 and ND&equals;1, the BL is discharged towards GND level and NBL remains at precharged logic &lsquo;1&rsquo; level. A sense amplifier is used to sense voltage difference between BL and NBL to determine storage cell data. The storage cell is used in ternray CAM cells, tag cells, and associated data cells. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> discloses a conventional comparison cell (XOR). There are two possible paths (N<highlight><bold>90</bold></highlight>-N<highlight><bold>91</bold></highlight> and N<highlight><bold>92</bold></highlight>-N<highlight><bold>93</bold></highlight>) for discharging MATCH signal to GND. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> The MATCH line is precharged to logic &lsquo;1&rsquo; level prior to enabling comparison. If C&equals;D&equals;0 or C&equals;D&equals;1, there is no discharge path to GND. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> If C/NC&equals;0/1 and D/ND&equals;1/0, N<highlight><bold>91</bold></highlight> is OFF and N<highlight><bold>90</bold></highlight> is OFF, N<highlight><bold>92</bold></highlight> is ON and N<highlight><bold>93</bold></highlight> is ON, the MATCH signal is discharged to GND (logic level &lsquo;0&rsquo;) through N<highlight><bold>92</bold></highlight>-N<highlight><bold>93</bold></highlight> discharge path. This corresponds to a mismatch. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> If C/NC&equals;1/0 and D/ND&equals;0/1, N<highlight><bold>91</bold></highlight> is ON and N<highlight><bold>90</bold></highlight> is ON, N<highlight><bold>92</bold></highlight> is OFF and N<highlight><bold>93</bold></highlight> is OFF, the MATCH signal is discharged to GND (logic level &lsquo;0&rsquo;) through N<highlight><bold>90</bold></highlight>-N<highlight><bold>91</bold></highlight> discharge path. This corresponds to a mismatch. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> If C/NC&equals;0/1 and D/ND&equals;0/1, N<highlight><bold>91</bold></highlight> is OFF and N<highlight><bold>90</bold></highlight> is ON, N<highlight><bold>92</bold></highlight> is OFF and N<highlight><bold>93</bold></highlight> is ON, the MATCH signal remains at logic level &lsquo;1&rsquo; as both discharge paths N<highlight><bold>90</bold></highlight>-N<highlight><bold>91</bold></highlight> and N<highlight><bold>92</bold></highlight>-N<highlight><bold>93</bold></highlight> are off. This corresponds to a match. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> If C/NC&equals;1/0 and D/ND&equals;1/0, N<highlight><bold>91</bold></highlight> is ON and N<highlight><bold>90</bold></highlight> is OFF, N<highlight><bold>92</bold></highlight> is ON and N<highlight><bold>93</bold></highlight> is OFF, the MATCH signal remains at logic level &lsquo;1&rsquo; as both discharge paths N<highlight><bold>90</bold></highlight>-N<highlight><bold>91</bold></highlight> and N<highlight><bold>92</bold></highlight>-N<highlight><bold>93</bold></highlight> are off. This corresponds to a match. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> FIGS. <highlight><bold>10</bold></highlight>(<highlight><italic>a</italic></highlight>) and (<highlight><italic>b</italic></highlight>) shows a conventional ternary CAM cell. It has two storage cells (i.e. <cross-reference target="DRAWINGS">FIG. 9</cross-reference>) (B<highlight><bold>100</bold></highlight> and B<highlight><bold>101</bold></highlight>) and one compare cell (B<highlight><bold>102</bold></highlight>). The B<highlight><bold>100</bold></highlight> is used to store data and B<highlight><bold>111</bold></highlight> to store a respective mask data. The NMOS transistor <highlight><bold>100</bold></highlight> is used to enable or disable comparison. The external search data C/NC is compared with stored data D/ND. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> When mask data P/NP&equals;1/0, N<highlight><bold>100</bold></highlight> is OFF, the comparison is disabled for this bit. In other words, this TCAM data bit in the word doesn&apos;t participate in comparison. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> When mask data P/NP&equals;0/1, N<highlight><bold>100</bold></highlight> is ON, the comparison is enabled for this bit. In other words, this TCAM data bit in the word participates in comparison. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> The following non-limitative examples will illustrate how the LCAM&apos;s of the present invention works. </paragraph>
<paragraph id="P-0156" lvl="2"><number>&lsqb;0156&rsqb;</number> Database: Example </paragraph>
<paragraph id="P-0157" lvl="2"><number>&lsqb;0157&rsqb;</number> Assumptions: </paragraph>
<paragraph id="P-0158" lvl="3"><number>&lsqb;0158&rsqb;</number> LCAM word width of 8 bits. </paragraph>
<paragraph id="P-0159" lvl="3"><number>&lsqb;0159&rsqb;</number> AD word width of 4 bits. </paragraph>
<paragraph id="P-0160" lvl="3"><number>&lsqb;0160&rsqb;</number> four valid entries(words) in device<highlight><bold>0</bold></highlight>, word array<highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0161" lvl="3"><number>&lsqb;0161&rsqb;</number> three valid entries(words) in device<highlight><bold>0</bold></highlight>, word array<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0162" lvl="3"><number>&lsqb;0162&rsqb;</number> No valid entries in other devices in modules.  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="21PT" align="center"/>
<colspec colname="2" colwidth="77PT" align="center"/>
<colspec colname="3" colwidth="35PT" align="center"/>
<colspec colname="4" colwidth="63PT" align="center"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="4" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>Entry</entry>
<entry>Data</entry>
<entry>Mask</entry>
<entry>AD</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="4" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Device 0: Word Array 0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="21PT" align="center"/>
<colspec colname="2" colwidth="77PT" align="center"/>
<colspec colname="3" colwidth="35PT" align="center"/>
<colspec colname="4" colwidth="63PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>1</entry>
<entry>0110 1000</entry>
<entry>0011 1111</entry>
<entry>1111</entry>
</row>
<row>
<entry></entry>
<entry>2</entry>
<entry>1110 1000</entry>
<entry>0011 1111</entry>
<entry>1110</entry>
</row>
<row>
<entry></entry>
<entry>3</entry>
<entry>0110 1000</entry>
<entry>0000 0011</entry>
<entry>0001</entry>
</row>
<row>
<entry></entry>
<entry>4</entry>
<entry>0111 1111</entry>
<entry>0001 1111</entry>
<entry>0011</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Device 0: Word Array 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="21PT" align="center"/>
<colspec colname="2" colwidth="77PT" align="center"/>
<colspec colname="3" colwidth="35PT" align="center"/>
<colspec colname="4" colwidth="63PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>5</entry>
<entry>1110 1000</entry>
<entry>0000 1111</entry>
<entry>0111</entry>
</row>
<row>
<entry></entry>
<entry>6</entry>
<entry>1111 1000</entry>
<entry>0111 1111</entry>
<entry>1011</entry>
</row>
<row>
<entry></entry>
<entry>7</entry>
<entry>0110 1000</entry>
<entry>0000 0111</entry>
<entry>1001</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="4" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0163" lvl="7"><number>&lsqb;0163&rsqb;</number> Search Algorithm: Example Illustration </paragraph>
<paragraph id="P-0164" lvl="7"><number>&lsqb;0164&rsqb;</number> &equals;&equals;&equals;</paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> External Search Key data:</paragraph>
<paragraph lvl="0"><in-line-formula>0110 1001</in-line-formula></paragraph>
<paragraph id="P-0166" lvl="7"><number>&lsqb;0166&rsqb;</number> Step 1: </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Match-1 signals are precharged to logic &lsquo;1&rsquo;s level for all valid entries in the device. In the above example, seven entries are precharged to logic &lsquo;1&rsquo; level in the device. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> The external search key data 0110 1001 is driven on C&lt;7:0&gt; signals and inverted key data 1001 0110 is driven on NC&lt;7:0&gt; signals in all word arrays on the device. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> The entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> match with external key data. The MATCH-1 signals for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> remain in precharged logic level &lsquo;1&rsquo; and MATCH-1 signals for mismatched entries discharge to logic level &lsquo;0&rsquo; (GND). </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The MATCH-1 latches are reset prior to sampling MATCH-1 level. The MATCH-1L signals for all entries on the device go to logic level &lsquo;0&rsquo; with reset. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> The MATCH-1 signal sampling is done by asserting the MCLK signal. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> After MATCH-1 sampling, the MATCH-1L signals for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> go to logic level &lsquo;1&rsquo;. </paragraph>
<paragraph id="P-0173" lvl="7"><number>&lsqb;0173&rsqb;</number> Step 2: </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> The word array prefix PA&lt;7:0&gt; are precharged to logic level &lsquo;1&rsquo; in all word arrays prior to MATCH-1 signal sampling, i.e., prior to assertion of MCLK. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> After the MATCH-1 signal sampling, the mask prefix read is enabled for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> For word array <highlight><bold>0</bold></highlight>, the PA&lt;7:0&gt; becomes 0000 0011. This word array prefix corresponds to entry <highlight><bold>3</bold></highlight>, which has longest prefix match among entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, and <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> For word array <highlight><bold>1</bold></highlight>, the PA&lt;7:0&gt; becomes 0000 0111. This word array prefix corresponds to entry <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> The word array prefix latches are reset prior to sampling of PA&lt;7:0&gt; in all word arrays. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> The PA&lt;7:0&gt; signals in both arrays are sampled into respective word array prefix latches. After the word array prefix of both word arrays WALPM&lt;7:0&gt; becomes 0000 0011 (NPAL&lt;7:0&gt;&equals;1111 1100) for word array <highlight><bold>0</bold></highlight>, and WALPM&lt;7:0&gt; becomes 0000 0111 (NAPL&lt;7:0&gt;&equals;1111 1000) for word array <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> The word array prefixes from both word arrays are merged to generate the DLPM. The DLPM&lt;7:0&gt; becomes 0000 0011 which corresponds to the prefix of word array <highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0181" lvl="7"><number>&lsqb;0181&rsqb;</number> Step 3: </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> The DLPM&lt;7:0&gt; is compared with WALPM&lt;7:0&gt; of both word arrays. The WALPM&lt;7:0&gt; of word array <highlight><bold>0</bold></highlight> matches with DLPM&lt;7:0&gt;. That means the entry with device longest prefix match is present in word array <highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> The MATCH-2 signals are precharged to logic level &lsquo;1&rsquo; for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> prior to driving NDLPM&lt;7:0&gt; onto NLP&lt;7:0&gt;. The NLP&lt;7:0&gt;&equals;0000 0000 during the MATCH-2 precharge. The MATCH-2 signals are at logic level &lsquo;0&rsquo; for entries <highlight><bold>2</bold></highlight>, <highlight><bold>5</bold></highlight>, and <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> The NDLPM&lt;7:0&gt; is driven onto NLP&lt;7:0&gt; in word array <highlight><bold>0</bold></highlight> for comparison with mask prefix pattern for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, and <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> The MATCH-2 for entry <highlight><bold>3</bold></highlight> remains at precharged logic level &lsquo;1&rsquo; as its mask prefix data 0000 0011 matches with the DLPM&lt;7:0&gt;. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> The MATCH-2 signals for entries <highlight><bold>1</bold></highlight> and <highlight><bold>4</bold></highlight> go to logic level &lsquo;0&rsquo; due to a mismatch of the mask prefix with DLPM&lt;7:0&gt;. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> The MATCH-2 signal for entry <highlight><bold>7</bold></highlight> is discharged to logic level &lsquo;0&rsquo; when SCLK is asserted in next cycle. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> The ADWL is asserted for entry <highlight><bold>3</bold></highlight> when MATCH-2 is sampled. </paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> Step 4: The AD (0001) of entry <highlight><bold>3</bold></highlight> is read and latched on the device. </paragraph>
<paragraph id="P-0190" lvl="7"><number>&lsqb;0190&rsqb;</number> Step 5: </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> The System LPM is precharged to logic level &lsquo;1&rsquo;. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> The device <highlight><bold>0</bold></highlight> outputs DLPM&lt;7:0&gt; onto SLPM&lt;7:0&gt;. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> Assumed no valid entries in other devices in module. </paragraph>
<paragraph id="P-0194" lvl="7"><number>&lsqb;0194&rsqb;</number> Step 6: </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> The SLPM&lt;7:0&gt; is sampled by all devices in the module and compared with respective DLPM&lt;7:0&gt;. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> The device <highlight><bold>0</bold></highlight> generates WIN signal as its DLPM&lt;7:0&gt; matches with SLPM&lt;7:0&gt;. </paragraph>
<paragraph id="P-0197" lvl="7"><number>&lsqb;0197&rsqb;</number> Step 7: </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> The device <highlight><bold>0</bold></highlight> outputs latched AD data 0001 onto search results pins. Matching Entry Command: Read AD of a matching entry </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> The following non-limitative example will illustrate the Search Algorithm of the present invention. </paragraph>
<paragraph id="P-0200" lvl="7"><number>&lsqb;0200&rsqb;</number> &equals;&equals;&equals;</paragraph>
<paragraph id="P-0201" lvl="7"><number>&lsqb;0201&rsqb;</number> External Search Key data : 0110 1001 </paragraph>
<paragraph id="P-0202" lvl="7"><number>&lsqb;0202&rsqb;</number> External mask prefix data: 0001 1111 </paragraph>
<paragraph id="P-0203" lvl="7"><number>&lsqb;0203&rsqb;</number> Step 1: </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> Match-1 signals are precharged to a logic &lsquo;1&rsquo; level for all valid entries in the device. In the above example, seven entries are precharged to logic &lsquo;1&rsquo; level in the device. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> The external search key data 0110 1001 is driven on C&lt;7:0&gt; signals and inverted key data 1001 0110 is driven on NC&lt;7:0&gt; signals in all word arrays on the device. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> The entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> match with external key data. The MATCH-1 signals for entries <highlight><bold>1</bold></highlight>,<highlight><bold>3</bold></highlight>,<highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> remain in precharged logic level &lsquo;1&rsquo; and NL-MACH-1 signals for mismatched entries discharge to logic level &lsquo;0&rsquo; (GND). </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> The MATCH-1 latches are reset prior to sampling MATCH-1 level. The MATCH-1 L signals for all entries on the device go to logic level &lsquo;0&rsquo; with reset. The MATCH-1 signal sampling is done by asserting MCLK signal. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> After MATCH-1 sampling, the MATCH-1L signals for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> go to logic level &lsquo;1&rsquo;. </paragraph>
<paragraph id="P-0209" lvl="7"><number>&lsqb;0209&rsqb;</number> Step 2: </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> The MATCH-2 signals are precharged to logic level &lsquo;1&rsquo; for entries <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, and <highlight><bold>7</bold></highlight> prior to driving external mask prefix onto LP/NLP lines into word arrays where match(es) were found in step 1. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> The external mask prefix 0001 1111 is driven on LP&lt;7:0&gt; signals and inverted prefix data 1110 0000 is driven onto NLP&lt;7:0&gt; into both word arrays. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> The LP&lt;7:0&gt;&equals;NLP&lt;7:0&gt;&equals;0000 0000 during MATCH-2 precharge. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> The MATCH-2 signals are at logic level &lsquo;0&rsquo; for entries <highlight><bold>2</bold></highlight>, <highlight><bold>5</bold></highlight>, and <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> The MATCH-2 for entry <highlight><bold>4</bold></highlight> remains at precharged logic level &lsquo;1&rsquo; as its mask prefix data 0001 1111 matches with external prefix data 0001 1111. </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> The MATCH-2 signals for entries <highlight><bold>1</bold></highlight>,<highlight><bold>3</bold></highlight>, and <highlight><bold>7</bold></highlight> go to logic level &lsquo;0&rsquo; due to mismatch. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> The ADWL is asserted for entry <highlight><bold>4</bold></highlight> when MATCH-2 is sampled. </paragraph>
<paragraph id="P-0217" lvl="7"><number>&lsqb;0217&rsqb;</number> Step 3: </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> The AD (0011) of entry is read and latched on the device. </paragraph>
<paragraph id="P-0219" lvl="7"><number>&lsqb;0219&rsqb;</number> Step 4: </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> The device <highlight><bold>0</bold></highlight> drives NSMF to logic level &lsquo;0&rsquo; indicating the external search key exists in it. </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> Additional modifications and improvements of the present invention may also be apparent to those of ordinary skill in the art such as using different discrete devices. Thus, the particular combination of parts described and illustrated herein is intended to represent only certain embodiments of the present invention, and is not intended to serve as limitations of alternative devices within the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An Intelligent content addressable memory (CAM) cell for CIDR co-processors for searching and comparing an external data from an external search data key with stored data, comprising: 
<claim-text>a means containing stored data; </claim-text>
<claim-text>means for enabling a mask prefix P/NP read path for a word matching the external search data key; </claim-text>
<claim-text>means for merging a mask prefix pattern of all matching entries to generate a device longest prefix match (DLPM); and </claim-text>
<claim-text>means for effecting comparison between the device longest prefix match and a word mask prefix data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said means containing stored data is a ternary CAM cell. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said means containing stored data is a logic content addressable memory cell. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said logic content addressable memory cell comprises first and second memory cells; and 
<claim-text>a first comparator coupled to said first and second memory cells, said first comparator comparing a content of said first memory cell with one bit of external search key data, said first comparator being controlled by the content of said second memory cell. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> further including a second comparator coupled to said second memory cell and a local mask bus, said second comparator comparing the content of said second memory cell with one bit of information present on the local mask bus; and 
<claim-text>a cell logic circuit coupled with said second memory cell and local mask bus, said cell logic circuit receiving a control signal for enabling said logic circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said first comparator generates an output signal indicating an existence of a match if the content of the first memory cell matches said one bit from said external search data key. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said means for enabling the mask prefix P/NP read path for a word matching the external search data key comprises one or more mask prefix read path transistors. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said means for searching an entry matching both data and mask prefix pattern comprises a pair of NMOS transistors connected to said means containing stored data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said means for effecting comparison between the device longest prefix match and the word mask prefix data comprises one or more prefix comparison transistors. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The intelligent content addressable memory cell of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further including means for searching an entry matching both data and mask prefix pattern. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. In a data base including a plurality of intelligent content addressable memory cells used for searching operations in a CIDR protocol in a network environment having routers for routing received packets of information to different destinations and router tables storing information for use in said search operations, the stored information being in the form of a plurality of arrays having a plurality of word arrays, which in turn store a plurality of words, a method for searching an entry from a second data type corresponding to a longest entry from the first data type using an external search data key, the method comprising: 
<claim-text>(1) comparing the external search key data (C/NC) with all valid entries in the entire routing table; </claim-text>
<claim-text>(2) generating a device longest prefix match (DLPM); </claim-text>
<claim-text>(3) comparing the DLPM pattern with a mask prefix pattern of all entries, which matched with external search key in step 1; </claim-text>
<claim-text>(4) accessing associated data for the entry which has an ADWL asserted in step-3; </claim-text>
<claim-text>(5) generating a system longest prefix match (SLPM) pattern; </claim-text>
<claim-text>(6) sampling the SLPM and comparing it with the DLPM pattern; and </claim-text>
<claim-text>(7) outputting the associated data read in step 4. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein subsequent to comparison in step (1), MATCH-1L signals are asserted for the entries matching external search key data. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the device longest prefix data is generated by reading the match prefix pattern for all entries matching external key data in step (1), enabling a mask prefix pattern read from MATCH-1L signals for entries which have MATCH-1L signals asserted, generating a word array longest prefix match (WALPM) and merging the match prefix pattern for all entries to generate said device longest prefix data. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the word array longest prefix match is compared with said device longest prefix match to identify the word array which has an entry with a mask pattern the same as said device longest prefix match, and said device longest prefix match is driven on NLP (invert of DLPM) lines into the word array which has an entry matching, the external search key data in step (1) and a mask pattern matching said device longest prefix match and asserting ADWL signal. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said ADWL signal is asserted for the entry which has (a) MATCH-1L asserted in step (1) and (b) has a mask prefix pattern matching with said device longest prefix match. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said system longest prefix match pattern is generated by merging said DLPM patterns from all devices on depth expansion pins. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. In a data base including a plurality of intelligent content addressable memory cells used for searching operations in a CIDR protocol in a network environment having routers for routing received packets of information to different destinations and router tables storing information for use in said search operations, the stored information being in the form of a plurality of arrays having a plurality of word arrays, which in turn store a plurality of words, a method for matching which comprises: 
<claim-text>(1) comparing the external search key data (C/NC) with all valid entries in the entire routing table; </claim-text>
<claim-text>(2) driving an external mask prefix pattern on LP/NLP lines into word arrays which have matched in step (1); </claim-text>
<claim-text>(3) comparing the external mask prefix pattern of all entries which matched with the external search key in step (1); </claim-text>
<claim-text>(4) asserting an ADWL signal for each entry which has (a) MATCH-1L asserted in step (1) and (b) has mask prefix pattern matching with said device longest prefix match; </claim-text>
<claim-text>(5) accessing a tag cell and associated data cells with said ADWL signal for deleting the matching entry, writing associated data of the matching entry or for reading associated data of the matching entry; </claim-text>
<claim-text>(6) outputting device match flag information from all devices on an open drain output pin; </claim-text>
<claim-text>(7) subjecting all devices to sample a NSMF pin to ascertain whether the entry exists in the routing table; and </claim-text>
<claim-text>(8) autoupdating to avoid duplicate entries in the routing table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein after the comparison in step (1) MATCH-1L signals are asserted for the entries matching said external search key data. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein in step (4) if the external search data key matching both data and match prefix pattern exists in the routing table the NSMF pin is asserted logic &lsquo;0&rsquo;. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein said step of autoupdating includes: 
<claim-text>(a) issuing a read NHP of a matching entry to assert that said NSMF pin gets asserted logic &lsquo;0&rsquo; if the entry matching both data and mask prefix patterns exists in the database, and (b) sampling the NSMF pin and if NSMF&equals;&lsquo;1&rsquo; then issuing a write entry to the database at a free location command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein said steps (a) and (b) are integrated into a single autoupdate command to avoid duplicate entries in the routing table. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A word structure for CIDR co-processors for use in searching operations and comparing an external data from an external search data key with a stored data comprising: 
<claim-text>one or more logic CAM (LCAM) cells; </claim-text>
<claim-text>at least a MATCH-1 buffer/latch connected to said one or more Logic CAM cells; </claim-text>
<claim-text>at least a MATCH-2 buffer/latch; </claim-text>
<claim-text>a word tag cell for each word; and </claim-text>
<claim-text>one or more associated data cells. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein each said LCAM comprises a plurality of arrays, said plurality of arrays being divided into a plurality of word arrays, each of said plurality of word arrays storing a plurality of words, said words being stored in the form of plurality of wordlines and each of said wordlines comprising of a plurality of bitlines. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said one or more Logic CAM cells, said at least a MATCH-1 buffer/latch, said at least a MATCH-2 buffer/latch, said word tag cell and said one or more associated data cells are connected in series. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said LCAM cells store word data and respective prefix patterns. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein each word tag cell stores information to indicate the presence or absence of valid entries. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein when the device is reset, all the entries become invalid. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said associated data cells store a position of the word. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein all LCAM cells in a word share MATCH-1, MATCH-1L, and MATCH-2 signals. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein said MATCH-1, MATCH-1L, and MATCH-2 signals run parallel to a wordline. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein each word has a dedicated set of match signals: MATCH-1, MATCH-1L, and MATCH-2. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein each wordline comprises a plurality of bit lines. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein for each bit in a LCAM word array, there is a pair of BL/NBL signals, a pair of C/NC signals, a prefix line P, and a longest prefix line NLP. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein said bitlines compare external search key data lines and the prefix line to generate a longest prefix line NLP which runs vertical to and is shared among all words in said word array. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference> wherein said BL/NBL signals are used for word read and write operations and said C/NC signals carry external search key data for MATCH-1 comparison. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein the P signals are used for prefix reading in the word array for entries matching external search key. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein the prefix is read from entries which have MATCH-1L asserted. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein if multiple words match the external search key, the merging of the prefix happens on P lines during a prefix read. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The word structure of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein the NLP signals carry an inverted device longest prefix pattern for comparison with a mask pattern of entries matching the external search key and the MATCH-2 buffer/latch output is used to access the word&apos;s associated data for enabling reading of associated data of an entry(word) matching the external search key and which also has longest prefix pattern. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A word array prefix buffer/latch circuit for use with intelligent CAM cells in a CIDR coprocessor, comprising: 
<claim-text>a first inverter means; </claim-text>
<claim-text>a second inverter means connected in parallel to said first inverter means to form a latch means; </claim-text>
<claim-text>a PMOS device connected to said latch means for precharging said word array prefix circuit; and </claim-text>
<claim-text>an NMOS transistor connected to said latch means for resetting said latch means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The word array prefix buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference> further including a pair of PMOS transistors connected between said PMOS device and said latch means to sample a PA signal level into said latch means. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The word array prefix buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference> wherein said NMOS transistor merges word array prefixes to generate a device longest prefix match. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A MATCH-1 buffer/latch circuit for use with intelligent CAM cells in a CIDR coprocessor, comprising: 
<claim-text>a first and second invertor connected in parallel to form a master latch; </claim-text>
<claim-text>a third and fourth invertor connected in parallel to each other to form a slave latch; and </claim-text>
<claim-text>a pair of PMOS devices connected to said master latch to form a precharge path to logic level &lsquo;1&rsquo; for MATCH-1 signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The MATCH-1 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference> further including a PMOS transistor connected to said master latch for resetting said master latch. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The MATCH-1 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference> further including means connected between said master latch and said slave latch for transferring data from said master latch to said slave latch. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The MATCH-1 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference> wherein said means for transferring data comprises a further transistor. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The MATCH-1 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference> further including a pair of transistors connected to said master latch for sampling a MATCH-1 signal level into said master latch. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A MATCH-2 buffer/latch circuit for use with intelligent CAM cells in a CIDR coprocessor, comprising: 
<claim-text>a first and second invertor connected in parallel to form a latch; and </claim-text>
<claim-text>a pair of PMOS devices connected to said latch and forming a precharge path to logic level &lsquo;1&rsquo; for a MATCH-2 signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference> further including means for resetting said latch. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 49</dependent-claim-reference> wherein said means for resetting comprises a further PMOS transistor connected to said latch. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 49</dependent-claim-reference> further including a first and second NMOS transistors connected to said latch for sampling the MATCH-2 signal level into said latch. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference> wherein said sampling is carried out after comparison between a device longest prefix match and a prefix of entries with MATCH-1L. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference> wherein a third NMOS transistor is connected to said latch for for reading match information for the word array. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference> wherein MATCH-1 latch is preset prior to asserting a CLK signal to sample the MATCH-2 status. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The MATCH-2 buffer/latch circuit of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference> wherein the latch output comprises an ADWL signal which is used as a wordline for associated data cells.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005210A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005210A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005210A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005210A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005210A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005210A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005210A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005210A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005210A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
