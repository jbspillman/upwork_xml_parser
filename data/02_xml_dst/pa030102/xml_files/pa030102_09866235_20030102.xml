<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001904A1-20030102-D00000.TIF SYSTEM "US20030001904A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00001.TIF SYSTEM "US20030001904A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00002.TIF SYSTEM "US20030001904A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00003.TIF SYSTEM "US20030001904A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00004.TIF SYSTEM "US20030001904A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00005.TIF SYSTEM "US20030001904A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00006.TIF SYSTEM "US20030001904A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00007.TIF SYSTEM "US20030001904A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00008.TIF SYSTEM "US20030001904A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00009.TIF SYSTEM "US20030001904A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001904A1-20030102-D00010.TIF SYSTEM "US20030001904A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001904</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09866235</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010525</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>848000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Multidimensional multimedia player and authoring tool</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Jon</given-name>
<middle-name>C.</middle-name>
<family-name>Rosen</family-name>
</name>
<residence>
<residence-us>
<city>Woodland Hills</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Robert</given-name>
<middle-name>E.</middle-name>
<family-name>Rosen</family-name>
</name>
<residence>
<residence-us>
<city>Agoura Hills</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Oppenheimer Wolff &amp; Donnelly LLP</name-1>
<name-2></name-2>
<address>
<address-1>Suite 3300</address-1>
<address-2>45 South Seventh Street</address-2>
<city>Minneapolis</city>
<state>MN</state>
<postalcode>55402-1609</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A tool for generating a standardized multimedia presentation is disclosed as well as a viewer for presenting such a presentation. The tool assists a developer in setting up a number of categories for the presentation, each of which has a number of subcategories. For each subcategory, content files are associated. If the content file is a video, then a module can assist the developer in associating tangential content which will be displayed to the end user at pre-set points during the playing of the video. After the presentation is built, the end user can view the presentation. It is presented to the user through a graphical user interface in the form of a three-dimensional geometric object, such as a 3-by-3 cube. The end user can choose any topic from the cubes and then choose any subtopic. The associated content (and perhaps tangential content) is then presented to the end user. The user can freely browse from among the categories and subcategories. The presentation player itself is quite flexible and extensible as it is based on a series of scripts which describe the various components of the user interface and the content files to be played for the end user. This allows a single presentation engine to be distributed at one time and then presentations can be distributed which contain their content and any new or modified functionality from the original presentation system. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates generally to multimedia presentations. Particularly, this invention relates to a method of generating a multimedia content presentation based upon pre-existing multimedia content and a set of standardized designs and allowing a person to access the presentation with a specialized graphical user interface. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In the prior art, multimedia presentations have developed to combine audio, video, computer graphics, and other content forms for improved presentation to the viewer as a multimedia experience. Such multimedia technologies have taken content from many different areas and have developed high quality, interactive, presentations. For example, using the &ldquo;Orientation Cube,&rdquo; a prior art product sold by L3i Interface Technology Ltd. (which is incorporated by reference into this application). The prior art Orientation Cube system offers one particular way of presenting the multimedia content for presentation. The approach uses a geometric representation of a cube, which is sub-divided into component cubes, much like the famous Rubik&apos;s Cube puzzle of the early 1980&apos;s. Each component cube represents a particular portion of a multimedia presentation. The viewer picks and chooses from the various component cubes to display the various pieces of multimedia content for the presentation. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In other types of multimedia presentations in the prior art, the pieces of content are joined together using HTTP hyperlinks. Such presentations can be viewed using a web browser and allow the viewer to see a page of content and then use links to move either to the next page of content or to the previous page of content. Hyperlinks can also be used to provide additional information about highlighted terms, such as definitions. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In yet other types of multimedia presentations, the content is pieced together into a &ldquo;movie&rdquo; which is presented to the viewer sequentially from start to finish. FLASH and other commercially available software products can be used to design and create such types of presentations. While FLASH and similar products can create presentations of high quality and polish, they lack the ability to allow the viewer to meander through the presentation in a personalized and standardized manner. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The prior art of multimedia presentations lacks any underlying consistency between different presentations for different subjects. In the prior art, even though the final output may be similar, the structure of each presentation may have substantial differences. There is no uniform and consistent way of taking content from any topic and methodically and efficiently developing consistent, similarly-structured, multimedia presentations. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The prior art also lacks a method of developing interactive multimedia presentations wherein a user can experience a consistent type of structure with predetermined standards in each presentation. In the prior art, substantial differences in the structure in each multimedia presentation may result in a program that is difficult to follow from presentation to presentation. Some of the available methods in the prior art require the user to proceed through the presentation sequentially, much like reading a book. Other methods present the viewer with a choreographed sequence which prevents the user from access the information as he or she desires. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> One object of the present invention is to provide a method for standardizing the transformation of pieces of content into a multimedia presentation, thus allowing for greater efficiency in creating different presentations. The method should assist the author in creating a presentation which is assembled in a hierarchical manner, allowing the user to browse the various categories and subcategories of the content. Another object of the invention is to provide a method allowing the author to easily connect various pieces of content so that supportive content is automatically presented to the viewer when the viewer chooses certain primary content. Yet another object of the invention is to provide a method that creates a presentation which is displayed to the viewer via a graphical user interface that is easy to navigate and which displays the subject matter of the presentation as a series of categories and subcategories. Such a common graphical user interface and common method of assembling a presentation for a viewer should provide greater consistency between different presentations. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> These and other objects are achieved by the present invention that includes a tool for generating a standardized multimedia presentation for a topic based upon predetermined content as well as a multimedia player for such presentations which is readily extensible and maintained. Preferably, these items are implemented as computer applications running on a computer system, and/or made available over the Internet or other network. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The authoring tool of the present invention provides a systematic method of organizing disparate content into a hierarchical collection of categories and subcategories. The differing types of content are associated to content formats which determine how the content will be presented on a display to the user. The computer system allows for the determination of how many categories to provide in the finished presentation as well as how many subcategories per category. These categories can be associated with a graphical user interface wherein the graphical representation is comprised of a series of category-identifying components and a series of subcategory-identifying components. In one preferred embodiment, the graphical user interface is in the form of a three-dimensional cube made up of a series of smaller cubes. In other embodiments, the graphical user interface is displayed to the user as another object. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The authoring tool loops through each of the categories for the presentation and assists the computer user in associating titles to the category. For each of the subcategories within each of the categories, the system and user may associate a title and/or content files to the subcategory. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Once the presentation has been created, the present invention also provides a multimedia player that operates from a script. The main &lsquo;engine&rsquo; of the player is an executable program which then parses the script to dynamically load new components needed to support the specific graphical user interface and presentation. Then a script is parsed to set up the presentation, including the naming of the category elements and subcategory elements as well as determining what content should be displayed to the user upon certain events within the user interface. Then customized graphical representation of the graphical user interface is displayed to the user on a display device and the user can freely browse from among the category and subcategory elements. Once a subcategory is selected, the associated content file is displayed or played for the viewer. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Other objects and advantages of the present invention will become more apparent to those persons having ordinary skill in the art to which the present invention pertains from the foregoing description taken in conjunction with the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram of one embodiment of the present invention describing the components of a software system for generating a standardized multimedia presentation. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flow chart of one embodiment of the present invention, which describes the process of developing a multimedia presentation. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram of one embodiment of the present invention showing the components of a content template. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4 and 5</cross-reference> are flow charts of one embodiment of a video authoring tool which can be a used to prepare content for the present invention, which describes the process of authoring multimedia content. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a diagram of one embodiment of the present invention, showing the components of a content template. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7 and 8</cross-reference> are diagrams of the present invention showing the components of a graphical interface for navigating content. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a diagram of an embodiment of the present invention, showing the components of a graphical interface for navigating a presentation created by the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram illustrating how the presentation engine relies on script data files to provide the graphical user interface to the end user.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In one embodiment of the invention, the system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> can be used by a user to develop a multimedia presentation <highlight><bold>13</bold></highlight> on a given subject. For discussion purposes, suppose the subject for the presentation is &ldquo;Martial Arts.&rdquo; The method of the present invention uses the computer system to collect pre-existing content, such as audio content <highlight><bold>4</bold></highlight>, video content <highlight><bold>3</bold></highlight>, graphics/pictures <highlight><bold>5</bold></highlight>, text <highlight><bold>1</bold></highlight>, interactive computer programs (such as applets) <highlight><bold>2</bold></highlight>, and other types of multimedia content (such as HTML content). </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Once the various pieces of content <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> are collected for input <highlight><bold>6</bold></highlight> into the content generation application <highlight><bold>14</bold></highlight>, the content pieces are standardized to meet a general format <highlight><bold>7</bold></highlight> which defines the requirements, boundaries, and the like, of the content. The general format <highlight><bold>7</bold></highlight> may include a single format specification part <highlight><bold>8</bold></highlight>, or general format <highlight><bold>7</bold></highlight> may include a number of format specifications parts <highlight><bold>8</bold></highlight>-<highlight><bold>10</bold></highlight> which can be used in assembling the presentation <highlight><bold>13</bold></highlight>. Each format specification part <highlight><bold>8</bold></highlight>-<highlight><bold>10</bold></highlight> has its own content requirements, known as the part&apos;s content form <highlight><bold>17</bold></highlight>. The content form <highlight><bold>17</bold></highlight> includes a shell <highlight><bold>51</bold></highlight>, and a kernel <highlight><bold>46</bold></highlight> (described below). </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> For standardization, certain content pieces may need to be translated or transformed by the content generation application <highlight><bold>14</bold></highlight> into new formats acceptable to the general format <highlight><bold>7</bold></highlight>. Once all content is formatted, an output module <highlight><bold>11</bold></highlight> develops the instructional presentation <highlight><bold>13</bold></highlight> based on platform information <highlight><bold>12</bold></highlight>. The resulting instructional presentation <highlight><bold>13</bold></highlight> may be a stand-alone computer program developed for a variety of hardware and software platforms <highlight><bold>16</bold></highlight>. In the alternative, the resulting instructional presentation <highlight><bold>13</bold></highlight> may be a set of HTML code which can be downloaded to the viewers over a computer network and viewed on a browser. Of course, there are other forms which the instructional presentation <highlight><bold>13</bold></highlight> can take, all within the scope of this invention. </paragraph>
<paragraph id="P-0024" lvl="7"><number>&lsqb;0024&rsqb;</number> A. The Use of Categories and Sub-Categories </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a flowchart representing one embodiment of the present invention&apos;s method, which describes the process of assisting an author to generate an instructional presentation through a content generation application <highlight><bold>14</bold></highlight>. In the embodiment, the author may define a portion of the general format <highlight><bold>7</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) by specifying the number of topics and sub-topics. The author also makes design choices regarding the content forms. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The process in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be implemented as a software program running on a variety of computer hardware and operating system platforms. For example, the hardware platform may be based upon architectures by Intel, AMD, Sun Microsystems, SGI, IBM, HP, Apple, Motorola and others. The process described in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be programmed in a variety of languages including C, C&plus;&plus;, Java, MSVC&plus;&plus;, Pascal, Smalltalk, Visual Basic, JavaScript, HTML and others. The process described in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be programmed for a variety of different operating systems such as Windows, Unix, posix compliant operating systems or MAC OS. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Generally, the software tool diagrammed in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> allows an author to create a multi-dimensional multimedia presentation which consists of a series of categories and a series of subcategories for each of those categories. Later, when the end user views the presentation, the end user can choose any subcategory. By doing so, the content associated to that subcategory will be displayed. Sometimes, additional, tangential content will also be displayed to the end user. For example, in some cases, the content for a subcategory may be a video. The video may address several points or topics. As the video plays for the end user, tangential content&mdash;perhaps audio, text, or even another video&mdash;can also be accessed by the end user to explain in further detail the various points or topics. The end user can view and browse through the tangential content and then return to the primary content (such as the video) at any time. Both forms of content (the primary as well as the tangential) are controlled by the end user through control panels. Thus, there may be a primary control panel as well as a tangential control panel. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a flowchart of the present invention&apos;s authorship tool, which assists a developer in creating the organized multimedia presentation. In the embodiment in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the author inputs number of desired categories J <highlight><bold>24</bold></highlight>. Alternatively, the number of desired categories J may be predetermined and thus not explicitly input by the author. Once the content generation application <highlight><bold>14</bold></highlight> is configured with the number of categories J within the presentation, an iterative process then begins at <highlight><bold>25</bold></highlight> where the title (or other descriptive information) for the first category (j&equals;1, where j is the current category of all categories J) is defined. In the exemplary presentation of &ldquo;Martial Arts,&rdquo; the first category may be a &ldquo;Background&rdquo; on Martial Arts. The number of desired sub-categories I for the current &ldquo;Background&rdquo; category is then specified <highlight><bold>26</bold></highlight> either by the user or by a predetermined number stored in the general format <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Another iterative process then begins at <highlight><bold>27</bold></highlight> where the title (or other descriptive information) for the first sub-category (i&equals;1, where i is the current sub-category of all sub-categories I) of the main category &ldquo;Background&rdquo; is defined. For example, for the first (j&equals;1) category of &ldquo;Background,&rdquo; the first (i&equals;1) desired subcategory might be &ldquo;History.&rdquo;</paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In step <highlight><bold>28</bold></highlight>, predetermined multimedia content is then input according to the current category and sub-category. In this exemplary embodiment, the author user defines the type of multimedia content to be associated with the current sub-category. In an alternative embodiment, the type of multimedia content to be input may be pre-specified. The content may be video <highlight><bold>3</bold></highlight>, text <highlight><bold>1</bold></highlight>, audio <highlight><bold>4</bold></highlight>, graphics <highlight><bold>5</bold></highlight>, interactive programs <highlight><bold>2</bold></highlight>, or any other type of multimedia content, or combination thereof. For example, for the subcategory &ldquo;History&rdquo; of the category &ldquo;Background&rdquo; of the presentation on &ldquo;Martial Arts,&rdquo; it may be desired to input a video of the history of martial arts with accompanying text and audio. Alternatively, the multimedia content may be in a standardized file format. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The iterative processes for all J categories and all I subcategories for each J category repeats until all multimedia content is associated with each subcategory of each category (see steps <highlight><bold>29</bold></highlight> and <highlight><bold>30</bold></highlight>). The method for inputting content and generating an output file, which structures the content to a presentation format, is described below. </paragraph>
<paragraph id="P-0032" lvl="7"><number>&lsqb;0032&rsqb;</number> B. Content Forms </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The content form(s) <highlight><bold>17</bold></highlight> of the present invention define the format of how the multimedia content will be presented to the user. In a given presentation, which may contain videos, text, audio clips, etc., there may be the need for several content forms&mdash;one for each type of content to be presented. The content generation application <highlight><bold>14</bold></highlight> creates a presentation interface integrating the multimedia content by using as input both the content forms <highlight><bold>17</bold></highlight> and the multimedia content <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Steps <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> represent the authoring phase in the content generation application <highlight><bold>14</bold></highlight> that transforms preexisting multimedia content <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> into a format compatible with the content form(s) <highlight><bold>17</bold></highlight> for each sub-category. For example, if the content to be added to the presentation is a video, then the video authoring unit <highlight><bold>22</bold></highlight> may assist the developer in associating tangential content to the video at specified times, as discussed above and below. The editing phase <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight> may also allow an author to develop a customized content form. Alternatively, the content form may be predetermined. An author may also choose from among a variety of content forms. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows the content form <highlight><bold>17</bold></highlight> from the content generation application <highlight><bold>14</bold></highlight> in more detail. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the content form <highlight><bold>17</bold></highlight> contains a content shell <highlight><bold>51</bold></highlight> and a content kernel <highlight><bold>46</bold></highlight>. The content shell <highlight><bold>51</bold></highlight> is a user interface template for structuring various multimedia content. The content kernel <highlight><bold>46</bold></highlight> is one or more data files that contains all the necessary multimedia content, in the appropriate formats, for the content shell <highlight><bold>51</bold></highlight> to use. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a one example of a content form <highlight><bold>17</bold></highlight>. Many different content forms may be used to organize multimedia content in a variety of topological structures in the content shell <highlight><bold>51</bold></highlight> and with differing file formats for the various content types in the content kernel <highlight><bold>46</bold></highlight>. For example, the content shell <highlight><bold>51</bold></highlight>&prime;, of the content form <highlight><bold>17</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> defines a video playing in a main window <highlight><bold>47</bold></highlight>. Commands <highlight><bold>45</bold></highlight> control the video, accompanying text <highlight><bold>44</bold></highlight> or other multimedia content and predetermined images in shortcut boxes <highlight><bold>41</bold></highlight>-<highlight><bold>43</bold></highlight>. The accompanying text <highlight><bold>44</bold></highlight> may be information related to information in the main window <highlight><bold>47</bold></highlight>. As the video is playing, a user may read or scroll through associated text <highlight><bold>44</bold></highlight> or other multimedia content. The predetermined images in the shortcut boxes <highlight><bold>41</bold></highlight>-<highlight><bold>43</bold></highlight> are selectable by a user and may initiate an event. For example, selecting an image may cause a &ldquo;jump&rdquo; to a particular scene in the video playing in the main window <highlight><bold>47</bold></highlight> or may activate other multimedia content in the main window <highlight><bold>47</bold></highlight>. The content shell <highlight><bold>51</bold></highlight> also includes an audio source <highlight><bold>50</bold></highlight>. The audio source is an interface to a sound source, such as a speaker. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an another example content form <highlight><bold>17</bold></highlight>&Prime; having a content shell <highlight><bold>51</bold></highlight>&Prime; and content kernel <highlight><bold>46</bold></highlight>&Prime;. This content form <highlight><bold>17</bold></highlight>&Prime; defines an instructional video playing in a main window <highlight><bold>150</bold></highlight> including video control commands <highlight><bold>152</bold></highlight>. As a video plays in the main window <highlight><bold>150</bold></highlight>, predetermined events start occurring in shortcut boxes <highlight><bold>151</bold></highlight> at predetermined times. As an example, the predetermined event may be the appearance of a predetermined image. Once an image appears in a shortcut box <highlight><bold>151</bold></highlight>, the image is selectable by a mouse click or other input method. When a shortcut box <highlight><bold>151</bold></highlight> is selected, the video or other multimedia content executing in the main window <highlight><bold>150</bold></highlight> pauses and a second, tangential presentation begins. The second presentation can begin in the main window <highlight><bold>150</bold></highlight> or anywhere else in the content shell <highlight><bold>51</bold></highlight>&Prime;. The second presentation relates to the concept depicted by the selected event in the shortcut box <highlight><bold>151</bold></highlight>. The second presentation can be of variable format, such as text, video, graphic image, interactive program, web browser, etc. In one exemplary embodiment, the second presentation becomes visible in the main window <highlight><bold>150</bold></highlight> and another control panel appears in the control command area <highlight><bold>152</bold></highlight> giving the user navigational control over the second presentation. If the second presentation is text, the user may be able to use scrolling, paging and other text control buttons. If the second presentation is a video the user may be given another set of video control buttons. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In other embodiments, the content form <highlight><bold>17</bold></highlight> may also specify interactive programs, such as games, floating step instructions, puzzles or electronic quizzes that are run in the main window <highlight><bold>47</bold></highlight>/<highlight><bold>150</bold></highlight>. The interactive programs may be written in a variety of languages, such as, but not limited to, C, C&plus;&plus;, Java, MSVC&plus;&plus;, Pascal, Smalltalk, Visual Basic, JavaScript, HTML, etc. As an example, for the &ldquo;Martial Arts&rdquo; presentation&apos;s sub-category of &ldquo;History&rdquo; (within the category of &ldquo;Background&rdquo;), the content form <highlight><bold>17</bold></highlight> may specify an interactive quiz that tests a user on the material presented. The content form <highlight><bold>17</bold></highlight> may also specify interactive text <highlight><bold>44</bold></highlight> accompanying the presentation in the main window <highlight><bold>47</bold></highlight>/<highlight><bold>150</bold></highlight>. The content form <highlight><bold>17</bold></highlight> may also specify an Internet web browser, which may contain content, related to the specific sub-category. The web browser may contain interactive text, graphics, videos, sounds, or other multimedia content suited for display in a web browser. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> One skilled in the art will recognize that the content generation application <highlight><bold>14</bold></highlight> can readily support many differing parts <highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight>, <highlight><bold>10</bold></highlight> which each include differing content forms <highlight><bold>17</bold></highlight>. The different parts <highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight>, <highlight><bold>10</bold></highlight> allow the author of a presentation <highlight><bold>13</bold></highlight> to merge many types of content into a presentation <highlight><bold>13</bold></highlight>. As new multimedia capabilities develop in the industry, new parts and content forms <highlight><bold>17</bold></highlight> can be configured to handle them. For example, there are currently companies, such as DigiScents, Inc. that are developing a new computer peripheral which will allow computer developers to transmit scents to the computer user. It is within the scope of the present invention that should such scent technology be marketed, a content form <highlight><bold>17</bold></highlight> could handle the integration of various scents into a presentation <highlight><bold>13</bold></highlight>. For example, a presentation <highlight><bold>13</bold></highlight> on American Flora could include the ability to have the user experience the aroma emitted by each flower. </paragraph>
<paragraph id="P-0040" lvl="7"><number>&lsqb;0040&rsqb;</number> C. File Formats </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> During multimedia authoring <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight>, the components of the content shell <highlight><bold>51</bold></highlight> are defined and saved in one or more data files by the content kernel <highlight><bold>46</bold></highlight>. These data files may include video or text or graphics data file(s), or interactive programs or web content <highlight><bold>49</bold></highlight> or audio data file(s) <highlight><bold>48</bold></highlight>, for example. The multimedia content <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> integrated with the content form <highlight><bold>17</bold></highlight> in the present invention must be in a compatible format with the content form <highlight><bold>17</bold></highlight>. For example, a video file <highlight><bold>49</bold></highlight> in the content kernel <highlight><bold>46</bold></highlight>, which is to be displayed in the main window <highlight><bold>47</bold></highlight>/<highlight><bold>150</bold></highlight> of the content shell, may have a certain format requirement, such as AVI, MPEG or QuickTime or Windows Media or any other video playback technology known to one ordinarily skilled in the art. Typically, an individual MPEG or AVI or QuickTime or Windows Media file contains a file header and control information containing video or audio data to define the contents of the video file. The content form <highlight><bold>17</bold></highlight> may also specify the various attributes of a given file, such as video resolutions or compression formats or audio formats or quality. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Format requirements and file attributes may also apply to text files, graphics files, audio files, and other multimedia files, to be used with the content shell <highlight><bold>51</bold></highlight>, such as, but not limited to, HTML document files, TXT document files, DOC document files, PDF document files, WPD document files, JPEG/JPG image files, TIFF image files, GIF image files, BMP image files, WAV audio files, MP3 audio files, REAL audio files, or any other document, image, or audio format known to one skilled in the art. It is to be understood that the video, audio, text, and graphics formats employed may be customized formats utilizing well-appreciated formatting algorithms or encoding and decoding techniques. The content form <highlight><bold>17</bold></highlight> may also specify the various attributes of a given file, such as size or resolution or compression, or quality or any attribute that applies to video, audio, and graphics files. </paragraph>
<paragraph id="P-0043" lvl="7"><number>&lsqb;0043&rsqb;</number> D. Format Conversion </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> If the pre-existing multimedia content <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> is not already in the format specified by the content form <highlight><bold>17</bold></highlight>, the content generation application <highlight><bold>14</bold></highlight> of the present invention transforms the content into the appropriate format or into a file with the appropriate file attributes. Format conversion may involve converting one file format into a different file format or changing file attributes such as size, resolution, quality, or compression. Format conversion may involve video format files, audio format files, image format files, or document format files. Pre-existing software for file format conversions, well known to one skilled in the art, may be utilized by the content generation application <highlight><bold>14</bold></highlight> for the format conversion process. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> As a specific example, it may be desired to use a video presentation of the history of martial arts which is stored in a file format different from the one used by the content form <highlight><bold>17</bold></highlight>, and with a different resolution specified by the content form <highlight><bold>17</bold></highlight>. For proper integration with the content form <highlight><bold>17</bold></highlight>, the video presentation is converted to the appropriate format. File formats such as MPEG, AVI, and QuickTime may include control information wrapped around video and audio data. Thus file conversion would involve, at a rudimentary level, stripping one kind of format header, and then pasting back the same information with a different format header. Intel has released a free utility called &ldquo;SmartVid&rdquo; for Windows to convert between AVI and QuickTime format by changing the file header information. SmartVid converts video files regardless of the codes used to compress them. Another video conversion program, &ldquo;TRMOOV,&rdquo; has been made available by the San Francisco Canyon Company and can be downloaded from various sites on the World Wide Web. There are many well-appreciated ways to convert file formats and file attributes from video files, image files, document files, and or audio files, either by using pre-existing programs, or algorithms well known to one ordinarily skilled in the art. In an alternative embodiment, a propriety file format conversion program may be used, utilizing various conversion algorithms. </paragraph>
<paragraph id="P-0046" lvl="7"><number>&lsqb;0046&rsqb;</number> E. Filling in the Content Shell: Video and Image Editing </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The content form <highlight><bold>17</bold></highlight> represented by <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is just one exemplary way of structuring the multimedia content for presentation to a viewer. The content shell <highlight><bold>51</bold></highlight>&Prime; defines a main window <highlight><bold>47</bold></highlight>, and n-number of shortcut boxes <highlight><bold>41</bold></highlight>, <highlight><bold>42</bold></highlight>, <highlight><bold>43</bold></highlight>, which &ldquo;jump&rdquo; to particular playback points in the video <highlight><bold>49</bold></highlight>&prime; stored in the content kernel <highlight><bold>46</bold></highlight>&prime;. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows, by way of example, three shortcut boxes <highlight><bold>41</bold></highlight>-<highlight><bold>43</bold></highlight>. It is important to note that the video playback during content editing is different from that of the video playback in the content shell as seen by a viewer during the presentation. It is to be understood that there may be any number of shortcut boxes, and they may be structured in various graphical ways in the content shell <highlight><bold>51</bold></highlight>&prime;. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an exemplary method for multimedia content editing <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight> of the content shell in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> where the shortcut boxes in the content shell <highlight><bold>51</bold></highlight> link predetermined multimedia images or text to playback points of the video. In the present embodiment, the author of a new presentation first inputs a pre-existing video <highlight><bold>60</bold></highlight> into the content generation application <highlight><bold>14</bold></highlight> during content editing <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight>. If the video is consistent with the content form <highlight><bold>17</bold></highlight>, the video begins to play (<highlight><bold>61</bold></highlight> and <highlight><bold>63</bold></highlight>). If however, the video is inconsistent with the content form <highlight><bold>17</bold></highlight>, a conversion of formats <highlight><bold>62</bold></highlight> precedes the video playback <highlight><bold>63</bold></highlight>. The author may, at any time, use video controls <highlight><bold>73</bold></highlight> to control the video, such as with controls to fast forward, reverse, pause, stop, play, or play in slow motion. In <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the controls are graphically shown with their common symbols. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> At any desired point in the video, the author may choose and extract a playback point P<highlight><bold>0</bold></highlight> from the video <highlight><bold>64</bold></highlight>. The playback of the video during content authoring is then paused <highlight><bold>65</bold></highlight> and a shortcut box in the content shell <highlight><bold>51</bold></highlight>&prime; is associated with the playback point P<highlight><bold>0</bold></highlight>. A still image of the video at the playback point is captured <highlight><bold>66</bold></highlight> and the shortcut box in the content shell <highlight><bold>51</bold></highlight>&prime; is filled with the captured image <highlight><bold>67</bold></highlight>. The author may also associate text or a clipped video segment with the added shortcut box. A specific event is then chosen <highlight><bold>68</bold></highlight> for activation of the shortcut box. For example, a shortcut box may be activated during execution if a user clicks on it with a mouse or uses some other input method. In the exemplary embodiment illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the event path for activation of the shortcut box is linked to playing the video in the main window at the playback point P<highlight><bold>0</bold></highlight>. If the author is finished with adding shortcut boxes, the video editing ends <highlight><bold>70</bold></highlight>. Otherwise, the playback resumes <highlight><bold>71</bold></highlight> and <highlight><bold>72</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates another version of multimedia content editing. In <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the flowchart represents multimedia content editing <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight> of a content shell where the shortcut boxes in the content shell link predetermined multimedia images or text to predetermined multimedia content. In the present embodiment, a pre-existing video is first input <highlight><bold>100</bold></highlight> into the content generation application <highlight><bold>14</bold></highlight> during content editing <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight>. If the video is consistent <highlight><bold>101</bold></highlight> with the content form <highlight><bold>17</bold></highlight>, the video begins to play <highlight><bold>103</bold></highlight>. If however, the video is inconsistent with the content form, a conversion of formats <highlight><bold>102</bold></highlight> precedes the video playback <highlight><bold>103</bold></highlight>. As previously explained, the author may, at any time, use video controls <highlight><bold>113</bold></highlight> to fast forward, reverse, pause, stop, play, or play in slow motion the video. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> At any desired point in the video, the author may extract a playback point P<highlight><bold>1</bold></highlight> from the video <highlight><bold>104</bold></highlight>. The playback of the video during content authoring is then paused <highlight><bold>105</bold></highlight> and a shortcut box in the content shell is linked <highlight><bold>106</bold></highlight> to the playback point P<highlight><bold>1</bold></highlight>. In other words, linking a shortcut box to the playback point P<highlight><bold>1</bold></highlight> in the this embodiment means that during video playback in the content shell, an event will occur in the shortcut box whenever the video reaches the playback point P<highlight><bold>1</bold></highlight>. A specific event is then chosen <highlight><bold>114</bold></highlight> for the shortcut box. The author may choose from a variety of event paths that will execute at the point P<highlight><bold>1</bold></highlight> during video playback in the content shell. Exemplary event paths may include, but are not limited to, the appearance of the still image of the video <highlight><bold>119</bold></highlight> taken at P<highlight><bold>1</bold></highlight>, the appearance of a predetermined image <highlight><bold>118</bold></highlight>, an interactive text box <highlight><bold>117</bold></highlight>, another video <highlight><bold>116</bold></highlight>, or an audio program <highlight><bold>115</bold></highlight> standing alone or in combination with any other event path or a web browser. For example, as illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, if the event path chosen is the still image of the video <highlight><bold>119</bold></highlight>, then during playback of the video, the still shot of the video taken at playback point P<highlight><bold>1</bold></highlight> during content authoring will appear in the shortcut box at point P<highlight><bold>1</bold></highlight> during playback in the content shell. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The activation of the shortcut box may then be linked with another event <highlight><bold>120</bold></highlight>, such as a predetermined video <highlight><bold>121</bold></highlight>. In such a situation, while viewing the presentation, if the viewer activates the shortcut box <highlight><bold>151</bold></highlight> by clicking on it, or by some other input method, the predetermined video <highlight><bold>121</bold></highlight> begins to play in the content shell. The predetermined video <highlight><bold>121</bold></highlight> may play in the shortcut box <highlight><bold>151</bold></highlight>, or in the main window portion of the content shell <highlight><bold>150</bold></highlight>, or anywhere else in the content shell <highlight><bold>51</bold></highlight>&Prime;. A user may link the activation of the shortcut box <highlight><bold>120</bold></highlight> with a variety of events, such as, but not limited to, activating an interactive program <highlight><bold>125</bold></highlight>, a web browser <highlight><bold>122</bold></highlight> which may be embedded in the content shell, an interactive text box <highlight><bold>123</bold></highlight>, or an audio program <highlight><bold>124</bold></highlight> alone or in conjunction with one of the other event paths. Once the author is finished creating shortcuts <highlight><bold>126</bold></highlight>, the video editing ends <highlight><bold>127</bold></highlight>. Otherwise, the playback resumes <highlight><bold>111</bold></highlight>, <highlight><bold>113</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="7"><number>&lsqb;0053&rsqb;</number> F. Output Form and the Finished Presentation </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Returning attention to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, once all of the content editing <highlight><bold>20</bold></highlight>-<highlight><bold>23</bold></highlight> is complete 30 for every subcategory i of each category j, each subcategory of each category will have a content form <highlight><bold>17</bold></highlight> filled. At this point (<highlight><bold>31</bold></highlight> and <highlight><bold>32</bold></highlight>), an output form is generated <highlight><bold>11</bold></highlight> which takes all of the collective content information in the general format <highlight><bold>7</bold></highlight> and generates a user interface to navigate the content for the appropriate platform. When executed, the output form <highlight><bold>11</bold></highlight> is a graphical and/or audio user interface for depicting all of the information in the general format <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The user interface for the resulting presentation <highlight><bold>13</bold></highlight> can take any desired form. One such form is shown in <cross-reference target="DRAWINGS">FIGS. 7 through 9</cross-reference>. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> represents an exemplary output form that graphically depicts, in the form of a 3-by-3 cube <highlight><bold>163</bold></highlight> comprised of 27 component cubes. The cube <highlight><bold>163</bold></highlight> shows to the viewer all of the presentation&apos;s categories (J&equals;1 through 9) on its face. In this exemplary embodiment, the cube <highlight><bold>163</bold></highlight> is a two dimensional projection of a three dimensional cube. Of course, in other embodiments, the cube could be more realistically rendered as a three-dimensional object having the proper shading, etc. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The cube <highlight><bold>163</bold></highlight> is a modular geometric object which has J*I components. For example, if the general format <highlight><bold>7</bold></highlight> specifies nine categories (J&equals;9) and three subcategories for each category (I&equals;3), the content generation application will generate an output form with a geometrical entity <highlight><bold>163</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, having a face for 9 categories and comprised of J*I (i.e., 27) component cubes for the 27 total subcategories. Using the example of a presentation for Martial Arts, the viewer of the presentation is presented with the cube of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The component cube&apos;s top-left row of three subcubes <highlight><bold>167</bold></highlight> represent the first category of the presentation, i.e., &ldquo;Background on Martial Arts.&rdquo; Of these three subcubes, the front-most cube represents the first subcategory (i.e, J&equals;1 and i&equals;1) of &ldquo;History.&rdquo; The next cube back (i.e., J&equals;1 and i&equals;2) represents the second subcategory. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Of course, it is not necessary to the invention that the geometrical entity <highlight><bold>163</bold></highlight> be a cube. The geometrical entity <highlight><bold>163</bold></highlight> may be any graphical representation of the categories and subcategories in the general format <highlight><bold>7</bold></highlight>. For example, a pyramid, a sphere could also be used. It is even within the scope of the present invention to substitute for the geometrical entity <highlight><bold>163</bold></highlight> some other item which can be divided into categories and subdivided into subcategories. For example, a map, a keyboard or a group or cans or boxes on a shelf could be used as a representation. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> An input device, such as a mouse, may be used to navigate the output form <highlight><bold>11</bold></highlight> when executed by the viewer. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a mouse pointer <highlight><bold>170</bold></highlight> that may be moved around the output form <highlight><bold>160</bold></highlight>&prime;. When the mouse pointer <highlight><bold>170</bold></highlight> runs over any of the nine main categories (each represented as a subsection of the cube), all of the subcategory components for that category in the geometric representation are highlighted or otherwise displayed. For example, if the mouse pointer <highlight><bold>170</bold></highlight> runs over any cube where main category J&equals;1, all of the subcategory cubes for J&equals;1 (i.e., J&equals;1, i&equals;1; J&equals;1 i&equals;2; and J&equals;1, i&equals;3) will be highlighted. In an alternative embodiment, the graphical representation <highlight><bold>163</bold></highlight> may be transparent, so all the subcategories (i&equals;1, 2, and 3 for J&equals;5, 6, 8 and 9) may be seen. The output form may also contain a display box <highlight><bold>164</bold></highlight>&prime; that will display information related to the currently highlighted category. So, for example, if the first category J&equals;1 is &ldquo;history&rdquo; of martial arts, the display box may display an image or text field related to or simply indicating &ldquo;history&rdquo; of martial arts. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> When a user employs an input method, such as the act of clicking a mouse, when the mouse pointer is over a particular category block <highlight><bold>167</bold></highlight>&prime;, the category is activated, and the output form will display the subcategories for the current category, as illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. Each subcategory can then be activated individually by an input method, and the content form <highlight><bold>17</bold></highlight> for that subcategory will begin to play. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> During execution of the presentation, a miniature navigation model of the graphical representation of the content <highlight><bold>163</bold></highlight> may be displayed at all times, whether on the various content forms shells or in the output form. In this way, a viewer can select a particular set of subcategories <highlight><bold>203</bold></highlight>-<highlight><bold>205</bold></highlight> (as in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>) and the navigational miniature version of the cube indicates to the viewer which section of the cube is being displayed. This becomes increasingly helpful for cubes of larger sizes. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The construction of the geometrical representation of the instructional <highlight><bold>7</bold></highlight> format may be done in real time three-dimensional graphics or two-dimensional representations of three-dimensional graphics. Real time three-dimensional rendering allows a user to navigate the geometrical representation <highlight><bold>163</bold></highlight> in three dimensions. The object <highlight><bold>163</bold></highlight> may be rotated, translated, or scaled so a user may view it from any angle or perspective. Software methods to develop three-dimensional representations are well appreciated by one ordinarily skilled in the art. Various three dimensional graphics libraries may be used, such as (but not limited to) Direct3D, OpenGL, DirectX, and other 3D libraries and application programming interfaces. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The construction of the geometrical representation of the instructional <highlight><bold>7</bold></highlight> format may also be done as a two dimensional representation of three-dimensional graphics. Software methods to develop two-dimensional representations of three-dimensional graphics are well appreciated by one ordinarily skilled in the art. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> A user may make a selection between different types of output forms, such as the cubic representation illustrated in <cross-reference target="DRAWINGS">FIGS. 7, 8</cross-reference> and <highlight><bold>9</bold></highlight>. There may be the option of selecting a pyramid or sphere or any other object. Once an output form is selected, and any necessary information input to activate the display box <highlight><bold>164</bold></highlight>, the user selects which platform it is desired to run the multimedia presentation on. Platform information is stored in a software directory <highlight><bold>12</bold></highlight>, which the content generation application <highlight><bold>14</bold></highlight> uses when generating the final instructional presentation <highlight><bold>13</bold></highlight>. For example, the platform information may contain all of the necessary software code to generate an executable file in various operating system environments and software platforms such as, but not limited to, the Windows environment, Unix and Unix derivative operating systems, posix compliant operating systems, or MAC operating systems. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The content generation application <highlight><bold>14</bold></highlight> ultimately uses all of the multimedia content, structured in the output form and the content forms, and the platform software information, and generates the instructional presentation <highlight><bold>13</bold></highlight>. The presentation may be in the form of an executable program. Alternatively, the presentation may be in the form of a web browser readable format, such as in JavaScript. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> During execution of the presentation, various sound schemes may be employed which play sound files to enhance the transitions between various states of the instructional presentation and may indicate when a command is given such as to play the video or pause it. For example, if a user clicks on a control command during playback of a video, or clicks on a shortcut box to activate a video, various sound effects, including voice, may be used to enhance the presentation. Furthermore, transition animations may be employed between output form shells and content form shells and between different layers of the output form shells. For example, when a user clicks on the J&equals;1 category in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the bar of information may be animated to slide out of the entire graphical representation. If the graphical representation is a three dimensional interactive model, the animation sequences may be rendered in real time. Animation techniques, both static and dynamic, are well appreciated in the art. </paragraph>
<paragraph id="P-0066" lvl="7"><number>&lsqb;0066&rsqb;</number> G. A Script-Based Implementation of the User Interface </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1 through 6</cross-reference> and the previous discussion have shown how to build a user interface which is presented to the user as a three-dimensional geometric shape (shown in <cross-reference target="DRAWINGS">FIGS. 7 through 9</cross-reference>) that is subdivided into smaller components so that the geometric shape can be seen as a series of categories each having a series of subcategories. A method has been disclosed which directs the developer of such a user interface through each of the categories and then through each of the subcategories of the categories. During this traversal, the developer associates titles, images, video, and other content to each of the subcategories and categories. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Now, a system will be described which implements the user interface in an object oriented, easily extensible manner using an open system that plays from a series of scripts. The scripts are human readable and writable and instruct the user interface program how to operate for a given presentation. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As previously addressed, the user interface is a geometric shape presented in three dimensions and subdivided. <cross-reference target="DRAWINGS">FIGS. 7 and 8</cross-reference> show the user interface as a three-by-three cube composed of <highlight><bold>27</bold></highlight> sub-elements. For easy of discussion, such a &ldquo;Learning Cube&rdquo; (as it is sometimes known) will be described. Of course the invention works well for larger and smaller cubes as well as other shapes (perhaps even non geometric) which can be subdivided. Returning to the 3-by-3 Learning Cube, each &ldquo;phase&rdquo; of the Learning Cube is considered to be a &ldquo;stage&rdquo;. That is to say that the full cube view, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, is considered a &ldquo;stage&rdquo;. The removed row, as shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, is considered another &ldquo;stage.&rdquo; The video player/explorer, shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and which may be associated as content for one of the <highlight><bold>27</bold></highlight> blocks of the Learning Cube is also considered a &ldquo;stage&rdquo;. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> At startup time, the Learning Cube reads a data script (such as a human readable ASCII file) which includes a list of all of the possible stages. In one embodiment, this data script is saved as STAGES.DAT. The file STAGES.DAT contains the names of all of the stages used by the cube and corresponding data files that tell how those stages will each operate. For example, in one embodiment, the STAGES.DAT script file can be in the form:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>// START OF FILE</entry>
</row>
<row>
<entry>&lsqb;stage:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>name:cube:</entry>
</row>
<row>
<entry></entry>
<entry>file:cube.dat:</entry>
</row>
<row>
<entry></entry>
<entry>description: the full view of the cube:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&rsqb;</entry>
</row>
<row>
<entry>&lsqb;stage:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>name:row:</entry>
</row>
<row>
<entry></entry>
<entry>file:row.dat:</entry>
</row>
<row>
<entry></entry>
<entry>description: the removed row:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&rsqb;</entry>
</row>
<row>
<entry>&lsqb;stage:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>name:videx:</entry>
</row>
<row>
<entry></entry>
<entry>file:videx.dat:</entry>
</row>
<row>
<entry></entry>
<entry>description: the videx stage:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&rsqb;</entry>
</row>
<row>
<entry>// END OF FILE</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In the above example, the STAGES.DAT presentation script contains a description of three stages. The first stage is of name &ldquo;cube&rdquo; and is associated with the entire cube as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The &ldquo;cube&rdquo; stage has its data and operation instructions in the CUBE.DAT file. The second stage is of name &ldquo;row&rdquo; and its data and instructions are contained in the file ROW.DAT. The third stage is of name &ldquo;videx&rdquo; and its data and instructions are contained in the VIDEX.DAT file. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In a preferred embodiment, the STAGES.DAT presentation script can be embodied using XML. In such an embodiment, such a script can be: </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> &lt;stage name&equals;&ldquo;Main Cube&rdquo; code_path&equals;&ldquo;www.l3i.com/quizgame.ocx&rdquo;/&gt;</paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> &lt;stage name&equals;&ldquo;IVX Player&rdquo; code_path&equals;&ldquo;www.l<highlight><subscript>3</subscript></highlight><highlight><italic>i.com/ivxplayer.ocx&rdquo;/&gt;</italic></highlight></paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> &lt;stage name&equals;&ldquo;Text Viewer&rdquo; code_path&equals;&ldquo;www.l3i.com/text_viewer.ocx&rdquo;/&gt;</paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The script from above is a set of stage tags which include object attributes, such as &ldquo;name&rdquo; and &ldquo;code path.&rdquo; A STAGES.DAT script can also include child data objects. For example, the following format includes details on how each stage handles a mouse event and which graphics to display:  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;stage name&equals;&ldquo;Quiz Game&rdquo; code_path&equals;&ldquo;www.l3i.com/quizgame.ocx&rdquo;&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;picture filename&equals;&ldquo;smallcube.bmp&rdquo; x&equals;&ldquo;5&rdquo; y&equals;&ldquo;5&rdquo; width&equals;&ldquo;20&rdquo; height&equals;&ldquo;40&rdquo; /&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/stage&gt;</entry>
</row>
<row>
<entry>&lt;stage name&equals;&ldquo;IVX Player&rdquo; code_path&equals;&ldquo;www.l3i.com/ivxplayer.ocx&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;picture filename&equals;&ldquo;smallcube.bmp&rdquo; x&equals;&ldquo;5&rdquo; y&equals;&ldquo;5&rdquo; width&equals;&ldquo;20&rdquo; height&equals;&ldquo;40&rdquo; /&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/stage&gt;</entry>
</row>
<row>
<entry>&lt;stage name&equals;&ldquo;Text Viewer&rdquo; code_path&equals;&ldquo;www.l3i.com/text_viewer.ocx&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;picture filename&equals;&ldquo;smallcube.bmp&rdquo; x&equals;&ldquo;5&rdquo; y&equals;&ldquo;5&rdquo; width&equals;&ldquo;20&rdquo; height&equals;&ldquo;40&rdquo; /&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/stage&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In another form, the presentation script can combine all of the details about the cube&mdash;the stages, the regions, etc.&mdash;into a single file. For example,  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;cube name&ldquo;All About The Martial Arts&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;region name&equals;&ldquo;small_cube&rdquo; points&equals;&ldquo;0, 0,50,0,50,50,0,50&rdquo; /&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;stage name&equals;&ldquo;stage1&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/stage&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;stage name&equals;&ldquo;stage2&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/stage&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;stage name&equals;&ldquo;stage3&rdquo; &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;mouse_event region&equals;&ldquo;small_cube&rdquo; command&equals;&ldquo;RETURN_TO_CUBE&rdquo; /&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/stage&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/cube&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In the above script, since there are no code_path attributes on the stages, these stages can be played by the basic cube engine. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> One skilled in the art will readily see that by referencing a different data file for each stage, the system can be easily modified, extended, and maintained. New stages or different combination of stages can readily be supported since all that is required is that the stage names be added to the STAGES.DAT along with a reference to a file describing it operations. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> As just explained, the STAGES.DAT script informs the main unit of the presentation player what stages are used in the presentation and where the instructions and data for those stages resides. For example, for the &ldquo;cube&rdquo; stage, this information is found in the CUBE.DAT file (again in ASCII). Such an instruction script could be:  
<table-cwu id="TABLE-US-00004">
<number>4</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>// START OF FILE</entry>
</row>
<row>
<entry>&lsqb;pict:bg01.bmp&rsqb;</entry>
</row>
<row>
<entry>&lsqb;pict:cube.bmp&rsqb;</entry>
</row>
<row>
<entry>&lsqb;click_event:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>region:row1:</entry>
</row>
<row>
<entry></entry>
<entry>command:goto_stage:</entry>
</row>
<row>
<entry></entry>
<entry>command parm:stage_row&rsqb;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>// END OF FILE</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The data file above first lists the pictures that the user interface program will display for the cube stage. These pictures are loaded by the engine program (also known as the presentation control unit) and displayed automatically when the cube stage starts. The data file then contains a click event. The click event names a region of the screen &ldquo;row<highlight><bold>1</bold></highlight>&rdquo; and a command that the cube will perform when a mouse click is performed on that region. Such a data file can also configure the system to play special sounds when the mouse moves over an area on the screen. In general, it instructs the system how to manage the graphical user interface. Using this methodology, the cube gains more and more flexibility as the behavior of the Learning Cube is can be modified or enhanced by adding new or different functionality references in the various stage data script files. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> In addition to the stages and the stage data, there are other data script files used by the Learning Cube&apos;s user interface program that contain basic cube resource data. For example, in one embodiment, there are three additional data scripts used by the presentation program: PICTURES.DAT, REGIONS.DAT and SOUNDS.DAT. In one embodiment, the PICTURES.DAT data file contains a list of pictures used by the cube, their file names and parameters. Parameters for the pictures which are found in this file include transparency flags, dimensions, and so on. The data file REGIONS.DAT contains a list of regions used by the cube. The regions are areas of the screen or hotspots that are named. For example, a developer can list a region of the screen in the upper right corner of the display and call it &ldquo;UR_Place&rdquo;. Based on this definition, other data files can reference the UR_Place region. The data file SOUNDS.DAT contains a list of sounds used by the cube. The sounds are segments of audio files that are named. The segments are determined by a &ldquo;from&rdquo; time and a &ldquo;to&rdquo; time. For example, if there is an audio file that contains the word &ldquo;Hello,&rdquo; the developer can create a sound listing in this data file called &ldquo;snd_hello&rdquo; which states is associated with perhaps the millisecond offset of 20000 and ends at 22000. Once defined, a sound can be referenced elsewhere by its name, such as &ldquo;snd_hello.&rdquo;</paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> As previously discussed, the main user interface program parses the various data scripts and runs accordingly. Due to the open, object oriented framework of the present invention, this &lsquo;cube engine&rsquo; only needs to be compiled one time and can then be distributed to users on the web or other network. The cube engine does not contain any stages. Rather, it can dynamically import and run stages. Thus, to add a stage to a cube, the code to present the stage can be created in isolation and it can dynamically attach to the existing cube code without the previous cube code being recompiled. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In practical terms, when the cube engine is invoked, it is given the name of a data file containing a list of the modular stages which it will be using. In the previous example, this data file was named STAGES.DAT. The data file contains a list of the stage names, descriptions of the stages (such as what images are used in the stages and what content type or template to use), and paths to the compiled stage module code (if that compiled code is not already supported by the cube engine). The cube then dynamically loads this compiled stage code and instructs the stage code to register itself. Such registration is accomplished by the stage code passing an interface to the cube, which is a block of data which contains pointers to functions within a stage module. Once the stages are loaded in this manner, the learning cube may easily invoke any of the functions contained in the interface. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram illustrating how the presentation engine relies on script data files to provide the graphical user interface to the end user. In <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the presentation engine <highlight><bold>300</bold></highlight> resides as a computer application on the end user&apos;s computer, on a server of a network, as an web applet, or the like. The presentation engine <highlight><bold>300</bold></highlight> parses scripts <highlight><bold>310</bold></highlight>, such as the previously described STAGES.DAT, PICTURES.DAT, REGIONS.DAT and SOUNDS.DAT. Stages which are already supported by the presentation engine <highlight><bold>300</bold></highlight> will reference routines within the presentation engine itself. The scripts will reference external code for new or enhanced stage functionality. The presentation engine <highlight><bold>300</bold></highlight> can dynamically link these new code blocks <highlight><bold>320</bold></highlight>. During operation, the user browses through the graphical user interface <highlight><bold>330</bold></highlight> which is presented on a video display and controlled by the presentation engine <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> While the specification describes particular embodiments of the present invention, those of ordinary skill can devise variations of the present invention without departing from the inventive concept. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A multidimensional multimedia player for delivering to a user a multimedia presentation comprised of a plurality of multimedia content, the multimedia player comprising: 
<claim-text>a presentation control unit which provides a graphical user interface on a display device for allowing the user to manipulate the multimedia presentation; and </claim-text>
<claim-text>a presentation script for the comprising at least one stage for representing a view of the graphical user interface, wherein the stage comprises a stage description and a reference to a stage presentation module; </claim-text>
<claim-text>wherein the graphical user interface is a three-dimensional geometric shape comprised of a set of category-identifying elements; </claim-text>
<claim-text>wherein each category-identifying element is associated with a set of subcategory-identifying elements; </claim-text>
<claim-text>wherein each of the category-identifying elements and each of the subcategory-identifying elements has been associated with one of the stages in the presentation script; and </claim-text>
<claim-text>wherein when the user selects one of the subcategory-identifying elements, the presentation control unit displays to the user the multimedia content which has been associated to the subcategory-identifying element according to the presentation script. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reference to the stage presentation module is a path to a compiled stage module code. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reference to the stage presentation module is a reference to a portion of the presentation control unit which can present the stage. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the three-dimensional geometric shape is a cube. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the presentation control unit and the presentation script are delivered to a computer over the Internet. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising an instruction script, for instructing the presentation control unit how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A multidimensional multimedia player for delivering to a user a multimedia presentation comprised of a plurality of multimedia content and a presentation script, wherein the presentation script comprises at least one stage for representing a view of a graphical user interface, wherein the stage comprises a stage description and a reference to a stage presentation module, wherein the graphical user interface is a three-dimensional geometric shape comprised of a set of category-identifying elements; wherein each category-identifying element is associated with a set of subcategory-identifying elements; wherein each of the category-identifying elements and each of the subcategory-identifying elements has been associated with one of the stages in the presentation script; the multimedia player comprising: 
<claim-text>a presentation control unit which provides the graphical user interface on a display device for allowing the user to manipulate the multimedia presentation; and </claim-text>
<claim-text>wherein when the user selects one of the subcategory-identifying elements, the presentation control unit displays to the user the multimedia content which has been associated to the subcategory-identifying element according to the presentation script. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the reference to the stage presentation module is a path to a compiled stage module code which integrate with the presentation control unit. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the reference to the stage presentation module is a reference to a portion of the presentation control unit which can present the stage. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the three-dimensional geometric shape is a cube. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the presentation control unit and the presentation script are delivered to a computer over the Internet. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The multidimensional multimedia player from <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the presentation control unit manages the graphical user interface according to an instruction script. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A computerized method for delivering to a user a multimedia presentation comprised of a plurality of multimedia content, the method comprising: 
<claim-text>controlling a graphical user interface on a display device for allowing the user to manipulate the multimedia presentation, wherein the graphical user interface is a three-dimensional geometric shape comprised of a set of category-identifying elements; </claim-text>
<claim-text>parsing a presentation script, the presentation script comprising at least one stage for representing a view of the graphical user interface, wherein the stage comprises a stage description and a reference to a stage presentation module; </claim-text>
<claim-text>associating each category-identifying element with a set of subcategory-identifying elements; </claim-text>
<claim-text>associating each of the category-identifying elements and each of the subcategory-identifying elements with one of the stages in the presentation script; and </claim-text>
<claim-text>displaying to the user the multimedia content which has been associated to the subcategory-identifying element when the user selects one of the subcategory-identifying elements, according to the presentation script. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computerized method from <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the reference to the stage presentation module is a path to a compiled stage module code. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computerized method from <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the reference to the stage presentation module is a reference to a portion of the presentation control unit which can present the stage. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computerized method from <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the three-dimensional geometric shape is a cube. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computerized method from <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the presentation script is delivered to a computer over the Internet. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computerized method from <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising parsing an instruction script, for instructing how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer-readable medium having computer-executable instructions for performing a method for delivering to a user a multimedia presentation comprised of a plurality of multimedia content, the method comprising: 
<claim-text>controlling a graphical user interface on a display device for allowing the user to manipulate the multimedia presentation, wherein the graphical user interface is a three-dimensional geometric shape comprised of a set of category-identifying elements; </claim-text>
<claim-text>parsing a presentation script, the presentation script comprising at least one stage for representing a view of the graphical user interface, wherein the stage comprises a stage description and a reference to a stage presentation module; </claim-text>
<claim-text>associating each category-identifying element with a set of subcategory-identifying elements; </claim-text>
<claim-text>associating each of the category-identifying elements and each of the subcategory-identifying elements with one of the stages in the presentation script; and </claim-text>
<claim-text>displaying to the user the multimedia content which has been associated to the subcategory-identifying element when the user selects one of the subcategory-identifying elements, according to the presentation script. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method from <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the reference to the stage presentation module is a path to a compiled stage module code. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method from <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the reference to the stage presentation module is a reference to a portion of the presentation control unit which can present the stage. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method from <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the three-dimensional geometric shape is a cube. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method from <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the presentation script is delivered to a computer over the Internet. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method from <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, the method further comprising parsing an instruction script, for instructing how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A computerized authoring tool for creating a multidimensional multimedia presentation having a set of categories, each category having a set of subcategories, the authoring tool comprising: 
<claim-text>a number selection unit, for specifying a number of category elements and subcategory elements within a graphical user interface, wherein the graphical user interface has a three-dimensional geometric shape comprised of the desired number of category-identifying elements and the desired number of subcategory-identifying elements; and </claim-text>
<claim-text>a content association unit which is programmed to: 
<claim-text>loop through each of the category-identifying elements as a current element to: 
<claim-text>associate a category title to the current element; and </claim-text>
<claim-text>loop through each of the subcategory-identifying elements for the current category as a current sub-element to: 
<claim-text>associate a subcategory title to the current sub-element; and </claim-text>
<claim-text>associate content to the current sub-element. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computerized authoring tool from <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the content association unit creates a script describing the associations of the category title to the category-identifying elements. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computerized authoring tool from <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the content association unit creates a script describing the associations of the subcategory titles and content to the subcategory-identifying elements. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computerized authoring tool from <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the content association unit creates a script describing how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computerized authoring tool from <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the geometric shape of the graphical user interface is a cube. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A computerized method for creating a multidimensional multimedia presentation having a set of categories, each category having a set of subcategories, the method comprising: 
<claim-text>determining a number of categories and a number of subcategories for the multimedia presentation; </claim-text>
<claim-text>specifying a graphical user interface having a three-dimensional geometric shape, wherein the geometric shape is comprised of the desired number of category-identifying elements and the desired number of subcategory-identifying elements; </claim-text>
<claim-text>looping through each of the category-identifying elements as a current element by: 
<claim-text>associating a category title to the current element; and </claim-text>
<claim-text>looping through each of the subcategory-identifying elements for the current category as a current sub-element by: 
<claim-text>associating a subcategory title to the current sub-element; and </claim-text>
<claim-text>associating content to the current sub-element. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computerized method for creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising creating a script describing the associations of the category title to the category-identifying elements. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computerized method for creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising creating a script describing the associations of the subcategory titles and content to the subcategory-identifying elements. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computerized method for creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising creating a script describing how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computerized method for creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the geometric shape of the graphical user interface is a cube. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A computer-readable medium having computer-executable instructions for performing a method of creating a multidimensional multimedia presentation having a set of categories, each category having a set of subcategories, the method comprising: 
<claim-text>determining a number of categories and a number of subcategories for the multimedia presentation; </claim-text>
<claim-text>specifying a graphical user interface having a three-dimensional geometric shape, wherein the geometric shape is comprised of the desired number of category-identifying elements and the desired number of subcategory-identifying elements; </claim-text>
<claim-text>looping through each of the category-identifying elements as a current element by: 
<claim-text>associating a category title to the current element; and </claim-text>
<claim-text>looping through each of the subcategory-identifying elements for the current category as a current sub-element by: 
<claim-text>associating a subcategory title to the current sub-element; and </claim-text>
<claim-text>associating content to the current sub-element. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method of creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, the method further comprising creating a script describing the associations of the category title to the category-identifying elements. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method of creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, the method further comprising creating a script describing the associations of the subcategory titles and content to the subcategory-identifying elements. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method of creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, the method further comprising creating a script describing how to manage the graphical user interface. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The computer-readable medium having computer-executable instructions for performing a method of creating a multidimensional multimedia presentation from <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, wherein the geometric shape of the graphical user interface is a cube.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001904A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001904A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001904A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001904A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001904A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001904A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001904A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001904A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001904A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001904A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001904A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
