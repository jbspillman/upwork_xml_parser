<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004836A1-20030102-D00000.TIF SYSTEM "US20030004836A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00001.TIF SYSTEM "US20030004836A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00002.TIF SYSTEM "US20030004836A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00003.TIF SYSTEM "US20030004836A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00004.TIF SYSTEM "US20030004836A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00005.TIF SYSTEM "US20030004836A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00006.TIF SYSTEM "US20030004836A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004836A1-20030102-D00007.TIF SYSTEM "US20030004836A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004836</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09872515</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010601</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/60</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>027000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Defining form formats with layout items that present data of business application</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wolfgang</given-name>
<family-name>Otter</family-name>
</name>
<residence>
<residence-non-us>
<city>Nussloch</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Wolfgang</given-name>
<family-name>Weiss</family-name>
</name>
<residence>
<residence-non-us>
<city>Wiesloch</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Adrian</given-name>
<family-name>Alexander</family-name>
</name>
<residence>
<residence-non-us>
<city>Walldorf</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Vladislav</given-name>
<family-name>Bezrukov</family-name>
</name>
<residence>
<residence-non-us>
<city>Leimen</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Claudia</given-name>
<family-name>Binder</family-name>
</name>
<residence>
<residence-non-us>
<city>Schwetzingen</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Andreas</given-name>
<family-name>Deutesfeld</family-name>
</name>
<residence>
<residence-non-us>
<city>Bad Schonborn</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Thomas</given-name>
<family-name>Goring</family-name>
</name>
<residence>
<residence-non-us>
<city>Wiesloch</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Rainer</given-name>
<family-name>Hoch</family-name>
</name>
<residence>
<residence-non-us>
<city>Altlussheim</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Christoph</given-name>
<family-name>Wachter</family-name>
</name>
<residence>
<residence-non-us>
<city>Karlsruhe</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FINNEGAN, HENDERSON, FARABOW, GARRETT &amp;</name-1>
<name-2>DUNNER LLP</name-2>
<address>
<address-1>1300 I STREET, NW</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20006</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A form with a plurality of layout items for data presentation by a business application is defined by&mdash;simultaneously and one a single screen&mdash;providing (<highlight><bold>410</bold></highlight>) a tree view with tree nodes to represent the layout items, wherein the view visualizes structure information, a processing order, a selected tree node to represent a selected layout item; providing (<highlight><bold>420</bold></highlight>) a property view to display properties of the selected layout item; providing (<highlight><bold>430</bold></highlight>) a layout view to display items, wherein the selected layout item is highlighted; modifying (<highlight><bold>440</bold></highlight>) the selected layout item and the processing order through interaction with a user; and creating (<highlight><bold>450</bold></highlight>) a form definition document. The compatibility of layout items and processing order with a predefined data interface of the business application is verified as well. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention generally relates to computer technology, and, more particularly, relates to computers that define formats with layout items to present data of a business application. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In a traditional meaning, a &ldquo;form&rdquo; is a printed or typed document with blank spaces for insertion of required or requested information. A form is convenient for communication, for example, between a person and an organization. The organization is, for example, a governmental institution or a business enterprise. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Taking an invoice document as an illustrative example, the document is a filled-in form. The form contains a standardized portion for defining name and date fields (i.e. the &ldquo;form&rdquo;) and a specialized portion for the particular name and particular date. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> With the advent of computer technology and the use of computer applications either by the organization or by the person, the term &ldquo;form&rdquo; is broadened. As used in this patent application, a &ldquo;form&rdquo; stands for any electronic document with predefined format that contains blank fields for filling with data. A &ldquo;filled-in form&rdquo; or &ldquo;final document&rdquo; is a form where the blank fields are already filled with data. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The organizations use business application programs to organize information flow within the organization or to communicate to and from the organization. Application programs are, for example, programs to assist customer relationship management (CRM), finance management, and human resource management. Although the application programs are different and are often customized to the organization, it is common for most of them that information flow leaving the organization uses the final document on a traditional medium, such as paper. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Often, the final documents are invoices, delivery notes, reminder letters, purchase orders, checks, or customs declarations. For example, an invoice form has pages (e.g., sheets of paper), text areas (e.g., for printing positions to be invoiced, often in tables; greetings to the recipient), an address area (e.g., for printing recipients&apos;address), and a graphic area (e.g., for printing a logotype of the sender). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Form definitions comprise, for example, page breaks, line breaks, fonts indicators, position information, indent, tabulators, protection against line breaks in paragraph, and others. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> At a first time point, a form designer (hereinafter &ldquo;user&rdquo;) creates a new form by a so-called &ldquo;form builder&rdquo;, a computer program that resembles a commercially available text and image processing program. Logical combinations of layout items are coded by a programming language, thus the user must be familiar with this. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> At a second, later time point, an output program reads data from the application program, instantiates the form and prints the final documents. The output program receives the data via a predefined form-interface from the application program. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> For creating forms, the following references are useful: U.S. Pat. No. 5,857,034 to Tsuchiya et al.; EP 0230 994 to Muller et al.; DE 4308291C2 to Audi. There is an ongoing need to provide form defining software that alleviates the user from being computer language literate. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> As in claim 1, the present invention relates to a method for defining the format of a form by a computer, the form having pluralities of layout items, the layout items defining the presentation of data of a business application. The method comprises the following steps: providing a logic view with nodes to represent the layout items, the logic view (a) to visualize structure information of the form, (b) to visualize a processing order of the layout items by the position of the nodes, (c) to visualize at least one of the nodes as a selected node to represent a selected layout item; providing a property view to display properties of the selected layout item; providing a layout view to display the layout items, wherein the selected layout item is highlighted; modifying the selected layout item and the processing order through interaction with a user; and creating a form definition document. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Presenting the selection simultaneously in logic, property and layout views assist the user to modify the selected layout item while looking at the place of the item in the structure and looking at the visual appearance of the item. Coding in a program language is not required. Preferably, the steps are performed in a graphical user interface. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> As in claim 2, preferably, in step providing the logic view, the logic view is provided as a tree view and the nodes are tree nodes so that the processing order is visualized by a root node, a plurality of branch nodes, and a plurality of leave nodes. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The tree view with the tree nodes is a convenient technical representation of the processing order that is easily understood by the user. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> As in claim 3, preferably, in step providing the logic view, the plurality of branch nodes comprise condition nodes to process layout items depending on logical statements in the nodes. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In other words, nodes are optionally processed depending on logical statements. Logical operations that are assigned to the tree nodes are, for example, logical AND-operation and OR-operations; logical operands are constants and other mathematical expressions. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> As in claim 4, preferably, modifying the processing order through interaction comprises to change the position of the tree nodes. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The user simply changes the order of the nodes without changing any coding in a programming language. This feature is convenient to save training efforts for the user. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> As in claim 5, preferably, in the steps providing the logic view, providing the property view and providing the layout view are performed for a graphical user interface on a single screen. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> It is an advantage that the views are provided on the same screen. This allows the user to get an instant overview. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> As in claim 6, preferably, the step modifying comprises to verify the compatibility of layout items and processing order with a predefined data interface of the business application. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Verifying compatibility and compliance with the predefined interface alleviates the user from constantly looking up in interface specifications. Noncompliant modifications are not allowed. Training efforts for the users are reduced. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As in claim 7, preferably, a form printing program is generated from the form definition document, the form printing program is called by the business application to print the final document. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> As in claim 8, preferably, a computer defines the format of a form, the form has a plurality of layout items, the layout items define the presentation of data of a business application, the computer comprises: a display for providing a tree view with tree nodes to represent the layout items, the tree view (a) to visualize structure information of the form, (b) to visualize a processing order of the layout items by the position of the tree nodes, (c) to visualize at least one of the tree nodes as a selected node to represent a selected layout item; for providing a property view to display properties of the selected layout item, the properties with logical statements for conditionally processing the items; for providing a layout view to display the layout items, wherein the selected layout item is highlighted; interaction means for modifying the selected layout item and the processing order through interaction with a user who changes the position of the tree nodes; and storing means for creating a form definition document. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> As in claim 9, preferably, the computer further comprises verification means to verify the compatibility of layout items and processing order with a predefined data interface of the business application. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As in claim 10, a computer program product has computer program code instructions for defining the format of a form, the form has layout items to define data presentation of a business application, the computer program instructions cause a processor to execute the following steps: providing a logic view with nodes to represent the layout items, the logic view (a) to visualize structure information of the form, (b) to visualize a processing order of the layout items by the position of the nodes, (c) to visualize at least one of the nodes as a selected node to represent a selected layout item; providing a property view to display properties of the selected layout item; providing a layout view to display the layout items, wherein the selected layout item is highlighted; modifying the selected layout item and the processing order through interaction with a user; and creating a form definition document. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As in claim 11, preferably, the computer program code instructions cause the processor to execute the step providing logic view such that the logic view is provided as a tree view that visualizes the processing order by a root node, a plurality of branch nodes, and a plurality of leave nodes. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> As in claim 12, preferably, the computer program code instructions cause the processor to execute the step providing logic view such that the plurality of branch nodes comprise condition nodes to process layout items depending on logical statements in the nodes. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> As in claim 13, preferably, the computer program code instructions cause the processor to execute the step modifying the processing order through user interaction to change the position of tree nodes. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As in claim 14, preferably, the computer program code instructions causes the processor to execute the steps providing logic view, providing property view and providing layout view are performed for a graphical user interface on a single screen. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> As in claim 15, preferably, the computer program code instructions cause the processor to execute the step modifying such to verify the compatibility of layout items and processing order with a predefined data interface of the business application.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a simplified block diagram of a computer network system having a plurality of computers; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a simplified screen diagram of a graphical user interface with a tree view, a property view, and a layout view according to the present invention; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a simplified screen diagram of the tree view of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> with tree nodes, wherein a node is being selected; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a simplified screen diagram of the property view, properties for the selected node of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> being displayed; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a simplified screen diagram of the layout view, the layout item for the selected node of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> being highlighted; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a simplified screen diagram of the tree view of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> with tree nodes arranged in hierarchy; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a simplified flow chart diagram of a method according to the present invention; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a further method step of modifying a processing order by illustration of tree node positions; and </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a simplified block diagram of the computer network system with a design computer and an application computer.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> For convenience, a list of reference signs is provided prior to the claims. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a simplified block diagram of the computer network system <highlight><bold>999</bold></highlight> having a plurality of computers <highlight><bold>900</bold></highlight>, <highlight><bold>901</bold></highlight>, <highlight><bold>902</bold></highlight> (or <highlight><bold>90</bold></highlight>q, with q&equals;0 . . . Q&minus;1, Q any number). </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Computers <highlight><bold>900</bold></highlight>-<highlight><bold>902</bold></highlight> are coupled via intercomputer network <highlight><bold>990</bold></highlight>. Computer <highlight><bold>900</bold></highlight> comprises processor <highlight><bold>910</bold></highlight>, memory <highlight><bold>920</bold></highlight>, bus <highlight><bold>930</bold></highlight>, and, optionally, input device <highlight><bold>940</bold></highlight> and output device <highlight><bold>950</bold></highlight> (I/O devices, user interface <highlight><bold>960</bold></highlight>). As illustrated, the invention is present by computer program product <highlight><bold>100</bold></highlight> (CPP), program carrier <highlight><bold>970</bold></highlight> and program signal <highlight><bold>980</bold></highlight>, collectively &ldquo;program&rdquo;. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In respect to computer <highlight><bold>900</bold></highlight>, computer <highlight><bold>901</bold></highlight>/<highlight><bold>902</bold></highlight> is sometimes referred to as &ldquo;remote computer&rdquo;, computer <highlight><bold>901</bold></highlight>/<highlight><bold>902</bold></highlight> is, for example, a server, a router, a peer device or other common network node, and typically comprises many or all of the elements described relative to computer <highlight><bold>900</bold></highlight>. Hence, elements <highlight><bold>100</bold></highlight> and <highlight><bold>910</bold></highlight>-<highlight><bold>980</bold></highlight> in computer <highlight><bold>900</bold></highlight> collectively illustrate also corresponding elements <highlight><bold>10</bold></highlight><highlight><italic>q </italic></highlight>and <highlight><bold>91</bold></highlight><highlight><italic>q</italic></highlight>-<highlight><bold>98</bold></highlight><highlight><italic>q </italic></highlight>(shown for q&equals;0) in computers <highlight><bold>90</bold></highlight><highlight><italic>q. </italic></highlight></paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Computer <highlight><bold>900</bold></highlight> is, for example, a conventional personal computer (PC), a desktop and hand-held device, a multiprocessor computer, a pen computer, a microprocessor-based or programmable consumer electronics, a minicomputer, a mainframe computer, a personal mobile computing device, a mobile phone, a portable or stationary personal computer, a palmtop computer or the like. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Processor <highlight><bold>910</bold></highlight> is, for example, a central processing unit (CPU), a micro-controller unit (MCU), digital signal processor (DSP), or the like. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Memory <highlight><bold>920</bold></highlight> symbolizes elements that temporarily or permanently store data and instructions. Although memory <highlight><bold>920</bold></highlight> is conveniently illustrated as part of computer <highlight><bold>900</bold></highlight>, memory functions can also be implemented in network <highlight><bold>990</bold></highlight>, in computers <highlight><bold>901</bold></highlight>/<highlight><bold>902</bold></highlight> and in processor <highlight><bold>910</bold></highlight> itself (e.g., cache, register), or elsewhere. Memory <highlight><bold>920</bold></highlight> can be a read only memory (ROM), a random access memory (RAM), or a memory with other access options. Memory <highlight><bold>920</bold></highlight> is physically implemented by computer-readable media, such as, for example: (a) magnetic media, like a hard disk, a floppy disk, or other magnetic disk, a tape, a cassette tape; (b) optical media, like optical disk (CD-ROM, digital versatile disk&mdash;DVD); (c) semiconductor media, like DRAM, SRAM, EPROM, EEPROM, memory stick, or by any other media, like paper. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Optionally, memory <highlight><bold>920</bold></highlight> is distributed across different media. Portions of memory <highlight><bold>920</bold></highlight> can be removable or non-removable. For reading from media and for writing in media, computer <highlight><bold>900</bold></highlight> uses devices well known in the art such as, for example, disk drives, tape drives. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Memory <highlight><bold>920</bold></highlight> stores support modules such as, for example, a basic input output system (BIOS), an operating system (OS), a program library, a compiler, an interpreter, and a text-processing tool. Support modules are commercially available and can be installed on computer <highlight><bold>900</bold></highlight> by those of skill in the art. For simplicity, these modules are not illustrated. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> CPP <highlight><bold>100</bold></highlight> comprises program instructions and&mdash;optionally&mdash;data that cause processor <highlight><bold>910</bold></highlight> to execute method steps of the present invention. Method steps are explained with more detail below. In other words, CPP <highlight><bold>100</bold></highlight> defines the operation of computer <highlight><bold>900</bold></highlight> and its interaction in system network system <highlight><bold>999</bold></highlight>. For example and without the intention to be limiting, CPP <highlight><bold>100</bold></highlight> can be available as source code in any programming language, and as object code (&ldquo;binary code&rdquo;) in a compiled form. Persons of skill in the art can use CPP <highlight><bold>100</bold></highlight> in connection with any of the above support modules (e.g., compiler, interpreter, operating system). </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Although CPP <highlight><bold>100</bold></highlight> is illustrated as being stored in memory <highlight><bold>920</bold></highlight>, CPP <highlight><bold>100</bold></highlight> can be located elsewhere. CPP <highlight><bold>100</bold></highlight> can also be embodied in carrier <highlight><bold>970</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Carrier <highlight><bold>970</bold></highlight> is illustrated outside computer <highlight><bold>900</bold></highlight>. For communicating CPP <highlight><bold>100</bold></highlight> to computer <highlight><bold>900</bold></highlight>, carrier <highlight><bold>970</bold></highlight> is conveniently inserted into input device <highlight><bold>940</bold></highlight>. Carrier <highlight><bold>970</bold></highlight> is implemented as any computer readable medium, such as a medium largely explained above (cf. memory <highlight><bold>920</bold></highlight>). Generally, carrier <highlight><bold>970</bold></highlight> is an article of manufacture comprising a computer readable medium having computer readable program code means embodied therein for executing the method of the present invention. Further, program signal <highlight><bold>980</bold></highlight> can also embody computer program <highlight><bold>100</bold></highlight>. Signal <highlight><bold>980</bold></highlight> travels on network <highlight><bold>990</bold></highlight> to computer <highlight><bold>900</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Having described CPP <highlight><bold>100</bold></highlight>, program carrier <highlight><bold>970</bold></highlight>, and program signal <highlight><bold>980</bold></highlight> in connection with computer <highlight><bold>900</bold></highlight> is convenient. Optionally, program carrier <highlight><bold>971</bold></highlight>/<highlight><bold>972</bold></highlight> (not shown) and program signal <highlight><bold>981</bold></highlight>/<highlight><bold>982</bold></highlight> embody computer program product (CPP) <highlight><bold>101</bold></highlight>/<highlight><bold>102</bold></highlight> to be executed by processor <highlight><bold>911</bold></highlight>/<highlight><bold>912</bold></highlight> (not shown) in computers <highlight><bold>901</bold></highlight>/<highlight><bold>902</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Input device <highlight><bold>940</bold></highlight> symbolizes a device that provides data and instructions for processing by computer <highlight><bold>900</bold></highlight>. For example, device <highlight><bold>940</bold></highlight> is a keyboard, a pointing device (e.g., mouse, trackball, cursor direction keys), microphone, joystick, game pad, scanner. Although the examples are devices with human interaction, device <highlight><bold>940</bold></highlight> can also operate without human interaction, such as, a wireless receiver (e.g., with satellite dish or terrestrial antenna), a sensor (e.g., a thermometer), a counter (e.g., goods counter in a factory). Input device <highlight><bold>940</bold></highlight> can serve to read carrier <highlight><bold>970</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Output device <highlight><bold>950</bold></highlight> symbolizes a device that presents instructions and data that have been processed. For example, a monitor or other type of display, (cathode ray tube (CRT), flat panel display, liquid crystal display (LCD), a speaker, a printer, a plotter, a vibration alert device. Similar as above, output device <highlight><bold>950</bold></highlight> communicates with the user, but it can also communicate with further computers. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Input device <highlight><bold>940</bold></highlight> and output device <highlight><bold>950</bold></highlight> can be combined to a single device; any device <highlight><bold>940</bold></highlight> and <highlight><bold>950</bold></highlight> can be provided optional. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Bus <highlight><bold>930</bold></highlight> and network <highlight><bold>990</bold></highlight> provide logical and physical connections by conveying instruction and data signals. While connections inside computer <highlight><bold>900</bold></highlight> are conveniently referred to as &ldquo;bus <highlight><bold>930</bold></highlight>&rdquo;, connections between computers <highlight><bold>900</bold></highlight>-<highlight><bold>902</bold></highlight> are referred to as &ldquo;network <highlight><bold>990</bold></highlight>&rdquo;. Devices <highlight><bold>940</bold></highlight> and <highlight><bold>950</bold></highlight> are coupled to computer <highlight><bold>900</bold></highlight> by bus <highlight><bold>930</bold></highlight> (as illustrated) or by network <highlight><bold>990</bold></highlight> (optional). While the signals inside computer <highlight><bold>900</bold></highlight> are mostly electrical signals, the signals in network are electrical, magnetic, optical or wireless (radio) signals. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Networking environments (as network <highlight><bold>990</bold></highlight>) are commonplace in offices, enterprise-wide computer networks, intranets and the internet (i.e. world wide web). The physical distance between a remote computer and computer <highlight><bold>900</bold></highlight> is not important. Network <highlight><bold>990</bold></highlight> can be a wired or a wireless network. To name a few network implementations, network <highlight><bold>990</bold></highlight> is, for example, a local area network (LAN), a wide area network (WAN), a public switched telephone network (PSTN); a Integrated Services Digital Network (ISDN), an infra-red (IR) link, a radio link, like Universal Mobile Telecommunications System (UMTS), Global System for Mobile Communication (GSM), Code Division Multiple Access (CDMA), or satellite link. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Transmission protocols and data formats are know, for example, as transmission control protocol/internet protocol (TCP/IP), hyper text transfer protocol (HTTP), secure HTTP, wireless application protocol, unique resource locator (URL), a unique resource identifier (URI), hyper text markup language HTML, extensible markup language (XML), extensible hyper text markup language (XHTML), wireless application markup language (WML), etc. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Interfaces coupled between the elements are also well known in the art. For simplicity, interfaces are not illustrated. An interface can be, for example, a serial port interface, a parallel port interface, a game port, a universal serial bus (USB) interface, an internal or external modem, a video adapter, or a sound card. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Computer and program are closely related. As used hereinafter, phrases, such as &ldquo;the computer provides&rdquo; and &ldquo;the program provides&rdquo;, are convenient abbreviation to express actions by a computer that is controlled by a program. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a simplified screen diagram of graphical user interface <highlight><bold>200</bold></highlight> with tree view <highlight><bold>210</bold></highlight> (TREE&Prime;), property view <highlight><bold>220</bold></highlight> (PROPERTY&Prime;), and layout view <highlight><bold>230</bold></highlight> (&ldquo;LAYOUT&rdquo;) according to the present invention. Generally, tree view <highlight><bold>210</bold></highlight> is a logic view. Details for each view are presented in FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Throughout further illustrations, selecting and highlighting is illustrated by hatching. It is known in the art that the user can select an object on a screen, for example, by double-clicking with a mouse, by pressing predefined keys, or otherwise. Usually, the object that is selected is also highlighted. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Conveniently, graphical user interface has tree view <highlight><bold>210</bold></highlight> on the left side of display <highlight><bold>950</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIGS. 1, 9</cross-reference>), property view <highlight><bold>220</bold></highlight> in the center, and layout view <highlight><bold>230</bold></highlight> on the right side. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a simplified screen diagram of tree view <highlight><bold>210</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> with tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight> and <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight>. Node <highlight><bold>211</bold></highlight> at top position stands for global settings of the form. Node <highlight><bold>212</bold></highlight> at center position has further nodes <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> with labels to visualize further structure information: node <highlight><bold>251</bold></highlight> for a logotype at a predetermined position in the form (&ldquo;LOGO&rdquo;), node <highlight><bold>252</bold></highlight> for an address (&ldquo;ADDRESS&rdquo;), node <highlight><bold>253</bold></highlight> for further information (&ldquo;INFO&rdquo;), node <highlight><bold>254</bold></highlight> for a main text (&ldquo;MAIN&rdquo;), and node <highlight><bold>255</bold></highlight> for further information in the lower part of the form (&ldquo;FOOTER&rdquo;). The labels of nodes <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> correspond to functions (structure) of items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 5</cross-reference>), respectively. In the invoice example, the filled-in form (i.e. final document) has a logotype with a bitmap symbol of the sender, a main portion with a table, the recipients&apos; address, and the footer stating the bank account number of the sender. Node <highlight><bold>213</bold></highlight> at the lower position stands for further processing (&ldquo;NEXT&rdquo;), not relevant to the present invention. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Among the nodes, nodes <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> correspond to layout items (cf. <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). Node <highlight><bold>254</bold></highlight> is being selected (hatched). Tree view <highlight><bold>210</bold></highlight> is a tool that assists the user to navigate within the form as explained in the following. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a simplified screen diagram of property view <highlight><bold>220</bold></highlight>. Properties for selected node <highlight><bold>254</bold></highlight> &ldquo;MAIN&rdquo; of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> are displayed. For example, the form prints invoice details only if customer is identified as &ldquo;LH&rdquo; and if a monetary value exceeds 0.10 currency units. In other words, property view <highlight><bold>220</bold></highlight> indicates logical statement <highlight><bold>554</bold></highlight> for processing the layout item that is identified by selected node <highlight><bold>254</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a simplified screen diagram of layout view <highlight><bold>230</bold></highlight> in that layout item <highlight><bold>354</bold></highlight> for the selected node <highlight><bold>254</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is highlighted. The user arranges the layout items by a layout and texts editor; the editors can display toolbars, grid lines, rulers, zoom lenses, spell checker or other convenient editing means; such editors are well known in the art and therefore not further described. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Layout view <highlight><bold>230</bold></highlight> is a pre-view and corresponds to form <highlight><bold>300</bold></highlight> being to be provided by output device <highlight><bold>551</bold></highlight>. According to the present invention, any selecting by user is forwarded to the other view. In does not matter whether the user selects a node in view <highlight><bold>210</bold></highlight> or a layout item in view <highlight><bold>230</bold></highlight>. Selection is effective in all 3 views <highlight><bold>210</bold></highlight>-<highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Taking <cross-reference target="DRAWINGS">FIG. 5</cross-reference> as an illustrative example, persons of skill in the art are able, based on the description herein, to alter the number of layout items. Optionally, the layout items can be tables, such as in an invoice. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a simplified screen diagram of tree view <highlight><bold>210</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> with tree nodes arranged in hierarchy. Arabic numbers indicate a preferred processing order 1 to 10. The user has defined the order by a hierarchy. Nodes that have successors are indicated by square and diamond symbols; nodes that do not have successors are indicated by triangle symbols. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The nodes in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> are: a root node (&ldquo;primary&rdquo; node, square <highlight><bold>1</bold></highlight>); a plurality of branch nodes (&ldquo;secondary&rdquo; node, squares <highlight><bold>2</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>10</bold></highlight> and diamond <highlight><bold>7</bold></highlight>); and a plurality of leave nodes, &ldquo;terminal&rdquo; node triangles <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight>). </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In other words, the tree nodes are shaped according to their function. The optional continuation of tree <highlight><bold>210</bold></highlight> is represented by ellipsis (&ldquo;. . . &rdquo;). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a simplified flow chart diagram of method <highlight><bold>400</bold></highlight> according to the present invention. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Method <highlight><bold>400</bold></highlight> is a method for defining the format of form <highlight><bold>300</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) by computer <highlight><bold>900</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIGS. 1, 9</cross-reference>), form <highlight><bold>300</bold></highlight> having pluralities of layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> that define the presentation of data of a business application. Method <highlight><bold>400</bold></highlight> comprises the following steps: providing <highlight><bold>410</bold></highlight> logic view, providing <highlight><bold>420</bold></highlight> property view, providing <highlight><bold>430</bold></highlight> layout view, modifying <highlight><bold>440</bold></highlight> selected layout item, and creating <highlight><bold>450</bold></highlight> form definition document. For convenience of explanation, it is assumed that method <highlight><bold>400</bold></highlight> is performed by design computer <highlight><bold>900</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIGS. 1, 9</cross-reference>) controlled by computer program product <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> In step providing <highlight><bold>410</bold></highlight> logic view (with nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight> and <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> to represent layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>), computer <highlight><bold>900</bold></highlight> provides view <highlight><bold>210</bold></highlight> to (a) to visualize structure information of form <highlight><bold>300</bold></highlight>, (b) to visualize the processing order of layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> by the position of nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight> and <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> (details in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>), and (c) to visualize at least one of nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> as selected node <highlight><bold>254</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) to represent selected layout item <highlight><bold>354</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). In step providing <highlight><bold>420</bold></highlight> property view, computer <highlight><bold>900</bold></highlight> provides property view <highlight><bold>220</bold></highlight> to display properties of the selected layout item <highlight><bold>354</bold></highlight>, as explained in the example of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In step providing <highlight><bold>430</bold></highlight> layout view, computer <highlight><bold>900</bold></highlight> provides layout view <highlight><bold>230</bold></highlight> to display layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, wherein selected layout item <highlight><bold>354</bold></highlight> is highlighted. In step modifying <highlight><bold>440</bold></highlight> selected layout item and processing order, computer <highlight><bold>900</bold></highlight> modifies selected layout item <highlight><bold>354</bold></highlight> or processing order <highlight><bold>1</bold></highlight>-<highlight><bold>10</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 6</cross-reference>) through interaction with the user. In step creating <highlight><bold>450</bold></highlight> form definition document <highlight><bold>301</bold></highlight>, computer <highlight><bold>900</bold></highlight> stores layout information confirmed in the previous steps in document <highlight><bold>301</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 9</cross-reference>). Preferably, in step creating <highlight><bold>450</bold></highlight>, data objects are stored in a programming language according to predefined rules (e.g., XML rules). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> As illustrated in connection with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, preferably, in step providing <highlight><bold>410</bold></highlight> logic view, the view is provided as tree view <highlight><bold>210</bold></highlight> and the nodes are tree nodes. As in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, processing order <highlight><bold>1</bold></highlight>-<highlight><bold>10</bold></highlight> is visualized by root node <highlight><bold>1</bold></highlight>, a plurality of branch nodes <highlight><bold>2</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>7</bold></highlight>, and a plurality of leave nodes <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>8</bold></highlight>, and <highlight><bold>9</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Preferably, in step providing <highlight><bold>410</bold></highlight> logic view, computer <highlight><bold>900</bold></highlight> visualizes structure information by labels (LOGO <highlight><bold>251</bold></highlight>, ADDRESS <highlight><bold>252</bold></highlight>, INFO <highlight><bold>253</bold></highlight>, MAIN <highlight><bold>254</bold></highlight>, FOOTER <highlight><bold>255</bold></highlight>) at the nodes that correspond to functions of items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> When form definition document <highlight><bold>301</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 9</cross-reference>) has been created, a form printing program is generated from document <highlight><bold>301</bold></highlight>. The form printing program is called by the business application to print the final document. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates method step modifying <highlight><bold>440</bold></highlight> processing order <highlight><bold>1</bold></highlight>-<highlight><bold>10</bold></highlight> by illustration of tree node positions. <cross-reference target="DRAWINGS">FIGS. 8A</cross-reference> to <highlight><bold>8</bold></highlight>C illustrate on the left sides the positions of tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight> before modifying (order <highlight><bold>211</bold></highlight>, <highlight><bold>212</bold></highlight>, <highlight><bold>213</bold></highlight>), and illustrate on the right sides the positions of tree nodes after modifying. The processing order is changed when a tree node is removed (A), added (B) or shifted (C). </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> As in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>A, removing node <highlight><bold>212</bold></highlight> (&ldquo;REMOVE&rdquo;) leads to new order <highlight><bold>211</bold></highlight>, <highlight><bold>213</bold></highlight>. As in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>B, shifting node <highlight><bold>212</bold></highlight> (&ldquo;SHIFT&rdquo;, user drags node <highlight><bold>212</bold></highlight> down) leads to new order <highlight><bold>211</bold></highlight>, <highlight><bold>213</bold></highlight>, <highlight><bold>212</bold></highlight>. As in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>C, adding node <highlight><bold>214</bold></highlight> (&ldquo;ADD&rdquo;), the user adds node <highlight><bold>214</bold></highlight>, for example, by invoking a &ldquo;new&rdquo; command or by copying node <highlight><bold>214</bold></highlight> from the clipboard order changes to <highlight><bold>211</bold></highlight>, <highlight><bold>212</bold></highlight>, <highlight><bold>213</bold></highlight>, <highlight><bold>214</bold></highlight>. The &ldquo;clipboard&rdquo; stands for any intermediate storage means for cutting, copying and pasting. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a simplified block diagram of computer network system <highlight><bold>999</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) with design computer <highlight><bold>900</bold></highlight> and application computer <highlight><bold>901</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an example for conveniently explaining a preferred system configuration; those of skill in the art configure it otherwise without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Design computer <highlight><bold>900</bold></highlight> performs method <highlight><bold>400</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 7</cross-reference>) by computer program product <highlight><bold>100</bold></highlight> of the present invention. Design computer <highlight><bold>900</bold></highlight> communicates with the user via display <highlight><bold>950</bold></highlight> that renders graphical user interface <highlight><bold>200</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). As a result, computer <highlight><bold>900</bold></highlight> provides form definition document <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Application computer <highlight><bold>901</bold></highlight> performs business application <highlight><bold>500</bold></highlight> and printer driver <highlight><bold>505</bold></highlight>. Application <highlight><bold>500</bold></highlight> accesses database <highlight><bold>502</bold></highlight> and forwards data to driver <highlight><bold>505</bold></highlight> via data interface <highlight><bold>501</bold></highlight>. By merging data with form definition document <highlight><bold>301</bold></highlight>&prime; (e.g., a copy of <highlight><bold>301</bold></highlight>), printer driver <highlight><bold>505</bold></highlight> prints final documents to printer <highlight><bold>951</bold></highlight>. Conveniently, &ldquo;printer&rdquo; stands for any device selected from the group of printer, facsimile machine, email document, web publishing document. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Interface <highlight><bold>501</bold></highlight> allows to forwards data of predefined types. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> identifies the types by letters as type A, type B and type C. According to the present invention, a copy <highlight><bold>501</bold></highlight>&prime; of interface <highlight><bold>501</bold></highlight> makes the type definitions available to program <highlight><bold>100</bold></highlight>. In step modifying <highlight><bold>440</bold></highlight> (cf. <cross-reference target="DRAWINGS">FIG. 7</cross-reference>), program <highlight><bold>100</bold></highlight> verifies the compatibility of layout items and processing order with interface <highlight><bold>501</bold></highlight> of application <highlight><bold>500</bold></highlight>. For example, if the user request to add (to definition document <highlight><bold>301</bold></highlight>) a layout item that does not corresponds to types A, B or C, adding the item is prevented. Optionally, the verification comprises a syntax check (e.g., for statement <highlight><bold>554</bold></highlight>). </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Optionally, design computer <highlight><bold>900</bold></highlight> creates form printing program (not illustrated) from the form definition document <highlight><bold>301</bold></highlight>, the form printing program being called in computer <highlight><bold>901</bold></highlight> by business application <highlight><bold>500</bold></highlight> to print the final document. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Having described details, the present invention is summarized as computer <highlight><bold>900</bold></highlight> for defining format of form <highlight><bold>300</bold></highlight>, form <highlight><bold>300</bold></highlight> having a plurality of layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, the layout items defining a presentation of data of business application <highlight><bold>500</bold></highlight>, computer <highlight><bold>900</bold></highlight> comprises: display <highlight><bold>950</bold></highlight> for providing <highlight><bold>410</bold></highlight> tree view <highlight><bold>210</bold></highlight> with tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> to represent layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, tree view to visualize structure information of form <highlight><bold>300</bold></highlight>, to visualize a processing order of layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> by position of tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight>, to visualize at least one of tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> as selected node <highlight><bold>254</bold></highlight> to represent selected layout item <highlight><bold>354</bold></highlight>; for providing <highlight><bold>420</bold></highlight> property view <highlight><bold>220</bold></highlight> to display properties of selected layout item <highlight><bold>354</bold></highlight>, properties with logical statements <highlight><bold>554</bold></highlight> for conditionally processing items; for providing <highlight><bold>430</bold></highlight> layout view <highlight><bold>230</bold></highlight> to display layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, wherein selected layout item <highlight><bold>354</bold></highlight> is highlighted; interaction means <highlight><bold>940</bold></highlight> for modifying <highlight><bold>440</bold></highlight> selected layout item <highlight><bold>354</bold></highlight> and the processing order through interaction with a user who changes the position of tree nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>; and storing means <highlight><bold>920</bold></highlight> for creating <highlight><bold>450</bold></highlight> form definition document <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Preferably, computer <highlight><bold>900</bold></highlight> comprises verification means to verify the compatibility of the layout items and the processing order with predefined data interface <highlight><bold>501</bold></highlight> of business application <highlight><bold>500</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> The present invention is also summarized by computer program product <highlight><bold>100</bold></highlight> having computer program code instructions for defining the format of form <highlight><bold>300</bold></highlight>, form <highlight><bold>300</bold></highlight> having layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> to define data presentation of a business application <highlight><bold>500</bold></highlight>, the computer program instructions causing processor <highlight><bold>910</bold></highlight> to execute following steps: providing <highlight><bold>410</bold></highlight> logic view <highlight><bold>210</bold></highlight> with nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> to represent layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, logic view to visualize structure information of form <highlight><bold>300</bold></highlight>, to visualize a processing order of layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight> by the position of nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight>, to visualize at least one of nodes <highlight><bold>211</bold></highlight>-<highlight><bold>213</bold></highlight>, <highlight><bold>251</bold></highlight>-<highlight><bold>255</bold></highlight> as selected node <highlight><bold>254</bold></highlight> to prepresent a selected layout item <highlight><bold>354</bold></highlight>; providing <highlight><bold>420</bold></highlight> property view <highlight><bold>220</bold></highlight> to display properties of selected layout item <highlight><bold>354</bold></highlight>; providing <highlight><bold>430</bold></highlight> layout view <highlight><bold>230</bold></highlight> to display layout items <highlight><bold>351</bold></highlight>-<highlight><bold>355</bold></highlight>, wherein selected layout item <highlight><bold>354</bold></highlight> is highlighted; modifying <highlight><bold>440</bold></highlight> selected layout <highlight><bold>354</bold></highlight> item and the processing order through interaction with a user; and creating <highlight><bold>450</bold></highlight> form definition document <highlight><bold>301</bold></highlight>. Preferably, the computer program code instructions cause processor <highlight><bold>910</bold></highlight> to execute the as described above.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>List of References</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="84PT" align="left"/>
<colspec colname="2" colwidth="105PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Reference</entry>
<entry>Element</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>&emsp;1-10</entry>
<entry>processing order</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;1</entry>
<entry>root node</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;2, 5, 7</entry>
<entry>branch nodes</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;3, 4, 6, 8, 9</entry>
<entry>leave nodes</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;7</entry>
<entry>condition node</entry>
</row>
<row>
<entry></entry>
<entry>200</entry>
<entry>graphical user interface</entry>
</row>
<row>
<entry></entry>
<entry>210</entry>
<entry>tree view</entry>
</row>
<row>
<entry></entry>
<entry>211&mdash;213, 251-255</entry>
<entry>nodes</entry>
</row>
<row>
<entry></entry>
<entry>220</entry>
<entry>property view</entry>
</row>
<row>
<entry></entry>
<entry>230</entry>
<entry>layout view</entry>
</row>
<row>
<entry></entry>
<entry>254</entry>
<entry>selected node</entry>
</row>
<row>
<entry></entry>
<entry>300</entry>
<entry>form</entry>
</row>
<row>
<entry></entry>
<entry>301</entry>
<entry>form definition document</entry>
</row>
<row>
<entry></entry>
<entry>351-355</entry>
<entry>layout items</entry>
</row>
<row>
<entry></entry>
<entry>354</entry>
<entry>selected layout item</entry>
</row>
<row>
<entry></entry>
<entry>400</entry>
<entry>method</entry>
</row>
<row>
<entry></entry>
<entry>410</entry>
<entry>providing logic view</entry>
</row>
<row>
<entry></entry>
<entry>420</entry>
<entry>providing property view</entry>
</row>
<row>
<entry></entry>
<entry>430</entry>
<entry>providing a layout view</entry>
</row>
<row>
<entry></entry>
<entry>440</entry>
<entry>modifying</entry>
</row>
<row>
<entry></entry>
<entry>450</entry>
<entry>creating</entry>
</row>
<row>
<entry></entry>
<entry>500</entry>
<entry>business application</entry>
</row>
<row>
<entry></entry>
<entry>501</entry>
<entry>data interface</entry>
</row>
<row>
<entry></entry>
<entry>502</entry>
<entry>database</entry>
</row>
<row>
<entry></entry>
<entry>505</entry>
<entry>printer driver</entry>
</row>
<row>
<entry></entry>
<entry>554</entry>
<entry>logical statement</entry>
</row>
<row>
<entry></entry>
<entry>900</entry>
<entry>design computer</entry>
</row>
<row>
<entry></entry>
<entry>901</entry>
<entry>application computer</entry>
</row>
<row>
<entry></entry>
<entry>940</entry>
<entry>input device</entry>
</row>
<row>
<entry></entry>
<entry>950</entry>
<entry>display</entry>
</row>
<row>
<entry></entry>
<entry>951</entry>
<entry>printer</entry>
</row>
<row>
<entry></entry>
<entry>970</entry>
<entry>carrier</entry>
</row>
<row>
<entry></entry>
<entry>999</entry>
<entry>computer network system</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for defining the format of a form by a computer, the form having a plurality of layout items, the layout items defining the presentation of data of a business application, the method comprising the following steps: 
<claim-text>providing a logic view with nodes to represent the layout items, the logic view 
<claim-text>(a) to visualize structure information of the form, </claim-text>
<claim-text>(b) to visualize a processing order of the layout items by the position of the nodes, </claim-text>
<claim-text>(c) to visualize at least one of the nodes as a selected node to represent a selected layout item; </claim-text>
</claim-text>
<claim-text>providing a property view to display properties of the selected layout item; </claim-text>
<claim-text>providing a layout view to display the layout items, wherein the selected layout item is highlighted; </claim-text>
<claim-text>modifying the selected layout item and the processing order through interaction with a user; and </claim-text>
<claim-text>creating a form definition document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein in step providing logic view, the logic view is provided as a tree view and the nodes are tree nodes so that the processing order is visualized by a root node, a plurality of branch nodes, and a plurality of leave nodes. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein in step providing logic view, the plurality of branch nodes comprise condition nodes to process layout items depending on logical statements in the nodes. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein modifying the processing order through interaction comprises to change the position of the tree nodes. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the steps providing logic view, providing property view and providing layout view are performed for a graphical user interface on a single screen. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein step modifying comprises to verify the compatibility of layout items and processing order with a predefined data interface of the business application. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising to generate a form printing program from the form definition document, the form printing program being called by the business application to print a final document. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A computer for defining the format of a form, the form having a plurality of layout items, the layout items defining the presentation of data of a business application, the computer comprising: 
<claim-text>a display for providing a tree view with tree nodes to represent the layout items, the tree view (a) to visualize structure information of the form, (b) to visualize a processing order of the layout items by the position of the tree nodes, (c) to visualize at least one of the tree nodes as a selected node to represent a selected layout item; for providing a property view to display properties of the selected layout item, the properties with logical statements for conditionally processing the items; for providing a layout view to display the layout items, wherein the selected layout item is highlighted; </claim-text>
<claim-text>interaction means for modifying the selected layout item and the processing order through interaction with a user who changes the position of the tree nodes; and </claim-text>
<claim-text>storing means for creating a form definition document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising verification means to verify the compatibility of layout items and processing order with a predefined data interface of the business application. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer program product having computer program code instructions for defining the format of a form, the form having layout items to define data presentation of a business application, the computer program instructions causing a processor to execute the following steps: 
<claim-text>providing a logic view with nodes to represent the layout items, the logic view 
<claim-text>(a) to visualize structure information of the form, </claim-text>
<claim-text>(b) to visualize a processing order of the layout items by the position of the nodes, </claim-text>
<claim-text>(c) to visualize at least one of the nodes as a selected node to represent a selected layout item; </claim-text>
</claim-text>
<claim-text>providing a property view to display properties of the selected layout item; </claim-text>
<claim-text>providing a layout view to display the layout items, wherein the selected layout item is highlighted; </claim-text>
<claim-text>modifying the selected layout item and the processing order through interaction with a user; and </claim-text>
<claim-text>creating a form definition document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the computer program code instructions cause the processor to execute the step providing logic view such that the logic view is provided as a tree view that visualizes the processing order by a root node, a plurality of branch nodes, and a plurality of leave nodes. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the computer program code instructions cause the processor to execute the step providing logic view such that the plurality of branch nodes comprise condition nodes to process layout items depending on logical statements in the nodes. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the computer program code instructions cause the processor to execute the step modifying the processing order through user interaction to change the position of tree nodes. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the computer program code instructions causes the processor to execute the steps providing logic view, providing property view and providing layout view are performed for a graphical user interface on a single screen. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the computer program code instructions cause the processor to execute the step modifying such to verify the compatibility of layout items and processing order with a predefined data interface of the business application.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004836A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004836A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004836A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004836A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004836A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004836A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004836A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004836A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
