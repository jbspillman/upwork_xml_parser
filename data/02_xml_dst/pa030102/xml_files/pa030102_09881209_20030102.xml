<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004899A1-20030102-D00000.TIF SYSTEM "US20030004899A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004899A1-20030102-D00001.TIF SYSTEM "US20030004899A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004899A1-20030102-D00002.TIF SYSTEM "US20030004899A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004899</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09881209</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010615</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>400000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and a system related to determining the price of a combination contract</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Johan</given-name>
<family-name>Bergenudd</family-name>
</name>
<residence>
<residence-non-us>
<city>Danderyd</city>
<country-code>SE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>NIXON &amp; VANDERHYE P.C.</name-1>
<name-2></name-2>
<address>
<address-1>1100 North Glebe Road, 8th Floor</address-1>
<city>Arlington</city>
<state>VA</state>
<postalcode>22201</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In a combination contract for each leg or sub-contract, up to two different prices can be selected and allocating the number of products that the multiplier states between the two prices. Allowing each sub-contract to be traded at, at least, two different price ticks within the spread ensures a solution with a correct net price For each combination contract, which can be repeated any number of times (combination quantity). </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to an automated exchange system, and in particular to an automated exchange designed for trading combinations of contracts. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION AND PRIOR ART </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> When trading contracts for commodities, financial instruments or the like at an exchange in is quite common that the parties involved in the trade want to trade a number of different contracts all at the same time. Such an order involving a number of simultaneous trades of different products usually is given the precondition that the combined price for all the different subcontracts is equal or better than a predetermined price. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> An order involving a number of different simultaneous trades of contracts is usually referred to as a combination order or a combination contract order. For example, a person may wish to buy 7 contracts A and sell 6 contracts B and not pay more than $100 for the whole combination contract. The amount that the person pays or receives when a combination order is traded is referred to the net price of the combination order. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Furthermore, when a combination contract (or a number of them) are to be executed at a given net price, it is often necessary to determine the price for each product/sub-contract of the combination order. The price for each sub-contract, sometimes referred to as a leg. must be set so that when executing all the legs of a combination contract, the total price of all legs will equal the net price of the combination. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> However, the prices for the sub-contracts can not be set arbitrarily. The reason for this is the price structure of most today existing exchanges. The price for a given contract is generally traded at a discrete price. In other words it has to be at a valid price tick, i.e. an integer times the tick size. Also, there is a restriction that the net price has to be a valid price tick. For each product at each particular time, there will also be a valid interval, the price gap between the best selling price and best buying price (bid/ask), which is termed the spread. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> When trading combination contracts it is always desired and in same cases required that the price for each sub-contract/leg is within the spread at the time when the combination order is traded. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> However, today there exist no way of ensuring that all legs are traded within the spread for each product traded in the combination contract The problem arises from the fact that the sub-contracts are all traded at discrete prices. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Thus, the prices for the individual legs in some cases are hard to find regardless of which multipliers the legs in the combination have, regardless of the different spreads, regardless of the tick size, regardless of the combination quantity and regardless of the net price at which the combination order is matched. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Also, the calculations carried out in an automated exchange system when trying to determine the prices for the individual legs using a conventional algorithm are extensive, and use much processor power, and still may fail to deliver prices for the individual legs that are within the spread. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Today, the solution to this problem is to either let one or more of the legs be traded at a price outside the current spread or to reject the combination order. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Hence, there is a need to find a way to ensure that all combination orders can be traded regardless of which multipliers the legs in the combination contract have, regardless of the different spreads, regardless of the tick size, regardless of the combination quantity and regardless of the net price The algorithm used should preferably also reduce the load on the processor used to make the calculations. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> It is an object of the present invention to provide an improved computerized trading system for trading combination orders having means for determining the prices for the individual legs regardless of which multipliers the legs in the combination have, regardless of the different spreads, regardless of the tick size, regardless of the combination quantity and regardless of the net price at which orders are matched. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> It is another object of the present invention to provide a computerized trading system for trading combination orders that uses less processor power for calculating and determining the prices for the individual legs of a combination order by always providing a solution with a correct net price. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> This objects and others are obtained by the present invention as set out in the appended claims. Hence, for each leg, up to two different prices will be selected and allocating the number of products that the multiplier states between the two prices. Allowing each sub-contract to be traded at, at least, two different price ticks within the spread ensures a solution with a correct net price for each combination contract, which can be repeated any number of times (combination quantity).</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The present invention will now be described in more detail by way of non-limiting examples and with reference to the accompanying drawings, in which: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a general view of an automated exchange system. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flow chart illustrating different steps carried out when determining the prices for individual legs in a combination contract.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> general view of an automated exchange system is shown, The system comprises a number of remote terminals <highlight><bold>10</bold></highlight> all connected to a central computer <highlight><bold>12</bold></highlight> comprising a Central Processing Unit (CPU) <highlight><bold>13</bold></highlight> and a memory <highlight><bold>14</bold></highlight> associated therewith. The central computer <highlight><bold>12</bold></highlight> being loaded with suitable software, such as the CLICK&reg; software sold by OM Technology AB, Sweden, forms an automated exchange having all features and functionality of a conventional automated exchange. The remote terminals <highlight><bold>10</bold></highlight> are designed to send data to and receive data from the central computer <highlight><bold>12</bold></highlight>. The terminals <highlight><bold>10</bold></highlight> are further designed to provide an interface for investors, such as broker fires etc., trading contracts including combination contracts at the automated exchange. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> When trading a combination order in the system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, for each leg, up to two different prices can preferably be selected. Further, the number of products that the multiplier states are allocated between the two prices. By allowing the exchange to use different prices for the same product, a solution with a correct net price for each combination contract, which can be repeated any number of times (combination quantity), can be obtained. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Thus, given a combination contract, a tick size, and a valid price interval for the product of each leg, there will be a valid price interval for the net price. If the net price is outside that interval, it is always impossible to find a valid solution. Such an order will not be matched in the system. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> flow chart illustrating the different steps when calculating the different prices for the different legs is shown. The prices are preferably calculated one leg at a time, and the first leg is initially calculated as indicated in step <highlight><bold>201</bold></highlight> and <highlight><bold>202</bold></highlight>. Next, in step <highlight><bold>203</bold></highlight>, a percentage is determined using the net price in relation the combination spread as input. The percentage is set as the difference between the net price and the bid price of the current leg divided by the spread for the current leg. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> For the current leg, the percentage determined in step <highlight><bold>203</bold></highlight> is applied to the multiplier times the spread of that product, which gives an optimum price, step <highlight><bold>205</bold></highlight>. Two valid prices are then selected in a step <highlight><bold>207</bold></highlight>, with one tick apart so that one is above and one below (or at) the optimum price divided by the multiplier. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Depending on where the optimum price is compared with the two selected prices, the number of products given by the multiplier is allocated between the two prices so that the average price comes as close as possible to the optimum price, step <highlight><bold>209</bold></highlight>. When the prices for the first leg are determined, their contribution is subtracted from the not price, step <highlight><bold>210</bold></highlight> and the calculations are repeated as indicated in step <highlight><bold>211</bold></highlight> for the remaining legs using the residual net price in the calculations. The procedure is repeated until there are no more legs in the combination contract and the procedure then ends in a step <highlight><bold>213</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> For example, assume that two products, called A and B are traded at the automated exchange shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Assume that the tick size is 1, i.e. the minimum difference between two prices. Assume that the spread for A is 4 to 5, i.e. the bid price is 4 and the ask price is 5 and assume that the spread for B is 6 to 7. Assume further that a combination order to buy <highlight><bold>5</bold></highlight> A and sell <highlight><bold>2</bold></highlight> B (i.e. one combination contract) is sent to the exchange. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Thus in this example, the minimum allowed net price is 6 (5*4&minus;2*7&equals;6) and maximum allowed net price is 13 (5*5&minus;2*6&ap;13). In this example, the net price is set to 9; i.e. the combination contract is to be traded at the price 9. If the price for A is selected to 4, the price for B would have to be 5.50, which cannot be handled, since the tick size is 1 and which also is outside the spread. The other allowed price for A is 5, and then the price for B would have to be 8 to give the correct net price, which is outside the spread. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Using the algorithm as described herein the prices for the individual legs would be 3 contracts A at the price 4 and 2 contracts A at the price 5, and 1 contract B at the price <highlight><bold>6</bold></highlight> and 1 contract B at the price 7. This gives the correct net price for each combination contract and it can thus be multiplied with any combination quantity. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Below an exemplary computer program for implementing the algorithm described in conjunction with <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is shown.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>// Perform some preparatory calculations</entry>
</row>
<row>
<entry>cs_ask&lsqb;&num;legs&plus;1) &equals; 0</entry>
</row>
<row>
<entry>cs_bid&lsqb;&num;legs&plus;1) &equals; 0</entry>
</row>
<row>
<entry>loop 1: number of legs . . . 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>if (COMBO.leg&lsqb;i&rsqb;.operation &equals;&equals; BUY)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>c_ask&lsqb;i&rsqb; &equals; get_ask_price (COMBO.leg&lsqb;i&rsqb;.product)</entry>
</row>
<row>
<entry></entry>
<entry>c_bid&lsqb;i&rsqb; &equals; get_bid_price (COMBO.leg&lsqb;i&rsqb;.product)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>else</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>c_ask&lsqb;i&rsqb; &equals; -get_bid_price (COMBO.leg&lsqb;i&rsqb;.product)</entry>
</row>
<row>
<entry></entry>
<entry>c_bid&lsqb;i&rsqb; &equals; -get_ask_price (COMBO.leg&lsqb;i&rsqb;.product)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>c_ask&lsqb;i&rsqb; *&equals; COMBO.leg&lsqb;i&rsqb;.multipl</entry>
</row>
<row>
<entry></entry>
<entry>c_bid&lsqb;i&rsqb; *&equals; COMBO.leg&lsqb;i&rsqb;.multipl</entry>
</row>
<row>
<entry></entry>
<entry>cs_ask&lsqb;i&rsqb; &equals; c_ask&lsqb;i&rsqb; &plus; cs_ask&lsqb;i&plus;1&rsqb;</entry>
</row>
<row>
<entry></entry>
<entry>cs_bid&lsqb;i&rsqb; &equals; c_bid&lsqb;i&rsqb; &plus; cs_bid&lsqb;i&plus;1&rsqb;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>endloop</entry>
</row>
<row>
<entry>// cs_bid&lsqb;i&rsqb; and cs_ask&lsqb;1&rsqb; now contains the allowed spread for the</entry>
</row>
<row>
<entry>combo</entry>
</row>
<row>
<entry>// Validation of the combo contract is within spread</entry>
</row>
<row>
<entry>tmp_net &equals; COMBO.net_price</entry>
</row>
<row>
<entry>if (net &lt; cs_bid&lsqb;1&rsqb; &verbar;&verbar; tmp_net &gt; cs_ask&lsqb;1&rsqb;)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>return NOK</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>loop i: 1 . . . &num;legs</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>percent &equals; (tmp_net-cs_bid&lsqb;i&rsqb;) / (cs_ask&lsqb;i&rsqb;-cs_bid&lsqb;i&rsqb;)</entry>
</row>
<row>
<entry></entry>
<entry>tmp_pri &equals; abs (percent*(c_ask&lsqb;i&rsqb;-c_bid&lsqb;i&rsqb;) &plus; c_bid&lsqb;i&rsqb;)</entry>
</row>
<row>
<entry></entry>
<entry>// Note that the line below should not be performed for the</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>last</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>// leg if the algorithm is modified as described below</entry>
</row>
<row>
<entry></entry>
<entry>tmp_pri &equals; tick_size * round (tmp_pri/tick_size)</entry>
</row>
<row>
<entry></entry>
<entry>tmp_pri /&equals; COMBO.leg&lsqb;i&rsqb;.multipl</entry>
</row>
<row>
<entry></entry>
<entry>low_pri&lsqb;i&rsqb; &equals; tick size * floor (tmp_pri/tick_size)</entry>
</row>
<row>
<entry></entry>
<entry>high_pri&lsqb;i&rsqb; &equals; 1_pri&lsqb;i&rsqb; &plus; tick_size</entry>
</row>
<row>
<entry></entry>
<entry>hpr_vol&lsqb;i&rsqb; &equals; (tmp_pri-low_pri&lsqb;i&rsqb; * COMBO.leg&lsqb;i&rsqb;.multipl /</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>tick_size</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>lpr_vol&lsqb;i&rsqb; &equals; COMBO.leg&lsqb;i&rsqb;.multipl - hpr_vol&lsqb;i&rsqb;</entry>
</row>
<row>
<entry></entry>
<entry>if (COMBO.leg&lsqb;i&rsqb;.operation -- BUY)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>tmp_net &minus;&equals; tmp_pri * COMBO.leg&lsqb;i&rsqb;.multipl</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>else</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>tmp_net &plus;&equals; tmp_pri * COMBO.leg&lsqb;i&rsqb;.multipl</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>endloop</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Furthermore, it is quite common that the tick size varies over the whole price interval. This can also be handled by the algorithm as described herein provided that the combination tick size is an integer times each tick size. When the two valid prices are selected one tick apart, it is preferred to use the tick size that is valid at the optimum price divided by the multiplier. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Typically; when the tick size varies over the price interval, the combination tick size will equal the smallest tick size. Such cases can also be handled by the algorithm as long as all tick sizes are a multiple of the combination tick size (vice versa can also be combined). First of all, the legs with non-zero spread are preferably sorted so that the legs with the smallest tick size are calculated last. A change in the algorithm is also required. It should not to round the value for the last leg (marked in the pseudo code above). Then under certain circumstances, two selected volumes will in many cases be non-integers. By converting chose to fractional numbers, it can be determined which combination quantities that will still yield an integer value for the number of products at each price. It the smallest tick size equals the combination tick size, the solution will always be integer values and it will thus provide a result for any combination quantity. A common example is that the larger tick size is twice the smaller and that the combination tick size equals the smaller tick size. In this case if the net price is an odd number of small ticks and the tick size for each leg is the larger value, then the combination quantity must be an even number for the problem to have a valid solution. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the examples above, it is assumed that there is a requirement that all prices determined must be at valid ticks and within certain interval. If in certain applications such requirements do not exist, the algorithm can of course still be used. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> If it for some reason is determined that the spread for a particular leg is zero, that violates one of the initial assumptions for the algorithm. It can however easily be treated as well In that case, the legs only given one valid price, no spread are calculated first, and assign those legs the only valid price. Their contribution is then first subtracted from the net price and the algorithm is then applied to the remaining legs. If the spread is negative, it is impossible to assign a valid price at all, and the combination can thus not be priced. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of determining the price of individual sub-contracts when Patching a combination contract for different products in an automated exchange, the combination contract specifying at least a first number of sub-contracts for a first product and a second number of sub-contracts for a second number and a net-price, at least one of the products in the combination contract having a non-zero spread, the method comprising the step of: 
<claim-text>allowing the prices for at least the first number of the sub-contracts to be different, and </claim-text>
<claim-text>determining the price of the individual sub-contracts using different prices for at least the first number of the sub-contracts </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the prices for the individual sub-contracts are calculated product by product. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, when at least one product in the combination contract has a zero-spread, further comprising the step of deducting the price contribution from the zero-spread product (s) before determining the prices for the remaining product(s). </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, when the tick size varies over the valid price interval of a product, wherein the tick size valid at the optimum price divided by the multiplier is selected. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, when the tick size of a product varies over the valid price interval and the corresponding product combination tick size is equal the smallest tick size, wherein the sub-contracts with non-zero spread are sorted so that the sub-contracts with the smallest tick size are calculated last </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, when at least one sub-contract only is given one valid price, wherein the price(s) of said at least one sub-contract having only one valid price is first deducted from the net-price of the combination contract before determining the prices of the remaining sub-contracts of the combination contract. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. An automated exchange system having means for determining the price of individual sub-contracts when matching a combination contract for different products, the combination contract specifying a first number of sub-contracts for a first product and a second number of sub-contracts for a second number and a net-price, at least one of the products in the combination contract having a non-zero spread, the system comprising: 
<claim-text>means for allowing the prices for at least a first number of the sub-contracts to be different, and </claim-text>
<claim-text>means for determining the price of the individual sub-contracts using different prices for a least the first number of the sub-contracts. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, comprising means for calculating the prices for the individual subcontracts product by product, </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising means for deducting the price contribution from the zero-spread product(s) before determining the prices for the remaining product(s) when at least one product in the combination contract has a zero-spread. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising means for selecting the tick size valid at the optimum price divided by the multiplier when the tick size varies over the valid price interval of a product. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising means for sorting the sub-contracts with non-zero spread so that the sub-contracts with the smallest tick size are calculated last, when the tick size of a product varies over the valid price interval and the corresponding product combination tick size is equal the smallest tick size </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>. further comprising means for initially deducting the price(s) of any sub-contracts having only one valid price from the net-price of the combination contract before determining the prices of the remaining sub-contracts of the combination contract.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004899A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004899A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004899A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
