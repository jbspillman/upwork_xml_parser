<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005407A1-20030102-M00001.NB SYSTEM "US20030005407A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00001.TIF SYSTEM "US20030005407A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00002.NB SYSTEM "US20030005407A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00002.TIF SYSTEM "US20030005407A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00003.NB SYSTEM "US20030005407A1-20030102-M00003.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00003.TIF SYSTEM "US20030005407A1-20030102-M00003.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00004.NB SYSTEM "US20030005407A1-20030102-M00004.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00004.TIF SYSTEM "US20030005407A1-20030102-M00004.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00005.NB SYSTEM "US20030005407A1-20030102-M00005.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00005.TIF SYSTEM "US20030005407A1-20030102-M00005.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00006.NB SYSTEM "US20030005407A1-20030102-M00006.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00006.TIF SYSTEM "US20030005407A1-20030102-M00006.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-M00007.NB SYSTEM "US20030005407A1-20030102-M00007.NB" NDATA NB>
<!ENTITY US20030005407A1-20030102-M00007.TIF SYSTEM "US20030005407A1-20030102-M00007.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-C00001.CDX SYSTEM "US20030005407A1-20030102-C00001.CDX" NDATA CDX>
<!ENTITY US20030005407A1-20030102-C00001.MOL SYSTEM "US20030005407A1-20030102-C00001.MOL" NDATA MOL>
<!ENTITY US20030005407A1-20030102-C00001.TIF SYSTEM "US20030005407A1-20030102-C00001.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-P00801.TIF SYSTEM "US20030005407A1-20030102-P00801.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-P00900.TIF SYSTEM "US20030005407A1-20030102-P00900.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-P00901.TIF SYSTEM "US20030005407A1-20030102-P00901.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-P00802.TIF SYSTEM "US20030005407A1-20030102-P00802.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00000.TIF SYSTEM "US20030005407A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00001.TIF SYSTEM "US20030005407A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00002.TIF SYSTEM "US20030005407A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00003.TIF SYSTEM "US20030005407A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00004.TIF SYSTEM "US20030005407A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00005.TIF SYSTEM "US20030005407A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00006.TIF SYSTEM "US20030005407A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00007.TIF SYSTEM "US20030005407A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00008.TIF SYSTEM "US20030005407A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00009.TIF SYSTEM "US20030005407A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00010.TIF SYSTEM "US20030005407A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00011.TIF SYSTEM "US20030005407A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00012.TIF SYSTEM "US20030005407A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00013.TIF SYSTEM "US20030005407A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00014.TIF SYSTEM "US20030005407A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00015.TIF SYSTEM "US20030005407A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00016.TIF SYSTEM "US20030005407A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00017.TIF SYSTEM "US20030005407A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00018.TIF SYSTEM "US20030005407A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00019.TIF SYSTEM "US20030005407A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00020.TIF SYSTEM "US20030005407A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00021.TIF SYSTEM "US20030005407A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00022.TIF SYSTEM "US20030005407A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00023.TIF SYSTEM "US20030005407A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030005407A1-20030102-D00024.TIF SYSTEM "US20030005407A1-20030102-D00024.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005407</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09881391</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010612</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/44</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>717</class>
<subclass>104000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>717</class>
<subclass>107000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for coordination-centric design of software systems</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60213496</doc-number>
<document-date>20000623</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Kenneth</given-name>
<middle-name>J.</middle-name>
<family-name>Hines</family-name>
</name>
<residence>
<residence-us>
<city>Bothell</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>STOEL RIVES LLP</name-1>
<name-2></name-2>
<address>
<address-1>900 SW FIFTH AVENUE</address-1>
<address-2>SUITE 2600</address-2>
<city>PORTLAND</city>
<state>OR</state>
<postalcode>97204</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Coordination-centric design methodology facilitates the design and the debugging of software systems. Software systems comprise the following elements: components, coordinators and coordination interfaces. Components are function blocks. Coordinators manage all control and dataflow interactions between components based on a predetermined protocol. Coordination interfaces connect components to coordinators and allow control and dataflow information to be passed between components and coordinators. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a continuation of U.S. Provisional Application No. 60/213,496 filed Jun. 23, 2000, incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a system and method for designing software systems using reusable software elements and communication protocols. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A system design and programming methodology is most effective when it is closely integrated and coheres tightly with its corresponding debugging techniques. In distributed and embedded system methodologies, the relationship between debugging approaches and design methodologies has traditionally been one-sided in favor of the design and programming methodologies. Design and programming methodologies are typically developed without any consideration for the debugging techniques that will later be applied to software systems designed using that design and programming methodology. While these typical debugging approaches attempt to exploit features provided by the design and programming methodologies, the debugging techniques will normally have little or no impact on what the design and programming features are in the first place. This lack of input from debugging approaches to design and programming methodologies serves to maintain the role of debugging as an afterthought, even though in a typical system design, debugging consumes a majority of the design time. The need remains for a design and programming methodology that reflects input from, and consideration of, potential debugging approaches in order to enhance the design and reduce the implementation time of software systems. </paragraph>
<paragraph id="P-0004" lvl="7"><number>&lsqb;0004&rsqb;</number> 1. Packaging of Software Elements </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Packaging refers to the set of interfaces a software element presents to other elements in a system. Software packaging has many forms in modern methodologies. Some examples are programming language procedure call interfaces (as with libraries), TCP/IP socket interfaces with scripting languages (as with mail and Web servers), and file formats. Several typical prior art packaging styles are described below, beginning with packaging techniques used in object-oriented programming languages and continuing with a description of more generalized approaches to packaging. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A. Object-Oriented Approaches to Packaging </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> One common packaging style is based on object-oriented programming languages and provides procedure-based (method-based) packaging for software elements (objects within this framework). These procedure-based packages allow polymorphism (in which several types of objects can have identical interfaces) through subtyping, and code sharing through inheritance (deriving a new class of objects from an already existing class of objects). In a typical object-oriented programming language, an object&apos;s interface is defined by the object&apos;s methods. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Object-oriented approaches are useful in designing concurrent systems (systems with task level parallelism and multiple processing resources&quest;) because of the availability of active objects (objects with a thread of control). Some common, concurrent object-oriented approaches are shown in actor languages and in concurrent Eiffel. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Early object-oriented approaches featured anonymity of objects through dynamic typechecking. This anonymity of objects meant that a first object did not need to know anything about a second object in order to send a message to the second object. One unfortunate result of this anonymity of objects was that the second object could unexpectedly respond to the first object that the sent message was not understood, resulting in a lack of predictability, due to this disruption of system executions, for systems designed with this object-oriented approach. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Most modern object-oriented approaches opt to sacrifice the benefits flowing from anonymity of objects in order to facilitate stronger static typing (checking to ensure that objects will properly communicate with one another before actually executing the software system). The main result of stronger static typing is improved system predictability. However, an unfortunate result of sacrificing the anonymity of objects is a tighter coupling between those objects, whereby each object must explicitly classify, and include knowledge about, other objects to which it sends messages. In modern object-oriented approaches the package (interface) has become indistinguishable from the object and the system in which the object is a part. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The need remains for a design and programming methodology that combines the benefits of anonymity for the software elements with the benefits derived from strong static typing of system designs. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> B. Other Approaches to Packaging </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Other packaging approaches provide higher degrees of separation between software elements and their respective packages than does the packaging in object-oriented systems. For example, the packages in event-based frameworks are interfaces with ports for transmitting and receiving events. These provide loose coupling for interelement communication. However, in an event-based framework, a software designer must explicitly implement interelement state coherence between software elements as communication between those software elements. This means that a programmer must perform the error-prone task of designing, optimizing, implementing, and debugging a specialized communication protocol for each state coherence requirement in a particular software system. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The common object request broker architecture (CORBA) provides an interface description language (IDL) for building packages around software elements written in a variety of languages. These packages are remote procedure call (RPC) based and provide no support for coordinating state between elements. With flexible packaging, an element&apos;s package is implemented as a set of co-routines that can be adapted for use with applications through use of adapters with interfaces complementary to the interface for the software element. These adapters can be application-specific&mdash;used only when the elements are composed into a system. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The use of co-routines lets a designer specify transactions or sequences of events as part of an interface, rather than just as atomic events. Unfortunately, co-routines must be executed in lock-step, meaning a transition in one routine corresponds to a transition in the other co-routine. If there is an error in one or if an expected event is lost, the interface will fail because its context will be incorrect to recover from the lost event and the co-routines will be out of sync. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The need remains for a design and programming methodology that provides software packaging that supports the implementation of state coherence in distributed concurrent systems without packaging or interface failure when an error or an unexpected event occurs. </paragraph>
<paragraph id="P-0017" lvl="7"><number>&lsqb;0017&rsqb;</number> 2. Approaches to Coordination </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Coordination, within the context of this application, means the predetermined ways through which software components interact. In a broader sense, coordination refers to a methodology for composing concurrent components into a complete system. This use of the term coordination differs slightly from the use of the term in the parallelizing compiler literature, in which coordination refers to a technique for maintaining programwide semantics for a sequential program decomposed into parallel subprograms. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A. Coordination Languages </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Coordination languages are usually a class of tuple-space programming languages, such as Linda. A tuple is a data object containing two or more types of data that are identified by their tags and parameter lists. In tuple-space languages, coordination occurs through the use of tuple spaces, which are global multisets of tagged tuples stored in shared memory. Tuple-space languages extend existing programming languages by adding six operators: out, in, read, eval, inp, and readp. The out, in, and read operators place, fetch and remove, and fetch without removing tuples from tuple space. Each of these three operators blocks until its operation is complete. The out operator creates tuples containing a tag and several arguments. Procedure calls can be included in the arguments, but since out blocks, the calls must be performed and the results stored in the tuple before the operator can return. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The operators eval, inp, and readp are nonblocking versions of out, in, and read, respectively. They increase the expressive power of tuple-space languages. Consider the case of eval, the nonblocking version of out. Instead of evaluating all arguments of the tuple before returning, it spawns a thread to evaluate them, creating, in effect, an active tuple (whereas tuples created by out are passive). As with out, when the computation is finished, the results are stored in a passive tuple and left in tuple space. Unlike out, however, the eval call returns immediately, so that several active tuples can be left outstanding. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Tuple-space coordination can be used in concise implementations of many common interaction protocols. Unfortunately, tuple-space languages do not separate coordination issues from programming issues. Consider the annotated Linda implementation of RPC in Listing 1.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<colspec colname="2" colwidth="42PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>rpcCall (args) &ensp;&lcub;</entry>
<entry>/* C */</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>out (&Prime;RPCToServer&Prime;, &Prime;Client&Prime;, args . . .</entry>
</row>
<row>
<entry></entry>
<entry>in (&Prime;Client, &Prime;ReturnFromServer&Prime;, &amp;returnValue);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<colspec colname="2" colwidth="42PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>return returnValue;</entry>
<entry>/* C */</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<colspec colname="2" colwidth="42PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&rcub;</entry>
<entry>/* C */</entry>
</row>
<row>
<entry></entry>
<entry>Server:</entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry>. . .</entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry>while (true) &ensp;&lcub;</entry>
<entry>/* C */</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>in(&Prime;RPCToServer&Prime;, &amp;returnAddress, args . . . );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<colspec colname="2" colwidth="42PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>returnValue &equals; functionCall (args);</entry>
<entry>/* C */</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>out (returnAddress, &Prime;ReturnFromServer&Prime;, returnValue);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="175PT" align="left"/>
<colspec colname="1" colwidth="42PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>/* C */</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0023" lvl="7"><number>&lsqb;0023&rsqb;</number> Listing 1: Linda Used to Emulate RPC </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Although the implementation depicted in Listing 1 is a compact representation of an RPC protocol, the implementation still depends heavily on an accompanying programming language (in this case, C). This dependency prevents designers from creating a new Linda RPC operator for arbitrary applications of RPC. Therefore, every time a designer uses Linda for RPC, they must copy the source code for RPC or make a C-macro. This causes tight coupling, because the client must know the name of the RPC server. If the server name is passed in as a parameter, flexibility increases; however, this requires a binding phase in which the name is obtained and applied outside of the Linda framework. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The need remains for a design and programming methodology that allows implementation of communication protocols without tight coupling between the protocol implementation and the software elements with which the protocol implementation works. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A tuple space can require large quantities of dynamically allocated memory. However, most systems, and especially embedded systems, must operate within predictable and sometimes small memory requirements. Tuple-space systems are usually not suitable for coordination in systems that must operate within small predictable memory requirements because once a tuple has been generated, it remains in tuple space until it is explicitly removed or the software element that created it terminates. Maintaining a global tuple space can be very expensive in terms of overall system performance. Although much work has gone into improving the efficiency of tuple-space languages, system performance remains worse with tuple-space languages than with message-passing techniques. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The need remains for a design and programming methodology that can effectively coordinate between software elements while respecting performance and predictable memory requirements. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> B. Fixed Coordination Models </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In tuple-space languages, much of the complexity of coordination remains entangled with the functionality of computational elements. An encapsulating coordination formalism decouples intercomponent interactions from the computational elements. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> This type of formalism can be provided by fixed coordination models in which the coordination style is embodied in an entity and separated from computational concerns. Synchronous coordination models coordinate activity through relative schedules. Typically, these approaches require the coordination protocol to be manually constructed in advance. In addition, computational elements must be tailored to the coordination style used for a particular system (which may require intrusive modification of the software elements). </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The need remains for a design and programming methodology that allows for coordination between software elements without tailoring the software elements to the specific coordination style used in a particular software system. </paragraph>
</section>
<section>
<heading lvl="1">Summary of the Invention </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The present invention provides a coordination-centric design and programming methodology to facilitate both the design and the debugging of software systems. This approach includes an encapsulating formalism for coordination. In accordance with the present invention, coordination protocols are embodied in coordinators. Coordinators serve to expose the workings of a coordination protocol and organize relevant system information in a meaningful manner. This facilitates coordination-based debugging by letting designers focus on coordination as an entity separate from computation and by showing designers what is happening internally within a software system. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In accordance with the present invention, functional blocks, or software elements, are represented as components. Components contain modes that define behaviors, actions that perform these behaviors, and coordination interfaces that connect components to other components through coordinators. Packaging software elements in this fashion provides more modularity for the components than prior art design and programming methodologies. Coordination interfaces make both the data and control aspects of intercomponent interactions explicit, so that the control and data interactions can be adapted to a variety of interaction protocols without needing internal modifications to the components. The same coordination interface type can be used by a variety of components. Any component in a software system can be replaced by a new component having completely different functionality without any other components within the system needing to know that a change has been made, as long as the new component has a coordination interface appropriate for the coordinator in the software system. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Both components and coordinators can be composed hierarchically to form higher-order functionality and interaction protocols. This facilitates design complexity management. All pieces of the coordination-centric design methodology work together to provide both the software designers and the debugging tools with information about the software system&apos;s behavior and the behavior of the software system&apos;s components. This information serves to simplify software system design and software system debugging. The coordination interfaces expose control state and message traffic to scrutiny by software designers and debugging tools. Meanwhile, coordinators expose interaction protocols to scrutiny by software designers and debugging tools. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In accordance with the present invention, the coordination-centric design methodology treats design and debugging as interrelated issues and, as a result, makes complex embedded software more debuggable and more easily designable. Debugging in fact dominates embedded system software development time, and the debugging approach of the present invention facilitates the debugging of complex embedded systems and makes other aspects of the design flow, such as managing design complexity and reusing software, easier than in prior art design and programming methodologies. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Additional aspects and advantages of this invention will be apparent from the following detailed description of preferred embodiments thereof, which proceeds with reference to the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a component in accordance with the present invention. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is the component of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> further having a set of coordination interfaces. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> is a prior art round-robin resource allocation protocol with a centralized controller. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> is a prior art round-robin resource allocation protocol implementing a token passing scheme. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a detailed view of a component and a coordination interface connected to the component for use in round-robin resource allocation in accordance with the present invention. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> depicts a round-robin coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows several typical ports for use in a coordination interface in accordance with the present invention. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a unidirectional data transfer coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> is a bidirectional data transfer coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> is a state unification coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6D</cross-reference> is a control state mutex coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a system for implementing subsumption resource allocation having components, a shared resource, and a subsumption coordinator. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a barrier synchronization coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a rendezvous coordinator in accordance with the present invention. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a dedicated RPC system having a client, a server, and a dedicated RPC coordinator coordinating the activities of the client and the server. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a compound coordinator with both preemption and round-robin coordination for controlling the access of a set of components to a shared resource. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12A</cross-reference> is software system with two data transfer coordinators, each having constant message consumption and generation rules and each connected to a separate data-generating component and connected to the same data-receiving component. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12B</cross-reference> is the software system of <cross-reference target="DRAWINGS">FIG. 12A</cross-reference> in which the two data transfer coordinators have been replaced with a merged data transfer coordinator. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a system implementing a first come, first served resource allocation protocol in accordance with the present invention. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a system implementing a multiclient RPC coordination protocol formed by combining the first come, first served protocol of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> with the dedicated RPC coordinator of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> depicts a large system in which the coordination-centric design methodology can be employed having a wireless device interacting with a cellular network. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows a top-level view of the behavior and components for a system for a cell phone. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17A</cross-reference> is a detailed view of a GUI component of the cell phone of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17B</cross-reference> is a detailed view of a call log component of the cell phone of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> is a detailed view of a voice subsystem component of the cell phone of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> is a detailed view of a connection component of the cell phone of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> depicts the coordination layers between a wireless device and a base station, and between the base station and a switching center, of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> depicts a cell phone call management component, a master switching center call management component, and a call management coordinator connecting the respective call management components. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21A</cross-reference> is a detailed view of a transport component of the connection component of <cross-reference target="DRAWINGS">FIG. 18B</cross-reference>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21B</cross-reference> is a CDMA data modulator of the transport component of <cross-reference target="DRAWINGS">FIG. 18B</cross-reference>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a detailed view of a typical TDMA and a typical CDMA signal for the cell phone of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23A</cross-reference> is a LCD touch screen component for a Web browser GUI for a wireless device. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23B</cross-reference> is a Web page formatter component for the Web browser GUI for the wireless device. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24A</cross-reference> is a completed GUI system for a handheld Web browser. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24B</cross-reference> shows the GUI system for the handheld Web browser combined with the connection subsystem of <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> in order to access the cellular network of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an example of a component <highlight><bold>100</bold></highlight>, which is the basic software element within the coordination-centric design framework, in accordance with the present invention. With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, component <highlight><bold>100</bold></highlight> contains a set of modes <highlight><bold>102</bold></highlight>. Each mode <highlight><bold>102</bold></highlight> corresponds to a specific behavior associated with component <highlight><bold>100</bold></highlight>. Each mode <highlight><bold>102</bold></highlight> can either be active or inactive, respectively enabling or disabling the behavior corresponding to that mode <highlight><bold>102</bold></highlight>. Modes <highlight><bold>102</bold></highlight> can make the conditional aspects of the behavior of component <highlight><bold>100</bold></highlight> explicit. The behavior of component <highlight><bold>100</bold></highlight> is encapsulated in a set of actions <highlight><bold>104</bold></highlight>, which are discrete, event-triggered behavioral elements within the coordination-centric design methodology. Component <highlight><bold>100</bold></highlight> can be copied and the copies of component <highlight><bold>100</bold></highlight> can be modified, providing the code-sharing benefits of inheritance. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Actions <highlight><bold>104</bold></highlight> are enabled and disabled by modes <highlight><bold>102</bold></highlight>, and hence can be thought of as effectively being properties of modes <highlight><bold>102</bold></highlight>. An event (not shown) is an instantaneous condition, such as a timer tick, a data departure or arrival, or a mode change. Actions <highlight><bold>104</bold></highlight> can activate and deactivate modes <highlight><bold>102</bold></highlight>, thereby selecting the future behavior of component <highlight><bold>100</bold></highlight>. This is similar to actor languages, in which methods are allowed to replace an object&apos;s behavior. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In coordination-centric design, however, all possible behaviors must be identified and encapsulated before runtime. For example, a designer building a user interface component for a cell phone might define one mode for looking up numbers in an address book (in which the user interface behavior is to display complete address book entries in formatted text) and another mode for displaying the status of the phone (in which the user interface behavior is to graphically display the signal power and the battery levels of the phone). The designer must define both the modes and the actions for the given behaviors well before the component can be executed. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is component <highlight><bold>100</bold></highlight> further including a first coordination interface <highlight><bold>200</bold></highlight>, a second coordination interface <highlight><bold>202</bold></highlight>, and a third coordination interface <highlight><bold>204</bold></highlight>. Coordination-centric design&apos;s components <highlight><bold>100</bold></highlight> provide the code-sharing capability of object-oriented inheritance through copying. Another aspect of object-oriented inheritance is polymorphism through shared interfaces. In object-oriented languages, an object&apos;s interface is defined by its methods. Although coordination-centric design&apos;s actions <highlight><bold>104</bold></highlight> are similar to methods in object-oriented languages, they do not define the interface for component <highlight><bold>100</bold></highlight>. Components interact through explicit and separate coordination interfaces, in this figure coordination interfaces <highlight><bold>200</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>204</bold></highlight>. The shape of coordination interfaces <highlight><bold>200</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>204</bold></highlight> determines the ways in which component <highlight><bold>100</bold></highlight> may be connected within a software system. The way coordination interfaces <highlight><bold>200</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>204</bold></highlight> are connected to modes <highlight><bold>102</bold></highlight> and actions <highlight><bold>104</bold></highlight> within component <highlight><bold>100</bold></highlight> determines how the behavior of component <highlight><bold>100</bold></highlight> can be managed within a system. Systemwide behavior is managed through coordinators (see <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B and subsequent). </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> For our approach to be effective, several factors in the design of software elements must coincide: packaging, internal organization, and how elements coordinate their behavior. Although these are often treated as independent issues, conflicts among them can exacerbate debugging. We handle them in a unified framework that separates the internal activity from the external relationship of component <highlight><bold>100</bold></highlight>. This lets designers build more modular components and encourages them to specify distributable versions of coordination protocols. Components can be reused in a variety of contexts, both distributed, and single processor <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="7"><number>&lsqb;0077&rsqb;</number> 1. Introduction to Coordination </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Within this application, coordination refers to the predetermined ways by which components interact. Consider a common coordination activity: resource allocation. One simple protocol for this is round-robin: participants are lined up, and the resource is given to each participant in turn. After the last participant is served, the resource is given back to the first. There is a resource-scheduling period during which each participant gets the resource exactly once, whether or not it is needed. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> is prior art round-robin resource allocation protocol with a centralized controller <highlight><bold>300</bold></highlight>, which keeps track of and distributes the shared resource (not shown) to each of software elements <highlight><bold>302</bold></highlight>, <highlight><bold>304</bold></highlight>, <highlight><bold>306</bold></highlight>, <highlight><bold>308</bold></highlight>, and <highlight><bold>310</bold></highlight> in turn. With reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, controller <highlight><bold>300</bold></highlight> alone determines which software element <highlight><bold>302</bold></highlight>, <highlight><bold>304</bold></highlight>, <highlight><bold>306</bold></highlight>, <highlight><bold>308</bold></highlight>, or <highlight><bold>310</bold></highlight> is currently allowed to use the resource and which has it next. This implementation of a round-robin protocol permits software elements <highlight><bold>302</bold></highlight>, <highlight><bold>304</bold></highlight>, <highlight><bold>306</bold></highlight>, <highlight><bold>308</bold></highlight>, and <highlight><bold>310</bold></highlight> to be modular, because only controller <highlight><bold>300</bold></highlight> keeps track of the software elements. Unfortunately, when this implementation is implemented on a distributed architecture (not shown), controller <highlight><bold>300</bold></highlight> must typically be placed on a single processing element (not shown). As a result, all coordination requests must go through that processing element, which can cause a communication performance bottleneck. For example, consider the situation in which software elements <highlight><bold>304</bold></highlight> and <highlight><bold>306</bold></highlight> are implemented on a first processing element (not shown) and controller <highlight><bold>300</bold></highlight> is implemented on a second processing element. Software element <highlight><bold>304</bold></highlight> releases the shared resource and must send a message indicating this to controller <highlight><bold>300</bold></highlight>. Controller <highlight><bold>300</bold></highlight> must then send a message to software element <highlight><bold>306</bold></highlight> to inform software element <highlight><bold>306</bold></highlight> that it now has the right to the shared resource. If the communication channel between the first processing resource and the second processing resource is in use or the second processing element is busy, then the shared resource must remain idle, even though both the current resource holder and the next resource holder (software elements <highlight><bold>304</bold></highlight> and <highlight><bold>306</bold></highlight> respectively) are implemented on the first processing element (not shown). The shared resource must typically remain idle until communication can take place and controller <highlight><bold>300</bold></highlight> can respond. This is an inefficient way to control access to a shared resource. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> is a prior art round-robin resource allocation protocol implementing a token passing scheme. With reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, this system consists of a shared resource <highlight><bold>311</bold></highlight> and a set of software elements <highlight><bold>312</bold></highlight>, <highlight><bold>314</bold></highlight>, <highlight><bold>316</bold></highlight>, <highlight><bold>318</bold></highlight>, <highlight><bold>320</bold></highlight>, and <highlight><bold>322</bold></highlight>. In this system a logical token <highlight><bold>324</bold></highlight> symbolizes the right to access resource <highlight><bold>311</bold></highlight>, i.e., when a software element holds token <highlight><bold>324</bold></highlight>, it has the right to access resource <highlight><bold>311</bold></highlight>. When one of software elements <highlight><bold>312</bold></highlight>, <highlight><bold>314</bold></highlight>, <highlight><bold>316</bold></highlight>, <highlight><bold>318</bold></highlight>, <highlight><bold>320</bold></highlight>, or <highlight><bold>322</bold></highlight> finishes with resource <highlight><bold>311</bold></highlight>, it passes token <highlight><bold>324</bold></highlight>, and with token <highlight><bold>324</bold></highlight> the access right, to a successor. This implementation can be distributed without a centralized controller, but as shown in FIG. v<highlight><bold>3</bold></highlight>B, this is less modular, because it requires each software element in the set to keep track of a successor. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Not only must software elements <highlight><bold>312</bold></highlight>, <highlight><bold>314</bold></highlight>, <highlight><bold>316</bold></highlight>, <highlight><bold>318</bold></highlight>, <highlight><bold>320</bold></highlight>, and <highlight><bold>322</bold></highlight> keep track of successors, but each must implement a potentially complicated and error-prone protocol for transferring token <highlight><bold>324</bold></highlight> to its successor. Bugs can cause token <highlight><bold>324</bold></highlight> to be lost or introduce multiple tokens <highlight><bold>324</bold></highlight>. Since there is no formal connection between the physical system and complete topology maps (diagrams that show how each software element is connected to others within the system), some software elements might erroneously be serviced more than once per cycle, while others are completely neglected. However, these bugs can be extremely difficult to track after the system is completed. The protocol is entangled with the functionality of each software element, and it is difficult to separate the two for debugging purposes. Furthermore, if a few of the software elements are located on the same machine, performance of the implementation can be poor. The entangling of computation and coordination requires intrusive modification to optimize the system. </paragraph>
<paragraph id="P-0082" lvl="7"><number>&lsqb;0082&rsqb;</number> 2. Coordination-Centric Design&apos;s Approach to Coordination </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The coordination-centric design methodology provides an encapsulating formalism for coordination. Components such as component <highlight><bold>100</bold></highlight> interact using coordination interfaces, such as first, second, and third coordination interfaces <highlight><bold>200</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>204</bold></highlight>, respectively. Coordination interfaces preserve component modularity while exposing any parts of a component that participate in coordination. This technique of connecting components provides polymorphism in a similar fashion to subtyping in object-oriented languages. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a detailed view of a component <highlight><bold>400</bold></highlight> and a resource access coordination interface <highlight><bold>402</bold></highlight> connected to component <highlight><bold>400</bold></highlight> for use in a round-robin coordination protocol in accordance with the present invention. With reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, resource access coordination interface <highlight><bold>402</bold></highlight> facilitates implementation of a round-robin protocol that is similar to the token-passing round-robin protocol described above. Resource access coordination interface <highlight><bold>402</bold></highlight> has a single bit of control state, called access, which is shown as an arbitrated control port <highlight><bold>404</bold></highlight> that indicates whether or not component <highlight><bold>400</bold></highlight> is holding a virtual token (not shown). Component <highlight><bold>400</bold></highlight> can only use a send message port <highlight><bold>406</bold></highlight> on access coordination interface <highlight><bold>402</bold></highlight> when arbitrated control port <highlight><bold>404</bold></highlight> is true. Access coordination interface <highlight><bold>402</bold></highlight> further has a receive message port <highlight><bold>408</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> show a round-robin coordinator <highlight><bold>410</bold></highlight> in accordance with the present invention. With reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, round-robin coordinator <highlight><bold>410</bold></highlight> has a set of coordinator coordination interfaces <highlight><bold>412</bold></highlight> for connecting to a set of components <highlight><bold>400</bold></highlight>. Each component <highlight><bold>400</bold></highlight> includes a resource access coordination interface <highlight><bold>402</bold></highlight>. Each coordinator coordination interface <highlight><bold>412</bold></highlight> has a coordinator arbitrated control port <highlight><bold>414</bold></highlight>, an incoming send message port <highlight><bold>416</bold></highlight> and an outgoing receive message port <highlight><bold>418</bold></highlight>. Coordinator coordination interface <highlight><bold>412</bold></highlight> in complimentary to resource access coordination interface <highlight><bold>402</bold></highlight>, and vice versa, because the ports on the two interfaces are compatible and can function to transfer information between the two interfaces. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The round-robin protocol requires round-robin coordinator <highlight><bold>410</bold></highlight> to manage the coordination topology. Round-robin coordinator <highlight><bold>410</bold></highlight> is an instance of more general abstractions called coordination classes, in which coordination classes define specific coordination protocols and a coordinator is a specific implementation of the coordination class. Round-robin coordinator <highlight><bold>410</bold></highlight> contains all information about how components <highlight><bold>400</bold></highlight> are supposed to coordinate. Although round-robin coordinator <highlight><bold>410</bold></highlight> can have a distributed implementation, no component <highlight><bold>400</bold></highlight> is required to keep references to any other component <highlight><bold>400</bold></highlight> (unlike the distributed round-robin implementation shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>). All required references are maintained by round-robin coordinator <highlight><bold>410</bold></highlight> itself, and components <highlight><bold>400</bold></highlight> do not even need to know that they are coordinating through round-robin. Resource access coordination interface <highlight><bold>402</bold></highlight> can be used with any coordinator that provides the appropriate complementary interface. A coordinator&apos;s design is independent of whether it is implemented on a distributed platform or on a monolithic single processor platform. </paragraph>
<paragraph id="P-0087" lvl="7"><number>&lsqb;0087&rsqb;</number> 3. Coordination Interfaces </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Coordination interfaces are used to connect components to coordinators. They are also the principle key to a variety of useful runtime debugging techniques. Coordination interfaces support component modularity by exposing all parts of the component that participate in the coordination protocol. Ports are elements of coordination interfaces, as are guarantees and requirements, each of which will be described in turn. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> A. Ports </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> A port is a primitive connection point for interconnecting components. Each port is a five-tuple (T; A; Q; D; R) in which: </paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> T represents the data type of the port. T can be one of int, boolean, char, byte, float, double, or cluster, in which cluster represents a cluster of data types (e.g., an int followed by a float followed by two bytes). </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> A is a boolean value that is true if the port is arbitrated and false otherwise. </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> Q is an integer greater than zero that represents logical queue depth for a port. </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> D is one of in, out, inout, or custom and represents the direction data flows with respect to the port. </paragraph>
<paragraph id="P-0095" lvl="2"><number>&lsqb;0095&rsqb;</number> R is one of discard-on-read, discard-on-transfer, or hold and represents the policy for data removal on the port. Discard-on-read indicates that data is removed immediately after it is read (and any data in the logical queue are shifted), discard-on-transfer indicates that data is removed from a port immediately after being transferred to another port, and hold indicates that data should be held until it is overwritten by another value. Hold is subject to arbitration. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Custom directionality allows designers to specify ports that accept or generate only certain specific values. For example, a designer may want a port that allows other components to activate, but not deactivate, a mode. While many combinations of port attributes are possible, we normally encounter only a few. The three most common are message ports (output or input), state ports (output, input, or both; sometimes arbitrated), and control ports (a type of state port). <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the visual syntax used for several common ports throughout this application. With reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, this figure depicts an exported state port <highlight><bold>502</bold></highlight>, an imported state port <highlight><bold>504</bold></highlight>, an arbitrated state port <highlight><bold>506</bold></highlight>, an output data port <highlight><bold>508</bold></highlight>, and an input data port <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> 1. Message Ports </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Message ports (output and input) data ports <highlight><bold>508</bold></highlight> and <highlight><bold>510</bold></highlight> respectively) are either send (T; false; <highlight><bold>1</bold></highlight>; out; discard-on-transfer) or receive (T; false; Q; in; discard-on-read). Their function is to transfer data between components. Data passed to a send port is transferred immediately to the corresponding receive port, thus it cannot be retrieved from the send port later. Receive data ports can have queues of various depths. Data arrivals on these ports are frequently used to trigger and pass data parameters into actions. Values remain on receive ports until they are read. </paragraph>
<paragraph id="P-0099" lvl="7"><number>&lsqb;0099&rsqb;</number> 2. State Ports </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> State ports take one of three forms: </paragraph>
<paragraph id="P-0101" lvl="2"><number>&lsqb;0101&rsqb;</number> 1. (T; false; <highlight><bold>1</bold></highlight>; out; hold) </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> 2. (T; false; <highlight><bold>1</bold></highlight>; in; hold) </paragraph>
<paragraph id="P-0103" lvl="2"><number>&lsqb;0103&rsqb;</number> 3. (T; true; <highlight><bold>1</bold></highlight>; inout; hold) </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> State ports, such as exported state port <highlight><bold>502</bold></highlight>, imported state port <highlight><bold>504</bold></highlight>, and arbitrated state port <highlight><bold>506</bold></highlight>, hold persistent values, and the value assigned to a state port may be arbitrated. This means that, unlike message ports, values remain on the state ports until changed. When multiple software elements simultaneously attempt to alter the value of arbitrated state port <highlight><bold>506</bold></highlight>, the final value is determined based on arbitration rules provided by the designer through an arbitration coordinator (not shown). </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> State ports transfer variable values between scopes, as explained below. In coordination-centric design, all variables referenced by a component are local to that component, and these variables must be explicitly declared in the component&apos;s scope. Variables can, however, be bound to state ports that are connected to other components. In this way a variable value can be transferred between components and the variable value achieves the system-level effect of a multivariable. </paragraph>
<paragraph id="P-0106" lvl="7"><number>&lsqb;0106&rsqb;</number> 3. Control Ports </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Control ports are similar to state ports, but a control port is limited to having the boolean data type. Control ports are typically bound to modes. Actions interact with a control port indirectly, by setting and responding to the values of a mode that is bound to the control port. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> For example, arbitrated control port <highlight><bold>404</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a control port that can be bound to a mode (not shown) containing all actions that send data on a shared channel. When arbitrated control port <highlight><bold>404</bold></highlight> is false, the mode is inactive, disabling all actions that send data on the channel. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> B. Guarantees </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Guarantees are formal declarations of invariant properties of a coordination interface. There can be several types of guarantees, such as timing guarantees between events, guarantees between control state (e.g., state A and state B are guaranteed to be mutually exclusive), etc. Although a coordination interface&apos;s guarantees reflect properties of the component to which the coordination interface is connected, the guarantees are not physically bound to any internal portions of the component. Guarantees can often be certified through static analysis of the software system. Guarantees are meant to cache various properties that are inherent in a component or a coordinator in order to simplify static analysis of the software system. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> A guarantee is a promise provided by a coordination interface. The guarantee takes the form of a predicate promised to be invariant. In principle, guarantees can include any type of predicate (e.g., x&gt;3, in which x is an integer valued state port, or t<highlight><subscript>ea</subscript></highlight>&minus;t<highlight><subscript>eb</subscript></highlight>&lt;2 ms). Throughout the remainder of this application, guarantees will be only event-ordering guarantees (guarantees that specify acceptable orders of events) or control-relationship guarantees (guarantees pertaining to acceptable relative component behaviors). </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> C. Requirements </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> A requirement is a formal declaration of the properties necessary for correct software system functionality. An example of a requirement is a required response time for a coordination interface-the number of messages that must have arrived at the coordination interface before the coordination interface can transmit, or fire, the messages. When two coordination interfaces are bound together, the requirements of the first coordination interface must be conservatively matched by the guarantees of the second coordination interface (e.g., x&lt;7 as a guarantee conservatively matches x&lt;<highlight><bold>8</bold></highlight> as a requirement). As with guarantees, requirements are not physically bound to anything within the component itself. Guarantees can often be verified to be sufficient for the correct operation of the software system in which the component is used. In sum, a requirement is a predicate on a first coordination interface that must be conservatively matched with a guarantee on a complementary second coordination interface. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> D. Conclusion Regarding Coordination Interfaces </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> A coordination interface is a four-tuple (P; G; R; I) in which: </paragraph>
<paragraph id="P-0116" lvl="2"><number>&lsqb;0116&rsqb;</number> P is a set of named ports. </paragraph>
<paragraph id="P-0117" lvl="2"><number>&lsqb;0117&rsqb;</number> G is a set of named guarantees provided by the interface. </paragraph>
<paragraph id="P-0118" lvl="2"><number>&lsqb;0118&rsqb;</number> R is a set of named requirements that must be matched by guarantees of connected interfaces. </paragraph>
<paragraph id="P-0119" lvl="2"><number>&lsqb;0119&rsqb;</number> I is a set of named coordination interfaces. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> As this definition shows, coordination interfaces are recursive. Coordinator coordination interface <highlight><bold>412</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, used for round-robin coordination is called AccessInterface and is defined in Table 1.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42PT" align="left"/>
<colspec colname="2" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Constituent</entry>
<entry>Value</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>ports</entry>
<entry>P &equals; &lcub;access:StatePort, s:outMessagePort, r:inMessagePort&rcub;</entry>
</row>
<row>
<entry>guarantees</entry>
<entry>G &equals; &lcub;&boxdl; access <custom-character file="US20030005407A1-20030102-P00801.TIF" wi="20" he="20" id="custom-character-00001"/>&boxdl; s.gen &rcub;</entry>
</row>
<row>
<entry>requirements</entry>
<entry>R &equals; &empty;</entry>
</row>
<row>
<entry>interfaces</entry>
<entry>I &equals; &empty;</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Related to coordination interfaces is a recursive coordination interface descriptor, which is a five-tuple (P<highlight><subscript>a</subscript></highlight>; G<highlight><subscript>a</subscript></highlight>; R<highlight><subscript>a</subscript></highlight>; I<highlight><subscript>d</subscript></highlight>; N<highlight><subscript>d</subscript></highlight>) in which: </paragraph>
<paragraph id="P-0122" lvl="1"><number>&lsqb;0122&rsqb;</number> P<highlight><subscript>a </subscript></highlight>is a set of abstract ports, which are ports that may be incomplete in their attributes (i.e., they do not yet have a datatype). </paragraph>
<paragraph id="P-0123" lvl="1"><number>&lsqb;0123&rsqb;</number> G<highlight><subscript>a </subscript></highlight>is a set of abstract guarantees, which are guarantees between abstract ports. </paragraph>
<paragraph id="P-0124" lvl="1"><number>&lsqb;0124&rsqb;</number> R<highlight><subscript>a </subscript></highlight>is a set of abstract requirements, which are requirements between abstract ports. </paragraph>
<paragraph id="P-0125" lvl="1"><number>&lsqb;0125&rsqb;</number> I<highlight><subscript>d </subscript></highlight>is a set of coordination interface descriptors. </paragraph>
<paragraph id="P-0126" lvl="1"><number>&lsqb;0126&rsqb;</number> N<highlight><subscript>d </subscript></highlight>is an element of Q&times;Q, where Q&equals;&lcub;&infin;&rcub;U Z&plus;and Z&plus;denotes the set of positive integers. N<highlight><subscript>d </subscript></highlight>indicates the number or range of numbers of permissible interfaces (e.g., &lsqb;<highlight><bold>2</bold></highlight>&rsqb;, &lsqb;<highlight><bold>2</bold></highlight>, <highlight><bold>30</bold></highlight>&rsqb;, etc.). </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Allowing coordination interfaces to contain other coordination interfaces is a powerful feature. It lets designers use common coordination interfaces as complex ports within other coordination interfaces. For example, the basic message ports described above are nonblocking, but we can build a blocking coordination interface (not shown) that serves as a blocking port by combining a wait state port with a message port. </paragraph>
<paragraph id="P-0128" lvl="7"><number>&lsqb;0128&rsqb;</number> 4. Coordinators </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> A coordinator provides the concrete representations of intercomponent aspects of a coordination protocol. Coordinators allow a variety of static analysis debugging methodologies for software systems created with the coordination-centric design methodology. A coordinator contains a set of coordination interfaces and defines the relationships the coordination interfaces. The coordination interfaces complement the component coordination interfaces provided by components operating within the protocol. Through matched interface pairs, coordinators effectively describe connections between message ports, correlations between control states, and transactions between components. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> For example, round-robin coordinator <highlight><bold>410</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, must ensure that only one component <highlight><bold>400</bold></highlight> has its component control port <highlight><bold>404</bold></highlight>&apos;s value, or its access bit, set to true. Round-robin coordinator <highlight><bold>410</bold></highlight> must further ensure that the correct component <highlight><bold>400</bold></highlight> has its component control port <highlight><bold>404</bold></highlight> set to true for the chosen sequence. This section presents formal definitions of the parts that comprise coordinators: modes, actions, bindings, action triples, and constraints. These definitions culminate in a formal definition of coordinators. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> A. Modes </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> A mode is a boolean value that can be used as a guard on an action. In a coordinator, the mode is most often bound to a control port in a coordination interface for the coordinator. For example, in round-robin coordinator <highlight><bold>410</bold></highlight>, the modes of concern are bound to a coordinator control port <highlight><bold>414</bold></highlight> of each coordinator coordination interface <highlight><bold>412</bold></highlight>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> B. Actions </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> An action is a primitive behavioral element that can: </paragraph>
<paragraph id="P-0135" lvl="2"><number>&lsqb;0135&rsqb;</number> Respond to events. </paragraph>
<paragraph id="P-0136" lvl="2"><number>&lsqb;0136&rsqb;</number> Generate events. </paragraph>
<paragraph id="P-0137" lvl="2"><number>&lsqb;0137&rsqb;</number> Change modes. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Actions can range in complexity from simple operations up to complicated pieces of source code. An action in a coordinator is called a transparent action because the effects of the action can be precomputed and the internals of the action are completely exposed to the coordination-centric design tools. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> C. Bindings </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Bindings connect input ports to output ports, control ports to modes, state ports to variables, and message ports to events. Bindings are transparent and passive. Bindings are simply conduits for event notification and data transfer. When used for event notification, bindings are called triggers. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> D. Action Triples </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> To be executed, an action must be enabled by a mode and triggered by an event. The combination of a mode, trigger, and action is referred to as an action triple, which is a triple (m; t; a) in which: </paragraph>
<paragraph id="P-0143" lvl="2"><number>&lsqb;0143&rsqb;</number> m is a mode. </paragraph>
<paragraph id="P-0144" lvl="2"><number>&lsqb;0144&rsqb;</number> t is a trigger. </paragraph>
<paragraph id="P-0145" lvl="2"><number>&lsqb;0145&rsqb;</number> a is an action. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> The trigger is a reference to an event type, but it can be used to pass data into the action. Action triples are written: mode: trigger: action </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> A coordinator&apos;s actions are usually either pure control, in which both the trigger and action performed affect only control state, or pure data, in which both the trigger and action performed occur in the data domain. In the case of round-robin coordinator <highlight><bold>410</bold></highlight>, the following set of actions is responsible for maintaining the appropriate state: </paragraph>
<paragraph id="P-0148" lvl="2"><number>&lsqb;0148&rsqb;</number> access<highlight><subscript>i </subscript></highlight>:&minus;access<highlight><subscript>i </subscript></highlight>:&plus;access<highlight><subscript>(i&plus;1)modn </subscript></highlight></paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> The symbol &ldquo;&plus;&rdquo; signifies a mode&apos;s activation edge (i.e., the event associated with the mode becoming true), and the symbol &ldquo;&minus;&rdquo; signifies its deactivation edge. When any coordinator coordination interface <highlight><bold>412</bold></highlight> deactivates its arbitrated control port <highlight><bold>404</bold></highlight>&apos;s, access bit, the access bit of the next coordinator coordination interface <highlight><bold>412</bold></highlight> is automatically activated. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> E. Constraints </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> In this dissertation, constraints are boolean relationships between control ports. They take the form: </paragraph>
<paragraph id="P-0152" lvl="2"><number>&lsqb;0152&rsqb;</number> Condition <custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00002"/>Effect </paragraph>
<paragraph id="P-0153" lvl="7"><number>&lsqb;0153&rsqb;</number> This essentially means that the Condition (on the left side of the arrow) being true implies that Effect (on the right side of the arrow) is also true. In other words, if Condition is true, then Effect should also be true. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> A constraint differs from a guarantee in that the guarantee is limited to communicating in-variant relationships between components without providing a way to enforce the in-variant relationship. The constraint, on the other hand, is a set of instructions to the runtime system dealing with how to enforce certain relationships between components. When a constraint is violated, two corrective actions are available to the system: (1) modify the values on the left-hand side to make the left-hand expression evaluate as false (an effect termed backpressure in &lsqb;<highlight><bold>27</bold></highlight>&rsqb;) or (2) alter the right-hand side to make it true. We refer to these techniques as LHM (left-hand modify) and RHM (right-hand modify). For example, given the constraint x<custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00003"/><custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00004"/>y and the value x&circ; y, with RHM semantics the runtime system must respond by disabling y or setting y to false. Thus the value of <custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00005"/>y is set to true. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> The decision of whether to use LHM, to use RHM, or even to suspend enforcement of a constraint in certain situations can dramatically affect the efficiency and predictability of the software system. Coordination-centric design does not attempt to solve simultaneous constraints at runtime. Rather, runtime algorithms use local ordered constraint solutions. This, however, can result in some constraints being violated and is discussed further below. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> Round-robin coordinator <highlight><bold>410</bold></highlight> has a set of safety constraints to ensure that there is never more than one token in the system: </paragraph>
<paragraph id="P-0157" lvl="2"><number>&lsqb;0157&rsqb;</number> access<highlight><subscript>1</subscript></highlight>z,<highlight><bold>900</bold></highlight> &forall;<highlight><subscript>j&ne;i</subscript></highlight><custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00006"/>access<highlight><subscript>j</subscript></highlight>, </paragraph>
<paragraph id="P-0158" lvl="7"><number>&lsqb;0158&rsqb;</number> The above equation translates roughly as access<highlight><subscript>1 </subscript></highlight>implies not access<highlight><subscript>j </subscript></highlight>for the set of all access<highlight><subscript>j </subscript></highlight>where j is not equal to i. Even this simple constraint system can cause problems with local resolution semantics (as are LHM and RHM). If the runtime system attempted to fix all constraints simultaneously, all access modes would be shut down. If they were fixed one at a time, however, any duplicate tokens would be erased on the first pass, satisfying all other constraints and leaving a single token in the system. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> Since high-level protocols can be built from combinations of lower-level protocols, coordinators can be hierarchically composed. A coordinator is a six-tuple (I; M; B; N; A; X) in which: </paragraph>
<paragraph id="P-0160" lvl="2"><number>&lsqb;0160&rsqb;</number> I is a set of coordination interfaces. </paragraph>
<paragraph id="P-0161" lvl="2"><number>&lsqb;0161&rsqb;</number> M is a set of modes. </paragraph>
<paragraph id="P-0162" lvl="2"><number>&lsqb;0162&rsqb;</number> B is a set of bindings between interface elements (e.g., control ports and message ports) and internal elements (e.g., modes and triggers). </paragraph>
<paragraph id="P-0163" lvl="2"><number>&lsqb;0163&rsqb;</number> N is a set of constraints between interface elements. </paragraph>
<paragraph id="P-0164" lvl="2"><number>&lsqb;0164&rsqb;</number> A is a set of action triples for the coordinator. </paragraph>
<paragraph id="P-0165" lvl="2"><number>&lsqb;0165&rsqb;</number> X is a set of subcoordinators. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A, 6B</cross-reference>, <highlight><bold>6</bold></highlight>C, and <highlight><bold>6</bold></highlight>D show a few simple coordinators highlighting the bindings and constraints of the respective coordinators. With reference to <cross-reference target="DRAWINGS">FIG. 6A, a</cross-reference> unidirectional data transfer coordinator <highlight><bold>600</bold></highlight> transfers data in one direction between two components (not shown) by connecting incoming receive message port <highlight><bold>408</bold></highlight> to outgoing receive message port <highlight><bold>418</bold></highlight> with a binding <highlight><bold>602</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, bidirectional data transfer coordinator <highlight><bold>604</bold></highlight> transfers data back and forth between two components (not shown) by connecting incoming receive message port <highlight><bold>408</bold></highlight> to outgoing receive message port <highlight><bold>418</bold></highlight> with binding <highlight><bold>602</bold></highlight> and connecting send message port <highlight><bold>406</bold></highlight> to incoming send message port <highlight><bold>416</bold></highlight> with a second binding <highlight><bold>602</bold></highlight>. Unidirectional data transfer coordinator <highlight><bold>600</bold></highlight> and bidirectional data transfer coordinator <highlight><bold>604</bold></highlight> simply move data from one message port to another. Thus each coordinator consists of bindings between corresponding ports on separate coordination interfaces. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>C, state unification coordinator <highlight><bold>606</bold></highlight> ensures that a state port a <highlight><bold>608</bold></highlight> and a state port b <highlight><bold>610</bold></highlight> are always set to the same value. State unification coordinator <highlight><bold>606</bold></highlight> connects state port a <highlight><bold>608</bold></highlight> to state port b <highlight><bold>610</bold></highlight> with binding <highlight><bold>602</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>D, control state mutex coordinator <highlight><bold>612</bold></highlight> has a first constraint <highlight><bold>618</bold></highlight> and a second constraint <highlight><bold>620</bold></highlight> as follows: </paragraph>
<paragraph id="P-0168" lvl="2"><number>&lsqb;0168&rsqb;</number> (1)c<custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00007"/><custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00008"/>d and </paragraph>
<paragraph id="P-0169" lvl="2"><number>&lsqb;0169&rsqb;</number> (2)d<custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00009"/><custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00010"/>c. </paragraph>
<paragraph id="P-0170" lvl="7"><number>&lsqb;0170&rsqb;</number> Constraints <highlight><bold>618</bold></highlight> and <highlight><bold>620</bold></highlight> can be restated as follows: </paragraph>
<paragraph id="P-0171" lvl="2"><number>&lsqb;0171&rsqb;</number> (1) A state port c <highlight><bold>614</bold></highlight> having a true value implies that a state port d <highlight><bold>616</bold></highlight> has a false value, and </paragraph>
<paragraph id="P-0172" lvl="2"><number>&lsqb;0172&rsqb;</number> (2) State port d <highlight><bold>616</bold></highlight> having a true value implies that state port c <highlight><bold>614</bold></highlight> has a false value. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> A coordinator has two types of coordination interfaces: up interfaces that connect the coordinator to a second coordinator, which is at a higher level of design hierarchy and down interfaces that connect the coordinator either to a component or to a third coordinator, which is at a lower level of design hierarchy. Down interfaces have names preceded with <highlight><superscript>&ldquo;&tilde;&rdquo;</superscript></highlight>. Round-robin coordinator <highlight><bold>410</bold></highlight> has six down coordination interfaces (previously referred to as coordinator coordination interface <highlight><bold>412</bold></highlight>), with constraints that make the turning off of any coordinator control port <highlight><bold>414</bold></highlight> (also referred to as access control port) turn on the coordinator control port <highlight><bold>414</bold></highlight> of the next coordinator coordination interface <highlight><bold>412</bold></highlight> in line. Table 2 presents all constituents of the round-robin coordinator.  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="70PT" align="left"/>
<colspec colname="2" colwidth="147PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Constituent</entry>
<entry>Value</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>coordination interfaces</entry>
<entry>I &equals; AccessInterface<highlight><subscript>1-6</subscript></highlight></entry>
</row>
<row>
<entry>modes</entry>
<entry>M &equals; access<highlight><subscript>1-6</subscript></highlight></entry>
</row>
<row>
<entry>bindings</entry>
<entry>B &equals; &forall;<highlight><subscript>1&lE;i&lE;6</subscript></highlight>(&tilde;AccessInterface<highlight><subscript>l.</subscript></highlight>access, access<highlight><subscript>i</subscript></highlight>) &cup;</entry>
</row>
<row>
<entry>constraints</entry>
<entry>N &equals; &forall;<highlight><subscript>1&lE;l&lE;6</subscript></highlight>(&forall;<highlight><subscript>(1&lE;j&lE;6)(i&ne;j) </subscript></highlight>access<highlight><subscript>t </subscript></highlight><custom-character file="US20030005407A1-20030102-P00802.TIF" wi="20" he="20" id="custom-character-00011"/>&boxdl;access<highlight><subscript>j</subscript></highlight>)</entry>
</row>
<row>
<entry>actions</entry>
<entry>A &equals; &forall;<highlight><subscript>1&lE;i&lE;6 </subscript></highlight>access<highlight><subscript>i</subscript></highlight>:&minus;access<highlight><subscript>t</subscript></highlight>: &plus;access<highlight><subscript>(t &plus; 1) </subscript></highlight>mod 6</entry>
</row>
<row>
<entry>subcoordinators</entry>
<entry>X &equals; &empty;</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> This tuple describes an implementation of a round-robin coordination protocol for a particular system with six components, as shown in round-robin coordinator <highlight><bold>410</bold></highlight>. We use a coordination class to describe a general coordination protocol that may not have a fixed number of coordinator coordination interfaces. The coordination class is a six-tuple (Ic; Mc; Bc; Nc; Ac; Xc) in which: </paragraph>
<paragraph id="P-0175" lvl="2"><number>&lsqb;0175&rsqb;</number> Ic is a set of coordination interface descriptors in which each descriptor provides a type of coordination interface and specifies the number of such interfaces allowed within the coordination class. </paragraph>
<paragraph id="P-0176" lvl="2"><number>&lsqb;0176&rsqb;</number> Mc is a set of abstract modes that supplies appropriate modes when a coordination class is instantiated with a fixed number of coordinator coordination interfaces. </paragraph>
<paragraph id="P-0177" lvl="2"><number>&lsqb;0177&rsqb;</number> Bc is a set of abstract bindings that forms appropriate bindings between elements when the coordination class is instantiated. </paragraph>
<paragraph id="P-0178" lvl="2"><number>&lsqb;0178&rsqb;</number> Nc is a set of abstract constraints that ensures appropriate constraints between coordination interface elements are in place as specified at instantiation. </paragraph>
<paragraph id="P-0179" lvl="2"><number>&lsqb;0179&rsqb;</number> Ac is a set of abstract action triples for the coordinator. </paragraph>
<paragraph id="P-0180" lvl="2"><number>&lsqb;0180&rsqb;</number> Xc is a set of coordination classes (hierarchy). </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> While a coordinator describes coordination protocol for a particular application, it requires many aspects, such as the number of coordination interfaces and datatypes, to be fixed. Coordination classes describe protocols across many applications. The use of the coordination interface descriptors instead of coordination interfaces lets coordination classes keep the number of interfaces and datatypes undetermined until a particular coordinator is instantiated. For example, a round-robin coordinator contains a fixed number of coordinator coordination interfaces with specific bindings and constraints between the message and state ports on the fixed number of coordinator coordination interfaces. A round-robin coordination class contains descriptors for the coordinator coordination interface type, without stating how many coordinator coordination interfaces, and instructions for building bindings and constraints between ports on the coordinator coordination interfaces when a particular round-robin coordinator is created. </paragraph>
<paragraph id="P-0182" lvl="7"><number>&lsqb;0182&rsqb;</number> 5. Components </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> A component is a six-tuple (I; A; M; V; S; X) in which: </paragraph>
<paragraph id="P-0184" lvl="2"><number>&lsqb;0184&rsqb;</number> I is a set of coordination interfaces. </paragraph>
<paragraph id="P-0185" lvl="2"><number>&lsqb;0185&rsqb;</number> A is a set of action triples. </paragraph>
<paragraph id="P-0186" lvl="2"><number>&lsqb;0186&rsqb;</number> M is a set of modes. </paragraph>
<paragraph id="P-0187" lvl="2"><number>&lsqb;0187&rsqb;</number> V is a set of typed variables. </paragraph>
<paragraph id="P-0188" lvl="2"><number>&lsqb;0188&rsqb;</number> S is a set of subcomponents. </paragraph>
<paragraph id="P-0189" lvl="2"><number>&lsqb;0189&rsqb;</number> X is a set of coordinators used to connect the subcomponents to each other and to the coordination interfaces. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Actions within a coordinator are fairly regular, and hence a large number of actions can be described with a few simple expressions. However, actions within a component are frequently diverse and can require distinct definitions for each individual action. Typically a component&apos;s action triples are represented with a table that has three columns: one for the mode, one for the trigger, and one for the action code. Table 3 shows some example actions from a component that can use round-robin coordination.  
<table-cwu id="TABLE-US-00004">
<number>4</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="35PT" align="left"/>
<colspec colname="2" colwidth="42PT" align="left"/>
<colspec colname="3" colwidth="126PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>Mode</entry>
<entry>Trigger</entry>
<entry>Action</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>access</entry>
<entry>tick</entry>
<entry>AccessInterface.s.send(&ldquo;Test message&rdquo;);</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>&minus;access</entry>
</row>
<row>
<entry></entry>
<entry>&boxdl; access</entry>
<entry>tick</entry>
<entry>waitCount &plus;&plus;;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> A component resembles a coordinator in several ways (for example, the modes and coordination interfaces in each are virtually the same). Components can have internal coordinators, and because of the internal coordinators, components do not always require either bindings or constraints. In the following subsections, various aspects of components are described in greater detail. Theses aspects of components include variable scope, action transparency, and execution semantics for systems of actions. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> A. Variable Scope </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> To enhance a component&apos;s modularity, all variables accessed by an action within the component are either local to the action, local to the immediate parent component of the action, or accessed by the immediate parent component of the action via state ports in one of the parent component&apos;s coordination interfaces. For a component&apos;s variables to be available to a hierarchical child component, they must be exported by the component and then imported by the child of the component. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> B. Action Transparency </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> An action within a component can be either a transparent action or an opaque action. Transparent and opaque actions each have different invocation semantics. The internal properties, i.e. control structures, variable, changes in state, operators, etc., of transparent actions are visible to all coordination-centric design tools. The design tools can separate, observe, and analyze all the internal properties of opaque actions. Opaque actions are source code. Opaque actions must be executed directly, and looking at the internal properties of opaque actions can be accomplished only through traditional, source-level debugging techniques. An opaque action must explicitly declare any mode changes and coordination interfaces that the opaque action may directly affect. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> C. Action Execution </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> An action is triggered by an event, such as data arriving or departing a message port, or changes in value being applied to a state port. An action can change the value of a state port, generate an event, and provide a way for the software system to interact with low-level device drivers. Since actions typically produce events, a single trigger can be propagated through a sequence of actions. </paragraph>
<paragraph id="P-0198" lvl="7"><number>&lsqb;0198&rsqb;</number> 6. Protocols Implemented with Coordination Classes </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> In this section, we describe several coordinators that individually implement some common protocols: subsumption, barrier synchronization, rendezvous, and dedicated RPC. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> A. Subsumption Protocol </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> A subsumption protocol is a priority-based, preemptive resource allocation protocol commonly used in building small, autonomous robots, in which the shared resource is the robot itself. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a set of coordination interfaces and a coordinator for implementing the subsumption protocol. With reference to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> subsumption coordinator <highlight><bold>700</bold></highlight> has a set of subsumption coordinator coordination interfaces <highlight><bold>702</bold></highlight>, which have a subsume arbitrated coordinator control port <highlight><bold>704</bold></highlight> and an incoming subsume message port <highlight><bold>706</bold></highlight>. Each subsume component <highlight><bold>708</bold></highlight> has a subsume component coordination interface <highlight><bold>710</bold></highlight>. Subsume component coordination interface <highlight><bold>710</bold></highlight> has a subsume arbitrated component control port <highlight><bold>712</bold></highlight> and an outgoing subsume message port <highlight><bold>714</bold></highlight>. Subsumption coordinator <highlight><bold>700</bold></highlight> and each subsume component <highlight><bold>708</bold></highlight> are connected by their respective coordination interfaces, <highlight><bold>702</bold></highlight> and <highlight><bold>710</bold></highlight>. Each subsumption coordinator coordination interface <highlight><bold>702</bold></highlight> in subsumption coordinator <highlight><bold>700</bold></highlight> is associated with a priority. Each subsume component <highlight><bold>708</bold></highlight> has a behavior that can be applied to a robot (not shown). At any time, any subsume component <highlight><bold>708</bold></highlight> can attempt to assert its behavior on the robot. The asserted behavior coming from the subsume component <highlight><bold>708</bold></highlight> connected to the subsumption coordinator coordination interface <highlight><bold>702</bold></highlight> with the highest priority is the asserted behavior that will actually be performed by the robot. Subsume components <highlight><bold>708</bold></highlight> need not know anything about other components in the system. In fact, each subsume component <highlight><bold>708</bold></highlight> is designed to perform independently of whether their asserted behavior is performed or ignored. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> Subsumption coordinator <highlight><bold>700</bold></highlight> further has a slave coordinator coordination interface <highlight><bold>716</bold></highlight>, which has an outgoing slave message port <highlight><bold>718</bold></highlight>. Outgoing slave message port <highlight><bold>718</bold></highlight> is connected to an incoming slave message port <highlight><bold>720</bold></highlight>. Incoming slave message port <highlight><bold>720</bold></highlight> is part of a slave coordination interface <highlight><bold>722</bold></highlight>, which is connected to a slave <highlight><bold>730</bold></highlight>. When a subsume component <highlight><bold>708</bold></highlight> asserts a behavior and that component has the highest priority, subsumption coordinator <highlight><bold>700</bold></highlight> will control slave <highlight><bold>730</bold></highlight> (which typically controls the robot) based on the asserted behavior. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The following constraint describes the basis of the subsumption coordinator <highlight><bold>700</bold></highlight>&apos;s behavior:  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mrow>
  <mrow>
    <msub>
      <mi>subsume</mi>
      <mi>p</mi>
    </msub>
    <mo>&DoubleRightArrow;</mo>
  </mrow>
  <mo>&it;</mo>
  <munder>
    <mover>
      <mo>&And;</mo>
      <mrow>
        <mi>p</mi>
        <mo>-</mo>
        <mn>1</mn>
      </mrow>
    </mover>
    <mrow>
      <mi>i</mi>
      <mo>=</mo>
      <mn>1</mn>
    </mrow>
  </munder>
  <mo>&it;</mo>
  <mrow>
    <mo>&Not;</mo>
    <msub>
      <mi>subsume</mi>
      <mi>i</mi>
    </msub>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030005407A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="21.12075" file="US20030005407A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> This means that if any subsume component <highlight><bold>708</bold></highlight> has a subsume arbitrated component control port <highlight><bold>712</bold></highlight> that has a value of true, then all lower-priority subsume arbitrated component control ports <highlight><bold>712</bold></highlight> are set to false. An important difference between round-robin and subsumption is that in round-robin, the resource access right is transferred only when surrendered. Therefore, round-robin coordination has cooperative release semantics. However, in subsumption coordination, a subsume component <highlight><bold>708</bold></highlight> tries to obtain the resource whenever it needs to and succeeds only when it has higher priority than any other subsume component <highlight><bold>708</bold></highlight> that needs the resource at the same time. A lower-priority subsume component <highlight><bold>708</bold></highlight> already using the resource must surrender the resource whenever a higher-priority subsume component <highlight><bold>708</bold></highlight> tries to access the resource. Subsumption coordination uses preemptive release semantics, whereby each subsume component <highlight><bold>708</bold></highlight> must always be prepared to relinquish the resource. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> Table 4 presents the complete tuple for the subsumption coordinator.  
<table-cwu id="TABLE-US-00005">
<number>5</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84PT" align="left"/>
<colspec colname="2" colwidth="133PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Constituent</entry>
<entry>Value</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>coordination interfaces</entry>
<entry>I &equals; (Subsume<highlight><subscript>1&minus;n</subscript></highlight>) &cup; (Output)</entry>
</row>
<row>
<entry>modes</entry>
<entry>M &equals; subsume<highlight><subscript>1&minus;n</subscript></highlight></entry>
</row>
<row>
<entry>bindings</entry>
<entry>B &equals; &forall;<highlight><subscript>1&lE;i&lE;n </subscript></highlight>(Subsume<highlight><subscript>t.</subscript></highlight>subsume, subsume<highlight><subscript>t</subscript></highlight>)&cup;</entry>
</row>
<row>
<entry>constraints</entry>
<entry>N &equals; &forall;<highlight><subscript>1&lE;i&lE;n </subscript></highlight>(&forall;<highlight><subscript>(1&lE;j&lE;i) </subscript></highlight>subsume<highlight><subscript>l </subscript></highlight><custom-character file="US20030005407A1-20030102-P00801.TIF" wi="20" he="20" id="custom-character-00012"/>&boxdl;subsume<highlight><subscript>j</subscript></highlight>)</entry>
</row>
<row>
<entry>actions</entry>
<entry>A &equals; &empty;</entry>
</row>
<row>
<entry>subcoordinators</entry>
<entry>X &equals; &empty;</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> B. Barrier Synchronization Protocol </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> Other simple types of coordination that components might engage in enforce synchronization of activities. An example is barrier synchronization, in which each component reaches a synchronization point independently and waits. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a barrier synchronization coordinator <highlight><bold>800</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, barrier synchronization coordinator <highlight><bold>800</bold></highlight> has a set of barrier synchronization coordination interfaces <highlight><bold>802</bold></highlight>, each of which has a coordinator arbitrated state port <highlight><bold>804</bold></highlight>, named wait. Coordinator arbitrated state port <highlight><bold>804</bold></highlight> is connected to a component arbitrated state port <highlight><bold>806</bold></highlight>, which is part of a component coordination interface <highlight><bold>808</bold></highlight>. Component coordination interface <highlight><bold>808</bold></highlight> is connected to a component <highlight><bold>810</bold></highlight>. When all components <highlight><bold>810</bold></highlight> reach their respective synchronization points, they are all released from waiting. The actions for a barrier synchronization coordinator with n interfaces are:  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mrow>
  <munder>
    <mo>&And;</mo>
    <mrow>
      <mn>0</mn>
      <mo>&leq;</mo>
      <mi>i</mi>
      <mo>&lt;</mo>
      <mi>n</mi>
    </mrow>
  </munder>
  <mo>&it;</mo>
  <mrow>
    <msub>
      <mi>wait</mi>
      <mi>i</mi>
    </msub>
    <mo>:</mo>
    <mstyle>
      <mtext>&emsp;</mtext>
    </mstyle>
    <mo>&it;</mo>
    <mrow>
      <mo>:</mo>
      <mrow>
        <msub>
          <mo>&ForAll;</mo>
          <mrow>
            <mn>0</mn>
            <mo>&leq;</mo>
            <mi>j</mi>
            <mo>&lt;</mo>
            <mi>n</mi>
          </mrow>
        </msub>
        <mo>&it;</mo>
        <mrow>
          <mo>-</mo>
          <msub>
            <mi>wait</mi>
            <mi>j</mi>
          </msub>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030005407A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="16.07445" file="US20030005407A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> In other words, when all wait modes (not shown) become active, each one is released. The blank between the two colons indicates that the trigger event is the guard condition becoming true. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> C. Rendezvous Protocol </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> A resource allocation protocol similar to barrier synchronization is called rendezvous. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts a rendezvous coordinator <highlight><bold>900</bold></highlight> in accordance with the present invention. With reference to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, rendezvous coordinator <highlight><bold>900</bold></highlight> has a rendezvous coordination interface <highlight><bold>902</bold></highlight>, which has a rendezvous arbitrated state port <highlight><bold>904</bold></highlight>. A set of rendezvous components <highlight><bold>906</bold></highlight>, each of which may perform different functions or have vastly different actions and modes, has a rendezvous component coordination interface <highlight><bold>908</bold></highlight>, which includes a component arbitrated state port <highlight><bold>910</bold></highlight>. Rendezvous components <highlight><bold>906</bold></highlight> connect to rendezvous coordinator <highlight><bold>900</bold></highlight> through their respective coordination interfaces, <highlight><bold>908</bold></highlight> and <highlight><bold>902</bold></highlight>. Rendezvous coordinator <highlight><bold>900</bold></highlight> further has a rendezvous resource coordination interface <highlight><bold>912</bold></highlight>, which has a rendezvous resource arbitrated state port <highlight><bold>914</bold></highlight>, also called available. A resource <highlight><bold>916</bold></highlight> has a resource coordination interface <highlight><bold>918</bold></highlight>, which has a resource arbitrated state port <highlight><bold>920</bold></highlight>. Resource <highlight><bold>916</bold></highlight> is connected to rendezvous coordinator <highlight><bold>900</bold></highlight> by their complementary coordination interfaces, <highlight><bold>918</bold></highlight> and <highlight><bold>912</bold></highlight> respectively. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> With rendezvous-style coordination, there are two types of participants: resource <highlight><bold>916</bold></highlight> and several resource users, here rendezvous components <highlight><bold>916</bold></highlight>. When resource <highlight><bold>916</bold></highlight> is available, it activates its resource arbitrated state port <highlight><bold>920</bold></highlight>, also referred to as its available control port. If there are any waiting rendezvous components <highlight><bold>916</bold></highlight>, one will be matched with the resource; both participants are then released. This differs from subsumption and round-robin in that resource <highlight><bold>916</bold></highlight> plays an active role in the protocol by activating its available control port <highlight><bold>920</bold></highlight>. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> The actions for rendezvous coordinator <highlight><bold>900</bold></highlight> are: </paragraph>
<paragraph id="P-0214" lvl="2"><number>&lsqb;0214&rsqb;</number> available<highlight><subscript>1</subscript></highlight>&circ; wait<highlight><subscript>j </subscript></highlight>: :&minus;available<highlight><subscript>1</subscript></highlight>, &minus;wait<highlight><subscript>j </subscript></highlight></paragraph>
<paragraph id="P-0215" lvl="7"><number>&lsqb;0215&rsqb;</number> This could also be accompanied by other modes that indicate the status after the rendezvous. With rendezvous coordination, it is important that only one component at a time be released from wait mode. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> D. Dedicated RPC Protocol </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> A coordination class that differs from those described above is dedicated RPC. <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a dedicated RPC system. With reference to <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> dedicated RPC coordinator <highlight><bold>1000</bold></highlight> has an RPC server coordination interface <highlight><bold>1002</bold></highlight>, which includes an RPC server imported state port <highlight><bold>1004</bold></highlight>, an RPC server output message port <highlight><bold>1006</bold></highlight>, and an RPC server input message port <highlight><bold>1008</bold></highlight>. Dedicated RPC coordinator <highlight><bold>1000</bold></highlight> is connected to a server <highlight><bold>1010</bold></highlight>. Server <highlight><bold>1010</bold></highlight> has a server coordination interface <highlight><bold>1012</bold></highlight>, which has a server exported state port <highlight><bold>1014</bold></highlight>, a server input data port <highlight><bold>1016</bold></highlight>, and a server output data port <highlight><bold>1018</bold></highlight>. Dedicated RPC coordinator <highlight><bold>1000</bold></highlight> is connected to server <highlight><bold>1010</bold></highlight> through their complementary coordination interfaces, <highlight><bold>1002</bold></highlight> and <highlight><bold>1012</bold></highlight> respectively. Dedicated RPC coordinator <highlight><bold>1000</bold></highlight> further has an RPC client coordination interface <highlight><bold>1020</bold></highlight>, which includes an RPC client imported state port <highlight><bold>1022</bold></highlight>, an RPC client input message port <highlight><bold>1024</bold></highlight>, and an RPC client output message port <highlight><bold>1026</bold></highlight>. Dedicated RPC coordinator <highlight><bold>1000</bold></highlight> is connected to a client <highlight><bold>1028</bold></highlight> by connecting RPC client coordination interface <highlight><bold>1020</bold></highlight> to a complementary client coordination interface <highlight><bold>1030</bold></highlight>. Client coordination interface <highlight><bold>1030</bold></highlight> has a client exported state port <highlight><bold>1032</bold></highlight>, a client output message port <highlight><bold>1034</bold></highlight>, and a client input message port <highlight><bold>1036</bold></highlight>. </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> The dedicated RPC protocol has a client/server protocol in which server <highlight><bold>1010</bold></highlight> is dedicated to a single client, in this case client <highlight><bold>1028</bold></highlight>. Unlike the resource allocation protocol examples, the temporal behavior of this protocol is the most important factor in defining it. The following transaction listing describes this temporal behavior: </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> Client <highlight><bold>1028</bold></highlight> enters blocked mode by changing the value stored at client exported state port <highlight><bold>1032</bold></highlight> to true. </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> Client <highlight><bold>1028</bold></highlight> transmits an argument data message to server <highlight><bold>1010</bold></highlight> via client output message port <highlight><bold>1034</bold></highlight>. </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> Server <highlight><bold>1010</bold></highlight> receives the argument (labeled &ldquo;a&rdquo;) data message via server input data port <highlight><bold>1016</bold></highlight> and enters serving mode by changing the value stored in server exported state port <highlight><bold>1014</bold></highlight> to true. </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> Server <highlight><bold>1010</bold></highlight> computes return value. </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> Server <highlight><bold>1010</bold></highlight> transmits a return (labeled &ldquo;r&rdquo;) message to client <highlight><bold>1020</bold></highlight> via server output data port <highlight><bold>1018</bold></highlight> and exits serving mode by changing the value stored in server exported state port <highlight><bold>1014</bold></highlight> to false. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> Client <highlight><bold>1028</bold></highlight> receives the return data message via client input message port <highlight><bold>1036</bold></highlight> and exits blocked mode by changing the value stored at client exported state port <highlight><bold>1032</bold></highlight> to false. </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> This can be presented more concisely with an expression describing causal relationships:  
<math-cwu id="MATH-US-00003">
<number>3</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>T</mi>
          <mi>RPC</mi>
        </msub>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mo>+</mo>
            <mrow>
              <mi>client</mi>
              <mo>.</mo>
              <mi>blocked</mi>
            </mrow>
          </mrow>
          <mo>&RightArrow;</mo>
          <mrow>
            <mrow>
              <mi>client</mi>
              <mo>.</mo>
              <mi>transmits</mi>
            </mrow>
            <mo>&RightArrow;</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mo>+</mo>
            <mrow>
              <mi>server</mi>
              <mo>.</mo>
              <mi>serving</mi>
            </mrow>
          </mrow>
          <mo>&RightArrow;</mo>
          <mrow>
            <mrow>
              <mi>server</mi>
              <mo>.</mo>
              <mi>transmits</mi>
            </mrow>
            <mo>&RightArrow;</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mrow>
                <mo>-</mo>
                <mrow>
                  <mi>server</mi>
                  <mo>.</mo>
                  <mi>serving</mi>
                </mrow>
              </mrow>
              <mo>||</mo>
              <mrow>
                <mi>client</mi>
                <mo>.</mo>
                <mi>receives</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>&RightArrow;</mo>
          <mrow>
            <mo>-</mo>
            <mrow>
              <mi>client</mi>
              <mo>.</mo>
              <mi>blocked</mi>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00003" file="US20030005407A1-20030102-M00003.NB"/>
<image id="EMI-M00003" wi="216.027" he="33.1128" file="US20030005407A1-20030102-M00003.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> The transactions above describe what is supposed to happen. Other properties of this protocol must be described with temporal logic predicates. </paragraph>
<paragraph id="P-0227" lvl="2"><number>&lsqb;0227&rsqb;</number> server.serving <custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00013"/>client.blocked </paragraph>
<paragraph id="P-0228" lvl="2"><number>&lsqb;0228&rsqb;</number> server.serving <custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00014"/>F(server.r.output) </paragraph>
<paragraph id="P-0229" lvl="2"><number>&lsqb;0229&rsqb;</number> server.a.input <custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00015"/>F(server.serving) </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> The r in server.r.output refers to the server output data port <highlight><bold>1018</bold></highlight>, also labeled as the r event port on the server, and the a in serving.a.input refers to server input data port <highlight><bold>1016</bold></highlight>, also labeled as the a port on the server (see <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> Together, these predicates indicate that (1) it is an error for server <highlight><bold>1010</bold></highlight> to be in serving mode if client <highlight><bold>1028</bold></highlight> is not blocked; (2) after server <highlight><bold>1010</bold></highlight> enters serving mode, a response message is sent or else an error occurs; and (3) server <highlight><bold>1010</bold></highlight> receiving a message means that server <highlight><bold>1010</bold></highlight> must enter serving mode. Relationships between control state and data paths must also be considered, such as: </paragraph>
<paragraph id="P-0232" lvl="2"><number>&lsqb;0232&rsqb;</number> (client.a <custom-character file="US20030005407A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00016"/>client.blocked) </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> In other words, client <highlight><bold>1028</bold></highlight> must be in blocked mode whenever it sends an argument message. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> The first predicate takes the same form as a constraint; however, since dedicated RPC coordinator <highlight><bold>1000</bold></highlight> only imports the client:blocked and server:serving modes (i.e., through RPC client imported state port <highlight><bold>1022</bold></highlight> and RPC server imported state port <highlight><bold>1004</bold></highlight> respectively), dedicated RPC coordinator <highlight><bold>1000</bold></highlight> is not allowed to alter these values to comply. In fact, none of these predicates is explicitly enforced by a runtime system. However, the last two can be used as requirements and guarantees for interface type-checking. </paragraph>
<paragraph id="P-0235" lvl="7"><number>&lsqb;0235&rsqb;</number> 7. System-Level Execution </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> Coordination-centric design methodology lets system specifications be executed directly, according to the semantics described above. When components and coordinators are composed into higher-order structures, however, it becomes essential to consider hazards that can affect system behavior. Examples include conflicting constraints, in which local resolution semantics may either leave the system in an inconsistent state or make it cycle forever, and conflicting actions that undo one another&apos;s behavior. In the remainder of this section, the effect of composition issues on system-level executions is explained. </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> A. System Control Configurations </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> A configuration is the combined control state of a system-basically, the set of active modes at a point in time. In other words, a configuration in coordination-centric design is a bit vector containing one bit for each mode in the system. The bit representing a control state is true when the control state is active and false when the control state is inactive. Configurations representing the complete system control state facilitate reasoning on system properties and enable several forms of static analysis of system behavior. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> B. Action-Trigger Propagation </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Triggers are formal parameters for events. As mentioned earlier, there are two types of triggers: (1) control triggers, invoked by control events such as mode change requests, and (2) data flow triggers, invoked by data events such as message arrivals or departures. Components and coordinators can both request mode changes (on the modes visible to them) and generate new messages (on the message ports visible to them). Using actions, these events can be propagated through the components and coordinators in the system, causing a cascade of data transmissions and mode change requests, some of which can cancel other requests. When the requests, and secondary requests implied by them, are all propagated through the system, any requests that have not been canceled are confirmed and made part of the system&apos;s new configuration. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> Triggers can be immediately propagated through their respective actions or delayed by a scheduling step. Recall that component actions can be either transparent or opaque. Transparent actions typically propagate their triggers immediately, although it is not absolutely necessary that they do so. Opaque actions typically must always delay propagation. </paragraph>
<paragraph id="P-0242" lvl="7"><number>&lsqb;0242&rsqb;</number> 1. Immediate Propagation </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> Some triggers must be immediately propagated through actions, but only on certain types of transparent actions. Immediate propagation can often involve static precomputation of the effect of changes, which means that certain actions may never actually be performed. For example, consider a system with a coordinator that has an action that activates mode A and a coordinator with an action that deactivates mode B whenever A is activated. Static analysis can be used to determine in advance that any event that activates A will also deactivate B; therefore, this effect can be executed immediately without actually propagating it through A. </paragraph>
<paragraph id="P-0244" lvl="7"><number>&lsqb;0244&rsqb;</number> 2. Delayed Propagation </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> Trigger propagation through opaque actions must typically be delayed, since the system cannot look into opaque actions to precompute their results. Propagation may be delayed for other reasons, such as system efficiency. For example, immediate propagation requires tight synchronization among software components. If functionality is spread among a number of architectural components, immediate propagation is impractical. </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> C. A Protocol Implemented with a Compound Coordinator </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> Multiple coordinators are typically needed in the design of a system. The multiple coordinators can be used together for a single, unified behavior. Unfortunately, one coordinator may interfere with another&apos;s behavior. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a combined coordinator <highlight><bold>1100</bold></highlight> with both preemption and round-robin coordination for controlling access to a resource, as discussed above. With reference to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, components <highlight><bold>1102</bold></highlight>, <highlight><bold>1104</bold></highlight>, <highlight><bold>1106</bold></highlight>, <highlight><bold>1108</bold></highlight>, and <highlight><bold>1110</bold></highlight> primarily use round-robin coordination, and each includes a component coordination interface <highlight><bold>1112</bold></highlight>, which has a component arbitrated control port <highlight><bold>1114</bold></highlight> and a component output message port <highlight><bold>1116</bold></highlight>. However, when a preemptor component <highlight><bold>1120</bold></highlight> needs the resource, preemptor component <highlight><bold>1120</bold></highlight> is allowed to grab the resource immediately. Preemptor component <highlight><bold>1120</bold></highlight> has a preemptor component coordination interface <highlight><bold>1122</bold></highlight>. Preemptor component coordination interface <highlight><bold>1122</bold></highlight> has a preemptor arbitrated state port <highlight><bold>1124</bold></highlight>, a preemptor output message port <highlight><bold>1126</bold></highlight>, and a preemptor input message port <highlight><bold>1128</bold></highlight>. </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> All component coordination interfaces <highlight><bold>1112</bold></highlight> and preemptor component coordination interface <highlight><bold>1122</bold></highlight> are connected to a complementary combined coordinator coordination interface <highlight><bold>1130</bold></highlight>, which has a coordinator arbitrated state port <highlight><bold>1132</bold></highlight>, a coordinator input message port <highlight><bold>1134</bold></highlight>, and a coordinator output message port <highlight><bold>1136</bold></highlight>. Combined coordinator <highlight><bold>1100</bold></highlight> is a hierarchical coordinator and internally has a round-robin coordinator (not shown) and a preemption coordinator (not shown). Combined coordinator coordination interface <highlight><bold>1130</bold></highlight> is connected to a coordination interface to round-robin <highlight><bold>1138</bold></highlight> and a coordination interface to preempt <highlight><bold>1140</bold></highlight>. Coordinator arbitrated state port <highlight><bold>1132</bold></highlight> is bound to both a token arbitrated control port <highlight><bold>1142</bold></highlight>, which is part of coordination interface to round-robin <highlight><bold>1138</bold></highlight>, and to a preempt arbitrated control port <highlight><bold>1144</bold></highlight>, which is part of coordination interface to preempt <highlight><bold>1140</bold></highlight>. Coordinator input message port <highlight><bold>1134</bold></highlight> is bound to an interface to a round-robin output message port <highlight><bold>1146</bold></highlight>, and coordinator output message port <highlight><bold>1136</bold></highlight> is bound to an interface to round-robin input message port <highlight><bold>1148</bold></highlight>. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> Thus preemption interferes with the normal round-robin ordering of access to the resource. After a preemption-based access, the resource moves to the component that in round-robin-ordered access would be the successor to preemptor component <highlight><bold>1120</bold></highlight>. If the resource is preempted too frequently, some components may starve. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> D. Mixing Control and Data in Coordinators </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> Since triggers can be control-based, data-based, or both, and actions can produce both control and data events, control and dataflow aspects of a system are coupled through actions. Through combinations of actions, designers can effectively employ modal data flow, in which relative schedules are switched on and off based on the system configuration. </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> Relative scheduling is a form of coordination. Recognizing this and understanding how it affects a design can allow a powerful class of optimizations. Many data-centric systems (or subsystems) use conjunctive firing, which means that a component buffers messages until a firing rule is matched. When matching occurs, the component fires, consuming the messages in its buffer that caused it to fire and generating a message or messages of its own. Synchronous data flow systems are those in which all components have only firing rules with constant message consumption and generation. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12A</cross-reference> shows a system in which a component N<highlight><bold>1</bold></highlight> <highlight><bold>1200</bold></highlight> is connected to a component N<highlight><bold>3</bold></highlight> <highlight><bold>1202</bold></highlight> by a data transfer coordinator <highlight><bold>1204</bold></highlight> and a component N<highlight><bold>2</bold></highlight> <highlight><bold>1206</bold></highlight> is connected to component N<highlight><bold>3</bold></highlight> <highlight><bold>1202</bold></highlight> by a second data transfer coordinator <highlight><bold>1208</bold></highlight>. Component N<highlight><bold>3</bold></highlight> <highlight><bold>1202</bold></highlight> fires when it accumulates three messages on a port c <highlight><bold>1210</bold></highlight> and two messages on a port d <highlight><bold>1212</bold></highlight>. On firing, component N<highlight><bold>3</bold></highlight> <highlight><bold>1202</bold></highlight> produces two messages on a port o <highlight><bold>1214</bold></highlight>. Coordination control state tracks the logical buffer depth for these components. This is shown with numbers representing the logical queue depth of each port in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12B</cross-reference> shows the system of <cross-reference target="DRAWINGS">FIG. 12A</cross-reference> in which data transfer coordinator <highlight><bold>1204</bold></highlight> and second data transfer coordinator <highlight><bold>1208</bold></highlight> have been merged to form a merged data transfer coordinator <highlight><bold>1216</bold></highlight>. Merging the coordinators in this example provides an efficient static schedule for component firing. Merged data transfer coordinator <highlight><bold>1216</bold></highlight> fires component N<highlight><bold>1</bold></highlight> <highlight><bold>1200</bold></highlight> three times and component N<highlight><bold>2</bold></highlight> <highlight><bold>1206</bold></highlight> twice. Merged data transfer coordinator <highlight><bold>1216</bold></highlight> then fires component N<highlight><bold>3</bold></highlight> <highlight><bold>1202</bold></highlight> twice (to consume all messages produced by component N<highlight><bold>1</bold></highlight> <highlight><bold>1200</bold></highlight> and component N<highlight><bold>2</bold></highlight> <highlight><bold>1206</bold></highlight>). </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> Message rates can vary based on mode. For example, a component may consume two messages each time it fires in one mode and four each time it fires in a second mode. For a component like this, it is often possible to merge schedules on a configuration basis, in which each configuration has static consumption and production rates for all affected components. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> E. Coordination Transformations </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> In specifying complete systems, designers must often specify not only the coordination between two objects, but also the intermediate mechanism they must use to implement this coordination. While this intermediate mechanism can be as simple as shared memory, it can also be another coordinator; hence coordination may be, and often is, layered. For example, RPC coordination often sits on top of a TCP/IP stack or on an IrDA stack, in which each layer coordinates with peer layers on other processing elements using unique coordination protocols. Here, each layer provides certain capabilities to the layer directly above it, and the upper layer must be implemented in terms of them. </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> In many cases, control and communication synthesis can be employed to automatically transform user-specified coordination to a selected set of standard protocols. Designers may have to manually produce transformations for nonstandard protocols. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> F. Dynamic Behavior with Compound Coordinators </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> Even in statically bound systems, components may need to interact in a fashion that appears dynamic. For example, RPC-style coordination often has multiple clients for individual servers. Here, there is no apparent connection between client and server until one is forged for a transaction. After the connection is forged, however, the coordination proceeds in the same fashion as dedicated RPC. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> Our approach to this is to treat the RPC server as a shared resource, requiring resource allocation protocols to control access. However, none of the resource allocation protocols described thus far would work efficiently under these circumstances. In the following subsections, an appropriate protocol for treating the RPC as a shared resource will be described and how that protocol should be used as part of a complete multiclient RPC coordination class&mdash;one that uses the same RPC coordination interfaces described earlier-will be discussed. </paragraph>
<paragraph id="P-0263" lvl="7"><number>&lsqb;0263&rsqb;</number> 1. First Come/First Serve Protocol (FCFS) </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates a first come/first serve (FCFS) resource allocation protocol, which is a protocol that allocates a shared resource to the requester that has waited longest. With reference to <cross-reference target="DRAWINGS">FIG. 13, a</cross-reference> FCFS component interface <highlight><bold>1300</bold></highlight> for this protocol has a request control port <highlight><bold>1302</bold></highlight>, an access control port <highlight><bold>1304</bold></highlight> and a component outgoing message port <highlight><bold>1306</bold></highlight>. A FCFS coordinator <highlight><bold>1308</bold></highlight> for this protocol has a set of FCFS interfaces <highlight><bold>1310</bold></highlight> that are complementary to FCFS component interfaces <highlight><bold>1300</bold></highlight>, having a FCFS coordinator request control port <highlight><bold>1312</bold></highlight>, a FCFS coordinator access port <highlight><bold>1314</bold></highlight>, and a FCFS coordinator input message port <highlight><bold>1316</bold></highlight>. When a component <highlight><bold>1318</bold></highlight> needs to access a resource <highlight><bold>1320</bold></highlight>, it asserts request control port <highlight><bold>1302</bold></highlight>. When granted access, FCFS coordinator <highlight><bold>1308</bold></highlight> asserts the appropriate FCFS coordinator access port <highlight><bold>1314</bold></highlight>, releasing FCFS coordinator request control port <highlight><bold>1312</bold></highlight>. </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> To do this, FCFS coordinator <highlight><bold>1308</bold></highlight> uses a rendezvous coordinator and two round-robin coordinators. One round-robin coordinator maintains a list of empty slots in which a component may be enqueued, and the other round-robin coordinator maintains a list showing the next component to be granted access. When an FCFS coordinator request control port <highlight><bold>1312</bold></highlight> becomes active, FCFS coordinator <highlight><bold>1308</bold></highlight> begins a rendezvous access to a binder action. When activated, this action maps the appropriate component <highlight><bold>1318</bold></highlight> to a position in the round-robin queues. A separate action cycles through one of the queues and selects the next component to access the server. As much as possible, FCFS coordinator <highlight><bold>1308</bold></highlight> attempts to grant access to resource <highlight><bold>1320</bold></highlight> to the earliest component <highlight><bold>1318</bold></highlight> having requested resource <highlight><bold>1320</bold></highlight>, with concurrent requests determined based on the order in the rendezvous coordinator of the respective components <highlight><bold>1318</bold></highlight>. </paragraph>
<paragraph id="P-0266" lvl="7"><number>&lsqb;0266&rsqb;</number> 2. Multiclient RPC </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts a multiclient RPC coordinator <highlight><bold>1400</bold></highlight> formed by combining FCFS coordinator <highlight><bold>1308</bold></highlight> with dedicated RPC coordinator <highlight><bold>1000</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 14, a</cross-reference> set of clients <highlight><bold>1402</bold></highlight> have a set of client coordination interfaces <highlight><bold>1030</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. In addition, multiclient RPC coordinator <highlight><bold>1400</bold></highlight> has a set of RPC client coordination interfaces <highlight><bold>1020</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. For each RPC client coordination interface <highlight><bold>1020</bold></highlight>, RPC client input message port <highlight><bold>1024</bold></highlight>, of RPC client coordination interface <highlight><bold>1020</bold></highlight>, is bound to the component outgoing message port <highlight><bold>1306</bold></highlight> of FCFS coordinator <highlight><bold>1308</bold></highlight>. Message transfer action <highlight><bold>1403</bold></highlight> serves to transfer messages between RPC client input message port <highlight><bold>1024</bold></highlight> and component outgoing message port <highlight><bold>1306</bold></highlight>. For coordinating the actions of multiple clients <highlight><bold>1402</bold></highlight>, multiclient RPC coordinator <highlight><bold>1400</bold></highlight> must negotiate accesses to a server <highlight><bold>1404</bold></highlight> and keep track of the values returned by server <highlight><bold>1404</bold></highlight>. </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> F. Monitor Modes and Continuations </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> Features such as blocking behavior and exceptions can be implemented in the coordination-centric design methodology with the aid of monitor modes. Monitor modes are modes that exclude all but a selected set of actions called continuations, which are actions that continue a behavior started by another action. </paragraph>
<paragraph id="P-0270" lvl="7"><number>&lsqb;0270&rsqb;</number> 1. Blocking Behavior </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> With blocking behavior, one action releases control while entering a monitor mode, and a continuation resumes execution after the anticipated response event. Monitor mode entry must be immediate (at least locally), so that no unexpected actions can execute before they are blocked by such a mode. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> Each monitor mode has a list of actions that cannot be executed when it is entered. The allowed (unlisted) actions are either irrelevant or are continuations of the action that caused entry into this mode. There are other conditions, as well. This mode requires an exception action if forced to exit. However, this exception action is not executed if the monitor mode is turned off locally. </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> When components are distributed over a number of processing elements, it is not practical to assume complete synchronization of the control state. In fact, there are a number of synchronization options available as detailed in Chou, P &ldquo;Control Composition and Synthesis of Distributed Real-Time Embedded Systems&rdquo;, Ph.D. dissertation, University of Washington, 1998. </paragraph>
<paragraph id="P-0274" lvl="7"><number>&lsqb;0274&rsqb;</number> 2. Exception Handling </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> Exception actions are a type of continuation. When in a monitor mode, exception actions respond to unexpected events or events that signal error conditions. For example, multiclient RPC coordinator <highlight><bold>1400</bold></highlight> can bind <custom-character file="US20030005407A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00017"/>client.blocked to a monitor mode and set an exception action on&plus;server.serving. This will signal an error whenever the server begins to work when the client is not blocked for a response. </paragraph>
<paragraph id="P-0276" lvl="7"><number>&lsqb;0276&rsqb;</number> 8. A Complete System Example </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> depicts a large-scale example system under the coordination-centric design methodology. With reference to <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, the large scale system is a bimodal digital cellular network <highlight><bold>1500</bold></highlight>. Network <highlight><bold>1500</bold></highlight> is for the most part a simplified version of a GSM (global system for mobile communications) cellular network. This example shows in greater detail how the parts of coordination-centric design work together and demonstrates a practical application of the methodology. Network <highlight><bold>1500</bold></highlight> has two different types of cells, a surface cell <highlight><bold>1502</bold></highlight> (also referred to as a base station <highlight><bold>1502</bold></highlight>) and a satellite cell <highlight><bold>1504</bold></highlight>. These cells are not only differentiated by physical position, but by the technologies they use to share network <highlight><bold>1500</bold></highlight>. Satellite cells <highlight><bold>1504</bold></highlight> use a code division multiple access (CDMA) technology, and surface cells <highlight><bold>1502</bold></highlight> use a time division multiple access (TDMA) technology. Typically, there are seven frequency bands reserved for TDMA and one band reserved for CDMA. The goal is for as much communication as possible to be conducted through the smaller TDMA cells, here surface cells <highlight><bold>1502</bold></highlight>, because power requirements for a CDMA cells, here satellite cell <highlight><bold>1504</bold></highlight>, increase with the number of users in the CDMA cell. Mobile units <highlight><bold>1506</bold></highlight>, or wireless devices, can move between surface cells <highlight><bold>1502</bold></highlight>, requiring horizontal handoffs between surface cells <highlight><bold>1502</bold></highlight>. Several surface cells <highlight><bold>1502</bold></highlight> are typically connected to a switching center <highlight><bold>1508</bold></highlight>. Switching center <highlight><bold>1508</bold></highlight> is typically connected to a telephone network or the Internet <highlight><bold>1512</bold></highlight>. In addition to handoffs between surface cells <highlight><bold>1502</bold></highlight>, the network must be able to hand off between switching centers <highlight><bold>1508</bold></highlight>. When mobile units <highlight><bold>1506</bold></highlight> leave the TDMA region, they remain covered by satellite cells <highlight><bold>1504</bold></highlight> via vertical handoffs between cells. Since vertical handoffs require changing protocols as well as changing base stations and switching centers, they can be complicated in terms of control. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> Numerous embedded systems comprise the overall system. For example, switching center <highlight><bold>1508</bold></highlight> and base stations, surface cells <highlight><bold>1502</bold></highlight>, are required as part of the network infrastructure, but cellular phones, handheld Web browsers, and other mobile units <highlight><bold>1506</bold></highlight> may be supported for access through network <highlight><bold>1500</bold></highlight>. This section concentrates on the software systems for two particular mobile units <highlight><bold>1506</bold></highlight>: a simple digital cellular phone (shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>) and a handheld Web browser (shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>). These examples require a wide variety of coordinators and reusable components. Layered coordination is a feature in each system, because a function of many subsystems is to perform a layered protocol. Furthermore, this example displays how the hierarchically constructed components can be applied in a realistic system to help manage the complexity of the overall design. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> To begin this discussion, we describe the cellular phone in detail, focusing on its functional components and the formalization of their interaction protocols. We then discuss the handheld Web browser in less detail but highlight the main ways in which its functionality and coordination differ from those of the cellular phone. In describing the cellular phone, we use a top-down approach to show how a coherent system organization is preserved, even at a high level. In describing the handheld Web browser, we use a bottom-up approach to illustrate component reuse and bottom-up design. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> A. Cellular Phone </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows a top-level coordination diagram of the behavior of a cell phone <highlight><bold>1600</bold></highlight>. Rather than using a single coordinator that integrates the components under a single protocol, we use several coordinators in concert. Interactions between coordinators occur mainly within the components to which they connect. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, cell phone <highlight><bold>1600</bold></highlight> supports digital encoding of voice streams. Before it can be used, it must be authenticated with a home master switching center (not shown). This authentication occurs through a registered master switch for each phone and an authentication number from the phone itself. There are various authentication statuses, such as full access, grey-listed, or blacklisted. For cell phone <highlight><bold>1600</bold></highlight>, real-time performance is more important than reliability. A dropped packet is not retransmitted, and a late packet is dropped since its omission degrades the signal less than its late incorporation. </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> Each component of cell phone <highlight><bold>1600</bold></highlight> is hierarchical. A GUI <highlight><bold>1602</bold></highlight> lets users enter phone numbers while displaying them and query an address book <highlight><bold>1604</bold></highlight> and a logs component <highlight><bold>1606</bold></highlight>. Address book <highlight><bold>1604</bold></highlight> is a database that can map names to phone numbers and vice versa. GUI <highlight><bold>1602</bold></highlight> uses address book <highlight><bold>1604</bold></highlight> to help identify callers and to look up phone numbers to be dialed. Logs <highlight><bold>1606</bold></highlight> track both incoming and outgoing calls as they are dialed. A voice component <highlight><bold>1608</bold></highlight> digitally encodes and decodes, and compresses and decompresses, an audio signal. A connection component <highlight><bold>1610</bold></highlight> multiplexes, transmits, receives, and demultiplexes the radio signal and separates out the voice stream and caller identification information. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> Coordination among the above components makes use of several of the coordinators discussed above. Between connection component <highlight><bold>1610</bold></highlight> and a clock <highlight><bold>1612</bold></highlight>, and between logs <highlight><bold>1606</bold></highlight> and connection component <highlight><bold>1610</bold></highlight>, are unidirectional data transfer coordinators <highlight><bold>600</bold></highlight> as described with reference to <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. Between voice component <highlight><bold>1608</bold></highlight> and connection component <highlight><bold>1610</bold></highlight>, and between GUI <highlight><bold>1602</bold></highlight> and connection component <highlight><bold>1610</bold></highlight>, are bidirectional data transfer coordinators <highlight><bold>604</bold></highlight>, as described with reference to <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>. Between clock <highlight><bold>1612</bold></highlight> and GUI <highlight><bold>1602</bold></highlight> is a state unification coordinator <highlight><bold>606</bold></highlight>, as described with reference to <cross-reference target="DRAWINGS">FIG. 6C</cross-reference>. Between GUI <highlight><bold>1602</bold></highlight> and address book <highlight><bold>1604</bold></highlight> is a dedicated RPC coordinator <highlight><bold>1000</bold></highlight> as described with reference to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, in which address book <highlight><bold>1604</bold></highlight> has client <highlight><bold>1028</bold></highlight> and GUI <highlight><bold>1602</bold></highlight> has server <highlight><bold>1010</bold></highlight>. </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> There is also a custom GUI/log coordinator <highlight><bold>1614</bold></highlight> between logs <highlight><bold>1606</bold></highlight> and GUI <highlight><bold>1602</bold></highlight>. GUI/log coordinator <highlight><bold>1614</bold></highlight> lets GUI <highlight><bold>1602</bold></highlight> transfer new logged information through an r output message port <highlight><bold>1616</bold></highlight> on a GUI coordination interface <highlight><bold>1618</bold></highlight> to an r input message port <highlight><bold>1620</bold></highlight> on a log coordination interface <highlight><bold>1622</bold></highlight>. GUI/log coordinator <highlight><bold>1614</bold></highlight> also lets GUI <highlight><bold>1602</bold></highlight> choose current log entries through a pair of c output message ports <highlight><bold>1624</bold></highlight> on GUI coordination interface <highlight><bold>1618</bold></highlight> and a pair of c input message ports <highlight><bold>1626</bold></highlight> on log coordination interface <highlight><bold>1622</bold></highlight>. Logs <highlight><bold>1606</bold></highlight> continuously display one entry each for incoming and outgoing calls. </paragraph>
<paragraph id="P-0286" lvl="7"><number>&lsqb;0286&rsqb;</number> 1. GUI Component </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17A</cross-reference> is a detailed view of GUI component <highlight><bold>1602</bold></highlight>, of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. With reference to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>A, GUI component <highlight><bold>1602</bold></highlight> has two inner components, a keypad <highlight><bold>1700</bold></highlight> and a text-based liquid crystal display <highlight><bold>1702</bold></highlight>, as well as several functions of its own (not shown). Each time a key press occurs, it triggers an action that interprets the press, depending on the mode of the system. Numeric presses enter values into a shared dialing buffer. When a complete number is entered, the contents of this buffer are used to establish a new connection through connection component <highlight><bold>1610</bold></highlight>. Table 5 shows the action triples for GUI <highlight><bold>1602</bold></highlight>.  
<table-cwu id="TABLE-US-00006">
<number>6</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="63PT" align="left"/>
<colspec colname="3" colwidth="98PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Mode</entry>
<entry>Trigger</entry>
<entry>Action</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>Idle</entry>
<entry>
<chemistry-cwu id="CHEM-US-00001">
<number>1</number>
<image id="EMI-C00001" he="15.11055" wi="59.27985" file="US20030005407A1-20030102-C00001.TIF"/>
<chemistry-chemdraw-file id="CHEMCDX-00001" file="US20030005407A1-20030102-C00001.CDX"/>
<chemistry-mol-file id="CHEMMOL-00001" file="US20030005407A1-20030102-C00001.MOL"/>
</chemistry-cwu>
</entry>
<entry>numBuffer.append(keypress.val)</entry>
</row>
<row>
<entry> </entry>
</row>
<row>
<entry></entry>
<entry>Send</entry>
<entry>radio.send(numBuffer.val)</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>&plus;outgoingCall</entry>
</row>
<row>
<entry></entry>
<entry>Disconnect</entry>
<entry>Nil</entry>
</row>
<row>
<entry></entry>
<entry>Leftarrow</entry>
<entry>AddressBook.forward()</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>&plus;lookupMode</entry>
</row>
<row>
<entry></entry>
<entry>Rightarrow</entry>
<entry>log.lastcall()</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>&plus;outlog</entry>
</row>
<row>
<entry>LookupMode</entry>
<entry>Leftarrow</entry>
<entry>AddressBook.forward()</entry>
</row>
<row>
<entry></entry>
<entry>Rightarrow</entry>
<entry>AddressBook.backward()</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> An &ldquo;Addr Coord&rdquo; coordinator <highlight><bold>1704</bold></highlight> includes an address book mode (not shown) in which arrow key presses are transformed into RPC calls. </paragraph>
<paragraph id="P-0289" lvl="7"><number>&lsqb;0289&rsqb;</number> 2. Logs Component </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17B</cross-reference> is a detailed view of logs component <highlight><bold>1606</bold></highlight>, which tracks all incoming and outgoing calls. With reference to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>B, both GUI component <highlight><bold>1602</bold></highlight> and connection component <highlight><bold>1610</bold></highlight> must communicate with logs component <highlight><bold>1606</bold></highlight> through specific message ports. Those specific message ports include a transmitted number message port <highlight><bold>1720</bold></highlight>, a received number message port <highlight><bold>1722</bold></highlight>, a change current received message port <highlight><bold>1724</bold></highlight>, a change current transmitted message port <highlight><bold>1726</bold></highlight>, and two state ports <highlight><bold>1728</bold></highlight> and <highlight><bold>1729</bold></highlight> for presenting the current received and current transmitted values, respectively. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> Logs component <highlight><bold>1606</bold></highlight> contains two identical single-log components: a send log <highlight><bold>1730</bold></highlight> for outgoing calls and a receive log <highlight><bold>1740</bold></highlight> for incoming calls. The interface of logs component <highlight><bold>1606</bold></highlight> is connected to the individual log components by a pair of adapter coordinators, Adapl <highlight><bold>1750</bold></highlight> and Adap <highlight><bold>2</bold></highlight> <highlight><bold>1752</bold></highlight>. Adap<highlight><bold>1</bold></highlight> <highlight><bold>1750</bold></highlight> has an adapter receive interface <highlight><bold>1754</bold></highlight>, which has a receive imported state port <highlight><bold>1756</bold></highlight> and a receive output message port <highlight><bold>1758</bold></highlight>. Adap<highlight><bold>1</bold></highlight> <highlight><bold>1750</bold></highlight> further has an adapter send interface <highlight><bold>1760</bold></highlight>, which has a send imported state port <highlight><bold>1762</bold></highlight> and a send output message port <highlight><bold>1764</bold></highlight>. Within Adap<highlight><bold>1</bold></highlight>, state port <highlight><bold>1728</bold></highlight> is bound to receive imported state port <highlight><bold>1756</bold></highlight>, change current received message port <highlight><bold>1724</bold></highlight> is bound to receive output message port <highlight><bold>1758</bold></highlight>, received number message port <highlight><bold>1722</bold></highlight> is bound to a received interface output message port <highlight><bold>1766</bold></highlight> on a received number coordination interface <highlight><bold>1768</bold></highlight>, change current transmitted message port <highlight><bold>1726</bold></highlight> is bound to send output message port <highlight><bold>1764</bold></highlight>, and state port <highlight><bold>1729</bold></highlight> is bound to Up.rc is bound to send imported state port <highlight><bold>1762</bold></highlight>. </paragraph>
<paragraph id="P-0292" lvl="7"><number>&lsqb;0292&rsqb;</number> 3. Voice Component </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> is a detailed view of voice component <highlight><bold>1608</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. Voice component <highlight><bold>1608</bold></highlight> has a compression component <highlight><bold>1800</bold></highlight> for compressing digitized voice signals before transmission, a decompression component <highlight><bold>1802</bold></highlight> for decompressing received digitized voice signals, and interfaces <highlight><bold>1804</bold></highlight> and <highlight><bold>1806</bold></highlight> to analog transducers (not shown) for digitizing sound to be transmitted and for converting received transmissions into sound. Voice component <highlight><bold>1608</bold></highlight> is a pure data flow component containing sound generator <highlight><bold>1808</bold></highlight> which functions as a white-noise generator, a ring tone generator, and which has a separate port for each on sound generator interface <highlight><bold>1810</bold></highlight>, and voice compression functionality in the form of compression component <highlight><bold>1800</bold></highlight> and decompression component <highlight><bold>1802</bold></highlight>. </paragraph>
<paragraph id="P-0294" lvl="7"><number>&lsqb;0294&rsqb;</number> 4. Connection Component </paragraph>
<paragraph id="P-0295" lvl="0"><number>&lsqb;0295&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> is a detailed view of connection component <highlight><bold>1610</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. With reference to <cross-reference target="DRAWINGS">FIG. 18</cross-reference>B, connection component <highlight><bold>1610</bold></highlight> coordinates with voice component <highlight><bold>1608</bold></highlight>, logs component <highlight><bold>1606</bold></highlight>, clock <highlight><bold>1612</bold></highlight>, and GUI <highlight><bold>1602</bold></highlight>. In addition, connection component <highlight><bold>1610</bold></highlight> is responsible for coordinating the behavior of cell phone <highlight><bold>1600</bold></highlight> with a base station that owns the surface cell <highlight><bold>1502</bold></highlight> (shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>), a switching center <highlight><bold>1508</bold></highlight> (shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>), and all other phones (not shown) within surface cell <highlight><bold>1502</bold></highlight>. Connection component <highlight><bold>1610</bold></highlight> must authenticate users, establish connections, and perform handoffs as needed-including appropriate changes in any low-level protocols (such as a switch from TDMA to CDMA). </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> depicts a set of communication layers between connection component <highlight><bold>1610</bold></highlight> of cell phone <highlight><bold>1600</bold></highlight> and base station <highlight><bold>1502</bold></highlight> or switching center <highlight><bold>1508</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>, has several subcomponents, or lower-level components, each of which coordinates with an equivalent, or peer, layer on either base station <highlight><bold>1502</bold></highlight> or switching center <highlight><bold>1508</bold></highlight>. The subcomponents of connection component <highlight><bold>1610</bold></highlight> include a cell phone call manager <highlight><bold>1900</bold></highlight>, a cell phone mobility manager <highlight><bold>1902</bold></highlight>, a cell phone radio resource manager <highlight><bold>1904</bold></highlight>, a cell phone link protocol manager <highlight><bold>1906</bold></highlight>, and a cell phone transport manager <highlight><bold>1908</bold></highlight> which is responsible for coordinating access to and transferring data through the shared airwaves TDMA and CDMA coordination. Each subcomponent will be described in detail including how each fits into the complete system. </paragraph>
<paragraph id="P-0297" lvl="0"><number>&lsqb;0297&rsqb;</number> Base station <highlight><bold>1502</bold></highlight> has a call management coordinator <highlight><bold>1910</bold></highlight>, a mobility management coordinator <highlight><bold>1912</bold></highlight>, a radio resource coordinator <highlight><bold>1914</bold></highlight> (BSSMAP <highlight><bold>1915</bold></highlight>), a link protocol coordinator <highlight><bold>1916</bold></highlight> (SCCO <highlight><bold>1917</bold></highlight>), and a transport coordinator <highlight><bold>1918</bold></highlight> (MTP <highlight><bold>1919</bold></highlight>). Switching center <highlight><bold>1508</bold></highlight> has a switching center call manager <highlight><bold>1920</bold></highlight>, a switching center mobility manager <highlight><bold>1922</bold></highlight>, (a BSSMAP <highlight><bold>1924</bold></highlight>, a SCCP <highlight><bold>1926</bold></highlight>, and an MTP <highlight><bold>1928</bold></highlight>). </paragraph>
<paragraph id="P-0298" lvl="7"><number>&lsqb;0298&rsqb;</number> a. Call Management </paragraph>
<paragraph id="P-0299" lvl="0"><number>&lsqb;0299&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a detailed view of a call management layer <highlight><bold>2000</bold></highlight> consisting of cell phone call manager <highlight><bold>1900</bold></highlight>, which is connected to switching center call manager <highlight><bold>1920</bold></highlight> by call management coordinator <highlight><bold>1910</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, call management layer <highlight><bold>2000</bold></highlight> coordinates the connection between cell phone <highlight><bold>1600</bold></highlight> and switching center <highlight><bold>1508</bold></highlight>. Call management layer <highlight><bold>2000</bold></highlight> is responsible for dialing, paging, and talking. Call management layer <highlight><bold>2000</bold></highlight> is always present in cell phone <highlight><bold>1600</bold></highlight>, though not necessarily in Internet appliances (discussed later). Cell phone call manager <highlight><bold>1900</bold></highlight> includes a set of modes (not shown) for call management coordination that consists of the following modes: </paragraph>
<paragraph id="P-0300" lvl="2"><number>&lsqb;0300&rsqb;</number> Standby </paragraph>
<paragraph id="P-0301" lvl="2"><number>&lsqb;0301&rsqb;</number> Dialing </paragraph>
<paragraph id="P-0302" lvl="2"><number>&lsqb;0302&rsqb;</number> RingingRemote </paragraph>
<paragraph id="P-0303" lvl="2"><number>&lsqb;0303&rsqb;</number> Ringing </paragraph>
<paragraph id="P-0304" lvl="2"><number>&lsqb;0304&rsqb;</number> CallInProgress </paragraph>
<paragraph id="P-0305" lvl="7"><number>&lsqb;0305&rsqb;</number> Cell phone call manager <highlight><bold>1900</bold></highlight> has a cell phone call manager interface <highlight><bold>2002</bold></highlight>. Cell phone call manager interface <highlight><bold>2002</bold></highlight> has a port corresponding to each of the above modes. The standby mode is bound to a standby exported state port <highlight><bold>2010</bold></highlight>. The dialing mode is bound to a dialing exported state port <highlight><bold>2012</bold></highlight>. The RingingRemote mode is bound to a RingingRemote imported state port <highlight><bold>2014</bold></highlight>. The Ringing mode is bound to a ringing imported state port <highlight><bold>2016</bold></highlight>. The CallInProgress mode is bound to a CallInProgress arbitrated state port <highlight><bold>2018</bold></highlight>. </paragraph>
<paragraph id="P-0306" lvl="0"><number>&lsqb;0306&rsqb;</number> Switching center call manager <highlight><bold>1920</bold></highlight> includes the following modes (not shown) for call management coordination at the switching center: </paragraph>
<paragraph id="P-0307" lvl="2"><number>&lsqb;0307&rsqb;</number> Dialing </paragraph>
<paragraph id="P-0308" lvl="2"><number>&lsqb;0308&rsqb;</number> RingingRemote </paragraph>
<paragraph id="P-0309" lvl="2"><number>&lsqb;0309&rsqb;</number> Paging </paragraph>
<paragraph id="P-0310" lvl="2"><number>&lsqb;0310&rsqb;</number> CallInProgress </paragraph>
<paragraph id="P-0311" lvl="7"><number>&lsqb;0311&rsqb;</number> Switching center call manager <highlight><bold>1920</bold></highlight> has a switching center call manager coordination interface <highlight><bold>2040</bold></highlight>, which includes a port for each of the above modes within switching center call manager <highlight><bold>1920</bold></highlight>. </paragraph>
<paragraph id="P-0312" lvl="0"><number>&lsqb;0312&rsqb;</number> When cell phone <highlight><bold>1600</bold></highlight> requests a connection, switching center <highlight><bold>1508</bold></highlight> creates a new switching center call manager and establishes a call management coordinator <highlight><bold>1910</bold></highlight> between cell phone <highlight><bold>1600</bold></highlight> and switching center call manager <highlight><bold>1920</bold></highlight>. </paragraph>
<paragraph id="P-0313" lvl="7"><number>&lsqb;0313&rsqb;</number> b. Mobility Management </paragraph>
<paragraph id="P-0314" lvl="0"><number>&lsqb;0314&rsqb;</number> A mobility management layer authenticates mobile unit <highlight><bold>1506</bold></highlight> or cell phone <highlight><bold>1600</bold></highlight>. When there is a surface cell <highlight><bold>1502</bold></highlight> available, mobility manager <highlight><bold>1902</bold></highlight> contacts the switching center <highlight><bold>1508</bold></highlight> for surface cell <highlight><bold>1502</bold></highlight> and transfers a mobile unit identifier (not shown) for mobile unit <highlight><bold>1506</bold></highlight> to switching center <highlight><bold>1508</bold></highlight>. Switching center <highlight><bold>1508</bold></highlight> then looks up a home motor switching center for mobile unit <highlight><bold>1506</bold></highlight> and establishes a set of permissions assigned to mobile unit <highlight><bold>1506</bold></highlight>. This layer also acts as a conduit for the call management layer. In addition, the mobility management layer performs handoffs between base stations <highlight><bold>1502</bold></highlight> and switching centers <highlight><bold>1508</bold></highlight> based on information received from the radio resource layer. </paragraph>
<paragraph id="P-0315" lvl="7"><number>&lsqb;0315&rsqb;</number> C. Radio Resource </paragraph>
<paragraph id="P-0316" lvl="0"><number>&lsqb;0316&rsqb;</number> In the radio resource layer, radio resource manager <highlight><bold>1904</bold></highlight>, chooses the target base station <highlight><bold>1502</bold></highlight> and tracks changes in frequencies, time slices, and CDMA codes. Cell phones may negotiate with up to <highlight><bold>16</bold></highlight> base stations simultaneously. This layer also identifies when handoffs are necessary. </paragraph>
<paragraph id="P-0317" lvl="7"><number>&lsqb;0317&rsqb;</number> d. Link Protocol </paragraph>
<paragraph id="P-0318" lvl="0"><number>&lsqb;0318&rsqb;</number> The link layer manages a connection between cell phone <highlight><bold>1600</bold></highlight> and base station <highlight><bold>1502</bold></highlight>. In this layer, link protocol manager <highlight><bold>1906</bold></highlight> packages data for transfer to base station <highlight><bold>1502</bold></highlight> from cell phone <highlight><bold>1600</bold></highlight>. </paragraph>
<paragraph id="P-0319" lvl="7"><number>&lsqb;0319&rsqb;</number> e. Transport </paragraph>
<paragraph id="P-0320" lvl="0"><number>&lsqb;0320&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21A</cross-reference> is a detailed view of transport component <highlight><bold>1908</bold></highlight> of connection component <highlight><bold>1610</bold></highlight>. Transport component <highlight><bold>1908</bold></highlight> has two subcomponents, a receive component <highlight><bold>2100</bold></highlight> for receiving data and a transmit component <highlight><bold>2102</bold></highlight> for transmitting data. Each of these subcomponents has two parallel data paths a CDMA path <highlight><bold>2104</bold></highlight> and a TDMA/FDMA path <highlight><bold>2106</bold></highlight> for communicating in the respective network protocols. </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21B</cross-reference> is a detailed view of a CDMA modulator <highlight><bold>2150</bold></highlight>, which implements a synchronous data flow data path. CDMA modulator <highlight><bold>2150</bold></highlight> takes the dot-product of an incoming data signal along path <highlight><bold>2152</bold></highlight> and a stored modulation code for cell phone <highlight><bold>1600</bold></highlight> along path <highlight><bold>2154</bold></highlight>, which is a sequence of chips, which are measured time signals having a value of &minus;1 or &plus;1. </paragraph>
<paragraph id="P-0322" lvl="0"><number>&lsqb;0322&rsqb;</number> Transport component <highlight><bold>1908</bold></highlight> uses CDMA and TDMA technologies to coordinate access to a resource shared among several cell phones <highlight><bold>1600</bold></highlight>, i.e., the airwaves. Transport components <highlight><bold>1908</bold></highlight> supersede the FDMA technologies (e.g., AM and FM) used for analog cellular phones and for radio and television broadcasts. In FDMA, a signal is encoded for transmission by modulating it with a carrier frequency. A signal is decoded by demodulation after being passed through a band pass filter to remove other carrier frequencies. Each base station <highlight><bold>1502</bold></highlight> has a set of frequencies&mdash;chosen to minimize interference between adjacent cells. (The area covered by a cell may be much smaller than the net range of the transmitters within it.) </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> TDMA, on the other hand, coordinates access to the airwaves through time slicing. Cell phone <highlight><bold>1600</bold></highlight> on the network is assigned a small time slice, during which it has exclusive access to the media. Outside of the small time slice, cell phone <highlight><bold>1600</bold></highlight> must remain silent. Decoding is performed by filtering out all signals outside of the small time slice. The control for this access must be distributed. As such, each component involved must be synchronized to observe the start and end of the small time slice at the same instant. </paragraph>
<paragraph id="P-0324" lvl="0"><number>&lsqb;0324&rsqb;</number> Most TDMA systems also employ FDMA, so that instead of sharing a single frequency channel, cell phones <highlight><bold>1600</bold></highlight> share several channels. The band allocated to TDMA is broken into frequency channels, each with a carrier frequency and a reasonable separation between channels. Thus user channels for the most common implementations of TDMA can be represented as a two-dimensional array, in which the rows represent frequency channels and the columns represent time slices. </paragraph>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> CDMA is based on vector arithmetic. In a sense, CDMA performs inter-cell-phone coordination using data flow. Instead of breaking up the band into frequency channels and time slicing these, CDMA regards the entire band as an n-dimensional vector space. Each channel is a code that represents a basis vector in this space. Bits in the signal are represented as either 1 or &minus;1, and the modulation is the inner product of this signal and a basis vector of mobile unit <highlight><bold>1506</bold></highlight> or cell phone <highlight><bold>1600</bold></highlight>. This process is called spreading, since it effectively takes a narrowband signal and converts it into a broadband signal. </paragraph>
<paragraph id="P-0326" lvl="0"><number>&lsqb;0326&rsqb;</number> Demultiplexing is simply a matter of taking the dot-product of the received signal with the appropriate basis vector, obtaining the original 1 or &minus;1. With fast computation and the appropriate codes or basis vectors, the signal can be modulated without a carrier frequency. If this is not the case, a carrier and analog techniques can be used to fill in where computation fails. If a carrier is used, however, all units use the same carrier in all cells. </paragraph>
<paragraph id="P-0327" lvl="0"><number>&lsqb;0327&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> shows TDMA and CDMA signals for four cell phones <highlight><bold>1600</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, for TDMA, each cell phone <highlight><bold>1600</bold></highlight> is assigned a time slice during which it can transmit. Cell phone <highlight><bold>1</bold></highlight> is assigned time slice t<highlight><bold>0</bold></highlight>, cell phone <highlight><bold>2</bold></highlight> is assigned time slice t<highlight><bold>1</bold></highlight>, cell phone <highlight><bold>3</bold></highlight> is assigned time slice t<highlight><bold>2</bold></highlight>, and cell phone <highlight><bold>4</bold></highlight> is assigned time slice t<highlight><bold>3</bold></highlight>. For CDMA, each cell phone <highlight><bold>1600</bold></highlight> is assigned a basis vector that it multiplies with its signal. Cell phone <highlight><bold>1</bold></highlight> is assigned the vector:  
<math-cwu id="MATH-US-00004">
<number>4</number>
<math>
<mrow>
  <mrow>
    <mo>(</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
    </mtable>
    <mo>)</mo>
  </mrow>
  <mo>&AutoLeftMatch;</mo>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00004" file="US20030005407A1-20030102-M00004.NB"/>
<image id="EMI-M00004" wi="216.027" he="42.9786" file="US20030005407A1-20030102-M00004.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0328" lvl="0"><number>&lsqb;0328&rsqb;</number> Cell phone <highlight><bold>2</bold></highlight> is assigned the vector:  
<math-cwu id="MATH-US-00005">
<number>5</number>
<math>
<mrow>
  <mrow>
    <mo>(</mo>
    <mtable>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
    <mo>)</mo>
  </mrow>
  <mo>&AutoLeftMatch;</mo>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00005" file="US20030005407A1-20030102-M00005.NB"/>
<image id="EMI-M00005" wi="216.027" he="42.9786" file="US20030005407A1-20030102-M00005.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0329" lvl="0"><number>&lsqb;0329&rsqb;</number> Cell phone <highlight><bold>3</bold></highlight> is assigned the vector:  
<math-cwu id="MATH-US-00006">
<number>6</number>
<math>
<mrow>
  <mrow>
    <mo>(</mo>
    <mtable>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
    <mo>)</mo>
  </mrow>
  <mo>&AutoLeftMatch;</mo>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00006" file="US20030005407A1-20030102-M00006.NB"/>
<image id="EMI-M00006" wi="216.027" he="42.9786" file="US20030005407A1-20030102-M00006.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0330" lvl="0"><number>&lsqb;0330&rsqb;</number> Cell phone <highlight><bold>4</bold></highlight> is assigned the vector:  
<math-cwu id="MATH-US-00007">
<number>7</number>
<math>
<mrow>
  <mrow>
    <mo>(</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
      </mtr>
    </mtable>
    <mo>)</mo>
  </mrow>
  <mo>&AutoLeftMatch;</mo>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00007" file="US20030005407A1-20030102-M00007.NB"/>
<image id="EMI-M00007" wi="216.027" he="42.9786" file="US20030005407A1-20030102-M00007.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> Notice that these vectors form an orthogonal basis. </paragraph>
<paragraph id="P-0332" lvl="0"><number>&lsqb;0332&rsqb;</number> B. Handheld Web Browser </paragraph>
<paragraph id="P-0333" lvl="0"><number>&lsqb;0333&rsqb;</number> In the previous subsection, we demonstrated our methodology on a cell phone with a top-down design approach. In this subsection, we demonstrate our methodology with a bottom-up approach in building a handheld Web browser. </paragraph>
<paragraph id="P-0334" lvl="0"><number>&lsqb;0334&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23A</cross-reference> is a LCD touch screen component <highlight><bold>2300</bold></highlight> for a Web browser GUI (shown in <cross-reference target="DRAWINGS">FIG. 24A</cross-reference>) for a wireless device <highlight><bold>1506</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 23A, a</cross-reference> LCD touch screen component <highlight><bold>2300</bold></highlight>, has an LCD screen <highlight><bold>2302</bold></highlight> and a touch pad <highlight><bold>2304</bold></highlight>. </paragraph>
<paragraph id="P-0335" lvl="0"><number>&lsqb;0335&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23B</cross-reference> is a Web page access component <highlight><bold>2350</bold></highlight> for fetching and formatting web pages. With reference to <cross-reference target="DRAWINGS">FIG. 23</cross-reference>B, web access component <highlight><bold>2350</bold></highlight> has a page fetch subcomponent <highlight><bold>2352</bold></highlight> and a page format subcomponent <highlight><bold>2354</bold></highlight>. Web access component <highlight><bold>2350</bold></highlight> reads hypertext markup language (HTML) from a connection interface <highlight><bold>2356</bold></highlight>, sends word placement requests to a display interface <highlight><bold>2358</bold></highlight>, and sends image requests to the connection interface <highlight><bold>2356</bold></highlight>. Web access component <highlight><bold>2350</bold></highlight> also has a character input interface to allow users to enter page requests directly and to fill out forms on pages that have forms. </paragraph>
<paragraph id="P-0336" lvl="0"><number>&lsqb;0336&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24A</cross-reference> shows a completed handheld Web browser GUI <highlight><bold>2400</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 24</cross-reference>A, handheld Web browser GUI <highlight><bold>2400</bold></highlight>, has LCD touch screen component <highlight><bold>2300</bold></highlight>, web access component <highlight><bold>2350</bold></highlight>, and a pen stroke recognition component <highlight><bold>2402</bold></highlight> that translates pen strokes entered on touch pad <highlight><bold>2304</bold></highlight> into characters. </paragraph>
<paragraph id="P-0337" lvl="0"><number>&lsqb;0337&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24B</cross-reference> shows the complete component view of a handheld Web browser <highlight><bold>2450</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 24</cross-reference>B, handheld Web browser <highlight><bold>2450</bold></highlight> is formed by connecting handheld Web browser GUI <highlight><bold>2400</bold></highlight> to connection component <highlight><bold>1610</bold></highlight> of cell phone <highlight><bold>1600</bold></highlight> (described with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>) with bidirectional data transfer coordinator <highlight><bold>604</bold></highlight> (described with reference to <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>). Handheld Web browser <highlight><bold>2450</bold></highlight> is an example of mobile unit <highlight><bold>1506</bold></highlight>, and connects to the Internet through the cellular infrastructure described above. However, handheld Web browser <highlight><bold>2450</bold></highlight> has different access requirements than does cell phone <highlight><bold>1600</bold></highlight>. For handheld Web browser <highlight><bold>2450</bold></highlight>, reliability is more important than real-time delivery. Dropped packets usually require retransmission, so it is better to deliver a packet late than to drop it. Real-time issues primarily affect download time and are therefore secondary. Despite this, handheld Web browser <highlight><bold>2450</bold></highlight> must coordinate media access with cell phones <highlight><bold>1600</bold></highlight>, and so it must use the same protocol as cell phones <highlight><bold>1600</bold></highlight> to connect to the network. For that reason, handheld Web browser <highlight><bold>2450</bold></highlight> can reuse connection component <highlight><bold>1610</bold></highlight> from cell phone <highlight><bold>1600</bold></highlight>. </paragraph>
<paragraph id="P-0338" lvl="0"><number>&lsqb;0338&rsqb;</number> It will be obvious to those having skill in the art that many changes may be made to the details of the above-described embodiments of this invention without departing from the underlying principles thereof. The scope of the present invention should, therefore, be determined only by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A methodology for designing a software system independent of a target hardware implementation, the methodology comprising designing the software system as comprising 
<claim-text>a first component for realizing a predetermined functionality, </claim-text>
<claim-text>a first coordinator for managing interactions between the first component and a second component, and </claim-text>
<claim-text>a first pair of coordination interfaces comprising a first and a second coordination interface for implementing a connection between the first component and the first coordinator so as to preserve component modularity while exposing only the parts of the component that participate in coordination. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the first coordinator implements a predetermined coordination protocol. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the first pair of coordination interfaces includes a pair of complimentary ports to transfer information between the coordination interfaces. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein a first port of the pair of complimentary ports has a combination of attributes realizing an output message port and the other port of the pair of complimentary ports has a combination of attributes realizing an input message port. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the a first port of the pair of complimentary ports has a combination of attributes realizing an exported state port and the other port of the pair of complimentary ports has a combination of attributes realizing an imported state port. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein a first port of the pair of complimentary ports has a combination of attributes realizing a first control port, and the other port of the pair of complimentary ports has a combination of attributes realizing a second control port that is complimentary to the first control port. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein a first port of the pair of complimentary ports has a combination of attributes realizing a first arbitrated state port, and the other port of the pair of complimentary ports has a combination of attributes realizing a second arbitrated state port that is complimentary to the first arbitrated state port. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein each port of the pair of complimentary ports is defined by a five-tuple (T, A, Q, D, R) where: 
<claim-text>T represents a datatype of the port; </claim-text>
<claim-text>A is a Boolean value that is true if and only if the port is arbitrated; </claim-text>
<claim-text>Q is a predetermined integer greater than zero that represents logical queue depth of the port; </claim-text>
<claim-text>D represents a directionality of data flows with respect to the port; and </claim-text>
<claim-text>R represents a policy for data removal on the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein D is one of &lcub;in, out, inout &rcub; representing data flow into the port, out of the port, or bi-directional, respectively. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein D is one of &lcub;in, out, inout or custom&rcub;, where custom directionality permits restricting the port to accept or to generate only certain specific predetermined values. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the first coordination interface implements a predetermined guarantee of a selected invariant interface property of the first component. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the guarantee specifies a predetermined event ordering. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the guarantee specifies an acceptable relative behavior between the first and second component. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the first coordination interface includes a specified requirement and the second coordination interface includes a specified guarantee that satisfies the specified requirement of the first coordination interface. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A computer software design methodology comprising a coordination interface for software packaging, wherein the coordination interface comprises at least one named port. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the coordination interface further comprises: 
<claim-text>a set of at least one named guarantee provided by the interface; </claim-text>
<claim-text>a set of at least one named requirement that must be matched by a guarantee of a connected interface </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the coordination interface further comprises a set of coordination interfaces including at least a second coordination interface, thereby making coordination interfaces hierarchical. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the named port is defined by a five-tuple (T, A, Q, D, R) where: 
<claim-text>T represents a datatype of the port; </claim-text>
<claim-text>A is a Boolean value that is true if and only if the port is arbitrated; </claim-text>
<claim-text>Q is a predetermined integer greater than zero that represents logical queue depth of the port; </claim-text>
<claim-text>D represents a directionality of data flows with respect to the port; and </claim-text>
<claim-text>R represents a policy for data removal on the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A software system for execution on a hardware platform, the software system comprising: 
<claim-text>a first component having a first coordination interface; </claim-text>
<claim-text>a second component having a second coordination interface; and </claim-text>
<claim-text>a coordinator for coordinating control and data flow between the first and second components and having a third coordination interface that is complimentary to the first coordination interface and a fourth coordination interface that is complimentary to the second coordination interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A software system according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the first coordination interface includes a first port as a connection point to a second port included on the third coordination interface. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the first port has a combination of attributes realizing a first message port. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the second port has a combination of attributes realizing a second message port that is complimentary to the first message port. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the first port has a combination of attributes realizing a first state port. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein the second port has a combination of attributes realizing a second state port that is complimentary to the first message port. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the first port has a combination of attributes realizing a first control port. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein the first port has a combination of attributes realizing a second control port that is complimentary to the first control port. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A method for designing software systems comprising: 
<claim-text>designing a first software component for performing a first predetermined functionality that when activated produces a defined result; </claim-text>
<claim-text>designing a first coordination interface for logically connecting the first component to the first coordination interface in order to export the result produced by the first component; </claim-text>
<claim-text>designing a second component for performing a second predetermined functionality that can respond to the defined result produced by the first component; </claim-text>
<claim-text>designing a second coordination interface for logically connecting the second component to the second coordination interface in order to importing the result produced by the first software component; </claim-text>
<claim-text>designing a coordinator with a third coordination interface that is complimentary to the first coordination interface and a fourth coordination interface that is complimentary to the second coordination interface, for transferring the result exported by the first coordination interface from the first coordination interface to the second coordination interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> in which the first coordination interface has a first port for exporting the result produced by the first component. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> in which the second coordination interface has a second port for importing the result produced by first component. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> in which the third coordination interface has a third port that is complimentary to the first port for importing the result exported by the first port, and in which the fourth coordination interface has a fourth port that is complimentary to the second port for exporting the result imported by the third port. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> in which the third coordination interface is bound to the fourth coordination interface in a manner that implements a predetermined coordination protocol. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> in which the first component comprises a first action, for implementing the first predetermined functionality, a first mode for implementing a boolean guard on the first action, and a first event to serve as a trigger for initiating the first action. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference> in which the second component comprises a second action, for implementing the second predetermined functionality, a second mode for implementing a boolean guard on the second action, and a second event to serve as a trigger for initiating the second action. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> in which the coordinator comprises a binding between the third and fourth coordination interfaces for transferring the result from the third coordination interface to the fourth coordination interface. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> in which the coordinator comprises a coordinator action which performs a predetermined coordinator function, and a mode which serves as a boolean guard on the coordinator action. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> in which the coordinator further comprises a constraint which serves to enforce a predetermined relationship between a pair of control ports. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A method for designing a software program without reference to a target system architecture comprising: 
<claim-text>creating a first component comprising software code for performing a first function and a first coordination interface for sending and receiving separate control and dataflow information; </claim-text>
<claim-text>creating a second component comprising software code for performing a second function and a second coordination interface for sending and receiving separate control and dataflow information; </claim-text>
<claim-text>creating a coordinator to manage control interactions and dataflow interactions between the first component and the second component comprising a third coordination interface for logically connecting to the first coordination interface, and a fourth coordination interface for logically connecting to the second coordination interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> in which the coordination interfaces each comprise a port for transferring information. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> in which the first coordination interface and the third coordination interface have corresponding ports and complimentary requirements and guarantees, and the second coordination interface and the fourth coordination interface have corresponding ports and complimentary requirements and guarantees. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference> in which the first component further comprises a first mode and a first action. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference> in which the second component further comprises a second mode and a second action. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference> in which the coordinator further comprises a third action and a third mode. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> in which the coordinator further comprises a first binding which connects a first port on the third coordination interface to a second port on the fourth coordination interface </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference> in which the first port is an input data port and the second port is an output data port. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> in which the coordinator further comprises a second binding which connects a third port on the third coordination interface to the third mode. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> in which the coordinator further comprises a third binding which connects a fourth port on the fourth coordination interface to a first variable. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> in which the coordinator further comprises a fourth binding which connects a fifth port on the third coordination interface to a first event. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A software system comprising: 
<claim-text>a first software component comprising a first action; </claim-text>
<claim-text>a second software component comprising a second action; and </claim-text>
<claim-text>a coordinator for implementing a communication protocol between the first software component and the second software component and connected to the first software component and the second software component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference> in which the first software component further comprises: 
<claim-text>a first mode connected to the first action; </claim-text>
<claim-text>a first trigger connected to the first action; and </claim-text>
<claim-text>a first coordination interface comprising a first port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00044">claim 49</dependent-claim-reference> in which the second software component further comprises; 
<claim-text>a second mode connected to the second action; </claim-text>
<claim-text>a first trigger connected to the first action; and </claim-text>
<claim-text>a second coordination interface comprising a second port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference> in which the coordinator comprises: 
<claim-text>a third action for implementing the communication protocol; </claim-text>
<claim-text>a third mode connected to the third action; </claim-text>
<claim-text>a third trigger connected to the third action; </claim-text>
<claim-text>a third coordination interface comprising a third port and connected to the first coordination interface; and </claim-text>
<claim-text>a fourth coordination interface comprising a fourth port and connected to the second coordination interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference> in which the first software component further comprises a first binding. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference> in which the second software component further comprises a second binding. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 53</dependent-claim-reference> in which the coordinator further comprises a third binding. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference> in which the first coordination interface further comprises a fourth port and a fourth binding. </claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference> in which the first binding connects the first port to the first mode and the fourth binding connects the fourth port with the first trigger. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. A method for designing a software system comprising: 
<claim-text>creating a first software component comprising a first action, a first mode and a first coordination interface; </claim-text>
<claim-text>creating a second software component comprising a second action, a second mode and a second coordination interface; and </claim-text>
<claim-text>creating a coordinator, to implement a predetermined communication protocol between the first and second component by coordinating control and dataflow interactions between the first component and the second component, comprising: 
<claim-text>a third action; </claim-text>
<claim-text>a third mode; </claim-text>
<claim-text>a third coordination interface connected to the first coordination interface; and </claim-text>
<claim-text>a fourth coordination interface connected to the second coordination interface. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. A software system comprising; 
<claim-text>n components, where n is an integer greater than zero, each component designed to perform a predetermined functionality; </claim-text>
<claim-text>m coordinators, where m is an integer greater than zero, each coordinator designed to implement a predetermined coordination protocol between a set of the n components; </claim-text>
<claim-text>n coordination interface pairs, each coordination interface pair designed to logically connect a component to a coordinator for transferring information between the component and the coordinator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference> wherein each component of the n components comprises: 
<claim-text>an action to perform a predetermined function; </claim-text>
<claim-text>a mode to act as a boolean guard on the action; </claim-text>
<claim-text>a trigger which when activated causes the action to perform the predetermined function when the mode has a value of true. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference> wherein a component of the n components further comprises: 
<claim-text>a set of sub-components; </claim-text>
<claim-text>a set of internal coordinators, each internal coordinator designed to implement a predetermined coordination protocol between a subset of the set of sub-components; </claim-text>
<claim-text>a set internal coordination interface pairs for logically connecting the sub-components to the internal coordinators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The software system of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference> wherein each coordinator of the m coordinators comprises: 
<claim-text>an action an action to perform a predetermined function; </claim-text>
<claim-text>a mode to act as a boolean guard on the action; </claim-text>
<claim-text>a trigger which when activated causes the action to perform the predetermined function when the mode has a value of true. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. The software system of claim <highlight><bold>61</bold></highlight> wherein a coordinator of the m coordinators further comprises: 
<claim-text>a set of sub-coordinators, each sub-coordinator designed to implement a predetermined coordination protocol between a subset of any of the n coordination interface pairs that are logically connected to the coordinator; </claim-text>
<claim-text>a set of internal coordination interface pairs, each internal coordination interface pair designed to logically connect the sub-coordinators to one coordination interface of the coordination interface pairs that are logically connected to the coordinator.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005407A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005407A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005407A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005407A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005407A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005407A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005407A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005407A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005407A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005407A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005407A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005407A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005407A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005407A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005407A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005407A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005407A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005407A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005407A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005407A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005407A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005407A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005407A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005407A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030005407A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
