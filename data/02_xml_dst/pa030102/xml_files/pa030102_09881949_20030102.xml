<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002503A1-20030102-D00000.TIF SYSTEM "US20030002503A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00001.TIF SYSTEM "US20030002503A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00002.TIF SYSTEM "US20030002503A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00003.TIF SYSTEM "US20030002503A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00004.TIF SYSTEM "US20030002503A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00005.TIF SYSTEM "US20030002503A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00006.TIF SYSTEM "US20030002503A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00007.TIF SYSTEM "US20030002503A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00008.TIF SYSTEM "US20030002503A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00009.TIF SYSTEM "US20030002503A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00010.TIF SYSTEM "US20030002503A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00011.TIF SYSTEM "US20030002503A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00012.TIF SYSTEM "US20030002503A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00013.TIF SYSTEM "US20030002503A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00014.TIF SYSTEM "US20030002503A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00015.TIF SYSTEM "US20030002503A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00016.TIF SYSTEM "US20030002503A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00017.TIF SYSTEM "US20030002503A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00018.TIF SYSTEM "US20030002503A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00019.TIF SYSTEM "US20030002503A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002503A1-20030102-D00020.TIF SYSTEM "US20030002503A1-20030102-D00020.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002503</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09881949</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010615</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L012/28</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>392000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>370</class>
<subclass>410000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Switch assisted frame aliasing for storage virtualization</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Lani</given-name>
<middle-name>William</middle-name>
<family-name>Brewer</family-name>
</name>
<residence>
<residence-us>
<city>Anaheim</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>Gifford</middle-name>
<family-name>Logan</family-name>
</name>
<residence>
<residence-us>
<city>Newport Beach</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FALK AND FISH</name-1>
<name-2></name-2>
<address>
<address-1>16590 OAK VIEW CIRCLE</address-1>
<city>MORGAN HILL</city>
<state>CA</state>
<postalcode>95037</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus and process for relabelling and redirecting at least some of the read transaction data frames and the write transaction write data and transfer ready frames in a network so as to bypass a storage manager and pass directly between the client and a storage device via a switch. This eliminates the storage manager as a bottleneck. Some embodiments redirect every read and write transaction, and others redirect only large transactions, or only ones not stored in cache or when latency gets too high. Redirection is accomplished by transmission from the storage manager to a switch redirection commands that contain old and new address data. When a frame to be redirected comes in, its address is compared to the old address data. If there is a match, the new address data is substituted and the frame is passed to a conventional routing process to be routed so as to bypass the storage manager. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention finds application in data processing systems such as storage area networks which have at least: (1) an interconnect network which transports data in packets; (2) a storage client or clients; (3) a storage server; and (4) storage devices. In such networks the storage server manages a large number of storage devices to retrieve and store data for various storage clients. The storage clients are not directly connected to the storage devices, and request data stored on the storage devices by making requests to the storage server. The storage server then makes a request to the storage devices. The network, comprised of physical transmission medium and various devices such as hubs, switches, routers etc. provides for the actual transport of data between the clients and the storage manager in the storage server and the transport of data between the storage server and the storage devices. The network also provides a data path between the storage clients and the storage devices. Any connections between the storage clients and the storage devices are not used, because the storage server needs to be solely responsible for the organization of data on the storage devices. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a typical prior art network configuration implemented with a switch. Storage clients <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight> are coupled to two different ports of switch <highlight><bold>14</bold></highlight>. The switch is also coupled to storage devices <highlight><bold>16</bold></highlight> and <highlight><bold>18</bold></highlight> through two different ports. A storage server <highlight><bold>20</bold></highlight> implementing a storage manager process has an input <highlight><bold>22</bold></highlight> coupled to one port and an output <highlight><bold>24</bold></highlight> coupled to another port. The switch allows each port to be coupled to any other port and allows multiple simultaneous connections. Thus, data paths between the clients and the server and between the server and the storage devices can be set up through the switch. In addition, data paths can be set up between the storage clients and the storage devices through the switch, but the clients have no use for this since the clients recognize only the server/storage manager as a storage provider even though the actual data is stored on the storeage devices. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The way a prior art network such as a FibreChannel Network works to read and write data between client devices and storage devices was as follows. Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> client <highlight><bold>10</bold></highlight> which wishes to retrieve data from the storage manager would address a Fibre Channel (FC) frame to the server <highlight><bold>20</bold></highlight> (all the prior art transport protocols and primitives will not be described as they not are part of the invention other than as the basic platform on which the invention sits). This frame contains a SCSI command requesting the desired data. The frame will have a header that contains address information and a payload which contains a SCSI command. The address (PA) of storage client will be the source address, and the address of the server will be the destination address. The header of each frame also contains two exchange IDs, one for the originator and one for the responder, that serves to identify all the frames that belong to this particular read or write transaction. If the same client has, for example, two read or write transaction outstanding, all the frames transmitted from that originator client pertaining to either of those transactions will have the same source and destination address, but all the frames pertaining to the first transaction will have a first originator exchange ID, and all the frames pertaining to the second transaction will have a second, different originator exchange ID. There are also flags to indicate the type of data contained in the payload section of the FC frame such as: a command to do a read or write, a transfer ready message or the requested data itself. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The sequence of events for write and read data transfer operations in a prior art network like that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> has the exchanges defined in Table 1 below. In the prior art data transfers, the originator would be a storage client and the responder would be the storage manager <highlight><bold>20</bold></highlight> for both read and write transactions.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="91PT" align="left"/>
<colspec colname="2" colwidth="77PT" align="left"/>
<colspec colname="3" colwidth="91PT" align="left"/>
<thead>
<row>
<entry namest="1" nameend="3" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>DIRECTION</entry>
<entry>WRITE ORDER</entry>
<entry>READ ORDER</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>(1) Originator to Responder</entry>
<entry>Command to write data</entry>
<entry>Command to read data</entry>
</row>
<row>
<entry>(2) Responder to Original</entry>
<entry>Transfer Ready</entry>
</row>
<row>
<entry>(3) Responder to Originator</entry>
<entry></entry>
<entry>Requested data transferred</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>to originator from</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>responder</entry>
</row>
<row>
<entry>(4) Originator to Responder</entry>
<entry>Data to be written</entry>
</row>
<row>
<entry></entry>
<entry>transferred to responder</entry>
</row>
<row>
<entry>(5) Responder to Originator</entry>
<entry>Status</entry>
<entry>Status</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The way this sequence of events works in the prior art networks is that the client <highlight><bold>10</bold></highlight> sends a SCSI command to, for example, read data to the storage manager. This request will be transmitted to the storage manager through the switch by encapsulating the SCSI command in a FC frame or other packet, as represented by line 1 of Table 1. The read command will request reading of data and specify the desired data by, for example, specifying that the desired data resides on SCSI Logical Unit <highlight><bold>1</bold></highlight>, starting at logical block <highlight><bold>75</bold></highlight> and extends for 200 logical blocks. This read request will have as its destination address, the address of the storage manager server <highlight><bold>20</bold></highlight> (hereafter the storage manager or server), and will have an originator exchange ID assigned by the client <highlight><bold>10</bold></highlight> for this transaction, and the responder exchange ID will be blank. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The storage manager <highlight><bold>20</bold></highlight> contains a map of where client data is stored for all the data that is stored on the storage devices it is managing. The storage manager <highlight><bold>20</bold></highlight> looks up where the requested data is stored and establishes a connection through the switch with the storage device storing the requested data and retrieves the data by sending an FC frame encapsulating a command to read the requested data and send it back to the storage manager. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates this sequence of events with the storage manager being the originator and the client being the responder. In this prior art mechanism, the storage manager is the originator of this transaction between itself and the storage device, so the storage manager fills in an originator exchange ID for the transaction which could be anything, but which serves to identify this transaction between the storage manager and the storage device. The responder exchange ID is left blank by the storage manager. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The requested data is read by the storage device and then transferred to and stored on the storage manager <highlight><bold>20</bold></highlight>. In this transaction, the storage device generates an outgoing frame or frames with some responder exchange ID assigned by the storage device and fills in the outgoing frame or frames with data and the originator exchange ID used by the storage manager in the frame requesting the data. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> After having received some of the frames and stored the data, the storage manager generates one or more FC frames in which the retrieved data is put, each said generated frame having a destination address which is the Port_ID of the client that made the original request and the Port_ID of the storage manager <highlight><bold>20</bold></highlight> as the source address. These frames will be filled in so as to have as the originator ID the original originator ID assigned by the client, and will have as the responder ID an ID assigned to the transaction by the storage manager for this read request. The storage manager <highlight><bold>20</bold></highlight> then sends the frame or frames with the requested data (or at least part of it) encapsulated as the payload in the FC frame or frames and the data flag set in the header, as symbolized by line 3 of Table 1 above. Then a status message is sent from the storage device to the storage manager indicating that all the data has been sent. The storage manager in turn sends a status frame to the client. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The actual processing inside the storage manager <highlight><bold>20</bold></highlight> during such a prior art exchange is as follows. The storage client <highlight><bold>10</bold></highlight>, when it makes the original request, assigns to that request a particular originator exchange ID. It does this because it may make other concurrent requests for data from the storage manager, and when it gets a frame of data back, it needs to know to which request that data frame is a response. The request gets sent to the storage manager which then retrieves the data from the appropriate storage device using frames with an originator exchange ID assigned by the storage manager for this transaction with the storage device, and with the source ID equal the storage device&apos;s port ID and the destination ID set to the storage manager&apos;s port ID. When a frame of data comes back from the storage device, it has as its source address the storage device address (PA) and as its destination address the address of the storage manager <highlight><bold>20</bold></highlight> and it has the assigned originator exchange ID used by the storage manager and a responder exchange ID assigned by the storage device. An engine in the storage manager receives these frames and stores the data therefrom in memory until they can be framed for transmission to the client. Another engine in the storage manager then matches up the requests that are pending with the data that has been received. When it finds a match, the engine puts data in an FC frame or frames using the storage manager&apos;s Port_ID as the source address and the Port_ID of the client that made the request as the destination address and includes the appropriate exchange IDs so the client will know to which of its requests the data frame is a response. The frame is then sent to the client through the switch. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The memory in the storage manager has a bandwidth that is related to the bandwidth of the internal bus of the storage manager server. Fibre Channel bandwidth is very high. Assume that if a client were connected directly to a storage device through a switch, that data transfers of 100 Mbytes/sec could occur. Now suppose there were 10 clients in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> simultaneously connected to 10 storage devices through switch <highlight><bold>14</bold></highlight> that could support 10 simultaneous connections. Now the effective data transfer rate is 10&times;100 Mbytes/sec or 1 Gigabyte/second. Now, if all that data must pass through a data storage manager, there would have to be a 1 Gigabyte/second data path to the memory in the storage manager server <highlight><bold>20</bold></highlight>. Typically, these storage manager servers have PCI buses which do not have bandwidth even approaching 1 Gigabyte/second. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Obviously, the framing of the data in the server for transfer to the client takes time and the storage manager bus bandwidth is a bottleneck in high volume traffic situations. Furthermore, extensive memory is required in the storage manager server to store all the data before it is retransmitted and the operating system is kept busy organizing the data in memory and organizing the receiving and transmittal of frames. All this needlessly consumes computing resources. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Prior art attempts to solve this problem include the massively parallel storage managers made by EMC. These very expensive servers use parallel buses and parallel processors and complicated software to coordinate the operations thereof. Even they can be a bottleneck however. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> There is an existing, related process called Web Director available commercially from Cisco that performs redirecting of web requests sent to a first server to a second server in order to offload work to the other servers. When a web request is received at a first server, it is mapped to a second server, and a message is sent back to the client telling it that the web server has been temporarily moved. The web client then transparently connects through the internet to the second server and communicates directly with it. An overview of this process is as follows: </paragraph>
</section>
<section>
<heading lvl="1">Overview of How the Director Functions in Http Session Redirector Mode </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> 1. A client web browser tries to retrieve URL http://www.sleet.com. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> 2. The Internet DNS system maps this name to the Director virtual IP address 10.0.0.4. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> 3. The Director listens for HTTP connections to IP address 10.0.0.4. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> 4. The client web browser connects to IP address 10.0.0.4. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> 5. The Director performs a look up for the host name associated with the address 10.0.0.4. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> 6. The Director performs a look up for the IP addresses associated with the host name www-servers.sleet.com. This results in the normal Director sorting of addresses using all of the metrics configured for this host name. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> 7. The Director then constructs the new URL using the IP address of the discovered &ldquo;best&rdquo; web server (for example, http://12.0.0.2) appended with the rest of the original URL, and sends the web client the code &ldquo;302 Temporarily Moved,&rdquo; specifying the new URL location. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> If the URL originally requested had been: </paragraph>
<paragraph id="P-0022" lvl="2"><number>&lsqb;0022&rsqb;</number> http://www.sleet.com/Weather/index.html </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Then the new URL would be: </paragraph>
<paragraph id="P-0024" lvl="2"><number>&lsqb;0024&rsqb;</number> http://12.0.0.2/Weather/index.html </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> 8. The client web browser receives the temporary relocation code and transparently connects to the web server at the specified URL. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Because this is only a temporary relocation, the client web browser should bookmark the original URL (http://www.sleet.com), so users who later return to this URL will once again be connected to the &ldquo;best&rdquo; web server for that moment. (In reality, most browsers do not bookmark the correct URL. Browser vendors are likely to fix this behavior.) </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> For a more detailed discussion of this technology, refer to http://www.cisco.com/univercd/cc/td/doc/product/iaabu/distrdir/dd2501/http.htm which is hereby incorporated by reference. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The problem with this approach is that it will not work in a network where a storage manager is present and is mapping the data stored on storage devices and monitoring all read and write transactions to and from the storage devices since a redirection method has not been defined or incorporated. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> This invention is useful in any switched fabric network having a centralized storage manager or other device or data path which can act as a bottleneck and through which all read and write requests are directed. The more clients and storage devices there are, the more useful the invention is. Specifically, the invention is advantageous in any switched network environment having a centralized storage manager, one or more storage devices, one or more client devices that access the storage devices indirectly by making requests to the storage manager and a switch network that switches packets or frames having at least source and destination addresses in the header thereof. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The fundamental idea of the invention and the characteristic that all species within the genus of the invention will share is the addition of some intelligence to the switch fabric to intercept at least some of the frames going from the storage device to the storage manager and re-label them and redirect them directly to the requesting client without going through the storage manager or other bottleneck while writing the headers so that they look like they did come from the storage manager. Also part of this fundamental idea is that there must be processing to redirect at least some of the frames propagating from the client (also called the host) to the storage manager so that they bypass the storage manager and go directly from the client to the device through the switch while being relabeled (relabeled or relabels as those terms are used herein means to substitute header fields from one or more redirection commands into the headers of frames that are being redirected so that they appear to come from the storage manager even though the redirection process actually bypasses the storage manager) so that they look like they came from the storage manager. This redirection process is done by instructing processes in the switch ports (or other circuitry in the switch) to which the storage devices and client devices are coupled to intercept frames directed to the storage manager in response to read and write requests, and to relabel them to direct them directly to the client or the device without going through the storage manager, but to replace various fields in the headers of these frames to make them look like they came from the storage manager instead of the storage device itself. This allows the storage device and client device software and hardware to remain structured as it has been in the past and not require any modifications. This is a serious advantage to implementing this technology since the client and storage device circuitry is not usually made by the maker of the switch and/or the storage manager. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In a write transaction, two ports are involved in the redirection. The switch port coupled to the client device is programmed to relabel for redirection data frames originating at the client to go directly to the storage device. Likewise, the switch port coupled to the storage device is programmed to re-label for redirection transfer ready frames returning from the storage device so that they go directly to the client. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In either case, the new destination addresses resulting from the interception and relabelling cause the switch network to set up a new switch connection to bypass the storage manager. This minimizes delays caused by the storage manager server and eases the burden on its memory and processing power and internal data paths. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> This redirection notion is generally most applicable to local area or storage area networks where there is a storage manager for virtualizing storage devices (such as non striped RAID controllers) that can act as a bottleneck and a switch network which can be modified to carry out the redirection process. &ldquo;Virtualizing storage devices&rdquo; means that the storage manager manages one or storage devices and appears to the client devices to be a storage device even though the actual data is not stored on the storage manager itself. Some of the claims are directed only to switches that work with storage managers that redirect read and/or write transactions to go around the storage manager so that it is not a bottleneck. It is the intent of the inventors in these claims to not limit the storage manager to the specific embodiments of storage managers disclosed herein but to claim a switch that works with any storage manager that can &ldquo;virtualize storage devices&rdquo;. Further, the storage manager and the switch might be combined on the same circuit board or in the same enclosure so as to not be separate units. However, so long as the portions of the circuit that do the switching has a structure and operates in the way defined for any of the switch embodiments disclosed herein, such a switch/storage manager would be within the teachings of the invention. Likewise for claims directly solely to the storage manager. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The notion of the invention can also be extended to wide area networks where there are devices through which all read and write transactions must pass and which can become bottlenecks. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> There are four basic classes of embodiments within the genus of the invention. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The first class of embodiments has a switch and storage manager which cooperate to relabel and redirect every read or write request such that the switch assumes the alias of the storage manager. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> An important second class of alternative embodiments, analyzes the number of outstanding requests to read and/or write data to the storage devices and relabels and redirects packets or frames only when a threshold of traffic is reached where the storage manager is likely to be a bottleneck. This threshold can be programmable. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> A third class of embodiments has a storage manager that monitors the time between receipt of a read or write request and the time that the actual data read from the storage device as a result of said read request is sent from the storage manager back to the client device which requested it and performs a parallel process for write requests. When the time equals or exceeds a predetermined threshold, which can be programmable, the storage manager issues a redirection requests for all subsequent read and write requests until the time drops below the threshold. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A fourth class of embodiments happens in storage managers that have cache. In these embodiments, the decision whether to do redirection or not depends upon the cache algorithm and whether it wants the requested data in the cache or not. For example, all large transactions that would to fill or dominate most of the cache space may be redirected, while smaller transactions or transactions from certain high use areas on the storage devices would not be redirected so that they can be copied into cache. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The invention is therefore a genus of species all of who share the characteristics of, at least when the storage manager is liable to be a bottleneck, sending redirection commands to the switch which cause the switch to relabel and redirect data packets or frames between clients, servers and storage devices such that selected packets or frames from clients or storage devices that normally would pass through the storage manager are relabelled and redirected to bypass the storage manager and pass directly between the client and the storage device through the switch. This is done without the knowledge of the clients or storage devices and does not require any modications of the hardware or software of either the storage client or the storage device. This prevents the storage manager server from becoming a bottleneck by allowing direct data transfers between the clients and storage devices. The storage server is typically the intelligence that communicates the information to the selected network elements that do the re-labelling and redirecting of packets. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Any hardware and/or software structure that can accomplish this interception and re-labelling and re-direction will suffice to practice the invention. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a typical network configuration implemented with a switch in which the invention can be implemented. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2A through 2D</cross-reference> are a table that lists the sequence of events that must occur in a preferred class of embodiments in each of the switch, storage device, storage manager and client device to implement an alias read transaction using the invention to redirect every data frame of every read transaction. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a symbolic diagram of traffic flow in a system according to the teachings of the invention. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4A through 4E</cross-reference> are a table that lists the sequence of events that must occur in a preferred class of embodiments in each of the switch, storage device, storage manager and client device to implement an aliased write transaction using the invention to redirect every data frame of every write transaction. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a system employing species in the preferred classes of storage managers and switches where every data frame is redirected and redirection commands are sent only to the ports involved. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> represents a class of embodiments where every port has a look up table and every redirection command is broadcast to all redirection processes for storage in their local lookup tables regardless the port would be involved in the redirection represented by any particular redirection command. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> represents a class of embodiments where the storage manager does not have configuration data but the switch does and the switch uses its configuration data to determine to which ports each incoming redirection command is to be sent for storage. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> represents a class of embodiments where a single shared look up table in the switch stores all redirection commands and is shared by all redirection processes in the ports. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> represents another class of alternative embodiments wherein the switch has a centralized redirection process <highlight><bold>100</bold></highlight> as part of the routing process, and all the ports are standard and forward frames they receive to this centralized redirection process. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart of the processing in the storage manager to decide whether to redirect, and, if so, to generate and send redirection commands. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, May 25, 2001 comprised of <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, is a flowchart of the processing of the redirection process in each port or the central redirection process to process incoming frames. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram of the pertinent hardware of a typical storage manager. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a flowchart of another embodiment for the processing in the storage manager to redirect frames. </paragraph>
</section>
</summary-of-invention>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFFERED AND ALTERNATIVE EMBODIMENTS </heading>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 2A through 2B</cross-reference>, there is shown a table giving the sequence of events that must occur to implement the process of one species within the invention in carrying out a read transaction and redirecting all frames. Basically, the invention can be implemented by modifying the software in the storage manager <highlight><bold>20</bold></highlight> and switch <highlight><bold>14</bold></highlight> in the prior art structure of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> to carry out the sequence of events listed in the tables of <cross-reference target="DRAWINGS">FIGS. 2A through 2B</cross-reference>. The term &ldquo;switch&rdquo; as used in the claims should be understood as including not only single packet or frame switches but also combinations of physically separate switches all coupled to form a network and having a protocol to exchange information with each other to implement the switching function. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The tables of <cross-reference target="DRAWINGS">FIGS. 2A through 2B</cross-reference> identify the functions that occur in each of the switch <highlight><bold>14</bold></highlight>, a storage device such as <highlight><bold>16</bold></highlight> or <highlight><bold>18</bold></highlight>, the storage manager <highlight><bold>20</bold></highlight> and a client device such as <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight> to carry out the re-labeling and re-direction of packets to implement the invention. Each function is numbered by a number in parenthesis, and will be discussed in a like numbered section below. </paragraph>
<paragraph id="P-0057" lvl="7"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>1</bold></highlight>) </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The preferred and alternative embodiments detailed in <cross-reference target="DRAWINGS">FIGS. 2A</cross-reference> to the end sends the redirection commands only to the particular port to which the storage device storing the requested read data is connected. This does not happen embodiments where every port receives and stores a copy of every redirection command. In these alternative embodiments, a copy of every redirection command is sent to every port for storage by the storage manager or are only sent to one master port on the switch which then copies them to all other ports. The embodiment wherein the redirection commands are sent only to specific, appropriate ports to which the client and storage device are connected minimizes the amount of storage in the switch ports needed for redirection commands and minimizes the amount of time consumed in sending redirection commands to ports, and is preferred. In such embodiments, the storage manager must know to which ports of the switch each storage device is connected. Therefore, in this class of embodiments, the first thing that must happen is that the storage manager <highlight><bold>20</bold></highlight> must learn or be configured to know to which ports on switch <highlight><bold>14</bold></highlight> each of the clients <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight> and each of the storage devices <highlight><bold>16</bold></highlight> and <highlight><bold>18</bold></highlight> are coupled. This is most easily done by manually storing configuration data in the storage manager that maps each client and storage device to a port on the switch. In other embodiments, the switch <highlight><bold>14</bold></highlight> or the storage manager can do an automatic discovery process by sending out probes to every port of the switch to be forwarded to every device coupled to that port to request the port ID(s) of the device(s) connected to that port be returned. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> represents an embodiment where the configuration data regarding which clients and storage devices are coupled to which ports is stored in a look up table <highlight><bold>50</bold></highlight> in the storage manager. This allows redirection commands to be sent to the specific ports coupled to the clients and storage devices involved and stored in look up tables in only those ports. An example is shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> wherein redirection commands represented by arrows <highlight><bold>56</bold></highlight> (the &ldquo;second redirection command&rdquo;) and <highlight><bold>58</bold></highlight> (the &ldquo;first redirection command&rdquo;) are sent from the storage manager <highlight><bold>20</bold></highlight> through the switch <highlight><bold>14</bold></highlight> to look up tables <highlight><bold>54</bold></highlight> and <highlight><bold>52</bold></highlight>, respectively in ports <highlight><bold>60</bold></highlight> and <highlight><bold>62</bold></highlight>, respectively. These ports are coupled to storage device <highlight><bold>18</bold></highlight> and client <highlight><bold>10</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In alternative embodiments, represented by <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, there is a look up table in every port and redirection commands, represented by arrow <highlight><bold>64</bold></highlight>, are broadcast to all look up tables for storage. In these embodiments, the storage manager does not need to have a look up table to store configuration data or do a discovery process because every port stores a copy of every redirection command. Thus, regardless of which client and storage device are involved in a particular transaction, the data frames involved in the read or write transaction to be redirected will have header information that matches an entry in the look up table of whatever port then arrived on. In this class of embodiments, step <highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> can be eliminated. </paragraph>
<paragraph id="P-0060" lvl="7"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>2</bold></highlight>) </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Next, the client device (hereafter sometimes called the host) sends a read command to the storage manager requesting specified SCSI blocks. In this example, the read request is for blocks <highlight><bold>7</bold></highlight>-<highlight><bold>11</bold></highlight>. That read request is represented by arrow <highlight><bold>70</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. The client <highlight><bold>10</bold></highlight> also assigns an originator exchange ID to this transaction and writes into the FC frame header encapsulating the SCSI read command and leaves the responder exchange ID blank. The source address in the header of this frame is set to the port ID of the host, and the destination ID is set to the port ID of the storage manager (hereafter sometimes just referred to as the manager). </paragraph>
<paragraph id="P-0062" lvl="7"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>3</bold></highlight>) </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The storage manager <highlight><bold>20</bold></highlight> responds to the read request by mapping the requested blocks to a storage device number and the blocks on that device that correspond to the requested block numbers. In the example here, storage device <highlight><bold>18</bold></highlight> has the requested information. The storage manager also determines which client sent the request from the source address in the FC frame header information of the frame including the read request. This process is performed by a mapping and redirection command generation process represented by block <highlight><bold>72</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0064" lvl="7"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>4</bold></highlight>) </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Next, the storage manager&apos;s mapping and redirection command generation process <highlight><bold>74</bold></highlight> generates and sends a &ldquo;second redirection command&rdquo; to the appropriate one or more redirection processes in switch <highlight><bold>14</bold></highlight>. The &ldquo;second redirection command&rdquo; is defined below as to content, but, for now, understand that it is called the second redirection command only because it redirects only responder frames. Every FC frame has a field in the header which indicates whether the frame came from the originator in an exchange or the responder in that exchange. The second redirection command will have as part of its search key a specification that it is to act only upon responder frames using this originator/responder header field. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In the particular example given in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, for a read request, two redirection commands are utilized to cover embodiments where there is a protocol requiring the host to issue a transer ready frame when it is ready to receive the read data. However, in existing FC networks, the host does not issue the read command until it is ready to receive the read data. Thus, in the preferred embodiment, only one redirection command is needed on a read request, and that redirection command works only on responder frames traveling from the device to the host. This second redirection command is represented by arrow <highlight><bold>56</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, and is sent to a redirection process <highlight><bold>74</bold></highlight> in port <highlight><bold>60</bold></highlight> coupled to storage device <highlight><bold>18</bold></highlight>, and is stored in lookup table <highlight><bold>54</bold></highlight>. Thus, in the preferred embodiment, the redirection command <highlight><bold>58</bold></highlight> is not needed. In embodiments where it is needed, it is sent to redirection process <highlight><bold>76</bold></highlight> of port <highlight><bold>62</bold></highlight> coupled to the host and stored in lookup table <highlight><bold>52</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Each redirection process <highlight><bold>74</bold></highlight> and <highlight><bold>76</bold></highlight> recognizes the message as a redirection command and stores it in its local look up table (<highlight><bold>54</bold></highlight> and <highlight><bold>52</bold></highlight>). There are several different embodiments for how this can be done, and step (<highlight><bold>4</bold></highlight>) represents all of the below described preferred and alternative embodiments and equivalents thereof. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In the alternative embodiment represented by <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, two separate redirection commands <highlight><bold>56</bold></highlight> and <highlight><bold>58</bold></highlight> are sent to the switch. The storage manager knows which ports are coupled to the client device which initiated the read request and the storage device from which the responses to the read command will come. A first redirection command <highlight><bold>58</bold></highlight> is sent to the port <highlight><bold>78</bold></highlight> of the switch to which the storage manager is connected with a command to direct the redirection command to the port to which the client device is coupled. The redirection command then gets routed through routing engine <highlight><bold>80</bold></highlight> to redirection process <highlight><bold>74</bold></highlight>, and similarly for redirection command <highlight><bold>58</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In an alternative embodiment represented by <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the switch also contains a copy of the configuration or discovery data and knows which port is coupled to which device. In this alternative embodiment, the switch port that receives the redirection commands does not need to be told to which port to forward each redirection command. In this embodiment, the switch port <highlight><bold>78</bold></highlight> simply looks up the port IDs in the destination and source address fields of the new address data of the redirection command in the switch&apos;s copy of the configuration/discovery data. From this, it determines to which ports the redirection commands need be sent, and sends them there, as represented by arrows <highlight><bold>56</bold></highlight>A, <highlight><bold>56</bold></highlight>B and <highlight><bold>56</bold></highlight>C for port <highlight><bold>60</bold></highlight> and arrows <highlight><bold>58</bold></highlight>A, <highlight><bold>58</bold></highlight>B and <highlight><bold>58</bold></highlight>C for port <highlight><bold>62</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In the preferred embodiment, in read transactions the client device is assumed to have all the buffer space it needs for the requested data so it does not issue transfer ready frames. Thus, there is no need in the preferred embodiment for a first redirection command <highlight><bold>58</bold></highlight> to redirect transfer ready frames in read transactions. However, in alternative embodiments where the client device does issue transfer ready frames, there would be a first redirection command issued. In such alternative read transaction embodiments, the first redirection command <highlight><bold>58</bold></highlight> functions to redirect read transfer ready frames and write data frames initiated by the client device <highlight><bold>10</bold></highlight> so as to bypass the storage manager <highlight><bold>20</bold></highlight> and be sent directly to the storage device <highlight><bold>18</bold></highlight>. The &ldquo;old address data&rdquo; of the first redirection command <highlight><bold>58</bold></highlight> contains the originator exchange ID originally assigned by the client device <highlight><bold>10</bold></highlight>, the Port_ID of the client device <highlight><bold>10</bold></highlight> as the source address, the Port_ID of the storage manager <highlight><bold>20</bold></highlight> as the destination address, and the responder exchange ID assigned by the manager <highlight><bold>20</bold></highlight> (collectively referred to in the claims as the old address data). The corresponding &ldquo;new address data&rdquo; in first redirection command <highlight><bold>58</bold></highlight> is the originator exchange ID assigned by the storage manager to the storage-manager-to-storage-device side of the transaction, the Port_ID of the storage device <highlight><bold>18</bold></highlight> as the destination address, the Port_ID of the storage manager <highlight><bold>20</bold></highlight> as the source address, and the responder exchange ID assigned by the storage device <highlight><bold>18</bold></highlight> (collectively referred to in the claims as the new address data). Note that at this point in the process, the manager <highlight><bold>20</bold></highlight> does not know what the responder exchange ID assigned by the target storage device will be because it has not yet been assigned by the device since the device <highlight><bold>18</bold></highlight> has not yet received the read command. Thus, in the first redirection command <highlight><bold>58</bold></highlight> issued by the manager, the manager leaves the responder exchange ID blank. This responder exchange ID will be filled in later by either by the switch <highlight><bold>14</bold></highlight> or the storage manager <highlight><bold>20</bold></highlight> depending upon which embodiment to be described below is implement. In the first embodiment, a read command is forwarded by the manager to the device, and the device assigns a responder exchange ID and puts it in the read transaction data frame. The switch sees this data frame, redirects it, and copies the responder exchange ID from the frame header and writes into the the appropriate field of the new address data of the appropriate first redirection command. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The second redirection command <highlight><bold>56</bold></highlight> is sent, in the preferred embodiment, to the port of the switch to which the storage manager is connected with a command to direct the redirection command to the port <highlight><bold>60</bold></highlight> to which the storage device <highlight><bold>18</bold></highlight> is coupled. Alternatively, as symbolized by <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the switch port figures out where to forward the second redirection command using its own configuration data <highlight><bold>81</bold></highlight>. One or the other of these same processes also occurred for the first redirection command <highlight><bold>58</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The second redirection command <highlight><bold>56</bold></highlight> functions to redirect data transfer frames originating at the storage device as a result of the read request and containing the actual requested data so as to bypass the storage manager and be sent directly to the requesting client device. The &ldquo;old address data&rdquo; of the second redirection command contains the originator exchange ID assigned by the storage manager to the storage-manager-to-storage-device side of the transaction, the Port_ID of the storage device <highlight><bold>18</bold></highlight> as the source address, and the Port_ID of the storage manager <highlight><bold>20</bold></highlight> as the destination address, and the responder exchange ID assigned by the storage device <highlight><bold>10</bold></highlight> for this transaction (collectively referred to in the claims as the &ldquo;old address data&rdquo;). The value for this responder exchange ID in the old address data is not necessary for redirection. The corresponding &ldquo;new address data&rdquo; of the second redirection command contains the originator exchange ID originally assigned by the requesting client <highlight><bold>10</bold></highlight>, the Port_ID of the client device <highlight><bold>10</bold></highlight> as the destination address, the Port_ID of the storage manager <highlight><bold>20</bold></highlight> as the source address, and the responder exchange ID assigned by the storage manager <highlight><bold>20</bold></highlight> for the transaction with the client (collectively referred to in the claims as the &ldquo;new address data&rdquo;). </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Both these redirection commands are stored in one or more look up tables depending upon the particular configuration of the switch. In one alternative embodiment represented by <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, both redirection commands can be stored in a single shared look up table <highlight><bold>90</bold></highlight> anywhere in the switch that the ports can access. In alternative embodiments, the two redirection commands can be combined into a single redirection entry in a shared look up table <highlight><bold>90</bold></highlight> with two sets of old address data and two sets of new address data. In any embodiment, the first redirection command will be effective only for frames marked as originator frames and the second redirection command will be effective only for frames marked as responder frames. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In the preferred embodiment, each port of the switch maintains its own look up table which stores only the redirection commands pertaining to the storage device or client to which the port is connected. Further, in the preferred embodiment, each port contains an intelligence in the form of a redirection process, represented by blocks <highlight><bold>74</bold></highlight>, <highlight><bold>76</bold></highlight>, <highlight><bold>92</bold></highlight> and <highlight><bold>94</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, that can use the redirection command data to relabel and forward frames or packets arriving at the port to the conventional switch routing engine <highlight><bold>80</bold></highlight> for redirection in accordance with the processing described herein. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> In the class of embodiments represented by <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the storage manager is configured with a look up table <highlight><bold>50</bold></highlight> of configuration data that is written after the network is wired that tells the storage manager which storage devices and which client devices are coupled to the various ports of the switch. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> also represents an alternative embodiment wherein the storage manager does a discovery process after the network is up to determine which devices are coupled to which ports by sending out a series of probes that get routed to all the devices coupled to all the ports and which ask for replies that identify the devices by their port IDs. Once the configuration of the network is determined, the configuration data is written into look up table <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> In all embodiments, ports connected to client devices use the set of first redirection commands stored in the port&apos;s local look up table or a single shared look up table to screen incoming frames using the old address data of the active redirection commands to find appropriate frames to be relabelled for redirection. The function of the redirection process in every port is to pick frames or packets that have a data type that is either &ldquo;data&rdquo; or &ldquo;transfer ready&rdquo; and which have address data in the header which matches an &ldquo;old address data&rdquo; entry of an active redirection command in whatever redirection command look up table is being used. Upon finding such a frame, it is relabelled using the corresponding &ldquo;new address data&rdquo; and forwarded to the conventional routing process <highlight><bold>80</bold></highlight> of the switch for redirection. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Similarly, in all embodiments, ports coupled to storage devices use the set of second redirection commands stored in the port&apos;s local look up table or a single shared look up table to screen incoming frames to be relabelled for redirection. The function of the redirection process in every port is to pick frames or packets that have a data type that is either &ldquo;data&rdquo; or &ldquo;transfer ready&rdquo; and which have address data in the header which matches an &ldquo;old address data&rdquo; entry in the redirection command look up table. Upon finding such a frame, it is relabelled using the corresponding &ldquo;new address data&rdquo; and forwarded to the conventional routing process <highlight><bold>80</bold></highlight> of the switch for redirection. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Basically, the redirection process just changes the address data in the header so that the data or transfer ready frame is routed directly to the storage device or client and skips the storage manager but looks like it came from the storage manager. The redirection process also replaces the originator and responder exchange IDs to make the frame or packet have an exchange ID such that it get recognized and routed in the destination device to the correct process which requested the data or wanted to write the data. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> In embodiments where each port of the switch has its own look up table, the alternative embodiment represented by <cross-reference target="DRAWINGS">FIG. 6</cross-reference> has the storage manager carrying out step (<highlight><bold>4</bold></highlight>) by sending the redirection commands to the port to which it is connected with instructions. The instructions tell the port to redistribute the redirection commands to the redirection process of every port of the switch through the internal pathways of the switch. The redirection processes then store each received redirection command in the local look up table of each port regardless of whether that port would be involved in the redirection specified by the redirection command. This implements a distributed database where each port has a complete copy of the look up table containing all the redirection commands. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> In other embodiments represented by <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> centralized look up table <highlight><bold>90</bold></highlight> in the switch is shared by all the ports and is used to store all redirection commands regardless of which port they arrived on or pertain to. In these embodiments, the storage manager sends the redirection commands to the port to which it is connected. That port then stores the redirection commands in the shared look up table <highlight><bold>90</bold></highlight>. In this class of alternative embodiments, all the ports have the functionality to store redirection commands they receive in the shared look up table <highlight><bold>90</bold></highlight>. Further, all the redirection processes <highlight><bold>74</bold></highlight>, <highlight><bold>76</bold></highlight>, <highlight><bold>94</bold></highlight> and <highlight><bold>96</bold></highlight> have the functionality to be able to use the shared look up table <highlight><bold>90</bold></highlight> to screen incoming frames or packets. In these embodiments, the ports each search the centralized look up table for matches on the old address data in frames or packets they receive. The ports then relabel a packet or frame for redirection if the frame is a data or transfer ready frame and a match is found between the frame&apos;s header data and the old address data of either a first or second redirection command, as appropriate. In other words, in the preferred FC read transaction embodiment, the search is conducted in the second redirection commands only if the frame is marked as a responder frame. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> In another class of alternative embodiments represented by <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the switch has a centralized redirection process <highlight><bold>100</bold></highlight> as part of the routing process, and all the ports are standard and forward frames they receive to this centralized redirection process. In this embodiment, the centralized redirection process <highlight><bold>100</bold></highlight> receives each frame from a port and uses the data type information in the header to determine if the frame is &ldquo;data&rdquo; or &ldquo;transfer ready&rdquo; and is marked as a responder frame. If so, a redirection search is necessary. To perform the redirection search, the originator exchange ID, the source address and the destination addresses in the header are compared to the &ldquo;old address data&rdquo; in the second redirection command entries in the shared look up table <highlight><bold>90</bold></highlight>. In other embodiments, other appropriate search keys can be used to determine if the frame needs to be redirected. If a match is found, the frame is relabelled with the corresponding &ldquo;new address data&rdquo; and passed to the conventional routing process <highlight><bold>80</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Preferably, the redirection processes <highlight><bold>74</bold></highlight>, <highlight><bold>76</bold></highlight>, <highlight><bold>94</bold></highlight> and <highlight><bold>96</bold></highlight> in the switch ports or the centralized redirection process <highlight><bold>100</bold></highlight> do not need to be told which frames to redirect since they automatically redirect only data frames and transfer ready frames of the responder type and not status or other frames. Status frames are not redirected in most of the embodiments. This is because they are used by the storage manager to determine when a read or write transaction has been completed. Further, in some embodiments, the arrival of the status frame at the manager causes the storage manager to terminate the internal transaction processes and send a status frame to the client. The arrival of the status frame at the manager also, in some embodiments, causes the manager to determine that the redirection process is done, and send a purge command to the switch to purge obsolete redirection commands for that transaction. The storage manager needs to know when the data transfer is done so that it can send a purge command to the switch to purge the pertinent redirection commands out of the look up table(s) in this class of embodiments. However, in the preferred embodiment, the status frame first arrives at the switch and is not redirected and therefore gets routed to the storage manager. The difference between this preferred embodiment and the class of embodiments where the storage manager sends purge commands is that the switch automatically purges all pertinent redirection command when it sees the status frame arrive from the storage device. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The second redirection command for the port to which the storage device is coupled may also tell the port coupled to the storage device to which port the relabelled frame is to be forwarded in some embodiments, although in most embodiments, the relabelled frame is just passed to the conventional routing engine where the new address data makes it clear to which port the frame is to be sent. The correct port to which the frame or packet should be directed within the switch would be the port coupled to the client device that requested the data. Likewise, the port coupled to the client may be instructed by the first redirection command to forward a relabelled frame to the port coupled to the storage device to which the frame is addressed. Telling the port that does the relabelling to which port to forward the relabelled frame only occurs in some embodiments where the routing process is to be bypassed for redirected frames. In the preferred embodiment, this instruction is not necessary. </paragraph>
<paragraph id="P-0084" lvl="7"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>5</bold></highlight>) </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Next, the storage manager sends a read command naming the desired blocks to the storage device determined in step (<highlight><bold>3</bold></highlight>). This read command is encapsulated in an FC frame and in the case of a Fibre Channel Arbitrated Loop (FCAL) topology, it is enclosed within an arbitrated loop tenancy. This frame has the Port_ID of the storage manager as the source address and the Port_ID of the storage device as its destination address and will have a new originator exchange ID assigned by the storage manager. When transfer ready or data frames are returned from the storage device and need to be redirected, they will have: a source address equal to the port ID of the storage device; a destination address equal to the port ID of the manager; originator exchange ID equal to the originator exchange ID assigned by the storage manager for this transaction; and a responder exchange ID assigned by the storage device. However, when they get redirected to the client <highlight><bold>10</bold></highlight>, they need to be relabelled. The relabelling is per the &ldquo;new address data&rdquo; in the second redirection command, and is as follows: the source address equal to the manager Port_ID; the destination address is set equal to the port ID of the client; the originator exchange ID will be set to the originator exchange ID assigned by the host for this transaction; and a responder ID assigned by the storage manager for this transaction. The exchange ID relabelling is necessary to prevent the client <highlight><bold>10</bold></highlight> from getting confused. If the exchange ID relabelling was not done, the client probably would not know to which read request the incoming frame was a response (unless there was only one outstanding read request), and would not know to which process in the client to send the frame. </paragraph>
<paragraph id="P-0086" lvl="7"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>6</bold></highlight>) </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The storage device receives the read request and retrieves the requested blocks of read data. The storage device encapsulates the data in one or more frames or packets (although frames are used for this example, the invention applies equally well to packet switches). These frames have the storage manager&apos;s Port_ID as the destination address and have the storage device&apos;s Port_ID as the source address and have the originator exchange ID assigned by the storage manager to the data retrieval transaction set up in response to the original read request, and have a responder exchange ID selected by the storage device for this transaction. </paragraph>
<paragraph id="P-0088" lvl="7"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>A, Step (<highlight><bold>7</bold></highlight>) </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> The redirection processes in the switch ports (or a centralized redirection process in the embodiment of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>) examines the incoming frame to determine if it needs to be redirected. It will only redirect data or transfer frames that are marked as responder frames in the header. If those preconditions are met, the switch generate a search key taken from the header data in the incoming frame. In the preferred embodiment, the search key is comprised of the source address, destination address and originator exchange ID of the incoming frame. In other embodiments, any other appropriate search key apparent to those skilled in the art can be used, possibly including the port number at which the frame arrived. The redirection process in the switch then compares the search key to the &ldquo;old address data&rdquo; of all active second redirection commands in the appropriate lookup table. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> In the preferred embodiment, this comparison process is done only after the header of the frame is examined to determine that the incoming frame is a data frame or a transfer ready frame. In alternative embodiments, the search key generation and comparison processes can be ongoing in a parallel, simultaneous process with the determination of whether the frame is data or transfer ready and is a responder frame. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Frames that are not data or transfer ready or are not responder frames are passed directly to the conventional routing process <highlight><bold>80</bold></highlight> in the switch and no processing to determine if they have to be redirected is carried out. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In our example, redirection process <highlight><bold>74</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> examines the header information in every incoming frame and compares the destination addresses and originator exchange ID of data and transfer ready responder frames to the old address data entries in lookup table <highlight><bold>54</bold></highlight>. In the class of embodiments represented by <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, redirection process <highlight><bold>74</bold></highlight> compares the search key data to the old address data in the shared lookup table <highlight><bold>90</bold></highlight>. This processing sequence in the preferred embodiment avoids the latency that would be inherent in scanning the look up table for matches on status frames or other frames which are not to be redirected. Status frames are not redirected since they must go to the storage manager so that the storage manager can know when the transfer is completed. Also, when the transaction is completed, the obsolete redirection commands must be purged. This can be done either by sending a purge command from the storage manager to the switch that identifies the information that needs to be purged, or it can be done automatically by a switch port as the status frame passes through it. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The header examination process actually happens at every port in some embodiments, but in other embodiments, it only happens at ports which have active redirection commands. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> When a data or transfer ready frame arrives with search key data that matches one of the second redirection commands received from the storage manager, a redirection process is carried out. This is done by redirection circuitry in the port (or a central shared redirection process <highlight><bold>100</bold></highlight> in the embodiments represented by <cross-reference target="DRAWINGS">FIG. 9</cross-reference>). The redirection process changes the header to remove the old source and destination addresses and the old originator and responder exchange ID. Then the redirection process substitutes the corresponding new address data from the matching redirection command. This adds a new source and destination address and the originator and responder exchange ID contained in the new address data. It is important to note that the new address data substituted into the redirected frame makes the frame appear to have come from the storage manager. By making the redirected frames look like they came from the storage manager, the requesting client&apos;s hardware and software can be totally unmodified. This saves the time and expense of upgrading all the clients when the invention is first deployed into an existing system. That is, by making the relabelled, redirected frame look like the frame came from the storage manager, the client devices can have the same structure and operate in the same way as they did in a prior art network. Note also that the storage devices do not have to have any different structure or operation than they had in the prior art. These are characteristics that all species in the genus will share and which are important to acceptance of the invention in the field. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The only things that need to be modified to implement the invention in any prior art switched fabric network are the software of the storage manager and switch. The storage manager must be modified to add the process <highlight><bold>72</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> to generate and send and purge redirection commands. The software of the switch must be modified to add one or more redirection processes and lookup tables per the embodiments of FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>9</bold></highlight>. The software of the storage manager needs to be modified to issue the redirection commands as described herein. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> However, in alternative embodiments, the software of the requesting clients can be modified so as to not get confused when a read request is sent to a storage manager and the return data comes back directly from the storage device. In these alternative embodiments, the ports of the switch do not have to substitute the storage manager Port_ID and responder exchange ID for the storage device Port_ID and exchange ID in return data and transfer ready frames. In such embodiments, the redirection process carried out in the switch just substitutes the Port_ID of the client as the destination address and leaves the Port_ID of the storage device as the source address and makes sure the originator exchange ID originally assigned by the client is in the frame. When the client receives these frames, it maps them to the original requests it made so that the data can be routed to the correct process in the client that made the request. </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>B, Step (<highlight><bold>8</bold></highlight>) </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The conventional routing process <highlight><bold>80</bold></highlight> of switch <highlight><bold>14</bold></highlight> then examines the new destination address of the relabelled frame and determines to which port to forward the frame by looking up the new destination address (the Port_ID of the client that made the original request) in its routing tables. This is not a new process as the switch examines the destination address of every incoming frame at every port to determine which port to which the frame needs to be forwarded so this process in the switch is doing the same thing it did in the prior art and does not need to be modified. The frame will then be forwarded to the port to which the client device is coupled. The switch <highlight><bold>14</bold></highlight> is therefore conventional in design in the preferred embodiment except that the port software (or, in some embodiments, the central routing process software <highlight><bold>80</bold></highlight>) in the switch is modified to receive and store redirection commands in a look up table and to carry out the redirection process described herein and a similar write request processes detailed in <cross-reference target="DRAWINGS">FIGS. 3A through 3C</cross-reference>. In alternative embodiments represented by <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the redirection process is carried out by a central redirection process <highlight><bold>100</bold></highlight> that interfaces each port <highlight><bold>60</bold></highlight>, <highlight><bold>61</bold></highlight>, <highlight><bold>62</bold></highlight> and <highlight><bold>63</bold></highlight> to the routing process <highlight><bold>80</bold></highlight>. In such embodiments, the ports are conventional and the routing circuitry is conventional. The improvement in this switch is the addition of a central shared look up table <highlight><bold>90</bold></highlight> and centralized redirection process <highlight><bold>100</bold></highlight> that receives and stores the redirection commands and processes incoming frames passed to it from the ports to implement the redirection process. The nature of the circuitry in either the port or the centralized circuitry to do the redirection process is not critical so long as it has sufficient speed to handle the traffic load. Discrete logic, a programmed microprocessor, or an application specific integrated circuit or even a DSP can be used to implement the functionality described herein. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Existing prior art FibreChannel switches that couple arbitrated loops through switches to fabric have a similar header replacement process to redirect frames from the loop to the fabric and vice versa. This redirection is done to accommodate the different addressing schemes and not to bypass a bottleneck however. </paragraph>
<paragraph id="P-0100" lvl="7"><number>&lsqb;0100&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>B, Step (<highlight><bold>9</bold></highlight>) </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The client device <highlight><bold>10</bold></highlight> receives the redirected frame or frames and processes them to give the data therein to whatever process in the client requested the read data. </paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>C, Step (<highlight><bold>10</bold></highlight>) </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> The storage device, after transmitting all the requested read data, sends a &ldquo;good status&rdquo; frame addressed to the storage manager. </paragraph>
<paragraph id="P-0104" lvl="7"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>C, Step (<highlight><bold>11</bold></highlight>) </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> The redirection process in the switch port or centralized redirection circuitry sees this &ldquo;good status&rdquo; frame, and reads the frame type flag in the header and realizes the &ldquo;good status&rdquo; frame is not data or a transfer ready type frame and is not to be redirected. Thus, although the source and destination addresses and the originator exchange ID match a redirection command, no header modification is done since the port redirection process is programmed to recognize, relabel and redirect only data and transfer ready frames of a responder type in read transactions. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In the preferred embodiment, the switch detects either good or bad status frames, indicating the transaction is done, and automatically purges all redirection commands associated with that transaction. </paragraph>
<paragraph id="P-0107" lvl="7"><number>&lsqb;0107&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2C and 2D</cross-reference>, Step (<highlight><bold>12</bold></highlight>) </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The storage manager receives the &ldquo;good status&rdquo; or &ldquo;bad status&rdquo; frame from the storage device, and terminates its internal processes associated with that transaction. Then, the manager sends a good or bad status frame, as the case may be, to the client. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> The switch port to which the storage manager is connected does not modify the header as it is not a data frame and the source and destination addresses do not match any redirection command anyway. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> In alternative embodiments where the switch does not automatically purge redirection commands when it sees a status frame, the storage manager also sends a purge command to the switch to purge the redirection commands that pertain to the data transfer just completed. The purge command identifies by at least the old address data the redirection commands that need to be purged. Purging needs to be completed before the storage manager can process a new command from a client which formerly had one or more outstanding redirection commands. This is necessary to make sure that responses to this new command do not get falsely redirected. This purging process also occurs in all embodiments for write transaction redirections. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> In the preferred embodiment, status frames are not redirected and are forwarded to the storage manager. However, instead of the storage manager receiving the status frame and sending back specific purge commands, the port which received the status frame automatically purges the obsolete redirection commands after or as the status command is being forwarded to the storage manager. Further, in all cases, the automatic purging will be completed before the storage manager could start another transaction between the same host and disk pair. In the case of a read transaction, the port does this automatic purging after determining that the frame is status, and that the address data of the status frame otherwise qualifies to be redirected per the old address data in any second redirection command stored in any lookup table the switch. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> In the case of a write transaction, the port finds and purges the pertinent first redirection command utilizing appropriately the pertinent second redirection commands address data to search through the lookup tables of all the ports or, at least the ports which have the pertinent redirection commands stored in them. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In an alternative purging embodiment, instead of searching for the first redirection command, the switch embeds linking information in the second redirection command that indicates the existence and location of the paired first redirection command for this transaction. The switch can then use this linking information when a status frame is received and go directly to the location of the paired first redirection command and purge it. </paragraph>
<paragraph id="P-0114" lvl="7"><number>&lsqb;0114&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>D, Step (<highlight><bold>13</bold></highlight>) </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In the alternative embodiments where the switch does not automatically purge redirections commands, the switch receives the purge command from storage manager and purges the corresponding redirection commands from the lookup tables. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In the embodiments represented by <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the purge commands get routed by port <highlight><bold>78</bold></highlight> to the redirection processes <highlight><bold>74</bold></highlight> and <highlight><bold>76</bold></highlight> which then use at least the old address data in the purge command to find and purge the matching entries in look up tables <highlight><bold>54</bold></highlight> and <highlight><bold>52</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In the embodiment represented by <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the purge command is routed to each of the redirection processes <highlight><bold>74</bold></highlight>, <highlight><bold>96</bold></highlight>, <highlight><bold>94</bold></highlight> and <highlight><bold>76</bold></highlight> and used to find and purge the matching entries in look up tables <highlight><bold>52</bold></highlight>, <highlight><bold>53</bold></highlight>, <highlight><bold>55</bold></highlight>, <highlight><bold>57</bold></highlight>, <highlight><bold>54</bold></highlight>. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In the embodiment of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the purge commands are sent to the routing process <highlight><bold>80</bold></highlight> which determines which ports they need to be sent using configuration data <highlight><bold>81</bold></highlight> and sends them there. The redirection processes then purge the appropriate commands. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> In the embodiment of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the purge command is sent to redirection processes <highlight><bold>74</bold></highlight> and <highlight><bold>76</bold></highlight> which use it to purge the appropriate redirection commands from look up table <highlight><bold>90</bold></highlight>. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In the embodiment of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the purge command is sent to redirection process <highlight><bold>100</bold></highlight> and used to purge the appropriate redirection commands from shared lookup table <highlight><bold>90</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a symbolic diagram of traffic flow in a system according to the teachings of the invention. Block <highlight><bold>30</bold></highlight> represents the collective client devices that are requesting reads and writes to storage. The collective storage devices are represented by block <highlight><bold>32</bold></highlight>. The operation of the storage manager in any one of the four different classes of embodiments identified in the summary of the invention causes selected data and transfer ready frames or packets to be relabelled and redirected so that they <highlight><bold>4</bold></highlight> re sent basically directly between the storage device and the client device that requested the read or write, as symbolized by arrows <highlight><bold>34</bold></highlight> and <highlight><bold>36</bold></highlight>.Control and status packets or frames still pass through the storage manager, as symbolized by arrows <highlight><bold>38</bold></highlight> and <highlight><bold>40</bold></highlight>. The switch <highlight><bold>14</bold></highlight> is not shown, but it is the operation of the switch that causes the bypassing of the storage manager for data and transfer ready frames. </paragraph>
</section>
<section>
<heading lvl="1">Storage Manager </heading>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Some storage managers cache data blocks that are frequently requested. Thus, when a block of data is requested which is already stored in cache, the storage manager never sends the read request to the storage device which stores it and just sends the data from cache. In these types of embodiments, there is an alternative class of embodiments to monitor the usefulness of the caching scheme using any criteria which can monitor the effectiveness of the caching scheme. In this class of embodiments, the storage manager will issue redirection commands only when the data is determined to be not beneficial for caching purposes. One such criteria that can be used to monitor the effectiveness of the caching scheme is to count the number of requests for which there were cache hits. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Another alternative embodiment utilizes a service manager that only redirects large data requests since redirecting short transfers is not efficient because of the overhead of setting up the redirection process. In these embodiments, every read or write request that comes in is analyzed to determine how much data is to be read and how much data is to be written. If the amount of data blocks requested is greater than equal to a threshold, which can be programmable, then the storage manager sends a redirection command as previously described. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In some embodiments, the storage manager <highlight><bold>20</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> does a discovery process to determine which storage devices are coupled to which ports of the switch. This way, redirection commands for particular storage devices can be sent directly to the port of the switch coupled to that storage device. This is done through the port to which the storage manager is connected and the internal pathways of the switch. In such an embodiment, each port maintains a look up table that stores just the redirection commands that pertain to the storage device(s) coupled to that port. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In other simpler embodiments, the storage manager can send every redirection command to every port for storage in the look up table of the port. In this embodiment, each port maintains its own look up table, and every redirection command is sent to every port thereby causing a replicated database of look up commands to be stored such that each port has a copy of the entire look up table. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> In other embodiments, a centralized look up table in the switch which is shared by all the ports can be used to store all redirection commands regardless of which port they arrived on or pertain to. In these embodiments, the storage manager sends the look up commands to any one port, because all the ports function to store redirection commands they receive in the shared look up table. In these embodiments, the ports each search the centralized look up table for matches on the old address data in frames or packets they receive and relabel for redirection if a match is found on a data or transfer ready frame. In other embodiments, each port of the switch has functionality to receive redirection commands, store them in a shared look up table or distribute them to all other ports of the switch for storage in each port&apos;s individual look up table. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> There are four basic classes of embodiments within the genus of the invention, each of which uses a switch with ports capable of comparing old address data to redirection data in a look up table and readdressing and redirecting at least data and transfer ready frames or packets. The differences between these embodiments pertain to the structure and operation of the storage manager server. Some of them only redirect when it makes sense to do so because of high traffic loads. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> The first class of embodiments has a switch and storage manager which cooperate to relabel and redirect every read or write request such that the switch assumes the alias of the storage manager, i.e., the switch relabels the frame to direct it directly to the requesting client instead of the storage manager server and sets the source address of the frame as that of the storage manager even though it is actually coming from the switch. This latter aspect of aliasing is important and is a shared characteristic that all embodiments discussed anywhere herein will share and which defines one of the characteristics that all species or embodiments in the genus will share. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> An important second class of alternative embodiments, analyzes the number of outstanding requests to read and/or write data to the storage devices and relabels and redirects packets or frames only when a threshold of traffic is reached where the storage manager is likely to be a bottleneck. This threshold can be programmable. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> A third class of embodiments has a storage manager that monitors the time between receipt of a read or write request and the time that the actual data read from the storage device as a result of said read request is sent from the storage manager back to the client device which requested it and performs a parallel process for write requests. When the time equals or exceeds a predetermined threshold, which can be programmable, the storage manager issues a redirection requests for all subsequent read and write requests until the time drops below the threshold. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> The fourth basic class of embodiments is used in storage managers with cache memory. In this class, redirection is done only when the cache algorithm does not elect to copy the data of the transaction into cache memory, such as where the caching algorithm elects to redirect long transactions but not redirect short. </paragraph>
</section>
<section>
<heading lvl="1">Storage Device as Aliased Storage Manager </heading>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> In another class of embodiments, instead of the switch <highlight><bold>14</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> being modified to alias itself as the storage manager <highlight><bold>20</bold></highlight>, the switch can be a normal packet or frame switch of any conventional design and the storage devices <highlight><bold>12</bold></highlight> and <highlight><bold>16</bold></highlight> and <highlight><bold>18</bold></highlight> could do the aliasing. In this class of embodiments, each storage device in the network is modified to have a port which can do aliasing like the ports in the &ldquo;aliased switch&rdquo; embodiments described above. In this class of embodiments, the storage manager acts similarly to the way it acts in any of the &ldquo;aliased switch&rdquo; embodiments described above, but instead of sending the redirection commands to the switch, they are sent to the storage device to which the read request is directed. The ports of all the storage devices are structured to receive these redirection commands and store them in a look up table. The redirection commands will have old address data and new address data just like the redirection commands in the &ldquo;aliased switch&rdquo; embodiments where the old address data will include as the destination address the address of the storage manager and the address of the storage device as the source address, and each old address will have a exchange ID assigned by the storage manager when the read request was received. The exchange ID will again be the key to proper relabelling. This is because it is the exchange ID assigned by the storage manager for the storage-device-to-storage-manager data transfers that maps to the actual client device which made the read request. The new address data for every old address entry will have the client address as the destination and the storage manager address as the source and will have the exchange ID assigned by the client that made the request as was the case for the &ldquo;aliased switch&rdquo; embodiments. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> When frames or packets of read data are ready to send from the storage device, the port looks at the source port ID, the destination port ID and the originator exchange ID and originator or responder frame type of each packet and determines whether the frame is data or transfer ready type packets. If the packet is of a data or transfer ready type and the originator exchange ID and destination ID matches any entry in the old address data of the look up table, the port knows the packet or frame should be relabelled. The packet or frame is then relabelled using the &ldquo;new address data&rdquo; of the matching redirection command entry. The packet or frame is then sent to the switch <highlight><bold>14</bold></highlight>, and, there it gets routed directly to the client device that requested it. </paragraph>
</section>
<section>
<heading lvl="1">FRAME ALIASED WRITE TRANSACTION </heading>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, comprised of <cross-reference target="DRAWINGS">FIGS. 4A through 4E</cross-reference>, there is shown a table that defines the process implemented by the invention to redirect every write transaction frame or packet. Each step in the process will be discussed in a separate section below. </paragraph>
<paragraph id="P-0135" lvl="7"><number>&lsqb;0135&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, Step <highlight><bold>1</bold></highlight> </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> The preferred embodiment sends the redirection commands for write transactions only to the particular ports to which the storage device storing the requested read data and the client port are connected. This minimizes the amount of storage in the switch ports needed for redirection commands in embodiments where the redirection commands are stored in look up tables in the ports themselves. This approach also minimizes the amount of time consumed in sending redirection commands to ports as compared to broadcasting them to all ports. Of course in the embodiments where there is a centralized redirection process and centralized lookup table, there is no need to configure the storage manager with data telling it which devices are coupled to which ports so step <highlight><bold>1</bold></highlight> can be omitted. Step <highlight><bold>1</bold></highlight> can be omitted in both centralized look up table embodiments and embodiments were all redirection commands are broadcast to all ports. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> However, in embodiments where redirection commands are sent only to the ports involved and the ports each maintain their own lookup table, the storage manager must know to which ports of the switch each storage device and client are connected. The first thing that happens in some embodiments is that the storage manager <highlight><bold>20</bold></highlight> learns or is configured to know to which ports on switch <highlight><bold>14</bold></highlight> each of the clients <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight> and each of the storage devices <highlight><bold>16</bold></highlight> and <highlight><bold>18</bold></highlight> are coupled. This is most easily done by manually setting configuration data in the storage manager that maps each client and storage device to a port on the switch <highlight><bold>14</bold></highlight>. In other embodiments, the storage manager can do an automatic discovery process by sending out probes to every port of the switch to be forwarded to every device coupled to that port to request the PA(s) of the device(s) connected to that port be returned. </paragraph>
<paragraph id="P-0138" lvl="7"><number>&lsqb;0138&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, Step <highlight><bold>2</bold></highlight> </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Next, the client device sends a write command to the storage manager. </paragraph>
<paragraph id="P-0140" lvl="7"><number>&lsqb;0140&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, Step <highlight><bold>3</bold></highlight> </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> The storage manager receives the write command and examines it to determine in a conventional manner on which storage device the data needs to be stored. Basically, the blocks of data identified in the request are mapped to the storage device on which they are to be stored. The write command frame or packet header is also examined to determine from which client device the write command came. The storage manager then composes two redirection commands and sends them to the switch for storage in one or more look up tables. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> There is a &ldquo;first redirection command&rdquo; in redirected write transaction to redirect data frames travelling from the client to the switch to the storage manager so that they travel from the client to the switch to the storage device. The first redirection command will cause originator data frames of a write transaction to bypass the storage manager and be sent by the switch directly to the storage device. The &ldquo;old address data&rdquo; in this first redirection command will be: the original originator exchange ID assigned by the client to the client-storage manager transaction when the initial request was made; the Port_ID of the storage manager as the destination address; the Port_ID of the client device from which the request originated as the source address; and the responder exchange ID which will be assigned by the storage manager for this client-manager side transaction. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> The &ldquo;new address data&rdquo; of this write transaction first redirection command will be: the Port_ID of the storage device as the destination address; the Port_ID of the storage manager as the source address; the originator exchange ID assigned by the storage manager for manager-device transaction; and the responder exchange ID assigned by the storage device for this transaction. Note that this responder exchange ID will not be entered by the storage manager at this point in the transaction, but will be filled in later with the responder exchange ID assigned by the storage device taken from the first transfer ready or data frame from the storage device. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> There is also a &ldquo;second redirection command&rdquo; in write transactions to redirect transfer ready, responder type frames travelling from the storage device to the storage manager to bypass the storage manager and go directly to the client device. The transfer ready frame is a message to the client that the storage device has buffer space to store more frames and acts as a handshaking &ldquo;clear to send&rdquo; message to keep the client from overrunning the storage device buffer. The &ldquo;old address data&rdquo; of this second redirection command is: the originator exchange ID assigned by the storage manager to storage device side of the transaction; the Port_ID of the storage manager as the destination address; the Port_ID of the storage device as the source address; and the responder exchange ID assigned by the storage device. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> The corresponding &ldquo;new address data&rdquo; will be: the original originator exchange ID assigned by the client when the original write request was made; the Port_ID of the original requesting client as the destination address; the Port_ID of the storage manager as the source address so that the redirected frame looks to the storage device like it came from the storage manager; and responder exchange ID assigned by the storage manager for this transaction. This allows the storage device hardware and software to remain conventional and not need any modifications. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> These two redirection commands are stored in the appropriate look up table in the switch. The two redirection commands effectively alias the transaction such that it looks to the storage device like the data frames following the write request came from the storage manager instead of directly from the client. The redirection command also make it looks to the client like the transfer ready frames came from the storage manager instead of the storage device. This aliasing property allows the client and storage device hardware and software to remain unchanged. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> In alternative embodiments, the information contained in the two redirection commands could be combined into a single redirection command with more fields. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4A through 4C</cross-reference> represents a subclass of embodiments within the genus of the invention where every write transaction is redirected. The genus of the invention has the shared characteristic that all species will alias at least some read and at least some write transactions. However, there are several different alternative embodiments within this genus. The difference between these embodiments arises from whether the redirection process is carried out in the ports or by a central redirection process which is part of the routing process and whether every data and transfer ready frame is redirected or redirection only occurs when the storage manager is becoming a bottleneck or other reasons. Further, differences arise from whether each port has its own look up table to use for redirection or there is a single look up table shared by all the ports or used by the central redirection process for redirection processing. </paragraph>
<paragraph id="P-0149" lvl="7"><number>&lsqb;0149&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>B, Step (<highlight><bold>4</bold></highlight>) </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Next, the storage manager responds to receiving the write request by sending a write command to the storage device and assigns an originator exchange ID to the transaction. </paragraph>
<paragraph id="P-0151" lvl="7"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, Step (<highlight><bold>5</bold></highlight>) </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> The storage device responds to the write command by sending a transfer ready frame toward the storage manager as soon as it has buffer space available. The transfer ready frame has the storage manager Port_ID as its destination address and the storage device Port_ID as its source address and has the originator exchange ID assigned by the storage manager in the write command and has a responder exchange ID supplied by the storage device for this particular transaction. </paragraph>
<paragraph id="P-0153" lvl="7"><number>&lsqb;0153&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, Step (<highlight><bold>6</bold></highlight>) </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> The switch recognizes this transfer ready frame as a frame to be redirected by preparing a search key comprised of the source address, the destination address and the originator exchange ID from the transfer ready frame. This search key is compared to the old address data of all the second redirection commands stored in the switch lookup tables. If a match is found, the switch copies the responder exchange ID from the frame and writes it into the responder exchange ID field of the new address data of the first redirection command for this transaction. Next, the switch redirection process relabels the frame for redirection to the client by substituting the linked new address data of the matching second redirection command and passing the relabelled frame to the conventional routing process, thereby bypassing the storage manager. This happens in various ways depending upon the embodiment. In the embodiments of <cross-reference target="DRAWINGS">FIGS. 5, 6</cross-reference> and <highlight><bold>7</bold></highlight>, the redirection process <highlight><bold>74</bold></highlight> receives the frame and first determines that it is a transfer ready frame. The redirection process then compares the originator exchange ID and the source and destination addresses in the frame header to the old address data in look up table <highlight><bold>54</bold></highlight>. If a match is found, the header is rewritten using the new address data of the matching entry in look up table <highlight><bold>54</bold></highlight>, and the frame is passed to the routing process <highlight><bold>80</bold></highlight> and, from there, transmitted directly to the client <highlight><bold>10</bold></highlight> from the switch <highlight><bold>14</bold></highlight> bypassing the storage manager. However, the new address data makes the frame look like it came from the storage manager so that the client software does not get confused. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> In the embodiments represented by <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the redirection process <highlight><bold>74</bold></highlight> of port <highlight><bold>60</bold></highlight> does all the same things just described, but compares the header to the old address data in look up table <highlight><bold>90</bold></highlight>. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> In the embodiments represented by <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the transfer ready frame is forwarded to the centralized redirection process <highlight><bold>100</bold></highlight> which determines it is a transfer ready frame. The header information is then compared to the old address data in the shared look up table <highlight><bold>90</bold></highlight>, and processing is thereafter the same. </paragraph>
<paragraph id="P-0157" lvl="7"><number>&lsqb;0157&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, Step (<highlight><bold>7</bold></highlight>) </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> The client receives the redirected transfer ready frame, and responds by sending one or more frames of data addressed to the storage manager toward the storage manager. The write data frame(s) transmitted in response to each transfer ready frame will have the Port_ID of the storage manager as its destination address and the Port_ID of the client as the source address and will have the originator exchange ID originally assigned by the client, and a responder exchange ID originally assigned by the storage manager for this manager-client transaction. </paragraph>
<paragraph id="P-0159" lvl="7"><number>&lsqb;0159&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>C, Step (<highlight><bold>8</bold></highlight>) </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The switch receives the data frames and recognizes them as originator data frames which qualifies them for redirection if a matching first redirection command is found. It then uses the header data in the data frames as a search key or constructs a search key which is some subset of the header data, and uses the key to search the old address data of the active first redirection commands in the appropriate look up table(s). In most embodiments, the appropriate look up table is the look up table stored in the port that received the data frame or frames, but in alternative embodiments, it is a central shared look up table. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> If a match is found, the header of the frame or frames is relabelled using the new address data of the matching first redirection command, and the relabelled frame or frames are passed to the switching and routing process <highlight><bold>80</bold></highlight>. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> This searching and relabelling process can be by the redirection process <highlight><bold>76</bold></highlight> using look up table <highlight><bold>52</bold></highlight> in the embodiments of <cross-reference target="DRAWINGS">FIGS. 5, 6</cross-reference>, and <highlight><bold>7</bold></highlight> or, in the embodiment of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, by redirection process <highlight><bold>76</bold></highlight> using shared look up table <highlight><bold>90</bold></highlight>. In the embodiment of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the process is carried out by centralized redirection process <highlight><bold>100</bold></highlight> using shared look up table <highlight><bold>90</bold></highlight>. </paragraph>
<paragraph id="P-0163" lvl="7"><number>&lsqb;0163&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>C, Step (<highlight><bold>9</bold></highlight>) </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> Next, the storage device receives the data frame or frames and stores the data. If the amount of data to be transferred is greater than indicated by the initial transfer ready, the storage device repeats step (<highlight><bold>5</bold></highlight>) as soon as buffer space becomes available and continues until the transfer is complete. </paragraph>
<paragraph id="P-0165" lvl="7"><number>&lsqb;0165&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>C, Step (<highlight><bold>10</bold></highlight>) </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> The switch repeats steps (<highlight><bold>5</bold></highlight>) and (<highlight><bold>8</bold></highlight>) as many times as necessary to get all the data frames stored. Specifically, the switch redirects each transfer ready frame to the client as in step (<highlight><bold>5</bold></highlight>), and redirects each data frame the client responds with to the storage device as in step (<highlight><bold>8</bold></highlight>). </paragraph>
<paragraph id="P-0167" lvl="7"><number>&lsqb;0167&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>D, Step (<highlight><bold>11</bold></highlight>) </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> The client repeats step (<highlight><bold>6</bold></highlight>) as many times as necessary by receiving redirected transfer ready frames and sending data frames to the switch. </paragraph>
<paragraph id="P-0169" lvl="7"><number>&lsqb;0169&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>D, Step (<highlight><bold>12</bold></highlight>) </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The storage device knows how many data frames are going to be sent because the original write command specified that fact. When the last data frame has been received and stored properly, the storage device outputs a done status frame addressed to the storage manager. </paragraph>
<paragraph id="P-0171" lvl="7"><number>&lsqb;0171&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>D, Step (<highlight><bold>13</bold></highlight>) </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> The switch receives this done status frame and recognizes from the data type field in the header that it is a status and not a data or transfer ready type frame, and, therefore, the frame is not to be redirected. The status frame is then sent to the routing process for transmission to the storage manager. In the preferred embodiment, the switch automatically purges the first and second redirection commands that apply to the transaction just completed. </paragraph>
<paragraph id="P-0173" lvl="7"><number>&lsqb;0173&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>D, Step (<highlight><bold>14</bold></highlight>) </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> The storage manager receives this done status frame and in turn sends a similar one to the client device. Before the storage manager can execute any further write or read commands from that client device however, the redirection commands pertaining to the write transaction just completed must be purged to avoid inadvertent redirections. To do this, in alternative embodiments where the switch does not automatically purge redirection commands when it sees the done status frame, the storage manager determines which redirection commands need to be purged, and issues purge commands to the switch. The redirection commands to be purged are found and purged by the switch in step (<highlight><bold>16</bold></highlight>). </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> The above example, taken from the FibreChannel technology, assumes that the initial write request from the client indicated how much data was to be written so that the storage device would know when the last frame has been stored and issue a done status frame. However, the invention may also be used in packet based LAN and WAN environments where there is a storage manager or other bottleneck device in which it is advantageous to divert packets around. In these environments, the protocols are different, so any method of the storage manager determining when the transaction is completed given the particular protocol will suffice. In these alternative embodiments, the storage manager determines the transaction has been completed by watching the network traffic for a message that the transaction is done or by a timeout on receiving packets having the particular exchange ID or by any other way supported by the protocol. When the storage manager determines that the transaction is done, it finds the appropriate redirection command or commands and sends purge commands to the switch or router that is doing the redirection. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> The switch <highlight><bold>14</bold></highlight> in each of <cross-reference target="DRAWINGS">FIGS. 5 through 9</cross-reference> should be understood in this example and for purposes of interpreting the term &ldquo;switch&rdquo; in the claims as being either a single switch or multiple switches which are all connected together in a network and which can communicate by an information protocol to implement the switching and redirection function. In a typical situation with multiple switches in the same network, each switch stores configuration data as to only the local devices to which it is connected. This switch is coupled to the other switches in the network by network data paths. The switches all communicate with each other to route packets and frames properly. Thus, in the example of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, suppose that switch <highlight><bold>14</bold></highlight> was really two different switches, one on the West Coast coupled to some client and storage devices and a storage manager and coupled to another switch on the East Coast by a T1 or other WAN connection. Suppose client <highlight><bold>10</bold></highlight> is on the West Coast and storage device <highlight><bold>18</bold></highlight> is on the East Coast. When a write transaction is initiated by client <highlight><bold>10</bold></highlight> that involves writing data to storage device <highlight><bold>18</bold></highlight>, the storage manager issues redirection commands <highlight><bold>58</bold></highlight>A and <highlight><bold>56</bold></highlight>A to the West Coast switch. The West Coast switch looks at its configuration data <highlight><bold>81</bold></highlight> and does not find storage device <highlight><bold>18</bold></highlight>. It then carries out a communication protocol with the East Coast switch and any other switches in the network if there are more to find out which switch is coupled to storage device <highlight><bold>18</bold></highlight>. The East Coast switch replies that it is so connected. The West Coast switch then sends redirection command <highlight><bold>56</bold></highlight>B to the East Coast switch which looks up storage device <highlight><bold>18</bold></highlight> in its lookup table and routes redirection command <highlight><bold>56</bold></highlight>B to redirection process <highlight><bold>74</bold></highlight> in port <highlight><bold>60</bold></highlight> which stores the old and new address data in lookup table <highlight><bold>54</bold></highlight>. The redirection process <highlight><bold>74</bold></highlight>, if necessary, alters the new address data or appends data to it to indicate that frames or packets to be redirected in this write transaction need to be sent over the network path to the West Coast switch for further routing. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, there is shown a flowchart of the processing in one embodiment of the storage manager to decide whether to redirect, and, if so, to generate and send redirection commands. The process starts in step <highlight><bold>99</bold></highlight>. The storage manager first receives a read or write request from the client or transfer ready frames from the storage device in step <highlight><bold>100</bold></highlight>. In step <highlight><bold>101</bold></highlight>, the storage manager determines if the received request is a read. If so, step <highlight><bold>103</bold></highlight> is performed to determine if the requested data is stored in cache memory in the storage manager. If so, step <highlight><bold>105</bold></highlight> is performed to send the requested data from the cache to the client which requested it. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> If step <highlight><bold>101</bold></highlight> determines that the request is not a read request, step <highlight><bold>102</bold></highlight> is performed. In step <highlight><bold>102</bold></highlight>, the storage manager decides whether it is going to redirect this particular transaction. In the preferred embodiment, every read or write transaction is redirected, but in alternative embodiments, step <highlight><bold>102</bold></highlight> represents a more complicated decision process. In a second class of embodiments, step <highlight><bold>102</bold></highlight> represents the process of analyzing the number of outstanding read and/or write requests and comparing that number to a redirection threshold. In some embodiments, this threshold is set by configuration data, and in other embodiments, it is fixed. In this class of embodiments, it is assumed that if the number of outstanding read or write requests equals or exceeds the threshold, that the storage manager has become a bottleneck, and redirection would be beneficial. When the threshold is equalled or exceeded, one or more redirection commands for every request is sent. Purging occurs as each transaction is completed. Redirection automatically stops when the number of outstanding read or write requests drops below the threshold. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> In a third class of embodiments, step <highlight><bold>102</bold></highlight> represents the process of analyzing whether the storage manager actually has become a bottleneck, and a decision to redirect is made if it has. In this class of embodiments, any appropriate criteria or any appropriate measurement made by the storage manager or switch can be used to determine if a bottleneck condition exists. One such criteria is latency. For example, the storage manager can start a counter at the time a read or write request is received and stop the counter at the time the status frame is received indicating the request has been completed. Then the count is compared to a threshold, and if the count exceeds a number in a look up table indicating a bottleneck exist, redirection commands are written and sent. The look up table contains numbers that indicate the maximum time a read or write transaction should take for the size of the transaction. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> The redirection decision process in this measured latency type class of embodiments would be to: </paragraph>
<paragraph id="P-0181" lvl="2"><number>&lsqb;0181&rsqb;</number> (1) determine the size of the read or write from the initial request data and start a counter; </paragraph>
<paragraph id="P-0182" lvl="2"><number>&lsqb;0182&rsqb;</number> (2) perform conventional read or write transaction processing including sending a read or write command to the appropriate storage device and including forwarding data and transfer ready frames to the client or storage device as appropriate to the particular type of transaction being performed; </paragraph>
<paragraph id="P-0183" lvl="2"><number>&lsqb;0183&rsqb;</number> (3) look up the appropriate threshold number for that size transaction; </paragraph>
<paragraph id="P-0184" lvl="2"><number>&lsqb;0184&rsqb;</number> (4) stop said counter when said conventional read or write transaction was completed; </paragraph>
<paragraph id="P-0185" lvl="2"><number>&lsqb;0185&rsqb;</number> (5) comparing the counter value when the transaction was completed to the threshold number looked up from said look up table as a measure of the time it took to complete the conventional read or write transaction; </paragraph>
<paragraph id="P-0186" lvl="2"><number>&lsqb;0186&rsqb;</number> (6) if the time taken to complete the conventional read or write transaction exceeded the threshold, generating one or more redirection commands for subsequent read or write requests and sending them to the switch; and </paragraph>
<paragraph id="P-0187" lvl="2"><number>&lsqb;0187&rsqb;</number> (7) performing any method of stopping redirection after some time passes and resuming the latency measuring process of the above steps (1) through (6) for subsequent read or write requests until a latency threshold value is again exceeded, and then repeating steps (6) and (7). </paragraph>
<paragraph id="P-0188" lvl="7"><number>&lsqb;0188&rsqb;</number> In some embodiments, this redirection would continue for a predetermined, programmable or fixed timeout period and then the process of not redirecting and measuring latency would begin again. In other embodiments, every Xth read or write transaction would not be redirected and its latency measured, and if the latency was at or below the threshold value, redirection would cease and measuring of latency of each subsequent read or write transaction would begin again until the threshold latency was once again exceeded. Purging would occur as each transaction was completed. The redirection would automatically stop when the traffic volume dropped to the extent that the latency values dropped below the values in the table. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> In a fourth class of embodiments, the decision represented by step <highlight><bold>102</bold></highlight> involved determining whether the cache algorithm of the storage manager wants to copy the data of the transaction to cache memory. If so, no redirection commands are issued. If not, then redirection may occur and redirection commands may be issued as detailed in other discussions of the fourth class of embodiments given in the summary of the invention section. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> If step <highlight><bold>102</bold></highlight> determines that no redirection should occur, step <highlight><bold>104</bold></highlight> is performed representing the normal storage manager processing. Step <highlight><bold>104</bold></highlight> includes storing the most frequently requested read data in transactions that have not been redirected and which pass through the storage manager in a cache memory in the storage manager so that some read requests can be short circuited by supplying the data from cache. If step <highlight><bold>102</bold></highlight> determines that redirection should occur, then step <highlight><bold>106</bold></highlight> is performed to generate and send redirection commands to the switch for each request. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> After performing step <highlight><bold>106</bold></highlight>, step <highlight><bold>107</bold></highlight> is performed to issue read or write requests as appropriate to the storage device. Then test <highlight><bold>108</bold></highlight> is performed. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Test <highlight><bold>108</bold></highlight> monitors if the transaction is done according to whatever network protocol is in existence. If the transaction is not done, processing returns again to step <highlight><bold>108</bold></highlight> to wait for the transaction to complete. The flowchart of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> applies to each exchange, and multiple instances of the process of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> may be occurring in the storage manager if multiple exchanges are occurring simultaneously. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> If a status frame or other indication occurs indicating a particular exchange is done, in an alternative embodiment, the storage manager sends purge commands to the switch directing it to find and purge the appropriate redirection commands that pertain to the exchange just completed, as symbolized by block <highlight><bold>110</bold></highlight>. In the preferred embodiment, the switch sees the status command and automatically purges the appropriate first and second redirection commands and then forwards status frame to the storage manager, also as symbolized by step <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, which is comprised of <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, there is shown a flowchart of the processing of the redirection process in each port or the central redirection process to process incoming frames. The flowchart shows only the processing at the logical level of redirection and not any physical layer processing to carry out the physical layer or other protocols that happen regardless of whether a frame is or is not redirected. Each function represented by a step in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> can be performed either by a programmed microprocessor, a gate array, an ASIC or a field programmable gate array or conventional switch circuitry such as the routing engine. Further, both <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> are merely exemplary processing flows and the exact process flow of other species within the genus does not to be the same so long as the same functions are achieved in an order which causes the end results achieved by <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> to occur. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> Line <highlight><bold>120</bold></highlight> represents an incoming frame that enters the port and is directed to the port&apos;s redirection process, such as process <highlight><bold>74</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In the embodiment of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, line <highlight><bold>120</bold></highlight> represents a frame that has entered a port and been forwarded to the central redirection process <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> Step <highlight><bold>121</bold></highlight> represents a process of determining whether the newly arrived frame is a data or transfer ready frame because status frames are not redirected. This is done by reading the data type field in the header. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> If step <highlight><bold>121</bold></highlight> determines the frame is not a data or transfer ready frame, step <highlight><bold>123</bold></highlight> is performed to determine if the incoming frame contains redirection or purge commands. In alternative embodiments, the storage manager receives done status frames and stops its processing for that transaction. Then, it generates and sends to the switch a purge command ordering the switch to find and purge the redirection command(s) that pertain to the transaction just completed. Typically, redirection and purge commands are sent to Fibre Channel switches in ELS frames. However, in some embodiments, overhead such as redirection and purge commands and SNMP management commands and requests are transmitted between the switch and storage manager on a separate physical link or on a separate logical channel such as a subchannel on the same medium as the high speed Fibre Channel, Ethernet, etc. traffic. Step <highlight><bold>123</bold></highlight> represents the process of detecting redirection or purge commands by whatever means they arrive, and forwarding them to the OS and network interface processing step <highlight><bold>132</bold></highlight>. If a redirection command or purge command has arrived, the frame containing it or the redirection or purge command itself is passed to a process represented by block <highlight><bold>132</bold></highlight>. Step <highlight><bold>132</bold></highlight> functions to use the redirection and/or purge commands to properly update the look up table <highlight><bold>124</bold></highlight> in which the old address data and new address data of redirection commands is stored. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> If step <highlight><bold>123</bold></highlight> determines that the incoming frame does not contain redirection or purge commands, in the preferred embodiment, test <highlight><bold>125</bold></highlight> is performed. Test <highlight><bold>125</bold></highlight> determines in the switch whether the incoming frame is a status frame. If it is, in this embodiment, the switch will automatically purge all the redirection commands that pertain to this transaction just completed, as represented by block <highlight><bold>127</bold></highlight> on <cross-reference target="DRAWINGS">FIG. 11B</cross-reference>. The switch then forwards the status frame to the storage manager, as symbolized by line <highlight><bold>129</bold></highlight> to block <highlight><bold>130</bold></highlight>. If test <highlight><bold>125</bold></highlight> determines that the incoming frame is not a status frame, then the frame is forwarded to other conventional processing, as symbolized by block <highlight><bold>130</bold></highlight>. the frame is forwarded to the process represented by block <highlight><bold>130</bold></highlight>. Block <highlight><bold>130</bold></highlight> carries out conventional processing on frames that are not redirected. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> If step <highlight><bold>121</bold></highlight> determines the incoming frame is data or a transfer ready frame, processing of step <highlight><bold>122</bold></highlight> occurs which is the process of examination of the fields in the frame&apos;s header to determine if the frame needs to be redirected. This is done by comparing the source and destination address and the originator exchange ID to all the exchange IDs in old address data in the appropriate look up table. The look up table is represented by block <highlight><bold>124</bold></highlight>, and contains the old address data entries and the corresponding new address entries for each transaction in which frames are to be redirected. In the embodiment of <cross-reference target="DRAWINGS">FIGS. 8 and 9</cross-reference>, table <highlight><bold>124</bold></highlight> is represented by block <highlight><bold>90</bold></highlight>. In the embodiments of <cross-reference target="DRAWINGS">FIGS. 5, 6</cross-reference> and <highlight><bold>7</bold></highlight>, table <highlight><bold>124</bold></highlight> is represented by the look up tables stored in the ports locally such as blocks <highlight><bold>54</bold></highlight>, <highlight><bold>52</bold></highlight>, <highlight><bold>57</bold></highlight> and <highlight><bold>53</bold></highlight>. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> Next, step <highlight><bold>126</bold></highlight> determines if a match in the old address data has been found. If so, step <highlight><bold>128</bold></highlight> is performed to substitute the corresponding new address data from the entry in table <highlight><bold>124</bold></highlight> that matched for the old address data. If no match is found, the frame is not part of a transaction in which redirection is to occur, so it is forwarded to the conventional processing of step <highlight><bold>130</bold></highlight> which routs it to its destination. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> After the new address data has been substituted, the frame is forwarded to the processing represented by block <highlight><bold>130</bold></highlight>. This block represents the conventional processing that occurs for every frame that is not redirected and routing by the switch routing engine to the port coupled to the device identified in the destination address. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> Block <highlight><bold>132</bold></highlight> represents the processing carried out by the operating system of the switch or port and the interface processing to receive redirection commands and purge commands from the system manager and to use them to add redirection commands to the look up table and to purge redirection commands from the look up table for transactions that have been completed. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, there is shown a block diagram of the pertinent hardware and software modules of a typical storage manager that can implement the teachings of the invention. Basically, a programmed microprocessor, gate array, field programmable gate array or ASIC can be structured to perform the conventional and redirection functionality of the storage manager so long as the circuitry chosen can handle the bandwidth involved. In <cross-reference target="DRAWINGS">FIG. 12, a</cross-reference> programmed CPU <highlight><bold>134</bold></highlight> has been chosen to represent all these possibilities but in the claims, all these possible structures are referred to as a &ldquo;computer programmed to or circuitry structured to make the decision to redirect . . . .&rdquo; The CPU is programmed with software <highlight><bold>135</bold></highlight> that carries out conventional storage manager processing as well as the redirection processing. Basically, these conventional and redirection applications interact with the storage manager operating system to carry out the redirection processing and other conventional processing symbolized by <cross-reference target="DRAWINGS">FIGS. 10 and 13</cross-reference>. The CPU is coupled to a input/output bus <highlight><bold>136</bold></highlight> for communication with a memory <highlight><bold>138</bold></highlight> and one or more port adapters of which port adapter <highlight><bold>140</bold></highlight> is typical. In some embodiments of the storage manager, a cache memory <highlight><bold>137</bold></highlight> is used and a cache algorithm <highlight><bold>139</bold></highlight> controls the computer <highlight><bold>134</bold></highlight> to manage the cache conventionally and to cooperate with the redirection process in the manner described elsewhere herein. The function of the port adapter <highlight><bold>140</bold></highlight> is to implement the physical layer protocol and any other protocols necessary to communicate with the switch <highlight><bold>14</bold></highlight>. The type port adapter depends upon the type of fabric or packet switch to which the storage manager is coupled. Thus, the port adapter may be a FibreChannel port adapter or an Ethernet port adapter or an ATM port adapter, etc. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The storage manager <highlight><bold>20</bold></highlight> must be coupled to switch <highlight><bold>14</bold></highlight> by at least one physical data path <highlight><bold>22</bold></highlight> and at least one port adapter <highlight><bold>140</bold></highlight>. However, it is inadvisable to funnel all client device and storage device traffic in large systems through one port since then the port adapter can become a bottleneck. Thus, in larger systems, the storage manager is coupled to the switch via multiple port adapters such as <highlight><bold>142</bold></highlight> and <highlight><bold>144</bold></highlight>. Typically, all client device traffic will be routed through one port adapter and all storage device traffic will be routed through another port adapter. The redirection and purge commands can be sent to the switch via the port adapters <highlight><bold>140</bold></highlight>, <highlight><bold>142</bold></highlight> using extended link services frames etc., but since this is very low volume traffic, it is a waste of bandwidth to put one or two redirection commands in a Fibre Channel frame or some packet designed to carry much more data than the redirection command(s) have. In more efficient embodiments, a separate Ethernet or other management link between the storage manager and switch carry overhead information such as redirection and purge commands, SNMP management traffic etc. This separate management link is shown as a port adapter <highlight><bold>146</bold></highlight>, but it can take the form of a physically separate data path or a subchannel on the FibreChannel or other packet network data paths <highlight><bold>22</bold></highlight> or <highlight><bold>24</bold></highlight>. Subchannel technology for management traffic is known. One such technology is taught in Ericcson patent U.S. Pat. No. 4,677,608, and another such technology is taught in U.S. patent application entitled SUBCHANNEL MODULATION SCHEME FOR CARRYING MANAGEMENT AND CONTROL DATA OUTSIDE THE REGULAR DATA CHANNEL, filed Apr. 20, 1998, Ser. No. 09/063,633, both of which are hereby incorporated by reference. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> All the circuitry of the storage manager is conventional. The only difference is that it is programmed to carry out the redirection and purging processes described herein. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> Typically, the frames arriving from the switch are stored in memory <highlight><bold>138</bold></highlight> and the software process <highlight><bold>135</bold></highlight> is interrupted. Processing then proceeds according to the flow diagram of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> which is an alternative embodiment for storage manager processing or according to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>.Considering <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, step <highlight><bold>150</bold></highlight> represents the process of receiving a frame from the client device via the switch. Test <highlight><bold>152</bold></highlight> determines if the frame contains a SCSI command requesting reading or writing of specified data. Step <highlight><bold>154</bold></highlight> uses an internal map to determine from the specification of the data to be read which storage device has the data and the block locations on the storage device where the data is stored. Test <highlight><bold>156</bold></highlight> determines if the request for data needs to be redirected based upon predetermined redirection criteria which could be a single criteria or any one or a combination of a plurality of different criteria and which can be either fixed or programmable. Further, in some embodiments, which particular criteria is used to decide whether to redirect can be fixed or configurable. In some embodiments, this test <highlight><bold>156</bold></highlight> is eliminated because all read requests are redirected. In other embodiments, test <highlight><bold>156</bold></highlight> is present and makes the decision based upon a fixed or configurable redirection criteria. Such criteria include: all requests are redirected; only requests for large amounts of data are redirected; a determination of whether the requested data is already cached or not and not redirecting if the data is already stored in cache of the storage manager; or redirecting only when traffic levels are so high that the storage manager is causing excessive either actually measure delays or just traffic levels are so high that excessive delays are assumed. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> If test <highlight><bold>156</bold></highlight> determines that the data and transfer ready frames of the transaction need to be redirected, block <highlight><bold>158</bold></highlight> the storage manager sends an appropriate read or write command through the switch to the appropriate storage device to start the transaction. As detailed above, the storage manager assigns an originator exchange ID for this manager-device transaction. Then, if the transaction is a read, the storage manager composes a single &ldquo;second redirection command&rdquo; in the manner detailed above and sends it to the switch. If the transaction is a write, the storage manager composes both first and second redirection commands in the manner described above and sends them both to the switch. Block <highlight><bold>150</bold></highlight> represents a return to block <highlight><bold>150</bold></highlight> to await the next frame. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> Returning to test <highlight><bold>152</bold></highlight>, if it is determines that the incoming frame is not a read or write request, test <highlight><bold>162</bold></highlight> is performed to determine if the frame is a status frame. If it is, test <highlight><bold>164</bold></highlight> determines whether the status frame indicates that a transaction which has been redirected has been completed. If it does, the processing of block <highlight><bold>166</bold></highlight> is performed in all embodiments to send a status frame to the client which requested the transaction which has been completed. In the preferred embodiment represented by block <highlight><bold>166</bold></highlight>, the storage manager does not have to compose a purge command because the switch automatically purged redirection commands rendered obsolete by the status frame. In an alternative embodiment, also represented by block <highlight><bold>166</bold></highlight>, the switch does not automatically purge, and the storage manager composes one or more purge commands when it sees the status frames and sends them to the switch. Then step <highlight><bold>167</bold></highlight> is performed to return to step <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> Returning to step <highlight><bold>162</bold></highlight>, if the frame is not a status frame, conventional storage manager processing of the frame is completed, per block <highlight><bold>168</bold></highlight>. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> Returning to step <highlight><bold>156</bold></highlight>, if it is determined from whatever redirection criteria is in use that the requested read or write transaction does not need to be redirected, processing of step <highlight><bold>170</bold></highlight> is performed. This processing only formulates and sends an appropriate read or write command to the storage device. Then the processing of step <highlight><bold>172</bold></highlight> is performed wherein the read data is received from the storage device and forwarded to the client. If the transaction is a write, the write data is received from the client and sent to the storage device, and transfer ready frames are received from the storage device and sent to the client for flow control purposes. The storage manager also uses the transfer ready frames to make sure it does not overflow the storage device buffer. The step <highlight><bold>160</bold></highlight> returns control to step <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> Although the invention has been disclosed in terms of the preferred and alternative embodiments disclosed herein, those skilled in the art will appreciate possible alternative embodiments and other modifications to the teachings disclosed herein which do not depart from the spirit and scope of the invention. All such alternative embodiments and other modifications are intended to be included within the scope of the claims appended hereto. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A switch for a packet switched or frame switched network, said switch having conventional routing circuitry, said network having client devices and storage devices and a storage manager that decides to redirect read and/or write transactions on any basis so as to virtualize said storage devices, said switch comprising: 
<claim-text>one or more ports which are structured to operate to receive one or more redirection commands from said storage manager or another switch in said network coupled to said storage manager containing old address data and new address data, said ports containing circuitry to store said old address data and new address data in one or more look up tables, said switch containing circuitry functioning to compare packet or frame type information included in a header of at least some packets or frames arriving at a port coupled to a client device or a storage device to determine if the packet or frame is of a type which is to be relabelled and redirected, and, if the packet or frame is of a type to be relabelled and redirected, comparing at least some of the old address data therein to the old address data entries for one or more redirection commands stored in one or more of said look up tables, and if there is a match to any of the old address data of said one or more redirection commands, relabelling said packet or frame by substituting the corresponding new address data from said matching redirection command(s) for said old address data in said packet or frame header, said new address data being such as to cause said relabelled packet or frame to be routed so as to bypass said storage manager but to look like it came from said storage manager, and then passing said relabelled packet or frame to said conventional routing circuitry for forwarding to the destination identified in said new address data, and wherein the sequence in which the type of incoming packet is determined and the old address data lookup is performed is not critical. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein each said port contains its own redirection circuitry and its own look up table for storing redirection commands, said redirection circuitry in every port being structured to receive first and second redirection commands for every write transaction to be redirected and to use configuration data defining which switch ports are coupled to which devices, said configuration data being stored in said switch or received in a message from said storage manager and said configuration data being used to forward said first redirection command to a first port of said switch coupled to the client device which originated said write request for storage in a look up table, and to forward the second redirection command to a second port coupled to the storage device which is to store the data to be written for storage in a look up table, said redirection circuitry being structured to receive a redirection command for every read transaction to be redirected and to use configuration data to forward said redirection command to a third port coupled to the storage device where the requested data is stored for storage in a look up table. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein each said port contains its own redirection circuitry and its own look up table for storing redirection commands, said redirection circuitry in every port being structured to receive first and second redirection commands for every write transaction to be redirected and to forward said first and second redirection commands to all ports of said switch for storage in the look up tables of said ports, said redirection circuitry also being structured to receive a redirection command for every read transaction to be redirected and to forward said redirection command to all ports of said switch for storage in a look up table in said third port. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein each said port contains its own redirection circuitry, said redirection circuitry in every port being structured to receive first and second redirection commands for every write transaction to be redirected and to to forward said first and second redirection commands to a shared look up table in said switch to which all redirection circuits in all ports have access, said redirection circuitry also being structured to receive a redirection command for every read transaction to be redirected and to forward said redirection command for storage in said shared look up table. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said switch contains shared redirection circuitry that performs the redirection process and a shared look up table for storing redirection command used by said shared redirection circuitry to perform said redirection process, and wherein each said port contains circuitry to store redirection commands in said shared look up table by any method, and to forward frames or packets to said shared redirection circuitry for analysis and relabelling if said frames or packets are to be redirected. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A virtualizing storage manager for a packet switched or frame switched network, said network having client devices and storage devices and a switch having any structure capable of redirecting read and/or write transactions based upon commands from said storage manager so as to virtualize said storage devices, said storage manager comprising: 
<claim-text>conventional storage manager circuitry to carry out conventional processing of read and/or write transactions that are not redirected; and </claim-text>
<claim-text>a computer programmed to or logic circuitry structured to decide whether to redirect packets or frames of a read or write transaction based upon any redirection criterion, and programmed or structured to generate and send at least one said redirection command to a switch in said network for every read or write transaction to be redirected, and programmed or structured to send a corresponding read or write request to the appropriate storage device for every received read or write request from a client device to start the transaction, and programmed or structured to send at least one purge command to a switch in said network which stored said redirection commands in one or more look up tables, said at least one purge command corresponding to one or more completed read or write transactions that have been redirected by said switch to cause said switch to purge from said one or more look up tables the redirection command or commands pertaining to said one or more read or write transaction that has been completed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision based upon programmable redirection criteria. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction is to be redirected. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction is to be redirected when the number of outstanding read and/or write requests is greater than or equal to a threshold. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said threshold is programmable. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction is to be redirected when the number of outstanding read and/or write requests is such that a measured latency between receipt of a read or write request and completion of the corresponding read or write transaction is greater than a threshold latency. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction is to be redirected when said storage manager decides based upon any type criteria or any type measurement that it has become a bottleneck. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction is to be redirected when the count of a counter which was started when a read or write request from a client device was received and stopped when the read or write transaction corresponding to said request has been completed exceeds a predetermined threshold. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said predetermined threshold is a number read from a look up table which stores threshold values based upon the size of the read or write transaction, and wherein said means for deciding performs the following steps: 
<claim-text>(1) analyzing each read or write request to determine the size of the transaction and retrieves the appropriate latency threshold value from said look up table based upon the size of the read or write transaction; </claim-text>
<claim-text>(2) starting a counter when said read or write request was received; </claim-text>
<claim-text>(3) perform conventional read or write transaction processing including sending a read or write command to the appropriate storage device and including forwarding data and transfer ready frames to the client or storage device as appropriate to the particular type of transaction being performed; </claim-text>
<claim-text>(4) stop said counter when said conventional read or write transaction was completed; </claim-text>
<claim-text>(5) comparing the counter value when the transaction was completed to the threshold number looked up from said look up table as a measure of the time it took to complete the conventional read or write transaction; and </claim-text>
<claim-text>(6) if the time taken to complete the conventional read or write transaction exceeded the threshold, generating one or more redirection commands for subsequent read or write requests and sending them to the switch; </claim-text>
<claim-text>(7) performing any method of stopping redirection after some time passes and resuming the latency measuring process of steps (1) through (6) for subsequent read or write requests until a latency threshold value is again exceeded, and then repeating steps (6) and (7). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein step (7) comprises continuing redirection for a fixed or programmable amount of time, and then ceasing redirection and resuming performance of steps (1) through (6) for subsequent read or write requests until a latency threshold value is again exceeded, and then repeating steps (6) and (7). </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein step (7) comprises continuing redirection for all subsequent read or write requests except every Xth read or write request where X is any integer and carrying out conventional read or write transaction processing as appropriate for every Xth read or write request and measuring the latency of said Xth request by performance of steps (1) through (6), and if the latency threshold has not been exceeded by said Xth request, resuming performance of steps (1) through (6) for subsequent read or write requests until a latency threshold value is again exceeded, and then repeating steps (6) and (7). </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon redirection criteria that is that every packet or frame of a data or transfer ready type which is part of a read or write transaction that exceeds a certain size as determined from the original read or write request is to be redirected. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said storage manager includes a cache memory and a cache algorithm that manages said cache memory, and wherein said storage manager makes a decision whether or not to redirect data and transfer ready packets or frames of a particular read or write request based upon whether the requested data is already stored in said cache memory in said storage manager, or makes a decision whether or not to redirect a read transaction based upon whether said storage manager cache algorithm wants to copy the data of the read request into said cache memory in said storage manager. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein each port of said switch is structured to receive redirection commands either from an external source or from a source internal to the switch such as the routing circuitry and store all said redirection commands in a look up table maintained by said port and use said look up table to do all necessary relabelling and redirection operations. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A switch for a packet switched or frame switched network, said switch having conventional routing circuitry, said network having client devices and storage devices and a storage manager coupled to said switch, said switch comprising: 
<claim-text>one or more ports which are structured to operate to receive redirection commands from a storage manager containing old address data and new address data and to store the old address data and new address data contained therein in a shared look up table, but otherwise to function as conventional switch ports; </claim-text>
<claim-text>shared redirection interface circuitry coupled to each of said ports and said shared look up table and coupled to said conventional routing circuitry, said shared redirection interface circuitry structured to compare packet or frame type information included in a header of each packet or frame arriving from a port coupled to a client device or a storage device to determine if the packet or frame is of a type which is to be relabelled and redirected, and, if the packet or frame is of a type to be relabelled and redirected, then comparing the old address data therein to the old address data in said shared look up table, and if there is a match to any of the old address data entries in said look up table, substituting the corresponding new address data from said look up table, and forwarding said packet or frame to said conventional routing circuitry for routing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A packet switched or frame switched network, comprising: 
<claim-text>one or more client devices; </claim-text>
<claim-text>one or more storage devices; </claim-text>
<claim-text>a storage manager having redirection circuitry functioning to receive read or write transaction requests from said one or more client devices and redirect at least some of said read and write transaction requests issued by said client devices by issuing redirection commands which contain old address data and new address data which will cause relabelling of data and transfer ready frames so that they are routed between said client device which issued said request and the storage device which is to be read from or written to so as to bypass said storage manager, said redirection circuitry also for sending a corresponding read or write request to the appropriate storage device for every received read or write request from a client device to start the transaction, said redirection circuitry also functioning to receive status packets or frames indicating particular read or write transactions that have been redirected have been completed and for issuing purge commands which function to cause purging of old address and new address data of redirected read or write transactions that have been completed; </claim-text>
<claim-text>one or more switches, each having conventional routing circuitry and each further comprising: 
<claim-text>a shared lookup table; </claim-text>
<claim-text>a shared redirection interface circuit; </claim-text>
<claim-text>one or more ports which are structured to operate to receive redirection commands from said storage manager or another switch and to store the old address data and new address data contained therein in said shared look up table, and structured to receive said purge commands and to use the information therein to purge obsolete old address data and new address data from said shared look up table for read or write transactions that have been completed, but otherwise to function as conventional switch ports; </claim-text>
</claim-text>
<claim-text>and wherein said shared redirection interface circuitry coupled to each of said ports and said shared look up table and coupled to said conventional routing circuitry, said shared redirection interface circuitry structured to compare packet or frame type information included in a header of each packet or frame arriving from a port coupled to a client device or a storage device to determine if the packet or frame is of a type which is to be relabelled and redirected, and, if the packet or frame is of a type to be relabelled and redirected, then comparing the old address data therein to the old address data in said shared look up table, and if there is a match to any of the old address data entries in said look up table, substituting the corresponding new address data from said look up table, and forwarding said packet or frame to said conventional routing circuitry for routing; and 
<claim-text>a data path coupling each said client devices, storage devices and said storage manager to at least one of said one or more switches and coupling said one or more switches together. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A packet switched or frame switched network, comprising: 
<claim-text>one or more client devices; </claim-text>
<claim-text>one or more storage devices; </claim-text>
<claim-text>a storage manager having redirection circuitry functioning to receive read or write requests from said one or more client devices and redirect at least some of said read and write transaction requests issued by said client devices by issuing redirection commands which contain old address data and new address data which will cause relabelling of data and transfer ready frames so that they are routed between said client device which issued said request and the storage device which is to be read from or written to so as to bypass said storage manager, said redirection circuitry also for sending a corresponding read or write request to the appropriate storage device for every received read or write request from a client device to start the transaction, said redirection circuitry also functioning to receive status packets or frames indicating particular read or write transactions that have been redirected have been completed and for issuing purge commands which function to cause purging of old address and new address data of redirected read or write transactions that have been completed; </claim-text>
<claim-text>one or more switches each having conventional routing circuitry and each further comprising one or more ports 
<claim-text>and wherein at least the ports coupled to said storage manager or another switch being structured to operate to receive one or more redirection commands from said storage manager or another switch in said network coupled to said storage manager containing old address data and new address data and store said old address data and new address data in one or more look up tables and to receive purge commands from said storage manager or another switch in said network and use the information therein to purge old and new address data pertaining to redirected read or write transactions that have been completed from said one or more look up tables, </claim-text>
<claim-text>each said switch containing redirection circuitry functioning to compare packet or frame type information included in a header of at least some packets or frames arriving at a port coupled to a client device or a storage device to determine if the packet or frame is of a type which is to be relabelled and redirected, and, if the packet or frame is of a type to be relabelled and redirected, then comparing the old address data therein to the old address data entries in said look up table, and if there is a match to any of the old address data entries in said one or more look up tables, substituting the corresponding new address data from said look up table for said old address data in said packet or frame header and passing said packet or frame to said conventional routing circuitry for forwarding to the destination identified in said new address data, at least the port; and </claim-text>
<claim-text>a data path coupling each said client devices, storage devices and said storage manager to at least one of said one or more switches and coupling said one or more switches together. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> or <highlight><bold>22</bold></highlight> wherein said redirection circuitry in said storage manager includes means to decide which read and/or write transactions to redirect based upon predetermined redirection criteria which could be a single criteria or any one of a plurality of different criteria, said criteria being either fixed or programmable, and which particular criteria is used can be fixed or configurable. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said one or more look up tables comprise a look up table in each port and wherein said redirection circuitry comprises a redirection circuit in every port. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said one or more look up tables comprise a look up table in each port and wherein said redirection circuitry comprises a redirection circuit in every port, and wherein said redirection circuitry in said storage manager includes means to decide which read and/or write transactions to redirect based upon predetermined redirection criteria which could be a single criteria or any one of a plurality of different criteria, said criteria being either fixed or programmable, and which particular criteria is used can be fixed or configurable. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A switch for a packet or frame switched network including one or more client devices and one or more storage devices and a storage manager server, said switch having conventional routing circuitry and means for receiving and storing redirection commands from said storage manager server and for comparing address data of predetermined types of frames or packets arriving at said port to stored redirection data from said redirection commands and for readdressing any frames or packets of said predetermined types which match any stored redirection command and for receiving purge commands from said storage manager server and purging old address data and new address data identified in said purge commands of redirection commands issued for transactions that have been completed. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A storage manager for a packet or frame switched network including one or more client devices and one or more storage devices and a switch, comprising: 
<claim-text>means receiving read or write transaction requests from said one or more client devices and mapping the data designated in said read or write request to a storage device, and for sending corresponding read or write requests to said storage device to start the transaction; and p<highlight><bold>1</bold></highlight> means for using redirection criteria to decide which read and write requests from said client devices to redirect and for generating and sending redirection commands to said switch for the read and write requests to be redirected, said redirection commands containing old address data and new address data which will cause data and transfer ready frames of read and write transactions to be redirected to be relabelled so that they are routed by said switch to bypass said storage manager but look like they came from said storage manager; and </claim-text>
<claim-text>means for receiving status frames or packets and for issuing purge commands to said switch when said status frames or packets indicate a read or write transaction which has been redirected has been completed, said purge commands for causing said switch to purge from one or more look up tables in said switch old address data and new address data identified in said purge commands of redirection commands previous issued for transactions that have been completed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A packet or frame switched network including one or more client devices and one or more storage devices each of which is coupled to a packet or frame switch, comprising: 
<claim-text>a switch having conventional routing circuitry therein, said switch comprising: 
<claim-text>one or more ports in said switch, said switch including redirection circuitry structured to operate to receive redirection commands from a storage manager and to store the redirection address data containing old address data and new address data contained therein in a look up table, said redirection circuitry also structured to receive incoming packets or frames and determine if they are data or transfer ready type frames or packets and, if not to transfer said packet or frame to said conventional routing circuitry but if so, to compare the address data therein to the old address data in said look up table, and, if there is a match to any of the old address data in said look up table, functioning to substitute the new address data from said look up table from the entry which includes old address data that matched the address data in the incoming packet or frame and pass the packet or frame to said conventional routing circuitry; and </claim-text>
<claim-text>a storage manager comprising a one or more port adapter circuits, a memory and a microprocessor coupled to said memory and programmed to receive read or write requests from said one or more client devices and map the data designated in said read or write request to a particular storage device and to send corresponding read or write requests to said storage device to start the transaction, and programmed to determine from the frame or packet header information of said read or write request the specific client device from which the request came and how large the transaction is, and, if the transaction is larger than a redirection size criteria, for generating and sending one or more redirection commands to said switch for storage in at least one look up table maintained therein, said redirection command containing old address data and new address data that will cause said switch to receive data and transfer ready frames for transactions to be redirected to relabel said packet or frame with new address data so that said data or transfer ready frames will be routed by said switch so as to bypass said storage manager but look like they came from said storage manager, and for performing conventional processing on any read or write request that is not to be redirected, and programmed or structured to monitor status frames to determine when a redirected transaction has been completed and sending purge commands to said switch to purge the old and new address data from said look up table for read and write transactions that have been completed; and </claim-text>
<claim-text>a data path coupling said switch to said storage manager and to said client and storage devices. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein each said port maintains its own redirection circuitry and its own look up table storing redirection commands, and wherein said microprocessor in said storage manager server looks up the specific port to which a specific storage device involved in a transaction is coupled and/or the specific port to which the client device involved in a specific transaction is coupled and sends said one or more redirection commands for the transaction only to the appropriate specific port. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein each said port maintains its own look up table storing redirection commands, and wherein said microprocessor in said storage manager server sends all said redirection commands to all ports in said switch and wherein each port includes redirection circuitry to store redirection commands in the port&apos;s look up table and use the data therein to relabel for redirection data and transfer ready frames. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said switch maintains a shared look up table storing all redirection commands received from said storage manager, said shared look up table for use by all ports, and wherein said microprocessor in said storage manager sends all said redirection commands to a port to which said storage manager server is coupled with instructions to forward said redirection command for storage in said shared look up table, and wherein each said port of said switch has circuitry to use said shared look up table to determine if an incoming frame or packet needs to be relabelled for redirection and at least the ports coupled to said storage manager include circuitry to store all said redirection commands in said shared look up table. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said microprocessor in said storage manager server is programmed to sum the number of outstanding read requests that have not yet been fulfilled, and only issues redirection commands when the number of outstanding read requests exceeds a threshold which is either fixed or programmable and said size is greater than said redirection size criteria. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said microprocessor in said storage manager server is programmed to monitor the time between receipt of a read or write request and completion thereof, and only issues redirection commands when the time to fulfillment exceeds a threshold which is either fixed or programmable and the size of said transaction is greater than said redirection size criteria. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A packet or frame switched network including one or more client devices and one or more storage devices, each of which is coupled to a packet or frame switch, comprising: 
<claim-text>a switch having conventional routing circuitry therein and further comprising: 
<claim-text>shared redirection circuitry; </claim-text>
<claim-text>a shared look up table; 
<claim-text>one or more ports in said switch which are structured to operate to receive relabelling and redirection and purge commands from a storage manager and to forward them to said shared redirection circuitry for storage in said shared look up table and structured to forward data and transfer ready frames to said shared redirection circuitry and to forward all other types of packets or frames to said conventional routing circuitry; </claim-text>
<claim-text>and wherein said shared redirection circuit includes circuitry to receive said redirection commands and store them in said shared look up table and to receive incoming data or transfer ready packets or frames from said ports and compare the address data therein to the old address data in said look up table, and, if there is a match to any of the old address data in said look up table functioning to substitute the new address data from the matching entry in said look up table for the old address data in the incoming packet or frame and pass the packet or frame to said conventional routing circuitry, said shared redirection circuit also structured to receive said purge commands and use the information therein to purge from said shared look up table the old and new address data of redirection commands for completed read or write transactions; and </claim-text>
</claim-text>
</claim-text>
<claim-text>a storage manager including conventional cache memory and circuitry programmed or structured to receive read or write requests from said one or more client devices identifying specific data to be read and to map the identified data to a storage device and, for each read or write request, send a corresponding read or write requests to said storage device to get the transaction started, and for storing the most frequently requested data blocks from read transactions in said cache memory and programmed or structured to monitor read requests for read requests for blocks of data that are stored in said cache memory, and, if a requested block of data is stored in said cache memory, for sending the requested data from the cache memory back to the client device which requested the data instead of sending a read request to a storage device that stores the requested data, and further comprises circuitry to decide whether to redirect a particular read or write request based upon fixed or programmable redirection criteria, and programmed or structured to determine from the frame or packet header information of said packet or frame the specific client device from which the request came, and, if said read or write request is not to be redirected, for performing conventional processing to complete said read or write request, but if said read or write request is to be redirected, for generating and sending one or more redirection commands to said switch for storage in said shared look up table maintained therein, said redirection command containing old address data and new address data that will cause said shared redirection circuitry that receives a data or transfer ready packet or frame that is part of the transaction to be redirected to relabel said packet or frame with new address data and forward said packet or frame to said conventional routing circuitry such that said packet or frame gets routed so as to bypass said storage manager but so as to look like it came from said storage manager, and programmed or structured to monitor status frames to determine when a redirected transaction has been completed and sending purge commands to said switch to purge the old and new address data from said shared look up table for read and write transactions that have been completed; and </claim-text>
<claim-text>a data path coupling said switch to said client and storage devices and to said storage manager. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A packet or frame switched network including one or more client devices and one or more storage devices, comprising: 
<claim-text>a data path coupled to said client devices and said storage devices; </claim-text>
<claim-text>a storage manager coupled to said data path; </claim-text>
<claim-text>a switch having conventional routing circuitry and including: 
<claim-text>one or more ports in said switch which contain redirection circuitry to receive relabelling and redirection commands from a storage manager and to store the redirection address data containing old address data and new address data contained therein in at least one look up table and to receive incoming data and transfer ready packets or frames and comparing the address data therein to the old address data in said look up table and to compare packet or frame type information included in a header of said packet or frame, and, if there is a match to any of the old address data in said look up table and the type information matches the types of packets or frames that are to be redirected, functioning to substitute at least the new address data from said look up table from the entry which includes old address data that matched the address data in the incoming packet or frame and pass the packet or frame to said conventional routing circuitry and performing conventional processing to route all other packets or frames to said conventional routing circuitry; and </claim-text>
<claim-text>wherein said storage manger includes: </claim-text>
</claim-text>
<claim-text>means for receiving write and read requests from any of said one or more client devices identifying specific data to be read or written and for mapping said read and write requests to particular storage devices, and for sending corresponding read or write requests to said storage devices to get the transaction started, and for determining if the transaction is to be redirected, and, if not, for performing conventional processing to complete the transaction, but if said transaction is to be redirected, for analyzing said read and write requests to determine how many blocks of data are to be read or written, and, if the number of blocks is greater than a threshold, which can be fixed or programmable, for mapping the requested blocks to a storage device which stores the requested data and for generating and sending one or more redirection commands to said switch for storage in said at least one look up table maintained therein, said redirection commands containing old address data and new address data that will cause the redirection circuitry in the port that receives a data or transfer ready packet or frame to relabel said packet or frame with new address data that will cause said packet or frame to be routed by said conventional routing circuitry so as to bypass said storage manager but look like it came from said storage manager, and for monitoring status packets or frames to determine when a redirected transaction has been completed and sending purge commands to said switch to purge the old and new address data from said at least one look up table for read and write transactions that have been completed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A process of redirecting data frames or packets in a packet or frame switched network comprising the steps: 
<claim-text>receiving at a storage manager from a client computer one or more read requests; </claim-text>
<claim-text>receiving from a storage manager at a packet or frame switch at least one redirection command to redirect the data frames or packets of at least some of said read requests originated by a client device and storing said redirection commands; </claim-text>
<claim-text>transmitting corresponding read requests from said storage manager to one or more storage devices; </claim-text>
<claim-text>responding to said read requests by transmitting frames or packet containing the requested data addressed to said storage manager; and </claim-text>
<claim-text>in said switch, intercepting said frames or packets of data responding to read requests, and, if a redirection command is stored for a read transaction which certain packets or frames containing the requested data are a part of, changing the header of the frames or packets of said particular read transaction which contain the requested read data so as to reroute them through said switch so as to bypass said storage manager but relabeling the headers thereof such that the rerouted packets or frames appear to originate from said storage manager as a response to said read request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A process of redirecting data frames or packets in a packet or frame switched network, said process carried out in a switch and comprising the steps: 
<claim-text>receiving from a storage manager at a packet or frame switch redirection commands to redirect the data frames or packets which are responses to at least some of said read requests originated by a client device and storing said redirection commands; and </claim-text>
<claim-text>in said switch, intercepting frames or packets of read data responding to said at least some read requests, and, if a redirection command is stored for a read transaction which certain packets or frames containing the requested read data are a part of, changing the header of the frames or packets of said particular read transaction which contain the requested read data so as to reroute them through said switch so as to bypass said storage manager but relabeling the headers thereof such that the rerouted packets or frames appear to originate from said storage manager as a response to said read request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. A process for controlling redirection of data frames or packets in a packet or frame switched network, said process carried out in a storage manager and comprising the steps: 
<claim-text>receiving at a storage manager from a client computer one or more read requests; </claim-text>
<claim-text>composing and transmitting to a packet or frame switch redirection commands to redirect the data frames or packets of at least some of said read requests originated by a client device such that said switch relabels data frames for routing so as to bypass said storage manager in travelling to the client device which made the read request but make said relabelled data frame look like it came from said storage manager; </claim-text>
<claim-text>transmitting said read requests from said storage manager to one or more storage devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A process of redirecting data frames or packets in a packet or frame switched network, said process carried out in a switch and comprising the steps: 
<claim-text>receiving from a storage manager at a packet or frame switch redirection commands to redirect the data frames or packets which are responses to at least some of said read requests originated by a client device and storing said redirection commands; and </claim-text>
<claim-text>in said switch, intercepting frames or packets of read data responding to said at least some read requests, and, if a redirection command is stored for a read transaction which certain packets or frames containing the requested read data are a part of, changing the header of the frames or packets of said particular read transaction which contain the requested read data so as to reroute them through said switch so as to bypass said storage manager but relabeling the headers thereof such that the rerouted packets or frames have the Port_ID of the client that made the read request as the destination address and the Port_ID of the storage device as the source address and have the originator exchange ID originally assigned by said client; and </claim-text>
<claim-text>in said client, receiving said frames and mapping them to the original read requests sent to said storage manager. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A process of redirecting data frames or packets in a packet or frame switched network comprising the steps: 
<claim-text>receiving at a storage manager from a client computer a write request; </claim-text>
<claim-text>receiving from a storage manager at a packet or frame switch at least two redirection commands to redirect the data and transfer ready frames or packets of said write request and storing said redirection commands; </claim-text>
<claim-text>transmitting a corresponding write request from said storage manager to a storage device to get the transaction started; </claim-text>
<claim-text>at said storage device, responding to said write request by transmitting one or more transfer ready frames from said storage device when it is ready to receive at least some of the write data, said transfer ready frame(s) or packet(s) addressed to said storage manager; and </claim-text>
<claim-text>in said switch, intercepting said transfer ready frame(s) or packet(s) of data responding to write request, and, if a redirection command is stored for a write transaction which said transfer ready frame(s) or packet(s) are a part of, changing the header of the transfer ready frame(s) or packet(s) of said write transaction to be redirected and routing transfer ready frame(s) or packet(s) so as to reroute them through said switch so as to bypass said storage manager but so as to appear that transfer ready frame(s) or packet(s) originated from said storage manager; </claim-text>
<claim-text>at said client device, receiving transfer ready frame(s) or packet(s) and responding by sending one or more frames or packets of write data to said switch; </claim-text>
<claim-text>at said switch, receiving said one or more frames or packets of write data and if a redirection command is stored for a write transaction which said write data frame(s) or packet(s) are a part of, changing the header of the write data frame(s) or packet(s) of said write transaction to be redirected and routing said write data frame(s) or packet(s) so as to bypass said storage manager but so as to appear that write data frame(s) or packet(s) originated from said storage manager; and </claim-text>
<claim-text>continuing the process re-routing said transfer ready and write data frames until the entire write transaction is completed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A process of redirecting data frames or packets in a packet or frame switched network, said process carried out in a switch and comprising the steps: 
<claim-text>receiving from a storage manager at a packet or frame switch one or more redirection commands to redirect the data and transfer ready frames or packets which are part of a write transaction originated by a client device and storing said redirection commands; and </claim-text>
<claim-text>in said switch, intercepting write data and transfer ready frames or packets which are part of a write transaction to be redirected and, if one or more redirection commands have been stored for the write transaction of which said write data and transfer ready frames or packets are a part, changing the header of the write data and transfer ready frames or packets so as to reroute them through said switch so as to bypass said storage manager but so as to look like they came from said storage manager and so as to have the originator exchange ID originally assigned by said client to the write transaction; and </claim-text>
<claim-text>transmitting said write data and transfer ready frames or packets to said client or said storage device as appropriate. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A system comprising: 
<claim-text>a data path or paths; </claim-text>
<claim-text>one or more client devices coupled to said data path(s); </claim-text>
<claim-text>one or more storage devices coupled to said data path(s); </claim-text>
<claim-text>one or more switch means coupled to said data path(s) for receiving packets or frames and routing them appropriately according to header address information, and for receiving redirection commands and storing them in one or more lookup tables and for using address data in said redirection commands to redirect predetermined packets or frames, and for receiving purge commands and for using the data in said purge command to purge from said one or more lookup tables said redirection commands for read and/or write transactions that have been completed; and </claim-text>
<claim-text>storage manager means for receiving read and/or write requests from said one or more client devices and for determining by any means whether or not to redirect said read and/or write requests, and, if a read and/or write request is to be redirected, for generating and sending to said switch one or more redirection commands to cause predetermined packets or frames of said read and/or write transaction to be redirected, and for determining when a read and/or write transaction that has been redirected has been completed and for generating one or more purge commands pertaining to said read and/or write transactions that have been completed, and sending said purge commands to said switch to cause it to purge the redirection commands of completed transactions, and, if a read or write transaction is not to be redirected, for processing it conventionally. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A switch for a packet switched or frame switched network, said switch having conventional routing circuitry, said network having client devices and storage devices and a storage manager that decides to redirect read and/or write transactions on any basis so as to virtualize said storage devices, said switch comprising: 
<claim-text>one or more ports which are structured to operate to receive one or more redirection commands from said storage manager or another switch in said network coupled to said storage manager containing old address data and new address data, said ports containing circuitry to store said old address data and new address data of said one or more redirection commands in one or more look up tables, said switch containing circuitry functioning to compare packet or frame type information included in a header of at least some packets or frames arriving at a port coupled to a client device or a storage device to determine if the packet or frame is of a type which is to be relabelled and redirected, and, if the packet or frame is of a type to be relabelled and redirected, comparing at least some of the old address data therein to the old address data entries for one or more redirection commands stored in one or more of said look up tables, and if there is a match to any of the old address data of said one or more redirection commands, relabelling said packet or frame by substituting the corresponding new address data from said matching redirection command(s) for said old address data in said packet or frame header, said new address data being such as to cause said relabelled packet or frame to be routed so as to bypass said storage manager but to look like it came from said storage manager, and then passing said relabelled packet or frame to said conventional routing circuitry for forwarding to the destination identified in said new address data, each port further comprising circuitry to recognize incoming status frames indicating that a particular read or write transaction has been completed and to respond thereto by automatically purging from one or more lookup tables one or more redirection commands that pertain to the completed transaction of which said status frame is a part and route said status frame to a port of said switch coupled to a storage manager, and wherein the sequence in which the type of incoming packet is determined and the old address data lookup is performed is not critical.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002503A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002503A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002503A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002503A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002503A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002503A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002503A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002503A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002503A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002503A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002503A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002503A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002503A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002503A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002503A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002503A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002503A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002503A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002503A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002503A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002503A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
