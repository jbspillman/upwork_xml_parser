<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001892A1-20030102-P00001.TIF SYSTEM "US20030001892A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00002.TIF SYSTEM "US20030001892A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00003.TIF SYSTEM "US20030001892A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00004.TIF SYSTEM "US20030001892A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00005.TIF SYSTEM "US20030001892A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00006.TIF SYSTEM "US20030001892A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-P00007.TIF SYSTEM "US20030001892A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00000.TIF SYSTEM "US20030001892A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00001.TIF SYSTEM "US20030001892A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00002.TIF SYSTEM "US20030001892A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00003.TIF SYSTEM "US20030001892A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00004.TIF SYSTEM "US20030001892A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00005.TIF SYSTEM "US20030001892A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00006.TIF SYSTEM "US20030001892A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00007.TIF SYSTEM "US20030001892A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001892A1-20030102-D00008.TIF SYSTEM "US20030001892A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001892</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09882172</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010614</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>762000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Property editor graphical user interface apparatus, method and computer program product</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>John</given-name>
<middle-name>Mark</middle-name>
<family-name>Hartel</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>Conrad</middle-name>
<family-name>Sanchez</family-name>
</name>
<residence>
<residence-us>
<city>Pflugerville</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Karalee</given-name>
<middle-name>Brown</middle-name>
<family-name>LeBlanc</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee, Carstens</name-1>
<name-2>Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus, method and computer program product for selecting and displaying graphical user interfaces for editing properties are provided. With the apparatus, method and computer program product, metadata associated with a property is analyzed to determine a type of editor associated with the property. This determination may include identifying one or more PropertyEditor Interface methods invoked by the property editor. Based on the type of editor associated with the property, one of a number of predetermined graphical user interfaces is selected. The selected graphical user interface is provided to a user who may use the graphical user interface to thereby edit the property. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention is directed to an improved computing device. More specifically, the present invention is directed to a property editor graphical user interface apparatus, method and computer program product. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In Java, for example, when a programmer is building a property, i.e. a data type, the programmer must also provide an editor for editing that property. The editor may be an editor that makes use of established editing methods supplied by Java or may be, for example, a custom editor having custom methods designated by the programmer. Thus, if a programmer creates three new properties, the programmer must also create three new property editors. For example, if the programmer creates a percentage property, a floating point number property, and a string property, the programmer must generate a property editor having a different graphical user interface for each of these different types of properties. As can be seen, as the number of properties generated increases, the time necessary to create these editors becomes burdensome. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In addition, because there is no standard for providing these property editors, each programmer is free to create his or her own property editor without regard to how another programmer might create the same property editor. That is, one programmer may create a first property editor for a property, the first property editor having a first type of graphical user interface, while a second programmer may create a second property editor for the same or a similar property having a different type of graphical user interface. Because of this, programmers must become accustom to a wide variety of property editors rather than there being a uniform look and feel to the property editors. Thus, the present state of the art does not encourage reuse of property editors and does not provide any standard by which programmers are assured that their property editors may be used by other programmers. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Therefore, it would be beneficial to have an apparatus and method that encourages code reuse with regard to property editors and forces consistency between graphical user interfaces in property editors. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention provides an apparatus, method and computer program product for selecting and displaying graphical user interfaces for editing properties. With the present invention, a property editor of a property is analyzed to determine the methods associated with the property editor. Based on the methods associated with the property editor, one of a number of predetermined graphical user interfaces is selected. The selected graphical user interface is provided to a user, such as a programmer, who may use the graphical user interface to thereby edit the property. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an exemplary diagram illustrating a network data processing system in accordance with the present invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> is an exemplary diagram illustrating a server data processing device in accordance with the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> is an exemplary diagram illustrating a client data processing device in accordance with the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an exemplary diagram illustrating a Java Virtual Machine in accordance with the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is an exemplary diagram illustrating a graphical user interface according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4B and 4C</cross-reference> illustrate example implementations of the graphical user interface of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is an exemplary diagram illustrating a graphical user interface according to another embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5B and 5C</cross-reference> illustrate example implementations of the graphical user interface of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is an exemplary diagram illustrating a graphical user interface according to yet another embodiment of the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> illustrates an example implementation of the graphical user interface of <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>; and </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart outlining an exemplary operation of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The present invention provides a mechanism by which a graphical user interface is selected for use with a Java property editor based on the type of Java property editor that is to be used in editing a specified Java property. That is, the present invention determines what methods are associated with the Java property editor of a selected Java property to determine how to visually present a graphical user interface to allow editing of the property. The present invention may be implemented in a stand-alone computing device, a client device, a server device, or may be distributed between a client device and a server device. Moreover, the present invention may be implemented in conjunction with a Java Virtual Machine (JVM), a Java editor application or applet, or the like. As such, the following FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight> are intended to provide background as to the environment in which the present invention may be implemented. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> With reference now to the figures, and in particular with reference to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> pictorial representation of a distributed data processing system in which the present invention may be implemented is depicted. Distributed data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Distributed data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In the depicted example, a server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> also are connected to a network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. For purposes of this application, a network computer is any computer, coupled to a network, which receives a program or other application from another computer coupled to the network. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Distributed data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In the depicted example, distributed data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational, and other computer systems, that route data and messages. Of course, distributed data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as, for example, an Intranet or a local area network. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the processes of the present invention. The present invention may be implemented in the depicted distributed data processing system or modifications thereof as will be readily apparent to those of ordinary skill in the art. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 2A, a</cross-reference> block diagram of a data processing system which may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance to the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O Bus Bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O Bus Bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A modem <highlight><bold>218</bold></highlight> may be connected to PCI local bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, server <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> may vary. For example, other peripheral devices, such as optical disk drive and the like also may be used in addition or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> may be, for example, an IBM RISC/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y. running the Advanced Interactive Executive (AIX) operating system. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 2B, a</cross-reference> block diagram of a data processing system in which the present invention may be implemented is illustrated. Data processing system <highlight><bold>250</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>250</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Micro Channel and ISA may be used. Processor <highlight><bold>252</bold></highlight> and main memory <highlight><bold>254</bold></highlight> are connected to PCI local bus <highlight><bold>256</bold></highlight> through PCI Bridge <highlight><bold>258</bold></highlight>. PCI Bridge <highlight><bold>258</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>252</bold></highlight>. Additional connections to PCI local bus <highlight><bold>256</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>260</bold></highlight>, SCSI host bus adapter <highlight><bold>262</bold></highlight>, and expansion bus interface <highlight><bold>264</bold></highlight> are connected to PCI local bus <highlight><bold>256</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>266</bold></highlight>, graphics adapter <highlight><bold>268</bold></highlight>, and audio/video adapter (A/V) <highlight><bold>269</bold></highlight> are connected to PCI local bus <highlight><bold>266</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>264</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>270</bold></highlight>, modem <highlight><bold>272</bold></highlight>, and additional memory <highlight><bold>274</bold></highlight>. SCSI host bus adapter <highlight><bold>262</bold></highlight> provides a connection for hard disk drive <highlight><bold>276</bold></highlight>, tape drive <highlight><bold>278</bold></highlight>, and CD-ROM <highlight><bold>280</bold></highlight> in the depicted example. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> An operating system runs on processor <highlight><bold>252</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>250</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>. The operating system may be a commercially available operating system such as OS/2, which is available from International Business Machines Corporation. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> An object oriented programming system such as Java may run in conjunction with the operating system and may provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>250</bold></highlight>. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>276</bold></highlight> and may be loaded into main memory <highlight><bold>254</bold></highlight> for execution by processor <highlight><bold>252</bold></highlight>. Hard disk drives are often absent and memory is constrained when data processing system <highlight><bold>250</bold></highlight> is used as a network client. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> may vary depending on the implementation. For example, other peripheral devices, such as optical disk drives and the like may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>. The depicted example is not meant to imply architectural limitations with respect to the present invention. For example, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The present invention operates in a Java run-time environment. For example, the present invention may operate in conjunction with a Java Virtual Machine (JVM) yet within the boundaries of a JVM as defined by Java standard specifications. In order to provide a context for the present invention with regard to an exemplary interpretive environment, portions of the operation of a JVM according to Java specifications are herein described. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrates the relationship of software components operating within a computer system that may implement the present invention. Java-based system <highlight><bold>300</bold></highlight> contains platform specific operating system <highlight><bold>302</bold></highlight> that provides hardware and system support to software executing on a specific hardware platform. JVM <highlight><bold>304</bold></highlight> is one software application that may execute in conjunction with the operating system. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Alternatively, JVM <highlight><bold>304</bold></highlight> may be imbedded inside a Java enabled browser application such as Microsoft Internet Explorer&trade; or Netscape Communicator&trade;. JVM <highlight><bold>304</bold></highlight> provides a Java run-time environment with the ability to execute Java application or applet <highlight><bold>306</bold></highlight>, which is a program, servlet, or software component written in the Java programming language. The computer system in which JVM <highlight><bold>304</bold></highlight> operates may be similar to data processing system <highlight><bold>200</bold></highlight> or computer <highlight><bold>100</bold></highlight> described above. However, JVM <highlight><bold>304</bold></highlight> may be implemented in dedicated hardware on a so-called Java chip, Java-on-silicon, or Java processor with an embedded picoJava core. At the center of a Java run-time environment is the JVM, which supports all aspects of Java&apos;s environment, including its architecture, security features, mobility across networks, and platform independence. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The JVM is a virtual computer, i.e. a computer that is specified abstractly. The specification defines certain features that every JVM must implement, with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example, all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for mainframe computers and PDAs. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM, which is itself a piece of software running on the processor. The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner, Java is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures. To enable a Java application to execute on different types of data processing systems, a compiler typically generates an architecture-neutral file format&mdash;the compiled code is executable on many processors, given the presence of the Java run-time system. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The Java compiler generates bytecode instructions that are nonspecific to a particular computer architecture. A bytecode is a machine independent code generated by the Java compiler and executed by a Java interpreter. A Java interpreter is part of the JVM that alternately decodes and interprets a bytecode or bytecodes. These bytecode instructions are designed to be easy to interpret on any computer and easily translated on the fly into native machine code. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> A JVM must load class files and execute the bytecodes within them. The JVM contains a class loader, which loads class files from an application and the class files from the Java application programming interfaces (APIs) which are needed by the application. The execution engine that executes the bytecodes may vary across platforms and implementations. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When an application is executed on a JVM that is implemented in software on a platform-specific operating system, a Java application may interact with the host operating system by invoking native methods. A Java method is written in the Java language, compiled to bytecodes, and stored in class files. A native method is written in some other language and compiled to the native machine code of a particular processor. Native methods are stored in a dynamically linked library whose exact form is platform specific. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> As mentioned above, the present invention is directed to a mechanism for determine the type of graphical user interface (GUI) to be used with a Java property editor to edit a Java property. A &ldquo;property&rdquo; as the term is used herein, refers to anything that can be represented by a Java class, i.e. a data type. Examples of properties include text color, background color, text string, windspeed, percentage, computer operating system, and the like. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Each property has an associated property editor defined by a programmer using one or more methods for displaying and updating property values. These methods may be custom methods created by the programmer or may be methods defined in the Java PropertyEditor interface. The Java PropertyEditor interface defines a plurality of methods that may be used and combined to generate property editors. A table of the methods is provided as Table 1 below. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A Java PropertyEditorManager further defines a plurality of default property editors for various types of properties, such as integer, string, and the like. However, not every property has an associated default property editor. Thus, a user may define a custom property editor for editing a property using custom methods created by the programmer and/or methods provided by the Java PropertyEditor interface. The PropertyEditor Interface and PropertyEditorManager are described in <highlight><italic>Using Java </italic></highlight>1.1, Third Edition, Que Corporation, 1997, pages 824-829, which is hereby incorporated by reference. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> With known systems, in order for a user, such as a programmer or the like, to edit a property, the user either designates the property editor that the user wishes to invoke or has a PropertyEditorManager determine the default property editor to invoke. The PropertyEditorManager identifies property editors for properties by performing a string comparison on property editors that are registered with the PropertyEditorManager. That is, a property may have the name Color.class. The corresponding property editor would have the name ColorEditor.class. Thus, by performing a string comparison on the term &ldquo;color&rdquo; the correct property editor for the property may be identified. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The present invention provides a standardized graphical user interface (GUI) selection mechanism. The standardized GUI selection mechanism uses the PropertyEditorManager to identify the property editor associated with a selected property. Once the property editor is identified, the property editor is examined to determine which methods in the PropertyEditor Interface are utilized by the property editor. Based on the PropertyEditor Interface methods used by the property editor, one of a plurality of predefined standardized GUIs is selected that can best be used to provided an interface through which the user may edit the property.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Java PropertyEditor Interface Methods</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="126PT" align="left"/>
<colspec colname="2" colwidth="84PT" align="left"/>
<colspec colname="3" colwidth="49PT" align="left"/>
<tbody valign="top">
<row>
<entry>Method</entry>
<entry>Description</entry>
<entry>Data Type</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>AddPropertyChangeListner(listener)</entry>
<entry>Register a listener for</entry>
<entry>void</entry>
</row>
<row>
<entry></entry>
<entry>the PropertyChange</entry>
</row>
<row>
<entry></entry>
<entry>event.</entry>
</row>
<row>
<entry>getAsText( )</entry>
<entry>Gets the property value</entry>
<entry>string</entry>
</row>
<row>
<entry></entry>
<entry>as text.</entry>
</row>
<row>
<entry>getCustomEditor( )</entry>
<entry>A PropertyEditor may</entry>
<entry>component</entry>
</row>
<row>
<entry></entry>
<entry>choose to make available</entry>
</row>
<row>
<entry></entry>
<entry>a full customer</entry>
</row>
<row>
<entry></entry>
<entry>Component that edits its</entry>
</row>
<row>
<entry></entry>
<entry>property value.</entry>
</row>
<row>
<entry>getJavaInitializationString( )</entry>
<entry>This method is intended</entry>
<entry>string</entry>
</row>
<row>
<entry></entry>
<entry>for use when generating</entry>
</row>
<row>
<entry></entry>
<entry>Java code to set the</entry>
</row>
<row>
<entry></entry>
<entry>value of the property.</entry>
</row>
<row>
<entry>getTags( )</entry>
<entry>If the property value</entry>
<entry>string&lsqb; &rsqb;</entry>
</row>
<row>
<entry></entry>
<entry>must be one of a set of</entry>
</row>
<row>
<entry></entry>
<entry>known tagged values,</entry>
</row>
<row>
<entry></entry>
<entry>them this method should</entry>
</row>
<row>
<entry></entry>
<entry>return an array of the</entry>
</row>
<row>
<entry></entry>
<entry>tags.</entry>
</row>
<row>
<entry>getValue( )</entry>
<entry>Gets the property value.</entry>
<entry>Object</entry>
</row>
<row>
<entry>isPaintable( )</entry>
<entry>Determines whether this</entry>
<entry>boolean</entry>
</row>
<row>
<entry></entry>
<entry>property editor is</entry>
</row>
<row>
<entry></entry>
<entry>paintable.</entry>
</row>
<row>
<entry>paingValue(gfx, box)</entry>
<entry>Paint a representation</entry>
<entry>void</entry>
</row>
<row>
<entry></entry>
<entry>of the value into a</entry>
</row>
<row>
<entry></entry>
<entry>given area of screen</entry>
</row>
<row>
<entry></entry>
<entry>real estate.</entry>
</row>
<row>
<entry>removePropertyChangeListener(listener)</entry>
<entry>Remove a listener for</entry>
<entry>void</entry>
</row>
<row>
<entry></entry>
<entry>the PropertyChange</entry>
</row>
<row>
<entry></entry>
<entry>event.</entry>
</row>
<row>
<entry>setAsText( )</entry>
<entry>Set the property value</entry>
<entry>void</entry>
</row>
<row>
<entry></entry>
<entry>by parsing a given</entry>
</row>
<row>
<entry></entry>
<entry>string.</entry>
</row>
<row>
<entry>setValue(Object value)</entry>
<entry>Set (or change) the</entry>
<entry>void</entry>
</row>
<row>
<entry></entry>
<entry>object that is to be</entry>
</row>
<row>
<entry></entry>
<entry>edited.</entry>
</row>
<row>
<entry>supportsCustomEditor( )</entry>
<entry>Determines whether this</entry>
<entry>boolean</entry>
</row>
<row>
<entry></entry>
<entry>property editor supports</entry>
</row>
<row>
<entry></entry>
<entry>a customer editor.</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Thus, with the present invention, the same standardized GUI selection mechanism of the present invention is invoked for every property. Thus, the user need not be familiar with which property editor or the particular graphical user interface for each of the various property editors. In this way, a single &ldquo;editor&rdquo; is invoked yet a plurality of different GUIs may be provided. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> With the present invention, when a user selects a property that the user wishes to edit, using an interface such as a keyboard, computer mouse, or other pointing device, for example, and selects the standardized GUI selection mechanism of the present invention either before or after selection of the property, the present invention is invoked. Upon receiving the selection of the standardized GUI selection mechanism and the property, the standardized GUI selection mechanism invokes the PropertyEditorManager to determine the property editor associated with the selected property. Once the property editor is identified using the PropertyEditorManager, the standardized GUI selection mechanism examines the methods used by the property editor. Based on the types of methods used by the property editor, one of a plurality of predetermined GUIs is selected for presentation to the user. The selected GUI is the output to a display device using the fields and values identified by the property editor. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is an exemplary diagram of a first GUI provided by the present invention for editing a first type of property. When the present invention examines the methods of the selected property editor, if the standardized GUI selection mechanism of the present invention determines that only the getAsText and setAsText methods of the PropertyEditor Interface (see Table 1 above) are implemented by the default property editor for the selected property, the text field entry GUI <highlight><bold>400</bold></highlight> is presented to the user. This is because the property editor of the selected property is only able to store and retrieve text values for the property. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The text field entry GUI <highlight><bold>400</bold></highlight> includes a text field entry area <highlight><bold>410</bold></highlight>, a cursor <highlight><bold>420</bold></highlight>, and an entry error indicator <highlight><bold>430</bold></highlight>. The entry error indicator <highlight><bold>430</bold></highlight> is only visible when there is an entry error in the text field entry area <highlight><bold>410</bold></highlight>. Using the text field entry GUI <highlight><bold>400</bold></highlight>, the user may type a text string and edit a text string using the cursor <highlight><bold>420</bold></highlight> in the text field entry area <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Entries in the text field entry area <highlight><bold>410</bold></highlight> are set as the value of the property using the setAsText method. If during entry of the text string an invalid entry is identified, the entry error indicator <highlight><bold>430</bold></highlight> will become visible thereby notifying the user of an invalid entry. An invalid entry is identified by, for example, the setAsText method of the property editor throwing an IllegalArgumentException when the setAsText method attempts to set the new value as the value for the property. The present invention receives and uses this exception as the instigator for displaying the entry error indicator <highlight><bold>430</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> illustrates a valid entry in the text field entry area <highlight><bold>410</bold></highlight>. The particular example shown in <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> is of a property &ldquo;Process Count&rdquo; which has a value of integer data type. In the example shown, in addition to the elements <highlight><bold>410</bold></highlight>-<highlight><bold>430</bold></highlight>, a property name <highlight><bold>440</bold></highlight> may also be displayed for informing the user of the property that is being edited. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4C</cross-reference> illustrates an invalid entry in the text field entry area <highlight><bold>410</bold></highlight> for a particular property. Again the property is &ldquo;Process Count&rdquo; and has a value of integer data type. In the example shown in <cross-reference target="DRAWINGS">FIG. 4C, a</cross-reference> text string &ldquo;xxxx&rdquo; is entered rather than an integer number. Thus, the setAsText method of the property editor for the &ldquo;Process Count&rdquo; property throws an IllegalArgumentException indicating that the entry is invalid. As a result, the entry error indicator of the present invention is displayed to thereby inform the user of the invalid entry. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> If during examination of the methods used by the property editor the present invention determines that the getTags method of the PropertyEditor Interface is implemented, the property editor is determined to provide a fixed set of values that the property may have. As a result, the present invention displays a GUI as shown in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, this GUI includes a choice selection area popup <highlight><bold>510</bold></highlight> which is only visible when the popup virtual button <highlight><bold>530</bold></highlight> is selected. In addition, the GUI includes a current selection region <highlight><bold>520</bold></highlight> which displays the current selection from the choice selection area popup <highlight><bold>510</bold></highlight>. It should be noted that this GUI does not include an entry error indicator, such as error entry indicator <highlight><bold>430</bold></highlight>, because there is a predetermined set of possible values for the selected property and the user&apos;s selection of a value is limited to one value from this predetermined set. Thus, all possible values must be valid. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> illustrates the GUI of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> in which an OS Type is the property and the GUI provides a current selection of &ldquo;WinNT&rdquo; in the current selection region <highlight><bold>520</bold></highlight>. As with the GUI <highlight><bold>400</bold></highlight>, the property name may also be displayed in order to inform the user of the property being edited. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> When the user selects the popup button <highlight><bold>530</bold></highlight>, the choice selection area popup <highlight><bold>510</bold></highlight> is displayed providing the user with other possible values for the selected property. In the example shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>C, the other possible choices for OS Type are AIX, Win98 and Linux. The user may select one of these values using a pointing device, one or more keystrokes, or the like. By selecting a new value using the GUI of the present invention, the value for the selected property is reset to the new value using the setAsText method of the PropertyEditor Interface. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> If the present invention determines that the property editor makes use of the supportsCustomerEditor and getCustomerEditor methods of the PropertyEditor Interface, then the selected property editor must be a custom editor. As a result, a different GUI is displayed by the present invention, as shown in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, the GUI used for custom editors includes a text field entry area <highlight><bold>610</bold></highlight> and an entry error indicator <highlight><bold>620</bold></highlight> similar to those in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. In addition, the GUI includes a popup custom component area virtual button <highlight><bold>630</bold></highlight>. The popup custom component area virtual button <highlight><bold>630</bold></highlight>, when selected by a user, causes the custom component popup area <highlight><bold>640</bold></highlight> to be displayed. The text field entry area <highlight><bold>610</bold></highlight> operates in the same manner as that shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. Through the text field entry area <highlight><bold>610</bold></highlight>, a user may input a value for the selected property. If the entry in the text field entry area <highlight><bold>610</bold></highlight> is invalid, the entry error indicator <highlight><bold>620</bold></highlight> will be displayed to inform the user of the invalid entry. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Rather than directly inputting a value for the selected property using the text field entry area <highlight><bold>610</bold></highlight>, the user may make use of the custom editor generated for the selected property by selecting the popup custom component area virtual button <highlight><bold>630</bold></highlight>. In response to selection of the popup custom component area virtual button <highlight><bold>630</bold></highlight>, a custom editor is displayed in the custom component area <highlight><bold>640</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> illustrates an example custom editor being displayed in the custom component area <highlight><bold>640</bold></highlight>. In the particular example shown, the property being edited is CPU Usage. The user may edit the value for CPU Usage by using the custom editor, which in this case is a slider bar, to set a new value for the CPU Usage property. The new value for CPU Usage is also displayed in the text field entry area <highlight><bold>610</bold></highlight>. The user may operate the custom editor using any interface means, such as a pointing device, keyboard, or the like. Once the user has selected a new value, the new value is set as the value for the property using the setasText method or any other &ldquo;backdoor&rdquo; method provided by the programmer of the custom editor. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart outlining an exemplary operation of the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the operation starts with receiving a selection of a property (step <highlight><bold>710</bold></highlight>). The PropertyEditorManager is then invoked for determining the associated property editor for the selected property (step <highlight><bold>720</bold></highlight>). The property editor is then examined to determine the PropertyEditor Interface methods utilized by the property editor (step <highlight><bold>730</bold></highlight>). Based on the identified methods of the PropertyEditor Interface, a suitable graphical user interface for property editor is selected (step <highlight><bold>740</bold></highlight>). The selected graphical user interface is then output to the user (step <highlight><bold>750</bold></highlight>) who may use the interface to change the value of the selected property in the manner described above. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The following is a listing of pseudo-code for performing the functions of the present invention. While the preferred embodiment makes use of computer implemented instructions for performing the functions of the present invention, one of ordinary skill in the art will appreciate that the functions of the present invention may also be hard coded into hardware that may be used to implement the present invention. Also, a combination of a hardware and software approach may be utilized without departing from the spirit and scope of the present invention. Pseudo-code data flow (Procedures are flagged in italics.) 
<image file="US20030001892A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030001892A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030001892A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030001892A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030001892A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030001892A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030001892A1-20030102-P00007.TIF" id="EMI-00007"></image>
</paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Thus, the present invention provides a mechanism by which a single standardized GUI selection mechanism may be invoked for editing all types of properties. The standardized GUI selection mechanism of the present invention examines the methods used by a property editor of a selected property. Based on the types of methods invoked, the present invention provides one of a number of predetermined graphical user interfaces suited for editing of that type of property. Thus, the user need not have an a priori knowledge of each property&apos;s editor in order to edit the property. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> While the above examples of the preferred embodiments of the present invention illustrate specific examples of graphical user interfaces that are displayed based on information obtained from metadata of selected properties, the present invention is not limited to the particular graphical user interfaces described above. Rather, the present invention is applicable to provide any type of graphical user interface suitable for editing a selected property based on an analysis of metadata for the selected property. Modifications to the graphical user interfaces described above are intended to be within the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media such a floppy disc, a hard disk drive, a RAM, and CD-ROMs and transmission-type media such as digital and analog communications links. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of editing a property, comprising: 
<claim-text>identifying one or more abilities of a property editor; </claim-text>
<claim-text>selecting a graphical user interface based on the one or more abilities of the property editor; and </claim-text>
<claim-text>providing the graphical user interface for use in editing the property. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more abilities are identified by one or more methods invoked by the property editor. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the one or more methods invoked by the editor include one or more PropertyEditor Interface methods. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface includes a text field entry area. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface further includes an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the entry error indicator is only visible when an entry in the text field entry area is invalid. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more abilities include an ability to edit a property using tags, the graphical user interface includes at least one of a popup choice selection area virtual button and a current selection display field. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein if the popup choice selection area virtual button is selected, a choice selection area popup is presented. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface includes a popup custom component area virtual button. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface further includes at least one of a text entry field and an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the entry error indicator is only displayed when an invalid entry is entered in the text field entry area. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein a custom component area is presented in response to selection of the popup custom component area virtual button, and wherein the custom component area includes a custom editor for the property. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An apparatus for editing a property, comprising: 
<claim-text>means for identifying one or more abilities of a property editor; </claim-text>
<claim-text>means for selecting a graphical user interface based on the one or more abilities of the property editor; and </claim-text>
<claim-text>means for providing the graphical user interface for use in editing the property. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the means for identifying one or more abilities identifies the one or more abilities by one or more methods invoked by the property editor. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the one or more methods invoked by the editor include one or more PropertyEditor Interface methods. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface includes a text field entry area. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface further includes an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the entry error indicator is only visible when an entry in the text field entry area is invalid. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein if the one or more abilities include an ability to edit a property using tags, the graphical user interface includes at least one of a popup choice selection area virtual button and a current selection display field. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein if the popup choice selection area virtual button is selected, a choice selection area popup is presented. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface includes a popup custom component area virtual button. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface further includes at least one of a text entry field and an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the entry error indicator is only displayed when an invalid entry is entered in the text field entry area. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising means for presenting a custom component area in response to selection of the popup custom component area virtual button, wherein the custom component area includes a custom editor for the property. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A computer program product in a computer readable medium for editing a property, comprising: 
<claim-text>first instructions for identifying one or more abilities of a property editor; </claim-text>
<claim-text>second instructions for selecting a graphical user interface based on the one or more abilities of the property editor; and </claim-text>
<claim-text>third instructions for providing the graphical user interface for use in editing the property. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the first instructions for identifying one or more abilities includes instructions for identifying one or more methods invoked by the property editor. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein the one or more methods invoked by the editor include one or more PropertyEditor Interface methods. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface includes a text field entry area. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein if the one or more abilities include a text editing ability, the graphical user interface further includes an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the entry error indicator is only visible when an entry in the text field entry area is invalid. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein if the one or more abilities include an ability to edit a property using tags, the graphical user interface includes at least one of a popup choice selection area virtual button and a current selection display field. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein if the popup choice selection area virtual button is selected, a choice selection area popup is presented. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface includes a popup custom component area virtual button. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein if the one or more abilities includes an ability to edit the property using a custom editor interface, the graphical user interface further includes at least one of a text entry field and an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein the entry error indicator is only displayed when an invalid entry is entered in the text field entry area. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, further comprising fourth instructions for presenting a custom component area in response to selection of the popup custom component area virtual button, wherein the custom component area includes a custom editor for the property. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A method of editing a property, comprising: 
<claim-text>identifying one or more methods invoked by a property editor for the property; </claim-text>
<claim-text>selecting a graphical user interface based on the one or more methods invoked by the property editor; </claim-text>
<claim-text>providing the graphical user interface for use in editing the property. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more methods invoked by the editor include one or more PropertyEditor Interface methods. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more methods includes at least one of a getAsText method and a setAsText method, the graphical user interface includes a text field entry area and an entry error indicator. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more methods include a getTags method, the graphical user interface includes a popup choice selection area virtual button and a current selection display field. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if the one or more methods includes at least one of a supportsCustomEditor method and a getCustomEditor method, the graphical user interface includes a popup custom component area virtual button.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001892A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001892A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001892A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001892A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001892A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001892A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001892A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001892A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001892A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
