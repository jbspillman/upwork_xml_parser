<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005024A1-20030102-D00000.TIF SYSTEM "US20030005024A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00001.TIF SYSTEM "US20030005024A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00002.TIF SYSTEM "US20030005024A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00003.TIF SYSTEM "US20030005024A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00004.TIF SYSTEM "US20030005024A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00005.TIF SYSTEM "US20030005024A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00006.TIF SYSTEM "US20030005024A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005024A1-20030102-D00007.TIF SYSTEM "US20030005024A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005024</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09882845</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010615</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/46</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F009/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>102000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Apparatus and method for enhancing performance of a computer system</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Doug</given-name>
<family-name>Grumann</family-name>
</name>
<residence>
<residence-us>
<city>Citrus Heights</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>HEWLETT-PACKARD COMPANY</name-1>
<name-2>Intellectual Property Administration</name-2>
<address>
<address-1>P.O. Box 272400</address-1>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80527-2400</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Apparatus and method for enhancing performance of a computer system. The invention may comprise apparatus and methods for deriving relationships between system variables and the performance of the computer system, generating a number of rules based on the derived relationships, and adjusting at least one of the system variables based on the generated number of rules to enhance the performance of the computer system. Preferably, data is acquired for the system variables and the performance of said computer system by gathering the data over time, and logging the gathered data, wherein the relationships are derived based on the logged data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention generally pertains to enhancing the performance of a computer system and more particularly to adjusting system variables based on a number of rules to enhance the performance of the computer system. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> A variety of variables, and any changes thereto, affect the performance of individual and networked computer systems, including the various resources of each (e.g., the operating system, hardware, software applications, etc.). For example, a server may have multiple processors that can be allocated to different software applications according to prioritization of the workload. Or, for example, an operating system may be configured with larger or smaller disk caching buffers to efficiently balance various demands on memory allocation. Other examples may include system kernel parameters, disk bandwidth, process scheduling, application-specific parameters, etc. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Instrumentation exists that measures these variables and/or the performance of the computer system or various resources thereof. For example, instrumentation may measure the utilization of various resources (e.g., the central processing unit (CPU), memory, etc.), throughput, application health, response time, etc. This instrumentation is used by performance tools, and, albeit less often, by application software, to monitor the characteristics of the workload and the health of the services enabled by the applications running on the computer system. For example, the Application Response Measurement (ARM) standard may be used to instrument services to provide response time and throughput. An example of application-specific information may be the statistics on cache efficiency internal to a specific database. In addition, probes may simulate or generate service requests on a system, which may be measured to provide performance data. For example, Hewlett-Packard Company&apos;s (corporate headquarters, Palo Alto, Calif.) Vantage Point Internet Services makes use of such probes. However, the relationship between the system variables and the performance of the computer system is often indirect and non-deterministic. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In general, such performance tools are oriented towards obtaining performance metrics from the various instrumentation for display and report generation. Often these performance tools do not recommend any changes to the variables affecting the performance of the computer system. The system administrator must interpret these results to determine which variables, if any, can be reconfigured. For example, the performance tool may indicate to the administrator that the response time of a service has slowed beyond an acceptable threshold. In response, the administrator (or automated load balancer) may make changes to the CPU scheduling policy to favor the application providing the service. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Where these performance tools do make recommendations, the recommendations are generated from simple thresholds (e.g., provisioning a specific resource in response to a specific event). Even so, these recommendations are only based on current behavior, and are not based on a historical analysis. Other factors, and often more than one resource, may account for the slower response time. For example, the application may be accessing a storage device that is bottlenecked (i.e., at capacity with a large queue) because of paging activity by the operating system which may, in turn, have been caused by a bottleneck on physical memory allocation caused by another application allocating excessive memory. As such, changing the application CPU processing priority will not improve the response time of the service. Instead, changes to memory (partitioning) or storage (moving paging areas away from application data paths) are required to speed up response time. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Some workload management and load balancing tools, such as Hewlett-Packard&apos;s Workload Manager and WebQOS, are capable of adjusting system variables based on performance monitors. However the changes are coarse (single system resource level configuration such as processor allocation). Furthermore, the changes are not based on trends in historical data, and do not consider the affect of previous changes to these variables. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The inventor has devised an apparatus and method for enhancing the performance of a computer system. The invention uses a number of rules that are based on the relationship between system variables and the system performance to enhance the performance of the computer system. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The apparatus is preferably embodied in computer readable program code stored on computer readable storage media. The apparatus may comprise program code for deriving relationships between system variables and the performance of the computer system. Also preferably, the apparatus may comprise program code for generating a number of rules based on the derived relationships. An exemplary rule may take the form: &ldquo;IF PerfMetricX Increases, THEN Decrease SysVarY Proportionally&rdquo;. More complex rules may also be generated based on a combination of direct and indirect correlations. For example, rules may be based on data gathered over time or historical data, performance goals or benchmark results, etc. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In addition, the apparatus preferably comprises program code for adjusting at least one of the system variables based on the generated number of rules to enhance the performance of the computer system. For example, the adjustment may be to activate an additional processor for use by the server, or to change scheduling priorities, modify system parameters, etc. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The apparatus may also comprise program code for acquiring data for the system variables and the performance of the computer system. The program code for acquiring data may comprise: program code for gathering the data over time; and program code for logging the gathered data, wherein the program code for deriving relationships derives the relationships based on the logged data. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Program code may also be provided for iteratively deriving relationships between the system variables and the performance of the computer system, and iteratively generating a number of rules based on the derived relationships when an adjustment is made to at least one of the system variables. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> A method for enhancing the performance of the computer system is also disclosed. An embodiment of the method may comprise deriving relationships between system variables and the performance of the computer system; generating a number of rules based on the derived relationships; and adjusting at least one of the system variables based on the generated number of rules to enhance the performance of the computer system. In addition, the method may comprise acquiring data for the system variables and the performance of the computer system, wherein the acquired data is used for deriving the relationships. Acquiring data may comprise: gathering the data over time; and logging the gathered data, wherein the relationships are derived based on the logged data. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The invention may automatically monitor both the system variables and the performance of the computer system and determine adjustment(s) to the system variables to enhance the performance of the computer system. That is, the performance and corresponding configuration may be monitored to recognize the significance and impact of events affecting the computer system so that performance-enhancing adjustments can be made thereto. Preferably, multiple system variables and system performance metrics are analyzed according to the teachings of the invention, and complex relationships therebetween are distilled into a number of rules. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Illustrative and presently preferred embodiments of the invention are illustrated in the drawings, in which: </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high level diagram illustrating system variables that affect the performance of a computer system; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a high-level diagram illustrating the system variables for various applications of the computer system that affect the performance thereof; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a high-level diagram illustrating the system variables for a subsystem of the computer system that affect the performance thereof; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a series of plots illustrating relationships between the system variables and the performance of the computer system; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a number of rules for optimizing the performance of the computer system; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow chart illustrating an embodiment of a method of the invention; and </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flow chart illustrating another embodiment of a method of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high-level view of a computer system <highlight><bold>100</bold></highlight> showing system variables <highlight><bold>110</bold></highlight> that affect performance of the computer system <highlight><bold>100</bold></highlight>. The system variables <highlight><bold>110</bold></highlight> may be derived from, for example, configuration <highlight><bold>111</bold></highlight>, workload <highlight><bold>112</bold></highlight>, and any number of other variables <highlight><bold>113</bold></highlight>. The system performance <highlight><bold>120</bold></highlight> may be determined based on a number of performance metrics <highlight><bold>121</bold></highlight>-<highlight><bold>123</bold></highlight>. The invention enhances the performance of the computer system <highlight><bold>100</bold></highlight>, generally, by deriving relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>, generating a number of (i.e., one or more) rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 5</cross-reference>) based thereon, and adjusting at least one of the system variables <highlight><bold>110</bold></highlight> based on one or more of the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Exemplary system variables <highlight><bold>110</bold></highlight> may include the status of the system resources (e.g., the number of active CPUS), system parameter values (e.g., the amount of physical memory allocated to disk caching), application-specific parameters (e.g. the size of database table structures), etc. It is understood that the system variables <highlight><bold>110</bold></highlight> include any variables that may affect the performance of the computer system <highlight><bold>100</bold></highlight> and is not limited to kernel tunables. For example, system variables <highlight><bold>110</bold></highlight> may also include a particular database schema indexing policy configuration parameter, or any other suitable variable. Exemplary performance metrics <highlight><bold>120</bold></highlight> may be measured in terms of service health, application response time, throughput, etc. Preferably, the performance metrics <highlight><bold>120</bold></highlight> are readily interpreted to have definable performance goals. The relationships may be derived based on an analysis of part or all of the above data and/or other data. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> It is understood that, as used herein, the language &ldquo;a number of&rdquo; is intended to include &ldquo;one or more&rdquo;. It is also understood that the computer system <highlight><bold>100</bold></highlight> may include any suitable components, such as, but not limited to, a processor (e.g., an Intel PENTIUM&reg; processor), a storage device or suitable computer readable storage medium (e.g., a hard disk drive, magnetic tape, zip drive, compact disc (CD), Read Only Memory (ROM), Random Access Memory (RAM), etc.), and other resources (e.g., keyboard, mouse, display, etc.), now available or later developed. In addition, the computer system <highlight><bold>100</bold></highlight> may comprise a network (e.g., a local area network (LAN), a wide area network (WAN)) and the resources thereof, an individual computer (e.g., a personal computer (PC), workstation, etc.), and/or one or more individual resources. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is another high-level diagram illustrating the system variables <highlight><bold>110</bold></highlight> for a number of applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> residing on the computer system <highlight><bold>100</bold></highlight> that affect the system performance <highlight><bold>120</bold></highlight>. For example, the system variables <highlight><bold>110</bold></highlight> may be the configuration, number of users, etc., of one or more of the applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight>. Likewise, the system performance <highlight><bold>120</bold></highlight> may be the response time of one or more of the applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is another high-level diagram illustrating the system variables <highlight><bold>110</bold></highlight> for a number of subsystems <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight> of the computer system <highlight><bold>100</bold></highlight> that affect the system performance <highlight><bold>120</bold></highlight>. For example, the system variables <highlight><bold>110</bold></highlight> may be the configuration of, and/or workload on, the CPU subsystem <highlight><bold>300</bold></highlight>, the memory subsystem <highlight><bold>301</bold></highlight>, the network subsystem <highlight><bold>302</bold></highlight>, the disk subsystem <highlight><bold>303</bold></highlight>, an operating system component <highlight><bold>304</bold></highlight>, etc. Likewise, the system performance <highlight><bold>120</bold></highlight> may include performance metrics <highlight><bold>121</bold></highlight>-<highlight><bold>123</bold></highlight> for one or more of the subsystems <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> It is understood that in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, there may be other system variables <highlight><bold>110</bold></highlight> other than those shown, corresponding to one or more of the other applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> and/or subsystems <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight>. In addition, data for the system variables <highlight><bold>110</bold></highlight> and the system performance need not be on a one-to-one corresponding basis. For example, the workload <highlight><bold>112</bold></highlight> on the CPU subsystem <highlight><bold>300</bold></highlight> and on the memory subsystem <highlight><bold>301</bold></highlight> may affect performance metrics <highlight><bold>121</bold></highlight> and <highlight><bold>122</bold></highlight>. Or for example, the data for the configuration <highlight><bold>111</bold></highlight> of the disk subsystem (<highlight><bold>303</bold></highlight>) and the response time (e.g., performance metric <highlight><bold>121</bold></highlight>) for Application 1 (<highlight><bold>200</bold></highlight>) may be acquired for analysis of the relationship therebetween. In addition, the illustrated system variables <highlight><bold>110</bold></highlight> may also correspond to additional applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> and/or subsystems <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight>, not shown. Indeed, the computer system <highlight><bold>100</bold></highlight> may comprise any number of applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight>, subsystem components <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight>, and/or other resources (not shown). </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Suitable program code may be provided for identifying the applications <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> and/or subsystem components <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight>, etc., on the computer system <highlight><bold>100</bold></highlight>, and any system variables <highlight><bold>110</bold></highlight> that may affect the performance of the computer system <highlight><bold>100</bold></highlight>. Preferably the computer system <highlight><bold>100</bold></highlight> is monitored (e.g., using suitable program code) and data is acquired for a combination of system variables <highlight><bold>110</bold></highlight> and system performance <highlight><bold>120</bold></highlight> according to the teachings of the invention. As such, the rules for enhancing the performance of the computer system <highlight><bold>100</bold></highlight> is based on a comprehensive set of parameters. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> It is understood that the data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> may be acquired by any suitable data acquisition component(s) (e.g., devices and/or program code). Likewise, program code may be provided for gathering additional data, such as acceptable range(s) for one or more of the system variables <highlight><bold>110</bold></highlight>, performance goals for the system performance <highlight><bold>120</bold></highlight>, etc. The program code may automatically monitor and obtain the data (e.g., from instrumentation points), the data may be manually specified (e.g., via a user interface), or the data may be acquired through a combination thereof. For example, a user or administrator may specify a desired response time (i.e., a performance goal) for an application <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The data acquisition component may be incorporated into the computer readable program code of the invention. Alternatively, the data acquisition component may be a separate software and/or hardware component and need not necessarily be integrated as part of the computer readable program code of the invention. For example, instrumentation points residing within the computer system <highlight><bold>100</bold></highlight> may feed the data acquisition component of the invention with the data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>. The instrumentation points may be associated with applications (e.g., <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>), a subsystem (e.g., <highlight><bold>300</bold></highlight>-<highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), and/or other components with the computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The data acquisition component may gather the data from various instrumentation points, directly from configuration files, a combination thereof, etc. The gathered data is preferably logged in one or more computer readable files. Examples of the data contained in such computer readable files may be as follows: </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> System Variables (<highlight><bold>110</bold></highlight>) at discrete point in time T1 </paragraph>
<paragraph id="P-0032" lvl="3"><number>&lsqb;0032&rsqb;</number> Application Parameter XYZ&equals;35 </paragraph>
<paragraph id="P-0033" lvl="3"><number>&lsqb;0033&rsqb;</number> Application Buffer Size&equals;2345 kB </paragraph>
<paragraph id="P-0034" lvl="3"><number>&lsqb;0034&rsqb;</number> Application Instance Count&equals;3 </paragraph>
<paragraph id="P-0035" lvl="3"><number>&lsqb;0035&rsqb;</number> Application Parameter JKL&equals;104 </paragraph>
<paragraph id="P-0036" lvl="3"><number>&lsqb;0036&rsqb;</number> . . . </paragraph>
<paragraph id="P-0037" lvl="3"><number>&lsqb;0037&rsqb;</number> Active Processor Count&equals;4 </paragraph>
<paragraph id="P-0038" lvl="3"><number>&lsqb;0038&rsqb;</number> Physical Memory Size&equals;2 GB </paragraph>
<paragraph id="P-0039" lvl="3"><number>&lsqb;0039&rsqb;</number> Network Daemon Count&equals;8 </paragraph>
<paragraph id="P-0040" lvl="3"><number>&lsqb;0040&rsqb;</number> Disk Raid Value&equals;5 </paragraph>
<paragraph id="P-0041" lvl="3"><number>&lsqb;0041&rsqb;</number> Buffer Cache Maximum&equals;1024 MB </paragraph>
<paragraph id="P-0042" lvl="3"><number>&lsqb;0042&rsqb;</number> . . . </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> System Performance (<highlight><bold>120</bold></highlight>) at discrete point in time T1 </paragraph>
<paragraph id="P-0044" lvl="3"><number>&lsqb;0044&rsqb;</number> App1 Response Time&equals;1.3 sec </paragraph>
<paragraph id="P-0045" lvl="3"><number>&lsqb;0045&rsqb;</number> App1 Throughput&equals;12 per sec </paragraph>
<paragraph id="P-0046" lvl="3"><number>&lsqb;0046&rsqb;</number> App2 Response Time&equals;0.05 sec </paragraph>
<paragraph id="P-0047" lvl="3"><number>&lsqb;0047&rsqb;</number> . . . </paragraph>
<paragraph id="P-0048" lvl="3"><number>&lsqb;0048&rsqb;</number> Average Service Time&equals;0.13 sec </paragraph>
<paragraph id="P-0049" lvl="3"><number>&lsqb;0049&rsqb;</number> User Count&equals;207 </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> It is understood that the data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> may be acquired simultaneously, or separately. For example, the data for the system performance <highlight><bold>120</bold></highlight> may be acquired in response to a change in one or more of the system variables <highlight><bold>110</bold></highlight>, or vice versa. Likewise, acquiring the data for the system variables <highlight><bold>110</bold></highlight> may be continuous or dynamic, at predetermined intervals, when an event is detected (i.e., declining response time), over time as a historical comparison, averaged, etc. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In addition, the data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> may be acquired using a network-centric approach, a system-centric approach, or a combination thereof. A network-centric approach may include acquiring data for the system variables <highlight><bold>110</bold></highlight> and system performance <highlight><bold>120</bold></highlight> of various resources on a network (e.g., routers, servers, server components, etc.). A system-centric approach may include acquiring the data for the system variables <highlight><bold>110</bold></highlight> and system performance <highlight><bold>120</bold></highlight> of the resources of an individual computer (e.g., a hard disk drive, a display device, etc.). </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a series of plots <highlight><bold>400</bold></highlight>, <highlight><bold>401</bold></highlight> and <highlight><bold>450</bold></highlight>, <highlight><bold>451</bold></highlight> of historical data <highlight><bold>420</bold></highlight>, <highlight><bold>421</bold></highlight>, and <highlight><bold>470</bold></highlight>, <highlight><bold>471</bold></highlight> illustrating the relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> that may be logged according to the teachings of the invention. The system variables <highlight><bold>110</bold></highlight> are shown on the y-axis <highlight><bold>415</bold></highlight> and <highlight><bold>416</bold></highlight> of plots <highlight><bold>400</bold></highlight> and <highlight><bold>401</bold></highlight> as a function of time along the x-axis <highlight><bold>410</bold></highlight>, <highlight><bold>411</bold></highlight>. The system performance <highlight><bold>120</bold></highlight> is shown on the y-axis <highlight><bold>465</bold></highlight> and <highlight><bold>466</bold></highlight> of plots <highlight><bold>450</bold></highlight> and <highlight><bold>451</bold></highlight>, respectively, as a function of time along the x-axis <highlight><bold>460</bold></highlight>, <highlight><bold>461</bold></highlight>. Performance goals <highlight><bold>480</bold></highlight> and <highlight><bold>481</bold></highlight> are shown for the performance (<highlight><bold>465</bold></highlight>, <highlight><bold>466</bold></highlight>) plots. For illustration, these may be considered thresholds which it is desirable to keep the value of the performance metrics at or below. An example of this would be for response-time goals (service level would be indicated by average response time at or below a threshold). The logged data shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates the effect various adjustments to one or more of the system variables <highlight><bold>110</bold></highlight> has on the system performance <highlight><bold>120</bold></highlight> (i.e., one or more performance metrics <highlight><bold>121</bold></highlight>, <highlight><bold>122</bold></highlight>, <highlight><bold>123</bold></highlight>). For example, between time T1 (<highlight><bold>430</bold></highlight>) and time T2 (<highlight><bold>431</bold></highlight>), SysVar1 (<highlight><bold>415</bold></highlight>) remained constant and SysVar2 (<highlight><bold>416</bold></highlight>) increased, resulting in no change to PerfMetric1 (<highlight><bold>465</bold></highlight>) and a decrease in PerfMetric2 (<highlight><bold>466</bold></highlight>). Also for example, between time T2 (<highlight><bold>431</bold></highlight>) and time T3 (<highlight><bold>432</bold></highlight>), SysVar1 (<highlight><bold>415</bold></highlight>) increased and SysVar2 (<highlight><bold>416</bold></highlight>) remained constant, resulting in a decrease in PerfMetric1 (<highlight><bold>465</bold></highlight>) and no change to PerfMetric2 (<highlight><bold>466</bold></highlight>). Also for example, between time T3 (<highlight><bold>432</bold></highlight>) and time T4 (<highlight><bold>433</bold></highlight>), SysVar1 (<highlight><bold>415</bold></highlight>) remained constant and SysVar2 (<highlight><bold>416</bold></highlight>) decreased, resulting in no change to both PerfMetric1 (<highlight><bold>465</bold></highlight>) and PerfMetric2 (<highlight><bold>466</bold></highlight>). In addition, the historical data shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates that PerfMetric1 (<highlight><bold>465</bold></highlight>) moved under the performance goal <highlight><bold>480</bold></highlight> at time T3 (<highlight><bold>432</bold></highlight>) and time T4 (<highlight><bold>433</bold></highlight>), and that PerfMetric2 (<highlight><bold>466</bold></highlight>) acheived the performance goal <highlight><bold>481</bold></highlight> by time T2 (<highlight><bold>431</bold></highlight>) shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Another, more detailed illustration, is described below with respect to the data illustrated in the following Tables 1-3. Two system variables <highlight><bold>110</bold></highlight> are defined in Table 1 for this example.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="70PT" align="center"/>
<colspec colname="2" colwidth="63PT" align="center"/>
<colspec colname="3" colwidth="84PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="3" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>System Variable (110)</entry>
<entry>Definition</entry>
<entry>Range</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>SysVar1</entry>
<entry>Buffer Cache Size</entry>
<entry>10 MB to 500 MB</entry>
</row>
<row>
<entry>SysVar2</entry>
<entry>Database Table Size</entry>
<entry>1000 MB to 10000 MB</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0054" lvl="7"><number>&lsqb;0054&rsqb;</number> SysVar1 is defined as the buffer cache size (e.g., for the memory subsystem <highlight><bold>301</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>). SysVar1 has a range from 10 MB to 500 MB. SysVar2 is defined as the database table size (e.g., for an application <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> on the computer system <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). SysVar2 has a range from 1000 MB to 10000 MB. The range indicates the lower and/or upper limit in which the system variable <highlight><bold>110</bold></highlight> may be adjusted. Preferably, a recommended adjustment, discussed in more detail below, is within this range. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Two performance metrics <highlight><bold>120</bold></highlight> are defined in Table 2 for this example.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="63PT" align="center"/>
<colspec colname="2" colwidth="105PT" align="center"/>
<colspec colname="3" colwidth="49PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="3" align="center">TABLE 2</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Performance Metric</entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>(120)</entry>
<entry>Definition</entry>
<entry>Goal</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>PerfMetric1</entry>
<entry>Response Time For Application 1</entry>
<entry>&lt;1 second&ensp;</entry>
</row>
<row>
<entry>PerfMetric2</entry>
<entry>Response Time For Application 2</entry>
<entry>&lt;4 seconds</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0056" lvl="7"><number>&lsqb;0056&rsqb;</number> PerfMetric1 is defined as the response time for Application 1 (e.g., an application <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). PerfMetric2 is defined as the response time for Application 2 (e.g., also an application <highlight><bold>200</bold></highlight>-<highlight><bold>202</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). These performance metrics <highlight><bold>120</bold></highlight> also have corresponding performance goals of &lt;1 second and &lt;4 seconds, respectively. That is, under ideal operating conditions, Application 1 has a response time of less than 1 second, and Application 2 has a response time of less than 4 seconds. The performance goals may be user-defined, defined based on test data, defined by the developer, etc. Although the performance goal may not be achieved under normal operating conditions, the performance of the computer system <highlight><bold>100</bold></highlight> is enhanced by tending toward the performance goal. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Exemplary data acquired for each of the system variables <highlight><bold>110</bold></highlight> and performance metrics <highlight><bold>120</bold></highlight> is provided in Table 3 at seven separate times, T1-T7.  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="35PT" align="center"/>
<colspec colname="2" colwidth="35PT" align="center"/>
<colspec colname="3" colwidth="49PT" align="center"/>
<colspec colname="4" colwidth="42PT" align="center"/>
<colspec colname="5" colwidth="56PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="5" align="center">TABLE 3</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Time</entry>
<entry>SysVar1</entry>
<entry>SysVar2</entry>
<entry>PerfMetric1</entry>
<entry>PerfMetric2</entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>T1</entry>
<entry>100</entry>
<entry>1000</entry>
<entry>5.1</entry>
<entry>6.7</entry>
</row>
<row>
<entry>T2</entry>
<entry>200</entry>
<entry>1000</entry>
<entry>3.2</entry>
<entry>5.3</entry>
</row>
<row>
<entry>T3</entry>
<entry>500</entry>
<entry>1000</entry>
<entry>0.2</entry>
<entry>4.9</entry>
</row>
<row>
<entry>T4</entry>
<entry>500</entry>
<entry>2000</entry>
<entry>0.6</entry>
<entry>4.3</entry>
</row>
<row>
<entry>T5</entry>
<entry>500</entry>
<entry>4000</entry>
<entry>1.7</entry>
<entry>3.1</entry>
</row>
<row>
<entry>T6</entry>
<entry>500</entry>
<entry>8000</entry>
<entry>3.4</entry>
<entry>2.7</entry>
</row>
<row>
<entry>T7</entry>
<entry>500</entry>
<entry>10000&ensp;</entry>
<entry>7.7</entry>
<entry>1.9</entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0058" lvl="7"><number>&lsqb;0058&rsqb;</number> Preferably, the data is acquired by gathering the same over time and logging the gathered data, for example, in one or more files, such as described above. As such, the derivation of relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> may be based on a historical analysis. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In one embodiment, the analysis may be based on point-in-time data. That is, the analysis may be a comparison of the data for the performance metrics <highlight><bold>121</bold></highlight>-<highlight><bold>123</bold></highlight> with the performance goals at given times. Where the performance goals are nearest to being satisfied, the data for the system variables <highlight><bold>110</bold></highlight> at that point-in-time may be used to generate one or more rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight>. For example, at times T3 and T4, PerfMetric1 is nearest the performance goal of &lt;1 second, and at times T5, T6, and T7, PerfMetric2 is nearest the performance goal of &lt;4 seconds. Although there is no overlap where both the performance goal of PerfMetric1 and PerfMetric2 are both being satisfied, at time T4, the performance goal of PerfMetric1 is satisfied and the performance goal of PerfMetric2 is nearly satisfied (i.e., 4.3 seconds). Thus, a rule <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be based on the corresponding values of the system variables <highlight><bold>110</bold></highlight> at time T4. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Other embodiments may include acquiring additional data for further analysis, or modeling performance based on the already acquired data. For example, between times T4 and T5, SysVar2 was adjusted from 2000 MB to 4000 MB, and PerfMetric2 changed from 4.3 seconds (exceeding the performance goal) to 3.1 seconds (meeting the performance goal). The value of PerfMetric2 remained below the goal threshold as SysVar2 was increased further. Similarly, PerfMetric1&apos;s value was within the goal range at times T3 and T4, moving out of its performance goal range between T4 and T5. Therefore, additional data and/or modeling the existing data may indicate that holding SysVar1 to 500 MB and setting SysVar2 to a value between 2000 MB and 4000 MB (e.g., 3000 MB) and may bring both metrics of interest into compliance with the respective goals of each. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Preferably, the analysis is based on a combination of one or more various analysis. As such, the derivation of relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> is extensive, and hence extensive rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be generated for enhancing the performance of the computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> An exemplary analysis, wherein the relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> are derived, may be as follows, based on the acquired data shown in the above Tables 1-3. When SysVar1 is increased and SysVar2 is held constant at 1000 MB, both PerfMetric1 and PerfMetric2 improve (i.e., tend toward the respective performance goals). When SysVar2 is then increased while SysVar1 is held constant, PerfMetric1 deteriorates (i.e., tends away from the performance goal) while PerfMetric2 continues to improve. The relationships derived from this data would hold PerfMetric1 as strongly inversely proportional to values of SysVar1 and less strongly proportional to values of SysVar2. PerfMetric2 is inversely proportional to both SysVar1 and SysVar2. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> It is understood that suitable program code may be provided for analyzing the acquired data and deriving the relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>, such as those discussed above. Likewise, program code may also be provided for plotting, performing statistical, historical, or any other suitable analysis of the data. In addition, any statistical, historical, plot or graphical representation, or other analysis, including those with user input variables, may be used according to the teachings of the invention. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> It is also understood that the examples discussed above with respect to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and Tables 1-3 are separate examples and are not intended to correspond with one another. In addition, the data shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and the data shown in Tables 1-3 is merely illustrative of data that may be obtained and analyzed according to the teachings of the invention. The examples given above with respect to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and Tables 1-3 are not intended to limit the teachings of the invention. Furthermore, the data of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and Tables 1-3 is not to be construed as actual data for any particular computer system <highlight><bold>100</bold></highlight>, and was not measured as such. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> A number of rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be generated based on the analysis of the acquired data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>, and the derived relationships therebetween, such as those illustrated above. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a number of rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> for enhancing the performance of the computer system <highlight><bold>100</bold></highlight>. The rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be stored in a computer readable format (e.g., a database), and may comprise conditions <highlight><bold>510</bold></highlight>-<highlight><bold>512</bold></highlight> and corresponding recommended adjustments <highlight><bold>520</bold></highlight>-<highlight><bold>522</bold></highlight>. Hence, when the condition <highlight><bold>510</bold></highlight> is met, one or more of the system variables <highlight><bold>110</bold></highlight> may be adjusted based on the corresponding recommended adjustment <highlight><bold>520</bold></highlight> in the rule <highlight><bold>500</bold></highlight> to enhance the performance of the computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> As an example, based on the acquired data in Tables 1-3, the first system variable <highlight><bold>110</bold></highlight> has a range from 10 MB to 500 MB, and the second system variable <highlight><bold>110</bold></highlight> has a range from 1000 MB to 10000 MB. Therefore, any rules <highlight><bold>500</bold></highlight> must be within the respective ranges. The analysis of the historical data indicates that when SysVar1 is 500 MB, both PerfMetric1 and PerfMetric2 tend toward the respective performance goals when SysVar2 is between 2000 MB and 4000 MB. Therefore, exemplary rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight>, may comprise: </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> IF SysVar1&lt;&gt;500 MB, </paragraph>
<paragraph id="P-0068" lvl="3"><number>&lsqb;0068&rsqb;</number> THEN Set SysVar1&equals;500 MB. </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> IF (SysVar2&lt;2000 MB or SysVar2&gt;4000 MB), </paragraph>
<paragraph id="P-0070" lvl="3"><number>&lsqb;0070&rsqb;</number> THEN Set SysVar2&equals;3000 MB. </paragraph>
<paragraph id="P-0071" lvl="7"><number>&lsqb;0071&rsqb;</number> Other exemplary rules based on the analysis of the data in Tables 1-3 may include the following: </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> IF PerfMetric1&gt;Goal1 (<highlight><bold>1</bold></highlight>), </paragraph>
<paragraph id="P-0073" lvl="3"><number>&lsqb;0073&rsqb;</number> THEN Increase SysVar1 by Increment (<highlight><bold>50</bold></highlight>) limit Max1 (<highlight><bold>500</bold></highlight>) </paragraph>
<paragraph id="P-0074" lvl="3"><number>&lsqb;0074&rsqb;</number> AND Decrease SysVar2 by Increment (<highlight><bold>100</bold></highlight>) limit Min2 (<highlight><bold>1000</bold></highlight>). </paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> IF PerfMetric2&gt;Goal2 (<highlight><bold>4</bold></highlight>), </paragraph>
<paragraph id="P-0076" lvl="3"><number>&lsqb;0076&rsqb;</number> THEN Increase SysVar1 by Increment (<highlight><bold>50</bold></highlight>) limit Max1 (<highlight><bold>500</bold></highlight>) </paragraph>
<paragraph id="P-0077" lvl="3"><number>&lsqb;0077&rsqb;</number> AND Increase SysVar2 by Increment (<highlight><bold>100</bold></highlight>) limit Max2 (<highlight><bold>10000</bold></highlight>). </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> It is understood that the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> described above and shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> are merely illustrative of the invention. The rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be more complex and/or take other forms than those shown. For example, any number of rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be generated based on any number of system variables <highlight><bold>110</bold></highlight> and performance metrics <highlight><bold>121</bold></highlight>-<highlight><bold>123</bold></highlight> for the computer system <highlight><bold>100</bold></highlight>. Preferably, generic relationships are derived based on the analysis of the acquired data. For example, a generic relationship may be: </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> IF PerfMetricA increases, </paragraph>
<paragraph id="P-0080" lvl="3"><number>&lsqb;0080&rsqb;</number> THEN decrease SysVarB proportionally. </paragraph>
<paragraph id="P-0081" lvl="7"><number>&lsqb;0081&rsqb;</number> Such generic relationships may be readily derived based on more extensive data that may be acquired. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> In addition, the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may also include adjustments for an identified resource when a condition is no longer being met. For example, the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may include reducing the cache buffer size when the workload <highlight><bold>112</bold></highlight> drops below a predetermined threshold. As such, resources may be conserved, power consumption and operating costs may be reduced, etc. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart showing steps of one embodiment of a method of the invention. Generally, an embodiment of the method of the invention comprises an acquisition phase <highlight><bold>600</bold></highlight>, an analysis phase <highlight><bold>601</bold></highlight>, and a control phase <highlight><bold>602</bold></highlight>. More specifically, the acquisition phase <highlight><bold>600</bold></highlight> may comprise the steps of gathering data for the computer system <highlight><bold>100</bold></highlight> over time in step <highlight><bold>610</bold></highlight>, and logging the data in step <highlight><bold>620</bold></highlight>. The acquisition phase <highlight><bold>600</bold></highlight> may also comprise obtaining the existence of one or more system variables <highlight><bold>110</bold></highlight>, the range(s) for system variables <highlight><bold>110</bold></highlight>, performance goal(s), etc. Data gathering may be by directly measuring various parameters of one or more resources using suitable program code, obtaining the data from suitable instrumentation, or a combination thereof. The analysis phase <highlight><bold>601</bold></highlight> may comprise deriving relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>, in step <highlight><bold>630</bold></highlight>, based on the data acquired in the acquisition phase <highlight><bold>600</bold></highlight>. In addition, the analysis phase <highlight><bold>601</bold></highlight> may comprise generating a number of rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> in step <highlight><bold>640</bold></highlight> based on the relationships derived in step <highlight><bold>630</bold></highlight>. The rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may specify at least one adjustment <highlight><bold>520</bold></highlight>-<highlight><bold>522</bold></highlight> to be made to the computer system <highlight><bold>100</bold></highlight> when a condition <highlight><bold>510</bold></highlight>-<highlight><bold>512</bold></highlight> is met or approached. The adjustment is made during the control phase <highlight><bold>602</bold></highlight>, wherein the performance of the computer system <highlight><bold>100</bold></highlight> is optimized according to the rules in step <highlight><bold>650</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The adjustment is preferably implemented by notifying an administrator of the adjustment <highlight><bold>520</bold></highlight>-<highlight><bold>522</bold></highlight> in the rule <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight>. The administrator may manually make the adjustment to the computer system <highlight><bold>100</bold></highlight>. Alternatively, the administrator may grant approval for automatic adjustment of the system variable <highlight><bold>110</bold></highlight> in accordance with the rule <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight>. Alternatively, the adjustment may be made automatically. In yet another embodiment, the adjustment can be made automatically and the administrator can also be notified of the adjustment that has been made. As such, the administrator can accept the adjustment, override the adjustment, reconfigure the computer system <highlight><bold>100</bold></highlight>, review the adjustment for record-keeping purposes, etc. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Preferably, the method is iterative or recursive (e.g., <highlight><bold>605</bold></highlight>). That is, once one or more of the system variables <highlight><bold>110</bold></highlight> has been adjusted according to one or more of the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> in the control phase <highlight><bold>602</bold></highlight>, the invention comprises returning to the acquisition phase <highlight><bold>600</bold></highlight>. As such, additional data for the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight> may be acquired for analysis in phase <highlight><bold>601</bold></highlight>, to further enhance the performance of the computer system <highlight><bold>100</bold></highlight> during the control phase <highlight><bold>602</bold></highlight>. However, it is understood that the phases <highlight><bold>600</bold></highlight>-<highlight><bold>602</bold></highlight> need not be carried out in distinct blocks of time, and indeed, one or more phases <highlight><bold>600</bold></highlight>-<highlight><bold>602</bold></highlight> may continue simultaneously with one another. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart showing steps of another embodiment of a method of the invention. Again, generally the method of the invention comprises an acquisition phase <highlight><bold>600</bold></highlight>, an analysis phase <highlight><bold>601</bold></highlight>, and a control phase <highlight><bold>602</bold></highlight>. More specifically, the acquisition phase <highlight><bold>600</bold></highlight> may comprise the steps of gathering data for the computer system <highlight><bold>100</bold></highlight> over time in step <highlight><bold>610</bold></highlight>, and logging historical data in step <highlight><bold>625</bold></highlight>. The analysis phase <highlight><bold>601</bold></highlight> may comprise deriving relationships between the system variables <highlight><bold>110</bold></highlight> and the system performance <highlight><bold>120</bold></highlight>, in step <highlight><bold>630</bold></highlight>, based on the data acquired in the acquisition phase <highlight><bold>600</bold></highlight>. In addition, the analysis phase <highlight><bold>601</bold></highlight> may comprise generating a number of rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> in step <highlight><bold>640</bold></highlight> based on the relationships derived in step <highlight><bold>630</bold></highlight>. Also according to this embodiment, the rules <highlight><bold>500</bold></highlight>-<highlight><bold>502</bold></highlight> may be optimized for the various performance goals in combination with current values of the system variables <highlight><bold>110</bold></highlight> and used to recommend incremental changes to the system variables <highlight><bold>110</bold></highlight> in step <highlight><bold>645</bold></highlight>. The system variables are adjusted or modified according to the rules to improve or enhance performance of the computer system <highlight><bold>100</bold></highlight> during the control phase <highlight><bold>602</bold></highlight> in step <highlight><bold>655</bold></highlight>. Again, the method may be reiterated <highlight><bold>605</bold></highlight>, as needed. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> It is understood that the embodiments shown and described with respect to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and <cross-reference target="DRAWINGS">FIG. 7</cross-reference> are merely illustrative of the steps of a method of the invention, and are not intended to limit the teachings thereof. In another embodiment, the method may also comprise the step of determining an acceptable range for one or more of the system variables <highlight><bold>110</bold></highlight>. In yet another embodiment, the method may also comprise the step of testing one or more of the system variables <highlight><bold>110</bold></highlight> to determine the affect on the system performance <highlight><bold>120</bold></highlight>. Other steps are also contemplated as being within the scope of the invention. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> While illustrative and presently preferred embodiments of the invention have been described in detail herein, it is to be understood that the inventive concepts may be otherwise variously embodied and employed, and that the appended claims are intended to be construed to include such variations, except as limited by the prior art. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for enhancing performance of a computer system, comprising: 
<claim-text>deriving relationships between system variables and the performance of said computer system; </claim-text>
<claim-text>generating a number of rules based on said derived relationships; and </claim-text>
<claim-text>adjusting at least one of said system variables based on said generated number of rules to enhance the performance of said computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein generating said number of rules is based at least in part on a performance goal. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein generating said number of rules is based at least in part on current values of said system variables, and wherein said number of rules recommend incremental changes to said system variables. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the steps of: (a) deriving said relationships, (b) generating said number of rules, and (c) adjusting said at least one system variable, are iterative. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising acquiring data for said system variables and the performance of said computer system, wherein said acquired data is used for deriving said relationships. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein acquiring said data comprises: 
<claim-text>a) gathering said data over time; and </claim-text>
<claim-text>b) logging said gathered data, wherein said relationships are derived based on said logged data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein gathering said data is at discrete points in time. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein gathering said data is in response to an event on said computer system. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein acquiring said data comprises acquiring at least one of the following types of data: configuration data, workload data, and performance metric data. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising identifying a number of applications on said computer system having variables that affect the performance of said computer system. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising identifying a number of subsystem components on said computer system having variables that affect the performance of said computer system. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method for enhancing performance of a computer system, comprising: 
<claim-text>deriving a plurality of relationships between a plurality of system variables and the performance of said computer system; </claim-text>
<claim-text>generating a plurality of rules based on said plurality of derived relationships; and </claim-text>
<claim-text>adjusting at least one of said system variables based on said generated number of rules to enhance the performance of said computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method as in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the performance of said computer system is based on a plurality of performance metrics. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An apparatus for enhancing performance of a computer system, comprising: 
<claim-text>computer readable storage media; </claim-text>
<claim-text>computer readable program code stored on said computer readable storage media, comprising: 
<claim-text>a) program code for deriving relationships between system variables and the performance of said computer system; </claim-text>
<claim-text>b) program code for generating a number of rules based on said derived relationships; and </claim-text>
<claim-text>c) program code for adjusting at least one of said system variables based on said generated number of rules to enhance the performance of said computer system. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said number of rules are generated by said program code based at least in part on a performance goal. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising program code for iteratively deriving relationships between said system variables and the performance of said computer system, and iteratively generating a number of rules based on said derived relationships when an adjustment is made to said at least one system variable. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising program code for acquiring data for said system variables and the performance of said computer system. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein at least some of said data is acquired from a configuration file. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein at least some of said data is acquired by monitoring said computer system. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said program code for acquiring said data comprises: 
<claim-text>a) program code for gathering said data over time; </claim-text>
<claim-text>b) program code for logging said gathered data, wherein said program code for deriving derives said relationships based on said logged data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said program code for acquiring said data acquires at least one of the following types of data: 
<claim-text>configuration data, workload data, and performance metric data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising program code for identifying a number of applications on said computer system having variables that affect the performance of said computer system. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising program code for identifying a number of subsystem components of said computer system having variables that affect the performance of said computer system. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. An apparatus for enhancing performance of a computer system, comprising: 
<claim-text>means for deriving relationships between system variables and the performance of said computer system; </claim-text>
<claim-text>means for generating a number of rules based on said derived relationships; and </claim-text>
<claim-text>means for adjusting at least one of said system variables based on said generated number of rules to enhance the performance of said computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising means for acquiring data for said system variables and the performance of said system. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. An apparatus as in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said acquiring means comprises: 
<claim-text>a) means for gathering said data over time; and </claim-text>
<claim-text>b) means for logging said data, wherein said relationships are derived based on said logged data.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005024A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005024A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005024A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005024A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005024A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005024A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005024A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005024A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
