<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005275A1-20030102-D00000.TIF SYSTEM "US20030005275A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005275A1-20030102-D00001.TIF SYSTEM "US20030005275A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005275A1-20030102-D00002.TIF SYSTEM "US20030005275A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005275</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09883386</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010619</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/177</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>002000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Fault resilient booting for multiprocessor system using appliance server management</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Son</given-name>
<middle-name>H.</middle-name>
<family-name>Lam</family-name>
</name>
<residence>
<residence-us>
<city>Puyallup</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>LAW OFFICES</name-1>
<name-2>ANTONELLI, TERRY, STOUT &amp; KRAUS, LLP</name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A multiprocessor computer system implements fault resilient booting by using appliance server management. While previous systems have utilized fault resilient booting, it has required the use of a baseboard management controller chip. The present invention avoids the need for this chip by utilizing the appliance server management architecture. The testing of the processors and the determination of the bootstrap processor is controlled by the system I/O device utilizing a timer and a latch. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is directed to a system for booting a multiprocessor computer system. More particularly, the present invention is directed to a system for booting a multiprocessor computer system using an appliance server management driver. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The use of fault resilient booting is known in the art and for example is described in U.S. Pat. No. 5,790,850. As described therein and as shown in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> multiprocessor system includes a number of processors <highlight><bold>10</bold></highlight>-<highlight><bold>13</bold></highlight> each of which include a local advance programmable interrupt controller (APIC) <highlight><bold>14</bold></highlight>-<highlight><bold>17</bold></highlight>. The local APIC units are connected through an APIC <highlight><bold>19</bold></highlight> bus. An input/output APIC unit <highlight><bold>28</bold></highlight> is also connected to this bus. A processor bus <highlight><bold>20</bold></highlight> connects the processors and the memory. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In this system, when power is initially applied to the processors one of the processors is designated the bootstrap processor. One of the processors can be designated in the hardware for this function. The other processors are classified as application processors. Each of the processors undergoes a built in self test when power is initially applied. If the processor is faulty for any reason, it stores a status flag to indicate this. If the bootstrap processor is faulty, it is necessary to designate one of the application processors to handle the bootstrap function instead. U.S. Pat. No. 5,790,850 shows one method for doing this where application processors that have been tested to be good are successively examined. If all tests are passed, that application processor is designated as the bootstrap processor and that function is removed from the original bootstrap processor. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In systems of this type, the fault resilient booting is implemented in servers using the basic input output system (BIOS), the baseboard management controller (BMC) and other hardware to follow this procedure when the bootstrap processor fails. Most of this function is implemented in the baseboard management controller chip. However, the inclusion of this chip adds to the cost of the system. While this is not a problem for more expensive systems, in low cost servers, it is desirable to reduce the cost of the system.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The foregoing and a better understanding of the present invention will become apparent from the following detailed description of example embodiments and the claims when read in connection with the accompanying drawings, all forming a part of the disclosure of this invention. While the foregoing and following written and illustrated disclosure focuses on disclosing example embodiments of the invention, it should be clearly understood that the same is by way of illustration and example only and that the invention is not limited thereto. The spirit and scope of the present invention are limited only by the terms of the appended claims. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The following represents brief descriptions of the drawings, wherein: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an example background arrangement useful in gaining a more thorough understanding and appreciation of the present invention; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an example advantageous embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Before beginning a detailed description of the subject invention, mention of the following is in order. When appropriate, like reference numerals and characters may be used to designate identical, corresponding or similar components in differing figure drawings. Further, in the detailed description to follow, example sizes/models/values/ranges may be given, although the present invention is not limited to the same. With regard to description of any timing signals, the terms assertion and negation may be used in an intended generic sense. More particularly, such terms are used to avoid confusion when working with a mixture of &ldquo;active-low&rdquo; and &ldquo;active-high&rdquo; signals, and to represent the fact that the invention is not limited to the illustrated/described signals, but could be implemented with a total/partial reversal of any of the &ldquo;active-low&rdquo; and &ldquo;active-high&rdquo; signals by a simple change in logic. More specifically, the terms &ldquo;assert&rdquo; or &ldquo;assertion&rdquo; indicate that a signal is active independent of whether that level is represented by a high or low voltage, while the terms &ldquo;negate&rdquo; or &ldquo;negation&rdquo; indicate that a signal is inactive. As a final note, well known power/ground connections to ICs and other components may not be shown within the FIGS. for simplicity of illustration and discussion, and so as not to obscure the invention. Further, arrangements may be shown in block diagram form in order to avoid obscuring the invention, and also in view of the fact that specifics with respect to implementation of such block diagram arrangements are highly dependent upon the platform within which the present invention is to be implemented, i.e., such specifics should be well within purview of one skilled in the art. Where specific details (e.g., circuits, flowcharts) are set forth in order to describe example embodiments of the invention, it should be apparent to one skilled in the art that the invention can be practiced without, or with variation of, these specific details. Finally, it should be apparent that differing combinations of hard-wired circuitry and software instructions can be used to implement embodiments of the present invention, i.e., the present invention is not limited to any specific combination of hardware and software. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> As shown in U.S. Pat. No. 5,790,850, a fault resilient booting scheme involving a plurality of processors can be accomplished by successively examining each application processor if the original bootstrap processor fails. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows the overall arrangement of the processors and other major parts of such a system. Previously, the controls for the fault resilient booting process were stored in a baseboard management controller chip. The present invention avoids the necessity of having this chip by relying on an appliance server management arrangement so that the system can be provided at a lower cost. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The fault resilient booting processor includes at least three levels or parts that are controlled by timers at different stages of the basic input output system (BIOS) before the system is handed over to the operating system. The table below describes the different fault resilient booting levels and describes the time line by which they are executed.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="112PT" align="left"/>
<colspec colname="2" colwidth="77PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>Reset de-asserted</entry>
<entry>FRB-3 started</entry>
</row>
<row>
<entry></entry>
<entry>(BIST execution)</entry>
</row>
<row>
<entry></entry>
<entry>BIOS code execute</entry>
</row>
<row>
<entry></entry>
<entry>Check built in self test result</entry>
<entry>FRB-1</entry>
</row>
<row>
<entry></entry>
<entry>Power on self test start</entry>
<entry>FRB-2 started</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>FRB-3 reset</entry>
</row>
<row>
<entry></entry>
<entry>Power on self test exit</entry>
<entry>FRB-2 reset</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> This table describes the three levels of the fault resilient booting process which must be encountered before the system is handed over to the operating system for normal operations. The FRB-3 level refers to the portion of the process where a timer is started upon the power-up of the system or upon a hard reset. This timer must be stopped by BIOS. This requires the bootstrap processor to actually run BIOS code. If the timer is stopped this indicates that the bootstrap processor can actually run code and accordingly is not dead at this time. If the timer is not stopped, the bootstrap processor is disabled, the system is reset and another processor is assigned to become the bootstrap processor. When a new bootstrap processor is assigned, the APIC identification is changed so that the second processor is identified as the bootstrap processor. The BIOS running in the bootstrap processor is responsible for stopping the FRB-3 timer during a power on self test. This is accomplished by resetting the watchdog timer which is producing the timing signals. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The next level of the fault resilient booting, FRB-2, involves the use of the watchdog timer to backup the operation of the baseboard management controller during the power-on self test. BIOS sets a bit in the baseboard management controller to indicate that BIOS is in the FRB-2 phase. This bit is set after it is determined which processor is the bootstrap processor. BIOS then sets the FRB-2 bit, loads the watchdog timer with a new time-out interval and disables FRB-3. Using this process, there is no gap in the watchdog timer coverage between FRB-3 and FRB-2. If the FRB-2 phase is successful, BIOS disables the FRB-2 time-out prior to exiting the power on self test. The baseboard management controller provides commands for this purpose. This is generally done prior to initiating the option ROM scan. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> If the timer expires during the FRB-2 function, the baseboard management controller generates a FRB-2 time-out message and hard resets the system. BIOS then determines that the previous boot attempt failed FRB-2 and examines the FRB-2 time out flag. BIOS then issues a disable processor command in order to disable the CPU that had failed the FRB-2 test. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The FRB-1 level is implemented by BIOS. If the bootstrap processor has failed, BIOS records the events so they can be logged later and disables the processor by sending a command to the baseboard management controller. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> As can be seen in this description, the baseboard management controller is used to control this testing procedure using BIOS and the processors of the system. However, the inclusion of this chip causes additional cost for the system. It is desirable to eliminate this chip for less expensive systems. This can be accomplished with an appliance server management system. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The appliance server management system is an architecture utilizing arrangement of hardware, drivers, providers and software. This type of system can be implemented in a number of computers and includes a number of desirable features, including the ability to manage the system either locally or over the internet. It also allows the automatic alerting of an administrator when problems arise with the system. In regard to the present situation, it is possible to implement a fault resilient booting system using this management system. In doing so, it is possible to eliminate the baseboard management controller chip and instead use existing parts of the ASM system instead. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The following description helps to describe the difference in implementation using an ASM system rather than a BMC system. In the FRB-3 level the timer is in the BMC and is programmable or will assume a default time of ten seconds. This timer starts upon a power up or a hard reset. This timer must be stopped by BIOS by resetting the timer. If the timer expires, a signal is sent to the failed processor to indicate that it cannot act as the bootstrap processor and an internal message is generated indicating the failure. In this same level, the ASM system uses an on-board watchdog timer which is set to six seconds since BIOS operations are normally completed in less than five seconds. This timer is automatically started after the system resets. If the timer expires, it will set the CPU STOP Latch which sends a signal to disable the bootstrap processor. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In regard to the FRB-2 level, the BMC system uses the timer in the BMC while the ASM system uses a timer in the system I/O chip (SIO). In BMC, if the timer expires an event message is generated and the system is hard reset. BIOS then determines that the attempt has failed and sends a command to BMC to disable the failed processor. In ASM, when the timer expires, BIOS disables the bootstrap processor by setting a CPU STOP Latch by way of a general purpose I/O bit from the S1O chip. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the FRB-1 level, in BIOS checks a processor built in self test (BIST) result. If the bootstrap processor fails, BIOS will assign this function to another processor. In ASM, if a built-in self test failure occurs, BIOS takes its own steps to record the event so that it can be logged later. BIOS disables the processor by setting the CPU STOP Latch by way of a general purpose I/O bit from the SIO chip. The latch can only be reset by another signal from the SIO chip. If BIOS is unable to set the CPU STOP Latch then the FRB-3 timeout is allowed to occur. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows part of the hardware <highlight><bold>50</bold></highlight> utilized in the ASP system to control the fault resilient booting process. The system I/O chip (SIO) <highlight><bold>52</bold></highlight> provides many of the enabling signals for this process. Each of the outputs of this chip are labeled as general purpose I/O (GPIO) signals. This chip is programmed to follow the process and to provide the control signals based on the implementation described above. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The watchdog timer (WDT) <highlight><bold>54</bold></highlight> provides an output at six seconds so that this timer may be used for the FRB-3 test. When this signal is generated, the timer is considered to have expired and the signal is applied to OR gate <highlight><bold>56</bold></highlight> and then passed to the set input of CPU STOP Latch <highlight><bold>58</bold></highlight>. This latch is set by the occurrence of this signal and the signal is then sent to disable CPU <highlight><bold>60</bold></highlight> which is the initial bootstrap processor. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The WDT produces an output signal after six seconds, as discussed above. The start of this six second period occurs due to the arrival of GPIO<highlight><bold>4</bold></highlight> from the SIO or system reset which is applied to OR gate <highlight><bold>53</bold></highlight> which resets the timer. The SIO generates the signal due to the power being turned on or to a reset signal. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> When the six second signal is sent to OR gate <highlight><bold>56</bold></highlight>, it is also necessary to reset the system so that a second processor can be considered for the bootstrap operation. Accordingly, the six second signal also is branched off to OR gate <highlight><bold>55</bold></highlight> to cause a system reset. Other reset signals can be applied to OR gate <highlight><bold>55</bold></highlight> also. A second input (GPIO <highlight><bold>4</bold></highlight>) to OR gate <highlight><bold>53</bold></highlight> can also reset the timer. The CPU <highlight><bold>62</bold></highlight> is an application processor which can be disabled through the S10&apos;s GPIO <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The CPU STOP Latch <highlight><bold>58</bold></highlight>, once set, can only be re-set by the receipt of a GPIO<highlight><bold>2</bold></highlight> signal from the SIO at the reset input. Thus, this latch is not merely reset from a reset signal, but must be specifically opened by the SIO in view of the system condition. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In the FRB-2 level testing, the timer in the SIO chip is utilized to determine if the FRB-2 function has failed by the end of the timeout period. If the FRB-2 level test is failed, the signal GPIO <highlight><bold>1</bold></highlight> is generated and applied as an input to OR gate 56. It is then passed to the set position of the CPU STOP Latch which then turns off CPU <highlight><bold>1</bold></highlight> to prevent it from operating as the bootstrap processor. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Likewise, if the FRB-1 level test indicates a failure, the SIO generates GPIO<highlight><bold>1</bold></highlight> signal which is passed to the CPU STOP Latch <highlight><bold>58</bold></highlight> to disable CPU <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Thus, it can be seen how this arrangement of hardware can produce the fault resilient booting process according to the ASM system using the test as described above. In so doing, the baseboard management controller chip is unnecessary and instead the ASM architecture is able to perform these tests under the control of ;the SIO. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In concluding, reference in the specification to &ldquo;one embodiment&rdquo;, &ldquo;an embodiment&rdquo;, &ldquo;example embodiment&rdquo;, etc., means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of such phrases in various places in the specification are not necessarily all referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with any embodiment, it is submitted that it is within the purview of one skilled in the art to effect such feature, structure, or characteristic in connection with other ones of the embodiments. Furthermore, for ease of understanding, certain method procedures may have been delineated as separate procedures; however, these separately delineated procedures should not be construed as necessarily order dependent in their performance, i.e., some procedures may be able to be performed in an alternative ordering, simultaneously, etc. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Further, the present invention may be practiced as a software invention, implemented in the form of a machine-readable medium having stored thereon at least one sequence of instructions that, when executed, causes a machine to effect the invention. With respect to the term &ldquo;machine&rdquo;, such term should be construed broadly as encompassing all types of machines, e.g., a non-exhaustive listing including: computing machines, non-computing machines, communication machines, etc. Similarly, which respect to the term &ldquo;machine-readable medium&rdquo;, such term should be construed as encompassing a broad spectrum of mediums, e.g., a non-exhaustive listing including: magnetic medium (floppy disks, hard disks, magnetic tape, etc.), optical medium (CD-ROMs, DVD-ROMs, etc), etc. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> This concludes the description of the example embodiments. Although the present invention has been described with reference to a number of illustrative embodiments thereof, it should be understood that numerous other modifications and embodiments can be devised by those skilled in the art that will fall within the spirit and scope of the principles of this invention. More particularly, reasonable variations and modifications are possible in the component parts and/or arrangements of the subject combination arrangement within the scope of the foregoing disclosure, the drawings and the appended claims without departing from the spirit of the invention. In addition to variations and modifications in the component parts and/or arrangements, alternative uses will also be apparent to those skilled in the art. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of fault resilient booting in a multiprocessor system, comprising: 
<claim-text>designating one processor as a bootstrap processor; </claim-text>
<claim-text>testing the bootstrap processor to verify that it will run BIOS code; </claim-text>
<claim-text>setting a latch for disabling said bootstrap processor if the testing indicates a failure; </claim-text>
<claim-text>testing during a power on self-test the operation of said bootstrap processor; </claim-text>
<claim-text>testing during a built-in self-test the operation of said bootstrap processor; </claim-text>
<claim-text>assigning the bootstrap process to another processor if said bootstrap processor fails a test; </claim-text>
<claim-text>said testing steps being implemented in an appliance server management system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first testing step utilizes a timer which indicates a failure if it is not reset within the predetermined time period. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein a failure in the second or third testing step also causes said latch to be set. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the testing steps are controlled by a control unit. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the control unit includes the system I/O chip. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An apparatus for fault resilient booting, comprising: 
<claim-text>a first processor designated as a bootstrap processor; </claim-text>
<claim-text>a latch for turning off said bootstrap processor; </claim-text>
<claim-text>a control unit for providing control signals for setting said latch, for resetting said latch and for controlling additional processors. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising a timer for determining if said bootstrap processor is operating properly. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said timer begins a time period wherein power is turned on and ends said time period after a predetermined time. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the bootstrap processor is considered to fail if said timer is not reset before reaching said predetermined time. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said control unit includes a system I/O chip. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the apparatus is part of an appliance server management system. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A multiprocessor system for fault resilient booting, comprising: 
<claim-text>a plurality of processors with one processor being denominated a bootstrap processor; </claim-text>
<claim-text>a control unit for generating a series of control signals; </claim-text>
<claim-text>a timer; </claim-text>
<claim-text>a latch for turning said bootstrap processor off; </claim-text>
<claim-text>said timer providing a signal indicating that a predetermined time has expired, which is applied to said latch to set said latch; </claim-text>
<claim-text>said control unit providing a first signal to said latch for setting said latch, a second signal applied to said latch for resetting said latch, a third signal for controlling other processors and a fourth signal for a resetting the timer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said first signal from said control unit is generated when said bootstrap processor fails a power-on self-test or a built-in self-test. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said timer tests whether said bootstrap processor can run BIOS code. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the system is part of an appliance server management system. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said control unit causes another processor to become the bootstrap processor when said bootstrap processor is disabled by said latch.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005275A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005275A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005275A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
