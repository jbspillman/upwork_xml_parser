<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004678A1-20030102-M00001.NB SYSTEM "US20030004678A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030004678A1-20030102-M00001.TIF SYSTEM "US20030004678A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-M00002.NB SYSTEM "US20030004678A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030004678A1-20030102-M00002.TIF SYSTEM "US20030004678A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-M00003.NB SYSTEM "US20030004678A1-20030102-M00003.NB" NDATA NB>
<!ENTITY US20030004678A1-20030102-M00003.TIF SYSTEM "US20030004678A1-20030102-M00003.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-M00004.NB SYSTEM "US20030004678A1-20030102-M00004.NB" NDATA NB>
<!ENTITY US20030004678A1-20030102-M00004.TIF SYSTEM "US20030004678A1-20030102-M00004.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00000.TIF SYSTEM "US20030004678A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00001.TIF SYSTEM "US20030004678A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00002.TIF SYSTEM "US20030004678A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00003.TIF SYSTEM "US20030004678A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00004.TIF SYSTEM "US20030004678A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00005.TIF SYSTEM "US20030004678A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00006.TIF SYSTEM "US20030004678A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00007.TIF SYSTEM "US20030004678A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00008.TIF SYSTEM "US20030004678A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004678A1-20030102-D00009.TIF SYSTEM "US20030004678A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004678</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09884343</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010618</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G01C009/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/00</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G01C017/00</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G01C019/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>702</class>
<subclass>152000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for providing a mobile input device</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Zhengyou</given-name>
<family-name>Zhang</family-name>
</name>
<residence>
<residence-us>
<city>Redmond</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Ying</given-name>
<family-name>Shan</family-name>
</name>
<residence>
<residence-us>
<city>Plainsboro</city>
<state>NJ</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Steven</given-name>
<middle-name>A. N.</middle-name>
<family-name>Shafer</family-name>
</name>
<residence>
<residence-us>
<city>Seattle</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ying</given-name>
<family-name>Wu</family-name>
</name>
<residence>
<residence-us>
<city>Champaign</city>
<state>IL</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>LYON &amp; HARR, LLP</name-1>
<name-2></name-2>
<address>
<address-1>300 ESPLANADE DRIVE, SUITE 800</address-1>
<city>OXNARD</city>
<state>CA</state>
<postalcode>93036</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A vision-based gesture interface system, which employs an arbitrary quadrangle-shaped panel and a pointer tip like a fingertip as an intuitive input device. Taking advantage of the panel, the system can fulfill many tasks such as controlling a remote and large display, and simulating a physical keyboard. Users can naturally use their fingers and other pointer tips to issue commands and type texts. The system is facilitated by accurately and reliably tracking the panel and the pointer tip and detecting clicking and dragging actions. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The system and method according to the present invention employs an arbitrary quadrangle-shape panel and a pointer tip like a fingertip as an intuitive input device to a remote display. </paragraph>
<paragraph id="P-0003" lvl="2"><number>&lsqb;0003&rsqb;</number> 2. Background Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The exploration of vision-based interfaces is motivated by the unnaturalness of some of the conventional input devices such as mice and joysticks. The bottleneck of such devices comes from the lack of flexibility due to the constraints from the environment, and the lack of the feeling of immersiveness in human computer interaction. Magnetic sensors and transmitters could be a remedy for such conventional interaction devices. However, they are prone to magnetic interferences and many people are reluctant to use them due to the debate that they could be a health hazard. On the other hand, combined with human body motion, a vision-based interface is of great potential because it provides a non-invasive way to achieve natural and immersive interaction between human and the computer. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> There are many applications, such as in smart rooms and teleconferencing, where conventional mice and keyboards turn out to be not suitable because only one person can use them if there are several people in the room. This motivates the development of a vision-based gesture interface. One of the most intuitive and convenient ways to control an intelligent environment is to employ human body motion, especially hand/finger motion. The use of hand gestures has become an important part of Human Computer Interfaces (HCI) in recent years. In order to use the human hand as a natural interface device, some alternatives, such as glove-based devices, have been used to capture human hand motion by attaching some sensors to measure the joint angles and spatial positions of hands directly. Unfortunately, such devices are expensive and cumbersome. Vision-based techniques provide a promising alternative to this goal, since they can be very cost-efficient and non-invasive. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> There have been many implemented vision-based application systems in domains such as virtual environments, human-computer interfaces, teleconferencing, sign language translation, etc. However, few of such vision-based interfaces are able to achieve accurate display control and text input. One of the reasons is that such systems are not facilitated with robust, accurate and fast hand/finger tracking using live video inputs. Two dimensional (2D) tracking has been used and has been based on several different cues, such as, for example, color, motion, and image features. Although color tracking provides a cost-efficient way for tracking, it is prone to lighting changes and it is not suitable for accurate tracking. Tracking using image features such as geometric shapes may provide accurate tracking results but may require extensive processing resources. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The system and method according to the present invention seeks to solve the aforementioned problems by using an arbitrary quadrangle-shaped plane object, such as a paper, and a pointer tip, such as a fingertip or a pen, to serve as a natural and convenient input device for accurately controlling one or more remote displays, based on computer vision techniques. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Functionally, the system consists of panel tracking, pointer tip tracking, homography calculation/updating and action detection/recognition. In the most general terms, video sequences taken by a camera which captures the movement of both the quadrangular panel and pointer are analyzed by a panel tracker and a pointer tip tracker. The panel can be anything as long as it is quadrangle-shaped and relatively rigid. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The setting of the camera can be quite flexible. The camera can be located anywhere as long as the panel is not completely occluded. For instance, it is possible to mount the camera on the ceiling. The user can rotate, translate and tilt the panel to reach a comfortable pose for use. Under some circumstances when the user wants to walk around, a camera can be mounted on top of his head by wearing a hat, or on his shoulders, such that the user can be anywhere to interact with the computer. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Since an arbitrarily quadrangle-shaped panel is used to control the cursor position on the remote computer display, one must know the mapping between a point on the panel and a point on the display. Furthermore, what is available is an image sequence of the panel which may undergo arbitrary motion (as long as the image of the panel does not degenerate into a line or a point), so the mapping between a point in the image plane and a point on the panel must also be known. It is assumed that the camera performs a perspective projection (pinhole model). As the display, the panel, and the image plane are all planes, both above relationships can be described by a plane perspectivity. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The mapping between the image of the panel and the remote display can be described by a homography matrix once the four corners of the panel are located in the image. As the dimensions of the display are known, the homography can be computed by mapping each corner of the panel to a corner of the remote display. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> A panel tracker tracks an arbitrary quadrangle-shaped plane object by outputting the positions of its four corners. An edge-based dynamical programming technique is employed in the panel tracker to locate these four corners. The edge-based programming technique employs a gradient of color intensity to locate the edges, since the difference in color intensity between the surroundings and the panel should typically be significant. This technique is quite robust and reliable, even if some of the corners of the panel or part of the edges are occluded. At the same time, since the positions of the corners are calculated by intersecting four lines of the quadrangle, the positions can be calculated in sub-pixels, which allows for more accurate calculation of the homography which describes the mapping between the panel and the remote display. Through this homography, any point on the panel is mapped to the corresponding position on the remote display. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The system and method according to the present invention determines the location of a pointer tip by using a conic curve fitting technique. Since users can use their fingertip to control a cursor on a remote display, the tracking of the pointer tip should be as accurate and stable as possible. This is because a small error in the tip position will be magnified in the remote display. For instance, it is assumed that the resolution of input video is 320&times;240 pixels and the remote display has a reduction of 1024&times;768 pixels. Since generally the panel in the image is roughly half the size of the image, a tracking error of 1 pixel will incur about 6 pixels of error in the remote display, which will make the mapped cursor position very shaky. This problem of the magnified tip position error is solved by fitting an ellipse to the edge pixels representing the outline of the pointer as observed in the image. The use of an ellipse to find the pointer tip allows the tip position to be calculated in sub-pixels. This minimizes any error in the tip position once projected in the remote display. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The system allows arbitrary pointer tips, such as fingertips and pens, to be used as long as their color is distinguishable from the panel&apos;s color. Basically, the edge points of the pointer tip are held to be those areas where the color of the image of the panel changes significantly. Once the edge points are found, an elliptical curve is fit to the edge points via a conventional curve-fitting technique. The tip of the pointer is then found by finding where the major axis of the ellipse intersects the aforementioned ellipse. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> To reduce the processing necessary to locate the pointer tip, two methods can be used. The first is a Kalman filtering technique and the second is a background subtraction technique. The Kalman filtering technique can be employed to predict the tip position {overscore (p)}(t&plus;1) at time t&equals;1, assuming the position of the tip at time t is p(t). In a small window, for example 30&times;30 pixels, as many edge points as possible are identified that probably belong to the edge of the tip. This is accomplished by thresholding the gradient and taking advantage of the color of the previous edge of the tracked tip. After that, an ellipse can be fit to these edge points as discussed above to find the exact location of the tip {overscore (p)}(t&plus;1) for time t&plus;1. Alternately, finding the location of the pointer tip can be expedited by a re-initialization technique that employs a background subtraction technique. The background consists of the panel and the rest of the image and the foreground consists of the pointer. To achieve this result a previous image is subtracted from a current image to localize the pointer. This technique localizes the moving part of the pointer to allow the system to predict where the pointer tip location is. The previously described homography is used to predict the tip location and search for pointer tip edge points in that neighborhood (i.e., 30&times;30 pixels around the predicted tip point location in a tested embodiment). </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The current system simulates the clicking/pressing gestures typical of using a mouse by holding the pointer tip on a position on the panel for a prescribed period of time. A message generator in the system gets inputs from an action detector, and issues various mouse and keyboard events according to the different user input methods. Building on these techniques, the system is capable of performing two types of input: virtual mouse and virtual keyboard. The position of the pointer tip can be mapped to the remote display such that a cursor can be simulated. A paper with a keyboard pattern printed on it can also be used as a virtual keyboard, by which users can point the keys on the paper to input texts. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The present invention supports two &ldquo;mouse button&rdquo; pressing modes (clicking mode and dragging modes) and two &ldquo;mouse motion&rdquo; types (absolute type and relative type). </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> As for the two mouse button pressing modes: mode I (clicking mode) simulates the left button down then up automatically and mode II (dragging mode) simulates the left button down until released. In one embodiment, clicking/pressing is simulated by holding the pointer tip in position for a period of time, say 1 second. A state variable S maintains two states: UP and DN (down), to simulate the two natural states of a button. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The variable S is initialized to be UP. In the clicking mode (mode I), when the system detects that the pointer tip has been at a fixed place for, say, 1 second (or other pre-specified duration), the state variable S is set to DN. After 0.1 second, the state variable S will be automatically set to UP to simulate button release. Appropriate mouse events are generated, and a clicking action is performed. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The clicking mode (mode I) has very limited ability of dragging, since the release is automatic. To simulate dragging, mode II uses another state variable, D, to memorize the flip of clicking. When the system detects that the pointer tip has been at a fixed place for, say, 1 second (or other pre-specified duration), variable D changes its state (from D UP to D DN or from D DN to D UP). When the D-state change from D UP to D DN is detected, a pressing action is detected; when the D-state change from D DN to D UP is detected, a releasing action is detected. Thus, an object can be selected and dragged to a different place. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The system can also simulate two mouse motion types: absolute and relative. In the absolute type, the panel will be mapped to the whole remote display, such that each point in the panel will be mapped to the corresponding point in the display. As previously discussed, this type needs very accurate tracking, since a small tracking error of the panel and pointer tip will be magnified. However, the absolute type is more intuitive. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> An alternative type based on relative motion is also provided, which is much less sensitive to the tracking accuracy, since the cursor is controlled by the relative motion of the pointer tip. Assume the motion direction of pointer tip is d<highlight><subscript>p</subscript></highlight>(t) at time t . The moving direction of the cursor will be d<highlight><subscript>d</subscript></highlight>(t)&equals;H(t)d<highlight><subscript>p</subscript></highlight>(t). The speed of cursor motion is determined by the velocity of the pointer tip, i.e., &Dgr;<highlight><subscript>d</subscript></highlight>&equals;&agr;&par;v<highlight><subscript>p</subscript></highlight>&verbar;, where &agr; controls the scale of the cursor speed on the display. The relative type incurs much smooth movement of the cursor with small &agr;, due to the non-magnification of tracking error. There could be many other alternatives of relative motion. For instance, the panel can be just mapped to a window area centered at previous cursor position on the remote display. In this method, the center of the panel corresponds to the previous cursor position. When the pointer tip moves from center to left, the cursor will move left. Obviously, the window area could be smaller than the panel in the image, such that the tracking error can be even minimized.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The specific features, aspects, and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where: </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram depicting a general purpose computing device constituting an exemplary system for implementing the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a system diagram that depicts exemplary program modules employed in a system according to the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram depicting a general overview of the system and method according to the present invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram depicting how the quadrangular panel is tracked. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram depicting how the pointer tip is tracked. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a diagram depicting the edge points of the pointer tip with a conic curve fit to them and the major axis of the conic determining the pointer tip location. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flow diagram depicting the re-initialization technique employed by the system and method according to the present invention. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a screen image showing an exemplary implementation of a working example according to the present invention wherein a calculator is depicted on the remote display. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows an exemplary implementation of a working example wherein a user paints using the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows an exemplary implementation of a working example according to the present invention wherein a keyboard is simulated to control the remote display. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows the keyboard of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> being used.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In the following description of the preferred embodiments of the present invention, reference is made to the accompanying drawings, which form a part hereof, and which is shown by way of illustration of specific embodiments in which the invention may be practiced. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0036" lvl="7"><number>&lsqb;0036&rsqb;</number> Exemplary Operating Environment </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example of a suitable computing system environment <highlight><bold>100</bold></highlight> on which the invention may be implemented. The computing system environment <highlight><bold>100</bold></highlight> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment <highlight><bold>100</bold></highlight> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer <highlight><bold>110</bold></highlight>. Components of computer <highlight><bold>110</bold></highlight> may include, but are not limited to, a processing unit <highlight><bold>120</bold></highlight>, a system memory <highlight><bold>130</bold></highlight>, and a system bus <highlight><bold>121</bold></highlight> that couples various system components including the system memory to the processing unit <highlight><bold>120</bold></highlight>. The system bus <highlight><bold>121</bold></highlight> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Computer <highlight><bold>110</bold></highlight> typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer <highlight><bold>110</bold></highlight> and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer <highlight><bold>110</bold></highlight>. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &ldquo;modulated data signal&rdquo; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The system memory <highlight><bold>130</bold></highlight> includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) <highlight><bold>131</bold></highlight> and random access memory (RAM) <highlight><bold>132</bold></highlight>. A basic input/output system <highlight><bold>133</bold></highlight> (BIOS), containing the basic routines that help to transfer information between elements within computer <highlight><bold>110</bold></highlight>, such as during start-up, is typically stored in ROM <highlight><bold>131</bold></highlight>. RAM <highlight><bold>132</bold></highlight> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit <highlight><bold>120</bold></highlight>. By way of example, and not limitation, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates operating system <highlight><bold>134</bold></highlight>, application programs <highlight><bold>135</bold></highlight>, other program modules <highlight><bold>136</bold></highlight>, and program data <highlight><bold>137</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The computer <highlight><bold>110</bold></highlight> may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hard disk drive <highlight><bold>141</bold></highlight> that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive <highlight><bold>151</bold></highlight> that reads from or writes to a removable, nonvolatile magnetic disk <highlight><bold>152</bold></highlight>, and an optical disk drive <highlight><bold>155</bold></highlight> that reads from or writes to a removable, nonvolatile optical disk <highlight><bold>156</bold></highlight> such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <highlight><bold>141</bold></highlight> is typically connected to the system bus <highlight><bold>121</bold></highlight> through an non-removable memory interface such as interface <highlight><bold>140</bold></highlight>, and magnetic disk drive <highlight><bold>151</bold></highlight> and optical disk drive <highlight><bold>155</bold></highlight> are typically connected to the system bus <highlight><bold>121</bold></highlight> by a removable memory interface, such as interface <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The drives and their associated computer storage media discussed above and illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, provide storage of computer readable instructions, data structures, program modules and other data for the computer <highlight><bold>110</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, for example, hard disk drive <highlight><bold>141</bold></highlight> is illustrated as storing operating system <highlight><bold>144</bold></highlight>, application programs <highlight><bold>145</bold></highlight>, other program modules <highlight><bold>146</bold></highlight>, and program data <highlight><bold>147</bold></highlight>. Note that these components can either be the same as or different from operating system <highlight><bold>134</bold></highlight>, application programs <highlight><bold>135</bold></highlight>, other program modules <highlight><bold>136</bold></highlight>, and program data <highlight><bold>137</bold></highlight>. Operating system <highlight><bold>144</bold></highlight>, application programs <highlight><bold>145</bold></highlight>, other program modules <highlight><bold>146</bold></highlight>, and program data <highlight><bold>147</bold></highlight> are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer <highlight><bold>110</bold></highlight> through input devices such as a keyboard <highlight><bold>162</bold></highlight> and pointing device <highlight><bold>161</bold></highlight>, commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <highlight><bold>120</bold></highlight> through a user input interface <highlight><bold>160</bold></highlight> that is coupled to the system bus <highlight><bold>121</bold></highlight>, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor <highlight><bold>191</bold></highlight> or other type of display device is also connected to the system bus <highlight><bold>121</bold></highlight> via an interface, such as a video interface <highlight><bold>190</bold></highlight>. In addition to the monitor, computers may also include other peripheral output devices such as speakers <highlight><bold>197</bold></highlight> and printer <highlight><bold>196</bold></highlight>, which may be connected through an output peripheral interface <highlight><bold>195</bold></highlight>. Of particular significance to the present invention, a camera <highlight><bold>163</bold></highlight> (such as a digital/electronic still or video camera, or film/photographic scanner) capable of capturing a sequence of images <highlight><bold>164</bold></highlight> can also be included as an input device to the personal computer <highlight><bold>110</bold></highlight>. Further, while just one camera is depicted, multiple cameras could be included as an input device to the personal computer <highlight><bold>110</bold></highlight>. The images <highlight><bold>164</bold></highlight> from the one or more cameras are input into the computer <highlight><bold>110</bold></highlight> via an appropriate camera interface <highlight><bold>165</bold></highlight>. This interface <highlight><bold>165</bold></highlight> is connected to the system bus <highlight><bold>121</bold></highlight>, thereby allowing the images to be routed to and stored in the RAM <highlight><bold>132</bold></highlight>, or one of the other data storage devices associated with the computer <highlight><bold>110</bold></highlight>. However, it is noted that image data can be input into the computer <highlight><bold>110</bold></highlight> from any of the aforementioned computer-readable media as well, without requiring the use of the camera <highlight><bold>163</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The computer <highlight><bold>110</bold></highlight> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <highlight><bold>180</bold></highlight>. The remote computer <highlight><bold>180</bold></highlight> may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <highlight><bold>110</bold></highlight>, although only a memory storage device <highlight><bold>181</bold></highlight> has been illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The logical connections depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> include a local area network (LAN) <highlight><bold>171</bold></highlight> and a wide area network (WAN) <highlight><bold>173</bold></highlight>, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> When used in a LAN networking environment, the computer <highlight><bold>110</bold></highlight> is connected to the LAN <highlight><bold>171</bold></highlight> through a network interface or adapter <highlight><bold>170</bold></highlight>. When used in a WAN networking environment, the computer <highlight><bold>110</bold></highlight> typically includes a modem <highlight><bold>172</bold></highlight> or other means for establishing communications over the WAN <highlight><bold>173</bold></highlight>, such as the Internet. The modem <highlight><bold>172</bold></highlight>, which may be internal or external, may be connected to the system bus <highlight><bold>121</bold></highlight> via the user input interface <highlight><bold>160</bold></highlight>, or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer <highlight><bold>110</bold></highlight>, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates remote application programs <highlight><bold>185</bold></highlight> as residing on memory device <highlight><bold>181</bold></highlight>. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The exemplary operating environment having now been discussed, the remaining parts of this description section will be devoted to a description of the program modules embodying the invention. </paragraph>
<paragraph id="P-0048" lvl="7"><number>&lsqb;0048&rsqb;</number> System Overview </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The system and method according to the present invention uses an arbitrary quadrangle-shaped plane object (e.g., a piece of paper), and a pointer tip (e.g., a fingertip or a pen), to serve as a natural and convenient input device for accurately controlling one or more computer remote displays, based on computer vision techniques. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the system consists of panel tracking, pointer tip tracking, homography calculation/updating and action detection/recognition. In the most general terms, video sequences <highlight><bold>200</bold></highlight> taken by a video camera are analyzed by a panel tracker <highlight><bold>202</bold></highlight> and a pointer tip tracker <highlight><bold>204</bold></highlight>. The panel tracker <highlight><bold>202</bold></highlight> tracks an arbitrary quadrangle-shaped plane object by outputting the positions of its four corners. An edge-based dynamical programming technique is employed in the panel tracker to locate these four corners. The edge-based programming technique analyzes the gradient of color intensity in a video frame to locate the edges of the object (herein after referred to as a panel), since the difference in color intensity between the surroundings and the panel should typically be significant. This technique is quite robust and reliable, even if some of the corners of the panel or part of the edges are occluded, because the corners are found by finding the edges of panel and extrapolating to where they intersect to find the corners. At the same time, since the positions of the corners are calculated by intersecting four lines of the quadrangle, the positions can be calculated in sub-pixels, which allows more accurate calculation of the homography <highlight><bold>208</bold></highlight> which describes the mapping between the panel and the remote display. Through this homography <highlight><bold>208</bold></highlight>, any point on the panel is mapped to the corresponding position on the remote display. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In the system and method according to the present invention, users can use their fingertip as a pointer to control a pointer on a remote display. Consequentially, the tracking of the pointer tip should be as accurate and stable as possible. This is because a small error in the tip position will be magnified in the remote display. This problem of the magnified error of the tip position is solved in the system by representing a pointer tip as a conic (specifically an ellipse) and fitting a parametric conic via a conic fitting module <highlight><bold>210</bold></highlight> to image observations. In this way, the tip position can also be calculated in sub-pixels such that the error can be reduced. The color tracker <highlight><bold>206</bold></highlight> plays two roles. The first is to locate the potential tip region through background subtraction when no tip was tracked. It initializes the tip tracker when a potential tip region is found. The second is to use a predefined tip color model (either built manually or learned from data) to help locate the tip in the images. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The current system simulates the clicking/pressing gestures by holding the pointer tip on a position for a prescribed period of time. The message generator in the system gets inputs from the action/gesture detector <highlight><bold>212</bold></highlight>, and issues various mouse and keyboard events according to the different user input methods. Building on these techniques, the system is capable of performing two types of input: virtual mouse <highlight><bold>214</bold></highlight> and virtual keyboard <highlight><bold>216</bold></highlight>. The position of the pointer tip can be mapped to the remote display such that a cursor can be simulated. A paper with a keyboard pattern printed on it can also be used as a virtual keyboard, by which users can point the keys on the paper to input texts. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a general flow chart of the system and method according to the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, process action <highlight><bold>300</bold></highlight>, images of the panel and pointer tip are input into the invention. The position of the quadrangular panel is then located in the image (process action <highlight><bold>302</bold></highlight>). A projective mapping between the images of the panel and the remote display are then determined in order to determine the panel coordinates, as shown in process action <highlight><bold>304</bold></highlight>. The pointer tip overlaying the panel is then located (process action <highlight><bold>306</bold></highlight>). As shown in process action <highlight><bold>308</bold></highlight>, the position of the tip of the pointer on the panel is then determined from the images of the panel using the aforementioned projective mapping. The pointer position is then compared to the previous pointer position (process action <highlight><bold>310</bold></highlight>) and the pointer position is interpreted (process action <highlight><bold>312</bold></highlight>) in order to use the pointer position to control the position of the system indicator such as a cursor or keyboard (process action <highlight><bold>314</bold></highlight>). </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The following paragraphs provide a more detailed explanation of the system and method according to the present invention. </paragraph>
<paragraph id="P-0055" lvl="7"><number>&lsqb;0055&rsqb;</number> 1.0 Mapping Between Panel and Display </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, as mentioned previously, to map between the panel and the display, video sequences <highlight><bold>200</bold></highlight> taken over time are analyzed by a panel tracker <highlight><bold>202</bold></highlight> and a pointer tip tracker <highlight><bold>204</bold></highlight>. These video sequences are captured using a video camera. The camera is used to capture the movement of both the quadrangle-shaped plane object and the pointer tip. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The setting of the camera can be quite flexible. It can be anywhere as long as the panel is not completely occluded. For instance, it would be possible to mount the camera on the ceiling. The user can rotate, translate and tilt the panel to reach a comfortable pose for use. However, the user should not let the normal of the panel be vertical to the optical axis of the camera. Under some circumstances when the user wants to walk around, a camera can be mounted on top of his head by wearing a hat, or on his shoulders, such that the user can be anywhere to interact with the computer. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Since an arbitrarily quadrangle-shaped panel is used to control the cursor position on the remote display, the mapping between a point on the panel and a point on the display must be known. Furthermore, what is available is an image sequence of the panel which may undergo arbitrary motion (as long as the image of the panel does not degenerate into a line or a point), so the mapping between a point in the image plane and a point on the panel must also be known. It is assumed that the camera provides a perspective projection (pinhole model). As the display, the panel, and the image plane are all planes, both above relationships can be described by a plane perspectivity, as explained below. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Given a point p&equals;&lsqb;x, y&rsqb;<highlight><superscript>T </superscript></highlight>on a plane &Pi;, {tilde over (p)}&equals;&lsqb;x, y, 1&rsqb;<highlight><superscript>T </superscript></highlight>can be used to denote its homogeneous coordinates. Then, the plane perspectivity between planes &Pi; and &Pi;&prime; is described by a 3&times;3 matrix H such that</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>&lgr;{tilde over (p)}&prime;&equals;H{tilde over (p)}</italic></highlight></in-line-formula></paragraph>
<paragraph id="P-0060" lvl="7"><number>&lsqb;0060&rsqb;</number> where &lgr; is an arbitrary non-zero scalar. This implies that the homography matrix is only defined up to a scale factor, and therefore has 8 degrees of freedom. If four couples of corresponding points (no three of them are collinear) are given, the homography matrix can be determined. It is not difficult to see that the composition of two plane perspectivities is still a plane perspectivity. Thus, the mapping between the image of the panel and the remote display can be described by a homography matrix <highlight><bold>206</bold></highlight>. The composed homography <highlight><bold>206</bold></highlight> can be easily determined once the four corners of the panel are located in the image (see next section for details). As the dimensions of the display are known, the homography <highlight><bold>206</bold></highlight> can be computed by mapping each corner of the panel to a corner of the display. </paragraph>
<paragraph id="P-0061" lvl="7"><number>&lsqb;0061&rsqb;</number> 2.0 Tracking the Quadrangle </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> This section provides a description of the quadrangle representation and of the quadrangular panel tracking. The system and process according to the present invention sequentially scans a video input frame to locate each side of the quadrangular panel in the input image. Generally, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, if previous quadrangle position data is available, this data is used to predict the search area for searching for the quadrangle (process action <highlight><bold>402</bold></highlight>). The first side of the quadrangle is located by determining a line corresponding to a large gradient in color and intensity in the image of the panel (process action <highlight><bold>404</bold></highlight>), either in the predicted search area or in the entire image. A threshold may be used in determining whether this gradient is large enough to represent a line corresponding to the edge of the panel. The other three sides of the quadrangle are then located sequentially but in the same way (process action <highlight><bold>406</bold></highlight>, <highlight><bold>408</bold></highlight>, <highlight><bold>410</bold></highlight>). Once the four sides of the panel are located, their intersections are taken to be the positions of the four corners of the panel, as shown in process action <highlight><bold>412</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="7"><number>&lsqb;0063&rsqb;</number> 2.1 Quadrangle Representation </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The image of the panel can be represented by a quadrangle:</paragraph>
<paragraph lvl="0"><in-line-formula>Q&equals;&lcub;l<highlight><subscript>1</subscript></highlight>, l<highlight><subscript>2</subscript></highlight>, l<highlight><subscript>3</subscript></highlight>, l<highlight><subscript>4</subscript></highlight>&rcub;</in-line-formula></paragraph>
<paragraph id="P-0065" lvl="7"><number>&lsqb;0065&rsqb;</number> where l, is a side line. It can also be also represented by four corners Q&equals;&lcub;q<highlight><subscript>1</subscript></highlight>, q<highlight><subscript>2</subscript></highlight>, q<highlight><subscript>3</subscript></highlight>, q<highlight><subscript>4</subscript></highlight>&rcub; with l<highlight><subscript>k</subscript></highlight>&equals;q<highlight><subscript>k&minus;1</subscript></highlight>q<highlight><subscript>k </subscript></highlight>(assuming q<highlight><subscript>0</subscript></highlight>&equals;q<highlight><subscript>4</subscript></highlight>). Each side of the quadrangle in the image is expected to be a set of edge points due to the color gradient and intensity difference between the panel and the background. The appearance of each side is modeled as a random vector x&equals;&lcub;G, I&rcub;, where G is the average gradient and I is the average intensity. The distribution of x is assumed to be a Gaussian, i.e., x&tilde;N(&mgr;<highlight><subscript>x</subscript></highlight>, &Sgr;<highlight><subscript>x</subscript></highlight>). </paragraph>
<paragraph id="P-0066" lvl="7"><number>&lsqb;0066&rsqb;</number> 2.2 Tracking Through Dynamic Programming </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> At time t, the location of the quadrangle is at Q(t)&equals;&lcub;q<highlight><subscript>1</subscript></highlight>(t), q<highlight><subscript>2</subscript></highlight>(t), q<highlight><subscript>3</subscript></highlight>(t), q<highlight><subscript>4</subscript></highlight>(t)&rcub;, and the appearance of the quadrangle is x(t). The tracking problem can be formulated as a maximum a posteriori problem (MAP):</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Q</italic></highlight>*(<highlight><italic>t&plus;</italic></highlight>1)&equals;arg max<highlight><subscript>Q</subscript></highlight><highlight><italic>p</italic></highlight>(<highlight><italic>Q</italic></highlight>(<highlight><italic>t&plus;</italic></highlight>1)&verbar;<highlight><italic>Q</italic></highlight>(<highlight><italic>t</italic></highlight>),<highlight><italic>x</italic></highlight>(<highlight><italic>t</italic></highlight>),<highlight><italic>x</italic></highlight>(<highlight><italic>t&plus;</italic></highlight>1))</in-line-formula></paragraph>
<paragraph id="P-0068" lvl="7"><number>&lsqb;0068&rsqb;</number> Because the panel motion between successive image frames is limited, it is assumed at time t&plus;1 the four corner points will be in a range D<highlight><subscript>i </subscript></highlight>around p<highlight><subscript>l</subscript></highlight>(t), respectively. The above problem can them be approximated by:</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Q</italic></highlight>*(<highlight><italic>t&plus;</italic></highlight>1)&equals;arg max<highlight><subscript>Q</subscript></highlight><highlight><italic>p</italic></highlight>(<highlight><italic>Q</italic></highlight>(<highlight><italic>t&plus;</italic></highlight>1),<highlight><italic>x</italic></highlight>(<highlight><italic>t&plus;</italic></highlight>1)&verbar;<highlight><italic>Q</italic></highlight>(<highlight><italic>t</italic></highlight>),<highlight><italic>x</italic></highlight>(<highlight><italic>t</italic></highlight>):&lcub;<highlight><italic>D</italic></highlight><highlight><subscript>1</subscript></highlight><highlight><italic>, D</italic></highlight><highlight><subscript>2</subscript></highlight><highlight><italic>, D</italic></highlight><highlight><subscript>3</subscript></highlight><highlight><italic>, D</italic></highlight><highlight><subscript>4</subscript></highlight>&rcub;)</in-line-formula></paragraph>
<paragraph id="P-0069" lvl="7"><number>&lsqb;0069&rsqb;</number> Here &ldquo;:&rdquo; means that &lcub;D<highlight><subscript>1</subscript></highlight>, D<highlight><subscript>2</subscript></highlight>, D<highlight><subscript>3</subscript></highlight>, D<highlight><subscript>4</subscript></highlight>&rcub; are parameters for the probability. It is further assumed that the size of each search area of D<highlight><subscript>i </subscript></highlight>is N. Since the four sides of the quadrangle are sequentially connected, this problem can be solved by the dynamic programming technique:  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msup>
            <mi>Q</mi>
            <mo>*</mo>
          </msup>
          <mo>&af;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>t</mi>
              <mo>+</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mi>arg</mi>
          <mo>&it;</mo>
          <munder>
            <mrow>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>max</mi>
            </mrow>
            <mi>Q</mi>
          </munder>
          <mo>&it;</mo>
          <mrow>
            <munderover>
              <mo>&Sum;</mo>
              <mrow>
                <mi>i</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mn>4</mn>
            </munderover>
            <mo>&it;</mo>
            <mrow>
              <mi>p</mi>
              <mo>(</mo>
              <mrow>
                <mrow>
                  <mi>Q</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>t</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>,</mo>
                <mrow>
                  <mrow>
                    <msub>
                      <mi>x</mi>
                      <mi>i</mi>
                    </msub>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mi>t</mi>
                        <mo>+</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>&VerticalSeparator;</mo>
                  <mrow>
                    <msub>
                      <mi>x</mi>
                      <mi>i</mi>
                    </msub>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mi>t</mi>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
                <mo>,</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <msub>
                <mi>Q</mi>
                <mi>i</mi>
              </msub>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <mi>t</mi>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>:</mo>
            <mrow>
              <msub>
                <mi>D</mi>
                <mi>i</mi>
              </msub>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mrow>
                    <msub>
                      <mi>q</mi>
                      <mi>i</mi>
                    </msub>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mi>t</mi>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <msubsup>
                      <mi>q</mi>
                      <mrow>
                        <mi>i</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>*</mo>
                    </msubsup>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mi>t</mi>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mi>arg</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mrow>
            <munder>
              <mi>max</mi>
              <mrow>
                <mo>{</mo>
                <msub>
                  <mi>q</mi>
                  <mi>k</mi>
                </msub>
                <mo>}</mo>
              </mrow>
            </munder>
            <mo>&it;</mo>
            <mrow>
              <munderover>
                <mo>&Sum;</mo>
                <mrow>
                  <mi>i</mi>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
                <mn>4</mn>
              </munderover>
              <mo>&it;</mo>
              <mrow>
                <mi>p</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mrow>
                      <mrow>
                        <msub>
                          <mi>x</mi>
                          <mi>i</mi>
                        </msub>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>(</mo>
                          <mrow>
                            <mi>t</mi>
                            <mo>+</mo>
                            <mn>1</mn>
                          </mrow>
                          <mo>)</mo>
                        </mrow>
                      </mrow>
                      <mo>&VerticalSeparator;</mo>
                      <mrow>
                        <msub>
                          <mi>x</mi>
                          <mi>i</mi>
                        </msub>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>(</mo>
                          <mi>t</mi>
                          <mo>)</mo>
                        </mrow>
                      </mrow>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <msub>
                        <mi>q</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>(</mo>
                        <mi>t</mi>
                        <mo>)</mo>
                      </mrow>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <msubsup>
                        <mi>q</mi>
                        <mrow>
                          <mi>i</mi>
                          <mo>-</mo>
                          <mn>1</mn>
                        </mrow>
                        <mo>*</mo>
                      </msubsup>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>(</mo>
                        <mi>t</mi>
                        <mo>)</mo>
                      </mrow>
                    </mrow>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030004678A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="61.9164" file="US20030004678A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0070" lvl="7"><number>&lsqb;0070&rsqb;</number> That is, an attempt is made to estimate each side of the quadrangle sequentially by maximizing a suitable criterion as discussed below. In the system and method according to the present invention, the search region for each corner point is approximated by a line segment, instead of a region. This is equivalent to searching for side lines. Corner points are later computed from the intersection of these lines. </paragraph>
<paragraph id="P-0071" lvl="7"><number>&lsqb;0071&rsqb;</number> Criterion: </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> As mentioned earlier, the appearance of each side line of the quadrangle is modeled by x that contains both the gradient information and the color information. Maximizing the probability above implies to finding a pair of line segments between t and t&plus;1 such that their appearances are closest. This can be done by minimizing the relative entropy between their distributions. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Assuming a Guassian distribution of X and Y, then the relative entropy is as follows:  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <mrow>
              <mrow>
                <mi>D</mi>
                <mo>(</mo>
                <mi>X</mi>
              </mrow>
              <mo>&RightDoubleBracketingBar;</mo>
            </mrow>
            <mo>&it;</mo>
            <mi>Y</mi>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mi>E</mi>
            <mo>&af;</mo>
            <mrow>
              <mo>[</mo>
              <mrow>
                <mi>lg</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mfrac>
                  <mrow>
                    <msub>
                      <mi>p</mi>
                      <mi>x</mi>
                    </msub>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mi>u</mi>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mrow>
                    <msub>
                      <mi>p</mi>
                      <mi>y</mi>
                    </msub>
                    <mo>&af;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mi>u</mi>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mfrac>
              </mrow>
              <mo>]</mo>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mrow>
            <mo>&Integral;</mo>
            <mrow>
              <mrow>
                <mi>p</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <mi>u</mi>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>&it;</mo>
              <mi>lg</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mfrac>
                <mrow>
                  <msub>
                    <mi>p</mi>
                    <mi>x</mi>
                  </msub>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>u</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mrow>
                  <msub>
                    <mi>p</mi>
                    <mi>y</mi>
                  </msub>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>u</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mfrac>
              <mo>&it;</mo>
              <mrow>
                <mo>&dd;</mo>
                <mi>u</mi>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mfrac>
              <mi>d</mi>
              <mn>2</mn>
            </mfrac>
            <mo>&it;</mo>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
            <mo>&it;</mo>
            <mi>lg</mi>
            <mo>&it;</mo>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
            <mo>&it;</mo>
            <mfrac>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>y</mi>
                </munder>
                <mo>&RightBracketingBar;</mo>
              </mrow>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>x</mi>
                </munder>
                <mo>&RightBracketingBar;</mo>
              </mrow>
            </mfrac>
          </mrow>
          <mo>-</mo>
          <mfrac>
            <mn>1</mn>
            <mn>2</mn>
          </mfrac>
          <mo>+</mo>
          <mrow>
            <mfrac>
              <mn>1</mn>
              <mn>2</mn>
            </mfrac>
            <mo>&it;</mo>
            <mrow>
              <mi>E</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <msup>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mi>x</mi>
                        <mo>-</mo>
                        <msub>
                          <mi>&mu;</mi>
                          <mi>y</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                    <mi>&prime;</mi>
                  </msup>
                  <mo>&it;</mo>
                  <mrow>
                    <mover>
                      <munder>
                        <mo>&Sum;</mo>
                        <mi>y</mi>
                      </munder>
                      <mrow>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                    </mover>
                    <mo>&it;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mi>x</mi>
                        <mo>-</mo>
                        <msub>
                          <mi>&mu;</mi>
                          <mi>y</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mfrac>
              <mi>d</mi>
              <mn>2</mn>
            </mfrac>
            <mo>&it;</mo>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
            <mo>&it;</mo>
            <mi>lg</mi>
            <mo>&it;</mo>
            <mfrac>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>y</mi>
                </munder>
                <mo>&RightBracketingBar;</mo>
              </mrow>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>x</mi>
                </munder>
                <mo>&RightBracketingBar;</mo>
              </mrow>
            </mfrac>
          </mrow>
          <mo>-</mo>
          <mfrac>
            <mn>1</mn>
            <mn>2</mn>
          </mfrac>
          <mo>+</mo>
          <mfrac>
            <mrow>
              <mo>&LeftBracketingBar;</mo>
              <munder>
                <mo>&Sum;</mo>
                <mi>y</mi>
              </munder>
              <mo>&RightBracketingBar;</mo>
            </mrow>
            <mrow>
              <mn>2</mn>
              <mo>&it;</mo>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>x</mi>
                </munder>
                <mo>&RightBracketingBar;</mo>
              </mrow>
            </mrow>
          </mfrac>
          <mo>+</mo>
          <mrow>
            <mfrac>
              <mn>1</mn>
              <mn>2</mn>
            </mfrac>
            <mo>&it;</mo>
            <msup>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>x</mi>
                  </msub>
                  <mo>-</mo>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>y</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
              <mi>&prime;</mi>
            </msup>
            <mo>&it;</mo>
            <mrow>
              <mover>
                <munder>
                  <mo>&Sum;</mo>
                  <mi>y</mi>
                </munder>
                <mrow>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
              </mover>
              <mo>&it;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>x</mi>
                  </msub>
                  <mo>-</mo>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>y</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030004678A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="91.93905" file="US20030004678A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0074" lvl="7"><number>&lsqb;0074&rsqb;</number> Thus, a symmetric distance metric is determined:  
<math-cwu id="MATH-US-00003">
<number>3</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <mrow>
              <mi>D</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>X</mi>
                  <mo>,</mo>
                  <mi>Y</mi>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
            <mo>&it;</mo>
            <mrow>
              <mrow>
                <mn>2</mn>
                <mo>&it;</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mrow>
                      <mrow>
                        <mrow>
                          <mi>D</mi>
                          <mo>(</mo>
                          <mi>X</mi>
                        </mrow>
                        <mo>&RightDoubleBracketingBar;</mo>
                      </mrow>
                      <mo>&it;</mo>
                      <mi>Y</mi>
                    </mrow>
                    <mo>+</mo>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>+</mo>
              <mrow>
                <mrow>
                  <mrow>
                    <mi>D</mi>
                    <mo>(</mo>
                    <mi>Y</mi>
                  </mrow>
                  <mo>&RightDoubleBracketingBar;</mo>
                </mrow>
                <mo>&it;</mo>
                <mi>X</mi>
              </mrow>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mfrac>
            <mrow>
              <mo>&LeftBracketingBar;</mo>
              <munder>
                <mo>&Sum;</mo>
                <mi>y</mi>
              </munder>
              <mo>&RightBracketingBar;</mo>
            </mrow>
            <mrow>
              <mo>&LeftBracketingBar;</mo>
              <munder>
                <mo>&Sum;</mo>
                <mi>x</mi>
              </munder>
              <mo>&RightBracketingBar;</mo>
            </mrow>
          </mfrac>
          <mo>+</mo>
          <mfrac>
            <mrow>
              <mo>&LeftBracketingBar;</mo>
              <munder>
                <mo>&Sum;</mo>
                <mi>x</mi>
              </munder>
              <mo>&RightBracketingBar;</mo>
            </mrow>
            <mrow>
              <mo>&LeftBracketingBar;</mo>
              <munder>
                <mo>&Sum;</mo>
                <mi>y</mi>
              </munder>
              <mo>&RightBracketingBar;</mo>
            </mrow>
          </mfrac>
          <mo>+</mo>
          <mrow>
            <msup>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>x</mi>
                  </msub>
                  <mo>-</mo>
                  <msub>
                    <mi>&mu;</mi>
                    <mi>y</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
              <mi>&prime;</mi>
            </msup>
            <mo>&it;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <munderover>
                  <mo>&Sum;</mo>
                  <mi>x</mi>
                  <mrow>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </munderover>
                <mo>&it;</mo>
                <munderover>
                  <mrow>
                    <mo>+</mo>
                    <mo>&Sum;</mo>
                  </mrow>
                  <mi>y</mi>
                  <mrow>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </munderover>
              </mrow>
              <mo>)</mo>
            </mrow>
            <mo>&it;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>&mu;</mi>
                  <mi>x</mi>
                </msub>
                <mo>-</mo>
                <msub>
                  <mi>&mu;</mi>
                  <mi>y</mi>
                </msub>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>-</mo>
          <mn>2</mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00003" file="US20030004678A1-20030102-M00003.NB"/>
<image id="EMI-M00003" wi="216.027" he="47.99655" file="US20030004678A1-20030102-M00003.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0075" lvl="7"><number>&lsqb;0075&rsqb;</number> By this means, the best-matched line at time t&plus;1 can be found by</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>l*</italic></highlight><highlight><subscript>2</subscript></highlight>(<highlight><italic>t&plus;</italic></highlight>1)&equals;arg min&lcub;<highlight><subscript>q</subscript></highlight><highlight><subscript>2</subscript></highlight>, q<highlight><subscript>2&minus;1</subscript></highlight><highlight><italic>&rcub;D</italic></highlight>(<highlight><italic>x</italic></highlight>(<highlight><italic>t</italic></highlight>),<highlight><italic>x</italic></highlight>(<highlight><italic>t&plus;</italic></highlight>1):&lcub;<highlight><italic>q</italic></highlight><highlight><subscript>2</subscript></highlight><highlight><italic>,q</italic></highlight><highlight><subscript>2&minus;1</subscript></highlight>&rcub;)</in-line-formula></paragraph>
<paragraph id="P-0076" lvl="7"><number>&lsqb;0076&rsqb;</number> 3.0 Tracking a Fingertip </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The system and method according to the present invention determines the tip location of a pointer by using a conic curve fitting technique. The invention also uses a method of reinitializing the tracking by using a background subtraction technique. </paragraph>
<paragraph id="P-0078" lvl="7"><number>&lsqb;0078&rsqb;</number> 3.1 Fingertip Representation </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The system allows arbitrary pointer tips, such as fingertips and pens, to be used as long as their color is distinguishable from the panel&apos;s color. As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the system optionally uses previous pointer position data when it is available to limit the search area when trying to determine the new pointer tip position, as shown in process action <highlight><bold>502</bold></highlight>. As shown in process action <highlight><bold>504</bold></highlight>, the process and system according to the present invention scans several scan lines within the panel area of the frame being analyzed to determine each pixel where the color and intensity of the panel change significantly. Each of these pixels is then identified as a pointer edge point. That is, the edge points of the pointer tip are held to be those areas where the color of the image of the panel changes significantly. Once the edge points are found, a conventional conic curve-fitting technique is used to fit an ellipse to the edge points (process action <highlight><bold>506</bold></highlight>). The tip of the pointer is then found by finding where the major axis of the ellipse intersects the aforementioned ellipse, as shown in process action <highlight><bold>508</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> More specifically, as shown in <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> pointer tip, such as a fingertip, can be represented, locally around the tip, by a conic</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>a</italic></highlight><highlight><subscript>1</subscript></highlight><highlight><italic>x</italic></highlight><highlight><superscript>2</superscript></highlight><highlight><italic>&plus;a</italic></highlight><highlight><subscript>2</subscript></highlight><highlight><italic>y</italic></highlight><highlight><superscript>2</superscript></highlight><highlight><italic>&plus;a</italic></highlight><highlight><subscript>3</subscript></highlight><highlight><italic>xy&plus;a</italic></highlight><highlight><subscript>4</subscript></highlight><highlight><italic>x&plus;a</italic></highlight><highlight><subscript>5</subscript></highlight><highlight><italic>y&plus;</italic></highlight>1&equals;0</in-line-formula></paragraph>
<paragraph id="P-0081" lvl="7"><number>&lsqb;0081&rsqb;</number> Given a set of positions &lcub;(x<highlight><subscript>1</subscript></highlight>, y<highlight><subscript>1</subscript></highlight>), . . . , (x<highlight><subscript>n</subscript></highlight>, y<highlight><subscript>n</subscript></highlight>)&rcub; of edge points of the pointer tip, a conic can be fitted to such data by a least-squares estimation. This will give  
<math-cwu id="MATH-US-00004">
<number>4</number>
<math>
<mrow>
  <mrow>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <msubsup>
                <mi>x</mi>
                <mn>1</mn>
                <mn>2</mn>
              </msubsup>
              <mo>&it;</mo>
              <msubsup>
                <mi>y</mi>
                <mn>1</mn>
                <mn>2</mn>
              </msubsup>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <msub>
                <mi>x</mi>
                <mn>1</mn>
              </msub>
              <mo>&it;</mo>
              <msub>
                <mi>y</mi>
                <mn>1</mn>
              </msub>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <msub>
                <mi>x</mi>
                <mn>1</mn>
              </msub>
              <mo>&it;</mo>
              <msub>
                <mi>y</mi>
                <mn>1</mn>
              </msub>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&vellip;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <msubsup>
                <mi>x</mi>
                <mi>n</mi>
                <mn>2</mn>
              </msubsup>
              <mo>&it;</mo>
              <msubsup>
                <mi>y</mi>
                <mi>n</mi>
                <mn>2</mn>
              </msubsup>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <msub>
                <mi>x</mi>
                <mi>n</mi>
              </msub>
              <mo>&it;</mo>
              <msub>
                <mi>y</mi>
                <mi>n</mi>
              </msub>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <msub>
                <mi>x</mi>
                <mi>n</mi>
              </msub>
              <mo>&it;</mo>
              <msub>
                <mi>y</mi>
                <mi>n</mi>
              </msub>
            </mrow>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
    <mo>&af;</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>a</mi>
              <mn>1</mn>
            </msub>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&vellip;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <msub>
              <mi>a</mi>
              <mn>5</mn>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&vellip;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
<mathematica-file id="MATHEMATICA-00004" file="US20030004678A1-20030102-M00004.NB"/>
<image id="EMI-M00004" wi="216.027" he="36.9684" file="US20030004678A1-20030102-M00004.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Concisely, this equation can be written as Ma&equals;b. So, the least-squares solution of a is given by:</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>a</italic></highlight>*&equals;(<highlight><italic>M</italic></highlight><highlight><superscript>T</superscript></highlight><highlight><italic>M</italic></highlight>)<highlight><superscript>&minus;1</superscript></highlight><highlight><italic>M</italic></highlight><highlight><superscript>T</superscript></highlight><highlight><italic>b</italic></highlight></in-line-formula></paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Once the ellipse is known, the tip can be determined as one of the intersections of the ellipse with the major axis of the ellipse. </paragraph>
<paragraph id="P-0084" lvl="7"><number>&lsqb;0084&rsqb;</number> 3.2 Tracking the Pointer Tip </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> There are two methods of expediting the process of finding the pointer tip in an image. These methods take advantage of the fact that by looking at previous images, it is possible to determine about where in an image the pointer is. The first of these short cut methods involves a Kalman filtering technique and the second involves a background subtraction method. </paragraph>
<paragraph id="P-0086" lvl="7"><number>&lsqb;0086&rsqb;</number> 3.2.1 Kalman Filtering Technique </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Assuming the position of the tip at time t is p(t), the Kalman filtering technique can be employed to predict the tip position {overscore (p)}(t&plus;1) at time t&equals;1. In a small window, for example 30&times;30 pixels, as many edge points as possible are identified that probably belong to the edge of the tip. This is accomplished by thresholding the gradient and taking advantage of the color of the previous edge of the tracked tip. After that, an ellipse can be fit to these edge pixels to solve the exact tip {overscore (p)}(t&plus;1) for time t&plus;1. </paragraph>
<paragraph id="P-0088" lvl="7"><number>&lsqb;0088&rsqb;</number> 3.2.2 Maintaining Background and Re-initialization </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> An alternate expedited method of detecting the pointer tip location employs a scheme of automatic tracking initialization and tracking recovery. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> More specifically, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, in process action <highlight><bold>702</bold></highlight>, the panel is registered at the beginning of the application, i.e., the position of the panel Q(<highlight><bold>0</bold></highlight>) at time <highlight><bold>0</bold></highlight> is known. The location of the panel is then registered at a subsequent time t, as shown in process action <highlight><bold>702</bold></highlight>. Since at time t, the system can track the panel position Q(t), the homography H(t) between Q(<highlight><bold>0</bold></highlight>) and Q(t) can be easily calculated (process action <highlight><bold>706</bold></highlight>). As shown in process action <highlight><bold>708</bold></highlight>, through the homography H(t), the pixels p<highlight><subscript>t</subscript></highlight>(<highlight><bold>0</bold></highlight>) in the panel at time <highlight><bold>0</bold></highlight> are mapped to the panel at time t as p<highlight><subscript>b</subscript></highlight>(t) by:</paragraph>
<paragraph lvl="0"><in-line-formula>{tilde over (p)}<highlight><subscript>b</subscript></highlight>(t)&equals;H(t){tilde over (p)}<highlight><subscript>t</subscript></highlight>(<highlight><bold>0</bold></highlight>)</in-line-formula></paragraph>
<paragraph id="P-0091" lvl="7"><number>&lsqb;0091&rsqb;</number> This results in a virtual image I<highlight><subscript>0</subscript></highlight>(p<highlight><subscript>b</subscript></highlight>(t)) of the panel that should be observed if there is no pointer tip overlaying it. Subtracting I<highlight><subscript>0</subscript></highlight>(p<highlight><subscript>b</subscript></highlight>(t)) from the current image give a difference image, process action <highlight><bold>710</bold></highlight>. The pointer tip is then determined to likely be located in areas with large color difference in the difference image (process action <highlight><bold>712</bold></highlight>). </paragraph>
<paragraph id="P-0092" lvl="7"><number>&lsqb;0092&rsqb;</number> 4.0 Action Detection and Recognition </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The current system and method simulates clicking and pressing of the buttons of a mouse (or trackball, etc.) by holding the pointer tip in the same position for a prescribed period of time. As such, users can use their fingertip to simulate this clicking and pressing. The message generator in the system gets inputs from an action detector, and issues various mouse and keyboard events, according to the different user input methods. Building on top of these techniques, the system is capable of performing two types of input: virtual mouse and virtual keyboard. The position of the pointer tip can be mapped to the remote display such that a cursor can be simulated. Or a paper with a keyboard pattern printed on it can also be used as a virtual keyboard, by which users can point the keys on the paper to input text. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The present system and method also supports two &ldquo;mouse button&rdquo; pressing modes (clicking mode and dragging modes) and two &ldquo;mouse motion&rdquo; types (absolute and relative). </paragraph>
<paragraph id="P-0095" lvl="7"><number>&lsqb;0095&rsqb;</number> 4.1 Two Mouse Pressing Modes </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The system has two mouse button pressing modes: mode I (clicking mode) simulates the left button down then up automatically and mode II (dragging mode) simulates the left button down until released. In one embodiment, clicking/pressing is simulated by holding the pointer tip in position for a period of time, say 1 second. A state variable S maintains two states: UP and DN, to simulate the two natural state of a button. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The variable S is initialized to be UP. In the clicking mode (mode I), when the system detects that the pointer tip has been at a fixed place for, say, 1 second (or other pre-specified duration), the state variable S is set to DN. After 0.1 second, the state variable S will be automatically set to UP to simulate button release. Appropriate mouse events are generated, and a clicking action is performed. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Obviously, the clicking mode (mode I) has very limited ability of dragging, since the release is automatic. To simulate dragging, mode II uses another state variable, D, to memorize the flip of clicking. When the system detects that the pointer tip has been at a fixed place for, say, 1 second (or other pre-specified duration), the D variable changes its state (from D UP to D DN or from D DN to D UP). When the D-state change from D UP to D DN is detected, a pressing action is detected; when the D-state change from D DN to D UP is detected, a releasing action is detected. Thus, an object in the display can be selected and dragged to a different place. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Note that the clicking event can also be triggered in the dragging mode if the pointer tip stays in the same location twice longer. In one embodiment of the present invention, an icon is provided in a menu bar. By clicking on this icon, the system switches between the dragging and clicking modes. </paragraph>
<paragraph id="P-0100" lvl="7"><number>&lsqb;0100&rsqb;</number> 4.2 Two Mouse Motion Types </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The system can simulate two mouse motion types: absolute and relative. The motion type used would typically be application dependent. In the absolute type, the panel will be mapped to the whole remote display, such that each point in the panel will be mapped to the corresponding point in the display. As previously discussed, this motion type needs very accurate tracking, since a small tracking error of the panel and pointer tip will be magnified. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> The relative motion type is much less sensitive to the tracking accuracy, since the cursor is controlled by the relative motion of the pointer tip. Assume the motion direction of pointer tip is d<highlight><subscript>p</subscript></highlight>(t) at time t. The moving direction of the cursor will be d<highlight><subscript>d</subscript></highlight>(t)&equals;H(t)d<highlight><subscript>p</subscript></highlight>(t). The speed of cursor motion is determined by the velocity of the pointer tip, i.e., &Dgr;<highlight><subscript>d</subscript></highlight>&equals;&agr;&par;v<highlight><subscript>p</subscript></highlight>&verbar;, where &agr; controls the scale of the cursor speed on the display. The relative motion type provides smooth movement of the cursor with small &agr;, due to the non-magnification of tracking error. There could be other relative mouse motion alternatives as well. For instance, the panel can be mapped to a window area centered at a previous cursor position on the remote display. In this method, the center of the panel corresponds to the previous cursor position. When the pointer tip moves from center to left, the cursor will move left. Obviously, the window area could be smaller than the panel in the image, such that the tracking error can be even minimized. </paragraph>
<paragraph id="P-0103" lvl="7"><number>&lsqb;0103&rsqb;</number> 5.0 Working Examples </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Based on the system and method according to the present invention, several working examples were made to demonstrate the capacity of the system. In this section, three such examples are explained: controlling a calculator, drawing a picture with a finger, and inputting text without using any keyboard. </paragraph>
<paragraph id="P-0105" lvl="7"><number>&lsqb;0105&rsqb;</number> 5.1 Controlling a Calculator </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The example of controlling a calculator demonstrated the accuracy and stability of the system. The calculator, with around 30 buttons, took a very small part of the area of the remote display. In this working embodiment, a user freely used his fingertip to click any buttons or menus of the calculator, as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. The tracking error was less than 1 pixel, and the motion of the cursor was very smooth. </paragraph>
<paragraph id="P-0107" lvl="7"><number>&lsqb;0107&rsqb;</number> 5.2 Finger Painting </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The finger painting application demonstrated different mouse button pressing modes. In Paint&reg;, a Microsoft Windows&reg; application, a user used his finger to select tools and draw. A stability study showed that users learned quickly how to draw a picture and control the remote display with their finger using the system and method according to the present invention. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a snapshot of the display while a user was finishing painting &ldquo;hello world&rdquo;. The left window displays the panel and the hand viewed from the camera. </paragraph>
<paragraph id="P-0109" lvl="7"><number>&lsqb;0109&rsqb;</number> 5.3 Virtual Keyboard </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> The virtual keyboard application demonstrated that the physical keyboard can be replaced by a printed virtual keyboard using the system and method according to the present invention. A keyboard pattern was printed on the panel, which is shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. When a user pointed to any of the keys on the panel, a key-down message was sent to the operating system, such that the current active application received such key. For example, Microsoft Corporation&apos;s Windows Notepad&reg; was used to receive text input by the user. <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a snapshot of the display while a user was inputting &ldquo;hello world. THANK YOU&rdquo; with the virtual keyboard. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> There are many examples of how the system and method according to the present invention could be used. For instance, in a smart room, the user may want to control a remote, large display, but he is on a sofa instead of in front of the computer such that a mouse and keyboard may not be accessible. In such a situation, he may pick up an arbitrary paper and move his finger or pen on the paper to drive a cursor. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> In another example, several people may be having a discussion in a meeting room using a large display. They may need to draw some pictures to show their ideas. However, it is unrealistic to facilitate every user with a mouse and a keyboard. Again, each user may pick up any paper and use their fingers to draw their ideas which will be shown on the large display. By this means, a more immersive discussion can be achieved. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In yet another example, in a large lecture room, the lecturer may need to write down something on a small whiteboard. However, the audience, sometimes a remote audience, may not be able to see clearly what he writes. Due to the constraints of the bandwidth, it may not be feasible to broadcast a video of the writing. In this situation, the present invention could be used to analyze what the lecturer writes and display it on a remote display or displays. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The foregoing description of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">Wherefore, having thus described the present invention, what is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-implemented process for using a quadrangular panel and a pointer overlaying the panel to control a remote display, comprising using a computer to perform the following process actions: 
<claim-text>inputting an image of a quadrangular panel and a pointer; </claim-text>
<claim-text>locating the position of the quadrangular panel in said image; </claim-text>
<claim-text>computing a projective mapping between the coordinates of said image and the coordinates of at least one remote display; </claim-text>
<claim-text>locating a tip of the pointer in said image; and </claim-text>
<claim-text>determining coordinates on the remote display corresponding to the location of the tip of the pointer on the quadrangular panel as depicted in the image using said projective mapping. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the process action of locating the position of the panel in said image comprises the process action of using a color intensity gradient to locate the edges of the panel in said image. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the process action of locating the position of the panel in said image comprises the process action of using previous available panel position data to limit the search area of the panel in the image by searching for panel edge segments in a prescribed range about each previous panel corner. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the process action of locating the position of the panel comprises finding the location of the corners of the panel by finding the location where the edges of the panel intersect. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the location of the corners are defined in terms of sub-pixels. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the process action of locating the position of the quadrangular panel in said image comprises the process actions of: 
<claim-text>locating the four sides of the panel by scanning the image and determining the four lines corresponding to the largest gradients in color and intensity in the image of the panel over a prescribed threshold; and </claim-text>
<claim-text>locating the four corners of the panel in the image by specifying each corner as an intersection of two sides. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the process action of computing a projective mapping between the coordinates of said image and the coordinates of at least one remote display comprises: 
<claim-text>determining a homography from at least four pairs of image-remote display correspondences. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the process action of determining a homography from at least four pairs of image-remote display correspondences comprises a process action of mapping the four corners of the panel in the image to the four corners of the at least one remote display. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the action of locating the pointer tip comprises the actions of: 
<claim-text>scanning the image in a horizontal fashion to determine the pixel location where the color intensity of the panel changes significantly on a scan line by scan line basis starting from the top of the identified panel location in the image; </claim-text>
<claim-text>designating the location in each scanned line where the color intensity of the panel changes significantly as a pointer edge point; </claim-text>
<claim-text>fitting an elliptical curve through the pointer edge points; </claim-text>
<claim-text>determining a major axis of the elliptical curve; and </claim-text>
<claim-text>designating the location of the pointer tip as the location in the image where the major axis of the elliptical curve intersects the boundary of the elliptical curve. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> the action of locating the location of the pointer tip comprises the action of using previous pointer tip position data to limit the search for the new pointer tip location to within a prescribed area. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the prescribed area is 30 by 30 pixels. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising the process action of using a Kalman filter to refine indicator tip location. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the process action of determining the position of the tip of the indicator on the panel from the images of the panel comprises an action of mapping the location of the pixel of the image corresponding to the indicator tip to the corresponding remote display coordinates using the projective mapping. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the location of the pointer tip is defined in sub-pixels. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the process action of determining coordinates on the remote display corresponding to the location of the tip of the pointer on the quadrangular panel as depicted in the image using said projective mapping further comprises the process action of determining the coordinates on more than one remote display. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the process actions of 
<claim-text>comparing the pointer tip location to a previous pointer tip location; 
<claim-text>interpreting the pointer tip location; and </claim-text>
<claim-text>using the pointer tip position to control the position of a system indicator. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the process action of interpreting the pointer tip location comprises interpreting the pointer tip location to simulate a mouse and wherein said system indicator is a mouse curser. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the process action of interpreting the pointer tip location comprises the process action of interpreting the pointer tip location to simulate a keyboard and wherein said system indicator is a keyboard. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the process action of interpreting the pointer tip location to simulate a mouse comprises the process actions of 
<claim-text>simulating two mouse button pressing modes; and </claim-text>
<claim-text>simulating two mouse motion types. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the process action of simulating two mouse button pressing modes comprises: 
<claim-text>simulating a clicking mode which simulates a left mouse button down and then up automatically; and </claim-text>
<claim-text>simulating a dragging mode which simulates the left button down until released. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the clicking mode is simulated by the following process actions: 
<claim-text>designating a state variable, S, that maintains two states, up and down, to simulate the nature state of a button; </claim-text>
<claim-text>initializing the state variable S to up; </claim-text>
<claim-text>setting the state variable S to down when the pointer tip location has been at a fixed place for a prescribed first period of time to simulate mouse button depression; and </claim-text>
<claim-text>automatically setting the state variable to S to up after a second prescribed period of time to simulate mouse button release. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the first prescribed period of time is 1 second and the second prescribed period of time is 0.1 second. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the dragging mode is simulated by the following process actions: 
<claim-text>designating a state variable, D, that maintains two states, up and down, to simulate the nature state of a button; </claim-text>
<claim-text>initializing the state variable D to the opposite of the state of variable S; </claim-text>
<claim-text>changing the state variable D to when the pointer tip location has been at a fixed place for a prescribed third period of time and wherein 
<claim-text>when a D-state change from up to down is detected a mouse button pressing action is simulated, and </claim-text>
<claim-text>when a D-state change from down to up is detected a mouse button pressing releasing action is simulated. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein the third prescribed period of time is 1 second. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the absolute mouse motion is simulated by mapping the panel to the whole at least one remote display. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the relative mouse motion is determined by the process action of measuring the velocity of the pointer tip. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the process action of determining a homography from at least four pairs of image-remote display correspondences comprises a process action of mapping the four corners of the panel in the image to the four corners of an area less than the at least one remote display. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> further comprising pointer tip tracking reinitialization process actions comprising: 
<claim-text>registering the panel location in a first image at time T&equals;0 where T is the beginning of an application; </claim-text>
<claim-text>registering the panel location in a second image at some subsequent time T&plus;1; </claim-text>
<claim-text>calculating the homography between the panel location in said first and second images at time T&equals;0 and time T&plus;1; </claim-text>
<claim-text>using the homography to map image pixels in the panel at time T&equals;0 to time T&equals;T&plus;1 resulting in a virtual image that would be observed when there is no pointer overlaying the panel; </claim-text>
<claim-text>subtracting the virtual image from a third input image to give a difference image; </claim-text>
<claim-text>determining the areas with large color change in the difference image; and </claim-text>
<claim-text>searching for the tip pointer by fitting an elliptic curve to the edges. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A system for using a quadrangular panel and a pointer overlaying the panel to control a remote display using a camera, the system comprising: 
<claim-text>a camera positioned so as to have a view of the quadrangular panel; </claim-text>
<claim-text>a general purpose computing device; and </claim-text>
<claim-text>a computer program comprising program modules executable by the computing device, wherein the computing device is directed by the program modules of the computer program to, 
<claim-text>input images of the panel from the camera; </claim-text>
<claim-text>locate a quadrangular panel in said images; </claim-text>
<claim-text>compute a projective mapping between the images and the coordinates of at least remote display to determine the remote display coordinates of a point in the images; </claim-text>
<claim-text>locate a pointer tip superimposed on the panel in the images; and </claim-text>
<claim-text>determine the coordinates in the images on the remote display corresponding to the location of the tip of the pointer on the panel as depicted in the image using the projective mapping. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the program module for computing a projective mapping comprises a sub-module for determining a homography from at least four pairs of image-remote display correspondences. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the sub-module for determining a homography comprises a module for identifying the screen coordinates of the four corners of the remote display and detecting corresponding points on an image of the panel via an edge detection procedure. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the module for locating the four corners of the image of the panel comprises: 
<claim-text>locating the four sides of the panel by determining four lines corresponding to the four largest gradients in color and intensity in the image of the panel; and </claim-text>
<claim-text>locating the four corners of the panel in the image by specifying each corner as the location of the intersection of two lines. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The process of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> further comprising a process action for using the determined position of the tip of the indicator to control the position of a system indicator. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A computer-readable medium having computer-executable instructions for a vision-based gesture interface to control a remote display using a camera, said computer-executable instructions comprising: 
<claim-text>inputting an image of a quadrangular panel and a pointer; </claim-text>
<claim-text>locating the position of the quadrangular panel in said image; </claim-text>
<claim-text>computing a projective mapping between the coordinates of said image and the coordinates of at least one remote display; </claim-text>
<claim-text>locating a tip of the pointer in said image; and </claim-text>
<claim-text>determining coordinates on the remote display corresponding to the location of the tip of the pointer on the quadrangular panel as depicted in the image using said projective mapping. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A system for providing a mobile input device comprising: 
<claim-text>a video input of a quadrangular-shaped panel; </claim-text>
<claim-text>a panel tracker which tracks said quadrangle-shaped panel by outputting the positions of its four corners; </claim-text>
<claim-text>a pointer tip tracker that identifies the location of a pointer on said panel; </claim-text>
<claim-text>an action/gesture detector that detects the location of the pointer on the panel; </claim-text>
<claim-text>and a remote display that is controlled by said panel tracker, said pointer tracker and said action detector. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein the pointer tip location coordinates are mapped to the coordinates of said remote display using a homography. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein said pointer tip tracker further comprises: 
<claim-text>a curve fitter that fits an ellipse to the edge points of the pointer tip. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein said pointer tip tracker further comprises a color tracker. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The color tracker of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the color tracker locates a potential pointer tip region that matches the predefined color tip model when no tip is being tracked. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The color tracker of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the color tracker further comprises a predefined color tip model to help locate said tip in said image. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The color tracker of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the color tracker further comprises a color tip model learned from previous pointer tip location data to help locate said tip in said image.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004678A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004678A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004678A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004678A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004678A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004678A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004678A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004678A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004678A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004678A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
