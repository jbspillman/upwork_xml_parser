<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002341A1-20030102-M00001.NB SYSTEM "US20030002341A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030002341A1-20030102-M00001.TIF SYSTEM "US20030002341A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-M00002.NB SYSTEM "US20030002341A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030002341A1-20030102-M00002.TIF SYSTEM "US20030002341A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-M00003.NB SYSTEM "US20030002341A1-20030102-M00003.NB" NDATA NB>
<!ENTITY US20030002341A1-20030102-M00003.TIF SYSTEM "US20030002341A1-20030102-M00003.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00000.TIF SYSTEM "US20030002341A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00001.TIF SYSTEM "US20030002341A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00002.TIF SYSTEM "US20030002341A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00003.TIF SYSTEM "US20030002341A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00004.TIF SYSTEM "US20030002341A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00005.TIF SYSTEM "US20030002341A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002341A1-20030102-D00006.TIF SYSTEM "US20030002341A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002341</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09888252</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010622</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G11C011/34</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>365</class>
<subclass>185190</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>CHARGING A CAPACITANCE OF A MEMORY CELL AND CHARGER</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Kerry</given-name>
<middle-name>D.</middle-name>
<family-name>Tedrow</family-name>
</name>
<residence>
<residence-us>
<city>Folsom</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention is in the field of charging a capacitance of a memory cell. Embodiments of the present invention program a memory cell by determining programming pulses to be used to program the memory cell based on a target state and the memory cell&apos;s response to previous program pulses. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is in the field of charging a capacitance of a memory cell. More particularly, embodiments of the present invention can set a threshold voltage of a memory cell to represent data. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> One factor of the size, speed, and power consumption of memory can be the programming algorithm. A programming algorithm is an algorithm that can store a charge on a floating gate of a transistor, changing the threshold voltage of the transistor. Multi-level-cell (MLC) programming algorithms may program the transistor from an erase state, a minimum charge range, to more than one program states. Each program state may be a range of charge on the floating gate and can be separated by an error range to allow a read circuit to distinguish program states. Further, the width of each program state can depend on the accuracy of the programming algorithm and the width of each error range can depend on the accuracy of the reading circuitry when considering the effects of noise. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Programming algorithms may apply programming pulses to a transistor in saturation mode to reduce the chance of overshooting a target state. Applying programming pulses to the transistor can increase the charge on the floating gate to a target threshold voltage, a charge level within the target state. When the programming pulses are applied so the transistor remains in saturation mode, the charge increases logarithmically to program the transistor slowly. The chance of overshooting the target state can be reduced by programming in saturation mode at the cost of applying extra pulses. However, overshooting a target state can slow down the speed of the memory even more since the overshoot can require a row of transistors to be erased and reprogrammed. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Programming algorithms program a transistor, for example, by applying one-microsecond programming pulses using a gate voltage that is increased by 250 millivolts for each pulse until the transistor verifies as having a charge within the target state. However, algorithms may be data dependent because program states that require a greater charge can also require more programming pulses. Each extra programming pulse requires more time and energy. Thus, the amount of time and energy expended to store data depends on the data to be stored.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF FIGURE DESCRIPTIONS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In the accompanying drawings like references may indicate some similarities between elements: </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>e </italic></highlight>depict flow charts to program a memory cell. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>e </italic></highlight>depict other flow charts to program a memory cell. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts an apparatus to program a transistor. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a memory device to store and sense data. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depict a machine-readable medium comprising instructions to program a memory cell. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a wireless communications device.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF EMBODIMENTS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The following is a detailed description of example embodiments of the invention depicted in the accompanying drawings. The example embodiments are in such detail as to clearly communicate the invention. However, the amount of detail offered is not intended to limit the anticipated variations of embodiments. The variations of embodiments anticipated are too numerous to discuss individually so the detailed descriptions below are designed to make such embodiments obvious to a person of ordinary skill in the art. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In particular, the following describes method, apparatus, and machine-readable medium embodiments to charge a capacitance of a memory cell. Referring to <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>e, </italic></highlight>example flow charts for embodiments are shown. The embodiments depicted comprise determining a programming pulse from a measurement of a memory cell <highlight><bold>100</bold></highlight> and applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>150</bold></highlight>. Determining a programming pulse from a measurement of a memory cell <highlight><bold>100</bold></highlight> may be designed to determine a programming pulse voltage for the bit line that can charge the capacitance of the memory cell to a desired threshold voltage. Determining a programming pulse from a measurement of a memory cell <highlight><bold>100</bold></highlight> can comprise determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>102</bold></highlight> and determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>102</bold></highlight>, in the present embodiment, may comprise applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>105</bold></highlight>, determining a change in threshold voltage of the transistor <highlight><bold>110</bold></highlight>, and storing the change in threshold voltage <highlight><bold>115</bold></highlight>. Applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>105</bold></highlight> can allow measurement of the change in threshold voltage to the change in bit line voltage for that transistor without overshooting the target state. To avoid overshooting the target state, the variability of the program rate of the transistor should be considered. Transistor programming rates can vary up to 10 times over a memory array. Applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>105</bold></highlight> can comprise determining a number of default programming pulses to apply and increasing the bit line voltage from pulse to pulse until noise margin is exceeded. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Determining a change in threshold voltage of the transistor <highlight><bold>110</bold></highlight> can be used to tailor the programming steps to a particular transistor. The present embodiment programs the transistor within its linear mode so once a transistor&apos;s change in threshold voltage is known for a known change in bit line voltage, the transistor can be programmed within five or six pulses without data dependency, i.e. regardless of the target state. When more than one transistor is programmed at once each memory cell can receive an independently determined programming pulse. Determining a change in threshold voltage of the transistor <highlight><bold>110</bold></highlight> can comprise determining an initial threshold voltage and determining a change in threshold voltage from the threshold voltage after applying a default programming pulse. Storing the change in threshold voltage <highlight><bold>115</bold></highlight> is designed to retain the measured threshold voltage to use as an initial threshold voltage for the next programming pulse. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>1</bold></highlight><highlight><italic>d, </italic></highlight>a detailed flow chart for determining a programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>130</bold></highlight> is shown. Determining a programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>130</bold></highlight>, for this embodiment, may comprise determining an intermediate threshold voltage wherein the intermediate threshold voltage is less than a target threshold voltage and greater than a present threshold voltage <highlight><bold>135</bold></highlight> and determining the programming pulse to change from the present threshold voltage to the intermediate threshold voltage <highlight><bold>140</bold></highlight>. Once the change in threshold voltage per change in bit line voltage is determined, a default programming pulse is no longer used but a pulse is determined to bring the threshold voltage to an intermediate threshold voltage. The intermediate threshold voltage may be chosen to avoid overshooting the target state. An intermediate threshold voltage can be the difference between the target threshold voltage and the present threshold voltage multiplied by a constant such as one half. Setting the intermediate threshold voltage this way may minimize the number of pulses necessary to reach the target state. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>e, </italic></highlight>applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>150</bold></highlight> comprises programming substantially within a linear mode of the transistor of the memory cell <highlight><bold>155</bold></highlight> and applying a sufficiently low programming pulse to avoid overshooting a target state <highlight><bold>160</bold></highlight>. Programming substantially within a linear mode of the transistor of the memory cell <highlight><bold>155</bold></highlight> can reduce the number of pulses and the length of the pulses for programming a transistor. In linear mode, a transistor can have a large threshold voltage change for a short pulse of approximately 100 nanoseconds or less. Applying a sufficiently low programming pulse to avoid overshooting a target state <highlight><bold>160</bold></highlight> may be accomplished in the present embodiment by applying the programming pulse obtained by determining an intermediate threshold voltage wherein the intermediate threshold voltage is less than a target threshold voltage and greater than a present threshold voltage <highlight><bold>135</bold></highlight> and determining the programming pulse to change from the present threshold voltage to the intermediate threshold voltage <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>e, </italic></highlight>other embodiments to charge a capacitance of a memory cell are shown. These embodiments can be designed to adapt to a specific memory cell and the conditions under which it operates so it is well suited for use in flash. These embodiments can comprise determining a programming pulse from a measurement of a memory cell <highlight><bold>200</bold></highlight>, applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>260</bold></highlight>, and verifying a program state of the memory cell <highlight><bold>280</bold></highlight>. Determining a programming pulse from a measurement of a memory cell <highlight><bold>200</bold></highlight> can determine a sequence of programming pulses to apply to the bit line such that the capacitance of the transistor of the memory cell is charged until the transistor is in a target state. In the present embodiment, determining a programming pulse from a measurement of a memory cell <highlight><bold>200</bold></highlight> may comprise determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>202</bold></highlight> and determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>202</bold></highlight> may comprise applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>205</bold></highlight>, determining a change in threshold voltage of the transistor <highlight><bold>210</bold></highlight>, and storing the change in threshold voltage <highlight><bold>215</bold></highlight>. Applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>205</bold></highlight> may be accomplished by storing a default value for a programming pulse in a default programming pulse memory. In some instances, a slow programming transistor may not have a discernable threshold voltage change for a default bit line voltage. For example, the change in threshold voltage of the transistor may be sufficiently small relative to noise that the measured change in threshold voltage is predominantly noise. Therefore, many embodiments of the present invention incorporate a minimum threshold voltage change below which the change in threshold voltage can be ignored. In these embodiments, more than one default programming pulse may be implemented. When the change in threshold voltage is below the minimum threshold voltage change, an additional default programming pulse can be applied. In some embodiments, additional default pulses may comprise an increased bit line voltage for each pulse to reduce the number of pulses required to achieve the desired minimum threshold voltage change. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Determining a change in threshold voltage of the transistor <highlight><bold>210</bold></highlight> can measure the charge resulting from electron tunneling, hot electron injection or hot hole injection. In some transistors, hot electron injection and hot hole injection may place a negative and positive charge on a floating gate of the transistor, respectively. The charge on the gate creates a channel between the source and the drain of the transistor to support a current. Flash memory typically comprises a method of comparing the drain-to-source current to a reference current or a voltage of the transistor to a reference voltage to determine the transistor state. In some embodiments of the present invention, the charge on a capacitance of the transistor can be determined by measuring a current or a voltage, comparing the current or voltage to more than one references, and interpolating between the more than one references. Storing the change in threshold voltage <highlight><bold>215</bold></highlight>, in the present embodiment, can be used for determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>220</bold></highlight>. The stored threshold voltage can be used as a present threshold voltage and/or a prior threshold voltage. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a</italic></highlight>-<highlight><italic>d, </italic></highlight>an embodiment for determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>220</bold></highlight> is shown. Determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>220</bold></highlight> may comprise determining an intermediate threshold voltage by multiplying a difference between a present threshold voltage and a target threshold voltage by a constant <highlight><bold>225</bold></highlight> and determining a change in bit line voltage as a function of target threshold voltage, present threshold voltage, prior threshold voltage, and prior bit line voltage <highlight><bold>235</bold></highlight>. Determining a change in bit line voltage as a function of target threshold voltage, present threshold voltage, prior threshold voltage, and prior bit line voltage <highlight><bold>235</bold></highlight> may comprise determining a rate correction, the desired change in programming rate for the next pulse relative to the previous pulse, as a function of the intermediate threshold voltage, present threshold voltage and prior threshold voltage, and determining the change in bit line voltage from the rate correction. For example, a rate correction factor of one half indicates that the next programming pulse should program at one half the rate as the previous pulse. Determining an intermediate threshold voltage by multiplying a difference between a present threshold voltage and a target threshold voltage by a constant <highlight><bold>225</bold></highlight>, in the present embodiment, can comprise retrieving the present threshold voltage from memory, subtracting it from the target threshold voltage and multiplying the difference by one third. The difference may instead be divided by three to avoid overshooting the target threshold state. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Determining a rate correction as a function of the target threshold voltage, may comprise, for example taking the difference between the intermediate threshold voltage and the present threshold voltage and dividing by the difference between the present threshold voltage and a prior threshold voltage. When one default programming pulse is applied, the difference between the present threshold voltage and the prior threshold voltage can be the change in threshold voltage. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Since each step in this embodiment can be the difference between the target threshold voltage and the present threshold voltage divided by three, rate correction shows a reduced change in threshold voltage from each pulse to the subsequent pulse except from the default pulse to next pulse where the change in threshold voltage may increase. This deceleration can reduce the chance of overshooting the target state. Methods that repeat the same programming pulse can accelerate the change in threshold voltage until the target threshold voltage is reached, increasing the chance of overshooting the target threshold voltage. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Determining the rate correction as a function of a change in bit line voltage can comprise determining the rate correction as a function of the bit line voltage sensitivity of the transistor. For example, a bit line voltage sensitivity for a transistor used to store data can be two times for every 200 millivolts, i.e. the programming rate increases two times for every 200 millivolts increase in bit line voltage. Thus, the rate correction for a transistor as a function of the change in bit line voltage can be two raised to the power of the ratio of the change in bit line voltage to 200 millivolts. The programming rate can vary with the applied bit line voltage during programming and from one transistor to the next. Equating the rate correction required to achieve the intermediate threshold voltage and the rate correction as a function of the change in bit line voltage can provide a relationship between a change in threshold voltage and a change in bit line voltage. Thus, a programming pulse to change from a present threshold voltage to an intermediate threshold voltage can be calculated. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>e, </italic></highlight>an embodiment for applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>260</bold></highlight> and verifying a program state of the memory cell <highlight><bold>280</bold></highlight> is shown. In this embodiment, the address of a transistor from a memory array may be latched and the programming pulse is applied to the transistor&apos;s bit line. Applying the programming pulse to the transistor <highlight><bold>260</bold></highlight> may comprise applying a sufficiently low programming pulse to avoid overshooting a target state <highlight><bold>265</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Applying a sufficiently low programming pulse to avoid overshooting a target state <highlight><bold>265</bold></highlight> may be designed to apply a programming pulse with a voltage low enough to fall within the target state from any threshold voltage below the voltage range of the target state. For instance, when the program state has a range of one half volt and the threshold voltage is just less than the program state, the increase in threshold voltage can be less than one half volt. Further, when the target threshold voltage is in the middle of the voltage range for the target state, the increase in threshold voltage can be less than 250 millivolts. After the programming pulse is applied, the transistor state may be checked by verifying a program state of the memory cell <highlight><bold>280</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Verifying a program state of the memory cell <highlight><bold>280</bold></highlight> can determine whether the target state is reached and, in some embodiments, determine the present threshold voltage. Determining the present threshold voltage can comprise measuring the present threshold voltage. In many embodiments, a maximum number of programming pulses can be chosen and when the transistor fails to verify after that maximum number of programming pulses, such as 25, an error may be returned for that transistor. Some embodiments comprise Verifying a program state of the memory cell <highlight><bold>280</bold></highlight> only as a fail-safe mechanism but several embodiment presume that the target state has been reached after applying a calculated number of pulses. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Some alternative embodiments may comprise a programming pulse having more than one pulse. In some of these embodiments, the pulses of a programming pulse can comprise pulses of different voltages. For example, the programming pulse can comprise three pulses with voltages of decreasing magnitude and the threshold voltage is measured after the third pulse. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an embodiment <highlight><bold>370</bold></highlight> to charge a floating gate of a transistor <highlight><bold>330</bold></highlight> is shown. In this embodiment, programming pulse determiner <highlight><bold>340</bold></highlight> may comprise a voltage change relationship determiner <highlight><bold>300</bold></highlight> coupled to a transistor <highlight><bold>330</bold></highlight>. Further, the transistor <highlight><bold>330</bold></highlight> can be coupled to a programming pulse applicator <highlight><bold>320</bold></highlight>. The voltage change relationship determiner <highlight><bold>300</bold></highlight> may comprise a present threshold voltage determiner <highlight><bold>305</bold></highlight>. The voltage change relationship determiner <highlight><bold>300</bold></highlight> may determine a relationship between a change in threshold voltage of the transistor <highlight><bold>330</bold></highlight> and a change in bit line voltage, corresponding to the programming pulse. Further, the voltage change relationship determiner <highlight><bold>300</bold></highlight> of the present embodiment may comprise a prior threshold voltage memory <highlight><bold>355</bold></highlight>. The prior threshold voltage memory <highlight><bold>355</bold></highlight> can store a threshold voltage of the transistor <highlight><bold>330</bold></highlight> prior to applying a programming pulse to facilitate the rate correction determiner <highlight><bold>345</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Upon determining the relationship between the change of threshold voltage and the change of bit line voltage, the programming pulse determiner <highlight><bold>340</bold></highlight> can determine a change in bit line voltage to attain a specific threshold voltage. The programming pulse determiner <highlight><bold>340</bold></highlight> of the present embodiment comprises a target threshold voltage memory <highlight><bold>360</bold></highlight>. The target threshold voltage memory <highlight><bold>360</bold></highlight> can contain pre-determined threshold values for each of the possible cell states. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The programming pulse determiner <highlight><bold>340</bold></highlight> can also comprise an intermediate threshold voltage determiner <highlight><bold>350</bold></highlight>. The intermediate threshold voltage determiner <highlight><bold>350</bold></highlight> may determine a voltage less than the target threshold voltage but greater than the present threshold voltage. In this manner, the target threshold voltage can be approached by applying a programming pulse calculated to reach the intermediate threshold voltage. The intermediate threshold voltage can be designed to avoid overshooting the target threshold voltage. In the present embodiment, the intermediate threshold voltage may be determined by multiplying the difference between the target threshold voltage and the present threshold voltage by two thirds. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The rate correction determiner <highlight><bold>345</bold></highlight> can determine a rate correction as a function of target voltage and a rate correction as a function of change in bit line voltage. Upon determining each rate correction function, the programming pulse determiner <highlight><bold>340</bold></highlight> can determine a programming pulse to apply to the bit line of the transistor <highlight><bold>330</bold></highlight> via the programming pulse applicator <highlight><bold>320</bold></highlight>. For the first programming pulse, the programming pulse determiner <highlight><bold>340</bold></highlight> may select a default programming pulse represented in the default programming pulse memory <highlight><bold>310</bold></highlight>. When the programming pulse results in a change in threshold voltage below a minimum change in threshold voltage, the programming pulse determiner <highlight><bold>340</bold></highlight>, in this embodiment, can be designed to select a second default programming pulse represented in the default programming pulse memory <highlight><bold>310</bold></highlight> with a greater voltage. The increased voltage may increase the change in threshold voltage of the transistor <highlight><bold>330</bold></highlight> to be discernable from noise. When the change in threshold voltage after a default programming pulse is discernable from noise, the programming pulse determiner can calculate a programming pulse from the rate correction as a function of target threshold voltage and the rate correction as a function of change in bit line voltage. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The programming pulse determiner <highlight><bold>340</bold></highlight> may calculate a rate correction as the difference between the intermediate voltage and the present threshold voltage divided by the difference between the present threshold voltage and a prior threshold voltage. The prior threshold voltage can be stored in the prior threshold voltage memory <highlight><bold>355</bold></highlight>. After applying a default programming pulse, in some of these embodiments, the difference between the prior bit line voltage and the next bit line voltage may be calculated from the rate correction functions. For example, for a linear programming rate of two:  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>change</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mi>in</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mi>bit</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mi>line</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mi>voltage</mi>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>100</mn>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>millivolts</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>*</mo>
          <msub>
            <mi>Log</mi>
            <msup>
              <mn>2</mn>
              <mrow>
                <mn>1</mn>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
            </msup>
          </msub>
          <mo>&it;</mo>
          <mrow>
            <mo>&AutoLeftMatch;</mo>
            <mrow>
              <mo>(</mo>
              <mfrac>
                <mrow>
                  <mrow>
                    <mi>intermediate</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>threshold</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>voltage</mi>
                  </mrow>
                  <mo>-</mo>
                  <mrow>
                    <mi>present</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>threshold</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>voltage</mi>
                  </mrow>
                </mrow>
                <mrow>
                  <mrow>
                    <mi>present</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>threshold</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>voltage</mi>
                  </mrow>
                  <mo>-</mo>
                  <mrow>
                    <mi>prior</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>threshold</mi>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>voltage</mi>
                  </mrow>
                </mrow>
              </mfrac>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030002341A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="31.9221" file="US20030002341A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the programming pulse determiner <highlight><bold>340</bold></highlight> can be coupled to the programming pulse applicator to communicate the determined programming pulse. The programming pulse applicator <highlight><bold>320</bold></highlight>, in the present embodiment, may comprise a linear mode programming pulse generator <highlight><bold>325</bold></highlight>. The linear mode programming pulse generator <highlight><bold>325</bold></highlight> can be coupled to the transistor <highlight><bold>330</bold></highlight> to apply a programming pulse to the bit line of the transistor <highlight><bold>330</bold></highlight>. The linear mode programming pulse generator <highlight><bold>325</bold></highlight> can also be designed to maintain the transistor <highlight><bold>330</bold></highlight> substantially in linear mode. Many of these embodiments comprise a linear mode programming pulse generator <highlight><bold>325</bold></highlight> designed to output a programming pulse of a specific pulse length dependent upon the gate voltage applied to the gate of the transistor <highlight><bold>330</bold></highlight>. For example, the present embodiment typically applies a pulse length of 100-nanoseconds for a gate voltage of approximately 12 volts. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The programming pulse applicator <highlight><bold>320</bold></highlight> may also comprise a default programming pulse memory <highlight><bold>310</bold></highlight> to store data representing a default programming pulse designed to change the threshold voltage of the transistor <highlight><bold>330</bold></highlight>. This change of the threshold voltage can facilitate the determination of a relationship between the change in threshold voltage to a change in bit line voltage. In the present embodiment, the default programming pulse memory <highlight><bold>310</bold></highlight> may comprise representations for more than one default programming pulse of more than one voltage. In some embodiments the length of the default programming pulse can be increased. By changing the default programming pulse, a minimum change in threshold voltage of the transistor can be obtained when a first programming pulse does not change the threshold voltage sufficiently. For instance, slow programming transistors or aging transistors may require the additional default programming pulse to change threshold voltage sufficiently to be measured. Of course, the use of additional default programming pulses can also be used when the method of measuring the threshold voltage is not sufficiently accurate to distinguish a change in threshold voltage from noise. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Alternate embodiments may comprise a programming pulse applicator that can adjust the pulse length, while maintaining the transistor <highlight><bold>330</bold></highlight> in linear mode. In some of these embodiments, the pulse length can be adjusted when a default programming pulse does not create a change in threshold voltage above a minimum threshold voltage change since a minimum threshold voltage change may be necessary to overcome the effects of noise and other such factors. Some of these embodiments can modify the pulse length when the threshold voltage does not reach a selected intermediate threshold voltage after a programming pulse. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, there is shown an alternative apparatus embodiment comprising a read-program controller <highlight><bold>420</bold></highlight>, a memory array controller <highlight><bold>440</bold></highlight>, a sensing circuit <highlight><bold>460</bold></highlight>, and a memory array <highlight><bold>490</bold></highlight>. The read-program controller <highlight><bold>420</bold></highlight> may receive instructions to read, program, or erase a data block and cause the instruction to be performed. For example, the read-program controller <highlight><bold>420</bold></highlight> may receive an instruction to program data at an address corresponding to transistor one <highlight><bold>496</bold></highlight> in the memory array <highlight><bold>490</bold></highlight>. The read-program controller <highlight><bold>420</bold></highlight> comprises an address output <highlight><bold>425</bold></highlight> coupled to the memory array controller <highlight><bold>440</bold></highlight> to communicate the location of a memory cell to the memory array controller <highlight><bold>440</bold></highlight>. The read-program controller <highlight><bold>420</bold></highlight> can comprise a program output <highlight><bold>430</bold></highlight> coupled to the memory array controller <highlight><bold>440</bold></highlight> such that the memory array controller <highlight><bold>440</bold></highlight> can apply the correct voltage to the word line one <highlight><bold>492</bold></highlight> coupled to transistor one <highlight><bold>496</bold></highlight> at the gate and bit line one <highlight><bold>493</bold></highlight> coupled to transistor one <highlight><bold>496</bold></highlight> at the drain. Further, the read-program controller <highlight><bold>420</bold></highlight> can comprise a data output-input <highlight><bold>435</bold></highlight> coupled to the memory array controller <highlight><bold>440</bold></highlight> to communicate data to the memory array controller <highlight><bold>440</bold></highlight> to be stored in transistor one <highlight><bold>496</bold></highlight>. When the read-program controller <highlight><bold>420</bold></highlight> is instructed to read a memory cell, such as transistor one <highlight><bold>496</bold></highlight>, the data output-input <highlight><bold>435</bold></highlight> can receive data from the memory cell via the memory array controller <highlight><bold>440</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the memory array controller <highlight><bold>440</bold></highlight> may comprise a source line output <highlight><bold>400</bold></highlight>. The source line output <highlight><bold>400</bold></highlight> may be designed to supply voltages and power to read, program, and erase data in a memory cell comprising a single transistor, transistor one <highlight><bold>496</bold></highlight>, transistor two <highlight><bold>497</bold></highlight>, transistor three <highlight><bold>498</bold></highlight>, or transistor four <highlight><bold>499</bold></highlight>. The source line output <highlight><bold>400</bold></highlight> can control source line voltage of memory array <highlight><bold>490</bold></highlight>, controlling the voltage applied to the source/drain of transistor one <highlight><bold>496</bold></highlight>, transistor two <highlight><bold>497</bold></highlight>, transistor three <highlight><bold>498</bold></highlight>, or transistor four <highlight><bold>499</bold></highlight>. The memory array controller <highlight><bold>440</bold></highlight> may also comprise a programming pulse determiner <highlight><bold>445</bold></highlight> with a voltage change relationship determiner, a word line output <highlight><bold>455</bold></highlight>, and a programming pulse applicator <highlight><bold>457</bold></highlight>. The memory array controller <highlight><bold>440</bold></highlight> can be designed to latch an address of a memory cell and read, program, or erase the contents of memory cell, such as transistor one <highlight><bold>496</bold></highlight>. For example, the read-program controller <highlight><bold>420</bold></highlight> may receive an instruction to program data at an address corresponding to transistor one <highlight><bold>496</bold></highlight> of the memory array <highlight><bold>490</bold></highlight>. The memory array controller <highlight><bold>440</bold></highlight> can latch the address of transistor one <highlight><bold>496</bold></highlight> by applying the ten volts to word line one <highlight><bold>492</bold></highlight>, for example, and seven volts to the bit line one <highlight><bold>493</bold></highlight>. The source line output <highlight><bold>400</bold></highlight> can receive an instruction to apply zero volts to the source line <highlight><bold>491</bold></highlight>. The address of transistor two <highlight><bold>497</bold></highlight>, transistor three <highlight><bold>498</bold></highlight>, and transistor four <highlight><bold>499</bold></highlight> may not be latched when programming transistor one <highlight><bold>496</bold></highlight> so zero volts may be applied to word line two <highlight><bold>495</bold></highlight> and seven volts may not be applied to bit line two <highlight><bold>494</bold></highlight>. Once the address of transistor one <highlight><bold>496</bold></highlight> is latched, a programming pulse can be applied by the programming pulse applicator <highlight><bold>457</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The voltage change relationship determiner may determine a relationship between a change in threshold voltage of a memory cell, e.g. transistor one <highlight><bold>496</bold></highlight> and the change in bit line voltage, corresponding to the programming pulse. The present embodiment can be designed to apply a default programming pulse to change the threshold voltage of transistor one <highlight><bold>496</bold></highlight>. A relationship between the change in threshold voltage and the programming pulse can then be determined. Upon determining the relationship between the change of threshold voltage and programming pulse, the programming pulse determiner <highlight><bold>445</bold></highlight> can determine a programming pulse to attain a specific threshold voltage. The programming pulse determiner <highlight><bold>445</bold></highlight> may determine the range of voltages within which the threshold voltage must fall and select a target threshold voltage to be used to determine the programming pulse, such as a voltage in the middle of the lower and upper voltages of the range. The programming pulse determiner <highlight><bold>445</bold></highlight> may also determine an intermediate threshold voltage, i.e. a voltage less than the target threshold voltage but greater that the present threshold voltage. In this manner, the target threshold voltage can be approached by applying a programming pulse calculated to change the threshold voltage of transistor one <highlight><bold>496</bold></highlight> to the intermediate threshold voltage. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In the present embodiment, the intermediate threshold voltage may be determined by multiplying the difference between the target threshold voltage and the present threshold voltage by a constant such as two fifths. In some of these embodiments, the constant may vary from one pulse to the next while programming a memory cell. For instance, a memory cell that requires six programming pulses before it is verified as within the target state, the intermediate voltage for the first three pulses may be the difference between target threshold voltage and the present threshold voltage divided by two. This embodiment may determine the remaining pulses with the intermediate voltage as the difference between target threshold voltage and the present threshold voltage divided by three. The reduction in intermediate threshold voltage can reduce the likelihood of overshooting the target threshold voltage even further by reducing the threshold voltage change in subsequent pulses. Some of these embodiments change the intermediate voltage multiplication constant in each successive programming pulse. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the present embodiment may comprise a sensing circuit <highlight><bold>460</bold></highlight>. The sensing circuit <highlight><bold>460</bold></highlight> can determine the threshold of the memory transistor using standard sensing methods. One method couples a fixed gate voltage and bit line voltage to the transistor and compares the current to the currents of reference memory transistors with known threshold voltages. Another method varies the gate of the memory transistor to find the gate voltage at which the transistor current exceeds a predefined value. This gate voltage value is then taken as the threshold voltage of the transistor. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In further embodiments of the present invention, the memory array <highlight><bold>490</bold></highlight> may be broken into blocks having 512 word lines with eight transistors per word line. In several of these embodiments, each transistor may have 16 states. In other embodiments, each transistor has one bit of data. In still further embodiments, the memory array controller <highlight><bold>440</bold></highlight> may be designed to place one bit of data in a memory cell until the amount of data stored reaches a certain level. Then the memory array controller <highlight><bold>440</bold></highlight> may begin storing two bits of data in each memory cell, one or more blocks at a time. Some of these embodiments further begin to store data four bits of data per memory cell when the amount of data stored reaches a certain level. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> machine-readable medium embodiment of the present invention is shown. A machine-readable medium includes any mechanism that provides (i.e. stores and or transmits) information in a form readable by a machine (e.g., a computer), that when executed by the machine, can perform the functions described herein. For example, a machine-readable medium may include read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g. carrier waves, infrared signals, digital signals, etc.); etc.... Several embodiments of the present invention can comprise more than one machine-readable medium depending on the design of the machine. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> This machine-readable medium embodiment <highlight><bold>500</bold></highlight> may comprise instructions for determining a programming pulse from a measurement of a memory cell <highlight><bold>505</bold></highlight>. Determining a programming pulse from a measurement of a memory cell <highlight><bold>505</bold></highlight> can comprise instructions to increase the charge on the capacitance of the memory cell until it reaches a desired charge such that the number of programming pulses required to charge the capacitance is limited and not dependent upon the target state. Determining a programming pulse from a measurement of a memory cell <highlight><bold>505</bold></highlight> can comprise instructions for determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>510</bold></highlight> can comprise applying a default programming pulse to a bit line of a transistor of the memory cell <highlight><bold>515</bold></highlight>, determining a change in threshold voltage of the transistor <highlight><bold>520</bold></highlight>, and storing the change in threshold voltage <highlight><bold>525</bold></highlight>. In the present embodiment, determining a relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>510</bold></highlight> may have instructions designed to determine a threshold voltage change corresponding to a programming pulse. The pulse length of the programming pulse may be chosen so a mathematical relationship relating the programming pulse to the threshold voltage change along with a measurement of a change in threshold voltage to a known programming pulse may be sufficient to determine a relationship. Thus, determining a change in threshold voltage of the transistor <highlight><bold>520</bold></highlight>, can comprise instructions for determining and storing of the initial threshold voltage, as well as, measuring a change in threshold voltage to a known programming pulse. Storing the change in threshold voltage <highlight><bold>525</bold></highlight> can allow the present threshold voltage to be used for further relationship determinations. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the example machine-readable medium embodiment <highlight><bold>500</bold></highlight> further comprises instructions for determining a programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>540</bold></highlight>. Determining a programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage <highlight><bold>540</bold></highlight> may have instructions designed for determining an intermediate threshold voltage by multiplying a difference between a present threshold voltage and a target threshold voltage by a constant <highlight><bold>545</bold></highlight> and determining a change in bit line voltage as a function of target threshold voltage, present threshold voltage, prior threshold voltage, and prior bit line voltage <highlight><bold>555</bold></highlight>. Determining a change in bit line voltage as a function of target threshold voltage, present threshold voltage, prior threshold voltage, and prior bit line voltage <highlight><bold>555</bold></highlight> can comprise determining a rate correction as a function of the target threshold voltage, determining the rate correction as a function of a change in bit line voltage, and determining the change in bit line voltage from the rate correction as a function of the target threshold voltage and the rate correction as a function of a change in bit line voltage. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Determining an intermediate threshold voltage by multiplying a difference between a present threshold voltage and a target threshold voltage by a constant <highlight><bold>545</bold></highlight> can comprise multiplying the difference between the present threshold voltage and the target threshold voltage by one half, to avoid overshooting the target state. Determining a rate correction as a function of the target threshold voltage can comprise dividing the difference between the intermediate threshold voltage and the present threshold voltage by the difference between the present threshold voltage and a prior threshold voltage. The rate correction, per instructions in this embodiment, may have a decreasing change in threshold voltage between pulses. This change can prevent an overshoot of the target state. Determining the rate correction as a function of a change in bit line voltage can comprise determining the rate correction as a function of the linear slope of the transistor. For example, a typical linear slope for a memory cell is two times for every 200 millivolts. Thus, the rate correction for the memory cell, as a function of the change in bit line voltage, may be:  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>rate</mi>
          <mo>&it;</mo>
          <mstyle>
            <mtext>&emsp;</mtext>
          </mstyle>
          <mo>&it;</mo>
          <mi>correction</mi>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mn>2</mn>
          <mo>&it;</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <mrow>
                <mi>change</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>in</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>bit</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>line</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>voltage</mi>
              </mrow>
              <mrow>
                <mn>200</mn>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>millivolts</mi>
              </mrow>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030002341A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="18.96615" file="US20030002341A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> This linear slope, or programming rate, can vary with gate voltage applied during programming and also from one transistor to the next. Instructions for equating rate corrections for determining the change in bit line voltage from the rate correction as a function of the target threshold voltage and the rate correction as a function of a change in bit line voltage can provide a relationship between a change in threshold voltage and a change in bit line voltage:  
<math-cwu id="MATH-US-00003">
<number>3</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mfrac>
          <mrow>
            <mrow>
              <mi>intermediate</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>threshold</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>voltage</mi>
            </mrow>
            <mo>-</mo>
            <mrow>
              <mi>present</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>threshold</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>voltage</mi>
            </mrow>
          </mrow>
          <mrow>
            <mrow>
              <mi>present</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>threshold</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>voltage</mi>
            </mrow>
            <mo>-</mo>
            <mrow>
              <mi>prior</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>threshold</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mi>voltage</mi>
            </mrow>
          </mrow>
        </mfrac>
        <mo>=</mo>
        <mrow>
          <mn>2</mn>
          <mo>&it;</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <mrow>
                <mi>change</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>in</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>bit</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>line</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>voltage</mi>
              </mrow>
              <mrow>
                <mn>200</mn>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>millivolts</mi>
              </mrow>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00003" file="US20030002341A1-20030102-M00003.NB"/>
<image id="EMI-M00003" wi="216.027" he="40.0869" file="US20030002341A1-20030102-M00003.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> With equation (3), a programming pulse to change from a present threshold voltage to an intermediate threshold voltage can be calculated. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the present embodiment further may comprise instructions for applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>580</bold></highlight> and verifying a program state of the memory cell <highlight><bold>590</bold></highlight>. Applying the programming pulse to the memory cell to increase the charge on the capacitance <highlight><bold>580</bold></highlight> can have instructions designed for programming substantially within a linear mode of the transistor of the memory cell <highlight><bold>585</bold></highlight>. Programming substantially within a linear mode of the transistor of the memory cell <highlight><bold>585</bold></highlight> may restrict the pulse length of the programming pulse to, for example, 100 nanoseconds or less. The pulse length can be constant for each programming pulse or the pulse length can be set in software. Verifying a program state of the memory cell <highlight><bold>590</bold></highlight> may comprise instructions to check the transistor state to determine whether the threshold voltage is within the target state. When the threshold voltage does not verify, the present embodiment of the invention may have instructions to apply an additional programming pulse. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In some embodiments, programming substantially within a linear mode of the transistor of the memory cell <highlight><bold>585</bold></highlight> can comprise programming the transistor to a threshold voltage below a target state and programming from that threshold voltage to the target state within a saturation mode of the transistor. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In some of these embodiments, verifying a program state of the memory cell may be performed after each programming pulse. In other embodiments, verifying a program state of the memory cell may be performed only after more than one programming pulse. Several embodiments do not verify the second and third programming pulse. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, there is shown an example system embodiment <highlight><bold>600</bold></highlight>. The embodiment <highlight><bold>600</bold></highlight> can be designed to be a portable communication device, such as a personal digital assistant or a cell phone, and may have wireless Internet access with audio and text messaging in a digital format. The embodiment <highlight><bold>600</bold></highlight> may comprise input-output devices such as an audio input device <highlight><bold>610</bold></highlight>, a visual input/output device (visual I/O device) <highlight><bold>640</bold></highlight>, an audio output device <highlight><bold>660</bold></highlight>, and an antenna <highlight><bold>670</bold></highlight>, and comprise a microprocessor <highlight><bold>620</bold></highlight> and a smart memory device <highlight><bold>630</bold></highlight>. The audio input device <highlight><bold>610</bold></highlight> may receive digital audio input and store the input in a queue in the smart memory device <highlight><bold>630</bold></highlight>. The queue may be random access memory or flash memory designed to receive a quantity of streaming data. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The microprocessor <highlight><bold>620</bold></highlight> may receive an instruction via the visual I/O device <highlight><bold>640</bold></highlight> indicating that the input data can be stored in non-volatile memory and forward an equivalent instruction to the smart memory device <highlight><bold>630</bold></highlight>. Smart memory device <highlight><bold>630</bold></highlight> may comprise memory such as flash memory. When different bits are received, the memory array controller can implement a programming algorithm to store the data in a transistor of non-volatile memory. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The programming algorithm may apply a default programming pulse to the transistor and determine the change in threshold voltage of the transistor. The default programming pulse can be designed to increase the charge on the floating gate of the transistor in the transistor&apos;s linear mode, causing the threshold voltage of a typical or nominal transistor of the memory array to increase by a minimal amount. When the change threshold voltage of the transistor is below the minimum threshold voltage change, the memory array controller may apply a second default programming pulse. The minimum threshold voltage change may be based on the accuracy of the sensing circuitry to distinguish the change in threshold voltage from noise and the width of the program states. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Once a change in threshold voltage is determined for a default programming pulse, the memory array controller may determine a programming pulse by comparing a rate correction as a function of target threshold voltage with a rate correction as a function of change in bit line voltage. In some embodiments, number of additional programming pulses may be less than eight pulses. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In many embodiments, the smart memory device <highlight><bold>630</bold></highlight> may have a pre-determined or default pulse width, limiting the available programming pulse voltages to voltages that maintain the transistor in linear mode. In other embodiments, the programming pulse width can be adjusted according to a pre-determined pattern such as increasing the pulse width with each successive programming pulse or group of pulses. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Basic functions for the microprocessor <highlight><bold>620</bold></highlight> may also be stored in protected non-volatile memory in the smart memory device <highlight><bold>630</bold></highlight> and can comprise instructions to display characters on the visual I/O device <highlight><bold>640</bold></highlight>, interpret input from the input device <highlight><bold>650</bold></highlight>, activate the audio output device <highlight><bold>660</bold></highlight>, and receive and transmit data via the antenna device <highlight><bold>670</bold></highlight>. Instructions for more advanced functions, such as saving audio input data, may be stored in memory locations that can be rewritten so the instructions may be updated to increase the functionality of the embodiment <highlight><bold>600</bold></highlight>. Many embodiments include instructions to optimize power consumption by the embodiment <highlight><bold>600</bold></highlight> such as switching on or off devices in the embodiment <highlight><bold>600</bold></highlight>. For instance, the visual I/O device <highlight><bold>640</bold></highlight> may have a backlight to allow easier viewing of information displayed and the microprocessor <highlight><bold>620</bold></highlight> may turn off the backlight after remaining idle for a certain period of time. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the visual I/O device <highlight><bold>640</bold></highlight> can receive instructions from the microprocessor <highlight><bold>620</bold></highlight> to display messages, like email, alpha-numeric pages, and text-based web sites. The visual I/O device <highlight><bold>640</bold></highlight> may also allow a user to enter instructions or data, such as a phone number or email address by touching parts of the visual I/O device <highlight><bold>640</bold></highlight> to enter a character or select a function. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The audio output device <highlight><bold>660</bold></highlight> may comprise a speaker coupled to a D/A device and may output audio data received via the antenna device <highlight><bold>670</bold></highlight> or the audio input device <highlight><bold>610</bold></highlight>. Further, the antenna device <highlight><bold>670</bold></highlight> may comprise a receiver and transmitter for high frequency, digital data transmissions. For example, if the embodiment <highlight><bold>600</bold></highlight> is at a location where digital cellular services are available, the antenna device <highlight><bold>670</bold></highlight> may transmit and receive digital voice data, periodic digital time indications, and transmit digital voice data. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method, comprising: 
<claim-text>determining a programming pulse from a measurement of a memory cell; and </claim-text>
<claim-text>applying the programming pulse to the memory cell to increase the charge on the capacitance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising verifying a program state of the memory cell. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said determining a programming pulse comprises: 
<claim-text>determining a relationship of a change in threshold voltage to a change in bit line voltage; and </claim-text>
<claim-text>determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein determining a relationship of a change in threshold voltage to a change in bit line voltage comprises: 
<claim-text>applying a default programming pulse to a bit line of a transistor of the memory cell; </claim-text>
<claim-text>determining a change in threshold voltage of the transistor; and </claim-text>
<claim-text>storing the change in threshold voltage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein applying a default programming pulse to a bit line of a transistor of the memory cell comprises determining a number of default programming pulses to apply. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein determining a programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage comprises: 
<claim-text>determining an intermediate threshold voltage wherein the intermediate threshold voltage is less than a target threshold voltage and greater than a present threshold voltage; and </claim-text>
<claim-text>determining the programming pulse to change from the present threshold voltage to the intermediate threshold voltage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein determining an intermediate threshold voltage comprises multiplying a difference between the present threshold voltage and the target threshold voltage by a constant. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said determining a programming pulse from a measurement of a memory cell comprises determining a change in bit line voltage as a function of a target threshold voltage, present threshold voltage, and prior threshold voltage. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said determining a programming pulse from a measurement of a memory cell comprises determining a bit line voltage as a function of a target threshold voltage, present threshold voltage, prior threshold voltage, and prior bit line voltage. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said applying the programming pulse to the memory cell comprises applying a sufficiently low programming pulse to avoid overshooting a target state. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said applying the programming pulse to the memory cell comprises programming substantially within a linear mode of a transistor of the memory cell. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. An apparatus, comprising: 
<claim-text>a programming pulse determiner; and </claim-text>
<claim-text>a programming pulse applicator coupled to said programming pulse determiner. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising a transistor having a bit line coupled to said programming pulse applicator. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said programming pulse determiner comprises a voltage change relationship determiner. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the voltage change relationship determiner comprises a present threshold voltage determiner coupled to a transistor. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said programming pulse determiner comprises a rate correction determiner coupled to said programming pulse applicator. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said programming pulse determiner comprises a prior threshold voltage memory coupled to the rate correction determiner. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said programming pulse determiner comprises a target threshold voltage memory coupled to the rate correction determiner. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparat us o f <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said programming pulse applicator comprises a linear m ode programming pulse generator coupled to a transistor. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A system, comprising: 
<claim-text>a memory array; </claim-text>
<claim-text>a memory array controller coupled to said memory array and comprising: 
<claim-text>a programming pulse determiner; and </claim-text>
<claim-text>a programming pulse applicator coupled to the programming pulse determiner; </claim-text>
</claim-text>
<claim-text>a read-program controller coupled to said memory array controller; and </claim-text>
<claim-text>a sensing circuit coupled to the voltage change relationship determiner. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said memory array comprises a transistor coupled to said memory array controller. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said read-program controller comprises: 
<claim-text>a data output-input coupled to said memory array controller; </claim-text>
<claim-text>a program output coupled to said memory array controller; and </claim-text>
<claim-text>an address output coupled to said memory array controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said sensing circuit comprises: 
<claim-text>a transistor state determiner coupled to said memory array controller; </claim-text>
<claim-text>an erase state reference coupled to said transistor state determiner; and </claim-text>
<claim-text>a program state reference coupled to said transistor state determiner. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A system, comprising: 
<claim-text>a smart memory device coupled to a microprocessor; and </claim-text>
<claim-text>an input-output device coupled to the microprocessor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said smart memory device comprises: 
<claim-text>a memory array; and </claim-text>
<claim-text>a memory array controller coupled to said memory array and comprising: 
<claim-text>a programming pulse determiner; and </claim-text>
<claim-text>a programming pulse applicator coupled to the programming pulse determiner. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said input-output device comprises an antenna device. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A machine-readable medium that provides instructions, which when executed by a machine, cause said machine to perform operations, comprising: 
<claim-text>determining a programming pulse from a measurement of a memory cell; and </claim-text>
<claim-text>applying the programming pulse to the memory cell to increase the charge on the capacitance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said determining a programming pulse comprises: 
<claim-text>determining a relationship of a change in threshold voltage to a change in bit line voltage; and </claim-text>
<claim-text>determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein determining the programming pulse from the relationship of a change in threshold voltage to a change in bit line voltage comprises: 
<claim-text>determining an intermediate threshold voltage by multiplying a difference between a present threshold voltage and a target threshold voltage by a constant; and </claim-text>
<claim-text>determining the programming pulse to change from the present threshold voltage to the intermediate threshold voltage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said applying a programming pulse to the transistor comprises programming substantially within a linear mode of a transistor of the memory cell.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002341A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002341A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002341A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002341A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002341A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002341A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002341A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
