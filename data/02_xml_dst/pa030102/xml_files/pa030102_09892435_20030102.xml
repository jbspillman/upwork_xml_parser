<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005075A1-20030102-D00000.TIF SYSTEM "US20030005075A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00001.TIF SYSTEM "US20030005075A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00002.TIF SYSTEM "US20030005075A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00003.TIF SYSTEM "US20030005075A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00004.TIF SYSTEM "US20030005075A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00005.TIF SYSTEM "US20030005075A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005075A1-20030102-D00006.TIF SYSTEM "US20030005075A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005075</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09892435</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>217000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Apparatus, method, and business method for enabling customer access to computer system execution data in exchange for sharing the execution data</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Royan</given-name>
<middle-name>Herbert</middle-name>
<family-name>Bartley</family-name>
</name>
<residence>
<residence-us>
<city>Rochester</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>John</middle-name>
<family-name>Branson</family-name>
</name>
<residence>
<residence-us>
<city>Rochester</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Steven</given-name>
<middle-name>Gene</middle-name>
<family-name>Halverson</family-name>
</name>
<residence>
<residence-us>
<city>Rochester</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>Alan</middle-name>
<family-name>Jaeger</family-name>
</name>
<residence>
<residence-us>
<city>Red Wing</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Todd</given-name>
<middle-name>Mark</middle-name>
<family-name>Kelsey</family-name>
</name>
<residence>
<residence-us>
<city>Rochester</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Paul</given-name>
<middle-name>William</middle-name>
<family-name>Wertzler</family-name>
</name>
<residence>
<residence-us>
<city>Rochester</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<postalcode>10504</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Derek P. Martin</name-1>
<name-2>Martin &amp; Associates, L.L.C.</name-2>
<address>
<address-1>P.O. Box 548</address-1>
<city>Carthage</city>
<state>MO</state>
<postalcode>64836-0548</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus, method, and business method allow a customer to access execution data only if transmission of the execution data to the vendor is enabled. In a first embodiment, the customer cannot access any execution data unless transmission of the execution data to the vendor is enabled. In a second embodiment, the customer can access some limited execution data, but cannot access more extensive execution data unless transmission of the execution data to the vendor is enabled. The preferred embodiments provide the capability of a customer accessing historical execution data in exchange for the customer transmitting the execution data to the vendor. In this manner the needs of both vendor and customer are satisfied. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This patent application is related to a concurrently filed U.S. patent application, &ldquo;Apparatus, Method, and Business Method for Enabling Customer Access to Computer System Performance Data in Exchange for Sharing the Performance Data&rdquo; Ser. No. ______, filed on ______.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention generally relates to the data processing field, and more specifically relates to the gathering and monitoring of data in a computer system relating to the execution of the computer system. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Background Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Since the dawn of the computer age, computer systems have evolved into extremely sophisticated devices, and computer systems may be found in many different settings. Computer systems typically include a combination of hardware, such as semiconductors and circuit boards, and software, also known as computer programs. As advances in semiconductor processing and computer architecture push the performance of the computer hardware higher, more sophisticated computer software has evolved to take advantage of the higher performance of the hardware, resulting in computer systems today that are much more powerful than just a few years ago. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Computer systems typically include operating system software that controls the basic function of the computer, and one or more software application programs that run under the control of the operating system to perform desired tasks. For example, a typical IBM Personal Computer may run the OS/2 operating system, and under the control of the OS/2 operating system, a user may execute an application program, such as a word processor. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The performance of a computer system depends on many factors that are determined by hardware, software, and other dynamic considerations such as total number of programs being processed, network traffic load, cache efficiency, etc. The performance of computer systems is of great interest to customers that purchase and depend on these computer systems. In addition, the performance of these computer systems is also of interest to the computer system vendor to determine whether the performance could be improved by selling additional hardware, software, or services to the customer to better meet the customer&apos;s needs. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Current operating systems collect performance data as a computer runs. In addition, application software may collect data while a computer is executing the software. For example, a database program may collect statistics relating to the database as queries are made to the database. Some known operating systems provide unrestricted customer access to performance data, allowing the customer to view the performance data historically for a defined period, such as the past six months. Some application software show data relating to the execution of the software to the user. Providing the customer with unrestricted access to the performance and other execution data for the customer&apos;s computer systems may result in a loss of marketing opportunity for the computer system vendor. For example, if the execution data indicates that disk utilization is high, the customer may purchase a new disk drive from a different vendor rather than from the vendor that sold the customer the computer system. In addition, unrestricted access by the customer to the execution data without fee eliminates an opportunity to sell reports and analysis services to the customers. Without a way to strike a balance between the customer&apos;s need to analyze execution data and the vendor&apos;s need to collect the execution data from the customer, the needs of both vendors and customers will continue to be unsatisfied. </paragraph>
</section>
<section>
<heading lvl="1">DISCLOSURE OF INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> According to the preferred embodiments, an apparatus, method, and business method allow a customer to access execution data only if transmission of the execution data to the vendor is enabled. In a first embodiment, the customer cannot access any execution data unless transmission of the execution data to the vendor is enabled. In a second embodiment, the customer can access some limited execution data, but cannot access more extensive execution data unless transmission of the execution data to the vendor is enabled. The preferred embodiments provide the capability of a customer accessing historical execution data in exchange for the customer transmitting the execution data to the vendor. In this manner the needs of both vendor and customer are satisfied. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The foregoing and other features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The preferred exemplary embodiments of the present invention will hereinafter be described in conjunction with the appended drawings, where like designations denote like elements, and: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing a vendor computer system and a customer computer system in accordance with the preferred embodiments; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of one specific implementation of customer computer system <highlight><bold>120</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in accordance with the preferred embodiments; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram of a method for allowing customer access to execution data in accordance with a first embodiment; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram of a method for allowing customer access to execution data in accordance with a second embodiment; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram showing the steps in a business method in accordance with the preferred embodiments; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a display panel on a graphical user interface that allows a user to select a time period for which the user wants to access execution data; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a display panel on a graphical user interface that allows a user to enable transmission of the execution data to the vendor before allowing customer access to the execution data.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">BEST MODE FOR CARRYING OUT THE INVENTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> An apparatus, method, and business method in accordance with the preferred embodiments allows a customer to access execution data collected on the customer&apos;s computer system in exchange for transmitting the collected execution data to the vendor. In one embodiment, no access to execution data by the customer is allowed unless transmission of the execution data is enabled to the vendor. In a second embodiment, limited access by the customer is allowed, but if more extensive access is needed, the customer must enable transmission of the execution data to the vendor in order to receive the extensive access to execution data. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Vendors have a great interest in accessing execution data for their customer&apos;s computer systems because this execution data may allow selling other products to the customers, such as additional hardware if resources are constrained, additional software if performance improvements can be realized, or services such as reports and analysis of the execution data. In the prior art, vendors are left with the untenable dilemma of whether to allow unrestricted access to execution data by customers, thereby losing marketing opportunities, or to allow no access or very limited access to execution data, thereby frustrating customers that need to access and analyze more extensive execution data. The preferred embodiments solves this dilemma by providing a method for allowing extensive access to execution data by the customer only if the customer enables transmission of the execution data to the vendor. In this manner, both vendor and client get what they need, namely access to the execution data for their own business purposes. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> vendor computer system <highlight><bold>110</bold></highlight> is coupled to a customer computer system <highlight><bold>120</bold></highlight>. The vendor computer system <highlight><bold>110</bold></highlight> includes an execution data collection mechanism for remote systems <highlight><bold>130</bold></highlight>, and an execution data analysis mechanism <highlight><bold>140</bold></highlight>. Execution data collection mechanism <highlight><bold>130</bold></highlight> is a mechanism that collects execution data from a customer computer system, while execution data analysis mechanism <highlight><bold>140</bold></highlight> is used to analyze the data to determine if the customer may need additional products from the vendor (e.g., hardware, software, services). Note that the term &ldquo;execution data&rdquo; as used herein is a very broad term that can include anything that can be measured as the computer system runs or after it runs. One example of execution data is performance data collected by an operating system. Examples of certain performance data include CPU utilization, available memory, cache hit ratio, response time, disk utilization, I/O rate, LAN utilization, etc. Another example of execution data is customer buying patterns on a web site. Yet another example of execution data is data that is gathered by an automotive computer as the automobile runs. Another example of execution data is data that is gathered by an analysis program after an event has occurred to measure the performance of a past event. For example, if memory usage during the execution of a software application needs to be measured, the memory usage may be stored periodically into defined memory locations as the application runs. An analysis program can then read the memory usage from the memory after the application is finished running using an analysis program to retrieve the memory usage data. The preferred embodiments herein extend to virtually any type of data that may be collected while a computer system runs, whether the data is collected real-time as the computer system is executing a particular task, or whether the data is collected after the task has completed running. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Customer computer system <highlight><bold>120</bold></highlight> includes an execution data collection mechanism <highlight><bold>150</bold></highlight>, an execution data access mechanism <highlight><bold>160</bold></highlight>, and an execution data transmission mechanism <highlight><bold>170</bold></highlight>. Execution data collection mechanism <highlight><bold>150</bold></highlight> collects execution data <highlight><bold>152</bold></highlight> as the customer computer system <highlight><bold>120</bold></highlight> runs, and logs the execution data <highlight><bold>152</bold></highlight> for future access. Execution data access mechanism <highlight><bold>160</bold></highlight> controls access to the execution data <highlight><bold>152</bold></highlight> by the customer. In the preferred embodiments, execution data access mechanism <highlight><bold>160</bold></highlight> includes an access enablement mechanism <highlight><bold>162</bold></highlight> that determines whether or not the user will be able to access the execution data <highlight><bold>152</bold></highlight> collected by the execution data collection mechanism <highlight><bold>150</bold></highlight>. In a first embodiment, if the access enablement mechanism <highlight><bold>162</bold></highlight> is enabled, the user will be able to access the execution data. If the access enablement mechanism <highlight><bold>162</bold></highlight> is disabled, the user will not be able to access the execution data. In a second embodiment, if the access enablement mechanism <highlight><bold>162</bold></highlight> is enabled, the user will be able to access all of the execution data. If the access enablement mechanism <highlight><bold>162</bold></highlight> is disabled, the user will only be able to access a limited portion of the execution data. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The execution data transmission mechanism <highlight><bold>170</bold></highlight> transmits execution data to the execution data collection mechanism for remote systems <highlight><bold>130</bold></highlight> in the vendor computer system <highlight><bold>110</bold></highlight> via some kind of network connection <highlight><bold>142</bold></highlight>. In the preferred embodiments, execution data transmission mechanism <highlight><bold>170</bold></highlight> includes a transmission enablement mechanism <highlight><bold>172</bold></highlight> that determines whether the customer will allow transmission of the execution data to the vendor. If the transmission enablement mechanism <highlight><bold>172</bold></highlight> is enabled, the execution data transmission mechanism <highlight><bold>170</bold></highlight> will transmit the execution data <highlight><bold>152</bold></highlight> to the vendor computer system <highlight><bold>110</bold></highlight>. If the transmission enablement mechanism <highlight><bold>172</bold></highlight> is disabled, the execution data transmission mechanism <highlight><bold>170</bold></highlight> will not transmit the execution data <highlight><bold>152</bold></highlight> to the vendor computer system <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In the preferred embodiments, the state of the access enablement mechanism <highlight><bold>162</bold></highlight> depends directly on the state of the transmission enablement mechanism <highlight><bold>172</bold></highlight>. If the transmission enablement mechanism <highlight><bold>172</bold></highlight> is enabled, the access enablement mechanism <highlight><bold>162</bold></highlight> will also be enabled. If the transmission enablement mechanism <highlight><bold>172</bold></highlight> is disabled, the access enablement mechanism <highlight><bold>162</bold></highlight> will also be disabled. Thus, if a customer agrees to share the execution data with the vendor by enabling the transmission enablement mechanism <highlight><bold>172</bold></highlight>, the customer gains access to the execution data via execution data access mechanism <highlight><bold>160</bold></highlight>. In this manner, the vendor gains access to the customer&apos;s execution data <highlight><bold>152</bold></highlight> in exchange for the customer gaining the ability to access (and therefore analyze) the execution data <highlight><bold>152</bold></highlight>. Note that the business method of the preferred embodiments includes any type of compensation in either direction between the vendor and the customer. In one scenario, the customer would pay for a software product sold by the vendor that includes the execution data access mechanism <highlight><bold>160</bold></highlight> and associated software for analyzing the execution data. The execution data access mechanism <highlight><bold>160</bold></highlight> would then assure that transmission of the execution data to the vendor is enabled before allowing access and analysis of the execution data <highlight><bold>152</bold></highlight>. In another scenario, the customer&apos;s execution data may be so valuable that the vendor may supply the execution data access mechanism <highlight><bold>160</bold></highlight> to the customer for free, or may pay the customer for sharing the execution data. Whatever the specifics of the arrangement between vendor and customer, if the transmission of the execution data to the vendor is enabled, the customer will be given enhanced access to the execution data <highlight><bold>152</bold></highlight> collected on the customer&apos;s computer system. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> computer system <highlight><bold>200</bold></highlight> in accordance with the preferred embodiment is an IBM iSeries computer system. However, those skilled in the art will appreciate that the mechanisms and apparatus of the present invention apply equally to any computer system, regardless of whether the computer system is a complicated multi-user computing apparatus. a single user workstation, or an embedded control system. Computer system <highlight><bold>200</bold></highlight> is one suitable implementation for customer computer system <highlight><bold>120</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, computer system <highlight><bold>200</bold></highlight> comprises a processor <highlight><bold>210</bold></highlight>, a main memory <highlight><bold>220</bold></highlight>, a mass storage interface <highlight><bold>230</bold></highlight>, a display interface <highlight><bold>240</bold></highlight>, and a network interface <highlight><bold>250</bold></highlight>. These system components are interconnected through the use of a system bus <highlight><bold>260</bold></highlight>. Mass storage interface <highlight><bold>230</bold></highlight> is used to connect mass storage devices (such as a direct access storage device <highlight><bold>255</bold></highlight>) to computer system <highlight><bold>200</bold></highlight>. One specific type of direct access storage device <highlight><bold>255</bold></highlight> is a readable and writable CD ROM drive, which may store data to and read data from a CD ROM <highlight><bold>295</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Main memory <highlight><bold>220</bold></highlight> in accordance with the preferred embodiments contains data <highlight><bold>222</bold></highlight>, an operating system <highlight><bold>224</bold></highlight>, execution data collection mechanism <highlight><bold>150</bold></highlight>, execution data <highlight><bold>152</bold></highlight>, execution data access mechanism <highlight><bold>160</bold></highlight>, and execution data transmission mechanism <highlight><bold>170</bold></highlight>. Note that execution data collection mechanism <highlight><bold>150</bold></highlight>, execution data <highlight><bold>152</bold></highlight>, execution data access mechanism <highlight><bold>160</bold></highlight>, and execution data transmission mechanism <highlight><bold>170</bold></highlight> are discussed above with reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. While the execution data collection mechanism <highlight><bold>150</bold></highlight>, execution data <highlight><bold>152</bold></highlight>, execution data access mechanism <highlight><bold>160</bold></highlight>, and execution data transmission mechanism <highlight><bold>170</bold></highlight> are shown separate and discrete from operating system <highlight><bold>224</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the preferred embodiments expressly extend to any or all of mechanisms <highlight><bold>150</bold></highlight>, <highlight><bold>160</bold></highlight> and <highlight><bold>170</bold></highlight> being implemented within the operating system <highlight><bold>224</bold></highlight>. In one, execution data collection mechanism <highlight><bold>150</bold></highlight> is part of the operating system <highlight><bold>224</bold></highlight> because the operating system <highlight><bold>224</bold></highlight> already collects performance data, and could easily collect other types of execution data as well. Execution data access mechanism <highlight><bold>160</bold></highlight> and execution data transmission mechanism <highlight><bold>170</bold></highlight> could also be implemented within the operating system <highlight><bold>224</bold></highlight>, or could be supplied as separate programs. In addition, any or all of these mechanisms <highlight><bold>150</bold></highlight>, <highlight><bold>160</bold></highlight> and <highlight><bold>170</bold></highlight> could be implemented in application software, utilities, or other types of software within the scope of the preferred embodiments. Note also that the functions of these three mechanisms <highlight><bold>150</bold></highlight>, <highlight><bold>160</bold></highlight> and <highlight><bold>170</bold></highlight> could be appropriately split out or combined within the scope of the preferred embodiments to arrive a single computer program or any suitable number of computer programs that perform the functions described herein within the scope of the preferred embodiments. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> utilizes well known virtual addressing mechanisms that allow the programs of computer system <highlight><bold>200</bold></highlight> to behave as if they only have access to a large, single storage entity instead of access to multiple, smaller storage entities such as main memory <highlight><bold>220</bold></highlight> and DASD device <highlight><bold>255</bold></highlight>. Therefore, while data <highlight><bold>222</bold></highlight>, operating system <highlight><bold>224</bold></highlight>, execution data collection mechanism <highlight><bold>150</bold></highlight>, execution data <highlight><bold>152</bold></highlight>, execution data access mechanism <highlight><bold>160</bold></highlight>, and execution data transmission mechanism <highlight><bold>170</bold></highlight> are shown to reside in main memory <highlight><bold>220</bold></highlight>, those skilled in the art will recognize that these items are not necessarily all completely contained in main memory <highlight><bold>220</bold></highlight> at the same time. It should also be noted that the term &ldquo;memory&rdquo; is used herein to generically refer to the entire virtual memory of computer system <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Data <highlight><bold>222</bold></highlight> represents any data that serves as input to or output from any program in computer system <highlight><bold>200</bold></highlight>. Operating system <highlight><bold>224</bold></highlight> is a multitasking operating system known in the industry as OS/400; however, those skilled in the art will appreciate that the spirit and scope of the present invention is not limited to any one operating system. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Processor <highlight><bold>210</bold></highlight> may be constructed from one or more microprocessors and/or integrated circuits. Processor <highlight><bold>210</bold></highlight> executes program instructions stored in main memory <highlight><bold>220</bold></highlight>. Main memory <highlight><bold>220</bold></highlight> stores programs and data that processor <highlight><bold>210</bold></highlight> may access. When computer system <highlight><bold>200</bold></highlight> starts up, processor <highlight><bold>210</bold></highlight> initially executes the program instructions that make up operating system <highlight><bold>224</bold></highlight>. Operating system <highlight><bold>224</bold></highlight> is a sophisticated program that manages the resources of computer system <highlight><bold>200</bold></highlight>. Some of these resources are processor <highlight><bold>210</bold></highlight>, main memory <highlight><bold>220</bold></highlight>, mass storage interface <highlight><bold>230</bold></highlight>, display interface <highlight><bold>240</bold></highlight>, network interface <highlight><bold>250</bold></highlight>, and system bus <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Although computer system <highlight><bold>200</bold></highlight> is shown to contain only a single processor and a single system bus, those skilled in the art will appreciate that the present invention may be practiced using a computer system that has multiple processors and/or multiple buses. In addition, the interfaces that are used in the preferred embodiment each include separate, fully programmed microprocessors that are used to off-load compute-intensive processing from processor <highlight><bold>210</bold></highlight>. However, those skilled in the art will appreciate that the present invention applies equally to computer systems that simply use I/O adapters to perform similar functions. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Display interface <highlight><bold>240</bold></highlight> is used to directly connect one or more displays <highlight><bold>265</bold></highlight> to computer system <highlight><bold>200</bold></highlight>. These displays <highlight><bold>265</bold></highlight>, which may be non-intelligent (i.e., dumb) terminals or fully programmable workstations, are used to allow system administrators and users to communicate with computer system <highlight><bold>200</bold></highlight>. Note, however, that while display interface <highlight><bold>240</bold></highlight> is provided to support communication with one or more displays <highlight><bold>265</bold></highlight>, computer system <highlight><bold>200</bold></highlight> does not necessarily require a display <highlight><bold>265</bold></highlight>, because all needed interaction with users and other processes may occur via network interface <highlight><bold>250</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Network interface <highlight><bold>250</bold></highlight> is used to connect other computer systems and/or workstations (e.g., <highlight><bold>275</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) to computer system <highlight><bold>200</bold></highlight> across a network <highlight><bold>270</bold></highlight>. The present invention applies equally no matter how computer system <highlight><bold>200</bold></highlight> may be connected to other computer systems and/or workstations, regardless of whether the network connection <highlight><bold>270</bold></highlight> is made using present-day analog and/or digital techniques or via some networking mechanism of the future. In addition, many different network protocols can be used to implement a network. These protocols are specialized computer programs that allow computers to communicate across network <highlight><bold>270</bold></highlight>. TCP/IP (Transmission Control Protocol/Internet Protocol) is an example of a suitable network protocol. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> At this point, it is important to note that while the present invention has been and will continue to be described in the context of a fully functional computer system, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of suitable signal bearing media include: recordable type media such as floppy disks and CD ROM (e.g., <highlight><bold>295</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>), and transmission type media such as digital and analog communications links. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> method <highlight><bold>300</bold></highlight> in accordance with a first embodiment prevents all access to execution data unless transmission of the execution data to the vendor is enabled. The customer computer system collects the execution data (step <highlight><bold>310</bold></highlight>). If a user of the customer computer system requests access to the execution data (step <highlight><bold>320</bold></highlight>&equals;YES), method <highlight><bold>300</bold></highlight> then determines whether the transmission of the execution data is enabled (step <highlight><bold>330</bold></highlight>). If so (step <highlight><bold>330</bold></highlight>&equals;YES), the user&apos;s request to access the execution data is granted (step <highlight><bold>340</bold></highlight>). If transmission is not enabled (step <highlight><bold>330</bold></highlight>&equals;NO), the user&apos;s request to access the execution data is denied (step <highlight><bold>350</bold></highlight>). In this manner the customer cannot access any execution data unless transmission of execution data to the vendor is enabled. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> method <highlight><bold>400</bold></highlight> in accordance with a second embodiment provides limited access to execution data without regard to whether transmission of the execution data is enabled or not. More extensive access to the execution data is not allowed unless transmission of the execution data to the vendor is enabled. The customer computer system collects the execution data (step <highlight><bold>410</bold></highlight>). If only limited access to the execution data is requested (step <highlight><bold>412</bold></highlight>&equals;YES), the request is granted (step <highlight><bold>440</bold></highlight>). If limited access to the execution data is not requested (step <highlight><bold>412</bold></highlight>&equals;NO), method <highlight><bold>400</bold></highlight> then determines whether extensive access has been requested (step <highlight><bold>420</bold></highlight>). If not (step <highlight><bold>420</bold></highlight>&equals;NO), method <highlight><bold>400</bold></highlight> loops back to step <highlight><bold>410</bold></highlight> and continues. If so (step <highlight><bold>420</bold></highlight>&equals;YES), method <highlight><bold>400</bold></highlight> checks to see if transmission of execution data to the vendor is enabled (step <highlight><bold>430</bold></highlight>). If transmission to the vendor is enabled (step <highlight><bold>430</bold></highlight>&equals;YES), the request for extensive access is granted (step <highlight><bold>440</bold></highlight>). If transmission to the vendor is not enabled (step <highlight><bold>430</bold></highlight>&equals;NO), the request for extensive access is denied (step <highlight><bold>450</bold></highlight>). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> A business method (or method for doing business) is also within the scope of the preferred embodiments. Referring to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> method <highlight><bold>500</bold></highlight> for a computer vendor to do business begins by selling a computer system that includes the execution data collection mechanism to a customer (step <highlight><bold>510</bold></highlight>). Next, the vendor offers access to the execution data to the customer in exchange for the customer sharing the execution data with the vendor (step <highlight><bold>520</bold></highlight>). If the customer rejects the offer in step <highlight><bold>520</bold></highlight> (step <highlight><bold>530</bold></highlight>&equals;NO), access to the execution data on the customer&apos;s computer system is disabled (step <highlight><bold>540</bold></highlight>). If the customer accepts the offer in step <highlight><bold>520</bold></highlight> (step <highlight><bold>530</bold></highlight>&equals;YES), access to the execution data on the customer&apos;s computer system is enabled (step <highlight><bold>550</bold></highlight>). The vendor system will then (at some point in time) receive the execution data from the customer&apos;s computer system (step <highlight><bold>560</bold></highlight>). The business method of the preferred embodiments strikes an effective balance between the customer&apos;s desire to access and analyze execution data with the vendor&apos;s need to receive the execution data from the customer. Note that not all steps in method <highlight><bold>500</bold></highlight> must be performed to practice the invention. For example, step <highlight><bold>510</bold></highlight> need not be performed. Instead of the vendor of the computer system receiving the execution data, a company could offer a service within the scope of the preferred embodiments that analyzes execution data gathered on a computer system sold by a different company. In this scenario, step <highlight><bold>510</bold></highlight> would be performed by the computer system vendor, while steps <highlight><bold>520</bold></highlight>-<highlight><bold>560</bold></highlight> would be performed by a different vendor that is providing the service of analyzing the execution data for the customer. Of course, other scenarios are possible within the scope of the preferred embodiments. In addition, method <highlight><bold>500</bold></highlight> expressly encompasses both methods <highlight><bold>300</bold></highlight> and <highlight><bold>400</bold></highlight> discussed above. In the case of method <highlight><bold>300</bold></highlight>, step <highlight><bold>540</bold></highlight> disables all access to execution data, while step <highlight><bold>550</bold></highlight> enables all access to execution data. In the case of method <highlight><bold>400</bold></highlight>, step <highlight><bold>540</bold></highlight> disables extended access to execution data but allows limited access to execution data, while step <highlight><bold>550</bold></highlight> enables all access to execution data. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference>, display panels on a graphical user interface are shown that allow a customer to freely access limited execution data, but that require transmission of the execution data to the vendor to be enabled before allowing customer access to extended execution data. Thus, the display panels of <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> are one suitable implementation of certain portions of method <highlight><bold>400</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In display panel <highlight><bold>610</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> message box <highlight><bold>620</bold></highlight> prompts the user to select the period for which the user desires to access execution data. The user can click on the checkbox <highlight><bold>630</bold></highlight> that corresponds to a period of the past seven days, or the user can click on the down arrow <highlight><bold>632</bold></highlight>, which causes a drop-down menu <highlight><bold>634</bold></highlight> to be displayed. A user may select the past 14 days, past 30 days, past 60 days, past 90 days, or past 180 days from the drop-down menu <highlight><bold>634</bold></highlight>. In addition, the user may select the &ldquo;Other&rdquo; selection on drop-down menu <highlight><bold>634</bold></highlight>, which causes a text entry box to be presented where the user may enter a number of days, weeks, or months. Once the user has selected the execution data period, the user clicks the OK button <highlight><bold>640</bold></highlight>. If the user wants to exit display panel <highlight><bold>610</bold></highlight>, the user may click the Cancel button <highlight><bold>650</bold></highlight>. If the user needs context-sensitive help, the user may click on the Help button <highlight><bold>660</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> If the user clicks the checkbox <highlight><bold>630</bold></highlight> for the last seven days, the user will be given access to the limited execution data for this period. If, however, the user has selected more than seven days of execution data (i.e., extended execution data), transmission of the execution data to the vendor must be enabled. We assume for this example that the vendor is IBM, and that transmission of execution data to IBM has not yet been enabled. Thus, if the user selects any selection from drop-down menu <highlight><bold>634</bold></highlight>, then clicks the OK button <highlight><bold>640</bold></highlight>, a display panel <highlight><bold>710</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is presented to the user that informs the user than enabling transmission of the execution data to IBM is required in order for the user to access execution data for the specified period of time. If the user desires to enable transmission of the execution data to IBM, the user clicks on checkbox <highlight><bold>730</bold></highlight>, then clicks on the OK button <highlight><bold>740</bold></highlight>. If the user decides to not enable transmission of the execution data to IBM, the user clicks on the Cancel button <highlight><bold>740</bold></highlight>. In this case, the user will not be allowed to access execution data for the requested period. Of course, if the user needs help, the user may click on the Help button <highlight><bold>760</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In the preferred embodiments, the best mode of the invention enables access to all of the customer&apos;s execution data if transmission of all of the customer&apos;s execution data to the vendor is enabled. Note, however, that accessing a portion of the execution data by the customer and transmitting a portion of the execution data to the vendor is also within the scope of the preferred embodiments. Thus, a customer may gain access to all of the execution data by agreeing to only transmit a portion of the execution data to the vendor. In similar fashion, the customer may gain access to only a portion of the execution data by agreeing to transmit all of the execution data to the vendor. Similarly, a customer may gain access to only a portion of the execution data by agreeing to transmit a different portion of the execution data to the vendor. It is expressly understood herein that a customer&apos;s access to execution data may mean access to all or part of the execution data, and transmitting execution data to a vendor likewise means transmitting all or part of the execution data. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Customer access to execution data is discussed herein in terms of a &ldquo;user&rdquo; accessing the execution data on the customer&apos;s computer system. Note that the term &ldquo;user&rdquo; is a broad term that includes human users as well as computer programs that request access to execution data. The GUI display panels in <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> would be useful for interacting with a human user, while interaction with a computer program user could occur without display or intervention by a human user. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The preferred embodiments described herein provide incentive for customers to share execution data for their computer systems with the computer system&apos;s vendor. By providing customer access to execution data only if transmission of the execution data is enabled, the vendor can increase the likelihood of receiving the execution data from customers, thereby providing enhanced marketing opportunities for goods and services. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The application of the present invention is vast. One example is for an operating system vendor to monitor performance data of a vendor&apos;s computer system as part of the operating system code. The customer would be allowed to view and analyze the performance data so long as transmission of the performance data to the vendor is enabled. Another example is for a database provider to monitor the performance of their database software. Statistics may be gathered as the database is accessed by various different software applications and users. If the system administrator of the database wants to view the database statistics, he or she must enable transmission of those statistics to the vendor. Needless to say, feedback from customer computer systems regarding their performance is invaluable information for the vendor, and provides additional opportunities for marketing new products and services to the customer. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Another example of the present invention is for an automotive computer that gathers and stores data relating to the performance of an automobile. A service technician may be given access to the historical performance data only if transmission to the car manufacturer is enabled. In this case, the car manufacturer may require receipt of the performance data before the technician is allowed to view the performance data. Again, feedback from products in actual operation in the field would be extremely valuable to car manufacturers, and would help identify where improvements could be made. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Yet another example of the present invention is for a web site that markets products to consumers. Let&apos;s assume that before a person can buy products on the web site, they are required to &ldquo;register&rdquo; with the web site, which includes personal information, such as name, address, city, state, sex, marital status, age, etc. The vendor of e-commerce software running on the web site could provide a tool that analyzes information in the database to determine customer buying patterns, demographical information, gender and age tendencies, etc. This information would also be quite valuable to know how to improve the web site and product offerings to increase sales. For example, if the buying statistics show that 65% of the buyers are women between the ages of 30 and 50, more products that target women in this age group could be added. If many buyers use e-coupons, the web site could offer more coupon deals to stimulate sales. Note that execution data about the web site could be gathered in any suitable way. The execution data could be gathered by the web site software itself. The execution data could be generated by a software tool (e.g., analysis program) that performs data mining operations on a database to determine the execution data, or that analyzes information stored by the web site software relating to its execution. Execution data could be generated (or gathered) by a software application that runs concurrently with the web site e-commerce software. The preferred embodiments of the present invention extend to any suitable way to collect or generate any data relating to the execution of any type of computer system. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The embodiments and examples set forth herein were presented in order to best explain the present invention and its practical application and to thereby enable those skilled in the art to make and use the invention. However, those skilled in the art will recognize that the foregoing description and examples have been presented for the purposes of illustration and example only. The description as set forth is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching without departing from the spirit and scope of the forthcoming claims. For example, the preferred embodiments expressly extend to any type of computer system, from large mainframe computer systems to the smallest microcontroller in an embedded application (such as an automotive computer).</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer system comprising: 
<claim-text>at least one processor; </claim-text>
<claim-text>a memory coupled to the at least one processor; </claim-text>
<claim-text>an execution data collection mechanism residing in the memory and executed by the at least one processor, the execution data collection mechanism collecting execution data for the computer system; </claim-text>
<claim-text>an execution data transmission mechanism residing in the memory and executed by the at least one processor, the execution data transmission mechanism, when enabled, transmitting at least a portion of the execution data to another computer system coupled to the computer system via a network; and </claim-text>
<claim-text>an execution data access mechanism residing in the memory and executed by the at least one processor, the execution data access mechanism allowing access to the execution data by a user of the computer system only if the execution data transmission mechanism is enabled. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the computer system comprises a customer computer system and the another computer system comprises a vendor computer system. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the execution data comprises data collected by an operating system residing in the memory and executed by the at least one processor. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the execution data comprises data collected by a software application residing in the memory and executed by the at least one processor. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the execution data comprises data collected by an analysis program residing in the memory and executed by the at least one processor. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A networked computer system comprising: 
<claim-text>(A) a first computer system; </claim-text>
<claim-text>(B) a second computer system coupled to the first computer system via a network, the second computer system comprising: 
<claim-text>(B1) an execution data collection mechanism that collects execution data for the second computer system; </claim-text>
<claim-text>(B2) an execution data transmission mechanism that, when enabled, transmits at least a portion of the execution data to the first computer system; and </claim-text>
<claim-text>(B3) an execution data access mechanism that allows access to the execution data by a user of the second computer system only if the execution data transmission mechanism is enabled. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The networked computer system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the first computer system comprises a vendor computer system and the second computer system comprises a customer computer system. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The networked computer system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the execution data comprises data collected by an operating system. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The networked computer system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the execution data comprises data collected by a software application. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The networked computer system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the execution data comprises data collected by an analysis program. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method for a user of a second computer system coupled via a network to a first computer system to access execution data collected by the second computer system, the method comprising the steps of: 
<claim-text>(A) the second computer system collecting the execution data; </claim-text>
<claim-text>(B) the second computer system determining whether transmission of the execution data from the second computer system to the first computer system is enabled; </claim-text>
<claim-text>(C) if transmission of the execution data from the second computer system to the first computer system is enabled, allowing the user to access the execution data; and </claim-text>
<claim-text>(D) if transmission of the execution data from the second computer system to the first computer system is not enabled, not allowing the user to access the execution data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method for a first computer system to collect execution data from a second computer system coupled via a network to the first computer system, the method comprising the steps of: 
<claim-text>(A) the second computer system collecting the execution data; </claim-text>
<claim-text>(B) the second computer system determining whether transmission of the execution data from the second computer system to the first computer system is enabled; </claim-text>
<claim-text>(C) if transmission of the execution data from the second computer system to the first computer system is enabled, allowing access to the execution data by a user of the second computer system; </claim-text>
<claim-text>(D) if transmission of the execution data from the second computer system to the first computer system is not enabled, not allowing access to the execution data by a user of the second computer system; and </claim-text>
<claim-text>(E) the second computer system transmitting at least a portion of the execution data to the first computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method for a user of a second computer system coupled via a network to a first computer system to access execution data collected by the second computer system, the method comprising the steps of: 
<claim-text>(A) the second computer system collecting the execution data; </claim-text>
<claim-text>(B) the second computer system allowing the user to access a limited portion of the execution data; </claim-text>
<claim-text>(C) if the user requests to access more than the limited portion of the execution data: 
<claim-text>(C1) the second computer system determining whether transmission of the execution data from the second computer system to the first computer system is enabled; </claim-text>
<claim-text>(C2) if transmission of the execution data from the second computer system to the first computer system is enabled, allowing the user to access the requested execution data; and </claim-text>
<claim-text>(C3) if transmission of the execution data from the second computer system to the first computer system is not enabled, not allowing the user to access the requested execution data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method for a first computer system to collect execution data from a second computer system coupled via a network to the first computer system, the method comprising the steps of: 
<claim-text>(A) the second computer system collecting the execution data; </claim-text>
<claim-text>(B) the second computer system allowing the user to access a limited portion of the execution data; </claim-text>
<claim-text>(C) if the user requests to access more than the limited portion of the execution data: 
<claim-text>(C1) the second computer system determining whether transmission of the execution data from the second computer system to the first computer system is enabled; </claim-text>
<claim-text>(C2) if transmission of the execution data from the second computer system to the first computer system is enabled, allowing access to the requested execution data by a user of the second computer system; </claim-text>
<claim-text>(C3) if transmission of the execution data from the second computer system to the first computer system is not enabled, not allowing access to the requested execution data by a user of the second computer system; and </claim-text>
<claim-text>(C4) the second computer system transmitting at least a portion of the execution data to the first computer system. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method for doing business comprising the steps of: 
<claim-text>(A) offering to a customer the ability to access execution data gathered by a customer computer system in exchange for the customer&apos;s sharing of the execution data; </claim-text>
<claim-text>(B) if the customer does not accept the offer in (A), disabling customer access to the execution data on the customer computer system; </claim-text>
<claim-text>(C) if the customer accepts the offer in (A), enabling customer access to the execution data on the customer computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> further comprising the step of: 
<claim-text>(D) the customer computer system sharing the execution data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> further comprising the step of: 
<claim-text>selling the customer computer system to the customer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A program product comprising: 
<claim-text>(A) an execution data collection mechanism that collects execution data for a first computer system; </claim-text>
<claim-text>(B) an execution data transmission mechanism that, when enabled, transmits at least a portion of the execution data to a second computer system; </claim-text>
<claim-text>(C) an execution data access mechanism that allows access to the execution data only if the execution data transmission mechanism is enabled; and </claim-text>
<claim-text>(D) computer-readable signal bearing media bearing (A), (B) and (C). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the signal bearing media comprises recordable media. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the signal bearing media comprises transmission media. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the execution data comprises data collected by an operating system. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the execution data comprises data collected by a software application. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the execution data comprises data collected by an analysis program. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A program product comprising: 
<claim-text>(A) an operating system comprising: 
<claim-text>(A1) an execution data collection mechanism that collects execution data for a first computer system; </claim-text>
<claim-text>(A2) an execution data transmission mechanism that, when enabled, transmits at least a portion of the execution data to a second computer system; </claim-text>
<claim-text>(A3) an execution data access mechanism that allows access to the execution data only if the execution data transmission mechanism is enabled; and </claim-text>
</claim-text>
<claim-text>(B) computer-readable signal bearing media bearing the operating system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the signal bearing media comprises recordable media. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the signal bearing media comprises transmission media. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the execution data comprises data collected by an operating system. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the execution data comprises data collected by a software application. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the execution data comprises data collected by an analysis program.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005075A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005075A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005075A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005075A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005075A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005075A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005075A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
