<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004993A1-20030102-D00000.TIF SYSTEM "US20030004993A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004993A1-20030102-D00001.TIF SYSTEM "US20030004993A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004993A1-20030102-D00002.TIF SYSTEM "US20030004993A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004993A1-20030102-D00003.TIF SYSTEM "US20030004993A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004993A1-20030102-D00004.TIF SYSTEM "US20030004993A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004993</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09892633</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/24</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>513000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>707</class>
<subclass>517000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System, method and computer program for the creation of web pages and communications between web pages</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Randal</given-name>
<middle-name>F.</middle-name>
<family-name>Templeton</family-name>
</name>
<residence>
<residence-us>
<city>Flowar Mound</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Evan</given-name>
<middle-name>L.</middle-name>
<family-name>Merrill</family-name>
</name>
<residence>
<residence-us>
<city>Orem</city>
<state>UT</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Kent</given-name>
<middle-name>J.</middle-name>
<family-name>Diamond</family-name>
</name>
<residence>
<residence-us>
<city>Highland</city>
<state>UT</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Clayne</given-name>
<middle-name>B.</middle-name>
<family-name>Robison</family-name>
</name>
<residence>
<residence-us>
<city>American Fork</city>
<state>UT</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Yuki</given-name>
<family-name>Bernardi</family-name>
</name>
<residence>
<residence-us>
<city>Lehi</city>
<state>UT</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>ANTONELLI TERRY STOUT AND KRAUS</name-1>
<name-2></name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system, method and computer program for generating web pages and communicating between web pages. The generation of web pages entails the use of an XML repository that contains a web page template and associated applications handlers. The application handlers generate the parts of the web page which are combined to form a web page according to the template. A console engine is used to parse a incoming XML data element. The data contained in the incoming data element is used to update a web page and thereby communicate with it. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates to a system, method and computer program for the creation of web pages and communications between web pages. More particularly, the present invention enables the creation and storage of page segments in a repository and the creation of an entire web page from a template using the page segments contained in the repository. Further, once these web pages are created and executing, the invention enables communications among web pages and updating of segments of web pages in real-time. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> With the explosion in Internet access and usage, individuals have discovered and become dependent upon the availability of large amount of information as well and the ability to buy and sell goods and services via the Internet. A typical Internet user would have a browser installed in his personal computer (PC) or server such as Internet Explorer&trade; or Netscape&trade;. Using this browser, the user may access an Internet service provider, such as America-On-Line (AOL&trade;), via a modem over the local public switched telephone network (PSTN), a cable network or satellite link. Once logged onto an Internet web server, the user may utilize one of the many search engines, such as Yahoo&trade; or Lycos&trade;, to specify search terms. The user could also log onto a web server and view the products or services available for sale or receive the information desired. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> With this increased usage of the Internet has come a large demand for web page generation and web page designers and programmers. Web pages have typically been written in a hypertext markup language (HTML) in which locations of icons and entry fields for data are specified. Further, web pages may be instantiated (activated) from other web pages in a tree like structure from parent to child. Normally, in the creation of a web page, whenever a new web page is needed a new HTML script is generated for the entire page even if only a portion of the web page has changed from one done earlier. This has proven to be relatively costly in programmer time. Further, separate business applications software is normally required in order to enable a web site to operate properly. For example, if a web site accepts credit cards, then a separate program receives the credit card information entered by the client in the web page. If the requirements of the credit card processing software module change then so may the requirements for the web page. Thus, it may be necessary to generate a new HTML script for a new web page because of changes in the business applications software. Further, because of the hierarchical structure in execution of web pages, if a child web page requires execution of a parent web page, another copy of the parent web page has to be loaded into memory and executed. Therefore, significant time is involved in generating web pages and significant memory usage is required to execute web pages. Further, the execution process is delayed due to disk access or communication rate limitations each time a parent web page has to be re-loaded into memory. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Therefore, what is needed is a system, method, and computer program in which portions or parts of a web page can be generated and stored for retrieval and assembly as a single web page. This system, method and computer program would save development time since entire web pages would not have to be rewritten whenever a change in a segment of a web page occurs. Further, this system, method, and computer program should enable the passing of messages containing data for a part or an entire web page from parent to child and child to parent without the need to load the web page into memory if it already resides in memory. By being able to reuse web pages already in memory it is possible to save the time needed to access the web page and load it into memory on the web server, thereby providing a faster response time. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The foregoing and a better understanding of the present invention will become apparent from the following detailed description of exemplary embodiments and the claims when read in connection with the accompanying drawings, all forming a part of the disclosure of this invention. While the foregoing and following written and illustrated disclosure focuses on disclosing example embodiments of the invention, it should be clearly understood that the same is by way of illustration and example only and the invention is not limited thereto. The spirit and scope of the present invention are limited only by the terms of the appended claims.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The following represents brief descriptions of the drawings, wherein: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a tree structure diagram of web pages in an example embodiment of the present invention; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a modular configuration diagram of the modules involved in an example embodiment of the present invention; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart used to construct portions/parts of a web page into an entire web page using a template web page in an example embodiment of the present invention; and </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of the generation of a delimited token used to pass specific data from one web page to another in an example embodiment of the present invention.</paragraph>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Before beginning a detailed description of the subject invention, mention of the following is in order. When appropriate, like reference numerals and characters may be used to designate identical, corresponding or similar components in differing figure drawings. Further, in the detailed description to follow, exemplary sizes/mod elsivalues/ranges may be given, although the present invention is not limited to the same. As a final note, well-known components of computer networks may not be shown within the FIGs. for simplicity of illustration and discussion, and so as not to obscure the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a tree structure diagram of web pages in an example embodiment of the present invention. The web pages illustrated <cross-reference target="DRAWINGS">FIG. 1</cross-reference> include Page A <highlight><bold>10</bold></highlight>, Page B <highlight><bold>20</bold></highlight>, Page C <highlight><bold>30</bold></highlight>, Page D <highlight><bold>40</bold></highlight>, and Page E <highlight><bold>50</bold></highlight>. It should be noted in FIG. <highlight><bold>1</bold></highlight> that the web pages illustrated have common components or parts. For example, Page A <highlight><bold>10</bold></highlight> has parts <highlight><bold>1</bold></highlight>, <highlight><bold>2</bold></highlight>, and <highlight><bold>3</bold></highlight>, whereas Page B <highlight><bold>20</bold></highlight> has part <highlight><bold>1</bold></highlight> in common with Page A <highlight><bold>10</bold></highlight> and has new parts <highlight><bold>4</bold></highlight> and <highlight><bold>5</bold></highlight>. Additionally, Page C <highlight><bold>30</bold></highlight> has parts <highlight><bold>2</bold></highlight> and parts <highlight><bold>3</bold></highlight> in common with Page A <highlight><bold>10</bold></highlight>, but has new part <highlight><bold>6</bold></highlight>. It should also be noted that Page A <highlight><bold>10</bold></highlight> and Page E <highlight><bold>50</bold></highlight> are able to transmit data for display in each other&apos;s respective pages. This is also the case between Page B <highlight><bold>20</bold></highlight> and Page E <highlight><bold>50</bold></highlight>. Further, whenever data is transferred from one page to another, if the page is in memory, then that page does not require re-loading and is able to be displayed with the new data contained therein. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Before proceeding into a detailed discussion of the logic used by the embodiments of the present invention it should be mentioned that the flowcharts shown in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference> as well as the modular configuration diagram shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> contain software, firmware, hardware, processes or operations that correspond, for example, to code, sections of code, instructions, commands, objects, hardware or the like, of a computer program that is embodied, for example, on a storage medium such as floppy disk, CD Rom, EP Rom, RAM, hard disk, etc. Further, the computer program can be written in any language such as, but not limited to, for example C&plus;&plus;. In the discussion of the flowcharts in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>, reference will be simultaneously made to the corresponding software modules shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a modular configuration diagram of the modules involved in an example embodiment of the present invention. The modules shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> include a web browser <highlight><bold>200</bold></highlight>, such as but not limited to, Internet Explorer&trade; or Netscape&trade;. The web browser <highlight><bold>200</bold></highlight> would be in communications with a web server <highlight><bold>210</bold></highlight> which would in turn communicate with a console engine <highlight><bold>220</bold></highlight>. The web browser <highlight><bold>200</bold></highlight> requests a particular page for display from the web server <highlight><bold>210</bold></highlight> which would in turn requests the console engine <highlight><bold>220</bold></highlight> to generate that particular web page. The console engine <highlight><bold>220</bold></highlight> would access an XML repository <highlight><bold>230</bold></highlight> containing portions or parts of web pages illustrated as part <highlight><bold>1</bold></highlight> <highlight><bold>240</bold></highlight>, part <highlight><bold>2</bold></highlight> <highlight><bold>250</bold></highlight>, and part N <highlight><bold>260</bold></highlight> as well as a HTML/XML template <highlight><bold>270</bold></highlight>. The console engine <highlight><bold>220</bold></highlight> would assemble the web page desired according to the HTML/XML template <highlight><bold>270</bold></highlight> and the parts required as illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Thereafter, a console API (Application Program Interface) <highlight><bold>280</bold></highlight> would transmit the web page to the web server <highlight><bold>210</bold></highlight> for display by the web browser <highlight><bold>200</bold></highlight>. The logic involved in the assembly of a web page from component parts is further detailed in the discussion of the flowchart illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart used to construct portions/parts of a web page into an entire web page using a template web page in an example embodiment of the present invention. Processing begins in operation <highlight><bold>300</bold></highlight> where web browser <highlight><bold>200</bold></highlight> requests a web page from the web server <highlight><bold>210</bold></highlight>. In operation <highlight><bold>310</bold></highlight>, the web server <highlight><bold>210</bold></highlight> receives the request. Thereafter, in operation <highlight><bold>320</bold></highlight> it is determined whether this is a console engine <highlight><bold>220</bold></highlight> request. If this is a console engine <highlight><bold>220</bold></highlight> request, then processing proceeds to operation <highlight><bold>340</bold></highlight>. In operation <highlight><bold>340</bold></highlight>, the console engine <highlight><bold>220</bold></highlight> checks the XML repository <highlight><bold>230</bold></highlight> for a displaytemplate registered for the requested HTML/XML template <highlight><bold>270</bold></highlight>. Processing then proceeds to operation <highlight><bold>350</bold></highlight> where it is determined if the template has been found in the XML repository <highlight><bold>230</bold></highlight>. If the template has been found in the XML repository <highlight><bold>230</bold></highlight>, then processing proceeds to operation <highlight><bold>380</bold></highlight>. In operation <highlight><bold>380</bold></highlight>, the console engine <highlight><bold>220</bold></highlight> checks the XML repository <highlight><bold>230</bold></highlight> for application handlers which are registered to modify the specific template. These application handlers are utilized to generate the individual parts <highlight><bold>240</bold></highlight> through <highlight><bold>260</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. If such application handlers are found in operation <highlight><bold>390</bold></highlight>, then processing proceeds to operation <highlight><bold>395</bold></highlight>. In operation <highlight><bold>395</bold></highlight> each application handler is executed and allowed to modify the associated part within the display template using console API <highlight><bold>280</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Thereafter, in operation <highlight><bold>398</bold></highlight> the display of all template is converted to HTML format. Then in operation <highlight><bold>370</bold></highlight>, the resulting Page is delivered to browser <highlight><bold>200</bold></highlight> for display. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, if in operation <highlight><bold>320</bold></highlight> it is determined that this is not a console engine <highlight><bold>220</bold></highlight> request then processing proceeds to operation <highlight><bold>330</bold></highlight> where the web server <highlight><bold>210</bold></highlight> processes the request. Again processing then proceeds to operation <highlight><bold>370</bold></highlight> where the resulting web page is delivered to the web browser <highlight><bold>200</bold></highlight> for display. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, if in operation <highlight><bold>350</bold></highlight> a template for the requested page cannot be found in the XML repository <highlight><bold>230</bold></highlight>, then processing proceeds to operation <highlight><bold>360</bold></highlight> where an error page is generated. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, if in operation <highlight><bold>390</bold></highlight> application handlers are not discovered in the XML repository <highlight><bold>230</bold></highlight> for the template then processing proceeds to operation <highlight><bold>398</bold></highlight>. Again, in operation <highlight><bold>398</bold></highlight> the display template is converted to HTML format and processing proceeds to operation <highlight><bold>370</bold></highlight> where the resulting Page is delivered to the web browser <highlight><bold>200</bold></highlight> for display. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of the generation of a delimited token used to pass specific data from one web page to another in an example embodiment of the present invention. This form of communication is illustrated in the example embodiment shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> parent or child page may transmit data to one another. Typically in order for data be transmitted between web pages they can only flow down a tree structure which occasionally requires the re-loading of a parent page when data is transferred to it by a child application. Further, this transmittal of data from one web page to another requires that information in at least part of a web page be modified for display purposes. This is accomplished through the logic illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> by the web server <highlight><bold>210</bold></highlight> and console engine <highlight><bold>220</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, execution begins in operation <highlight><bold>400</bold></highlight> where the web server <highlight><bold>210</bold></highlight> receives a delimited token containing an incoming XML data element (IXDE) from a web page. This delimited IXDE string would include, but not be limited to, such information as the source web page, the destination web page, and the data required for display. Thereafter, in operation <highlight><bold>410</bold></highlight> a modified XML data element/part (MXDE) is initialized. This MXDE will form an XML script containing the original web page template and parts along with the substituted data for display by the web browser <highlight><bold>200</bold></highlight>. In operation <highlight><bold>420</bold></highlight>, it is determined if the IXDE is empty. This operation is required since the console engine <highlight><bold>220</bold></highlight> is parsing the delimited string/token in operations <highlight><bold>430</bold></highlight>-<highlight><bold>460</bold></highlight> and <highlight><bold>490</bold></highlight>-<highlight><bold>530</bold></highlight>. If the IXDE is not empty then processing proceeds to operation <highlight><bold>430</bold></highlight>. In operation <highlight><bold>430</bold></highlight> it is determined if a delimiter is present <highlight><bold>1</bold></highlight>, in the IXDE. The delimiter serves to indicate the beginning and ending of the IXDE and if a delimiter is present in the IXDE then processing proceeds to operation <highlight><bold>440</bold></highlight>. In operation <highlight><bold>440</bold></highlight> the data starting from the delimiter is saved as a pre-token and the IXDE pointer is adjusted to after the delimiter. Thereafter, processing proceeds to operation <highlight><bold>450</bold></highlight> where it is determined if an ending delimiter is present in the IXDE. If there is no ending delimiter present in the IXDE then processing proceeds to operation <highlight><bold>460</bold></highlight> where it is determined that an invalid IXDE construct was received by the console engine <highlight><bold>220</bold></highlight>. Thereafter, processing proceeds to operation <highlight><bold>470</bold></highlight> where the remaining data in the IXDE is concatenated to the MXDE. Processing then proceeds to operation <highlight><bold>480</bold></highlight> where the MXDE is returned for display by the console engine <highlight><bold>220</bold></highlight> to the web browser <highlight><bold>200</bold></highlight>. This MXDE now contains the original XML definition (template) as well as the substituted data derived from the contents of the IXDE. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, if in operation <highlight><bold>450</bold></highlight> it is determined that an ending delimiter is present in the IXDE then processing proceeds to operation <highlight><bold>490</bold></highlight>. In operation <highlight><bold>490</bold></highlight>, the data between the two delimiters, the beginning and ending delimiters, is saved as a &ldquo;token.&rdquo; Thereafter, processing proceeds to operation <highlight><bold>500</bold></highlight> where it is determined if the token is present within the query string. If the token is present in the query string then processing proceeds operation <highlight><bold>510</bold></highlight>. In operation <highlight><bold>510</bold></highlight>, the data contained in the token from the query string is stored as a temporary value. In addition, in operation <highlight><bold>510</bold></highlight>, the pre-token created in operation <highlight><bold>440</bold></highlight> and the value are concatenated to form the MXDE. Thereafter, processing proceeds to operation <highlight><bold>530</bold></highlight> where the IXDE pointer is adjusted so that it points to after the ending delimiter. From operation <highlight><bold>530</bold></highlight> processing then proceeds to operation <highlight><bold>420</bold></highlight> as previously discussed. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, if in operation <highlight><bold>500</bold></highlight> the token is not present within the query string then processing proceeds to operation <highlight><bold>520</bold></highlight>. In operation <highlight><bold>520</bold></highlight> the pre-token and delimited token are concatenated onto the MXDE to indicate that the token was not found in the query string. Thereafter, processing proceeds operation <highlight><bold>530</bold></highlight> as previously discussed. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The benefit resulting from the present invention is that a simple, reliable system, method and computer program is provided for generating web pages and communicating between web pages. Using the present invention it is possible forweb page programmers to create portions of a web page which are assembled for display according to a template created. Further, re-loading of web pages is eliminated through the creation of IXDE which is parsed and utilized to create a new web page for display. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> While we have shown and described only a few examples herein, it is understood that numerous changes and modifications as known to those skilled in the art could be made to the example embodiment of the present invention. Therefore, we do not wish to be limited to the details shown and described herein, but intend to cover all such changes and modifications as are encompassed by the scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for generating and communicating to web pages, comprising: 
<claim-text>a console engine to receive requests for web pages and messages to be sent to web pages; and </claim-text>
<claim-text>an XML repository connected to the console engine having a plurality of parts of web pages and a plurality of HTML/XML templates, wherein the console engine extracts a template for the requested web page, incorporates the parts for the web page required by the template to form the web page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a web browser to request the web page from the console engine and display. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising: 
<claim-text>an XML repository to contain the plurality of parts of web pages, the plurality of HTML/XML templates and a plurality of application handlers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system recited in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, further comprising: 
<claim-text>a console API to transmit the web page to a web browser, wherein the console engine extracts the template from the XML repository and at least one application handler, said at least one application handler generates a part of the web page and incorporates that part into the template. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said console engine parses said message to identify delimiters contained in the message, the source web page, the destination web page, and data contained in the message. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said console engine concatenates the data from the message with the template to create a modified XML data element that is displayed the web browser. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method of generating a web page, comprising: 
<claim-text>receiving a request for a web page from a web browser; </claim-text>
<claim-text>accessing an XML repository for a template for the web page and application handlers associated with the template; </claim-text>
<claim-text>executing the application handlers to generate a plurality of parts for the web page; </claim-text>
<claim-text>combining the plurality of parts for web with the template to form the web page; and </claim-text>
<claim-text>transmitting the web page to the web browser for display. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said transmitting the web page to a web browser for display is done by a console API. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method recited in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>converting the template after combining the plurality of parts for the web page with the template to form the web page into HTML so as to be displayed by the browser. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer program for generating a web page, comprising: 
<claim-text>receiving a request for a web page from a web browser; </claim-text>
<claim-text>accessing an XML repository for a template for the web page and application handlers associated with the template; </claim-text>
<claim-text>executing the application handlers to generate a plurality of parts for the web page; </claim-text>
<claim-text>combining the plurality of parts for the web page with the template to form the web page; and </claim-text>
<claim-text>transmitting the web page to the web browser for display. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said transmitting the web page to a web browser for display is done by a console API. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer program recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>converting the template after combining the plurality of parts for the web page with the template to form the web page into HTML so as to be displayed by the browser. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method of communicating between web pages, comprising: 
<claim-text>receiving an incoming XML data element; </claim-text>
<claim-text>parsing the incoming XML data element based on delimiters to determine the source web page, the destination web page, and the data to be received by the destination web page; </claim-text>
<claim-text>creating a pretoken from the data in the incoming XML data element; </claim-text>
<claim-text>concatenating the pretoken to a token to form a modified XML data element; and </claim-text>
<claim-text>displaying the modified XML data element using a web browser. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein incoming XML data element is a portion of a web page in which that data to be displayed is changing and said token an existing web page. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method recited in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said modified XML data element is the web page to be displayed. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A computer program for communicating between web pages, comprising: 
<claim-text>receiving an incoming XML data element; </claim-text>
<claim-text>parsing the incoming XML data element based on delimiters to determine the source web page, the destination web page, and the data to be received by the destination web page; </claim-text>
<claim-text>creating a pretoken from the data in the incoming XML data element; </claim-text>
<claim-text>concatenating the pretoken to a token to form a modified XML data element; and </claim-text>
<claim-text>displaying the modified XML data element using a web browser. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer program recited in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein incoming XML data element is a portion of a web page in which that data to be displayed is changing and said token is an existing web page. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer program recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said modified XML data element is the web page to be displayed.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004993A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004993A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004993A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004993A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004993A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
