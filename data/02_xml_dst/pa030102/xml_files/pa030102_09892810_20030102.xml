<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005187A1-20030102-D00000.TIF SYSTEM "US20030005187A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005187A1-20030102-D00001.TIF SYSTEM "US20030005187A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005187A1-20030102-D00002.TIF SYSTEM "US20030005187A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005187A1-20030102-D00003.TIF SYSTEM "US20030005187A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005187A1-20030102-D00004.TIF SYSTEM "US20030005187A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005187</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09892810</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>012000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Dynamically optimizing the tuning of sockets across indeterminate environments</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Bernard</given-name>
<middle-name>A.</middle-name>
<family-name>King-Smith</family-name>
</name>
<residence>
<residence-us>
<city>Lake Katrine</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Gary</given-name>
<middle-name>J.</middle-name>
<family-name>Mincher</family-name>
</name>
<residence>
<residence-us>
<city>Rhinebeck</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Murray</given-name>
<middle-name>J.</middle-name>
<family-name>Richman</family-name>
</name>
<residence>
<residence-us>
<city>Newburgh</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Blanche E. Schiller, Esq.</name-1>
<name-2>HESLIN &amp; ROTHENBERG, P.C.</name-2>
<address>
<address-1>5 Columbia Circle</address-1>
<city>Albany</city>
<state>NY</state>
<postalcode>12203</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Sockets of a computing environment are optimally tuned, even though the environment is dynamic. The tuning is based on information dynamically determined at the time a socket is opened. The information includes, for instance, application specific information and/or socket specific information. Based on the information, one or more parameters of the socket, such as a socket send buffer size and/or a socket receive buffer size, are set to reflect the current configuration of the environment. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates, in general, to optimizing system resources, and in particular, to dynamically tuning sockets across an indeterminate number of socket connections and unknown network types. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In computing environments that can be dynamically changed, such as in parallel and cluster environments, optimal tuning of system resources is a challenge and tedious task. In particular, it is very difficult to tune the system resources for optimal performance when, for instance, the number of nodes and thus, the number of sockets, is variable, or when the type of network is unknown. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Thus, previously, a single set of resources has been tuned and shared across several applications. Alternatively, parameters of the resources have been adjusted with severe impact to the system. That is, the system would be stopped, adjustments would be made, and then the system would be started again, thus impacting other applications on the system. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Based on the foregoing, a need still exists for a capability that enables system resources to be optimally set for dynamic computing environments. For example, a need exists for a capability that enables the tuning of socket parameters for indeterminate environments. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a method of tuning sockets of a computing environment. The method includes, for instance, dynamically determining information relating to a current configuration of the computing environment; and setting one or more parameters of a socket of the computing environment based on the dynamically determined information. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In a further embodiment, a method of tuning sockets of a computing environment is provided. The method includes, for instance, determining, in response to opening a socket of the computing environment, information relating to a current configuration of the computing environment, the information including at least one of information relating to a network of the computing environment coupled to the socket and information relating to the socket; and setting one or more parameters of the socket based on the determined information, wherein the one or more parameters reflect the current configuration of the computing environment. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> System and computer program products corresponding to the above-summarized methods are also described and claimed herein. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Advantageously, the capabilities of the present invention enable the tuning of system resources in changing environments. For example, socket parameters are dynamically set based on the current configuration of the environment (e.g., based on the current number of socket connections and/or the network type). This tuning is performed without stopping the system and with no need for static allocations. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In one example, the capabilities of the present invention provide optimized values to the Transmission Control Protocol (TCP)/Internet Protocol (IP) socket that utilizes the advertised window feature of TCP/IP to prevent exhaustion of system network resources and poor performance. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>depicts one embodiment of a computing environment incorporating and using aspects of the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b </italic></highlight>depicts one example of various buffers of the computing environment of <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a</italic></highlight>, one or more of which are tuned in accordance with an aspect of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts one example of information used by one aspect of the present invention to tune one or more of the socket buffers of <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b; </italic></highlight></paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts one embodiment of the logic used by a home node to tune one or more of its socket buffers, in accordance with an aspect of the present invention; and </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts one embodiment of the logic used by a remote node to tune one or more of its socket buffers, in accordance with an aspect of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">BEST MODE FOR CARRYING OUT THE INVENTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In accordance with an aspect of the present invention, sockets are dynamically optimized for indeterminate environments. For example, sockets are optimized for changing environments (i.e., varying number of socket connections and/or different network types). To dynamically optimize a particular socket, application specific information available at the time the socket is opened and/or information available from the socket itself is utilized. This information is used to determine the optimal socket tuning needed for efficient internet protocol (IP) traffic between the node initializing the socket and the node at the other end (i.e., the remote node) of the socket connection. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One embodiment of a computing environment incorporating and using aspects of the present invention is described with reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a</italic></highlight>. A computing environment <highlight><bold>100</bold></highlight> includes, for instance, a plurality of nodes <highlight><bold>102</bold></highlight> coupled to one another via one or more networks <highlight><bold>104</bold></highlight>. Although two nodes and one network are illustrated, it is well known that a computing environment can include many more nodes and networks. For example, a particular node can be coupled to one or more other nodes via one network type, and further coupled to one or more other nodes via another network type, etc. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A node <highlight><bold>102</bold></highlight> includes an operating system <highlight><bold>106</bold></highlight>, such as AIX. Operating system <highlight><bold>106</bold></highlight> includes, for instance, at least one device driver <highlight><bold>108</bold></highlight> and at least one socket <highlight><bold>110</bold></highlight>, such as a TCP/IP socket. The number of device drivers is based, for instance, on the number of adapters in the environment; and the number of sockets is based, for example, on the desired number of socket connections between the node and one or more other remote nodes. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Coupled to operating system <highlight><bold>106</bold></highlight> are one or more network adapters <highlight><bold>112</bold></highlight>. Each network adapter is used to couple its associated node to a particular network, which corresponds to that adapter type. Network <highlight><bold>104</bold></highlight> includes any IP capable network, such as the Ethernet, Token Ring, FDDI, ATM, SP Switch, Fiber Channel, etc. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Further details regarding socket <highlight><bold>110</bold></highlight> and adapter <highlight><bold>112</bold></highlight> are described with reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b</italic></highlight>. In one embodiment, socket <highlight><bold>110</bold></highlight> includes at least one send buffer <highlight><bold>120</bold></highlight> used to send data from the socket, and at least one receive buffer <highlight><bold>122</bold></highlight> used to receive data at the socket. Additionally, adapter <highlight><bold>112</bold></highlight> includes, for instance, at least one transmit buffer <highlight><bold>124</bold></highlight> used to transmit data across the network. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The buffers are used to communicate between the nodes. For efficient communication, however, various of the buffers are tuned appropriately. For-example, the send and receive buffers of a socket are tuned. This tuning includes, for instance, establishing optimal settings for the parameters of the socket buffers (i.e., socket parameters), even though the environment includes an indeterminate number of socket connections and/or unknown network types. That is, optimal settings are determined even though the environment is changing. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The setting of the socket parameters utilizes certain information that is dynamically determined, when for instance, the node opens the socket. This information is available from the application opening the socket and/or from the socket itself. One example of the information used in tuning the parameters is described with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In one embodiment, the information includes, for instance: </paragraph>
<paragraph id="P-0025" lvl="2"><number>&lsqb;0025&rsqb;</number> (a) The number of remote sockets <highlight><bold>200</bold></highlight> to be opened. This information is available from the application requesting the socket connection (i.e., on the home node). This application determines at socket open time the total number of remote sockets. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The following information, which is extracted by the node opening the socket, is extracted from the opened socket itself: </paragraph>
<paragraph id="P-0027" lvl="2"><number>&lsqb;0027&rsqb;</number> (b) A network adapter maximum segment size <highlight><bold>202</bold></highlight>, which indicates the size of the largest message that can be sent for the particular network being used. In TCP/IP, this information is retrieved as the TCP_MAXSEG option from the IPPROTO_TCP level; </paragraph>
<paragraph id="P-0028" lvl="2"><number>&lsqb;0028&rsqb;</number> (c) A current socket send buffer size <highlight><bold>204</bold></highlight>, which indicates how much data the socket is going to attempt to send. In TCP/IP, this information is retrieved as the SO_SNDBUF option from the SOL_SOCKET level; </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> (d) A current socket receive buffer size <highlight><bold>206</bold></highlight>, which indicates how much data the socket can receive. In TCP/IP, this information is retrieved as the SO_RCVBUF option from the SOL_SOCKET level; </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> (e) A current socket maximum buffer limit (sb_max), which indicates the maximum amount of buffer space that a single socket could obtain to stage data. It is retrieved, for instance, from the sb_max field of the socket parameter structures; and </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> (f) An adapter transmit limit <highlight><bold>210</bold></highlight>, which indicates either the maximum number of packets or the maximum amount of data that an adapter can handle at any one time. It is obtained using, for instance, ioctl for the adapter. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Some or all of the information listed above is used to set one or more parameters associated with the socket. For instance, the information, which is based on the current configuration of the computing environment, is used to set the current socket send buffer size and/or the current socket receive buffer size. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> These parameters are set on the node initiating the socket connection (i.e., the home node), as well as on the node at the other end of the connection (i.e., the remote node). One embodiment of the logic associated with performing the tuning by the home node is described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As one example, the logic runs in the operating system of the home node and is run at the time of opening the socket. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, initially, a determination is made as to whether the current socket send buffer size (SO_SNDBUF) is less than a predetermined value, INQUIRY <highlight><bold>300</bold></highlight>. In one example, this predetermined value is equal to four times the network adapter maximum segment size (TCP_MAXSEG). If the retrieved SO_SNDBUF value is less than four times TCP_MAXSEG, then the SO_SNDBUF is set equal to the predetermined value, STEP <highlight><bold>302</bold></highlight>. That is, in this example, SO_SNDBUF is set equal to four times TCP_MAXSEG. This is to ensure minimal data streaming from the socket. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Subsequently, or if the socket send buffer size is not less than the predetermined value, a further determination is made as to whether the socket send buffer size is greater than the amount of data that can be transmitted, INQUIRY <highlight><bold>304</bold></highlight>. For instance, a determination is made as to whether the retrieved SO_SNDBUF value is greater than the maximum number of packets in the adapter transmit queue times TCP_MAXSEG, or greater than the adapter transmit buffer size, depending on how the data is being transmitted (e.g., packets or buffers). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Should the socket send buffer size be greater than the amount of data that can be transmitted, then SO_SNDBUF is set to the maximum number of packets in the adapter transmit buffer times TCP_MAXSEG or it is set to the maximum adapter buffer size to prevent sending more data than the network adapter can handle, STEP <highlight><bold>306</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Thereafter, or if the send buffer value is not greater than the amount of data that can be transmitted, the socket receive buffer size is set, STEP <highlight><bold>308</bold></highlight>. In one example, the socket receive buffer size (SO_RCVBUF) is set to a large size (e.g., 512 k) so that each socket can have a reasonable receive buffer to receive the data. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Subsequent to setting the socket receive buffer size, a further determination is made as to whether the socket send buffer size or the socket receive buffer size is greater than the current socket maximum buffer limit (sb_max), INQUIRY <highlight><bold>310</bold></highlight>. Should the socket send buffer size (SO_SNDBUF) or socket receive buffer size (SO_RCVBUF) exceed sb_max, then the socket maximum buffer limit is used for whichever buffer size is in excess to prevent a system error message indicating a socket is exceeding the socket maximum buffer limit, STEP <highlight><bold>312</bold></highlight>. This completes the tuning of the send and receive buffers on the home node. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In addition to tuning the send and receive buffers of the socket on the home node, the send and receive buffers of the socket at the remote node are also tuned. One embodiment of the logic associated with this tuning is described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. As one example, the logic runs in the operating system of the remote node and is run at the time of opening the socket. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, initially, the remote node receives from the home node the number of remote sockets to be opened. Then, based on the number of remote sockets to be opened, the current socket send buffer size is set on the remote node using a predefined equation, STEP <highlight><bold>400</bold></highlight>. In one example, the predefined equation includes: (maximum number of packets per adapter of the adapter transmit limit (or maximum buffer of adapter transmit limit&divide;TCP_MAXSEG)&divide;number of remote sockets to be opened (or four if less than four))&times;TCP_MAXSEG. This equation is used to determine a maximum amount of data that can be sent by the socket based on the current configuration. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Thereafter, a determination is made as to whether the socket send buffer size derived from the above equation is greater than the socket maximum buffer limit (sb_max), INQUIRY <highlight><bold>402</bold></highlight>. If so, then sb_max is used for the socket send buffer size, instead of the derived socket send buffer size, STEP <highlight><bold>404</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Next, or if the socket send buffer size is not greater than sb_max, then a further determination is made as to whether the socket receive buffer size is less than a predetermined value, INQUIRY <highlight><bold>406</bold></highlight>. In one example, this predetermined value is equal to four times the network adapter maximum segment size (TCP_MAXSEG). If the socket receive buffer value is less than four times TCP_MAXSEG, then SO_RCVBUF is set equal to the predetermined value, STEP <highlight><bold>408</bold></highlight>. This is to ensure minimal data streaming from the TCP/IP socket. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Subsequently, or if the socket receive buffer size is not less than the predetermined value, then a further determination is made as to the whether the socket receive buffer size is greater than the amount of data that the adapter can receive, INQUIRY <highlight><bold>410</bold></highlight>. Should the socket receive buffer size be greater than the amount of data that the adapter can receive, then the socket receive buffer size is set, STEP <highlight><bold>412</bold></highlight>. In one embodiment, it is set equal to the (maximum number of packets per adapter of the adapter transmit limit (or maximum buffer of the adapter transmit limit divided by TCP_MAXSEG) divided by the number of remote TCP/IP sockets to be opened (or four if less than four))&times;TCP_MAXSEG. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Described in detail above is a capability for optimally tuning a socket. The capability utilizes application specific data and/or information about the socket connection available from the socket to set one or more parameters of the socket. Each socket is optimized, so that the amount of data sent by one or more sockets of a particular network does not exceed the capabilities of the network adapters. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> For the home node sending out data, the tuning parameters ensure that a minimal number of IP packets will be sent per socket, thus providing some level of data streaming. Further, it ensures that the number of packets will not exceed the adapters ability for handling packets. The remote node ensures that enough space is allocated, so that it can receive the full amount of data that the home node can send. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> For the remote node, each connection is provided a portion of the total amount of space that the home node can receive. This prevents the remote nodes from flooding the home node with more data than it can handle. This uses the advertised windowing ability of TCP/IP across the remote connections to limit the amount of data sent per TCP/IP socket. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Advantageously, if there are multiple types of networks available, the capability of the present invention automatically adjusts the buffer allocations based on the segment size of the network selected per socket connection. If several parallel or cluster jobs are run at different numbers of sockets, then the technique adjusts the allocations of the buffers to optimize to the number of sockets. This is especially advantageous in cluster environments where the number of sockets and/or number of nodes available can be dynamic, which has to be accounted for each time a job is started. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Although aspects of the invention are described with reference to TCP/IP, the invention is not limited to such an environment. For example, the techniques can be applied to any implementation of IP, including, but not limited to, UDP/IP. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The present invention can be included in an article of manufacture (e.g., one or more computer program products) having, for instance, computer usable media. The media has embodied therein, for instance, computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Additionally, at least one program storage device readable by a machine, tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Although preferred embodiments have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of tuning sockets of a computing environment, said method comprising: 
<claim-text>dynamically determining information relating to a current configuration of the computing environment; and </claim-text>
<claim-text>setting one or more parameters of a socket of said computing environment based on the dynamically determined information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said dynamically determining is performed in response to opening the socket. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said one or more parameters comprise a size of a send buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said one or more parameters comprise a size of a receive buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said dynamically determining comprises determining a maximum amount of data that can be sent by said socket based on the current configuration. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said information comprises information relating to a network of the computing environment coupled to the socket. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said information relating to the network comprises at least one of a network adapter maximum segment size and an adapter transmit limit. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said information comprises information relating to the socket. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said information comprises at least one of a current socket send buffer size, a current socket receive buffer size and a current socket maximum buffer limit. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said information comprises a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said computing environment includes an indeterminate number of sockets. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said computing environment includes a plurality of networks. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said setting is performed by a node of the computing environment initiating a socket connection with another node of the computing environment, and wherein the socket is local to the initiating node. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on at least one of a desired amount of data streaming through the send buffer, an amount of data that can be transmitted, and a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said setting comprises setting a size of a receive buffer of the socket, such that the size does not exceed a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said setting is performed by a node of the computing environment being connected to by another node initiating a socket connection with the node, and wherein the socket is local to the node. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said setting comprises setting a size of a receive buffer of the socket based on an amount of data that can be received. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method of tuning sockets of a computing environment, said method comprising: 
<claim-text>determining, in response to opening a socket of the computing environment, information relating to a current configuration of the computing environment, said information including at least one of information relating to a network of the computing environment coupled to the socket and information relating to the socket; and </claim-text>
<claim-text>setting one or more parameters of the socket based on the determined information, wherein the one or more parameters reflect the current configuration of the computing environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A system of tuning sockets of a computing environment, said system comprising: 
<claim-text>means for dynamically determining information relating to a current configuration of the computing environment; and </claim-text>
<claim-text>means for setting one or more parameters of a socket of said computing environment based on the dynamically determined information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the dynamically determining is performed in response to opening the socket. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said one or more parameters comprise a size of a send buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said one or more parameters comprise a size of a receive buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said means for dynamically determining comprises means for determining a maximum amount of data that can be sent by said socket based on the current configuration. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said information comprises information relating to a network of the computing environment coupled to the socket. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein said information relating to the network comprises at least one of a network adapter maximum segment size and an adapter transmit limit. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said information comprises information relating to the socket. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein said information comprises at least one of a current socket send buffer size, a current socket receive buffer size and a current socket maximum buffer limit. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said information comprises a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said computing environment includes an indeterminate number of sockets. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said computing environment includes a plurality of networks. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said means for setting comprises performing the setting by a node of the computing environment initiating a socket connection with another node of the computing environment, and wherein the socket is local to the initiating node. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein said means for setting comprises means for setting a size of a send buffer of the socket based on at least one of a desired amount of data streaming through the send buffer, an amount of data that can be transmitted, and a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein said means for setting comprises means for setting a size of a receive buffer of the socket, such that the size does not exceed a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said means for setting comprises performing the setting by a node of the computing environment being connected to by another node initiating a socket connection with the node, and wherein the socket is local to the node. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein said means for setting comprises means for setting a size of a send buffer of the socket based on a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein said means for setting comprises means for setting a size of a send buffer of the socket based on a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein said means for setting comprises means for setting a size of a receive buffer of the socket based on an amount of data that can be received. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A system of tuning sockets of a computing environment, said system comprising: 
<claim-text>means for determining, in response to opening a socket of the computing environment, information relating to a current configuration of the computing environment, said information including at least one of information relating to a network of the computing environment coupled to the socket and information relating to the socket; and </claim-text>
<claim-text>means for setting one or more parameters of the socket based on the determined information, wherein the one or more parameters reflect the current configuration of the computing environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A system of tuning sockets of a computing environment, said system comprising: 
<claim-text>at least one node to dynamically determine information relating to a current configuration of the computing environment; and </claim-text>
<claim-text>one or more nodes of the at least one node to set one or more parameters of a socket of said computing environment based on the dynamically determined information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A system of tuning sockets of a computing environment, said system comprising: 
<claim-text>at least one node to determine, in response to opening a socket of the computing environment, information relating to a current configuration of the computing environment, said information including at least one of information relating to a network of the computing environment coupled to the socket and information relating to the socket; and </claim-text>
<claim-text>one or more nodes of the at least one node to set one or more parameters of the socket based on the determined information, wherein the one or more parameters reflect the current configuration of the computing environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. At least one program storage device readable by a machine, tangibly embodying at least one program of instructions executable by the machine to perform a method of tuning sockets of a computing environment, said method comprising: 
<claim-text>dynamically determining information relating to a current configuration of the computing environment; and </claim-text>
<claim-text>setting one or more parameters of a socket of said computing environment based on the dynamically determined information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said dynamically determining is performed in response to opening the socket. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said one or more parameters comprise a size of a send buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said one or more parameters comprise a size of a receive buffer of the socket. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said dynamically determining comprises determining a maximum amount of data that can be sent by said socket based on the current configuration. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said information comprises information relating to a network of the computing environment coupled to the socket. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein said information relating to the network comprises at least one of a network adapter maximum segment size and an adapter transmit limit. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said information comprises information relating to the socket. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, wherein said information comprises at least one of a current socket send buffer size, a current socket receive buffer size and a current socket maximum buffer limit. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said information comprises a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said computing environment includes an indeterminate number of sockets. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said computing environment includes a plurality of networks. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said setting is performed by a node of the computing environment initiating a socket connection with another node of the computing environment, and wherein the socket is local to the initiating node. </claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on at least one of a desired amount of data streaming through the send buffer, an amount of data that can be transmitted, and a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein said setting comprises setting a size of a receive buffer of the socket, such that the size does not exceed a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said setting is performed by a node of the computing environment being connected to by another node initiating a socket connection with the node, and wherein the socket is local to the node. </claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on a number of remote sockets to be opened. </claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference>, wherein said setting comprises setting a size of a send buffer of the socket based on a maximum buffer limit of the socket. </claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The at least one program storage device of <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference>, wherein said setting comprises setting a size of a receive buffer of the socket based on an amount of data that can be received. </claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. At least one program storage device readable by a machine, tangibly embodying at least one program of instructions executable by the machine to perform a method of tuning sockets of a computing enviornment, said method comprising: 
<claim-text>determining, in response to opening a socket of the computing environment, information relating to a current configuration of the computing environment, said information including at least one of information relating to a network of the computing environment coupled to the socket and information relating to the socket; and </claim-text>
<claim-text>setting one or more parameters of the socket based on the determined information, wherein the one or more parameters reflect the current configuration of the computing environment.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1B</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005187A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005187A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005187A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005187A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005187A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
