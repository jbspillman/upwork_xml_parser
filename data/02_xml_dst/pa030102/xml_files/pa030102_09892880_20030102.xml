<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005080A1-20030102-D00000.TIF SYSTEM "US20030005080A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005080A1-20030102-D00001.TIF SYSTEM "US20030005080A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005080A1-20030102-D00002.TIF SYSTEM "US20030005080A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005080</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09892880</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>218000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>219000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Systems and methods for accessing data</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>James</given-name>
<middle-name>S.</middle-name>
<family-name>Watkins</family-name>
</name>
<residence>
<residence-us>
<city>Richmond</city>
<state>VA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jeffrey</given-name>
<middle-name>P.</middle-name>
<family-name>Hall</family-name>
</name>
<residence>
<residence-us>
<city>Bumpass</city>
<state>VA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FINNEGAN, HENDERSON, FARABOW, GARRETT &amp;</name-1>
<name-2>DUNNER LLP</name-2>
<address>
<address-1>1300 I STREET, NW</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20006</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A data management system consistent with the present invention communicates with a client terminal. The system includes a virtual address connection defining a network address to which the client terminal sends a request reflecting a function to be performed. The system also includes a plurality of server devices, each capable of performing the server function requested by the client terminal. Each of the plurality of server devices has access to a common storage device. A load balancer, associated with the virtual address connection, receives the request and selects one of the plurality of server devices to perform the requested function. The load balancer routes the request to the selected server device to perform the requested function, and the selected server device accesses the common storage device to perform the request. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to systems and methods for accessing data and, more particularly, to systems and methods for accessing a data stored in a single storage device using a selected one of a plurality of servers. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computers have become so wide spread that they are now commonplace. A computer system&apos;s functionality and usefulness can be dramatically enhanced by coupling stand-alone computers together to form a computer network. In a computer network, users may readily exchange files, share information stored on a common storage device, pool resources, communicate via e-mail, and even video teleconference. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> One popular type of network is a &ldquo;client-server&rdquo; network. In such a network, a client application program communicates with a server, which is typically a remote computer system accessible over a network. The server, based upon requests from the client process, presents information as server responses to the requests of the client process. The client process may be active in a first computer system, and the server process may be active in a second computer system, and communicate with one another over a communication medium, thus providing distributed functionality and allowing the multiple clients to take advantage of the information gathering capabilities of the server. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Although client-server networks offer a great deal of flexibility and versatility, various core services. For example, users of the client typically store data files on the server storage device, rather than on the hard drive of the computer system running the client process. If the server fails, these files become inaccessible. Such server failures are not uncommon. Further aggravating the problem is the fact that failure is more likely to occur as computers take on more comprehensive and demanding tasks, and that their hardware and software is often more complex to accommodate the increased load. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> To make computer systems more reliable, layers of redundancy may be added. When one part of the computer system fails, the failure is detected and a backup device automatically takes over. In some cases, the same work may be performed in parallel by two separate devices in case one of them fails. Of course, these specialized redundant systems come at an extremely high price. Furthermore, upgrading or modifying these types of systems tends to be difficult and expensive. In particular, a substantial amount of hardware and/or software of the computer system usually needs to be modified when making an upgrade, requiring a substantial amount of time and expense. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Another way to add reliability to a client-server system involves shifting the work from a malfunctioning server to one that is in good operating condition. This is accomplished by establishing a new connection to the operational server upon detection of the failure. Work would then continue on the newly connected server. However, this scheme has several disadvantages. Namely, the user of the client process must log-on to the new server and then re-access any data files from the new server. This switch-over process is time consuming, tedious, and frustrating. Another major drawback is the fact that the user will typically lose any data that was not stored at the time of the failure. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Thus, there is a need for an efficient, user-friendly, and cost effective client-server system that can provide a high degree of reliability. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Systems and methods consistent with the present invention enable a client-server system to provide a high degree of reliability when accessing data. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> To achieve these and other advantages, a data management system consistent with the present invention communicates with a client terminal. The system includes a virtual address connection defining a network address to which the client terminal sends a request reflecting a function to be performed. The system also includes a plurality of server devices, each capable of performing the server function requested by the client terminal. Each of the plurality of server devices has access to a common storage device. A load balancer, associated with the virtual address connection, receives the request and selects one of the plurality of server devices to perform the requested function. The load balancer routes the request to the selected server device to perform the requested function, and the selected server device accesses the common storage device to perform the request. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In another aspect of the invention, a method for operating a data management system that communicates with a client terminal includes receiving a request for performance of a server function from a client terminal. The server process request is received at a virtual address connection defining a network address to which the client terminal sends the request for performance of the server function. The method selects one of a plurality of server devices to perform the requested function, wherein each of the plurality of server devices is capable of performing the requested server function. Each of the plurality of server devices also has access to a common storage device. The client request is forwarded to the selected server device, which then accesses the storage device to perform the request. Based on the performed request, a server response is then forwarded to the client terminal. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Both the foregoing general description and the following detailed description are exemplary and are intended to provide further explanation of the invention as claimed.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The accompanying drawings provide a further understanding of the invention and, together with the detailed description, explain the principles of the invention. In the drawings: </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a data management system <highlight><bold>100</bold></highlight> consistent with the present invention; and </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flow diagram of a method, consistent with the present invention, for accessing data using system <highlight><bold>100</bold></highlight>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Systems and methods consistent with the present invention provide a reliable data management system for accessing data. Clients send requests to a single virtual address connection, where the requests are received by a load balancer. The load balancer then selects one of a plurality of server devices according to a predetermined algorithm that balances the total processing load among the server devices. Each server device has complete and full access to a common server storage device, and each server is fully capable of handling each request received from a client terminal. The selected server accesses the server storage device for responding to the particular request. In this way, a plurality of redundant server devices are provided that seamlessly respond to requests from the client terminals requesting access to a common server storage device. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Embodiments of the present invention will now be described with reference to the accompanying drawings. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a block diagram of a data management system <highlight><bold>100</bold></highlight> consistent with the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, system <highlight><bold>100</bold></highlight> includes client terminals <highlight><bold>110</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>110</bold></highlight>-N for sending data requests to a server unit <highlight><bold>120</bold></highlight> over a network <highlight><bold>130</bold></highlight>. Network <highlight><bold>130</bold></highlight> may be any type of network (public or private, local area network or wide area network), such as an Ethernet, an extranet, or the Internet. While <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows only one server unit <highlight><bold>120</bold></highlight>, any number of server units may be used as part of system <highlight><bold>100</bold></highlight>. Further, although the client terminals <highlight><bold>110</bold></highlight> and server <highlight><bold>120</bold></highlight> are shown as operating within two computer systems, it will be appreciated by one skilled in the art that the processes of each may be implemented in a variety of software or hardware devices, either programmed or dedicated. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Client terminals <highlight><bold>110</bold></highlight> may include a personal computer, such as an IBM-compatible computer, or the like, with a connection to network <highlight><bold>130</bold></highlight>. Terminals <highlight><bold>110</bold></highlight> may be used to execute application programs (not shown), including programs used to submit requests for data files stored on a server storage device. Further, while the description below refers to the client requests as being data file requests, system <highlight><bold>100</bold></highlight> may manage any type of client request. The operation of application programs and the manner in which they are used to access servers, e.g., accessible via the Internet, an intranet, an extranet, or some equivalent data network, are known in the art. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, server unit <highlight><bold>120</bold></highlight> further includes a virtual address connection <highlight><bold>121</bold></highlight>, a load balancer <highlight><bold>122</bold></highlight>, a bank of server devices <highlight><bold>124</bold></highlight>, a data share unit <highlight><bold>126</bold></highlight>, a storage network <highlight><bold>127</bold></highlight>, and a server storage device <highlight><bold>128</bold></highlight>. Client terminals <highlight><bold>110</bold></highlight> send data file requests to a virtual address connection <highlight><bold>121</bold></highlight> which is associated with the bank of server devices <highlight><bold>124</bold></highlight>. In systems consistent with the invention, connection <highlight><bold>121</bold></highlight> may be a network address corresponding to a virtual address of load balancer <highlight><bold>122</bold></highlight> connected to server devices <highlight><bold>124</bold></highlight>. Thus, unlike a conventional network address, which is unique to an individual network device, virtual address connection <highlight><bold>121</bold></highlight> effectively identifies all server devices <highlight><bold>124</bold></highlight>. Virtual address connection <highlight><bold>121</bold></highlight> may be implemented by the software of load balancer <highlight><bold>122</bold></highlight>, such that load balancer <highlight><bold>122</bold></highlight> may be the actual device that first receives the data requests. However, virtual address connection <highlight><bold>121</bold></highlight> may alternatively comprise a separate device having a network address to which client terminals <highlight><bold>110</bold></highlight> send all data file requests. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Load balancer <highlight><bold>122</bold></highlight> includes a memory such as a local disk storage (not shown), for storing program code that, when executed, selects one of server devices <highlight><bold>124</bold></highlight> to respond to the received request. The program code selects a server device in a manner that balances the load of processing requests from client terminals <highlight><bold>110</bold></highlight> among the various server devices <highlight><bold>124</bold></highlight>. For instance, load balancer <highlight><bold>122</bold></highlight> may randomly select one of server devices <highlight><bold>124</bold></highlight> for handling a data request from a client terminal. Alternatively, load balancer <highlight><bold>122</bold></highlight> may select a server device <highlight><bold>124</bold></highlight> based on a predetermined rotational order. Either way, load balancer <highlight><bold>122</bold></highlight> transfers to the selected server <highlight><bold>124</bold></highlight> a connection to the client terminal <highlight><bold>110</bold></highlight> originating the data file request. The selected server <highlight><bold>124</bold></highlight> then processes the data file request using server processes as known in the art. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Server devices <highlight><bold>124</bold></highlight> are preferably standard file servers known in the art, such as a Unisys&trade; ES7000 file server or a Compaq Prolian 8500 file server. Servers <highlight><bold>124</bold></highlight> operate in parallel while handling data file requests from client terminals <highlight><bold>110</bold></highlight>. While <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows five server devices <highlight><bold>124</bold></highlight> as part of server unit <highlight><bold>120</bold></highlight>, any number of servers <highlight><bold>124</bold></highlight> may be used. Based on the data file request, server devices <highlight><bold>124</bold></highlight> access server storage device <highlight><bold>128</bold></highlight>, through data share unit <highlight><bold>126</bold></highlight> and storage network <highlight><bold>127</bold></highlight>. The request sent by a server device <highlight><bold>124</bold></highlight> may either request retrieval of a file stored in storage device <highlight><bold>128</bold></highlight> or request storage of a file in storage device <highlight><bold>128</bold></highlight>. For either type of request, data share unit <highlight><bold>126</bold></highlight> allows servers <highlight><bold>124</bold></highlight> to operate in parallel without accessing the same storage location of storage device <highlight><bold>128</bold></highlight> at the same time. Storage network <highlight><bold>127</bold></highlight> may be implemented using optical fiber switches. Server storage device <highlight><bold>128</bold></highlight> preferably comprises a large capacity memory capable of maintaining data files for all of client terminals <highlight><bold>110</bold></highlight>. For example, storage device <highlight><bold>128</bold></highlight> may comprise a 2.5 Terabyte EMC Symetrics storage device. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The operation of system <highlight><bold>100</bold></highlight> will now be described with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a flow diagram of a method consistent with the present invention for handling data file requests using system <highlight><bold>100</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> client using terminal <highlight><bold>110</bold></highlight> submits a data file request over network <highlight><bold>120</bold></highlight> to system <highlight><bold>100</bold></highlight> (step <highlight><bold>210</bold></highlight>). When requesting a data file stored on server storage device <highlight><bold>128</bold></highlight> (e.g., to manipulate that data file using an application program running on the client terminal), the data request may include the file name, the address storage location of the file, and the network address of the client terminal to which the file should be sent, as well as any other information identifying the file, the user or client terminal requesting the file, or the particular application program requesting the file. When requesting to store a data file on server storage device <highlight><bold>128</bold></highlight>, the data request may include the file name, the network address of the client terminal requesting storage of the file, as well as any other information identifying the file, the user or client terminal requesting storage of the file, or the particular application program requesting storage of the file. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> A client terminal <highlight><bold>110</bold></highlight> sends the data request the virtual network address of virtual address connection <highlight><bold>121</bold></highlight>. Thus, from the standpoint of client terminals <highlight><bold>110</bold></highlight>, each request is sent to a single server located at the virtual address. Each request, however, is actually sent to load balancer <highlight><bold>122</bold></highlight> for a determination of which of a number of server devices <highlight><bold>124</bold></highlight> will actually handle the request (step <highlight><bold>220</bold></highlight>). In systems consistent with the present invention, load balancer <highlight><bold>122</bold></highlight> randomly assigns a particular server device to handle the request. Other methods for balancing the load amongst the bank of server devices <highlight><bold>124</bold></highlight> may also be used, however, such as cyclically selecting a server device according to a predetermined rotational order. Further, load balancer <highlight><bold>122</bold></highlight> may determine which server device <highlight><bold>124</bold></highlight> will handle a request based on the operational status of each server (e.g., the relative load of each server, whether a particular server is currently operational, etc.). </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The selected server device is then forwarded the data request (step <highlight><bold>230</bold></highlight>). Based on the type of data request, the server device <highlight><bold>124</bold></highlight> will then either retrieve a data file from server storage device <highlight><bold>128</bold></highlight> or store a data file in storage device <highlight><bold>128</bold></highlight> (step <highlight><bold>240</bold></highlight>). Load balancer <highlight><bold>122</bold></highlight> allows each server device <highlight><bold>124</bold></highlight> to see the entire file system structure of server storage device <highlight><bold>128</bold></highlight>. This allows any user to have a data path through any server device <highlight><bold>124</bold></highlight>. Server device <highlight><bold>124</bold></highlight> performs the file retrieval and storage functions in a manner known to those skilled in the art. Further, in systems consistent with the present invention, server devices <highlight><bold>124</bold></highlight> may perform only file input-output type functions, and thus may not perform any server based processes, data manipulation, printing functions, or user authorization functions. However, alternative embodiments may use server devices that do perform one or more of these functions or any type of function (e.g., database functions, authorization, and DNS, DHCP, etc.), in addition to or in place of the file input-output functions. For instance, system <highlight><bold>100</bold></highlight> allows additional server devices to be easily added to the bank of servers <highlight><bold>124</bold></highlight> to handle any additional load from processing multiple server functions. Further, a separate server systems <highlight><bold>100</bold></highlight> may be dedicated for handling particular types of requests (e.g., one for handling print functions and another for handling filing functions). </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As described above, each server device <highlight><bold>124</bold></highlight> has complete and full access to server storage device <highlight><bold>128</bold></highlight>. Moreover, in systems consistent with the present invention, a number of servers <highlight><bold>124</bold></highlight> may operate in parallel such that they may each be handling a data file request from a client terminal at the same time. To prevent two or more servers <highlight><bold>124</bold></highlight> from accessing the same storage location of storage device <highlight><bold>128</bold></highlight> at the same time, data share unit <highlight><bold>126</bold></highlight> monitors the activity of the servers. In particular, when multiple server devices simultaneously try to access the same storage location, data share unit <highlight><bold>126</bold></highlight> will grant access to only one server device. Preferably, the server devices are granted access in the order that they received the data requests (e.g., the server device that is first to receive a data request is granted access first). Alternatively, server devices <highlight><bold>124</bold></highlight> may also operate serially such that only one server is handling a request at a given time. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> After accessing server storage device <highlight><bold>128</bold></highlight>, the selected server device <highlight><bold>124</bold></highlight> then forwards a server response to the client terminal <highlight><bold>120</bold></highlight> that originated the data request (step <highlight><bold>250</bold></highlight>). For example, if the client terminal requested a data file stored on server storage device <highlight><bold>128</bold></highlight>, then server device <highlight><bold>124</bold></highlight> forwards a server response including the requested file to the client terminal. If, on the other hand, the client terminal requested storage of a data file on storage device <highlight><bold>128</bold></highlight>, then server device <highlight><bold>124</bold></highlight> forwards a server response including an acknowledgement that the file was stored along with the storage location. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> System <highlight><bold>100</bold></highlight> also allows any specific server device <highlight><bold>124</bold></highlight> to be seamlessly taken offline for maintenance or trouble. In particular, the processing of client terminals <highlight><bold>120</bold></highlight> will not be interrupted while an existing server device is taken off line or while a new server device is newly put on line. Moreover, additional server devices may be added to server bank <highlight><bold>124</bold></highlight> without significantly changing the architecture of system <highlight><bold>100</bold></highlight>. In systems consistent with the present invention, processing of client terminals <highlight><bold>110</bold></highlight> is not interrupted when adding a new server device to the bank of servers <highlight><bold>124</bold></highlight>. For instance, a network manager may simply update the programming of load balancer <highlight><bold>122</bold></highlight> to recognize the newly added server. The front end of the system need not be updated as client terminals <highlight><bold>110</bold></highlight> will still communicate data requests via virtual address connection <highlight><bold>121</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Therefore, systems consistent with the present invention provide an efficient, reliable client-server network. Moreover, systems and methods consistent with the invention may be easily updated without requiring a substantial amount of overhaul to other software or hardware network components. It will be apparent to those skilled in the art that various modifications and variations can be made to the system and method of the present invention without departing from the spirit or scope of the invention. For example, system <highlight><bold>100</bold></highlight> may be dedicated to other types of networking functions other than data retrieval and storage. Additionally, although aspects of the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM; or other forms of RAM or ROM. The present invention covers the modifications and variations of this invention provided they come within the scope of the appended claims and their equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data management system that communicates with a client terminal, the data server system comprising: 
<claim-text>a virtual address connection defining a network address to which the client terminal sends a request reflecting a function to be performed; </claim-text>
<claim-text>a plurality of server devices, each capable of performing the server function requested by the client terminal, and wherein each of the plurality of server devices has access to a common storage device; and </claim-text>
<claim-text>a load balancer, associated with the virtual address connection, for receiving the request and for selecting one of the plurality of server devices to perform the requested function; </claim-text>
<claim-text>wherein the load balancer routes the request to the selected server device to perform the requested function, and wherein the selected server device accesses the common storage device to perform the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the plurality of server devices operate in parallel. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the request is a data file request and wherein the client terminal sends all requests to the virtual address connection. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein a plurality of client terminals send respective requests to the virtual address connection, and wherein the load balancer determines the one of the plurality of server devices that will perform the server function requested by each of the plurality of client terminals. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the load balancer randomly determines the server device that will perform the server function. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the load balancer determines the server device that will perform the server function according to a predetermined rotational order. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the load balancer determine the server device that will perform the function based on a current processing load of each server device. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further including: 
<claim-text>a data share unit for preventing multiple server devices from simultaneously accessing the same storage location of the server storage device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method for operating a data management system that communicates with a client terminal, the method comprising: 
<claim-text>receiving a request for performance of a server function from a client terminal, wherein the server process request is received at a virtual address connection defining a network address to which the client terminal sends the request for performance of the server function; </claim-text>
<claim-text>selecting one of a plurality of server devices to perform the requested function, wherein each of the plurality of server devices is capable of performing the requested server function, and wherein each of the plurality of server devices has access to a common storage device; </claim-text>
<claim-text>forwarding the client request to the selected server device; </claim-text>
<claim-text>accessing, using the selected server device, the storage device to perform the request; and </claim-text>
<claim-text>forwarding, based on the performed request, a server response to the client terminal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the plurality of server devices operate in parallel. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the request is a data file request, and wherein receiving the server process request includes: 
<claim-text>receiving all data file requests from the client terminal at the virtual address connection. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein receiving the server process request includes receiving requests from a plurality of client terminals at the virtual address connection, and wherein determining one of the plurality of server devices further includes determining each of the plurality of server devices that will perform one of the server functions requested by each of the plurality of client terminals. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein determining one of the plurality of server devices further includes: 
<claim-text>randomly determining the server device that will perform the server function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein determining one of the plurality of server devices further includes: 
<claim-text>determining the server device that will perform the server function according to a predetermined rotational order. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein determining one of the plurality of server devices further includes: 
<claim-text>determining the server device that will perform the server function based on a current processing load of each server device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, further including: 
<claim-text>preventing multiple server devices from simultaneously accessing the same storage location of the server storage device.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005080A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005080A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005080A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
