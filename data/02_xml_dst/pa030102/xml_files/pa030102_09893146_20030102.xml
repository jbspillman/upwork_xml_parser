<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001841A1-20030102-M00001.NB SYSTEM "US20030001841A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030001841A1-20030102-M00001.TIF SYSTEM "US20030001841A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-M00002.NB SYSTEM "US20030001841A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030001841A1-20030102-M00002.TIF SYSTEM "US20030001841A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00000.TIF SYSTEM "US20030001841A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00001.TIF SYSTEM "US20030001841A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00002.TIF SYSTEM "US20030001841A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00003.TIF SYSTEM "US20030001841A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00004.TIF SYSTEM "US20030001841A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00005.TIF SYSTEM "US20030001841A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00006.TIF SYSTEM "US20030001841A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001841A1-20030102-D00007.TIF SYSTEM "US20030001841A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001841</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893146</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010626</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06T017/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06T015/10</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06T015/20</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>424000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>345</class>
<subclass>427000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Volumetric warping for voxel coloring on an infinite domain</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Thomas</given-name>
<family-name>Malzbender</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Gregory</given-name>
<middle-name>Gilbran</middle-name>
<family-name>Slabaugh</family-name>
</name>
<residence>
<residence-us>
<city>Atlanta</city>
<state>GA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>William</given-name>
<middle-name>Bruce</middle-name>
<family-name>Culbertson</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>HEWLETT-PACKARD COMPANY</name-1>
<name-2>Intellectual Property Administration</name-2>
<address>
<address-1>P.O. Box 272400</address-1>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80528-9599</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of generating a three-dimensional model of a scene from a plurality of photographs of the scene. The method includes voxels in an interior region and an exterior region of the scene in question and then examines the voxels to determine if they are empty or part of the objects in the scene. The interior region is divided into a plurality of interior voxels, that are preferably of the same size. The exterior region surrounds the interior space and is divided into exterior voxels having different sizes. The size of the exterior voxels increases as a function of the distance between the voxel and the interior region. The voxels that are furthest from the interior region are preferably infinite in size. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to image processing, and more particularly, to a method for reconstructing 3-D scenes from a plurality of photographs taken from different viewpoints. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Consider a three-dimensional scene consisting of a number of objects in some localized region with a background consisting of features distant from the objects in question. Software that models the objects from a set of calibrated photographs of the scene are known to the art. The models are typically used to generate a view of the scene as the scene would appear to a camera placed at a new location. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A typical prior art system is taught in W. B. Culbertson, T. Malzbender, and G. Slabaugh, &ldquo;Generalized Voxel Coloring,&rdquo; Vision Algorithms Theory and Practice (ICCV 1999 Workshop), Springer-Verlag Lecture Notes in Computer Science Vol. 1883, pp. 100-115, which is hereby incorporated by reference. These systems typically reconstruct a scene by defining a &ldquo;reconstruction volume&rdquo; containing the objects. This volume is then divided into volume elements referred to as &ldquo;voxels&rdquo;, which are the three-dimensional analog of pixels in two-dimensional image processing. If a voxel can be seen in a number of photographs, it is tested to determine if the voxel has the same color in each of the photographs in question. If the voxel has a consistent color, it is assigned that color. If the voxel is inconsistent, the voxel is assumed to be clear, i.e., the voxel is not part of any of the objects. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The algorithms are poorly suited to reconstructing large-scale scenes because the size of the reconstruction volume becomes unmanageable. A large scene requires a large reconstruction volume. The number of voxels that must be tested determines the computational workload. Hence, doubling the linear dimensions of the reconstruction volume increases the computational workload by a factor of 8. In addition, many scenes are effectively infinite. Consider an outdoor scene having a number of objects in the foreground and a distant background that includes a cloudy sky. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Systems that attempt to render infinite scenes are known to the art. These systems utilize environment maps that model the foreground and background separately. Environment maps have several drawbacks. First, the foreground and background are modeled differently and separate mechanisms must be provided to create and render each. Second, these algorithms do not provide any mechanism for dealing with a model object that exists in the foreground but also extends to the background (e.g. the ground or surface of the ocean). Such an object will appear to have a gap or discontinuity if modeled both as a foreground object and as part of the environment map. Objects at medium distances are also awkward to handle with environment maps. Either the size of the reconstruction volume must be increased to include them or they must be treated as though they are at infinity. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Broadly, it is the object of the present invention to provide an improved method for reconstructing three-dimensional scenes from a plurality of calibrated views of those scenes. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> These and other objects of the present invention will become apparent to those skilled in the art from the following detailed description of the invention and the accompanying drawings. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention is a method of operating a data processing system to generate a three-dimensional model of a scene from a plurality of photographs of the scene. The method defines voxels in an interior region and an exterior region of the scene in question and then examines the voxels to determine if they are empty or part of the objects in the scene. The interior region is divided into a plurality of interior voxels that are preferably of the same size. The exterior region surrounds the interior space and is divided into exterior voxels having different sizes. The size of the exterior voxels increases as a function of the distance between the voxel and the interior region. The voxels that are furthest from the interior region are preferably infinite in size. The external voxels are preferably chosen such that the external voxels subtend approximately the same solid angle from locations at which the model is intended to be viewed. The exterior region can be generated by warping the voxels of a uniformly divided, finite, pre-warp exterior region using a warping function that does not move the outer boundary of the interior region, and warps the outer boundary of the pre-warped exterior region to infinity, while satisfying the criteria that no gaps form between voxels, and that no voxels overlap.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight> are top views of an object <highlight><bold>20</bold></highlight> that is viewed by a number of cameras shown at <highlight><bold>11</bold></highlight>-<highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a two-dimensional illustration of a voxel space according to the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an example of a two-dimensional voxel space that is chosen such that the voxels project to a pixel area in the photographs that is approximately constant independent of the voxel position </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates interior and exterior regions utilized with a frustum warp function to provide warped voxels in the exterior region. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the manner in which the warping function is used to move a (x,y) to a new location.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> To simplify the following discussion, the present invention will be explained in terms of two-dimensional drawings whenever possible. Also, the figures show a single object, whereas real scenes will typically consist of many objects. However, it will be apparent that the method discussed may be generalized to three-dimensions. The manner in which the present invention obtains its advantages may be more easily understood with reference to FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight>, which are top views of an object <highlight><bold>20</bold></highlight> that is viewed by a number of cameras shown at <highlight><bold>11</bold></highlight>-<highlight><bold>18</bold></highlight>. The space in which object <highlight><bold>20</bold></highlight> is located is divided into a plurality of voxels. The goal of the voxel coloring algorithm is to create a 3D model of the scene, using only the information contained in the camera images. It does this by assigning a color to all voxels on the surface of the object and marking those outside the object as being clear. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Refer now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Consider voxel <highlight><bold>21</bold></highlight>, which includes part of the surface of object <highlight><bold>20</bold></highlight>. This voxel can be seen by cameras <highlight><bold>16</bold></highlight>-<highlight><bold>18</bold></highlight>. The remaining cameras cannot see the voxel because the object blocks the view of that voxel. It is assumed that the position, orientation, and lens characteristics of each of the cameras is known. Hence, the position on the film or electronic imager of each of the cameras at which light leaving voxel <highlight><bold>21</bold></highlight> is recorded is known. The color of that light is ascertained from each of the photographs. Since the light leaving voxel <highlight><bold>21</bold></highlight> and arriving at each of the cameras is generated within the voxel by the surface of object <highlight><bold>20</bold></highlight>, each camera will record the same color light, and the views are defined to be consistent with the object having that color at that location. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Refer now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Consider voxel <highlight><bold>22</bold></highlight>, which lies outside of object <highlight><bold>20</bold></highlight>. This voxel can be seen by cameras <highlight><bold>14</bold></highlight>-<highlight><bold>17</bold></highlight>. Since no light originates in this voxel, each camera sees light that is generated from a point beyond the voxel. For example, camera <highlight><bold>14</bold></highlight> receives light that arrives from location <highlight><bold>31</bold></highlight>, camera <highlight><bold>15</bold></highlight> receives light from point <highlight><bold>34</bold></highlight> on object <highlight><bold>20</bold></highlight>, camera <highlight><bold>16</bold></highlight> receives light that arrives from location <highlight><bold>33</bold></highlight>, and camera <highlight><bold>17</bold></highlight> receives light that arrives from location <highlight><bold>32</bold></highlight>. Since each light source is at a different location, the colors recorded are expected to differ in at least one of the views, and hence, are inconsistent with a surface at that voxel. Accordingly, voxel <highlight><bold>22</bold></highlight> is marked as being empty. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Refer now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Consider voxel <highlight><bold>41</bold></highlight> that lies far from object <highlight><bold>20</bold></highlight>. To reconstruct the scene that includes an object having a surface in voxel <highlight><bold>41</bold></highlight>, one would have to extend the voxel grid to that location. As noted above, this would greatly increase the computational workload. Since the number of voxels increases as the third power of the linear dimensions of the scene being reconstructed, the computational workload rapidly becomes unmanageable. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In addition, the algorithm discussed above becomes difficult to apply when a voxel is too far from the cameras. The pictures taken by the cameras consist of discrete pixels that cannot be reduced in size below some lower limit. This is true for conventional film as well as digital cameras, since even conventional film has &ldquo;grain size&rdquo;. Consider the pixel that includes the light originating from voxel <highlight><bold>41</bold></highlight> and reaches camera <highlight><bold>16</bold></highlight>. If the solid angle subtended by the voxels at the camera is too small, this pixel will have light from voxel <highlight><bold>41</bold></highlight> and from the nearby voxels such as voxel <highlight><bold>42</bold></highlight>. Hence, the color recorded by that pixel represents the sum of the colors leaving a number of voxels. Accordingly, it is difficult, if not impossible, to ascertain the color from voxel <highlight><bold>41</bold></highlight> by examining this pixel. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention avoids these problems by utilizing a reconstruction grid that has an interior region of uniformly sized and spaced voxels, and an exterior region of voxels whose size increases the farther the voxels are from the interior. In the outer-most layer, voxels are infinite in size, and hence, the reconstruction space extends infinitely. The interior region is chosen to be the region that includes the objects to be modeled in greatest detail. In addition, it is assumed that the model constructed by the present invention will be viewed from near or within the interior region. The voxels are chosen such that all the voxels appear to be approximately the same size when viewed from such locations. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The voxels in the exterior region will be referred to as being &ldquo;warped&rdquo; in the following discussion. The warped voxels are chosen such that the voxels do not overlap and there is no space between the voxels. In addition, the exterior region is preferably at least semi-infinite, i.e., the exterior region extends to infinity in some, but possibly not all, directions. In addition, all of the voxels in the exterior region preferably subtend approximately the same solid angle when viewed from within the viewing region. This condition will be said to be satisfied if the variation in the solid angle among the warped voxels is less than a factor of <highlight><bold>10</bold></highlight>. That is, the ratio of the solid angle subtended by the smallest voxels to that subtended by the largest voxels is less than 10. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Once the voxels are defined, the conventional voxel coloring algorithms can be applied to reconstruct the three-dimensional scene as described above. The manner in which the conventional algorithms are applied will be discussed in more detail below. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Refer now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which is a two-dimensional illustration of a voxel space according to the present invention. The voxel space includes an interior region <highlight><bold>101</bold></highlight> that is divided into a grid of uniformly sized voxels. The voxels in this region are cross-hatched. The exterior region <highlight><bold>102</bold></highlight> is made up of warped voxels that increase in size as one moves outward from the center of the voxel space. Since only the voxels in the exterior region are warped, the present invention provides backward compatibility with reconstruction schemes based on uniform voxels, and allows reconstruction of objects in the foreground at a fixed voxel resolution. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As noted above, voxels in the exterior region are warped such that the voxel size increases as a monatomic function of the distance between the voxel and the interior region. The voxels <highlight><bold>103</bold></highlight> on the outer shell of the exterior space are warped such that the voxels extend to infinity and have an infinite volume. It should also be noted that the voxel space still has a regular three-dimensional topology even though the size of the voxels varies with the distance from the interior region. It should be noted that the voxel space defined in the present invention can easily be incorporated in algorithms that were originally designed for uniform voxel spaces. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In the preferred embodiment of the present invention, the voxel space is chosen such that the voxels project to a pixel area in the photographs that is approximately constant independent of the voxel position. Such a voxel space is shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, which is an example of a two-dimensional voxel space that satisfies this property from the point of view of cameras <highlight><bold>120</bold></highlight> and <highlight><bold>121</bold></highlight>. As can be seen from the drawing, voxels <highlight><bold>122</bold></highlight> and <highlight><bold>123</bold></highlight> each subtend the same solid angle at each camera. In general, this constraint can only be satisfied exactly if the number of cameras is less than or equal to the dimension of the space, i.e., if there are 3 cameras or less in a three-dimensional reconstruction. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Having provided an overview of the general principles involved in generating a warped voxel space for the exterior region, the preferred warping algorithm will now be explained in detail. The warped voxel space may be viewed as being generated by starting with a finite, uniform &ldquo;unwarped&rdquo; voxel space similar to that in the interior region and then moving each of the vertices that define the regular voxels to new &ldquo;warped&rdquo; locations given by a warping function. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> To simplify the following discussion, the algorithm and equations will be discussed in terms of a two-dimensional space. The manner in which the extension to three-dimensions is performed will then be discussed. This particular warping algorithm will be referred to as a &ldquo;frustum warp&rdquo; in the following discussion. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The frustum warp assumes that both the interior region <highlight><bold>201</bold></highlight> and the pre-warped exterior region <highlight><bold>210</bold></highlight> have rectangular shaped outer boundaries, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The outer boundaries of the interior and exterior regions are shown at <highlight><bold>202</bold></highlight> and <highlight><bold>203</bold></highlight>, respectively. The pre-warped exterior region is divided into four trapezoidal regions, bounded by lines <highlight><bold>205</bold></highlight>-<highlight><bold>208</bold></highlight> connecting the four comers of the interior region to their respective comers of the exterior pre-warped region, the boundary of the interior region <highlight><bold>202</bold></highlight>, and the boundary of the pre-warped exterior region <highlight><bold>203</bold></highlight>. Denote these trapezoidal regions as &plusmn;x, and &plusmn;y, based on the region&apos;s relative position to the center of the interior region. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> As noted above, the warped voxels are generated by moving the points of a non-warped voxel to new locations provided by a warping function. A typical non-warped voxel in the pre-warped region is shown at <highlight><bold>211</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The corresponding warped voxel <highlight><bold>212</bold></highlight> is obtained by transforming the four comer points of voxel <highlight><bold>211</bold></highlight> using a warping function. The frustum warp generates a series of shells of voxels, with each shell having larger voxels than the shells that it surrounds. The shells also have rectangular boundaries. If the shells are numbered from S<highlight><subscript>1 </subscript></highlight>to S<highlight><subscript>N </subscript></highlight>with S<highlight><subscript>1 </subscript></highlight>being adjacent to the non-warped region, then the inner boundary of shell S<highlight><subscript>i </subscript></highlight>is coincident with the outer boundary of shell S<highlight><subscript>i&minus;1</subscript></highlight>, for i&equals;2 to N. Similarly, the voxels in shell S<highlight><subscript>i </subscript></highlight>have larger volumes than the voxels in shell S<highlight><subscript>i&minus;1</subscript></highlight>. The volumes of the voxels in shell S<highlight><subscript>N </subscript></highlight>are infinite. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Let (x, y) be a pre-warped point in the exterior region, and let (x<highlight><subscript>w</subscript></highlight>, Y<highlight><subscript>w</subscript></highlight>) be the point after warping, e.g. a vertex of a warped voxel created by warping a vertex of a pre-warped voxel. To warp (x, y), a warping function based on the region in which the point is located is applied. This warping function is applied only to one coordinate of (x, y). A second warping function is applied to the warped first coordinate and the unwarped second coordinate to obtain the warped second coordinate. For example, suppose that the point is located in the &plus;x region, as depicted in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, which illustrates the warping of point (x,y). Points in the &plus;x and &minus;x regions are warped using the x-warping function.  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>x</mi>
            <mi>w</mi>
          </msub>
          <mo>=</mo>
          <mrow>
            <mi>x</mi>
            <mo>&it;</mo>
            <mfrac>
              <mrow>
                <msub>
                  <mi>x</mi>
                  <mi>e</mi>
                </msub>
                <mo>-</mo>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
              </mrow>
              <mrow>
                <msub>
                  <mi>x</mi>
                  <mi>e</mi>
                </msub>
                <mo>-</mo>
                <mrow>
                  <mo>&LeftBracketingBar;</mo>
                  <mi>x</mi>
                  <mo>&RightBracketingBar;</mo>
                </mrow>
              </mrow>
            </mfrac>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030001841A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="18.00225" file="US20030001841A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0030" lvl="7"><number>&lsqb;0030&rsqb;</number> where x<highlight><subscript>e </subscript></highlight>is the distance along the x-axis from the center of the interior region to the outer boundary of the exterior region, and x<highlight><subscript>i </subscript></highlight>is the distance along the x-axis from the center of the interior region to the outer boundary of the interior region, shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. An inspection of this warping equation reveals its behavior. For a point on the boundary of the interior region, x&equals;x<highlight><subscript>i</subscript></highlight>, and thus, x<highlight><subscript>w</subscript></highlight>&equals;x<highlight><subscript>i</subscript></highlight>, so the point does not move. However, points outside of the boundary are moved by an amount that depends on the point&apos;s proximity to the inner boundary of the exterior region. As a point approaches the boundary of the exterior region, x approaches x<highlight><subscript>e </subscript></highlight>and x<highlight><subscript>w </subscript></highlight>approaches infinity. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Continuing with the above example, once x<highlight><subscript>w </subscript></highlight>is computed, we find the other coordinate Y<highlight><subscript>w </subscript></highlight>by solving a line equation. </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>y</italic></highlight><highlight><subscript>w</subscript></highlight><highlight><italic>&equals;y&plus;m</italic></highlight>(<highlight><italic>x</italic></highlight><highlight><subscript>w</subscript></highlight><highlight><italic>&minus;x</italic></highlight>), &emsp;&emsp;(2) </in-line-formula></paragraph>
<paragraph id="P-0032" lvl="7"><number>&lsqb;0032&rsqb;</number> where m is the slope of the line connecting the point (x, y) with the point a, shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Point a is located at the intersection of the line parallel to the x-axis and running through the center of the interior region, with the nearest lines that connect the comers of the interior and exterior regions. It should be noted that, in general, point a is not the center of the interior region. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As shown above, the exterior region is divided into four trapezoidal regions for the two-dimensional case. In three dimensions, this generalizes to six frustum-shaped regions, &plusmn;x, &plusmn;y, &plusmn;z, and hence, the term frustum warp. In the three-dimensional case, there are three warping functions, namely the x-warping function as given above, and y- and z- warping functions.  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>y</mi>
          <mi>w</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mi>y</mi>
          <mo>&it;</mo>
          <mfrac>
            <mrow>
              <msub>
                <mi>y</mi>
                <mi>e</mi>
              </msub>
              <mo>-</mo>
              <msub>
                <mi>y</mi>
                <mi>i</mi>
              </msub>
            </mrow>
            <mrow>
              <msub>
                <mi>y</mi>
                <mi>e</mi>
              </msub>
              <mo>-</mo>
              <mrow>
                <mo>&LeftBracketingBar;</mo>
                <mi>y</mi>
                <mo>&RightBracketingBar;</mo>
              </mrow>
            </mrow>
          </mfrac>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>z</mi>
            <mi>w</mi>
          </msub>
          <mo>=</mo>
          <mrow>
            <mi>z</mi>
            <mo>&it;</mo>
            <mfrac>
              <mrow>
                <msub>
                  <mi>z</mi>
                  <mi>e</mi>
                </msub>
                <mo>-</mo>
                <msub>
                  <mi>z</mi>
                  <mi>i</mi>
                </msub>
              </mrow>
              <mrow>
                <msub>
                  <mi>z</mi>
                  <mi>e</mi>
                </msub>
                <mo>-</mo>
                <mrow>
                  <mo>&LeftBracketingBar;</mo>
                  <mi>z</mi>
                  <mo>&RightBracketingBar;</mo>
                </mrow>
              </mrow>
            </mfrac>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>4</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030001841A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="40.0869" file="US20030001841A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0034" lvl="7"><number>&lsqb;0034&rsqb;</number> In general, the procedure to warp a point in the pre-warped exterior region requires three steps. First, the frustum-shaped region where the point is located is determined. Second, the appropriate warping function is applied to one of the coordinates. If the point is in the &plusmn;x region, apply the x-warping function, if the point is in the &plusmn;y region, apply the y-warping function, and if the point is in the &plusmn;z region, apply the z-warping function. Third, the other two coordinates are found by solving line equations using the warped coordinate. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The three-dimensional scene that is reconstructed via the frustum warped exterior region is intended to be viewed from near or within the interior region. For such viewpoints, it can be shown that the voxels will project to approximately the same number of pixels in the resultant &ldquo;photograph&rdquo;. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> While the frustum warp function presented above is preferred, it will be appreciated by those skilled in the art that it is not the only possible warp function. Any warp that does not move the outer boundary of the interior region, and warps the outer boundary of the pre-warped exterior region to infinity, while satisfying the criteria that no gaps form between voxels, and that no voxels overlap, can be utilized. Furthermore, it is desirable to choose a warping function that approximates the constant footprint property for the camera placements during new view synthesis. For example, a warping function that warps radially with distance from the center of the reconstruction volume would satisfy these requirements. It will also be apparent that a warping function that does not move the outer boundary of the exterior region to infinity may also be utilized if the reconstructed scene does not include far-away objects. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The present invention may be practiced on any general-purpose data processing system. It should also be noted that reconstructing algorithms based on a voxel division of space according to the present invention lend themselves to parallel computation systems in which a number of general purpose computers work on the same scene reconstruction, each computer examining a different set of voxels to determine the color to be assigned thereto. It will also be apparent to those skilled in the art that the present invention may advantageously utilize special purpose computer hardware to accelerate the reconstruction computations. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In principle, any standard voxel &ldquo;coloring algorithm&rdquo; can be utilized with the voxel space defined by the present invention to determine the color to be assigned to each voxel. It should be noted that a clear voxel is merely one that is assigned a &ldquo;clear&rdquo; color. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Prior to this invention, voxel coloring and many other reconstruction techniques worked as follows. A number of photographs were collected of some foreground objects. While the goal is to create an accurate model of the scene, the user would at the outset have a very rough idea of the dimensions of the scene. The user would use this knowledge to choose a reconstruction volume, i.e. a set of voxels, that met the following two requirements. First, reconstruction volume would amply enclose the objects to be reconstructed. Second, it would not enclose any of the cameras and, in fact, multiple cameras would be able to view some points on the surface of the reconstruction volume without being obstructed by the reconstruction volume. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The two requirements on the reconstruction volume are required for the following reasons. The model of the objects is composed of a subset of the voxels in the reconstruction volume. Hence, the objects must lie inside the reconstruction volume, which is the first requirement. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Reconstruction algorithms, like voxel coloring, typically begin by assuming all the voxels are opaque. The algorithms refine the set of voxels to match the appearance of the objects by changing opaque voxels to clear and not vice versa. A voxel is changed from opaque to clear if two or more cameras that have an unobstructed view of the voxel (i.e. a view not blocked by opaque voxels) see something inconsistent at the voxel, for example inconsistent colors. Now, suppose initially no two cameras had an unobstructed view of any voxel on the surface of the reconstruction volume. Then, no voxels could be changed from opaque to clear and the voxels could not be modified (i.e. their color and transparency changed) to better approximate the objects. So, the reconstruction could not proceed. The second requirement exists to avoid this possibility. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The warped voxels that are the subject of this invention typically fill all of space. Hence, the second requirement cannot be met. Instead, we satisfy its objective another way. Even in the case of a semi-infinite space, it is often convenient to place cameras in places that voxels occupy. We achieve the objective of the second requirement by making voxels clear initially if they coincide with or are near cameras. A surface is thereby created that is the boundary between the initially clear and the initially opaque voxels. The set of initially clear voxels is chosen such that multiple cameras have an unobstructed view of some of the opaque voxels on this surface; this achieves the objective of the second requirement. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> However, the set of initially clear voxels are also chosen such that the remaining opaque voxels amply enclose the objects in the scene. Hence, some of the opaque voxels can be changed to clear in order to make the final set of opaque voxels better approximate the appearance of the objects. This achieves the objective of the first requirement. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> There is a second problem with an infinite voxel space. Due to errors in camera calibration, image noise, inaccurate color threshold etc., voxel coloring sometimes defines voxels as clear that should be assigned an opaque color value. Thus, it is possible that voxels on the outer shell of the voxel region will be deemed inconsistent and be defined as clear leading to black regions in the background of the reconstructed scene. To avoid such problems, the preferred embodiment of the present invention does not allow voxels in the outer shell to be defined as being clear, independent of the photo-consistency measure. These voxels are assigned a color value that is the average of the colors seen in the various views that have an unrestricted view of these voxels. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> While the present invention has been described in terms of &ldquo;photographs&rdquo; of the three-dimensional scene, it will be apparent that the present invention can be utilized with any two dimensional projection or mapping of the scene. Accordingly, the term photograph as used herein is deemed to include such analogous projections and mappings. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Generally, the purpose of generating a model of the scene is to use that model to generate a new two-dimensional &ldquo;photograph&rdquo; that represents the scene as that scene would be seen by a camera at a new location. In the preferred embodiment of the present invention, this camera is assumed to be located near or inside, the interior region and to look across the interior region toward part of the background that has been captured in the exterior region. It is advantageous to minimize the number of voxels in the total space, as the computational workload depends on the number of voxels. It is assumed that the voxels in the interior region have been chosen to provide an appropriate resolution for the objects located therein. If the voxels in the exterior region have a finer resolution (i.e., they subtend a smaller solid angle at the new camera location than the voxels of the interior region as viewed from the new camera), the new photograph will have more than sufficient resolution in the background; however, the computational workload may be excessive. If the voxels in the exterior region are much coarser than those in the interior region as viewed by the new camera, than the background may appear to have artifacts, i.e., the background may appear blocky. Hence, in the preferred embodiment of the present invention, the voxels in the exterior region are chosen such that the solid angle subtended by these voxels at the new camera position is approximately the same as those along the border of the interior and exterior regions. Since the portion of the scene in the exterior region is assumed to be less important, a somewhat greater coarseness can be tolerated here. Hence, in the preferred embodiment of the present invention, these exterior voxels are chosen such that they subtend a solid angle which is less than or equal to 10 times the maximum solid angle that is subtended by the voxels of the interior region. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Various modifications to the present invention will become apparent to those skilled in the art from the foregoing description and accompanying drawings. Accordingly, the present invention is to be limited solely by the scope of the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of operating a data processing system to generate a three-dimensional model of a scene from a plurality of photographs of said scene, said method comprising the steps of: 
<claim-text>defining an interior space containing part of said scene, said interior space being divided into a plurality of interior voxels; </claim-text>
<claim-text>defining an exterior space surrounding said interior space, said exterior space being divided into a plurality of exterior voxels, at least two of said exterior voxels having different sizes, wherein said exterior voxels are chosen such that said exterior voxels do not overlay one another and there is no space between said exterior voxels in said exterior space and </claim-text>
<claim-text>examining each voxel in said interior and exterior spaces to determine if said voxel can be seen in at least two of said photographs, and if said voxel can be seen, determining whether said voxel is empty. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein all of said interior voxels have the same size. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the size of said exterior voxels increases as a function of the distance between said exterior voxels and said interior space. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein one of said exterior voxels extends to infinity. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein a viewing location from which said scene is to be viewed is defined and wherein said exterior voxels are chosen such that said exterior voxels subtend a solid angle at said viewing location that is less than 10 times that subtended by said interior voxels at said viewing location. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said exterior voxels are organized into a plurality of ordered shells, S<highlight><subscript>i</subscript></highlight>, for i&equals;1 to N, each shell having an inner surface and an outer surface and having a plurality of exterior voxels therein, shell S<highlight><subscript>1 </subscript></highlight>, having said inner surface in contact with said interior region space, said inner surface of shell S<highlight><subscript>k </subscript></highlight>being in contact with said outer surface of shell S<highlight><subscript>k&minus;1 </subscript></highlight>for k&equals;2 to N, said exterior voxels in shell S<highlight><subscript>k </subscript></highlight>having larger volumes than said exterior voxels in shell S<highlight><subscript>k&minus;1</subscript></highlight>, for k&equals;2 to N. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said voxels in shell S<highlight><subscript>N </subscript></highlight>have an outer boundary that contains all of said three-dimensional scene. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said outer boundary of shell S<highlight><subscript>N </subscript></highlight>is at infinity.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001841A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001841A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001841A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001841A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001841A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001841A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001841A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001841A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
