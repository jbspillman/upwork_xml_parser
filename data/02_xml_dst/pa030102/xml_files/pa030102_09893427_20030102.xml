<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004918A1-20030102-D00000.TIF SYSTEM "US20030004918A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00001.TIF SYSTEM "US20030004918A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00002.TIF SYSTEM "US20030004918A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00003.TIF SYSTEM "US20030004918A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00004.TIF SYSTEM "US20030004918A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00005.TIF SYSTEM "US20030004918A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00006.TIF SYSTEM "US20030004918A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00007.TIF SYSTEM "US20030004918A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00008.TIF SYSTEM "US20030004918A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00009.TIF SYSTEM "US20030004918A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00010.TIF SYSTEM "US20030004918A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00011.TIF SYSTEM "US20030004918A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004918A1-20030102-D00012.TIF SYSTEM "US20030004918A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004918</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893427</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for file system cooperation in a multi-threaded environment</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Joon</given-name>
<family-name>Chang</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Amy</given-name>
<middle-name>Yi-Mei</middle-name>
<family-name>Shi</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Joseph T. Van Leeuwen</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 81641</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78708-1641</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A file system maintains information about files in data areas called dinodes. Dinodes are grouped into dinode pages wherein each dinode page includes information about one or more dinodes. Each dinode may use extended attribute data. Each dinode page having at least one dinode that uses extended attribute data has a corresponding dinodex page. The dinodex page includes extended attribute information about any of the dinodes in the dinode page that use extended attribute information. The page is divided into areas, each area corresponding to a different dinode. A lock is established for each dinode page so that any dinode adding or deleting its extended attribute address obtains the lock before proceeding to maintain cooperation between the dinodes. In this manner multiple extended attribute areas are prevented from corresponding with a particular dinode page and unused extended attribute pages are removed without unduly impacting system performance. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to managing extended file attributes. More particularly, the present invention relates to a system and method for locking file system pages when using file system extended attributes. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Operating systems, such as the UNIX operating system, use a file system for managing files. UNIX uses a hierarchical directory structure for organizing and maintaining files. Access permissions correspond to files and directories. The UNIX operating system organizes files into directories which are stored in a hierarchical tree-type configuration. At the top of the tree is the root directory which is represented by a slash (/&rcub; character. The root directory contains one or more directories. These directories, in turn, may contain further directories containing user files and other system files. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The fundamental structure that the UNIX operating system uses to store information is the file. A file is a sequence of bytes. UNIX keeps track of files internally by assigning each file a unique identification number. These numbers, called I-node numbers, are used only within the UNIX kernel itself. While UNIX uses i-node numbers to refer to files, it allows users to identify each file by a user-assigned name. A file name can be any sequence of characters and can be up to fourteen characters long. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> There are three types of files in the UNIX file system: (1) ordinary files, which may be executable programs, text, or other types of data used as input or produced as output from some operation; (2) directory files, which contain lists of files in directories outlined above; and (3) special files, which provide a standard method of accessing input/output devices. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Internally, a directory is a file that contains the names of ordinary files and other directories and the corresponding i-node numbers for the files. With the i-node number, UNIX can examine other internal tables to determine where the file is stored and make it accessible to the user. UNIX directories themselves have names, examples of which were provided above, and can be up to fourteen characters long. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> UNIX maintains a great deal of information about the files that it manages. For each file, the file system keeps track of the file&apos;s size, location, ownership, security, type, creation time, modification time, and access time. All of this information is maintained automatically by the file system as the files are created and used. UNIX file systems reside on mass storage devices such as disk drives and disk arrays. UNIX organizes a disk into a sequence of blocks. These blocks are usually either 512 or 2048 bytes long. The contents of a file are stored in one or more blocks which may be widely scattered on the disk. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> An ordinary file is addressed through the i-node structure. Each i-node is addressed by an index contained in an i-list. The i-list is generated based on the size of the file system, with larger file systems generally implying more files and, thus, larger i-lists. Each i-node contains thirteen 4-byte disk address elements. The direct i-node can contain up to ten block addresses. If the file is larger than this, then the eleventh address points to the first level indirect block. Addresses <highlight><bold>12</bold></highlight> and <highlight><bold>13</bold></highlight> are used for second level and third level indirect blocks, respectively, with the indirect addressing chain before the first data block growing by one level as each new address slot in the direct i-node is required. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In addition to the standard information maintained by the file system for a particular file, metadata, or extended attributes, about the file are often needed by an application that uses the file. Because extended attributes vary greatly, depending on the type of application and the type of metadata to be maintained, this information is typically stored outside the standard i-node attribute data area. For example, a word processing application may need to store information regarding the document, such as profile information entered by a user. While this information is not stored with the document file, it needs to be in a related storage area for efficient processing by the application. Traditionally, extended attributes are stored in specific fields that are allocated for the attributes. The fields may store the actual extended attribute data or may store a pointer to another storage area containing attribute data that will not fit in the allocated space. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> One challenge found in traditional systems is that a fixed allocated space for the extended data limits the amount of data that can be stored. When more extended data is needed, a pointer is stored in the allocated space which points to a separate data stream. Updating data stored in a separate data stream is inefficient because the separate extended attribute data stream is reconstructed in response to a change in the size of the attribute data. A further challenge exists in retrieving summary information regarding the extended attributes. Summary information is gathered by analyzing each substring within the extended attribute data stream causing further file processing inefficiencies. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> What is needed, therefore, is a way of efficiently adding, modifying, or deleting extended attribute data without needing to reconstruct complex data streams each time the extended attribute size is modified. Placing extended attribute data in extended attribute pages that correspond to dinode attribute pages, however, creates additional challenges. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Files with information stored in a particular dinode page need not have any relationship or similarities other than being maintained within a common dinode page by the file system. Because the dinode page corresponds to a particular extended attribute page it is possible for two dinodes in the same dinode page to each create a dinodex (extended attribute) page at virtually the same time. In addition, if two dinodes attempt to delete their extended attributes at virtually the same time it is possible that neither dinode will realize that the dinodex page is empty and should be released. Other permutations are also possible that create additional challenges when unrelated dinodes share a common dinode page and a common dinodex page. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> What is needed, therefore, is a concurrency control algorithm to ensure cooperation between dinodes in using common extended attribute pages in a multi-process, multi-threaded environment. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> It has been discovered that an additional field lock applied to the extended attribute address field maintained in a dinode page provides two level cooperation between dinodes. In a dinode data area, one field is used to store extended attribute summary information. This extended attribute summary information includes an address of a dinodex page that corresponds to the dinode. If the dinode does not have extended attribute data its extended attribute page address is zero. On the other hand, if the dinode has extended attribute data, its address is the address of the dinodex page. Each dinode within the same dinode page that uses extended attribute data will have the same dinodex page address because one dinodex page corresponds with the dinode page. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> A new page lock (called an &ldquo;EA Lock&rdquo;) is implemented for each dinode page. Insertion, deletion, or update of the extended attribute data requires the dinode to acquire the EA Lock before the operation is performed. The EA Lock does not effect other dinode page operations, such as reading and writing dinodes in the same dinode page for fields other than the EA address field. Limiting the operations that involve the EA Lock provides for a small lock granularity so that few activities are blocked by the lock and system throughput is adequately maintained. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high level diagram of a computer with a file system that includes extended attribute data; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of components included in providing extended attribute data; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram of an extended attribute page and details of data pertaining to one of the files; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a set of inline page bitmaps upon initialization and a format for an outline extended attribute page; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart showing the details involved in storing extended attribute data; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart showing the details involved in retrieving extended attribute data; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart showing the details involved in deleting extended attribute data; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart showing the details involved in modifying extended attribute data; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a diagram showing an EA Lock used to lock a dinode page that includes several dinodes and corresponds to a particular dinodex page; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a diagram showing how unrelated files are managed by various dinode pages and how each dinode page may correspond to an optional dinodex page depending upon the needs of the files stored in the particular dinode page; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing how the extended attribute lock is applied to a dinode page in order to provide cooperation when performing certain extended attribute data tasks; and </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram of an information handling system capable of performing the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a high level diagram of a computer with a file system that includes extended attribute data. Computer system <highlight><bold>100</bold></highlight> includes an operating system for controlling the operation of the system. Part of the operating system includes a file system for managing nonvolatile storage, such as a disk drive, accessible by computer system <highlight><bold>100</bold></highlight>. Nonvolatile storage device <highlight><bold>110</bold></highlight> is managed by the file system operating within computer system <highlight><bold>100</bold></highlight>. The file system manages various components, or objects, relating to files stored on nonvolatile storage device <highlight><bold>110</bold></highlight>. File objects <highlight><bold>120</bold></highlight> include data stored in files. For example, in a word processing application file objects <highlight><bold>120</bold></highlight> would store the data entered by the user, such as a report, article, or the like. File metadata <highlight><bold>130</bold></highlight> is maintained by the file system and includes system data regarding file objects <highlight><bold>120</bold></highlight>. System maintained data included in file metadata <highlight><bold>130</bold></highlight> includes such things as the date and time file objects were last used, when they were created, the size of the file objects, security information pertaining to the file objects, and name and location of the file objects within nonvolatile storage device <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Extended attribute data <highlight><bold>140</bold></highlight> includes metadata pertaining to file objects that is maintained by the file system on behalf of the user or application program. Extended attribute data <highlight><bold>140</bold></highlight> includes application or user specific information pertaining to file objects <highlight><bold>120</bold></highlight>. In the word processing example, extended attribute data <highlight><bold>120</bold></highlight> may include the title, author, manager, a read or write password, and other items that may pertain to a word processing file. Because of their application-specific nature, it is difficult to predict what fields and data will be included in extended attribute data for a particular file. For this reason, the extended attribute handler disclosed herein provides flexibility and efficiency when dealing with extended attributes. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a block diagram of components included in providing extended attribute data. Extended attribute data is stored in dinodex page <highlight><bold>200</bold></highlight>. Dinodex page <highlight><bold>200</bold></highlight> includes information relating to eight different files: dinodex 1 (<highlight><bold>202</bold></highlight>), dinodex 2 (<highlight><bold>204</bold></highlight>), dinodex 3 (<highlight><bold>206</bold></highlight>), dinodex 4 (<highlight><bold>208</bold></highlight>), dinodex 5 (<highlight><bold>210</bold></highlight>), dinodex 6 (<highlight><bold>212</bold></highlight>), dinodex 7 (<highlight><bold>214</bold></highlight>), and dinodex 8 (<highlight><bold>216</bold></highlight>). Each dinodex corresponds to a dinode from dinode page <highlight><bold>220</bold></highlight> and to 0 to 3 outline pages <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> System metadata is stored in dinode page <highlight><bold>220</bold></highlight>. Dinode page <highlight><bold>220</bold></highlight> includes information relating to eight files, each of the eight information areas corresponding with one of the dinodex data areas. File area <highlight><bold>240</bold></highlight> includes eight data files, each of which corresponds with a dinode and a dinodex data area. System data corresponding to file 1 (<highlight><bold>242</bold></highlight>) is stored in dinode 1 (<highlight><bold>222</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 1 (<highlight><bold>202</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 1 (<highlight><bold>202</bold></highlight>) (called the &ldquo;inline&rdquo; space), then additional outline pages (outline 1 (<highlight><bold>261</bold></highlight>), outline 2 (<highlight><bold>262</bold></highlight>), and outline 3 (<highlight><bold>263</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex <highlight><bold>1</bold></highlight> (<highlight><bold>202</bold></highlight>). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The following summarizes the remaining relationships between files, dinode data areas, dinodex data areas, and outline pages for the remaining seven files (files 2 through 8) shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>: </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> System data corresponding to file 2 (<highlight><bold>244</bold></highlight>) is stored in dinode 2 (<highlight><bold>224</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 2 (<highlight><bold>204</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 2 (<highlight><bold>204</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>264</bold></highlight>), outline 2 (<highlight><bold>265</bold></highlight>), and outline 3 (<highlight><bold>266</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 2 (<highlight><bold>204</bold></highlight>). </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> System data corresponding to file 3 (<highlight><bold>246</bold></highlight>) is stored in dinode 3 (<highlight><bold>226</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 3 (<highlight><bold>206</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 3 (<highlight><bold>206</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>267</bold></highlight>), outline 2 (<highlight><bold>268</bold></highlight>), and outline 3 (<highlight><bold>269</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 3 (<highlight><bold>206</bold></highlight>). </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> System data corresponding to file 4 (<highlight><bold>248</bold></highlight>) is stored in dinode 4 (<highlight><bold>228</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 4 (<highlight><bold>208</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 4 (<highlight><bold>208</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>270</bold></highlight>), outline 2 (<highlight><bold>271</bold></highlight>), and outline 3 (<highlight><bold>272</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 4 (<highlight><bold>208</bold></highlight>). </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> System data corresponding to file 5 (<highlight><bold>250</bold></highlight>) is stored in dinode 5 (<highlight><bold>230</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 5 (<highlight><bold>210</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 5 (<highlight><bold>210</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>273</bold></highlight>), outline 2 (<highlight><bold>274</bold></highlight>), and outline 3 (<highlight><bold>275</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 5 (<highlight><bold>210</bold></highlight>). </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> System data corresponding to file 6 (<highlight><bold>252</bold></highlight>) is stored in dinode 6 (<highlight><bold>232</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 6 (<highlight><bold>212</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 6 (<highlight><bold>212</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>276</bold></highlight>), outline 2 (<highlight><bold>277</bold></highlight>), and outline 3 (<highlight><bold>278</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 6 (<highlight><bold>212</bold></highlight>). </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> System data corresponding to file 7 (<highlight><bold>254</bold></highlight>) is stored in dinode 7 (<highlight><bold>234</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 7 (<highlight><bold>214</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 7 (<highlight><bold>214</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>279</bold></highlight>), outline 2 (<highlight><bold>280</bold></highlight>), and outline 3 (<highlight><bold>281</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 7 (<highlight><bold>214</bold></highlight>). </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Finally, system data corresponding to file 8 (<highlight><bold>256</bold></highlight>) is stored in dinode 8 (<highlight><bold>236</bold></highlight>), while the corresponding extended attribute data is stored in dinodex 8 (<highlight><bold>216</bold></highlight>). If the extended attributes do not fit in the space available in dinodex 8 (<highlight><bold>216</bold></highlight>), then additional outline pages (outline 1 (<highlight><bold>282</bold></highlight>), outline 2 (<highlight><bold>283</bold></highlight>), and outline 3 (<highlight><bold>284</bold></highlight>) are used to store extended attribute data in addition to the inline space available in dinodex 8 (<highlight><bold>216</bold></highlight>). </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a diagram of an extended attribute page and details of data pertaining to one of the files. Dinodex page <highlight><bold>300</bold></highlight> is shown with eight data areas (dinodex 1 (<highlight><bold>305</bold></highlight>), dinodex 2 (<highlight><bold>310</bold></highlight>), dinodex 3 (<highlight><bold>315</bold></highlight>), dinodex 4 (<highlight><bold>320</bold></highlight>), dinodex 5 (<highlight><bold>325</bold></highlight>), dinodex 6 (<highlight><bold>330</bold></highlight>), dinodex 7 (<highlight><bold>335</bold></highlight>), and dinodex 8 (<highlight><bold>340</bold></highlight>)) corresponding to eight files. Each of the dinodex data areas is eight lines long and 512 bits (64 bytes) wide. Dinodex 4 (<highlight><bold>320</bold></highlight>) is shown enlarged (enlarged dinodex <highlight><bold>321</bold></highlight>) to illustrate the data areas within a dinodex. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The first line of a dinodex data area is used to store various addresses and bitmaps used to manage the extended attribute space. The second line of a dinodex data area is used to store directory information pertaining to the stored extended attribute data. Extended attribute directory <highlight><bold>382</bold></highlight> includes information such as the extended attribute field name provided by the application storing the extended attribute data. In addition, the actual length of the data is stored along with an offset (in lines) within the extended attribute data so that the data can be retrieved by using the offset to determine the first line to retrieve and using the actual size to determine the number of 512 bit lines to retrieve. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Returning to the first line of a dinodex data area, as previously discussed, this line is used to store various addresses and bitmaps used to manage the extended attribute (dinodex) space. The first field, inline eapage bitmap <highlight><bold>345</bold></highlight>, is <highlight><bold>64</bold></highlight> bits wide one bit corresponding to each line in dinodex page <highlight><bold>300</bold></highlight>. Because there are eight lines in each dinodex area and each area is eight lines long, there are <highlight><bold>64</bold></highlight> bits used to represent the lines in the data area. When initializing inline eapage bitmap <highlight><bold>345</bold></highlight>, all bits for dinodex data areas other than dinodex 4 (<highlight><bold>320</bold></highlight>) are flagged as already used. In addition, the first two lines of dinodex 4 are already in use (the first line is used to store the bitmap and addressing information, the second line used to store extended attribute directory information), so these lines are flagged as being already used as well. The remaining six lines (inline extended attribute data line <highlight><bold>1</bold></highlight> (<highlight><bold>384</bold></highlight>), inline extended attribute data line 2 (<highlight><bold>386</bold></highlight>), inline extended attribute data line 3 (<highlight><bold>388</bold></highlight>), inline extended attribute data line 4 (<highlight><bold>390</bold></highlight>), inline extended attribute data line 5 (<highlight><bold>392</bold></highlight>), and inline extended attribute data line 6 (<highlight><bold>394</bold></highlight>)), are available for use by the file corresponding to dinodex 4 (<highlight><bold>320</bold></highlight>), so bits corresponding to these lines are cleared to indicate that these six lines are available to store extended attribute data. When extended attribute data is stored in these lines, the corresponding bits will be flagged to indicate that the lines are already in use. Thus, the inline data area is able to store 384 bytes of data (64 bytes per line&times;6 lines&equals;384 bytes). </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The second, third, and fourth fields (outline page 1 bitmap <highlight><bold>350</bold></highlight>, outline page 2 bitmap <highlight><bold>355</bold></highlight>, and outline page 3 bitmap <highlight><bold>360</bold></highlight>) are each used to store a bitmap for corresponding outline pages (outline page 1 <highlight><bold>371</bold></highlight>, outline page 2 <highlight><bold>372</bold></highlight>, and outline page 3 <highlight><bold>373</bold></highlight>). Each outline page contains 64 lines and each line can store 512 bits (64 bytes) of data. Therefore, each outline page is able to store 4,096 bytes (4K) of data. When a line in an outline page is used to store data, the corresponding bit in the corresponding bitmap is flagged to indicate that the line is being used. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The remaining four fields each contain a 64 bit address. The first field, dinodex page address <highlight><bold>365</bold></highlight>, is used to store the address for the dinodex page to which this dinodex data area belongs. The second, third, and fourth fields (outline page 1 address <highlight><bold>370</bold></highlight>, outline page 2 address <highlight><bold>375</bold></highlight>, and outline page 3 address <highlight><bold>380</bold></highlight>) are each used to store an address to the corresponding outline page (outline page 1 <highlight><bold>371</bold></highlight>, outline page 2 <highlight><bold>372</bold></highlight>, and outline page 3 <highlight><bold>373</bold></highlight>). </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The bitmaps stored in the dinodex data area are used to determine exactly where extended attribute space is available for a given file. If space is available within the dinodex data area it is stored in the dinodex data area (&ldquo;inline&rdquo;), otherwise an outline page is identified with available space and the page is retrieve using the corresponding outline page address. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a set of inline page bitmaps upon initialization and a format for an outline extended attribute page along with its initial page map. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Dinodex 1 inline page map (<highlight><bold>405</bold></highlight>) is shown with the first eight bits representing the dinodex 1 data area. This bitmap would be stored in the inline eapage bitmap included with the dinodex data area (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, inline eapage bitmap <highlight><bold>345</bold></highlight>). Of these eight bits, the first two are flagged (&ldquo;1&rdquo;) indicating that the lines are in use because the first two lines are used to store the dinodex bitmaps (line 1) and the extended attribute directory (line 2). The next six bits are shown as available (&ldquo;0&rdquo;) for storing extended attribute data. The remaining 56 bits are flagged indicating that the lines are in use because they are used by other dinodex data areas (areas 2 through 8). </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Similarly, the bitmaps for the other dinodex data areas (bitmaps <highlight><bold>410</bold></highlight>, <highlight><bold>415</bold></highlight>, <highlight><bold>420</bold></highlight>, <highlight><bold>425</bold></highlight>, <highlight><bold>430</bold></highlight>, <highlight><bold>435</bold></highlight>, and <highlight><bold>440</bold></highlight>) indicate which bits are available by their respective data areas. Notice how the available bits shift from one bitmap to the next, with available bits being the 3<highlight><superscript>rd </superscript></highlight>through 8<highlight><superscript>th </superscript></highlight>bits in bitmap <highlight><bold>405</bold></highlight>, the 11<highlight><superscript>th </superscript></highlight>through 16<highlight><superscript>th </superscript></highlight>in bitmap <highlight><bold>410</bold></highlight>, and so on until the available bits are the 59<highlight><superscript>th </superscript></highlight>through the 64<highlight><superscript>th </superscript></highlight>in bitmap <highlight><bold>440</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Outline page <highlight><bold>450</bold></highlight> shows an outline page and outline bitmap <highlight><bold>455</bold></highlight> shows the bitmap corresponding to outline page <highlight><bold>450</bold></highlight> upon creation, or initialization, of the corresponding dinodex data area. Outline page <highlight><bold>450</bold></highlight> includes 64 lines for storing extended attribute data with each line being able to store 512 bits (64 bytes). Upon initialization, outline bitmap <highlight><bold>455</bold></highlight> is shown with every line in outline page <highlight><bold>450</bold></highlight> being available (&ldquo;0&rdquo;). Whenever a line of outline page <highlight><bold>450</bold></highlight> is used to store extended attribute data, the corresponding bit in bitmap <highlight><bold>455</bold></highlight> is flagged (&ldquo;1&rdquo;) indicating that the line is already in use. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a flowchart showing the details involved in storing extended attribute data. Processing commences at <highlight><bold>500</bold></highlight> whereupon an extended attribute storage request is received (input <highlight><bold>505</bold></highlight>). The extended attribute storage request includes the extended attribute data that the application or user is requested be stored, along with a name associated with the extended attribute data (EA_type), and an actual length corresponding to the data. Alternatively, the actual length can be calculated by analyzing the received data. The number of 512 bit (64 byte) lines needed to store the data is calculated based on the actual length of the data (step <highlight><bold>510</bold></highlight>). Each EA_type begins on a new line, so if the data does not fill the last line needed, the extra bytes on the last line are unused. The bitmaps stored in the dinodex data area (inline bitmap, outline 1 bitmap, outline 2 bitmap, and outline 3 bitmap) are analyzed to determine if sufficient space exists to store the data (step <highlight><bold>515</bold></highlight>). A determination is made as to whether space exists to store the data (decision <highlight><bold>520</bold></highlight>). If there is not enough space to store the data, decision <highlight><bold>520</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>522</bold></highlight> whereupon an error is returned to the requesting process (return error <highlight><bold>523</bold></highlight>) indicating that there is insufficient extended attribute space to satisfy the request. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> On the other hand, if space is available, decision <highlight><bold>520</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>524</bold></highlight> whereupon an offset is determined by the number of the first available line that will be used to store the data. In one embodiment, the offset includes the page that is used to store the data (inline, outline 1, 2, or 3) is included along with the offset from the beginning of the chosen page. In another embodiment, the offset indicates the line position as if the inline dinodex page and the outline pages were in a contiguous area with the actual page determined by analyzing the offset number (the first 64 lines included in the dinodex page, the next 64 lines included in outline page 1, the next 64 lines included in outline page 2, and the last 64 lines included in outline page 3), so that an offset of &ldquo;66&rdquo; would indicate the second line in outline page 1. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The EA_type, actual length of the data, and offset are stored (output <highlight><bold>530</bold></highlight>) in the EA directory (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, extended attribute directory <highlight><bold>382</bold></highlight> for details about the EA directory). Analyzing inline bitmap (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, inline eapage bitmap <highlight><bold>345</bold></highlight> for details about this bitmap) determines whether space is available in the inline data area (decision <highlight><bold>535</bold></highlight>). If inline space is available, decision <highlight><bold>535</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>538</bold></highlight> whereupon the data is written to one or more lines (up to 6 lines total) in the inline data area (step <highlight><bold>540</bold></highlight>). The corresponding bits in the inline bitmap are also flagged as being used (step <highlight><bold>545</bold></highlight>) before processing returns at <highlight><bold>549</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> If inline space is not available, decision <highlight><bold>535</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>548</bold></highlight>. Analyzing outline 1 bitmap (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, outline 1 bitmap <highlight><bold>350</bold></highlight> for details about this bitmap) determines whether space is available in the outline page 1 (decision <highlight><bold>550</bold></highlight>). If outline page 1 space is available, decision <highlight><bold>550</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>552</bold></highlight> whereupon the data is written to one or more outline page <highlight><bold>1</bold></highlight> lines (output <highlight><bold>555</bold></highlight>). The corresponding bits in the outline 1 bitmap are flagged as being used (step <highlight><bold>560</bold></highlight>) before processing returns at <highlight><bold>569</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> If outline page 1 space is not available, decision <highlight><bold>550</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>572</bold></highlight>. Analyzing outline 2 bitmap (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, outline 1 bitmap <highlight><bold>355</bold></highlight> for details about this bitmap) determines whether space is available in the outline page 2 data area (decision <highlight><bold>575</bold></highlight>). If outline page 2 space is available, decision <highlight><bold>575</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>578</bold></highlight> whereupon the data is written to one or more outline page 2 lines (output <highlight><bold>580</bold></highlight>). The corresponding bits in the outline 2 bitmap are flagged as being used (step <highlight><bold>585</bold></highlight>) before processing returns at <highlight><bold>589</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Finally, if outline page 2 space is not available, decision <highlight><bold>575</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>588</bold></highlight> whereupon the data is written to one or more outline page 3 lines (output <highlight><bold>590</bold></highlight>) and the corresponding bits in the outline 3 bitmap are flagged as being used (step <highlight><bold>595</bold></highlight>) before processing returns at <highlight><bold>599</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows a flowchart showing the details involved in retrieving extended attribute data. Processing commences at <highlight><bold>600</bold></highlight> whereupon a retrieval request is received for an extended attribute type stored in the extended data (input <highlight><bold>610</bold></highlight>). The extended attribute type is used to find the offset and actual length from the extended attribute directory (input <highlight><bold>620</bold></highlight>). The number of 512 bit lines that need to be read is calculated based on the actual length field retrieved from the extended attribute directory (step <highlight><bold>630</bold></highlight>). A pointer is set at the offset position found in the extended attribute directory (step <highlight><bold>640</bold></highlight>). In one embodiment, the offset is divided by 64 with the integer quotient providing the page upon which the data is stored and the remainder providing the line number within the page where the data begins. The contents of the line are read and placed into a buffer (input/output <highlight><bold>650</bold></highlight>). A determination is made based on the calculated number of lines whether more lines need to be read (decision <highlight><bold>660</bold></highlight>). If more lines need to be read, decision <highlight><bold>660</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>665</bold></highlight> and the pointer is moved to the next line (step <highlight><bold>670</bold></highlight>) and processing loops back to read the next line and append its contents to the contents already in the buffer (input/output <highlight><bold>650</bold></highlight>). This looping continues until all lines corresponding to the extended attribute type have been read and placed into the buffer at which point decision <highlight><bold>660</bold></highlight> determines that no more lines need to be read and branches to &ldquo;no&rdquo; branch <highlight><bold>675</bold></highlight>. The data in the buffer was placed in the buffer in 512 bit chunks and this amount may be more than the actual amount of stored as extended attribute data. The buffer is therefore trimmed to remove any excess data at the end of the buffer (step <highlight><bold>680</bold></highlight>). The trimmed buffer is returned to the caller (step <highlight><bold>690</bold></highlight>) for processing by an application or other process using the extended attribute data. The retrieve extended attribute data processing ends at <highlight><bold>695</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a flowchart showing the details involved in deleting extended attribute data. Processing commences at <highlight><bold>700</bold></highlight> whereupon a delete request is received for an extended attribute type stored as extended data (input <highlight><bold>710</bold></highlight>). The extended attribute type is used to find the offset and actual length from the extended attribute directory (input <highlight><bold>720</bold></highlight>). The number of 512 bit lines that need to be marked as available (i.e., deleted) is calculated based on the actual length field retrieved from the extended attribute directory (step <highlight><bold>730</bold></highlight>). The bits in the bitmap corresponding to the extended attribute data are reset as available (&ldquo;0&rdquo;) so that the space may be used to store other extended attribute data (step <highlight><bold>740</bold></highlight>). Finally, the extended attribute type information is removed from the extended attribute directory to make room for other extended attribute type entries (output <highlight><bold>750</bold></highlight>). In one embodiment, the bits in the bitmaps are marked as available and no additional processing is performed to defragment the lines within the pages used to store the extended attribute data. In another embodiment, used lines within a page are moved to defragment the page to make room for larger extended attribute types (optional step <highlight><bold>760</bold></highlight>). Defragmenting the extended attribute pages could also be performed at a later time when demand for computer resources is lower. The delete extended attribute data processing ends at <highlight><bold>695</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows a flowchart showing the details involved in modifying extended attribute data. Processing commences at <highlight><bold>800</bold></highlight> whereupon a modification request is received for an extended attribute type stored in the extended data (input <highlight><bold>810</bold></highlight>). The modification request includes the name of the extended attribute type being modified and the modified extended attribute data corresponding to the type. The extended attribute type is used to find the offset and actual length from the extended attribute directory (input <highlight><bold>820</bold></highlight>). The number of 512 bit lines that currently exist for the extended attribute type is calculated based on the actual length field retrieved from the extended attribute directory (step <highlight><bold>830</bold></highlight>). A determination is made by comparing the number of lines currently being used to store the extended attribute type data with the number of lines needed to store the new data received at input <highlight><bold>810</bold></highlight> (decision <highlight><bold>840</bold></highlight>). If more lines are needed to store the data, decision <highlight><bold>840</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>842</bold></highlight>. A second decision is made whether the current page used to store the data (inline, outline 1, 2 or 3) has enough empty lines after the currently stored data to append the additional data (decision <highlight><bold>845</bold></highlight>). If enough empty lines follow the currently used lines, decision <highlight><bold>845</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>848</bold></highlight> whereupon additional lines within the page are used to store the data (step <highlight><bold>850</bold></highlight>) and additional bits in the bitmap are flagged to indicate the additional lines being used (step <highlight><bold>851</bold></highlight>). On the other hand, if there are not enough empty lines after the currently stored data to append the additional data, decision <highlight><bold>845</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>852</bold></highlight> whereupon the data is relocated to another place (step <highlight><bold>855</bold></highlight>) on either the current page or another page. Relocation involves deleting the currently allocated space (see <cross-reference target="DRAWINGS">FIG. 7</cross-reference>) and adding the data to a another place on either the current page or another page (see <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Returning to decision <highlight><bold>840</bold></highlight>, if more lines are not needed, decision <highlight><bold>840</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>858</bold></highlight>. Another decision is made to determine if fewer lines are needed (decision <highlight><bold>860</bold></highlight>). If fewer lines are needed, decision <highlight><bold>860</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>862</bold></highlight> whereupon the corresponding end bits are reset to show that the lines are available (step <highlight><bold>865</bold></highlight>). In one embodiment, the bits in the bitmaps are marked as available and no additional processing is performed to defragment the lines within the page used to store the extended attribute data. In another embodiment, used lines within a page are moved to defragment the page and make room for larger extended attribute types (optional step <highlight><bold>870</bold></highlight>). If fewer lines are not needed, decision <highlight><bold>860</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>875</bold></highlight>. If more lines are not needed (decision <highlight><bold>840</bold></highlight> branched to &ldquo;no&rdquo; branch <highlight><bold>858</bold></highlight>), the modified extended attribute data received at <highlight><bold>810</bold></highlight> is written to the allocated lines (output <highlight><bold>880</bold></highlight>). </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Finally, the actual length field in the extended attribute directory is modified to reflect the new size of the extended attribute data corresponding with the EA_type. Processing of the extended attribute data modification ends at <highlight><bold>895</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a diagram of an EA Lock used to lock a dinode page that includes several dinodes and corresponds to a particular dinodex page. A file system maintains information concerning files <highlight><bold>900</bold></highlight> in dinode page <highlight><bold>920</bold></highlight>. In one embodiment, each dinode page is arranged so that it can maintain information corresponding to up to eight files. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In the example shown, information about eight files is stored in dinode page <highlight><bold>920</bold></highlight>. Each of the files has an area within dinode page <highlight><bold>920</bold></highlight> for system information about the particular file, such as the file&apos;s size, location, name, and other common system attributes. In addition, each dinode area includes an extended attribute address which optionally references dinodex page <highlight><bold>960</bold></highlight> that is used to store additional data about the file (metadata) that is used by applications, users, system administrators, etc. in handling the file. For example, a word processing document file may have extended attribute data indicating the author of the file, the company that created the file, etc. The information in this example would be maintained by the word processing application and stored in dinodex page <highlight><bold>960</bold></highlight> in the data area corresponding to the particular file. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Each of files <highlight><bold>900</bold></highlight> (file <highlight><bold>902</bold></highlight>, file <highlight><bold>904</bold></highlight>, file <highlight><bold>906</bold></highlight>, file <highlight><bold>908</bold></highlight>, file <highlight><bold>910</bold></highlight>, file <highlight><bold>912</bold></highlight>, file <highlight><bold>914</bold></highlight>, and file <highlight><bold>916</bold></highlight>) correspond to a dinode stored within dinode page <highlight><bold>920</bold></highlight> (file <highlight><bold>902</bold></highlight> corresponds with dinode <highlight><bold>922</bold></highlight>, file <highlight><bold>904</bold></highlight> corresponds with dinode <highlight><bold>924</bold></highlight>, file <highlight><bold>906</bold></highlight> corresponds with dinode <highlight><bold>926</bold></highlight>, file <highlight><bold>908</bold></highlight> corresponds with dinode <highlight><bold>928</bold></highlight>, file <highlight><bold>910</bold></highlight> corresponds with dinode <highlight><bold>930</bold></highlight>, file <highlight><bold>912</bold></highlight> corresponds with dinode <highlight><bold>932</bold></highlight>, file <highlight><bold>914</bold></highlight> corresponds with dinode <highlight><bold>934</bold></highlight>, and file <highlight><bold>916</bold></highlight> corresponds with dinode <highlight><bold>936</bold></highlight>). Each of the dinode areas include an extended attribute address that optionally refers the dinode to dinodex page <highlight><bold>960</bold></highlight> (dinode <highlight><bold>922</bold></highlight> includes with EA Address <highlight><bold>923</bold></highlight>, dinode <highlight><bold>924</bold></highlight> includes with EA Address <highlight><bold>925</bold></highlight>, dinode <highlight><bold>926</bold></highlight> includes with EA Address <highlight><bold>927</bold></highlight>, dinode <highlight><bold>928</bold></highlight> includes with EA Address <highlight><bold>929</bold></highlight>, dinode <highlight><bold>930</bold></highlight> includes with EA Address <highlight><bold>931</bold></highlight>, dinode <highlight><bold>932</bold></highlight> includes with EA Address <highlight><bold>933</bold></highlight>, dinode <highlight><bold>934</bold></highlight> includes with EA Address <highlight><bold>935</bold></highlight>, and dinode <highlight><bold>936</bold></highlight> includes with EA Address <highlight><bold>937</bold></highlight>). If a dinode has extended attribute data then the included EA Address is the address of dinodex page <highlight><bold>960</bold></highlight>. On the other hand, if the dinode does not have extended attribute data then the included EA Address is zero (or some non-address value) to indicate that the dinode does not have extended attribute data. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Dinodex page <highlight><bold>960</bold></highlight> is configured so that each dinode is apportioned an amount of space for storing extended attribute data. An offset is used to determine which space within the dinodex page corresponds to a particular dinode. The first dinode in the dinode page (<highlight><bold>922</bold></highlight>) corresponds with the first extended attribute data area (<highlight><bold>962</bold></highlight>) in dinodex page <highlight><bold>960</bold></highlight>. The second dinode in the dinode page (<highlight><bold>924</bold></highlight>) corresponds with the second extended attribute data area (<highlight><bold>964</bold></highlight>) in dinodex page <highlight><bold>960</bold></highlight>, and so on (dinode <highlight><bold>926</bold></highlight> corresponds with extended attribute data area <highlight><bold>966</bold></highlight>, dinode <highlight><bold>928</bold></highlight> corresponds with extended attribute data area <highlight><bold>968</bold></highlight>, dinode <highlight><bold>930</bold></highlight> corresponds with extended attribute data area <highlight><bold>970</bold></highlight>, dinode <highlight><bold>932</bold></highlight> corresponds with extended attribute data area <highlight><bold>972</bold></highlight>, dinode <highlight><bold>934</bold></highlight> corresponds with extended attribute data area <highlight><bold>974</bold></highlight>, and dinode <highlight><bold>936</bold></highlight> corresponds with extended attribute data area <highlight><bold>976</bold></highlight>). If the EA Address is zero then the corresponding EA data area does not contain extended attribute data, whereas if the EA Address is not zero then the corresponding EA data area includes extended attribute data. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Extended Attribute Lock (EA Lock <highlight><bold>950</bold></highlight>) controls the modification (addition or deletion) of a dinode&apos;s EA Address. This control promotes cooperation between dinodes that are often unrelated other than their inclusion in a common dinode page. Before a dinode within dinode page <highlight><bold>920</bold></highlight> adds an EA Address (i.e., the address was zero but now the dinode wishes to use extended attribute data) it obtains EA Lock <highlight><bold>950</bold></highlight>. In addition, before a dinode within dinode page <highlight><bold>920</bold></highlight> deletes its EA data it also obtains EA Lock <highlight><bold>950</bold></highlight>. Controlling the modification of the EA Address promotes cooperation between the dinodes so that (1) two dinodes do not try to add a new dinodex page at the same time, (2) two dinodes do not try to delete the dinodex page at the same time, (3) one dinode does not try to delete the dinodex page at the same time another dinode is trying to allocate the dinodex page, as well as other concurrency situations. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows a diagram indicating how unrelated files are managed by various dinode pages and how each dinode page may correspond to an optional dinodex page depending upon the needs of the files stored in the particular dinode page. In the example shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, files <highlight><bold>1000</bold></highlight> include multiple files maintained by the file system. Some of these files may be similar to one another (i.e., multiple word processing files) and may be dissimilar (i.e., completely different types of files used by different applications). Regardless of their similarities or differences, files <highlight><bold>1000</bold></highlight> are maintained by the file system in dinode pages <highlight><bold>1010</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Dinode pages <highlight><bold>1010</bold></highlight> are used to maintain file system data about files <highlight><bold>1000</bold></highlight>. In the example shown, dinode page <highlight><bold>1020</bold></highlight> is used to maintain information about five files while dinode page <highlight><bold>1030</bold></highlight> maintains data about four files and dinode page <highlight><bold>1040</bold></highlight> maintains data about three files. Dinodex pages <highlight><bold>1050</bold></highlight> are used to store extended attribute data about one or more files within a dinode page. In the example shown, a dinodes page corresponds with dinode page <highlight><bold>1020</bold></highlight> and <highlight><bold>1040</bold></highlight> (dinodex page <highlight><bold>1060</bold></highlight> and <highlight><bold>1070</bold></highlight>, respectively) but no dinodex page corresponds to dinode page <highlight><bold>1030</bold></highlight>. No dinodex page corresponds to dinode page <highlight><bold>1030</bold></highlight> because none of the files maintained by dinode page <highlight><bold>1030</bold></highlight> has extended attribute data. Because files maintained by dinode pages are not necessarily related, an EA Lock is used for each dinode page (EA Lock <highlight><bold>1025</bold></highlight> corresponds to dinode page <highlight><bold>1020</bold></highlight>, EA Lock <highlight><bold>1035</bold></highlight> corresponds to dinode page <highlight><bold>1030</bold></highlight>, and EA Lock <highlight><bold>1045</bold></highlight> corresponds to dinode page <highlight><bold>1040</bold></highlight>). When any of the dinodes maintained by a dinode page request to remove or add extended attribute data they must first obtain the respective EA Lock (i.e., dinodes maintained in dinode page <highlight><bold>1020</bold></highlight> obtain EA Lock <highlight><bold>1025</bold></highlight>, dinodes maintained in dinode page <highlight><bold>1030</bold></highlight> obtain EA Lock <highlight><bold>1035</bold></highlight>, etc.). </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The EA Lock for each page is rather granular in that it only is used for changing the value of one field (the EA Address) included with each dinode maintained by the page. In addition, a limited number of dinodes is maintained by a particular dinode page. In one embodiment, the maximum number of dinodes maintained by a dinode page is eight. The granularity coupled with the limited number of dinodes that may request a particular EA lock allows cooperation without unduly impacting performance. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a flowchart of implementing the extended attribute lock and applying it to a dinode page in order to provide cooperation when performing certain extended attribute data tasks. File system processing handles a variety of tasks for maintaining dinode information. Processing of file system processing that handles extended attribute actions commences at <highlight><bold>1100</bold></highlight>. A determination is made as to whether the extended attribute action is to add new extended attribute data for a dinode that currently does not use extended attribute data (decision <highlight><bold>1104</bold></highlight>). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> If the extended attribute action is to add a new extended attribute address to a dinode, decision <highlight><bold>1104</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1106</bold></highlight> whereupon the EA Lock for the dinode page that maintains the dinode is requested (step <highlight><bold>1108</bold></highlight>). A determination is made as to whether the EA Lock is acquired or if the lock is currently being held by another process or thread (decision <highlight><bold>1112</bold></highlight>). If the lock is currently being held by another process or thread, decision <highlight><bold>1112</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1114</bold></highlight> whereupon the process is added to a queue corresponding to the lock and waits for the lock to become available (step <highlight><bold>1116</bold></highlight>). On the other hand, if the lock is acquired immediately (i.e., no other process was holding the lock), &ldquo;yes&rdquo; branch <highlight><bold>1118</bold></highlight> is taken bypassing the wait for lock step. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> When the process has acquired the lock, it checks EA Addresses included with other dinodes in the same dinode page as the dinode that is adding an EA Address (step <highlight><bold>1120</bold></highlight>). A determination is made as to whether an EA page already exists corresponding to the dinode page (decision <highlight><bold>1124</bold></highlight>). If an EA page does not yet exist, decision <highlight><bold>1124</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1126</bold></highlight> whereupon a new EA page is allocated and formatted to maintain EA data for any dinode within the dinode page that uses EA data (step <highlight><bold>1128</bold></highlight>). The EA address field of the dinode is changed from zero to the address of the newly allocated EA page (step <highlight><bold>1132</bold></highlight>). </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> On the other hand, if checking the other dinodes revealed that an EA page already existed for the dinode page, decision <highlight><bold>1124</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1134</bold></highlight> whereupon the extended attribute field of the dinode is changed from zero to the address of the EA page that already exists and corresponds to the dinode page (step <highlight><bold>1136</bold></highlight>). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The EA Address is stored in the dinode (step <highlight><bold>1140</bold></highlight>) and extended attribute data that corresponds to the dinode is stored in the extended data area corresponding to the dinode (step <highlight><bold>1144</bold></highlight>). The EA Lock is released (step <highlight><bold>1148</bold></highlight>) so that other dinodes can use the lock and processing of the added EA Address ends at <highlight><bold>1196</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Returning to decision <highlight><bold>1104</bold></highlight>, if the extended attribute action is not to add a new extended attribute to the dinode, decision <highlight><bold>1104</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1150</bold></highlight>. A determination is made as to whether the extended attribute action is to delete the extended attribute data (i.e., reset the dinode&apos;s EA address to zero) corresponding to the dinode (decision <highlight><bold>1152</bold></highlight>). If the action is not to delete the extended attribute data corresponding to the dinode, decision <highlight><bold>1152</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1154</bold></highlight> whereupon other extended attribute actions are handled (step <highlight><bold>1156</bold></highlight>) and processing ends at <highlight><bold>1160</bold></highlight>. On the other hand, if the action is to delete the extended attribute data corresponding to the dinode, decision <highlight><bold>1152</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1162</bold></highlight> whereupon the EA Lock for the dinode page that maintains the dinode is requested (step <highlight><bold>1164</bold></highlight>). A determination is made as to whether the EA Lock is acquired or if the lock is currently being held by another process or thread (decision <highlight><bold>1168</bold></highlight>). If the lock is currently being held by another process or thread, decision <highlight><bold>1168</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1170</bold></highlight> whereupon the process is added to a queue corresponding to the lock and waits for the lock to become available (step <highlight><bold>1172</bold></highlight>). On the other hand, if the lock is acquired immediately (i.e., no other process was holding the lock), &ldquo;yes&rdquo; branch <highlight><bold>1174</bold></highlight> is taken bypassing the wait for lock step. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The EA address included with the dinode is set to zero indicating that the dinode is no longer using the extended attribute data area (step <highlight><bold>1176</bold></highlight>). All dinodes being maintained by this dinode page are checked to see if any of the dinodes are using extended attribute data (step <highlight><bold>1180</bold></highlight>). This check can be performed by checking the EA Address corresponding to each dinode and determining whether the address is zero (indicating that EA data not used) or nonzero (indicating that EA data is being used). A determination is made (decision <highlight><bold>1184</bold></highlight>) as to whether at least one dinode&apos;s EA address is not zero (i.e., the EA page is being used by at least one other dinode). If the EA page is not being used, decision <highlight><bold>1184</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1186</bold></highlight> whereupon the EA page is deleted (released) making the storage available to other file system objects (step <highlight><bold>1188</bold></highlight>). On the other hand, if at least one dinode is using the EA page, decision <highlight><bold>1184</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1190</bold></highlight> bypassing the deletion of the EA page. The EA Lock is released (step <highlight><bold>1192</bold></highlight>) so that other dinodes can use the lock and processing of the added EA Address ends at <highlight><bold>1196</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates information handling system <highlight><bold>1201</bold></highlight> which is a simplified example of a computer system capable of performing the copy processing described herein. Computer system <highlight><bold>1201</bold></highlight> includes processor <highlight><bold>1200</bold></highlight> which is coupled to host bus <highlight><bold>1205</bold></highlight>. A level two (L<highlight><bold>2</bold></highlight>) cache memory <highlight><bold>1210</bold></highlight> is also coupled to the host bus <highlight><bold>1205</bold></highlight>. Host-to-PCI bridge <highlight><bold>1215</bold></highlight> is coupled to main memory <highlight><bold>1220</bold></highlight>, includes cache memory and main memory control functions, and provides bus control to handle transfers among PCI bus <highlight><bold>1225</bold></highlight>, processor <highlight><bold>1200</bold></highlight>, L<highlight><bold>2</bold></highlight> cache <highlight><bold>1210</bold></highlight>, main memory <highlight><bold>1220</bold></highlight>, and host bus <highlight><bold>1205</bold></highlight>. PCI bus <highlight><bold>1225</bold></highlight> provides an interface for a variety of devices including, for example, LAN card <highlight><bold>1230</bold></highlight>. PCI-to-ISA bridge <highlight><bold>1235</bold></highlight> provides bus control to handle transfers between PCI bus <highlight><bold>1225</bold></highlight> and ISA bus <highlight><bold>1240</bold></highlight>, universal serial bus (USB) functionality <highlight><bold>1245</bold></highlight>, IDE device functionality <highlight><bold>1250</bold></highlight>, power management functionality <highlight><bold>1255</bold></highlight>, and can include other functional elements not shown, such as a real-time clock (RTC), DMA control, interrupt support, and system management bus support. Peripheral devices and input/output (I/O) devices can be attached to various interfaces <highlight><bold>1260</bold></highlight> (e.g., parallel interface <highlight><bold>1262</bold></highlight>, serial interface <highlight><bold>1264</bold></highlight>, infrared (IR) interface <highlight><bold>1266</bold></highlight>, keyboard interface <highlight><bold>1268</bold></highlight>, mouse interface <highlight><bold>1270</bold></highlight>, and fixed disk (FDD) <highlight><bold>1272</bold></highlight>) coupled to ISA bus <highlight><bold>1240</bold></highlight>. Alternatively, many I/O devices can be accommodated by a super I/O controller (not shown) attached to ISA bus <highlight><bold>1240</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> BIOS <highlight><bold>1280</bold></highlight> is coupled to ISA bus <highlight><bold>1240</bold></highlight>, and incorporates the necessary processor executable code for a variety of low-level system functions and system boot functions. BIOS <highlight><bold>1280</bold></highlight> can be stored in any computer readable medium, including magnetic storage media, optical storage media, flash memory, random access memory, read only memory, and communications media conveying signals encoding the instructions (e.g., signals from a network). In order to attach computer system <highlight><bold>1201</bold></highlight> another computer system to copy files over a network, LAN card <highlight><bold>1230</bold></highlight> is coupled to PCI-to-ISA bridge <highlight><bold>1235</bold></highlight>. Similarly, to connect computer system <highlight><bold>1201</bold></highlight> to an ISP to connect to the Internet using a telephone line connection, modem <highlight><bold>1275</bold></highlight> is connected to serial port <highlight><bold>1264</bold></highlight> and PCI-to-ISA Bridge <highlight><bold>1235</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> While the computer system described in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is capable of executing the copying processes described herein, this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the copying process described herein. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> One of the preferred implementations of the invention is a client application, namely, a set of instructions (program code) in a code module which may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that is a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases &ldquo;at least one&rdquo; and &ldquo;one or more&rdquo; to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles &ldquo;a&rdquo; or &ldquo;an&rdquo; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &ldquo;one or more&rdquo; or &ldquo;at least one&rdquo; and indefinite articles such as &ldquo;a&rdquo; or &ldquo;an&rdquo;; the same holds true for the use in the claims of definite articles. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for controlling extended attribute data changes, said method comprising: 
<claim-text>determining an action involving an extended attribute address included in a file system area; </claim-text>
<claim-text>obtaining an extended attribute lock in response to the determination; </claim-text>
<claim-text>performing the action; and </claim-text>
<claim-text>releasing the extended attribute lock. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>providing one or more dinode pages for maintaining file system data, wherein each dinode page includes one or more dinodes; and </claim-text>
<claim-text>identifying one or more extended attribute locks corresponding to the dinode pages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the method further comprising: 
<claim-text>allocating a new extended attribute page in response to determining that the dinode page does not correspond to an existing extended attribute page; and </claim-text>
<claim-text>adding an extended attribute address to the extended attribute address field. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> further comprising: 
<claim-text>formatting the allocated new extended attribute page into one or more data sections, wherein each of the data sections is adapted to store data corresponding to one of the dinodes maintained by the dinode page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the method further comprising: 
<claim-text>copying an existing extended attribute page address corresponding to an existing extended attribute page to the extended attribute field in response to determining that the dinode page corresponds to the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the method further comprising: 
<claim-text>setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>deleting an existing extended attribute page in response to determining that none of the dinodes use the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the method further comprising: 
<claim-text>setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>retaining an existing extended attribute page in response to determining that at least one of the dinodes maintained by the dinode page uses the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. An information handling system comprising: 
<claim-text>one or more processors; </claim-text>
<claim-text>a memory accessible by the processors; </claim-text>
<claim-text>one or more nonvolatile storage devices accessible by the processors; and </claim-text>
<claim-text>an extended attribute management tool for controlling extended attribute data changes, the extended attribute management tool including: 
<claim-text>means for determining an action involving an extended attribute address included in a file system area; </claim-text>
<claim-text>means for obtaining an extended attribute lock in response to the determination; </claim-text>
<claim-text>means for performing the action; and </claim-text>
<claim-text>means for releasing the extended attribute lock. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising: 
<claim-text>means for providing one or more dinode pages for maintaining file system data, wherein each dinode page includes one or more dinodes; and </claim-text>
<claim-text>means for identifying one or more extended attribute locks corresponding to the dinode pages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the information handling system further comprising: 
<claim-text>means for allocating a new extended attribute page in response to determining that the dinode page does not correspond to an existing extended attribute page; and </claim-text>
<claim-text>means for adding an extended attribute address to the extended attribute address field. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the information handling system further comprising: 
<claim-text>means for copying an existing extended attribute page address corresponding to an existing extended attribute page to the extended attribute field in response to determining that the dinode page corresponds to the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the information handling system further comprising: 
<claim-text>means for setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>means for deleting an existing extended attribute page in response to determining that none of the dinodes use the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the information handling system further comprising: 
<claim-text>means for setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>means for retaining an existing extended attribute page in response to determining that at least one of the dinodes maintained by the dinode page uses the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer program product stored in a computer operable medium for controlling extended attribute data changes, the computer program product further comprising: 
<claim-text>means for determining an action involving an extended attribute address included in a file system area; </claim-text>
<claim-text>means for obtaining an extended attribute lock in response to the determination; </claim-text>
<claim-text>means for performing the action; and </claim-text>
<claim-text>means for releasing the extended attribute lock. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for providing one or more dinode pages for maintaining file system data, wherein each dinode page includes one or more dinodes; and </claim-text>
<claim-text>means for identifying one or more extended attribute locks corresponding to the dinode pages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the computer program product further comprising: 
<claim-text>means for allocating a new extended attribute page in response to determining that the dinode page does not correspond to an existing extended attribute page; and </claim-text>
<claim-text>means for adding an extended attribute address to the extended attribute address field. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising: 
<claim-text>means for formatting the allocated new extended attribute page into one or more data sections, wherein each of the data sections is adapted to store data corresponding to one of the dinodes maintained by the dinode page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the computer program product further comprising: 
<claim-text>means for copying an existing extended attribute page address corresponding to an existing extended attribute page to the extended attribute field in response to determining that the dinode page corresponds to the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the computer program product further comprising: 
<claim-text>means for setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>means for deleting an existing extended attribute page in response to determining that none of the dinodes use the existing extended attribute page. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein each of the dinodes includes an extended attribute address field, the computer program product further comprising: 
<claim-text>means for setting the extended attribute address field to a non-address value; and </claim-text>
<claim-text>means for retaining an existing extended attribute page in response to determining that at least one of the dinodes maintained by the dinode page uses the existing extended attribute page.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004918A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004918A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004918A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004918A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004918A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004918A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004918A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004918A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004918A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004918A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004918A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004918A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004918A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
