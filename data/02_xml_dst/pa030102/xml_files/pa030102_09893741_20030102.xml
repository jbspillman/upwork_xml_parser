<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002634A1-20030102-D00000.TIF SYSTEM "US20030002634A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00001.TIF SYSTEM "US20030002634A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00002.TIF SYSTEM "US20030002634A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00003.TIF SYSTEM "US20030002634A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00004.TIF SYSTEM "US20030002634A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00005.TIF SYSTEM "US20030002634A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00006.TIF SYSTEM "US20030002634A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00007.TIF SYSTEM "US20030002634A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00008.TIF SYSTEM "US20030002634A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00009.TIF SYSTEM "US20030002634A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002634A1-20030102-D00010.TIF SYSTEM "US20030002634A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002634</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893741</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04M011/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>379</class>
<subclass>088130</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Event notification in a unified message system using an event notification server</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Virad</given-name>
<family-name>Gupta</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Shital</given-name>
<family-name>Mehta</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>STERNE, KESSLER, GOLDSTEIN &amp; FOX PLLC</name-1>
<name-2></name-2>
<address>
<address-1>1100 NEW YORK AVENUE, N.W., SUITE 600</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20005-3934</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system, method, and computer program product for monitoring event requests in a unified messaging system and generating event notifications upon the occurrence of specified events. The event notification system comprises an email server for storing a plurality of email messages. The event notification system further comprises at least one client from which at least one event request is initiated. A message handler is also provided. The message handler monitors the event requests, forwards the event requests to the email server, and forwards an event response based on the events requested to the client that initiated the request. An event listener that passively and actively monitors event requests occurring within the event notification system and generates an event notification when the event requests correspond to a subscriber event registration is also present. The event listener comprises a registration manager that receives and stores one or more event notification requests from the event notification requesters and a notification generator for generating the event notifications. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to the field of unified messaging systems and more particularly to the generation of event notifications within these systems. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Most companies utilize several channels of communications. Examples of traditional channels include voice-mail, email, and facsimile. These communications channels give associates, customers, or other message senders relatively easy access to the message receiver. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> During a typical business day, a person can receive dozens of calls, faxes, voice-mail messages, and email messages. Considering that these communications arrive in different forms and in different locations via different machines, managing it all can be quite challenging. Unified messaging systems have been developed to meet this challenge. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Unified messaging systems typically combine proprietary email servers (back-end) with proprietary unified message applications (front-end). The advantage of using &ldquo;off the shelf&rdquo; email servers on the back-end is that these systems are industry proven and allow for shorter development cycles for front-end applications. While such systems do allow the user to operate both the voice mail system and the email system from a single location, there are some drawbacks with respect to event notifications. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> There are industry standards for message retrieval protocols which these email servers support (such as POP, IMAP, etc.), however, there is no standard way to notify an external entity about events such as &ldquo;user log-on/log-off&rdquo;, &ldquo;message read&rdquo;, &ldquo;message deleted&rdquo;, etc. Knowledge of these events is required by any unified messaging application to support message waiting indication/notification and also to maintain synchronization between the information stored on the email server and that stored with the application itself. There are some email servers that provide proprietary methods to access the above mentioned events. One example being call-back APIs provided by IPlanet 5.0 Mail server, available from IPlanet E-commerce Solutions, a Sun-Netscape alliance. However, the problem in using these proprietary methods is that it ties the unified messaging solution provider to a particular email server. If the solution provider wants to use any other email server, new interfaces will have to be developed to get these event notifications from other email servers (provided they do have some methods of doing event notification). Therefore, what is needed is an event notification mechanism which is independent of the email server. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention provides a system, method, and computer program product for monitoring event requests in a unified messaging system and for generating event notifications upon the occurrence of specified events. In one embodiment, the event notification system includes an email server that stores a number of messages. In one example, the email server stores a number of email messages. The event notification system further includes at least one client from which at least one event request is initiated. A message handler is also provided. The message handler monitors the event requests, forwards the event requests to the email server, and forwards an event response to the client that initiated the request. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention further includes an event listener. The event listener passively and actively monitors event requests occurring within the event notification system. The event listener is further used to generate an event notification when the event requested corresponds to a subscriber event registration. The event listener comprises a registration manager that receives and stores one or more event notification requests from the event notification requesters and a notification generator for generating the event notifications. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Further embodiments, features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention are described in detail below with reference to the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE FIGURES </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The present invention is described with reference to the accompanying drawings. In the drawings, like reference numbers generally indicate identical, functionally similar, and/or structurally similar elements. The drawing in which an element first appears is indicated by the left-most digit or digits in the corresponding reference number. The accompanying figures, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the relevant art to make and use the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> illustrates an example event notification system embodiment of the present invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> illustrates an example application of an event notification system embodiment of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1C</cross-reference> illustrates a second example application of an event notification system embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an event notification server embodiment of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an example of a computer system embodiment of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart diagram of a routine for passively monitoring event requests and generating event notifications in response to the event request according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flowchart diagram of a routine for actively monitoring event requests and generating event notifications in response to the event request according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> illustrates an example implementation of the flowchart diagram depicted in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a flowchart diagram of a second routine for actively monitoring event requests and generating event notifications in response to the event requests according to an alternative embodiment of the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> illustrates an example implementation of the flowchart diagram depicted in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
</section>
<section>
<heading lvl="1">Table of Contents </heading>
<paragraph id="P-0022" lvl="1"><number>&lsqb;0022&rsqb;</number> I. Overview </paragraph>
<paragraph id="P-0023" lvl="1"><number>&lsqb;0023&rsqb;</number> II. System Architecture </paragraph>
<paragraph id="P-0024" lvl="2"><number>&lsqb;0024&rsqb;</number> A. Event Notification System </paragraph>
<paragraph id="P-0025" lvl="2"><number>&lsqb;0025&rsqb;</number> B. Synchronization Module </paragraph>
<paragraph id="P-0026" lvl="2"><number>&lsqb;0026&rsqb;</number> C. Message Notification Module </paragraph>
<paragraph id="P-0027" lvl="1"><number>&lsqb;0027&rsqb;</number> III. Event Notification Process </paragraph>
<paragraph id="P-0028" lvl="2"><number>&lsqb;0028&rsqb;</number> A. Passive Monitoring </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> B. Active Monitoring </paragraph>
<paragraph id="P-0030" lvl="1"><number>&lsqb;0030&rsqb;</number> IV. Example Computer System </paragraph>
<paragraph id="P-0031" lvl="1"><number>&lsqb;0031&rsqb;</number> V. Conclusion </paragraph>
<paragraph id="P-0032" lvl="7"><number>&lsqb;0032&rsqb;</number> I. Overview </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The present invention relates to a system, method, and computer program product for providing event notifications in a unified messaging system. The present invention allows for event notifications to be generated irrespective of the type of email server being accessed. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The present invention is described in terms of examples contained herein. This is for convenience only and is not intended to limit the application of the present invention. In fact, after reading the following description, it will be apparent to one skilled in the relevant art(s) how to implement the following invention in alternative embodiments. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The term &ldquo;message&rdquo; refers to any type of message including, but not limited to, electronic messages (email), voice messages (voice mail), and facsimiles (faxes). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The term &ldquo;client&rdquo; refers to any network device that can handle messages. A client can include a telephone client or email client. A client can be implemented on a telephone, computer, personal data assistant (PDA), palm device, set-top box, televison, processor or other type of network device. </paragraph>
<paragraph id="P-0037" lvl="7"><number>&lsqb;0037&rsqb;</number> II. System Architecture </paragraph>
<paragraph id="P-0038" lvl="7"><number>&lsqb;0038&rsqb;</number> A. Event Notification System </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a block diagram depicting event notification system <highlight><bold>100</bold></highlight>, a typical operational environment in which the various features of the present invention can be implemented. It is an advantage of the invention that it may be implemented in many different ways in many environments and on many different computers or computer systems. An embodiment of the present invention is represented by event notification server <highlight><bold>112</bold></highlight>. Event notification server <highlight><bold>112</bold></highlight> is used to monitor the occurrence of events within event notification system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In one embodiment, event notification server <highlight><bold>112</bold></highlight> passively monitors events. Passive monitoring is useful for events that can be identified, i.e., trapped, by simply monitoring a user session. Examples of such events include a user log-on or log-off. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In yet another embodiment, event notification server <highlight><bold>112</bold></highlight> actively monitors events. In active monitoring, event notification server <highlight><bold>112</bold></highlight> issues independent requests to gather additional information about a user session. In an embodiment, these requests are made to email servers. Event notification server <highlight><bold>112</bold></highlight> intercepts event requests initiated from the network devices depicted in <cross-reference target="DRAWINGS">FIG. 1A</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The network devices are referred to herein as &ldquo;clients.&rdquo; The clients depicted in this example are: an Internet Messaging Access Protocol (IMAP) client <highlight><bold>101</bold></highlight>; a Post Office Protocol (POP) client <highlight><bold>102</bold></highlight>; a Hypertext Transfer Protocol (HTTP) client <highlight><bold>103</bold></highlight>; and a plain old telephone (POT) client <highlight><bold>104</bold></highlight>. In an embodiment, clients <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight> are general purpose computers and client <highlight><bold>104</bold></highlight> is a telephone. After reading this description, the configuration of such clients would be apparent to one of ordinary skill in the relevant art(s). </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> A voice-mail state machine <highlight><bold>135</bold></highlight> is coupled between telephone client <highlight><bold>104</bold></highlight> and event notification server <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Event notification server <highlight><bold>112</bold></highlight> intercepts event requests generated from the clients and event responses generated by email server <highlight><bold>105</bold></highlight>. Email server <highlight><bold>105</bold></highlight> is configured to facilitate storage, retrieval, reading, and other functions associated with the handling of electronic mail (email). After reading this description, the configuration of email server <highlight><bold>105</bold></highlight> would be apparent to one of ordinary skill in the relevant art(s). </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Event notification server <highlight><bold>112</bold></highlight> is further able to receive event notification registration requests from a plurality of event notification requesters <highlight><bold>125</bold></highlight>A. Event notification requesters <highlight><bold>125</bold></highlight>A are applications that need to be informed when events occur within event notification system <highlight><bold>100</bold></highlight>. Examples of event notifications for which registration might be requested are user log-on and log-offs, messages being marked deleted or undeleted, messages being marked read or unread, and messages being marked heard or unheard. Additional examples of event notification requests are related to special flags set for a message such as, return receipt or acknowledgment that a message has been opened or listened to. Such examples of event notification requests are intended for example only and not limitation. Requests for notification of additional events can be made without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Event notification server <highlight><bold>112</bold></highlight> is further able to generate event notifications when registered events occur. To support this function, event notification server <highlight><bold>112</bold></highlight> is provided with a message handler <highlight><bold>115</bold></highlight> and an event listener <highlight><bold>120</bold></highlight>. In this example, message handler <highlight><bold>115</bold></highlight> and event listener <highlight><bold>120</bold></highlight> are depicted as being embodied in a single device or &ldquo;box&rdquo; <highlight><bold>112</bold></highlight>. This may not always be the case. In alternative embodiments, message handler <highlight><bold>115</bold></highlight> and event listener <highlight><bold>112</bold></highlight> can reside in separate devices or boxes. Message handler <highlight><bold>115</bold></highlight> is used to receive event requests from clients <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, and <highlight><bold>103</bold></highlight>. In turn, message handler <highlight><bold>115</bold></highlight> forwards such requests to email server <highlight><bold>105</bold></highlight>. As responses to the event request are received from email server <highlight><bold>105</bold></highlight>, they are forwarded to the clients <highlight><bold>101</bold></highlight>-<highlight><bold>104</bold></highlight> that initiated the request. Message handler <highlight><bold>115</bold></highlight> is further used to communicate the occurrence of events within event notification system <highlight><bold>100</bold></highlight> to event listener <highlight><bold>120</bold></highlight>. Message handler <highlight><bold>115</bold></highlight> and event listener <highlight><bold>120</bold></highlight> will be described in further detail with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a more detailed diagram of event notification server <highlight><bold>112</bold></highlight>. Event notification server <highlight><bold>112</bold></highlight> comprises a message handler <highlight><bold>115</bold></highlight>. Message handler <highlight><bold>115</bold></highlight> includes a number of communication protocol handlers. In this example, three specific communication protocols are supported. Accordingly, the event notification server <highlight><bold>112</bold></highlight> comprises three communication protocol handlers: an IMAP handler <highlight><bold>205</bold></highlight>, a POP handler <highlight><bold>210</bold></highlight>, and an HTTP handler <highlight><bold>215</bold></highlight>. In this fashion, event notification server <highlight><bold>112</bold></highlight> is generalized and does not depend on any particular communications protocol. This facilitates support for multiple communications protocols. In accordance with the example above, the IMAP handler <highlight><bold>205</bold></highlight> accepts IMAP requests from IMAP client <highlight><bold>101</bold></highlight>. Similarly, the POP handler <highlight><bold>210</bold></highlight> accepts POP requests from POP client <highlight><bold>102</bold></highlight> and the HTTP handler <highlight><bold>215</bold></highlight> accepts HTTP communications requests from HTTP client <highlight><bold>103</bold></highlight>. Event notification server <highlight><bold>112</bold></highlight> is further configured to accept communications from client <highlight><bold>104</bold></highlight>. In this fashion, each of the clients <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, and <highlight><bold>104</bold></highlight> communicate with event notification server <highlight><bold>112</bold></highlight> in their native protocol. This has the advantage of allowing conventional software to be used within each client <highlight><bold>101</bold></highlight>-<highlight><bold>104</bold></highlight> with little or no modification. In other words, the event notification server <highlight><bold>112</bold></highlight> of the present invention is transparent to the clients <highlight><bold>101</bold></highlight>-<highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Event notification server <highlight><bold>112</bold></highlight> is further comprised of an event listener <highlight><bold>120</bold></highlight>. Event listener <highlight><bold>120</bold></highlight> is comprised of a registration manager <highlight><bold>225</bold></highlight> and a notification generator <highlight><bold>230</bold></highlight>. Registration manager <highlight><bold>225</bold></highlight> is responsible for receiving registration requests from event notification requesters <highlight><bold>125</bold></highlight>A and storing information regarding these registration requests. Notification generator <highlight><bold>230</bold></highlight> is responsible for generating event notifications in response to the occurrence of a registered event and sending such event notifications to the appropriate event notification requester. When an event occurs, the message handler <highlight><bold>115</bold></highlight> forwards the event request to the event listener <highlight><bold>120</bold></highlight>. Event listener <highlight><bold>120</bold></highlight> checks to see if the event request is a registered event (i.e., has a corresponding request for notice registration), and if so, forwards notification of the event to the event notification requester <highlight><bold>125</bold></highlight>A that registered to receive such notification. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The present invention can be implemented in software, firmware, hardware, or any combination thereof. An example computer system, although not intended to limit the present invention, is described below with respect to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0050" lvl="7"><number>&lsqb;0050&rsqb;</number> B. Synchronization Module </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> depicts an application of the present invention. Here, event notification requester <highlight><bold>125</bold></highlight>A is a synchronization module <highlight><bold>125</bold></highlight>B. Synchronization module <highlight><bold>125</bold></highlight>B is responsible for maintaining the synchronization of message store in the unified messaging system. </paragraph>
<paragraph id="P-0052" lvl="7"><number>&lsqb;0052&rsqb;</number> C. Message Notification Module </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1C</cross-reference> depicts yet another application of the present invention. Here, event notification requester <highlight><bold>125</bold></highlight>A is a message notification module <highlight><bold>125</bold></highlight>C. The message notification module <highlight><bold>125</bold></highlight>C is responsible for providing indication that an email message, voice mail message, or fax is waiting to be retrieved. Indications might include illuminated lights or stuttered dial tones on a telephone, and icons or sound bytes on a general purpose computer. </paragraph>
<paragraph id="P-0054" lvl="7"><number>&lsqb;0054&rsqb;</number> III. Event Notification Process </paragraph>
<paragraph id="P-0055" lvl="7"><number>&lsqb;0055&rsqb;</number> A. Passive Monitoring </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of a method <highlight><bold>400</bold></highlight> (steps <highlight><bold>405</bold></highlight>-<highlight><bold>435</bold></highlight>) showing passive monitoring for event requests and generation of event notifications according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> To begin, in step <highlight><bold>405</bold></highlight>, an event request is received by event notification server <highlight><bold>112</bold></highlight>. Examples of such an event request include: requests to log-on and log-off. Event requests can be initiated from a client <highlight><bold>101</bold></highlight>-<highlight><bold>104</bold></highlight>. For instance, a user requesting to read an email located in his inbox would result in the generation of a request to retrieve the particular email. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Next, in step <highlight><bold>410</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> forwards the event request to email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In step <highlight><bold>415</bold></highlight>, the event request response is received by event notification server <highlight><bold>112</bold></highlight>. In the example above, a typical event request response would be providing the user access to the email. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Next, in step <highlight><bold>420</bold></highlight>, the event request response is forwarded by event notification server <highlight><bold>112</bold></highlight> to the client <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, or <highlight><bold>104</bold></highlight> that initiated the request. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Next, in step <highlight><bold>425</bold></highlight>, a determination is made as to whether the event request is a subscribed event. Subscribed events are those events that an event notification requester <highlight><bold>125</bold></highlight>A has registered to receive notification of from the event notification server <highlight><bold>112</bold></highlight>. Examples of such subscribed events include a user request to log on or log off, requests to mark messages as read or unread, and requests to mark messages as deleted. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> If the event request is a subscribed event, then in step <highlight><bold>430</bold></highlight>, an event notification is generated by event listener <highlight><bold>120</bold></highlight>. Continuing with the example above, assuming requests to read emails are subscribed events, the request to read a particular email would result in the generation of an event notification by event listener <highlight><bold>120</bold></highlight>. The method ends in step <highlight><bold>435</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="7"><number>&lsqb;0063&rsqb;</number> B. Active Monitoring </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In active monitoring the event notification server <highlight><bold>112</bold></highlight> issues independent requests to email server <highlight><bold>105</bold></highlight> for gathering additional information about the user session. These requests are not solicited by the email clients. This type of active monitoring is needed to provide message deletion notification, message waiting notification, etc. Active monitoring has to be done in the event notification server <highlight><bold>112</bold></highlight> itself utilizing the user&apos;s session. This is because notification is based on events which are specific to that particular session of the user which event notification server <highlight><bold>112</bold></highlight> is relaying. Hence this active monitoring cannot be done by an external entity on receiving notification from the event notification server <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> There are two types of active monitoring which event notification server <highlight><bold>112</bold></highlight> does. In the first example, active monitoring is based on client requests. In this type of active monitoring, event notification server <highlight><bold>112</bold></highlight> issues relevant event queries (based on the client requests) to gather active information about a particular client request. The second example of active monitoring is not based on client requests. In this type of active monitoring, event notification server <highlight><bold>112</bold></highlight> issues event queries to the email server independent of any requests being received from the email client. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flowchart of a method <highlight><bold>500</bold></highlight> (steps <highlight><bold>505</bold></highlight>-<highlight><bold>535</bold></highlight>) for an embodiment according to the first type for active monitoring of event requests and generation of event notifications. This type used to facilitate generation of event notifications based on client requests. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In step <highlight><bold>505</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> receives an event request from one of the clients <highlight><bold>101</bold></highlight>-<highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In step <highlight><bold>510</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> generates an event query. The event query is used to gather information about the client session. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In step <highlight><bold>515</bold></highlight>, a response to the event query is received from email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In step <highlight><bold>520</bold></highlight>, an event notification is generated by event listener <highlight><bold>120</bold></highlight>. The event notification includes information provided in the response to the event query. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Next, in step <highlight><bold>525</bold></highlight>, the event request is forwarded to email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In step <highlight><bold>530</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> receives an event request response from email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Finally, in step <highlight><bold>535</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> forwards the event request response to the client <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>,<highlight><bold>103</bold></highlight>, or <highlight><bold>104</bold></highlight> from which the event request was initiated. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> shows an example implementation of the first type of active monitoring (i.e., active monitoring based on client requests) according to flow <highlight><bold>500</bold></highlight> described above. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Event <highlight><bold>1</bold></highlight> (see step <highlight><bold>505</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) depicts an email client issuing an &ldquo;EXPUNGE&rdquo; request. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Upon receipt of this request, in Event <highlight><bold>2</bold></highlight> (see step <highlight><bold>510</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>), event notification server <highlight><bold>112</bold></highlight> issues an independent request by itself to query which messages have been marked deleted (and hence will get deleted by the client request for &ldquo;EXPUNGE&rdquo;). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Event <highlight><bold>3</bold></highlight> (see step <highlight><bold>515</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) represents event notification server <highlight><bold>112</bold></highlight> receiving a response to the event query from email server <highlight><bold>105</bold></highlight>. The email server <highlight><bold>105</bold></highlight> provides a response listing all the unique identifiers (UID) associated with the messages marked for deletion. Only upon receiving the response to the event query, does the event notification server <highlight><bold>112</bold></highlight> forward the client&apos;s &ldquo;EXPUNGE&rdquo; request to the email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Event <highlight><bold>4</bold></highlight> (see step <highlight><bold>520</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) represents the generation of an event notification indicating that the message ids have been deleted. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Event <highlight><bold>5</bold></highlight> (see step <highlight><bold>525</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) represents event notification server <highlight><bold>112</bold></highlight> issuing the client&apos;s Expunge request to email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Event <highlight><bold>6</bold></highlight> (see step <highlight><bold>530</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) represents the email servers <highlight><bold>105</bold></highlight> response to the Expunge request. The response contains the UIDs of the expunged messages. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Event <highlight><bold>7</bold></highlight> (see step <highlight><bold>535</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>) represents the forwarding of the UIDs from event notification server <highlight><bold>112</bold></highlight> to the client initiating the expunge request. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> In this way, the client is provided with confirmation that the requested messages have been deleted. Accordingly, any indication that the message is stored (e.g., automated voice announcement of number of messages stored or icon) would be updated to reflect that the message is no longer available. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a flowchart of a method <highlight><bold>600</bold></highlight> (steps <highlight><bold>605</bold></highlight>-<highlight><bold>615</bold></highlight>) showing the second type of active monitoring of event requests and generation of event notifications according to a second embodiment of the present invention. In this example, the event notifications are not based on client requests. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In step <highlight><bold>605</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> generates an event query. The event query is used to gather information needed to provide such services as message waiting notification. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In step <highlight><bold>610</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> receives a event query response from email server <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In step <highlight><bold>615</bold></highlight>, event notification server <highlight><bold>112</bold></highlight> generates an event notification based upon the event query response received in step <highlight><bold>610</bold></highlight>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> shows an example implementation of the second type of active monitoring (i.e., active monitoring based on client requests) according to flow <highlight><bold>600</bold></highlight> described above. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Event <highlight><bold>1</bold></highlight> represents the initiation of a user session. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Event <highlight><bold>2</bold></highlight> (see step <highlight><bold>605</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>) represents the generation of an event query. In this example, event notification server <highlight><bold>112</bold></highlight>, in order to determine the message waiting status of the mailbox, periodically issues queries to find out whether the mailbox has any unread messages. (In case of an unread message, message waiting lamp has to be turned ON, otherwise it should be turned off.) </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Event <highlight><bold>3</bold></highlight> (see step <highlight><bold>610</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>) represents the response to the event query. In the present example, the response indicates that there are no unread messages. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Event <highlight><bold>4</bold></highlight> (see step <highlight><bold>615</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>) represents the generation of an event notification. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In this way, the generated event notification can be used to inform message notification module <highlight><bold>125</bold></highlight>C to turn off the message waiting lamp on the user&apos;s phone. The illustrated exchanges of additional transactions between the client, event notification server, and email server is intended to demonstrate that the queries generated by event notification server <highlight><bold>112</bold></highlight> are independent of any request initiated by the client. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an example of a computer system <highlight><bold>300</bold></highlight> is shown. Computer system <highlight><bold>300</bold></highlight> can be used to implement computer program product embodiments of the present invention. This example computer system is illustrative and not intended to limit the present invention. Computer system <highlight><bold>300</bold></highlight> represents any single or multi-processor computer. Single-threaded and multi-threaded computers can be used. Unified or distributed memory systems can be used. </paragraph>
<paragraph id="P-0094" lvl="7"><number>&lsqb;0094&rsqb;</number> IV. Example Computer System </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Computer system <highlight><bold>300</bold></highlight> includes one or more processors, such as processor <highlight><bold>304</bold></highlight>. One or more processors <highlight><bold>304</bold></highlight> can execute software and implement all or part of the features of the present invention described herein. Each processor <highlight><bold>304</bold></highlight> is connected to a communication infrastructure <highlight><bold>302</bold></highlight> (e.g., a communications bus, cross-bar, or network). After reading this description, it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and/or computer architectures. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Computer system <highlight><bold>300</bold></highlight> also includes a main memory <highlight><bold>312</bold></highlight>, preferably random access memory (RAM), and can also include secondary memory <highlight><bold>314</bold></highlight>. Secondary memory <highlight><bold>314</bold></highlight> can include, for example, a hard disk drive <highlight><bold>316</bold></highlight> and/or a removable storage drive <highlight><bold>318</bold></highlight>, representing a floppy disk drive, a magnetic tape drive, an optical disk drive, etc. The removable storage drive <highlight><bold>318</bold></highlight> reads from and/or writes to a removable storage unit <highlight><bold>320</bold></highlight> in a well-known manner. Removable storage unit <highlight><bold>320</bold></highlight> represents a floppy disk, magnetic tape, optical disk, etc., which is read by and written to by removable storage drive <highlight><bold>318</bold></highlight>. As will be appreciated, the removable storage unit <highlight><bold>320</bold></highlight> includes a computer usable storage medium having stored therein computer software and/or data. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In alternative embodiments, secondary memory <highlight><bold>314</bold></highlight> may include other similar means for allowing computer programs or other instructions to be loaded into computer system <highlight><bold>300</bold></highlight>. Such means can include, for example, a removable storage unit <highlight><bold>324</bold></highlight> and an interface <highlight><bold>322</bold></highlight>. Examples can include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units <highlight><bold>324</bold></highlight> and interfaces <highlight><bold>322</bold></highlight> which allow software and data to be transferred from the removable storage unit <highlight><bold>324</bold></highlight> to computer system <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Computer system <highlight><bold>300</bold></highlight> can also include a communications interface <highlight><bold>330</bold></highlight>. Communications interface <highlight><bold>330</bold></highlight> allows software and data to be transferred between computer system <highlight><bold>300</bold></highlight> and external devices via communications path <highlight><bold>335</bold></highlight>. Examples of communications interface <highlight><bold>330</bold></highlight> can include a modem, a network interface (such as Ethernet card), a communications port, etc. Software and data transferred via communications interface <highlight><bold>330</bold></highlight> are in the form of signals which can be electronic, electromagnetic, optical or other signals capable of being received by communications interface <highlight><bold>330</bold></highlight>, via communications path <highlight><bold>335</bold></highlight>. Note that communications interface <highlight><bold>330</bold></highlight> provides a means by which computer system <highlight><bold>300</bold></highlight> can interface to a network such as the Internet. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> The present invention can be implemented using software running (that is, executing) in an environment similar to that described above with respect to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. In this document, the term &ldquo;computer program product&rdquo; is used to generally refer to removable storage unit <highlight><bold>320</bold></highlight>, a hard disk installed in hard disk drive <highlight><bold>318</bold></highlight>, or a carrier wave or other signal carrying software over a communication path <highlight><bold>335</bold></highlight> (wireless link or cable) to communication interface <highlight><bold>330</bold></highlight>. A computer useable medium can include magnetic media, optical media, or other recordable media, or media that transmits a carrier wave. These computer program products are means for providing software to computer system <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Computer programs (also called computer control logic) are stored in main memory <highlight><bold>312</bold></highlight> and/or secondary memory <highlight><bold>314</bold></highlight>. Computer programs can also be received via communications interface <highlight><bold>330</bold></highlight>. Such computer programs, when executed, enable the computer system <highlight><bold>300</bold></highlight> to perform the features of the present invention as discussed herein. In particular, the computer programs, when executed, enable the processor <highlight><bold>304</bold></highlight> to perform the features of the present invention. Accordingly, such computer programs represent controllers of the computer system <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> In an embodiment where the invention is implemented using software, the software may be stored in a computer program product and loaded into computer system <highlight><bold>300</bold></highlight> using removable storage drive <highlight><bold>318</bold></highlight>, hard drive <highlight><bold>316</bold></highlight>, or communications interface <highlight><bold>330</bold></highlight>. Alternatively, the computer program product may be downloaded to computer system <highlight><bold>300</bold></highlight> over communications path <highlight><bold>335</bold></highlight>. The control logic (software), when executed by the one or more processors <highlight><bold>304</bold></highlight>, causes the processor(s) <highlight><bold>304</bold></highlight> to perform the functions of the invention as described herein. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> In another embodiment, the invention is implemented primarily in firmware and/or hardware using, for example, hardware components such as application specific integrated circuits (ASICs). Implementation of a hardware state machine so as to perform the functions described herein will be apparent to a person skilled in the relevant art. </paragraph>
</section>
<section>
<heading lvl="1">V. CONCLUSION </heading>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be define only in accordance with the following claims and their equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An event notification system comprising: 
<claim-text>an email server for storing a plurality of email messages; </claim-text>
<claim-text>at least one client from which at least one event request is initiated; </claim-text>
<claim-text>a message handler that monitors said at least one event request, forwards said event request to said email server, and forwards an event response based on said at least one event request to said at least one client; and </claim-text>
<claim-text>an event listener that generates an event notification when said at least one event request corresponds to a subscriber event registration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a voice-mail state machine coupled to said event listener, wherein said voice-mail state machine provides access to a plurality of voice messages and facsimile messages. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said message handler includes at least one communication protocol handler. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a plurality of event notification requesters that receive said event notification generated by said event listener. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event requests includes a request to log-on a user. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to log-off a user. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to mark said email message as read. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to mark said email message as unread. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to mark said voice message as played. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to mark said voice message as unplayed. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said at least one event request includes a request to delete said email message or said voice message. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said event listener comprises: 
<claim-text>a registration manager that receives and stores one or more event notification requests from said plurality of event notification requesters; and </claim-text>
<claim-text>a notification generator for generating said event notification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said event listener actively monitors said event requests. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The event notification system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said event listener passively monitors said event requests. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method for providing event notification in a unified messaging system, the method comprising: 
<claim-text>a plurality of email messages in an email server; </claim-text>
<claim-text>initiating a user session from an email client; </claim-text>
<claim-text>monitoring the user session with a event notification server to identify an event occurrence; and </claim-text>
<claim-text>issuing an event notification to an event subscriber in response to the identified event occurrence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method for providing event notification in a unified messaging system, the method comprising: 
<claim-text>receiving an event request; </claim-text>
<claim-text>forwarding the event request to an email server; </claim-text>
<claim-text>receiving a response to the event request; </claim-text>
<claim-text>determining if the event request is a subscriber event; and </claim-text>
<claim-text>generating an event notification when the event request is a subscriber event. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method for generating an event notification in a unified messaging system, the method comprising the steps of: 
<claim-text>(a) receiving an event request from a client; </claim-text>
<claim-text>(b) generating an event query; </claim-text>
<claim-text>(c) receiving an event query response to the event query; </claim-text>
<claim-text>(d) generating an event notification, the event notification comprising the event request and the event query response; </claim-text>
<claim-text>(e) forwarding the event request to an email server; </claim-text>
<claim-text>(f) receiving a response to the event request; and </claim-text>
<claim-text>(g) forwarding the response to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said generating an event query step (b) requests a list of message identifiers referenced in the event request. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the event query response includes said list of message identifiers requested in said generating an event query step (b). </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method for generating an event notification in a unified messaging system, the method comprising the steps of: 
<claim-text>(a) generating an event query; </claim-text>
<claim-text>(b) receiving an event query response to the event query; </claim-text>
<claim-text>(c) generating an event notification, the event notification comprising the event request and the event query response. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said generating an event query step (a) generates a query to determine if there are any unread messages. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said generating an event notification step (c) generates an event notification used to provide indication that a message is waiting.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002634A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002634A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002634A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002634A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002634A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002634A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002634A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002634A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002634A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002634A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002634A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
