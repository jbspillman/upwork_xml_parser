<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005457A1-20030102-D00000.TIF SYSTEM "US20030005457A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00001.TIF SYSTEM "US20030005457A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00002.TIF SYSTEM "US20030005457A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00003.TIF SYSTEM "US20030005457A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00004.TIF SYSTEM "US20030005457A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00005.TIF SYSTEM "US20030005457A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00006.TIF SYSTEM "US20030005457A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00007.TIF SYSTEM "US20030005457A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00008.TIF SYSTEM "US20030005457A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00009.TIF SYSTEM "US20030005457A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00010.TIF SYSTEM "US20030005457A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00011.TIF SYSTEM "US20030005457A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00012.TIF SYSTEM "US20030005457A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00013.TIF SYSTEM "US20030005457A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00014.TIF SYSTEM "US20030005457A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00015.TIF SYSTEM "US20030005457A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005457A1-20030102-D00016.TIF SYSTEM "US20030005457A1-20030102-D00016.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005457</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893825</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N007/173</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>725</class>
<subclass>094000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>725</class>
<subclass>092000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>100000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Video file server cache management using movie ratings for reservation of memory and bandwidth resources</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Sorin</given-name>
<family-name>Faibish</family-name>
</name>
<residence>
<residence-us>
<city>Newton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<family-name>Forecast</family-name>
</name>
<residence>
<residence-us>
<city>Newton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ugur</given-name>
<family-name>Sezer</family-name>
</name>
<residence>
<residence-us>
<city>Shrewsbury</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Peter</given-name>
<family-name>Bixby</family-name>
</name>
<residence>
<residence-us>
<city>Westborough</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Wayne</given-name>
<middle-name>W.</middle-name>
<family-name>Duso</family-name>
</name>
<residence>
<residence-us>
<city>Shrewsbury</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Richard C. Auchterlonie, Esq.</name-1>
<name-2>Howrey Simon Arnold &amp; White, LLP</name-2>
<address>
<address-1>750 Bering Drive</address-1>
<city>Houston</city>
<state>TX</state>
<postalcode>77057-2198</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Access to movies ranging from very popular movies to unpopular movies is managed by configuring sets of data movers for associated movie rankings, reserving data mover local cache resources for the most popular movies, reserving a certain number of streams for popular movies, negotiating with a client for selection of available movie titles during peak demand when resources are not available to start any freely-selected movie in disk storage, and managing disk bandwidth and primary and local cache memory and bandwidth resources for popular and unpopular movies. The assignment of resources to movie rankings may remain the same while the rankings of the movies are adjusted, for example, during off-peak hours. A movie locked in primary cache and providing a source for servicing a number of video streams may be demoted from primary cache to disk in favor of servicing one or more streams of a higher-ranking movie. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to video file servers and more particularly to a video file server providing &ldquo;video on demand&rdquo; (VOD) service. In particular, the present invention relates to management of cache memory and bandwidth resources in such a video file server. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> To provide &ldquo;video on demand&rdquo; (VOD) service, a multiplicity of digitally-encoded movies are stored in an array of disk drives, and the disk drives are coupled to a data network for delivery of the movies to network clients for viewing. It is desired to permit each client to select any one of the movies in the disk storage for viewing at any time, and to give the client &ldquo;video cassette recorder&rdquo; (VCR) functionality permitting the client to pause and fast-forward or fast-reverse to any location in the movie while viewing the movie. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Video file servers are typically constructed using disk drives, network interfaces, and other components that have been designed and manufactured for general data storage and network computing applications. For example, one architecture for a video file server includes a cross-bar switch to couple an array of conventional disk drives to an array of network interface circuits. In this architecture, it is possible for any network client communicating with any one of the network interface circuits to access any movie in any one of the disk drives. This architecture, however, has a disk drive bandwidth limitation preventing more than a certain number of independent real-time video streams to issue from any one of the disk drives. This bandwidth limitation is problematic for providing video-on-demand service for the more popular movies. The bandwidth limitation can be overcome by storing a complete copy of each of the more popular movies in more than one of the disk drives, but such a solution is very costly. A more economical solution is to deny VCR functionality for the most popular movies, and instead offer the most popular movies starting at various increments of time and continuing without interruption. For example, if each disk drive has sufficient bandwidth to supply eight concurrent-time video streams, then it is possible for the one disk drive containing only one two-hour movie to permit any client to begin viewing at the start of the movie every fifteen minutes. Each of the eight video streams could be simulcast to any number of the clients that could be serviced concurrently by all of the network interface circuits. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Another architecture for a video file server is a hierarchical architecture that uses a cached disk storage system and network interface circuits in a multiplicity of commodity computers. The cached disk storage system includes a primary cache memory, and each commodity computer includes a local secondary cache memory. Each cache memory provides a much higher available bandwidth than a single disk drive. Therefore, it is possible to store an entire movie in cache memory to provide the network clients with VOD and VCR access to the movie. An example of such a hierarchical video file server is described in Duso et al. U.S. Pat. No. 5,892,915 issued Apr. 6, 1999, incorporated herein by reference. Such a video file server is manufactured and sold by EMC Corporation, 35 Parkwood Drive, Hopkinton, Mass. 01748. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Although Duso et al. U.S. Pat. No. 5,892,915 teaches how to make a video file server that can provide VOD and VCR access to the most popular movies and also unpopular movies, there is a need for more efficient management of access to popular movies that are not sufficiently popular to always keep them in cache memory. Moreover, the popularity of a movie will change with time, and therefore it is desired for the video file server to manage cache memory and bandwidth in accordance with the changing popularity of the movie. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In accordance with one aspect, the present invention provides a video file server for providing clients with video-on-demand access to movies. The video file server includes a cached disk storage system including a primary cache memory and disk storage for storing the movies; and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network. Each of the data mover computers has a local cache memory. The movies are ranked with respect to popularity, and a respective set of the data movers are pre-assigned for servicing video streams for each movie ranking. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In accordance with another aspect, the invention provides a video file server for providing clients with video-on-demand access to movies. The video file server comprises a cached disk storage system including a cache and disk storage for storing the movies; and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network. The video file server is programmed for locking in the cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the cache and there is insufficient free cache memory for servicing the more popular movie from the cache, transferring the servicing of a less popular movie from the cache to disk storage in order to free cache memory for servicing the more popular movie from the cache. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In accordance with yet another aspect, the invention provides a method of operating a video file server for providing clients with video-on-demand access to movies. The video file server has a cached disk storage system including a primary cache and disk storage containing the movies, and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network. Each of the data mover computers has a local cache. The method includes ranking the movies with respect to popularity, and assigning a respective set of the data movers to each movie ranking, and servicing video streams for each movie ranking with the respective set of data movers assigned for servicing said video streams for said each movie ranking. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In accordance with still another aspect, the invention provides a method of operating a video file server for providing clients with video-on-demand access to movies. The video file server has a cached disk storage system including a cache and disk storage containing the movies, and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a client data network. The method includes locking in the cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the cache and there is insufficient free cache memory for servicing the more popular movie from the cache, transferring the servicing of a less popular movie from the cache to the disk storage in order to free cache memory for servicing the more popular movie from the cache.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Other objects and advantages of the invention will become apparent upon reading the following detailed description with reference to the drawings, in which: </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a hierarchical video file server incorporating the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a graph of frequency of access in plays per day versus the ranking of movies stored in the video file server of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a table showing a correspondence between the movie ranking and a data mover set aside for servicing client requests for access to the movie; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an example of how the data movers are physically configured differently for providing client access to movies of respective ranks; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows an example of a portion of the service database in the control station associating certain information with the movies; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows an allocation of reserved and not reserved streams, and active and inactive streams from a data mover set; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an allocation of bandwidth on the storage system bus; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows an allocation of primary cache memory capacity; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a number of entire movies locked in the primary cache; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows various ways of indicating to a client the availability of movie titles during a high demand situation; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing how movie availability is indicated to a client; and </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> FIGS. <highlight><bold>12</bold></highlight> to <highlight><bold>20</bold></highlight> comprise pages of a flowchart showing how the video file system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is programmed to respond to a client&apos;s request for video service.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof have been shown by way of example in the drawings and will be described in detail. It should be understood, however, that it is not intended to limit the invention to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the scope of the invention as defined by the appended claims. </paragraph>
<section>
<heading lvl="1">DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, of the drawings, there is shown a video file server generally designated <highlight><bold>20</bold></highlight> incorporating the present invention. The video file server <highlight><bold>20</bold></highlight> includes an array of data mover computers <highlight><bold>21</bold></highlight>, at least one control station computer <highlight><bold>22</bold></highlight>, and a cached disk storage system <highlight><bold>23</bold></highlight>. The video file server <highlight><bold>20</bold></highlight> is a high performance, high capacity, and high-availability network-attached data server. It provides the ability for multiple file systems to exist concurrently over multiple communication stacks, with shared data access. It also allows multiple physical file systems to co-exist, each optimized to the needs of a particular data service. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The video file server <highlight><bold>20</bold></highlight> is managed as a dedicated network appliance, integrated with popular network operating systems in a way, which, other than its superior performance, is transparent to the end user. It provides specialized support for isochronous data streams used in live, as well as store-and forward, audio-visual applications. Therefore, the video file server <highlight><bold>20</bold></highlight> is suitable for a wide variety of applications such as image repositories, video on demand, and networked video applications, in addition to high-end file server applications. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The cached disk storage system <highlight><bold>23</bold></highlight> includes disk storage <highlight><bold>24</bold></highlight> in the form of an array of small commodity disk drives. The cached disk storage system <highlight><bold>23</bold></highlight> also includes a high-capacity random access cache memory <highlight><bold>25</bold></highlight>. The disk storage <highlight><bold>24</bold></highlight> and the cache memory <highlight><bold>25</bold></highlight> share a system bus <highlight><bold>26</bold></highlight>. The cached disk storage system <highlight><bold>23</bold></highlight> also includes a number of port adapters <highlight><bold>27</bold></highlight>, and each of the data mover computers <highlight><bold>21</bold></highlight> and the control station computer <highlight><bold>22</bold></highlight> is linked to the system bus <highlight><bold>26</bold></highlight> by at least one of the port adapters. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Each of the data movers <highlight><bold>21</bold></highlight> is a high-end commodity computer. The clustering of the data movers <highlight><bold>21</bold></highlight> as a front end to the cached disk storage system <highlight><bold>23</bold></highlight> provides parallelism and scalability. Each of the data mover computers <highlight><bold>21</bold></highlight> includes a respective local cache <highlight><bold>28</bold></highlight>, <highlight><bold>29</bold></highlight>, <highlight><bold>30</bold></highlight> of random access memory. The local caches function as a very large capacity secondary cache, and the cache <highlight><bold>25</bold></highlight> in the cached disk storage system <highlight><bold>23</bold></highlight> functions as a primary cache, in a hierarchical storage architecture. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> For real-time streaming of movie data, the storage and access of the movie data in the cache memory is scheduled by the control station <highlight><bold>22</bold></highlight> in accordance with an admission control protocol. The control station <highlight><bold>22</bold></highlight> is linked to the data movers <highlight><bold>21</bold></highlight> by a dual-redundant high-speed internal Ethernet network <highlight><bold>31</bold></highlight>. The control station <highlight><bold>22</bold></highlight> responds to a client request for the real-time streaming of movie data by checking whether or not the video file server has sufficient memory and bandwidth resources to guarantee that when a request is granted, the real-time streaming can continue without interruption until the end of the movie. The resources currently in use and the resources available are noted in a service data base <highlight><bold>32</bold></highlight> maintained in local memory of the control station <highlight><bold>22</bold></highlight> and backed-up in the disk storage <highlight><bold>24</bold></highlight>. If there are sufficient resources, then the control station <highlight><bold>22</bold></highlight> places locks on the required resources, grants the client&apos;s request, and maintains the locks until the client&apos;s request is satisfied. For example, the control station <highlight><bold>22</bold></highlight> may determine that a video stream can be serviced by pre-fetching the movie data from the disk storage <highlight><bold>24</bold></highlight> and buffering the data through the primary cache <highlight><bold>25</bold></highlight> and one of the data mover local caches <highlight><bold>28</bold></highlight>, <highlight><bold>29</bold></highlight>, <highlight><bold>30</bold></highlight>. In this case, the control station <highlight><bold>22</bold></highlight> will select one of the data movers to service the client request, and will place a lock upon certain bandwidth and cache memory resources of the selected data mover, and will also place a lock on bandwidth resources of the system bus <highlight><bold>26</bold></highlight> and memory resources of the primary cache <highlight><bold>25</bold></highlight>, and these locks will remain in place until the selected data mover is finished streaming video data to the client. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Further details regarding the construction and operation of a video file server are found in Duso et al. U.S. Pat. No. 5,892,915 issued Apr. 6, 1999, incorporated herein by reference. For practicing the present invention, the video file server <highlight><bold>20</bold></highlight> is programmed as further described below. In addition, the physical configuration of the data movers may also be modified as described below with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. These modifications provide more efficient management of access to popular movies that are not sufficiently popular to always keep them in cache memory. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Proper management of cache memory in the video file server of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is important for effective use of the bandwidth resources in the video file server of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> has been drawn to emphasize the hierarchical architecture of the file server. At the top of the hierarchy, at the disk storage level, the bandwidth resources are at a minimum. At the bottom of the hierarchy, at the data mover interface to the client data network <highlight><bold>33</bold></highlight>, the bandwidth resources are at a maximum. The increased bandwidth resources at the bottom of the hierarchy can be fully used only if the same data from the disk storage <highlight><bold>24</bold></highlight> at the top of the hierarchy is being streamed to multiple clients at the bottom of the hierarchy. Unless the same data is being multicast from the disk storage <highlight><bold>24</bold></highlight> to the multiple clients, it must be streamed from cache memory, and there must be a balance between the increased bandwidth resources at the bottom of the hierarchy and the cache memory capacity of the primary cache <highlight><bold>25</bold></highlight> and the data mover local cache memories <highlight><bold>28</bold></highlight>, <highlight><bold>29</bold></highlight>, and <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> For a few of the most popular movies, an entire movie can be kept in the local cache of one or more of the data movers <highlight><bold>21</bold></highlight>. For unpopular movies, there is no advantage to keeping an entire movie in cache because it is most likely that the limited number of clients simultaneously viewing the movie can be supported by streaming the video data directly from one disk drive containing the movie. Between these two extremes, however, there are a substantial number of rather popular movies that should be serviced from cache in an appropriate fashion to satisfy client demands for VOD and VCR service. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> It is possible to configure the hardware of the video file server <highlight><bold>20</bold></highlight> for effective service of all kinds of movies due to a certain regularity in the frequency of access of movies once the movies have been ranked in terms of their frequency of access. Shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, for example, is an idealized plot of the frequency of access, in plays per day, the ranking of each movie accessible from the video file server. The most popular movie is given a rank of one, the next most popular movie is given a rank of <highlight><bold>2</bold></highlight>, and so on. When plotted on log-log paper, the plot falls on a straight line with negative slope in accordance with the &ldquo;Zipf&rdquo; distribution. (See, for example, the Jakob Nielsen, &ldquo;Zipf Curves and Website Popularity,&rdquo; published at http://www.useit.com/alertbox zipf.html). Although the popularity of each movie may rise and will fall with time, the plot will retain its general characteristic of a line having a certain slope and intercept with the &ldquo;y&rdquo; axis. Therefore, it is possible to configure and program the video file server in accordance with the general characteristic, in order to handle effectively each movie ranking. Moreover, the video file server can be configured and programmed initially without regard to the rank of any particular movie. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> When a movie is first released for VOD distribution, it will have an industry rating, such as the &ldquo;Blockbuster&rdquo; rating, with respect to other popular movies. Therefore, the newly released movie can be ranked with respect to the popular movies already stored in the video file server, and the rank of each lower rated movie in the video file server can be decreased by one level as the newly released movie is written to disk storage of the video file server. New movie releases, for example, are written into the disk storage at the time of day of minimum demand, for example, about 3:00 a.m. Each day, the number of accesses for each movie is recorded to compute a running average of the frequency of access of each movie, in order to re-adjust the rank of each movie, and make effective the adjusted rank at the time of day of minimum demand. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In accordance with one aspect of the present invention, for each movie ranking, a particular set of data mover resources are preassigned for servicing client access to the movie having the movie ranking. With reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, for example, there is shown a table associating each movie ranking with a data mover set pre-assigned to service the movie having the associated ranking. Therefore, there is a certain maximum number of video streams that are available to each movie, corresponding to the total number of video streams that all of the data movers in the set can supply to the client data network. There is also a certain maximum amount of data mover local cache memory capacity available for servicing each movie, corresponding to the total amount of local cache memory in all of the data movers in the set. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> For the highest ranked movie (i.e., the most popular movie having the lowest numerical rank value), the data mover set may include a multiplicity of data movers, in order to support a large number of concurrent video streams. For the lowest ranked movies (i.e., unpopular movies), the same data mover set consisting of a single data mover may service a multiplicity of movies. The data mover sets need not be disjoint, and instead there may be overlap between the data mover set servicing one movie ranking and the data mover set servicing the movie ranking having the next higher or lower rank. The overlap may facilitate the process of making effective the adjustment in rank performed at the time of day of minimum demand, because in some instances there will be no change in at least one of the data movers assigned to service a movie having its rank changed to the next higher or lower rank. For example, when there is a change in rank of a movie so that a movie previously serviced by a first data mover will become serviced by a second data mover, there may be a movement of the movie from the local data mover cache of the first data mover to the local data mover cache of the second data mover. This process should be transparent to a client currently viewing the movie. However, if there are a large number of clients currently viewing the movie, the VCR functionality may be suspended for a brief moment during the time for the transfer of the movie between the caches, so that the video stream for each client currently viewing the movie is switched only once from the first data mover to the second data mover. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In many cases where the transfer of the movie occurs between a first data mover cache to a second data mover cache, the association of each movie ranking with a respective set of data movers offers the advantage that the transfer can occur over a dedicated link between the two data movers. For example, as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the data movers are arranged in a series such that neighboring data movers in the series are coupled by a dedicated link <highlight><bold>34</bold></highlight>, <highlight><bold>35</bold></highlight>, etc. and the flow of movie data from one data mover to the next over a dedicated link permits the movie data from one data mover set servicing one movie ranking to be directly transferred to another data mover set servicing a next higher or lower movie ranking. In many cases the transfer will occur in this fashion because in the time span of one day the data mover set association of a movie is likely to change if at all from one data mover set to servicing one movie ranking to another data mover set servicing a next higher or lower ranking. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the physical configuration of each of the data movers <highlight><bold>21</bold></highlight> depends on the rank of the movie or movies to be serviced by the data mover. In particular, the data movers servicing the higher ranking (i.e., the most popular) movies have fewer cache RAM cards <highlight><bold>41</bold></highlight> and more network interface cards <highlight><bold>42</bold></highlight> than the data movers servicing the lower ranking (i.e., less popular) movies. This is a consequence of the fact that the cache RAM has sufficiently high bandwidth that a large number of video streams can be serviced from one copy of a movie in the cache RAM. For less popular movies, not all of this bandwidth can be utilized, so that the ratio of network interface cards to cache RAM cards will fall for less popular movies. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> For the most popular movies, there can be multiple data movers servicing just one movie, and in this case only a fraction of the cache RAM for servicing an entire movie need reside in any one of the movies. For example, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the movie data for movie &num;<highlight><bold>1</bold></highlight> could be circulated among the first three data movers, and the movie data for movie &num;<highlight><bold>2</bold></highlight> could be circulated among the third and fourth data movers. The data mover &num;<highlight><bold>1</bold></highlight> could have a cache capacity to hold 40% of movie &num;<highlight><bold>1</bold></highlight>, the data mover &num;<highlight><bold>2</bold></highlight> could have a cache capacity to hold 40% of movie &num;<highlight><bold>1</bold></highlight>, the data mover &num;<highlight><bold>3</bold></highlight> could have a cache capacity to hold 25% of movie &num;<highlight><bold>1</bold></highlight> and 40%% of movie &num;<highlight><bold>2</bold></highlight>, and the data mover &num;<highlight><bold>4</bold></highlight> could have a cache capacity to hold 65% of movie &num;<highlight><bold>2</bold></highlight>. Data mover &num;<highlight><bold>6</bold></highlight> could have a cache capacity to hold at least 100% of movie &num;<highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows an example of a portion of the service database in the control station associating certain information with the movies. For each movie, the service database includes the movie ranking, the movie title, the frequency of access (in accesses per day), the data mover set for servicing client access to the movie, a certain number of streams reserved for accessing the movie, the number of active video streams from the movie, the location of the movie on disk, and any location of the movie in cache. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows an allocation of reserved and not reserved streams, and active and inactive streams from a data mover set. The programming of the video file server takes into account the fact that there may be certain times of day, such as 8 p.m. to 11 p.m., when the server cannot satisfy all requests for VOD service. This will be referred to as a peak demand situation. During the peak demand situation, VOD service is likely to be denied for the less popular movies, unless a less popular movie already happens to be in cache and being streamed to a fair number of clients. The reservation of a certain number of streams for servicing each movie prevents an allocation of streams prior to a high demand condition from becoming frozen during the high demand period. This can be a significant advantage if the demand for certain movies (such as adult films) has a tendency to rise, and the demand for certain other movies (such as family films) has a tendency to fall, during the peak demand period. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an allocation of bandwidth on the storage system bus. The bandwidth is allocated for access of movies from the primary cache, or for access of movies from disk. The difference between the total available bus bandwidth and the allocated bandwidth is the free bandwidth. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows an allocation of primary cache memory capacity. A certain amount of the cache memory can be locked for access of one or more entire movies in the cache. The cache memory can also be locked for buffering of disk access. The difference between the total primary cache memory and the allocated cache memory is the free cache memory. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a number of entire movies locked in the primary cache. Associated with each movie locked in the primary cache is a certain number of streams serviced from the movie in the cache. If the number of streams serviced from an entire movie in the primary cache falls below the number that can be serviced from disk, then it may be advantageous to service the streams from disk in order to free up cache memory for servicing a more popular movie from cache. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows various ways of indicating to a client the availability of movie titles during a high demand situation. The client may request the availability of a specified movie title. The client may also browse through a series of listing of groups of movies having varying degrees of availability. The first group includes the movies that are accessible to start at any time with full VCR functionality. The next series of groups are movies that are multicast from disk without VCR capability, starting at periodic increments of time, such as in the next 15 minutes, 30 minutes, etc. Then there is a group of movies that are already playing, from which could be spawned an additional stream to the client. For example, when the high-demand situation is reached, VCR functionality for popular movies not in cache is suspended in order to create the multi-cast streams spaced at periodic intervals in time. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing how movie availability is indicated to a client. In a first step <highlight><bold>51</bold></highlight>, execution continues to step <highlight><bold>52</bold></highlight> if resources are not available to start immediately a new stream from any movie in disk storage. In step <highlight><bold>52</bold></highlight>, the client is told that the system is at peak demand, and full service is expected at a particular time in the future. In step <highlight><bold>53</bold></highlight>, the client is shown a list of titles of movies in cache that are accessible to start at any time. In step <highlight><bold>54</bold></highlight>, the client is shown a list of titles of movies that are scheduled to begin at certain times. In step <highlight><bold>55</bold></highlight>, the client is shown a list of titles of movies that are not accessible at any time but are currently playing. In step <highlight><bold>56</bold></highlight>, the client is told that the following movies are available during off-peak hours. Then in step <highlight><bold>58</bold></highlight>, the client is shown a list of titles of movies in disk storage. In step <highlight><bold>59</bold></highlight>, the client is told that the following movies can be ordered from archival storage. In step <highlight><bold>60</bold></highlight>, the client is shown a list of titles of movies in archival storage. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In step <highlight><bold>51</bold></highlight>, if resources are available to start any movie in disk storage, then execution branches from step <highlight><bold>51</bold></highlight> to step <highlight><bold>57</bold></highlight>. In step <highlight><bold>57</bold></highlight>, the client is told that the following movies may start at any time. Execution then continues to step <highlight><bold>58</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> FIGS. <highlight><bold>12</bold></highlight> to <highlight><bold>20</bold></highlight> comprise pages of a flowchart showing how the video file system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is programmed to respond to a client&apos;s request for video service. This request is received by the control station (<highlight><bold>22</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). In a first step <highlight><bold>71</bold></highlight>, the control station (based on initial state in the service data base <highlight><bold>32</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) selects a data mover DMj to serve the client. The control station sends a message over the high-speed serial bus (<highlight><bold>31</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) requesting DMj to respond to the client request. Then in step <highlight><bold>72</bold></highlight>, the data mover DMj connects to the client. In step <highlight><bold>73</bold></highlight>, the client negotiates a movie title with the data mover DMj, for example, as described above with reference to <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference>, so that the data mover DMj obtains from the client a title of a movie that has been placed in disk storage. In step <highlight><bold>74</bold></highlight>, the data mover DMj checks whether it has access to the movie. For example, DMj must be in the set of data movers assigned to service the rank of the movie. It is also possible that DMj is in the set of data movers assigned to service the rank of the movie but the movie should be serviced by another one of the data movers in the set, for example, because the portion of the movie to be initially accessed presently resides in the local cache of another one of the data movers in the set. If the titled movie is not accessible by the data mover DMj, then execution branches to step <highlight><bold>75</bold></highlight>. In step <highlight><bold>75</bold></highlight>, DMj informs the control station (CS) of the movie title. Then in step <highlight><bold>76</bold></highlight>, the control station selects a data mover having access to the titled movie, and this selected data mover will be referenced as DMj in subsequent steps. Execution then continues to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. Execution also continues to <cross-reference target="DRAWINGS">FIG. 13</cross-reference> from step <highlight><bold>74</bold></highlight> if the title is accessible by DMj. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, in step <highlight><bold>81</bold></highlight>, execution branches depending on whether or not DMj is already servicing a stream from the titled movie Mi. If not, execution branches to step <highlight><bold>82</bold></highlight>. In step <highlight><bold>82</bold></highlight>, execution branches depending on whether or not the titled movie Mi is in the primary cache already. If not, then execution continues to step <highlight><bold>83</bold></highlight>. In step <highlight><bold>83</bold></highlight>, execution branches depending on whether or not there is cache available for the entire movie Mi. If not, execution continues to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. Otherwise, execution branches to step <highlight><bold>86</bold></highlight>. In step <highlight><bold>86</bold></highlight>, execution branches to <cross-reference target="DRAWINGS">FIG. 17</cross-reference> if primary cache bandwidth is available for servicing the movie from the primary cache. If so, execution continues to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. If not, execution branches to step <highlight><bold>87</bold></highlight> to inform the control station of the lack of primary cache bandwidth. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In step <highlight><bold>81</bold></highlight>, if the data mover DMj is already servicing a stream from the movie, then execution continues to step <highlight><bold>84</bold></highlight>. Execution also continues to step <highlight><bold>84</bold></highlight> from step <highlight><bold>82</bold></highlight> if the title Mi is already in the primary cache. In step <highlight><bold>84</bold></highlight>, the required bandwidth for a new stream (BWi) is computed, and for comparison, in step <highlight><bold>85</bold></highlight> the available (i.e., free) primary cache bandwidth (BW) is obtained. Execution then continues in step <highlight><bold>86</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, in step <highlight><bold>91</bold></highlight>, if disk bandwidth is not available, execution branches to <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. Otherwise, execution continues to step <highlight><bold>92</bold></highlight>. In step <highlight><bold>92</bold></highlight>, the control station opens the file for the movie Mi and sends a pointer to the file to the data mover DMj. Then in step <highlight><bold>93</bold></highlight>, the control station logs in the service data base (DB) the fact that a stream for the movie Mi is being serviced from disk. In step <highlight><bold>94</bold></highlight>, the data mover DMj starts service and continues service, until in step <highlight><bold>95</bold></highlight> the service time has expired. Once the service time has expired, execution continues to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, in step <highlight><bold>101</bold></highlight>, if the movie Mi is not in the data mover DMj local cache, execution continues to step <highlight><bold>102</bold></highlight>. In step <highlight><bold>102</bold></highlight>, if the movie Mi is in the local cache of any other data mover DMk, then execution continues to step <highlight><bold>103</bold></highlight>. In step <highlight><bold>103</bold></highlight>, the data mover DMj requests access to the local cache of the data mover DMk. In step <highlight><bold>104</bold></highlight>, if the request is granted, execution continues to step <highlight><bold>105</bold></highlight>, to start transfer of the movie Mi from the data mover DMk to the data mover DMj. Execution continues from step <highlight><bold>105</bold></highlight> to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In step <highlight><bold>104</bold></highlight>, if the request for access to the local cache of the data mover DMk is not granted, execution continues to step <highlight><bold>106</bold></highlight>. In step <highlight><bold>106</bold></highlight>, execution loops back to step <highlight><bold>103</bold></highlight> if there is another data mover DMk in the data set for the ranking of the movie Mi. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In step <highlight><bold>101</bold></highlight>, if the movie Mi is in the local cache of the data mover DMj, then execution branches to step <highlight><bold>107</bold></highlight>. In step <highlight><bold>107</bold></highlight>, if the data mover DMj has available bandwidth (BW) and processor (CPU) resources to service the movie, then execution continues to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. Otherwise, execution continues to step <highlight><bold>108</bold></highlight>. Execution also continues to step <highlight><bold>108</bold></highlight> from step <highlight><bold>102</bold></highlight> if the movie Mi is not in the local cache of any other data mover, and to step <highlight><bold>108</bold></highlight> from step <highlight><bold>106</bold></highlight> if no other data mover DMk is available for servicing the movie. In step <highlight><bold>108</bold></highlight>, the data mover denies service by informing the control station (CS) that service cannot be provided. In step <highlight><bold>109</bold></highlight>, the control station (CS) warns an operator of the denial of service condition, and updates a model of the availability of service in the service database (DB). Then in step <highlight><bold>110</bold></highlight>, the control station returns a denial of service message to the user. Then in step <highlight><bold>111</bold></highlight>, the control station logs the denial of service event. The log, for example, is periodically inspected to adjust the allocation of data movers to each movie ranking in order to improve overall service, or to determine what additional resources would be needed to improve service. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, in step <highlight><bold>121</bold></highlight>, the data mover DMj informs the control station (CS) of the end of service. In step <highlight><bold>122</bold></highlight>, the control station updates the service database (DB) so that the service to the client is no longer indicated. In step <highlight><bold>123</bold></highlight>, the number of services (ti) for the movie Mi from the primary cache is decremented by one. In step <highlight><bold>124</bold></highlight>, the cache supporting the stream is released or freed. In step <highlight><bold>125</bold></highlight>, the bandwidth of the cache and the bandwidth of the disk are updated to indicate that the bandwidth no longer needed for servicing the stream has become free. In step <highlight><bold>126</bold></highlight>, the data mover (DM) prepares for new service. In step <highlight><bold>127</bold></highlight>, if the number of streams (ti) serviced from the entire movie Mi in the primary cache is not zero, then execution loops back to <cross-reference target="DRAWINGS">FIG. 12</cross-reference> to service another client request. Otherwise, if the number of streams (ti) is zero, then execution branches from step <highlight><bold>127</bold></highlight> to step <highlight><bold>128</bold></highlight> to free the locked primary cache allocated to the entire movie Mi and to update the service data base (DB) to indicate that the movie Mi is no longer in the primary cache. Execution continues from step <highlight><bold>128</bold></highlight> to <cross-reference target="DRAWINGS">FIG. 12</cross-reference> to service another client request. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, in step <highlight><bold>131</bold></highlight>, execution continues to step <highlight><bold>132</bold></highlight> if the entire movie Mi is not locked in the primary cache. In step <highlight><bold>132</bold></highlight>, execution continues to step <highlight><bold>133</bold></highlight> if the data mover DMj is servicing only the movie Mi. In step <highlight><bold>133</bold></highlight>, if the movie Mi is not in the local cache of the data mover DMj, then execution continues to <cross-reference target="DRAWINGS">FIG. 18</cross-reference>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In step <highlight><bold>132</bold></highlight>, if the data mover DMj is serving only the movie Mi, then execution continues to step <highlight><bold>134</bold></highlight>. In step <highlight><bold>134</bold></highlight>, if the movie Mi is not in the local cache of the data mover DMj, then execution continues to <cross-reference target="DRAWINGS">FIG. 18</cross-reference>. Otherwise, execution continues from step <highlight><bold>134</bold></highlight> to step <highlight><bold>135</bold></highlight>. Execution also branches from step <highlight><bold>133</bold></highlight> to step <highlight><bold>135</bold></highlight> when the movie Mi is in the local cache of the data mover DMj. In step <highlight><bold>135</bold></highlight>, preparations are made to service the movie Mi from the local cache of the data mover DMj, and the data mover DMj starts the stream in step <highlight><bold>136</bold></highlight>. Execution continues from step <highlight><bold>136</bold></highlight> to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In step <highlight><bold>131</bold></highlight>, if the entire movie Mi is in locked primary cache, then execution branches to step <highlight><bold>137</bold></highlight>. In step <highlight><bold>137</bold></highlight>, the number of streams (ti) of the movie Mi serviced from the primary cache is incremented by one. Execution continues from step <highlight><bold>137</bold></highlight> to step <highlight><bold>136</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, in step <highlight><bold>141</bold></highlight>, the data mover DMj moves the movie Mi from disk to primary cache by sending a pre-fetch command to the cached disk storage system. In step <highlight><bold>142</bold></highlight>, the number of streams (ti) for the movie Mi is set to one. In step <highlight><bold>143</bold></highlight>, the data mover DMj sends data to the control station (CS) for updating the service data base (DB) to indicate that the primary cache has been locked for storage of the movie Mi in the primary cache. In step <highlight><bold>144</bold></highlight>, the data mover DMj opens the file on the primary cache, to begin reading movie data from the primary cache. In step <highlight><bold>145</bold></highlight>, execution branches to step <highlight><bold>146</bold></highlight> if the movie Mi is the first service of the data mover DMj. In this case, there will be sufficient free local cache memory in the data mover DMj to store the entire movie Mi. In step <highlight><bold>146</bold></highlight>, the data mover DMj starts caching the movie Mi in its local cache. Execution continues from step <highlight><bold>146</bold></highlight> to step <highlight><bold>147</bold></highlight>. Execution also continues to step <highlight><bold>147</bold></highlight> from step <highlight><bold>145</bold></highlight> when Mi is not the first service of the data mover DMj. In step <highlight><bold>147</bold></highlight>, the data mover DMj starts service of a video stream from the movie Mi, and execution continues to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>, in step <highlight><bold>151</bold></highlight>, if cache bandwidth (BW) is not available, execution branches to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. If cache bandwidth (BW) is available, execution continues to step <highlight><bold>152</bold></highlight>. In step <highlight><bold>152</bold></highlight>, the service data base (DB) is read to obtain the number of services or streams ti of the movies Mi in the primary cache and the respective rankings of these movies in cache. From these rankings, in step <highlight><bold>153</bold></highlight>, the ranking of the lowest ranking (i.e., the least popular) movie is found that is already in the primary cache. In step <highlight><bold>154</bold></highlight>, the ranking of the requested movie Mi is obtained, for example, from a fixed one of the data movers assigned to service the movie. In step <highlight><bold>155</bold></highlight>, if the ranking of the requested movie is not greater than the ranking of the lowest ranking movie in the primary cache (i.e., the requested movie is less popular than the least popular movie in the primary cache), then execution branches to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Otherwise, execution continues to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, in step <highlight><bold>161</bold></highlight>, if the number of streams (tk) for the lowest ranking (i.e., least popular) movie in the primary cache is greater than a threshold, then execution continues to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. In this case, it would be too disruptive to move the origination of the streams from an entire movie in cache to the movie on disk. Otherwise, execution continues from step <highlight><bold>161</bold></highlight> to step <highlight><bold>162</bold></highlight>. In step <highlight><bold>162</bold></highlight>, execution branches to <cross-reference target="DRAWINGS">FIG. 14</cross-reference> if there is not enough bandwidth to remove the movie from locked primary cache and continue access of the movie from disk. This is done by comparing the sum of the bit rates for all of the streams from the lowest ranking (i.e., least popular) movie in the primary cache to the difference between the free disk bandwidth less the bit rate for the new stream. Otherwise, if there is enough bandwidth, execution continues to step <highlight><bold>163</bold></highlight>. In step <highlight><bold>163</bold></highlight>, the control station (CS) opens the file from disk for the movie Mk that was in the locked primary cache and is to be accessed from disk. In step <highlight><bold>164</bold></highlight>, the control station (CS) sends a pointer to the data movers in the data mover set (DMs) servicing the movie Mk. In step <highlight><bold>165</bold></highlight>, the movie Mk is removed from the primary cache. In step <highlight><bold>166</bold></highlight>, the movie Mi is moved from disk to cache. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> In view of the above, it should be apparent that the video file server provides efficient management of access to movies ranging from very popular movies to unpopular movies by physically configuring sets of data movers for associated movie rankings, by reserving data mover local cache resources for the most popular movies, reserving a certain number of streams for popular movies, by negotiating with a client for selection of available movie titles during peak demand when resources are not available to start any freely-selected movie in disk storage, and by managing disk bandwidth and primary and local cache memory and bandwidth resources for popular and unpopular movies. The assignment of resources to movie rankings may remain the same while the rankings of the movies are adjusted, for example, during off-peak hours. A movie locked in primary cache and providing a source for servicing a number of video streams may be demoted from primary cache to disk in favor of servicing one or more streams of a higher-ranking movie (as described above with reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>). </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A video file server for providing clients with video-on-demand access to movies, the video file server comprising: 
<claim-text>a cached disk storage system including a primary cache and disk storage for storing the movies; and </claim-text>
<claim-text>a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network, each of the data mover computers having a local cache; </claim-text>
<claim-text>wherein the movies are ranked with respect to popularity, and a respective set of the data movers are pre-assigned for servicing video streams for each movie ranking. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data movers in the respective sets of data movers are configured differently for providing more network interface resources for very popular movies and for providing more local cache memory resources for less popular movies. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein for very popular movies, the very popular movies are retained in their entirety in local cache of the data movers assigned to service the very popular movies. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the sets of data movers include a set consisting of more than one data mover for servicing one very popular movie, a set consisting of one data mover for servicing only one movie, and a set consisting of one data mover for servicing a plurality of the movies. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein a series of at least some of the data movers include direct links for transfer of movie data from a data mover set servicing one movie ranking to a data mover set servicing a next higher movie ranking and for transfer of movie data from the data mover set servicing the one movie ranking to a data mover set servicing a next lower movie ranking. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein data mover resources for a certain number of video streams from the data movers to the clients are reserved for each of a multiplicity of the movies. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the video file server is programmed for locking in the primary cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the primary cache and there is insufficient free cache memory for servicing the more popular movie from the primary cache, transferring the servicing of a less popular movie from the primary cache to disk storage in order to free cache memory for servicing the more popular movie from the primary cache. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the video file server is programmed for freeing primary cache memory by transferring the servicing of a least popular movie in the primary cache from the primary cache to the disk storage so long as no more than a certain number of video streams are being serviced concurrently from the least popular movie in the primary cache. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the video file server is programmed for negotiating with a client for selection of an available movie during peak demand when resources are not available to select freely any movie in the disk storage for which a video stream can be started. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A video file server for providing clients with video-on-demand access to movies, the video file server comprising: 
<claim-text>a cached disk storage system including a cache and disk storage for storing the movies; and </claim-text>
<claim-text>a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network; </claim-text>
<claim-text>wherein the video file server is programmed for locking in the cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the cache and there is insufficient free cache memory for servicing the more popular movie from the cache, transferring the servicing of a less popular movie from the cache to disk storage in order to free cache memory for servicing the more popular movie from the cache. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the video file server is programmed for freeing locked cache memory by transferring the servicing of the least popular movie in the cache from the cache to the disk storage so long as no more than a certain number of video streams are being concurrently serviced from the least popular movie in the cache. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein each of the data mover computers has a local cache, the movies are ranked with respect to popularity, and a respective set of the data movers are pre-assigned for servicing video streams for each movie ranking, and the data movers in the respective sets of data movers are configured differently for providing more network interface resources for very popular movies and for providing more local cache memory resources for less popular movies. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein a series of at least some of the data movers include direct dedicated links for transfer of movie data from a data mover set servicing one movie ranking to a data mover set servicing a next higher movie ranking and for transfer of movie data from the data mover set servicing the one movie ranking to the data mover set servicing a next lower movie ranking. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The video file server as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein data mover resources for a certain number of video streams from the data movers to the clients are reserved for each of a multiplicity of the movies. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method of operating a video file server for providing clients with video-on-demand access to movies, the video file server having a cached disk storage system including a primary cache and disk storage containing the movies, and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a data network, each of the data mover computers having a local cache, wherein the method includes: 
<claim-text>ranking the movies with respect to popularity, and assigning a respective set of the data movers to each movie ranking, and </claim-text>
<claim-text>servicing video streams for each movie ranking with the respective set of data movers assigned for servicing said video streams for said each movie ranking. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes configuring differently the data movers in the respective sets of data movers in order to provide more network interface resources for very popular movies and for providing more local cache memory resources for less popular movies. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes, for very popular movies, retaining the very popular movies in their entirety in the local cache of the data movers assigned to service the very popular movies. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes servicing a most popular movie with an assigned data mover set consisting of more than one data mover, servicing only one movie with an assigned data mover set consisting of one data mover, and servicing a plurality of movies with an assigned data mover set consisting of one data mover. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein a series of at least some of the data movers are linked by direct dedicated data links and the method includes transferring movie data from a data mover set servicing one movie ranking to a data mover set servicing a next higher movie ranking and transferring movie data from a data mover set servicing the one movie ranking to a data mover set servicing a next lower movie ranking. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes reserving data mover resources for a respective number of video streams from the data movers to the clients for each of a multiplicity of the movies. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes locking in the primary cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the primary cache and there is insufficient free cache memory for servicing the more popular movie from the primary cache, transferring the servicing of a less popular movie from the primary cache to the disk storage in order to free primary cache memory for servicing the more popular movie from the primary cache. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes freeing primary cache memory by transferring the servicing of a least popular movie in the primary cache from the primary cache to the disk storage so long as no more than a certain number of video streams are being concurrently serviced from the least popular movie in the primary cache. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, which includes the video file server negotiating with a client for selection of an available movie during peak demand when resources are not available to select freely any movie in the disk storage for which a video stream can be started. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method of operating a video file server for providing clients with video-on-demand access to movies, the video file server having a cached disk storage system including a cache and disk storage containing the movies, and a multiplicity of data mover computers coupled to the cached disk storage system for streaming video data from the cached disk storage system to clients in a client data network, the method comprising: 
<claim-text>locking in the cache a plurality of entire movies, and when there is a need for servicing a more popular movie from the cache and there is insufficient free cache memory for servicing the more popular movie from the cache, transferring the servicing of a less popular movie from the cache to the disk storage in order to free cache memory for servicing the more popular movie from the cache. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, which includes the video file server freeing locked cache memory by transferring the servicing of a least popular movie in the cache from the cache to the disk storage so long as no more than a certain number of video streams are being concurrently serviced from the least popular movie in the cache. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein each of the data mover computers has a local cache, the method includes ranking the movies with respect to popularity, assigning a respective set of the data movers for servicing video streams for each movie ranking, and configuring the data movers in the respective sets of data movers differently for providing more network interface resources for very popular movies and for providing more local cache memory resources for less popular movies.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005457A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005457A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005457A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005457A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005457A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005457A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005457A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005457A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005457A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005457A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005457A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005457A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005457A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005457A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005457A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005457A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005457A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
