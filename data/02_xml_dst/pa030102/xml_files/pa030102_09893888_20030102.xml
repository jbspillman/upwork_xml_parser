<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002497A1-20030102-D00000.TIF SYSTEM "US20030002497A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002497A1-20030102-D00001.TIF SYSTEM "US20030002497A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002497A1-20030102-D00002.TIF SYSTEM "US20030002497A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002497A1-20030102-D00003.TIF SYSTEM "US20030002497A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002497A1-20030102-D00004.TIF SYSTEM "US20030002497A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002497A1-20030102-D00005.TIF SYSTEM "US20030002497A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002497</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893888</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L012/66</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>389000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>370</class>
<subclass>352000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus to reduce packet traffic across an I/O bus</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Anil</given-name>
<family-name>Vasudevan</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>ANTONELLI TERRY STOUT AND KRAUS</name-1>
<name-2></name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and apparatus are provided for transferring data packets between a server and a client. This may involve receiving a data packet from a stack in the server, sending an acknowledgment packet to the stack and transmitting the data packet across an I/O bus in the server. The acknowledgment packet may be sent to the stack without sending the acknowledgment packet across the I/O bus. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is directed to a computer network. More particularly, the present invention is directed to a method and apparatus for reducing packet TCP/IP traffic across an I/O bus. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Congestion control in modern networks is increasingly becoming an important issue. The explosive growth of Internet applications such as the World Wide Web (www) has pushed current technology to its limit, and it is clear that faster transport and improved congestion control mechanisms are required. As a result, many equipment vendors and service providers are turning to advanced networking technology to provide adequate solutions to the complex quality of service (QoS) management issues involved . Examples include asynchronous transfer mode (ATM) networks and emerging Internet Protocol (IP) network services. Nevertheless, there is still the need to support a host of existing legacy IP protocols within these newer paradigms. In particular, the ubiquitous Transmission Control Protocol (TCP) transport-layer protocol has long been the workhorse transport protocol in IP networks, widely used by web-browsers, file/email transfer services, etc. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Transmission Control Protocol is part of the TCP/IP protocol family that has gained the position as one of the world&apos;s most important data communication protocols with the success of the Internet TCP provides a reliable data connection between devices using TCP/IP protocols. TCP/IP networks are nowadays probably the most important of all networks, and operate on top of several physical networks, such as ATM networks. TCP operates on top of IP that is used for packing the data to data packets, called datagrams, and for transmitting across the networks. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The Internet Protocol is a network layer protocol that routes data across the Internet. The Internet Protocol was designed to accommodate the use of host and routers built by different vendors, encompass a growing variety of growing network types, enable the network to grow without interrupting servers, and support a higher layer of session and message-oriented services. The IP network layer allows integration of Local Area Network (LAN) islands. However, IP doesn&apos;t contain any flow control or retransmission mechanisms. As such, TCP is typically used on top of IP. TCP also uses acknowledgment packets for detecting lost data packets. Each of these acknowledgment packets needs to be processed which slows down the processing unit and I/O bus of the host server.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The foregoing and a better understanding of the present invention will become apparent from the following detailed description of example embodiments and the claims when read in connection with the accompanying drawings, all forming a part of the disclosure of this invention. While the foregoing and following written and illustrated disclosure focuses on disclosing example embodiments of the invention, it should be clearly understood that the same is by way of illustration and example only and that the invention is not limited thereto. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The following represents brief descriptions of the drawings in which like reference numerals represent like elements and wherein: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system platform; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a network system wherein a receiver provides acknowledgment packets to a source as well as receives data from the source; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an arrangement for sending data and receiving acknowledgment packets; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an arrangement for sending data and receiving acknowledgment packets according to an example embodiment of the present invention; and </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a method according to an example embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In the following detailed description, like reference numerals and characters may be used to designate identical, corresponding or similar components in differing figure drawings. Embodiments and arrangements may be shown in block diagram form in order to avoid obscuring the invention and also in view of the fact that specifics with respect to implementation of such block diagram arrangements may be highly dependent upon the platform within which the present invention is to be implemented. That is, such specifics should be well within the knowledge of one skilled in the art. Where specific details (e.g., circuits, flowcharts) are set forth in order to describe example embodiments of the invention, it should be apparent to one skilled in the art that the invention can be practiced without, or with variation of, these specific details. Finally, it should be apparent that differing combinations of hard-wired circuitry and software instructions may be used to implement embodiments of the present invention. That is, the present invention is not limited to any specific combination of hardware and software. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system platform according to an example embodiment of the present invention. Other embodiments, mechanisms and platforms are also within the scope of the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the computer system <highlight><bold>100</bold></highlight> may include a processor subsystem <highlight><bold>110</bold></highlight>, a memory subsystem <highlight><bold>120</bold></highlight> coupled to the processor subsystem <highlight><bold>110</bold></highlight> by a front side bus <highlight><bold>10</bold></highlight>, graphics <highlight><bold>130</bold></highlight> coupled to the memory subsystem <highlight><bold>120</bold></highlight> by a graphics bus <highlight><bold>30</bold></highlight>, one or more host chipsets <highlight><bold>140</bold></highlight>, <highlight><bold>150</bold></highlight> coupled to the memory subsystem <highlight><bold>120</bold></highlight> by hub links <highlight><bold>40</bold></highlight> and <highlight><bold>50</bold></highlight> for providing an interface with peripheral buses such as Peripheral Component Interconnect (PCI or PCI-X) buses <highlight><bold>60</bold></highlight> and <highlight><bold>70</bold></highlight> of different bandwidth and operating speeds, a flash memory <highlight><bold>160</bold></highlight>, and a super <highlight><bold>110</bold></highlight> <highlight><bold>170</bold></highlight> coupled to the chipset <highlight><bold>150</bold></highlight> by a low pin count (LPC) bus for providing and interfacing with a plurality of I/O devices <highlight><bold>180</bold></highlight> including, for example, a keyboard controller for controlling operations of an alphanumeric keyboard, a cursor control device such as a mouse, track ball, touch pad, joystck, etc., a mass storage device such as magnetic tapes, hard drives (HDD), and floppy disk drives (FDD), and serial and parallel ports to printers, scanners, and display devices. A plurality of I/O devices <highlight><bold>190</bold></highlight> may be coupled to the system by the PCI or PCI-X bus <highlight><bold>60</bold></highlight>. The computer system <highlight><bold>100</bold></highlight> may be configured differently or employ different components than those shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The processor subsystem <highlight><bold>110</bold></highlight> may include a plurality of host processors and a cache subsystem <highlight><bold>112</bold></highlight>. The memory subsystem <highlight><bold>120</bold></highlight> may include a memory controller hub (MCH) <highlight><bold>122</bold></highlight> coupled to the host processors by the front side bus <highlight><bold>10</bold></highlight> (i.e., host or processor bus) and at least one memory element <highlight><bold>124</bold></highlight> coupled to the MCH <highlight><bold>122</bold></highlight> by a memory bus <highlight><bold>20</bold></highlight>. The memory element <highlight><bold>124</bold></highlight> may be a dynamic random-access-memory (DRAM), or may be a read-only-memory (ROM), a video random-access-memory (VRAM) and the like. The memory element <highlight><bold>124</bold></highlight> may store informaton and instructions for use by the host processors. The graphics <highlight><bold>130</bold></highlight> may be coupled to the main controller hub <highlight><bold>122</bold></highlight> of the memory subsystem <highlight><bold>120</bold></highlight> by the graphic bus <highlight><bold>30</bold></highlight>, and may include, for example, a graphics controller, a local memory and a display device (e.g., cathode ray tube, liquid crystal display, flat panel display, etc.). </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The host chipsets <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight> may be Peripheral Component Interconnect (PCI or PCI-X) bridges (e.g., host, PCI-PCI, or standard expansion bridges) in the form of PCI chips such as, for example, the PIIX4 chip and PIIX6 chip manufactured by Intel Corporation. In particular, the chipsets <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight> may correspond to a Peripheral Component Interconnect (PCI or PCI-X) 64-bit hub (P64H or P64H2 bridge) and an inpuVoutput controller hub (ICH). Arrangements are also applicable to a P64H2 bridge (or hub) although the following arrangements may be described with respect to the P64H bridge (or hub). Further, although not shown, the chipset <highlight><bold>140</bold></highlight> may be coupled to more than one bus <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The P64H bridge (chipset <highlight><bold>140</bold></highlight>) and the ICH (chipset <highlight><bold>150</bold></highlight>) may be coupled to the MCH <highlight><bold>122</bold></highlight> of the memory subsystem <highlight><bold>120</bold></highlight>, respectively, by 16 bit and 8 bit hub links <highlight><bold>40</bold></highlight> and <highlight><bold>50</bold></highlight>, for example, and may operate as an interface between the front side bus <highlight><bold>10</bold></highlight> and the peripheral buses <highlight><bold>60</bold></highlight> and <highlight><bold>70</bold></highlight> such as PCI buses of different bandwidths and operating speeds. The PCI buses may be high performance 32 or 64 bit synchronous buses with automatic configurability and multiplexed address, control and data lines as described in the latest version of &ldquo;PCI Local Bus Specification, Revision 2.2&rdquo; set forth by the PCI Special Interest Group (SIG) on Dec. 18, 1998 for add-on arrangements (e.g., expansion cards) with new video, networking, or disk capabilities or as described with respect to the latest version of &ldquo;PCI-X Addendum to the PCI Local Bus Specification, revision 1.0a&rdquo; set forth by the PCI Special Interest Group on Jul. 24, 2000. A PCI bus of 64-bits and 66 MHz may connect to the P64H bridge (chipset <highlight><bold>140</bold></highlight>) or a PCI bus of 32-bits and 33 MHz may connect to the ICH (chipset <highlight><bold>150</bold></highlight>). Other types of bus architectures such as Industry Standard Architecture (ISA), Expanded Industry Standard Architecture (EISA) and PCI-X buses may also be utilized. These buses may operate at different frequencies such as 33 MHz, 66 MHz, 100 MHz and 133 MHz, for example. Other frequencies are also within the scope of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a TCP network system and how data may be exchanged. More specifically, <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a TCP source <highlight><bold>210</bold></highlight> (such as the computer system platform shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) that transmits data <highlight><bold>240</bold></highlight> to a TCP receiver <highlight><bold>220</bold></highlight> across a network. The TCP receiver <highlight><bold>220</bold></highlight> may provide an acknowledgment packet <highlight><bold>230</bold></highlight> to the TCP source <highlight><bold>210</bold></highlight> after receiving the data <highlight><bold>240</bold></highlight>. Although not shown, the TCP source <highlight><bold>210</bold></highlight> may also be exchanging data (and acknowledgment packets) with other TCP receivers (not shown). </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates how the TCP source (such as the TCP source <highlight><bold>210</bold></highlight>) may handle the respective data and acknowledgment packets according to an example arrangement. Other arrangements are also possible. More specifically, <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a computer system <highlight><bold>300</bold></highlight> (similar to the computer architecture shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) that includes an operating system having a network application mechanism <highlight><bold>302</bold></highlight> and a TCP/IP stack mechanism <highlight><bold>304</bold></highlight>. A network driver mechanism <highlight><bold>306</bold></highlight> may also be provided to communicate with an I/O bus <highlight><bold>310</bold></highlight> such as a PCI bus or a PCI-X bus. The TCP source may also include a network hardware apparatus such as a network interface card (NIC) <highlight><bold>320</bold></highlight>. The network driver mechanism <highlight><bold>306</bold></highlight> and the NIC <highlight><bold>320</bold></highlight> may be separately coupled to the I/O bus <highlight><bold>310</bold></highlight> and the NIC <highlight><bold>320</bold></highlight> so as to communicate data. The NIC <highlight><bold>320</bold></highlight> may be further coupled to a network <highlight><bold>500</bold></highlight> so as to provide an interface between the computer system <highlight><bold>300</bold></highlight> and the network <highlight><bold>500</bold></highlight>. For illustration purposes, <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a remote computer system <highlight><bold>502</bold></highlight> (similar to the TCP receiver <highlight><bold>220</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) coupled to the network <highlight><bold>500</bold></highlight>. The remote computer system <highlight><bold>502</bold></highlight> may include architecture similar to the computer platform shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Other computer systems may be similarly coupled to the network <highlight><bold>500</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 3</cross-reference> arrangement will now be described by showing operations labeled by arrows <highlight><bold>402</bold></highlight>-<highlight><bold>422</bold></highlight>. The network application mechanism <highlight><bold>302</bold></highlight> may send data using network programming application programming interface (APIs). The application data may be sent from the network application mechanism <highlight><bold>302</bold></highlight> to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>402</bold></highlight>). The TCP/IP stack mechanism <highlight><bold>304</bold></highlight> may segment the data into smaller packets and pass the smaller packets to the network driver mechanism <highlight><bold>306</bold></highlight> (arrow <highlight><bold>404</bold></highlight>). Once the TCP/IP stack mechanism <highlight><bold>306</bold></highlight> has sent data (up to a particular window size), then it may wait for an acknowledgment packet (such as the acknowledgment packet <highlight><bold>230</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) regarding that specific data before sending a next batch of data packets to the same remote system (i.e., on a particular connection). The data may be transmitted across the I/O bus <highlight><bold>310</bold></highlight> (arrow <highlight><bold>406</bold></highlight> and <highlight><bold>408</bold></highlight>), and through the NIC <highlight><bold>320</bold></highlight> to the network <highlight><bold>500</bold></highlight> (arrow <highlight><bold>410</bold></highlight>). In this example, the network <highlight><bold>500</bold></highlight> may appropriately route the data to the remote computer system <highlight><bold>502</bold></highlight> (arrow <highlight><bold>412</bold></highlight>). </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Upon receiving the data, the remote computer system <highlight><bold>502</bold></highlight> may thereafter generate an acknowledgment packet (such as the TCP acknowledgment packet <highlight><bold>230</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) and transmit that packet back though the network <highlight><bold>500</bold></highlight> (arrow <highlight><bold>414</bold></highlight>) to the NIC <highlight><bold>320</bold></highlight> (arrow <highlight><bold>416</bold></highlight>). In this arrangement, the NIC <highlight><bold>320</bold></highlight> may thereafter generate an interrupt to the processing unit. The interrupt may cause the processing unit to transfer control to the network driver mechanism <highlight><bold>306</bold></highlight>, which in turn, may read data from the NIC <highlight><bold>320</bold></highlight> (arrow <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight>) and pass it to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>422</bold></highlight>). The acknowledgment packets may not be forwarded to the network application mechanism <highlight><bold>302</bold></highlight>; rather, the network application mechanism <highlight><bold>302</bold></highlight> may only send and receive application specific data. Once the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> receives the acknowledgment packets, the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> may continue to send additional application data on that connection to the remote computer system <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> It is desirable to reduce the I/O bus overhead for transmission of data packets up to, or even more than, the window size permitted by TCP/IP. That is, with the increasing speed of networking devices, the required processing unit bandwidth to handle the traffic at these speeds is scarce. For example, sustaining a near gigabyte throughput on a server may put the fastest processing unit to a near maximum utilization in addition to consuming a significant portion of the I/O bandwidth that is shared with other I/O devices. It may therefore be desirable to improve upon the overall system performance by reducing the number of interrupts and placing some of the burden of receiving the TCP acknowledgment packets on a network interface card with additional functionality. That is, for a heavily loaded host server, the number of TCP acknowledgment packets received by the host sever (such as the computer system <highlight><bold>300</bold></highlight>) may be considerable. The host server may have to wait and process TCP acknowledgment packets from different clients (i.e., different remote computer systems) that the host server is servicing. These acknowledgment packets may be small packets that need to be processed by the host server. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Accordingly, embodiments of the present invention may reduce the I/O bus overhead for transmission of data packets and acknowledgment packets between a server (i.e., a local computer system) and a client (i.e., a remote computer system). <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates how the TCP source (such as the TCP source <highlight><bold>210</bold></highlight>) may handle the respective data and acknowledgment packets according to an example embodiment of the present invention. Other embodiments and configurations are also within the scope of the present invention. More specifically, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a computer system <highlight><bold>600</bold></highlight> that includes an operating system having the network application mechanism <highlight><bold>302</bold></highlight> and the TCP/IP stack mechanism <highlight><bold>304</bold></highlight>. The <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment also includes a NIC <highlight><bold>330</bold></highlight> that includes additional functionality (than the NIC <highlight><bold>320</bold></highlight>) to perform embodiments of the present invention. These additional functions may include storing data, monitoring real acknowledgment packets, generating error indications and negotiating with the network driver mechanism. The NIC <highlight><bold>330</bold></highlight> may therefore include additional logic circuits (e.g. a processor or logic gates) to perform these functions in addition to memory. The <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment further includes a network driver mechanism <highlight><bold>340</bold></highlight> with additional functionality such as generating fake acknowledgment packets and negotiating with the NIC <highlight><bold>330</bold></highlight> as will be described below. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment will now be described by showing operations labeled by arrows <highlight><bold>452</bold></highlight>-<highlight><bold>464</bold></highlight>. The order of operations and the numbering of the arrows is merely exemplary of this example as other orders and/or operations are also within the scope of the present invention. Application data may be sent from network application mechanism <highlight><bold>302</bold></highlight> to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>452</bold></highlight>). The TCP/IP stack mechanism <highlight><bold>304</bold></highlight> may segment the data into smaller packets and pass the smaller packets to the network driver mechanism <highlight><bold>340</bold></highlight> (arrow <highlight><bold>454</bold></highlight>). The network driver mechanism <highlight><bold>340</bold></highlight> may then send an acknowledgment packet (hereafter called a fake acknowledgment packet) back to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>456</bold></highlight>). The data packet may be transmitted across the I/O bus <highlight><bold>310</bold></highlight> (arrows <highlight><bold>458</bold></highlight> and <highlight><bold>460</bold></highlight>), and through the NIC <highlight><bold>330</bold></highlight> to the network <highlight><bold>500</bold></highlight> (arrow <highlight><bold>462</bold></highlight>). In this example, the network <highlight><bold>500</bold></highlight> may appropriately route the data to the remote computer system <highlight><bold>502</bold></highlight> (arrow <highlight><bold>464</bold></highlight>). </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The acknowledgment packet (i.e., the fake acknowledgment packet) may be sent from the network driver mechanism <highlight><bold>340</bold></highlight> to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>456</bold></highlight>) without sending the acknowledgment packet across the I/O bus <highlight><bold>310</bold></highlight>. This may reduce the overhead of the I/O bus <highlight><bold>310</bold></highlight> and may therefore help speed up other operations. Information regarding the transmitted data packets may be stored in the NIC <highlight><bold>330</bold></highlight>. The NIC <highlight><bold>330</bold></highlight> may monitor acknowledgment packets regarding the data packets from the remote computer system <highlight><bold>502</bold></highlight> so as to confirm that the remote computer system <highlight><bold>502</bold></highlight> received the data packets. If an acknowledgment packet regarding a data packet sent to the remote computer system <highlight><bold>502</bold></highlight> is not received at the NIC <highlight><bold>330</bold></highlight> within a predetermined amount of time, then the NIC <highlight><bold>330</bold></highlight> may determine that a error has occurred and may transmit an indication of this condition across the I/O bus <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Stated differently, when the network driver mechanism <highlight><bold>340</bold></highlight> receives a data packet from the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>454</bold></highlight>), the network driver mechanism <highlight><bold>340</bold></highlight> may generate a TCP acknowledgment packet and communicate that acknowledgment packet to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> (arrow <highlight><bold>456</bold></highlight>). The acknowledgment packet does not cross the I/O bus <highlight><bold>310</bold></highlight> but rather is generated by the network driver mechanism <highlight><bold>340</bold></highlight>. The network driver mechanism <highlight><bold>340</bold></highlight> may pass the data packet to the network hardware such as the NIC <highlight><bold>330</bold></highlight> (arrows <highlight><bold>458</bold></highlight> and <highlight><bold>460</bold></highlight>). The network driver mechanism <highlight><bold>340</bold></highlight> may pass a data structure that contains connection information with the number of acknowledgment packets that is generated (i.e., the current state of the window size that the TCP stack mechanism <highlight><bold>304</bold></highlight> believes to be true). The NIC <highlight><bold>330</bold></highlight> may store this information and once an acknowledgment packet is received from the client (such as from the remote computer system <highlight><bold>502</bold></highlight>), the NIC <highlight><bold>330</bold></highlight> may mark it is as received and continue processing the next batch of packets. If the NIC <highlight><bold>330</bold></highlight> does not receive an acknowledgment packet from the remote computer system <highlight><bold>502</bold></highlight> within the predetermined amount of time, then the NIC <highlight><bold>330</bold></highlight> may generate an error condition. For the sake of illustration, this may be called a negative acknowledgment packet and may be transmitted back across the I/O bus <highlight><bold>310</bold></highlight> to the network driver mechanism <highlight><bold>340</bold></highlight>. Once the network driver mechanism <highlight><bold>340</bold></highlight> receives a negative acknowledgment packet, the network driver mechanism <highlight><bold>340</bold></highlight> may (depending on the severity): (a) stop sending acknowledgment packets to the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> thereby putting the TCP/IP stack mechanism <highlight><bold>304</bold></highlight> in a block state; or (b) reset the connection with the remote computer system <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> By utilizing embodiments of the present invention, the acknowledgment packets in the network driver mechanism <highlight><bold>340</bold></highlight> may not be transferred across the I/O bus <highlight><bold>310</bold></highlight> which thereby reduces the number of interrupts to the processing unit. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Accordingly, embodiments of the present invention improve the system performance and throughput by reducing the number of interrupts that are generated and reduce the data packet transfers across the I/O bus <highlight><bold>310</bold></highlight>. This may lead to less utilization of the processing unit and efficient use of the I/O bus <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart of a method according to an example embodiment of the present invention. Other embodiments, orders of operation and different types of operations are also within the scope of the present invention. That is, <cross-reference target="DRAWINGS">FIG. 5</cross-reference> merely represents one example method. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, in block <highlight><bold>502</bold></highlight>, data may be sent to the TCP/IP stack. This data may be segmented into smaller packets in block <highlight><bold>504</bold></highlight>. The data may then passed to a network driver mechanism in block <highlight><bold>506</bold></highlight>. In accordance with embodiments of the present invention, the network driver mechanism may generate a TCP acknowledgment packet (i.e., a fake acknowledgment packet) and send it to the TCP/IP stack in block <highlight><bold>508</bold></highlight>. Data may be transmitted to a network interface card in block <highlight><bold>510</bold></highlight> which thereby stores information regarding the data in block <highlight><bold>512</bold></highlight>. The data may be transmitted across the network from the network interface card to a client in block <highlight><bold>504</bold></highlight>. In accordance with embodiments of the present invention, the network interface card may monitor return acknowledgment packets from the client in block <highlight><bold>506</bold></highlight>. This may involve waiting a predetermined amount of time (block <highlight><bold>518</bold></highlight>). During this time, the network interface card may store the packet that was unacknowledged in addition to any that were passed down to it from the network driver, i.e., packets that are queued. At such times, the network driver may stop sending acknowledgment packets to the TCP/IP stack, in order to impose flow control. The network interface card may continue to retransmit these packets in conformance with TCP/IP retransmission rules until such time it deems the connection broken. Storage of packets is partitioned between the network driver and the network interface card such that when the network interface card&apos;s internal buffers are full, the network driver performs the storage function. If a predetermined amount of time has elapsed, then an indication of an error condition may be transmitted from the network interface card to the driver mechanism in block <highlight><bold>520</bold></highlight>. Corrective action may thereafter be performed by the host server (block <highlight><bold>522</bold></highlight>). </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In summary, embodiments of the present invention provide a method of transferring data packets between a host and a client. This may involve receiving a data packet from a stack in the host and sending an acknowledgment packet to the stack. The data packet may be transmitted across an I/O bus. Accordingly, the acknowledgment packet may be sent to the stack without sending the acknowledgment packet across the I/O bus. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Any reference in this description to &ldquo;one embodiment&rdquo;, &ldquo;an embodiment, example embodiment&rdquo;, etc., means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of such phrases in various places in the specification are not necessarily all referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with any embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other ones of the embodiments. Furthermore, for ease of understanding, certain method procedures may have been delineated as separate procedures; however, these separately delineated procedures should not be construed as necessarily order dependent in their performance. That is, some procedures may be able to be performed in an alternative ordering, simultaneously, etc. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Further, embodiments of the present invention or portions of embodiments of the present invention may be practiced as a software invention, implemented in the form of a machine-readable medium having stored thereon at least one sequence of instructions that, when executed, causes a machine to effect the invention. With respect to the term &ldquo;machine&rdquo;, such term should be construed broadly as encompassing all types of machines, e.g., a non-exhaustive listing including: computing machines, non-computing machines, communication machines, etc. Similarly, which respect to the term &ldquo;machine-readable medium&rdquo;, such term should be construed as encompassing a broad spectrum of mediums, e.g., a non-exhaustive listing including: magnetic medium (floppy disks, hard disks, magnetic tape, etc.), optical medium (CD-ROMs, DVD-ROMs, etc), etc. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> A machine-readable medium includes any mechanism that provides (i.e., stores and/or transmits) information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Although the present invention has been described with reference to a number of illustrative embodiments thereof, it should be understood that numerous other modifications and embodiments can be devised by those skilled in the art that will fall within the spirit and scope of the principles of this invention. More particularly, reasonable variations and modifications are possible in the component parts and/or arrangements of the subject combination arrangement within the scope of the foregoing disclosure, the drawings and the appended claims without departing from the spirit of the invention. In addition to variations and modifications in the component parts and/or arrangements, alternative uses will also be apparent to those skilled in the art.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of transferring data packets between a server environment and a client, said method comprising: 
<claim-text>receiving a data packet from a stack in said server environment; </claim-text>
<claim-text>sending an acknowledgment packet to said stack; and </claim-text>
<claim-text>transmitting said data packet across an I/O bus in said server environment, wherein said acknowledgment packet is sent to said stack without sending said acknowledgment packet across said I/O bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said data packets comprise TCP/IP data packets. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising storing information regarding said transmitted data packet in a network interface card. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, further comprising transmitting said data packet across a network from said server environment to said client. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising said network interface card monitoring acknowledgment packets regarding said data packet from said client. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising recognizing an error condition if said acknowledgment packet regarding said transmitted data packet is not receiving from said client. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising transmitting an indication of said error condition across said I/O bus. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method of transferring data packets between a server and a client, said method comprising: 
<claim-text>acknowledging a data packet based on a driver mechanism of said server receiving said data packet; and </claim-text>
<claim-text>transmitting said data packet across an I/O bus to a component of said server; and </claim-text>
<claim-text>storing information regarding said data packet at said component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising transmitting said data packet across a network from said server to said client. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising said component monitoring an acknowledgment packet regarding said data packet from said client. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising recognizing an error condition if said component does not receive said acknowledgment packet regarding said data packet from said client. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising transmitting an indication of said error condition across said I/O bus. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said data packet is acknowledged without sending an acknowledgment packet across said I/O bus. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said data packet comprise a TCP/IP data packet. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A server environment comprising: 
<claim-text>an operating system having a stack mechanism and a driver mechanism; </claim-text>
<claim-text>a network interface card; and </claim-text>
<claim-text>a I/O bus coupled between said operating system and said network interface card, wherein said driver mechanism to transmit a data packet across said I/O bus to said network interface card and said driver mechanism to send an acknowledgment packet regarding said data packet to said stack mechanism without transmitting said acknowledgment packet across said I/O bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said data packet comprises a TCP/IP data packet. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said network interface card to store information regarding said data packet transmitted across said I/O bus from said driver mechanism. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said network interface card to transmit said data packet across a network to a client. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said network interface card to monitor an acknowledgment packet regarding said data packet from said client. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said network interface card to generate an error condition if said acknowledgment packet regarding said data packet is not received from said client. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The server environment of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said network interface card to transmit said error condition across said I/O bus to said driver mechanism. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A network interface card comprising: 
<claim-text>a mechanism to communicate across an I/O bus so as to receive data packets; </claim-text>
<claim-text>a memory device to store information regarding said received data packets; and </claim-text>
<claim-text>a mechanism to communicate across a network so as to transmit said received data packets to a remote system and to receive an acknowledgment packet from said remote system across said network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The network interface card of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising an error indicating mechanism to recognize an error condition if said acknowledgment packet regarding said data packet transmitted across said network is not received from said remote system. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The network interface card of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said data packets comprise TCP/IP data packets.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002497A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002497A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002497A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002497A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002497A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002497A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
