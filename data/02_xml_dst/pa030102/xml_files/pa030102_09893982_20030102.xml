<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001857A1-20030102-P00900.TIF SYSTEM "US20030001857A1-20030102-P00900.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00000.TIF SYSTEM "US20030001857A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00001.TIF SYSTEM "US20030001857A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00002.TIF SYSTEM "US20030001857A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00003.TIF SYSTEM "US20030001857A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00004.TIF SYSTEM "US20030001857A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00005.TIF SYSTEM "US20030001857A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00006.TIF SYSTEM "US20030001857A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001857A1-20030102-D00007.TIF SYSTEM "US20030001857A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001857</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09893982</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06T011/40</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>582000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus for determining logical texture coordinate bindings</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Peter</given-name>
<middle-name>L.</middle-name>
<family-name>Doyle</family-name>
</name>
<residence>
<residence-us>
<city>Dorado Hills</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>ANTONELLI TERRY STOUT AND KRAUS</name-1>
<name-2></name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A computer system and method are provided for mapping of texture images. This may include a memory device to store a plurality of texture coordinates associated with vertices of three dimensional objects and a graphics device coupled to the memory device to process internal texture coordinates. A mapping system may appropriately route select ones of the plurality of texture coordinates from the memory device to the graphics device. The texture images may be mapped onto objects that, when rendered, include the image that may later be displayed on a display device. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is directed to a computer graphics architecture. More particularly, the present invention is directed to a method and apparatus for determining logical texture coordinate bindings. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> A typical computer system includes a processor subsystem of one or more microprocessors such as Intel&reg; i386, i486, Celeron&trade; or Pentium&reg; processors, a memory subsystem, one or more chipsets provided to support different types of host processors for different platforms such as desktops, personal computers (PC), servers, workstations and mobile platforms, and to provide an interface with a plurality of input/output (I/O) devices including, for example, keyboards, input devices, disk controllers, and serial and parallel ports to printers, scanners and display devices. Chipsets may integrate a large amount of I/O bus interface circuitry and other circuitry onto only a few chips. Examples of such chipsets may include Intel&reg;D 430, 440 and 450 series chipsets, and more recently Intel&reg; 810 and 8XX series chipsets. These chipsets may implement, for example, the I/O bus interface circuitry, direct memory access (DMA) controller, graphics controller, graphics memory controller, and other additional functionality such as graphics visual and texturing enhancements, data buffering, and integrated power management functions. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In traditional three-dimensional (3D) graphics systems, 3D images may be generated for representation on a two-dimensional (2D) display monitor. The 2D representation may be provided by defining a 3D model space and assigning sections of the 3D model space to pixels for a visual display on the display monitor. Each pixel may display the combined visual effects such as color, shade and transparency defined on an image. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The visual characteristics of the 2D representation of the 3D image may also be enhanced by texturing. Texture may represent changes in intensity, color, opacity, or thematic contents (such as surface material type). The process of applying texture patterns to surfaces (adding graphics to scenery) is generally referred to as &ldquo;texture mapping&rdquo; and is well known and a widely used technique in computer graphics. The texture may be represented by a 2D array of video data. Data elements in the array are called texels and the array is called a texture map. The two coordinate axes of the texture coordinate space are defined by rows and columns of the array typically designated in &ldquo;U&rdquo; and &ldquo;V&rdquo; coordinates.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The foregoing and a better understanding of the present invention will become apparent from the following detailed description of example embodiments and the claims when read in connection with the accompanying drawings, all forming a part of the disclosure of this invention. While the foregoing and following written and illustrated disclosure focuses on disclosing example embodiments of the invention, it should be clearly understood that the same is by way of illustration and example only and that the invention is not limited thereto. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The following represents brief descriptions of the drawings in which like reference numerals represent like elements and wherein: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a block diagram of an example computer system having a graphics platform according to an example embodiment of the present invention; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a block diagram of an example computer system having a host chipset for providing a graphics platform according to an example embodiment of the present invention; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a functional diagram of an example graphics and memory controller hub (GMCH) according to an example embodiment of the present invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an array of data; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an example embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an example embodiment of the present invention; and </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates example mappings according to an example embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In the following detailed description, like reference numerals and characters may be used to designate identical, corresponding or similar components in differing figure drawings. Arrangements may be shown in block diagram form in order to avoid obscuring the invention, and also in view of the fact that specifics with respect to implementation of such block diagram arrangements may be highly dependent upon the platform within which the present invention is to be implemented. That is, such specifics should be well within the knowledge of one skilled in the art. Where specific details are set forth in order to describe example embodiments of the invention, it should be apparent to one skilled in the art that the invention can be practiced without, or with variation of, these specific details. Finally, it should be apparent that differing combinations of hard-wired circuitry and/or software instructions can be used to implement embodiments (or portions of embodiments) of the present invention. That is, embodiments of the present invention are not limited to any specific combination of hardware and/or software. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example computer system <highlight><bold>100</bold></highlight> having a graphics platform according to an example embodiment of the present invention. The computer system <highlight><bold>100</bold></highlight> (which can be a system commonly referred to as a personal computer or PC) may include one or more processors or processing units <highlight><bold>110</bold></highlight> such as Intel&reg; i386, i486, Celeron&trade; or Pentium&reg;) processors, a memory controller <highlight><bold>120</bold></highlight> coupled to the processing unit <highlight><bold>110</bold></highlight> via a front side bus <highlight><bold>10</bold></highlight>, a system memory <highlight><bold>130</bold></highlight> coupled to the memory controller <highlight><bold>120</bold></highlight> via a memory bus <highlight><bold>20</bold></highlight>, a graphics controller <highlight><bold>140</bold></highlight> coupled to the memory controller <highlight><bold>120</bold></highlight> via a graphics bus (e.g., Advanced Graphics Port &ldquo;AGP&rdquo; bus) <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Alternatively, the graphics controller <highlight><bold>140</bold></highlight> may also be configured to access the memory controller <highlight><bold>120</bold></highlight> via a peripheral bus such as a peripheral component interconnect (PCI) bus <highlight><bold>40</bold></highlight> if so desired. The PCI bus may be a high performance <highlight><bold>32</bold></highlight> or 64 bit synchronous bus with automatic configurability and multiplexed address, control and data lines as described in the latest version of &ldquo;PCI Local Bus Specification, Revision 2.1&rdquo; set forth by the PCI Special Interest Group (SIG) on Jun. 1, 1995 for added-on arrangements (e.g., expansion cards) with new video, networking, or disk memory storage capabilities. The graphics controller <highlight><bold>140</bold></highlight> may control a visual display of graphics and/or video images on a display monitor <highlight><bold>150</bold></highlight> (e.g., cathode ray tube, liquid crystal display and flat panel display). The display monitor <highlight><bold>150</bold></highlight> may be either an interlaced or progressive monitor, but typically is a progressive display device. A frame buffer <highlight><bold>160</bold></highlight> may be coupled to the graphics controller <highlight><bold>140</bold></highlight> for buffering the data from the graphics controller <highlight><bold>140</bold></highlight>, the processing unit <highlight><bold>110</bold></highlight>, or other devices within the computer system <highlight><bold>100</bold></highlight> for a visual display of video images on the display monitor <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The memory controller <highlight><bold>120</bold></highlight> and the graphics controller <highlight><bold>140</bold></highlight> may be integrated as a single graphics and memory controller hub (GMCH) including dedicated multi-media engines executing in parallel to deliver high performance 3D, 2D and motion compensation video capabilities, for example. The GMCH may be implemented as a PCI chip such as, for example, PIIX4&reg; chip and PIIX6&reg; chip manufactured by Intel Corporation. In addition, such a GMCH may also be implemented as part of a host chipset along with an I/O controller hub (ICH) and a firmware hub (FWH) as described, for example, in Intel&commat; 810 and 8XX series chipsets. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example computer system <highlight><bold>100</bold></highlight> including such a host chipset <highlight><bold>200</bold></highlight> according to an embodiment of the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the computer system <highlight><bold>100</bold></highlight> includes essentially the same components shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, except for the host chipset <highlight><bold>200</bold></highlight> which provide a highly-integrated three-chip solution consisting of a graphics and memory controller hub (GMCH) <highlight><bold>210</bold></highlight>, an input/output (I/O) controller hub (ICH) <highlight><bold>220</bold></highlight> and a firmware hub <highlight><bold>230</bold></highlight> (FWH) <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The GMCH <highlight><bold>210</bold></highlight> may provide graphics and video functions and interfaces one or more memory devices to the system bus <highlight><bold>10</bold></highlight>. The GMCH <highlight><bold>210</bold></highlight> may include a memory controller as well as a graphics controller (which in turn may include a 3D engine, a 2D engine, and a video engine). The GMCH <highlight><bold>210</bold></highlight> may be interconnected to any of the system memory <highlight><bold>130</bold></highlight>, a local display memory <highlight><bold>155</bold></highlight>, a display monitor <highlight><bold>150</bold></highlight> (e.g., a computer monitor) and to a television (TV) via an encoder and a digital video output signal. The GMCH 120 may be, for example, an Intel&reg; 82810 or 82810-DC100 chip. The GMCH <highlight><bold>120</bold></highlight> may also operate as a bridge or interface for communications or signals sent between the processor <highlight><bold>110</bold></highlight> and one or more I/O devices which may be connected to the ICH <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The ICH <highlight><bold>220</bold></highlight> may interface one or more I/O devices to the GMCH <highlight><bold>210</bold></highlight>. The FWH <highlight><bold>230</bold></highlight> may be coupled to the ICH <highlight><bold>220</bold></highlight> and provide firmware for additional system control. The ICH <highlight><bold>220</bold></highlight> may be, for example, an Intel&reg; 82801 chip and the FWH <highlight><bold>230</bold></highlight> may be, for example, an Intel&reg; 82802 chip. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The ICH <highlight><bold>220</bold></highlight> may be coupled to a variety of I/O devices and the like such as: a Peripheral Component Interconnect (PCI) bus <highlight><bold>40</bold></highlight> (PCI Local Bus Specification Revision 2.2) which may have one or more I/O devices connected to PCI slots <highlight><bold>194</bold></highlight>, an Industry Standard Architecture (ISA) bus option <highlight><bold>196</bold></highlight> and a local area network (LAN) option <highlight><bold>198</bold></highlight>; a Super I/O chip <highlight><bold>192</bold></highlight> for connection to a mouse, keyboard and other peripheral devices (not shown); an audio coder/decoder (Codec) and modem Codec; a plurality of Universal Serial Bus (USB) ports (USB Specification, Revision 1.0); and a plurality of Ultra/66 AT Attachment (ATA) 2 ports (X3T9.2 948D specification; commonly also known as Integrated Drive Electronics (IDE) ports) for receiving one or more magnetic hard disk drives or other I/O devices. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The USB ports and IDE ports may be used to provide an interface to a hard disk drive (HDD) and compact disk read-only-memory (CD-ROM). I/O devices and a flash memory (e.g., EPROM) may also be coupled to the ICH of the host chipset for extensive I/O support and functionality. Those I/O devices may include, for example, a keyboard controller for controlling operations of an alphanumeric keyboard, a cursor control device such as a mouse, track ball, touch pad, joystick, etc., a mass storage device such as magnetic tapes, hard disk drives (HDD), and floppy disk drives (FDD), and serial and parallel ports to printers and scanners. The flash memory may be coupled to the ICH of the host chipset via a low pin count (LDC) bus. The flash memory may store a set of system basic input/output start up (BIOS) routines at startup of the computer system <highlight><bold>100</bold></highlight>. The super I/O chip <highlight><bold>192</bold></highlight> may provide an interface with another group of I/O devices. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a block diagram of a graphics and memory controller hub (GMCH) <highlight><bold>210</bold></highlight> according to an example embodiment of the present invention. The GMCH <highlight><bold>210</bold></highlight> may include the graphics controller <highlight><bold>140</bold></highlight> to provide graphics and video functions and the memory controller <highlight><bold>120</bold></highlight> to control and interface one or more memory devices via the system bus <highlight><bold>20</bold></highlight>. The memory controller <highlight><bold>120</bold></highlight> may be coupled to the system bus <highlight><bold>40</bold></highlight> via a buffer <highlight><bold>216</bold></highlight> and a system bus interface <highlight><bold>212</bold></highlight>. The memory controller <highlight><bold>120</bold></highlight> may also be coupled to the ICH <highlight><bold>220</bold></highlight> via a buffer <highlight><bold>216</bold></highlight> and a hub interface <highlight><bold>214</bold></highlight>. In addition, the GMCH <highlight><bold>210</bold></highlight> may be coupled to the system memory <highlight><bold>130</bold></highlight> and, optionally, a local display memory <highlight><bold>155</bold></highlight> (also commonly referred to as video or graphics memory typically provided on a video card or video memory card). In a cost saving unified memory architecture (UMA), the local display memory <highlight><bold>155</bold></highlight> may reside in the computer system. In such an architecture, the system memory <highlight><bold>130</bold></highlight> may operate as both system memory and the local display memory. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The graphics controller <highlight><bold>140</bold></highlight> of the GMCH <highlight><bold>210</bold></highlight> may include a 3D (texture mapping) engine <highlight><bold>170</bold></highlight> for performing a variety of 3D graphics functions, including creating a rasterized 2D display image from representation of 3D objects, a 2D engine <highlight><bold>180</bold></highlight> for performing 2D functions, a display engine <highlight><bold>190</bold></highlight> for displaying video or graphics images, and a digital video output port <highlight><bold>185</bold></highlight> for outputting digital video signals and providing connection to traditional TVs or new space-saving digital flat panel display. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The 3D (texture mapping) engine <highlight><bold>170</bold></highlight> may perform a variety of functions including perspective-correct texture mapping to deliver 3D graphics without annoying visual anomalies such as warping, bending or swimming, bilinear and anisotropic filtering to provide smoother and more realistic appearance 3D images, MIP mapping to reduce blockiness and enhance image quality, Gouraud shading, alpha-blending, fogging and Z-buffering. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The display engine <highlight><bold>190</bold></highlight> may include a hardware motion compensation module <highlight><bold>192</bold></highlight> for performing motion compensation to improve video quality, a hardware cursor <highlight><bold>194</bold></highlight> for providing cursor patterns, an overlay engine <highlight><bold>196</bold></highlight> for merging either video data captured from a video source or data delivered from the 2D engine <highlight><bold>180</bold></highlight> with graphics data on the display monitor <highlight><bold>150</bold></highlight>, and a digital-to-analog converter (DAC) <highlight><bold>198</bold></highlight> for converting digital video to analog video signals (YUV color space to RGB color space) for a visual display on the display monitor <highlight><bold>150</bold></highlight>. The hardware motion compensation module <highlight><bold>192</bold></highlight> may alternatively reside within the 3D engine <highlight><bold>170</bold></highlight> for purposes of simplicity. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A texture palette <highlight><bold>213</bold></highlight>, also known as a color lookup table (CLUT), may be provided within the GMCH <highlight><bold>210</bold></highlight> to identify a subset from a larger range of colors. A small number of colors in the palette <highlight><bold>213</bold></highlight> allows fewer bits to be used to identify the color or intensity of each pixel. The colors for the textures are identified as indices to the texture palette <highlight><bold>213</bold></highlight>. In addition, a subpicture palette <highlight><bold>215</bold></highlight> may separately be provided for color alpha-blending subpicture pixels for transparency. However, a single dual-purpose palette may be used as both a texture palette and a subpicture palette to save hardware and reduce costs. The alpha-blending of the subpicture with video is an operation typically associated with video processing, while texturing is typically associated with 3D processing. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Embodiments of the present invention will be described with respect to a computer system that includes a memory device to store a plurality of texture coordinates associated with vertices of three dimensional objects, a graphics device to couple to the memory device and to process internal texture coordinates for display, and a mapping system to appropriately route select ones of the plurality of texture coordinates from the memory device to the graphics device. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a data array <highlight><bold>250</bold></highlight> that may be provided within the memory (such as the system memory <highlight><bold>130</bold></highlight>). The array <highlight><bold>250</bold></highlight> may include a large amount of data relating to texture coordinates of the desired image(s). For example, the vertical axis represents the vertices of various triangular coordinates of the image and the horizontal axis represents XYZ data, color data and texture coordinates. For example, a first triangle may include vertices V<highlight><bold>0</bold></highlight>, V<highlight><bold>1</bold></highlight> and V<highlight><bold>2</bold></highlight>, a second triangle may include vertices V<highlight><bold>3</bold></highlight>, V<highlight><bold>4</bold></highlight> and V<highlight><bold>5</bold></highlight>, and a third triangle may include vertices V<highlight><bold>6</bold></highlight>, V<highlight><bold>7</bold></highlight> and V<highlight><bold>8</bold></highlight>. Each of these vertices may be represented by data that may be used by a mapping engine (such as within the 3D engine <highlight><bold>170</bold></highlight>, for example) of the present invention. That is, each of the vertices may correspond to X, Y and Z positional data, color data (such as R, G and B) as well as different texture coordinates. In the array <highlight><bold>250</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, eight different texture coordinates are shown, namely texture coordinates TC0, TC1, TC2, TC3, TC4, TC5, TC6 and TC7. Other amounts of texture coordinates as well as other (or different) data may be provided within the array <highlight><bold>250</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> During texture mapping, select information of the array <highlight><bold>250</bold></highlight> may be passed from the memory (i.e., the system memory <highlight><bold>130</bold></highlight>) to a graphics device (i.e., the GMCH <highlight><bold>140</bold></highlight>) to appropriately prepare the image. However, it may be disadvantageous to transfer the whole array <highlight><bold>250</bold></highlight> from the memory to the graphics device as the array <highlight><bold>250</bold></highlight> may contain an extremely large amount of data and may need to be reformatted at the graphics device. Additionally, hardware (i.e., the graphics device) may only be capable of storing a predetermined number of texture coordinates at one time. For example, the graphics device may only be capable of simultaneously storing data regarding four separate texture coordinates. Disadvantageous arrangements may require the use of software in the transfer of the array <highlight><bold>250</bold></highlight> to the graphics device. Some of the texture coordinates may be stripped from the array <highlight><bold>250</bold></highlight> after the array <highlight><bold>250</bold></highlight> has been transferred to the graphics device. This may involve the software copying the array <highlight><bold>250</bold></highlight> to an intermediate buffer and then passing select information in the intermediate buffer to the mapping engines. It is therefore desirable for a method and apparatus to transfer only select portions of the array <highlight><bold>250</bold></highlight> that will be used in the texture engines of the graphics device. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Embodiments of the present invention relate to a graphics device (such as the GMCH <highlight><bold>140</bold></highlight>) supporting multiple texture mappings. A logical binding may be made between internal texture coordinate sets used by the device and externally-stored (i.e., within the system memory) vertex texture coordinates or a default value. The logical mapping may provide substantial flexibility with respect to the use, ordering and replication of vertex texture coordinates. Without this flexibility, the graphics driver may have to generate a second, rearranged copy of the vertex data at the costs of memory footprints, and additional processor overhead, complexity and thus lower system performance. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> More specifically, a graphics device may support and use up to four internal texture coordinate sets for texture mapping. These internal coordinate sets may be either bound to one of eight vertex texture coordinate sets or a default value. The graphics device may use different amounts of internal texture coordinates in accordance with embodiments of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates texture coordinate data transfer according to an example embodiment of the present invention. Other embodiments and configurations are also within the scope of the present invention. More specifically, <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a memory <highlight><bold>260</bold></highlight> (such as the system memory <highlight><bold>130</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), a graphics device <highlight><bold>270</bold></highlight> (such as the GMCH <highlight><bold>140</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) and software <highlight><bold>280</bold></highlight> that controls, among other things, the transfer of texture coordinates from the memory <highlight><bold>260</bold></highlight> to the graphics driver <highlight><bold>270</bold></highlight>. The software <highlight><bold>280</bold></highlight> may reside in external memory. The memory <highlight><bold>260</bold></highlight> is shown as including the array <highlight><bold>250</bold></highlight>. For illustration purposes, the array <highlight><bold>250</bold></highlight> may include texture coordinate data <highlight><bold>252</bold></highlight> and non-texture coordinate data <highlight><bold>254</bold></highlight>. As show in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the graphics device <highlight><bold>270</bold></highlight> may include four texture mapping engines, namely a texture mapping engine (TME0) <highlight><bold>272</bold></highlight>, a texture mapping engine (TME1) <highlight><bold>274</bold></highlight>, a texture mapping engine (TME2) <highlight><bold>276</bold></highlight>, and a texture mapping engine (TME3) <highlight><bold>278</bold></highlight>. While this embodiment only illustrates four texture mapping engines within the graphics device <highlight><bold>270</bold></highlight>, other numbers of texture mapping engines are also within the scope of the present invention. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The graphics device <highlight><bold>270</bold></highlight> may further include a register <highlight><bold>271</bold></highlight> associated with the texture mapping engine <highlight><bold>272</bold></highlight>, a register <highlight><bold>271</bold></highlight> associated with the texture mapping engine <highlight><bold>274</bold></highlight>, a register <highlight><bold>275</bold></highlight> associated with the texture mapping engine <highlight><bold>276</bold></highlight> and a register <highlight><bold>277</bold></highlight> associated with the texture mapping engine <highlight><bold>278</bold></highlight>. Each of the registers <highlight><bold>271</bold></highlight>, <highlight><bold>273</bold></highlight>, <highlight><bold>275</bold></highlight> and <highlight><bold>277</bold></highlight> may be used to select the appropriate texture coordinate values to be obtained from the memory <highlight><bold>260</bold></highlight> (or a default value) for each of the texture mapping engine <highlight><bold>272</bold></highlight>, the texture mapping engine <highlight><bold>274</bold></highlight>, the texture mapping engine <highlight><bold>276</bold></highlight> and the texture mapping engine <highlight><bold>278</bold></highlight>, respectively. During operation, the software <highlight><bold>280</bold></highlight> may set values within the respective registers <highlight><bold>271</bold></highlight>, <highlight><bold>273</bold></highlight>, <highlight><bold>275</bold></highlight> and <highlight><bold>277</bold></highlight> such that the texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight> receive the appropriate texture coordinates from the memory <highlight><bold>260</bold></highlight>. In accordance with embodiments of the present invention, the entire array <highlight><bold>250</bold></highlight> of texture coordinates does not needed to be transferred from the memory <highlight><bold>260</bold></highlight> to the graphics device <highlight><bold>270</bold></highlight>. That is, embodiments of the present invention route the proper texture coordinates to the appropriate texture mapping engines and avoid transferring unneeded texture coordinates from the array <highlight><bold>250</bold></highlight>. The software <highlight><bold>280</bold></highlight> may appropriately pick the texture coordinates to be transferred to the texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight>. This avoids the graphics device <highlight><bold>270</bold></highlight> from having to reformat the vertex texture buffers after they have been transferred from the memory <highlight><bold>260</bold></highlight> to the graphics device <highlight><bold>270</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> illustrate how embodiments of the present invention may be useful to appropriately route the texture coordinate data from the memory <highlight><bold>260</bold></highlight> to the graphics device <highlight><bold>270</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the memory <highlight><bold>260</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) may include eight vertex texture coordinates TC0, TC1, TC2, TC3, TC4, TC5, TC6 and TC7. These texture coordinates may be provided within the array <highlight><bold>250</bold></highlight> or may be provided within vertex texture buffers. The graphics device <highlight><bold>270</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) is represented in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> as four internal texture coordinates (ITC0, ITC1, ITC2 and ITC3) that will be provided within the four texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight>, respectively. In accordance with embodiments of the present invention, the four internal texture coordinates (ITC0, ITC1, ITC2 and ITC3) to be provided to the four texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight> (at the graphics device <highlight><bold>270</bold></highlight>) may be default values <highlight><bold>290</bold></highlight> (such as 0,0,0) or may be one of the texture coordinates TC0, TC1, TC2, TC3, TC4, TC5, TC6 and TC7 provided within the memory <highlight><bold>260</bold></highlight>. The selection as to which texture coordinates will be provided as the internal texture coordinates ITC0, ITC1, ITC2 and ITC3 (corresponding to the mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight>) may be based on a signal TexCoord<custom-character file="US20030001857A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00001"/>binding <highlight><bold>295</bold></highlight>. This signal may be provided by the software <highlight><bold>280</bold></highlight> to appropriately route the appropriate texture coordinates to the texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight>. That is, the software <highlight><bold>280</bold></highlight> may specify, in this example, that the internal texture coordinates may come from any one of the texture coordinates TC0, TC1, TC2, TC3, TC4, TC5, TC6 and TC7 or from the default value. In other words, the software <highlight><bold>280</bold></highlight> may select the source of the texture coordinates for each texture mapping engine <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight>. The software <highlight><bold>280</bold></highlight> may make this selection based on the desired image to be created and the desire to avoid unneedlessly transferring data from the memory <highlight><bold>260</bold></highlight> to the graphics device <highlight><bold>270</bold></highlight>. The apparatus appropriately routes (or transfers) the selected texture coordinates to the proper texture mapping engines <highlight><bold>272</bold></highlight>, <highlight><bold>274</bold></highlight>, <highlight><bold>276</bold></highlight> and <highlight><bold>278</bold></highlight> (as the internal texture coordinates ITC0, ITC1, ITC2 and ITC3) by utilizing the registers <highlight><bold>271</bold></highlight>, <highlight><bold>273</bold></highlight>, <highlight><bold>275</bold></highlight> and <highlight><bold>277</bold></highlight>. Accordingly, the graphics device <highlight><bold>270</bold></highlight> may only obtain a limited number of texture coordinates from the memory <highlight><bold>260</bold></highlight> and avoid obtaining the unnecessary texture coordinates for a particular image. This additionally avoids the software <highlight><bold>280</bold></highlight> from having to reformat the array <highlight><bold>250</bold></highlight> when it arrives at the graphics device <highlight><bold>270</bold></highlight> as in disadvantageous arrangements. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> further shows that the TexCoord<custom-character file="US20030001857A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00002"/>Binding state variable may specify the data source for each internal coordinate set. Other ways of setting each internal coordinate set are also within the scope of the present invention. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In at least one embodiment, each of registers <highlight><bold>271</bold></highlight>, <highlight><bold>273</bold></highlight>, <highlight><bold>275</bold></highlight> and <highlight><bold>277</bold></highlight> may separately store a multi-bit value (i.e., four bits) indicating a location as to where to obtain texture coordinates. For example, bit values of 0-7 may represent the texture coordinates 0-7, respectively, and a bit value of 8 may represent a default value. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an example mapping (or transferring) in accordance with an embodiment of the present invention. Other mappings are also within the scope of the present invention. More specifically, <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows that the texture coordinate TC6 is mapped to the texture mapping engine <highlight><bold>272</bold></highlight>, the texture coordinate TC1 is mapped to both the texture mapping engine <highlight><bold>274</bold></highlight> and the texture mapping engine <highlight><bold>278</bold></highlight> and a default value (0, 0) is mapped to the texture mapping engine <highlight><bold>276</bold></highlight>. Stated differently, the internal texture coordinate ITC0 is bound to the texture coordinate TC6, the internal texture coordinate ITC2 receives a default value (0,0), and the internal texture coordinate ITC1 and the internal texture coordinate ITC3 are both bound to the texture coordinate TC1. This &ldquo;cloning&rdquo; of a vertex texture coordinate set (e.g., texture coordinate TC1) is particularly useful when a single vertex texture coordinate set is bound to two different texture mappings, though with different address (wrap) control or texture coordinate transformaton matrices etc. In this example, the texture coordinates TC0,TC2, TC3, TC4, TC5 and TC7 are not used and are effectively ignored by the graphics device (although they are present in the vertex data array). </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Accordingly, by utilizing these logical bindings, specific vertex texture coordinate sets that are present in the vertex data array may be ignored. This may better support the operation of the Direct 3D API, which does not prevent unused texture coordinate sets from being presented to the graphics driver or stored in the vertex buffers. This allows applications to keep one vertex database (with possibly more texture coordinates sets than the hardware can use at any point in time) and then employ a multipass rendering algorithm where a subset of the coordinate sets may be used in each pass. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The logical binding functionality may allow multiple internal texture coordinate sets to be bound to the same vertex texture coordinate sets. This may be useful for replicating vertex texture coordinate sets in order to apply different attributes (e.g., texture address controls, texture coordinate transforms, etc.) to the same texture coordinate set for use with different texture mappings. This may be useful for matching the Direct 3D API semantics of associating these controls with texture stages versus texture coordinate sets. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The logical bindings also allow the vertex texture coordinate sets to be used in a random (versus strictly sequential) fashion. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Embodiments of the present invention provide advantages over graphic devices that support a fixed (i.e., implied) binding between the vertex texture coordinate set and the internal texture coordinate sets. That is, embodiments of the present invention permit vertex texture coordinates to be ignored, permit vertex texture coordinates to be replicated, permit vertex texture coordinates to be used in random order and permit the association of a default value to a texture coordinate set. Without this flexibility, the graphics driver would be generate a second, rearranged copy of the vertex data, which adds additional memory bandwidth requirements and software overhead and thus reduces the system performance. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> By utilizing embodiments of the present invention, an image may be generated by a graphics device by rendering the objects and using the texture coordinates to assign the appropriate texture map contents to the pixels of the objects. The image may be later displayed on a display device. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Embodiments of the present invention may relate to a computer system that includes a memory device to store a plurality of texture coordinates associated with vertices of three dimensional objects, a graphics device having a plurality of mapping engines each to be used to map at least one of the objects based on a plurality of internal texture coordinates, and a mapping system to transfer select ones of the plurality of texture coordinates in the memory device to the mapping engines without transferring unselected one of the plurality of texture coordinates from the memory device to the mapping engines. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Any reference in this description to &ldquo;one embodiment&rdquo;, &ldquo;an embodiment&rdquo;, &ldquo;example embodiment&rdquo;, etc., means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of such phrases in various places in the specification are not necessarily all referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with any embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other ones of the embodiments. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Further, embodiments of the present invention or portions of embodiments may be practiced as a software invention, implemented in the form of a machine-readable medium having stored thereon at least one sequence of instructions that, when executed, causes a machine to effect the invention. With respect to the term &ldquo;machine&rdquo;, such term should be construed broadly as encompassing all types of machines, e.g., a non-exhaustive listing including: computing machines, non-computing machines, communication machines, etc. Similarly, which respect to the term &ldquo;machine-readable medium&rdquo;, such term should be construed as encompassing a broad spectrum of mediums, e.g., a non-exhaustive listing including: magnetic medium (floppy disks, hard disks, magnetic tape, etc.), optical medium (CD-ROMs, DVD-ROMs, etc), etc. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A machine-readable medium includes any mechanism that provides (i.e., stores and/or transmits) information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other forms of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> This concludes the description of the example embodiments. Although the present invention has been described with reference to a number of illustrative embodiments thereof, it should be understood that numerous other modifications and embodiments can be devised by those skilled in the art that will fall within the spirit and scope of the principles of this invention. More particularly, reasonable variations and modifications are possible in the component parts and/or arrangements of the subject combination arrangement within the scope of the foregoing disclosure, the drawings and the appended claims without departing from the spirit of the invention. In addition to variations and modifications in the component parts and/or arrangements, alternative uses will also be apparent to those skilled in the art. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer system comprising: 
<claim-text>a memory device to store a plurality of texture coordinates associated with vertices of three dimensional objects; </claim-text>
<claim-text>a graphics device to couple to said memory device and to process internal texture coordinates for display; and </claim-text>
<claim-text>a mapping system to appropriately route select ones of said plurality of texture coordinates from said memory device to said graphics device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a display device to display an image based on an output of said graphics device. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said graphics device comprises a plurality of mapping engines each to process a separate one of said internal texture coordinates. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said graphics device further comprises a plurality of registers, each corresponding to a separate one of said plurality of mapping engines. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein a value within each of said registers corresponds to a source of the texture coordinate for said corresponding mapping engine. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said source comprises one of: a default and one of said plurality of said texture coordinates in said memory device. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said mapping system assigns a value into each register to select the appropriate texture coordinate. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A computer system comprising: 
<claim-text>a memory device to store a plurality of texture coordinates associated with vertices of three dimensional objects; </claim-text>
<claim-text>a graphics device having a plurality of mapping engines each to map at least one of said objects based on a plurality of internal texture coordinates; and </claim-text>
<claim-text>a mapping system to transfer select ones of said plurality of texture coordinates in said memory device to said mapping engines without transferring unselected ones of said plurality of texture coordinates from said memory device to said graphics device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising a display device to display an image based on an output of said graphics device. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said graphics device further includes a plurality of registers, each corresponding to a separate one of said plurality of mapping engines. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said mapping system assigns a value to each register so as to select a source of the internal texture coordinates for each of said mapping engines. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said source comprises one of: a default and one of said plurality of said texture coordinates in said memory device. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A graphics device for creating an image based on internal texture coordinates received from a memory device, said graphics device including a plurality of mapping engines and a plurality of registers, each register corresponding to a source of texture coordinate values for one of said mapping engines. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The graphics device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising a display device to display said image based on an output of said graphics device. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The graphics device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said source comprises one of: a default and one of a plurality of said texture coordinates stored in said memory device. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The graphics device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein a mapping system appropriately selects the texture coordinates for routing to each of the mapping engines. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method comprising: 
<claim-text>receiving a plurality of texture coordinate values in a memory device, said plurality of texture coordinates being associated with vertices of three dimensional objects; </claim-text>
<claim-text>selecting ones of said plurality of texture coordinate values for mapping of at least one of said objects; and </claim-text>
<claim-text>transferring said select ones of said plurality of texture coordinates values from said memory device to mapping engines. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said select ones of said plurality of texture coordinates are transferred from said memory device to said mapping engines without transferring unselected ones of said plurality of texture coordinates. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said selecting comprises associating a source of texture coordinates for each of said mapping engines. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said associating comprises, for each mapping engine, setting a value of a register corresponding to said each mapping engine. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said value corresponds to one of: a default value and one of said plurality of texture coordinates values. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A program storage device readable by machine, tangibly embodying a program of instructions executable by the machine to perform a method comprising: 
<claim-text>selecting ones of a plurality of texture coordinate values in a memory device, said plurality of texture coordinates values being associated with vertices of three dimensional objects; and </claim-text>
<claim-text>transferring said select ones of said plurality of texture coordinates values from said memory device to mapping engines. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The program storage device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said select ones of said plurality of texture coordinates are transferred from said memory device to said mapping engines without transferring unselected ones of said plurality of texture coordinate values. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The program storage device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said selecting comprises associating a source of texture coordinates for each of said mapping engines.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001857A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001857A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001857A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001857A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001857A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001857A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001857A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001857A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
