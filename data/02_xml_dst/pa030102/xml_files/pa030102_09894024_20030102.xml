<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002606A1-20030102-D00000.TIF SYSTEM "US20030002606A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00001.TIF SYSTEM "US20030002606A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00002.TIF SYSTEM "US20030002606A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00003.TIF SYSTEM "US20030002606A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00004.TIF SYSTEM "US20030002606A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00005.TIF SYSTEM "US20030002606A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00006.TIF SYSTEM "US20030002606A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00007.TIF SYSTEM "US20030002606A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002606A1-20030102-D00008.TIF SYSTEM "US20030002606A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002606</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894024</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>375</class>
<subclass>354000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method for bi-directional data synchronization between different clock frequencies</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wenliang</given-name>
<family-name>Chen</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Uddalak</given-name>
<family-name>Bhattacharya</family-name>
</name>
<residence>
<residence-us>
<city>Tigrad</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Lawrence E. Lycke</name-1>
<name-2>BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP</name-2>
<address>
<address-1>Seventh Floor</address-1>
<address-2>12400 Wilshire Boulevard</address-2>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1026</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method for bi-directional data synchronization between different clock frequencies is described wherein a state machine counter is provided a first clock signal having a first frequency. The state machine counter is then provided a second clock signal having a second frequency that is an integer multiple of the first clock frequency. The state machine counter has an integer number of states equivalent to the ratio of the second clock signal frequency to the first clock signal frequency. The first clock signal is applied to reset the state machine counter to an initial state. The state machine counter generates an intermediate clock signal whenever the state machine increments through all states to return to the initial state. The intermediate clock is then applied to synchronize data between the first clock frequency and the second clock frequency. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to data processing systems, and in particular, relates to a data synchronization methodology for use with a data processing system. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Background Information </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Several independent clocks running at different frequencies are often necessary within a digital system. For example, a processor may have a different clock frequency than a system bus. However, clock skew caused by phase variances between different high frequency clocks can result in hardware lock up and data errors or the inability to translate data from one clocked system to another. Clock skew between clocks of the same frequency occurs when the rising edges are not closely aligned. A common solution to clock skew in digital systems is the application of a phase-locked loop (PLL) circuit. A phase locked loop circuit reduces clock skew to levels that allow a system to function properly. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a method for data synchronization between two frequency domains. Unit A is clocked using &ldquo;clkl.&rdquo; Unit B is clocked using &ldquo;clkh.&rdquo; Generally, &ldquo;clkl&rdquo; is a lower frequency than &ldquo;clkh.&rdquo; A PLL circuit placed in a feedback loop is used to control clock skew by tightly coupling &ldquo;clkl&rdquo; with &ldquo;clkh.&rdquo; Generally, the leading edges of the clocks are aligned to provide the tight coupling. Clock skew is kept near zero using the PLL method so that data transferred directly from unit A to unit B and from unit B to unit A occurs with minimal error. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A disadvantage to phase-lock loops is the complexity and additional circuitry required to implement them in a digital system. Additionally, a phase locked loop is only effective when then clock frequencies can be correlated. Generally, the skew between the clocks must be small enough to still couple the leading edges with a PLL circuit. However, when clocks are distributed, clock skew increases as a consequence of distribution. Accumulated skew will eventually render data synchronization between two clocks impossible. Placing PLLs at each distribution node is one solution to skew problems with distributed clocks, but it is expensive in terms of area and harder to implement in large circuits. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Another limitation of direct data synchronization techniques, as in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is the inability to correlate clocks of fractional frequencies. Generally, it is a trivial matter to divide or multiply a clock by integer frequencies, but correlating data at non-integer frequency requires both clock multiplier and clock dividers. However, when clock multipliers and clock dividers are used together, the clock skew may reach levels that cannot be corrected by a PLL circuit. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Non-limiting and non-exhaustive embodiments of the present invention are described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a prior art method for data synchronization between two clock frequencies. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a method for data synchronization between two different clock frequencies in accordance with the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a state diagram of a data synchonization unit in an example of the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a process flow diagram of a state machine counter in an example of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a timing diagram and method for data synchronization in an example of the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a second diagram and method for data synchronization in an example of the invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a timing diagram and method for distributing a clock signal in an example of the invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a method for data synchronization between fractional clock frequencies. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENTS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Embodiments of a system and method for bi-directional data synchronization between clock frequencies are described herein. In the following description, numerous specific details are provided, such as the methods described in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>7</bold></highlight>, to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Reference throughout this specification to &ldquo;one embodiment&rdquo; or &ldquo;an embodiment&rdquo; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of the phrases &ldquo;in one embodiment&rdquo; or &ldquo;in an embodiment&rdquo; in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. Whenever possible like numbers refer to like devices throughout the drawings. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In certain embodiments of the invention instructions are stored on machine-readable media for execution by a processor. A processor may be any device or devices capable of executing the instructions such as a computer. A machine-readable medium includes any mechanism that provides information in a form readable by a machine such as a processor. For example, a machine readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other forms of propagated signals, and the like. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In summary, a method for bi-directional data synchronization between different clock frequencies is described in detail below. A state machine counter is provided a first clock signal having a first frequency. The state machine counter is provided a second clock signal having a second frequency that is an integer multiple of the first clock frequency. The state machine counter has an integer number of states equivalent to the ratio of the second clock signal frequency to the first clock signal frequency. The first clock signal is applied to reset the state machine counter to an initial state. The state machine counter generates an intermediate clock signal whenever the state machine increments through all states to return to the initial state. The intermediate clock is then applied to synchronize data between the first clock frequency and the second clock frequency independent of clock skew. </paragraph>
<paragraph id="P-0021" lvl="7"><number>&lsqb;0021&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight>: Bi-directional Data Syncronization Between Different Clock Frequencies. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a method for data synchronization between two different clock frequencies in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> contains unit A <highlight><bold>240</bold></highlight>. Generally, unit A <highlight><bold>240</bold></highlight> is a hardware device, such as a memory register or a processor for example. Unit A contains data <highlight><bold>230</bold></highlight> and data <highlight><bold>235</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a data clock <highlight><bold>210</bold></highlight>, CLKL <highlight><bold>210</bold></highlight>, provided to clock driver <highlight><bold>270</bold></highlight><highlight><italic>a </italic></highlight>for unit A <highlight><bold>240</bold></highlight>. The clock driver <highlight><bold>270</bold></highlight><highlight><italic>a </italic></highlight>provides drive power for the CLKL <highlight><bold>210</bold></highlight> signal. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> also contains unit B <highlight><bold>250</bold></highlight>, which is generally a hardware device operating at a different clock frequency than unit A. Unit B contains data <highlight><bold>290</bold></highlight> and data <highlight><bold>295</bold></highlight> which are clocked by CLKH <highlight><bold>220</bold></highlight>. The frequency of the CLKH <highlight><bold>220</bold></highlight> data clock is an integer multiple &ldquo;N&rdquo; of the CLKL <highlight><bold>210</bold></highlight> data clock frequency, such that frequency of CKLH <highlight><bold>220</bold></highlight> is equivalent to &ldquo;N&rdquo; times the frequency of CLKL <highlight><bold>210</bold></highlight>. For example, if CLKL has a frequency of one and CLKH has a frequency of three, then &ldquo;N&rdquo; is equal to three. Generally, the CLKH <highlight><bold>220</bold></highlight> data clock is derived from the CLKL <highlight><bold>210</bold></highlight> data clock by a clock multiplier. Clock multipliers and dividers are known in the art and will not be discussed. However, both CLKL <highlight><bold>210</bold></highlight> and CLKH <highlight><bold>220</bold></highlight> may be derived from another clock operating at a higher frequency than either CLKL <highlight><bold>210</bold></highlight> or CLKH <highlight><bold>220</bold></highlight> by use of a clock divider. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates CLKH <highlight><bold>220</bold></highlight>, provided to clock driver <highlight><bold>270</bold></highlight><highlight><italic>b </italic></highlight>for unit B <highlight><bold>250</bold></highlight>. The clock driver <highlight><bold>270</bold></highlight><highlight><italic>b </italic></highlight>provides drive power for the CLKH <highlight><bold>220</bold></highlight> signal. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> also shows a data sync unit <highlight><bold>200</bold></highlight> positioned between unit A <highlight><bold>240</bold></highlight> and unit B <highlight><bold>250</bold></highlight>. Data sync unit <highlight><bold>200</bold></highlight> is generally a state machine capable to synchronize data between different clock frequencies independent of clock skew. Data sync unit <highlight><bold>200</bold></highlight> additionally contains hardware to provide known delay. The term &ldquo;data sync&rdquo; is used interchangeably with &ldquo;data synchronization&rdquo; throughout this specification, and is understood to have the same meaning. Data sync unit <highlight><bold>200</bold></highlight> may also be implemented using hardware or hardware emulation. Data sync unit <highlight><bold>200</bold></highlight> receives CLKL <highlight><bold>210</bold></highlight> and CLKH <highlight><bold>220</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates data <highlight><bold>230</bold></highlight> clocked by CLKL in unit A <highlight><bold>240</bold></highlight> synchronized to data <highlight><bold>290</bold></highlight> through data sync unit <highlight><bold>200</bold></highlight>. Data <highlight><bold>295</bold></highlight> in unit B clocked by CLKH <highlight><bold>220</bold></highlight> is shown synchronized to data <highlight><bold>235</bold></highlight> in unit A clocked by CLKL <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a state diagram of a data synchonization unit <highlight><bold>200</bold></highlight> in an example of the invention. Data syncronization unit <highlight><bold>200</bold></highlight> is a state machine counter having &ldquo;N&rdquo; states, where &ldquo;N&rdquo; is an integer number coresponding to the ratio of two clock signal frequencies that are to be synchronized. A counter reset <highlight><bold>310</bold></highlight> allows the state machine to be set to an initial, or zero state <highlight><bold>301</bold></highlight>, by the application of a clock signal. After the counter is reset to the initial state by a reset clock, the state machine advances one state for each cycle of an applied counter clock. Generally, two data clocks are provided to the state machine. The data clocks have different frequencies by an integer ratio. For example, in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, CLKL <highlight><bold>210</bold></highlight> and CLKH <highlight><bold>220</bold></highlight> are provided to the data sync unit <highlight><bold>200</bold></highlight> to synchronize data between the two clock frequencies. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The number of states &ldquo;N&rdquo; of the state machine is predetermined based upon the frequency ratio of the data clocks to be synchronized. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an initial state <highlight><bold>301</bold></highlight>, a first state <highlight><bold>302</bold></highlight>, a second state <highlight><bold>303</bold></highlight>, and additional states <highlight><bold>304</bold></highlight> up to a final state &ldquo;N&minus;1&rdquo; <highlight><bold>305</bold></highlight>. The state machine <highlight><bold>200</bold></highlight> generates a rising edge when changing from the final state &ldquo;N&minus;1&rdquo; <highlight><bold>305</bold></highlight> to the intial state <highlight><bold>301</bold></highlight>. For example, two clock signals have an integer frequency ratio of five; therefore &ldquo;N&rdquo; is five. The second clock has a frequency five times that of the first clock. In the present example, state machine <highlight><bold>200</bold></highlight> would have five states, zero through four. The first clock is applied to the counter reset <highlight><bold>310</bold></highlight> one time. The second clock is applied to increment the state machine through the five states. A clock rising edge is generated every time the state machine returns to the intial state, thereby creating an intermediate clock signal with a known timing relationship to both clocks. The intermediate clock signal may then be applied to synchronize data between the first and second clocks using a known delay such as a flip-flop for example even though the clocks may have arbitrary skew. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In one embodiment, the state machine may be additionally or alternatively configured to generate a rising edge at the transition to the final &ldquo;N&minus;1&rdquo; state to provide a clock signal one clock period ahead of the intermediate clock signal. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a process flow diagram of a state machine counter in an example of the invention. Data at two different clock frequncies may be sychnchronized using the steps illustrated in Process <highlight><bold>400</bold></highlight>. Process <highlight><bold>400</bold></highlight> begins in step <highlight><bold>410</bold></highlight>. A first clock signal is provided to a state machine counter <highlight><bold>200</bold></highlight> in step <highlight><bold>410</bold></highlight>. The first clock signal is generally a digital data clock signal such as CLKL <highlight><bold>210</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The first clock signal may be derived from a high-frequency system clock using a divider, or the clock may be derived from a clocked data-containing device. The state machine counter <highlight><bold>200</bold></highlight> is generally a hardware device or devices operated by instructions executed by a processor. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In step <highlight><bold>420</bold></highlight>, a second clock signal is provided to the state machine counter. The second clock signal frequency is an integer multiple of the first clock signal frequency, and may be derived in a similar manner to the first clock signal. The first and second clock signals are automatically provided to the state machine whenever data synchronization between different frequencies is necessary. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In step <highlight><bold>430</bold></highlight>, the first clock signal is applied to reset the state machine to an initial state. The initial state reset <highlight><bold>310</bold></highlight> returns the state machine to the beginning of a counting cycle. The state machine counter is reset one time by the first clock to provide a known timing relationship to the first clock signal. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In step <highlight><bold>440</bold></highlight>, the counter is incremented with the second clock signal. The second clock signal advances the state machine counter one state for each clock period of the second clock signal. In step <highlight><bold>450</bold></highlight>, the state machine generates an intermediate clock signal. A rising edge is generated each time the counter transistions from a final state &ldquo;N&minus;1&rdquo; <highlight><bold>305</bold></highlight> to the intial state <highlight><bold>301</bold></highlight> to begin the counting cycle again. The state machine continues counting until a counter reset <highlight><bold>310</bold></highlight> is applied for as long as the device is operating. The intermediate clock signal created by the state machine has the frequency of the first clock signal, the timing of the second clock signal, and a known timing relationship to the first clock signal. In an embodiment, a second intermediate clock signal is generated by the generation of a rising edge for every transition to the &ldquo;N&minus;1&rdquo; <highlight><bold>305</bold></highlight> state. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In step <highlight><bold>460</bold></highlight>, the intermediate clock signal is applied to synchronize data between the first clock frequency and the second clock frequency. Generally, the intermediate clock signal is utilized to synchronize data at the different clock frequencies. The intermediate clock signal has the timing of the second clock signal and the frequency of the first clock signal enabling data synchronization by reclocking the data through a known delay such as a flip-flop for example. Data synchonization may occur at any time after the state machine counter is generating the intermediate clock signal. Reclocking data is understood to mean the process of applying a particular clock signal to a data signal to correlate the data signal to the specific clock signal frequency. Reclocking may be accomplished in a variety of ways, such as clocking a memory register, or through a flip-flop for example. To reclock data is to change the data frequency to the reclock frequency. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a timing diagram and method for data synchronization in an example of the invention. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> contains a timing diagram illustrating three clock signals CLKL <highlight><bold>510</bold></highlight>, CLKH <highlight><bold>520</bold></highlight> and CLKA <highlight><bold>515</bold></highlight>. Clock signal CLKH <highlight><bold>520</bold></highlight> has a frequency that is an integer multiple of CLKL <highlight><bold>510</bold></highlight>. As illustrated, CLKA <highlight><bold>515</bold></highlight> has the same frequency as CLKL <highlight><bold>510</bold></highlight>, but the same positive duty cycle as the period of CLKH <highlight><bold>520</bold></highlight>. Generally, CLKA <highlight><bold>515</bold></highlight> is generated by data sync unit such as data sync unit <highlight><bold>200</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts CLKL <highlight><bold>510</bold></highlight> and CLKH <highlight><bold>520</bold></highlight> with rising edges aligned. However, there may be arbitrary skew between CLKL <highlight><bold>510</bold></highlight> and CLKH <highlight><bold>520</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates data synchronization from CLKL <highlight><bold>510</bold></highlight> to CLKH <highlight><bold>520</bold></highlight>. A data bit is clocked by CLKL <highlight><bold>510</bold></highlight> to produce DATAL <highlight><bold>530</bold></highlight>. Generally, DATAL <highlight><bold>530</bold></highlight> is provided by a device such as unit A <highlight><bold>240</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. DATAL <highlight><bold>530</bold></highlight> is delayed by two cycles of CLKH <highlight><bold>520</bold></highlight> through flip-flops <highlight><bold>501</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>501</bold></highlight><highlight><italic>c </italic></highlight>to produce DATAL<highlight><bold>2</bold></highlight>. The delay provided by flip-flops <highlight><bold>501</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>501</bold></highlight><highlight><italic>c </italic></highlight>is a known delay that removes any timing uncertainty that could arise from clock skew between CLKL <highlight><bold>510</bold></highlight> and CLKA <highlight><bold>515</bold></highlight>. The delayed data DATAL<highlight><bold>2</bold></highlight> is then provided to a flip-flop <highlight><bold>501</bold></highlight><highlight><italic>d </italic></highlight>clocked by the intermediate clock signal CLKA <highlight><bold>515</bold></highlight>, to create DATAA <highlight><bold>532</bold></highlight>. Finally, DATAA <highlight><bold>532</bold></highlight> is provided to another flip-flop <highlight><bold>501</bold></highlight><highlight><italic>e </italic></highlight>clocked by CLKH <highlight><bold>520</bold></highlight>. Clock CLKA <highlight><bold>515</bold></highlight>, and clock CLKH <highlight><bold>520</bold></highlight> have a known timing relationship so no further steps are necessary and synchronization of data from CLKL <highlight><bold>510</bold></highlight> to CLKH <highlight><bold>520</bold></highlight> is complete. Any manner of providing a known delay may substitute for a flip-flop. Generally, the synchronization of data from CLKL <highlight><bold>510</bold></highlight> to CLKH <highlight><bold>520</bold></highlight> occurs automatically whenever a data sync unit <highlight><bold>200</bold></highlight> is operational. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a second diagram and method for data synchronization in an example of the invention. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> contains a timing diagram illustrating three clock signals CLKL <highlight><bold>610</bold></highlight>, CLKH <highlight><bold>620</bold></highlight> and CLKA <highlight><bold>615</bold></highlight>. Clock signal CLKH <highlight><bold>620</bold></highlight> has a frequency that is an integer multiple of CLKL <highlight><bold>610</bold></highlight>. As illustrated, CLKA <highlight><bold>615</bold></highlight> has the same frequency as CLKL <highlight><bold>610</bold></highlight> but the timing relationship of CLKH <highlight><bold>620</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts CLKL <highlight><bold>610</bold></highlight> and CLKH <highlight><bold>620</bold></highlight> with rising edges aligned. However, there may be arbitrary skew between CLKL <highlight><bold>610</bold></highlight> and CLKH <highlight><bold>620</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates data synchronization from CLKH <highlight><bold>610</bold></highlight> to CLKL <highlight><bold>620</bold></highlight>. A data bit is clocked by CLKH <highlight><bold>620</bold></highlight> to produce DATAH<highlight><bold>0</bold></highlight> <highlight><bold>695</bold></highlight>. Generally, DATAH<highlight><bold>0</bold></highlight> is provided by a device such as unit B <highlight><bold>250</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. DATAH<highlight><bold>0</bold></highlight> <highlight><bold>695</bold></highlight> is provided to a flip-flop <highlight><bold>601</bold></highlight><highlight><italic>b </italic></highlight>clocked by the intermediate clock, CLKLA <highlight><bold>615</bold></highlight>, to produce DATAA <highlight><bold>637</bold></highlight>. To remove uncertainty due to possible clock slew, DATAA is delayed by one cycle of CLKH <highlight><bold>620</bold></highlight> through flip-flop <highlight><bold>601</bold></highlight><highlight><italic>c </italic></highlight>to produce DATAA<highlight><bold>2</bold></highlight> <highlight><bold>636</bold></highlight>. Providing DATAA<highlight><bold>2</bold></highlight> to flip-flop <highlight><bold>601</bold></highlight> clocked by CLKL <highlight><bold>610</bold></highlight> produces DATAL <highlight><bold>635</bold></highlight>. Synchronization of data from CLKH <highlight><bold>620</bold></highlight> to CLKL <highlight><bold>610</bold></highlight> is complete. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Any manner of providing a known delay may be utilized to substitute for a flip-flop. Generally, the synchronization of data from CLKH <highlight><bold>620</bold></highlight> to CLKL <highlight><bold>610</bold></highlight> occurs automatically whenever a data sync unit <highlight><bold>200</bold></highlight> is operational. Generally, the methods of <cross-reference target="DRAWINGS">FIGS. 5 and 6</cross-reference> are combined to provide bi-directional data synchronization as in data synchronization unit <highlight><bold>200</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. However, the methods may be used separately or in concert depending on the application. </paragraph>
<paragraph id="P-0038" lvl="7"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference>: Distribution of a Clock Signal for Synchronization. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a timing diagram and method for distributing a clock signal in an example of the invention. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> contains a timing diagram illustrating four clock signals CLKL <highlight><bold>710</bold></highlight>, CLKH <highlight><bold>720</bold></highlight> and CLKA <highlight><bold>715</bold></highlight> and CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight>. Clock signal CLKH <highlight><bold>720</bold></highlight> has a frequency that is an integer multiple of CLKL <highlight><bold>710</bold></highlight>. As illustrated, CLKA <highlight><bold>715</bold></highlight> has the same frequency as CLKL <highlight><bold>710</bold></highlight> but the timing relationship of CLKH <highlight><bold>720</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts CLKL <highlight><bold>710</bold></highlight> and CLKH <highlight><bold>720</bold></highlight> with rising edges aligned. However, there may be arbitrary skew between CLKL <highlight><bold>710</bold></highlight> and CLKH <highlight><bold>720</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a precursor clock CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight>, which is CLKA <highlight><bold>715</bold></highlight> stepped ahead by one clock period. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a data sync unit <highlight><bold>700</bold></highlight>. Data sync unit <highlight><bold>700</bold></highlight> produces CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight>. The CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight> signal is distributed to different geographic regions of a device such as a processor for example. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows flip-flop <highlight><bold>701</bold></highlight><highlight><italic>a</italic></highlight>, flip-flop <highlight><bold>701</bold></highlight><highlight><italic>b</italic></highlight>, and flip-flop <highlight><bold>701</bold></highlight><highlight><italic>c </italic></highlight>at different locations. The distributed precursor clock CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight> is latched by a local CLKH <highlight><bold>720</bold></highlight> though a flip-flop, such as flip-flops <highlight><bold>701</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>701</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>701</bold></highlight><highlight><italic>c </italic></highlight>for example, to produce CLKA <highlight><bold>715</bold></highlight>. Each geographic location where the CLKA<highlight><bold>0</bold></highlight> <highlight><bold>714</bold></highlight> clock is provided will generate the same CLKA <highlight><bold>720</bold></highlight>, allowing easier data synchronization between different geographic regions with fewer timing jitter or clock skew problems. </paragraph>
<paragraph id="P-0041" lvl="7"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>: Bi-directional Data Syncronization Between Fractional Clock Frequencies </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The methods of FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight> may be extended to provide bi-directional data synchronization between non-integer clock frequencies. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a method for data synchronization between fractional clock frequencies. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> contains unit A <highlight><bold>840</bold></highlight>. Generally, unit A <highlight><bold>840</bold></highlight> is a hardware device, such as a memory register or a processor for example. Unit A contains data <highlight><bold>830</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a data clock, CLKL <highlight><bold>810</bold></highlight>, provided to unit A <highlight><bold>840</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> contains unit B <highlight><bold>860</bold></highlight>, which is generally a hardware device operating at a fractional clock frequency to unit A. Unit B contains data <highlight><bold>890</bold></highlight> clocked by CLKH <highlight><bold>820</bold></highlight>. The frequency of the CLKH <highlight><bold>820</bold></highlight> data clock is a fractional multiple of the CLKL <highlight><bold>810</bold></highlight> data clock frequency, such that CLKH <highlight><bold>820</bold></highlight> is equivalent to an integer &ldquo;X&rdquo; times CLKL <highlight><bold>810</bold></highlight> divided by an integer &ldquo;Y.&rdquo;</paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> also contains unit M <highlight><bold>860</bold></highlight>, which is a hardware or software device operating at a fractional clock frequency to unit A. Unit M is introduced to provide a bridge between non-integer clock frequencies. Unit M contains data <highlight><bold>860</bold></highlight> clocked by CLKM <highlight><bold>815</bold></highlight>. The frequency of the CLKM <highlight><bold>815</bold></highlight> data clock is selected to be a fractional multiple of the CLKL <highlight><bold>810</bold></highlight> data clock frequency, such that CLKM <highlight><bold>815</bold></highlight> is equivalent to CLKL <highlight><bold>810</bold></highlight> divided by the integer &ldquo;Y.&rdquo;</paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows data sync unit <highlight><bold>800</bold></highlight> positioned between unit A <highlight><bold>840</bold></highlight> and unit M <highlight><bold>850</bold></highlight>. Data sync unit <highlight><bold>800</bold></highlight> is generally a state machine capable to synchronize data between different clock frequencies independent of clock skew. Data sync unit <highlight><bold>800</bold></highlight> additionally contains hardware to provide known delay. Data sync unit <highlight><bold>800</bold></highlight> receives CLKL <highlight><bold>810</bold></highlight> and CLKM <highlight><bold>815</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates data <highlight><bold>830</bold></highlight> clocked by CLKL <highlight><bold>810</bold></highlight> in unit A <highlight><bold>840</bold></highlight> synchronized to data <highlight><bold>865</bold></highlight> through data sync unit <highlight><bold>800</bold></highlight>. Data sync unit <highlight><bold>800</bold></highlight> is operationally identical to data sync unit <highlight><bold>200</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows a second data sync unit <highlight><bold>801</bold></highlight> positioned between unit B <highlight><bold>860</bold></highlight> and unit M <highlight><bold>850</bold></highlight>. Data sync unit <highlight><bold>801</bold></highlight> is generally a state machine capable to synchronize data between different clock frequencies independent of clock skew. Data sync unit <highlight><bold>801</bold></highlight> additionally contains hardware to provide known delay. Data sync unit <highlight><bold>801</bold></highlight> may be implemented in software or hardware. Data sync unit <highlight><bold>801</bold></highlight> receives CLKH <highlight><bold>820</bold></highlight> and CLKM <highlight><bold>815</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates data <highlight><bold>865</bold></highlight> clocked by CLKM <highlight><bold>810</bold></highlight> in unit M <highlight><bold>850</bold></highlight> synchronized to data <highlight><bold>890</bold></highlight> in Unit B <highlight><bold>860</bold></highlight> through data sync unit <highlight><bold>801</bold></highlight>. Data sync unit <highlight><bold>801</bold></highlight> is operationally identical to data sync unit <highlight><bold>800</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Data may be synchronized between unit A <highlight><bold>840</bold></highlight> operating at the CLKL <highlight><bold>810</bold></highlight> frequency and unit B <highlight><bold>860</bold></highlight> operating at the CLKH <highlight><bold>820</bold></highlight> frequency through unit M <highlight><bold>850</bold></highlight> and data sync units <highlight><bold>800</bold></highlight> and <highlight><bold>801</bold></highlight>. Data in unit A <highlight><bold>840</bold></highlight> is first synchronized to unit M using the data sync unit <highlight><bold>800</bold></highlight> by application of the methods and apparatus described in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight>. A second data synchronization between unit M <highlight><bold>850</bold></highlight> and unit B <highlight><bold>860</bold></highlight> using the methods and apparatus described in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight> completes the data synchronization between unit A <highlight><bold>840</bold></highlight> and unit B <highlight><bold>860</bold></highlight>. The methods described in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight> allow bi-directional data synchronization and apply equally to the synchronization between unit A <highlight><bold>840</bold></highlight> and unit B <highlight><bold>860</bold></highlight> through unit M <highlight><bold>850</bold></highlight>. A significant advantage of the present invention is that data synchronization completely independent of clock skew is possible between fractional clock frequencies. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The above description of illustrated embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather, the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>providing a first clock signal having a first frequency to a state machine counter; </claim-text>
<claim-text>providing a second clock signal having a second frequency that is an integer multiple of the first clock frequency to the state machine counter; </claim-text>
<claim-text>applying the first clock signal to reset the state machine counter to an initial state; </claim-text>
<claim-text>incrementing the state machine counter with the second clock signal wherein the state machine counter has an integer number of states equivalent to the ratio of the second clock signal frequency to the first clock signal frequency; </claim-text>
<claim-text>generating an intermediate clock signal with the state machine counter wherein the counter produces an output signal whenever the state machine increments through all states to return to the initial state; and </claim-text>
<claim-text>applying the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein applying the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency further comprises: 
<claim-text>delaying a data signal at the first clock frequency by two cycles of the second clock frequency; </claim-text>
<claim-text>reclocking the data signal at the first clock frequency to the intermediate clock; and </claim-text>
<claim-text>reclocking the data signal at the intermediate clock to the second frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the applying the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency further comprises: 
<claim-text>reclocking a data signal at the second clock frequency to the intermediate clock; </claim-text>
<claim-text>delaying the data signal at the intermediate clock by one cycle of the second clock frequency; and </claim-text>
<claim-text>reclocking the data signal at the intermediate clock to the first clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>providing the second clock signal to a second state machine counter; </claim-text>
<claim-text>providing a third clock signal having a third frequency that is an integer fraction of the first clock frequency to the second state machine counter; </claim-text>
<claim-text>applying the second clock signal to reset the second state machine counter to an initial state; </claim-text>
<claim-text>incrementing the second state machine counter with the third clock signal wherein the second state machine counter has an integer number of states equivalent to the ratio of the second clock frequency to the third clock frequency; </claim-text>
<claim-text>generating a second intermediate clock signal with the second state machine counter wherein the second state machine counter produces an output signal whenever the state machine increments through all possible states and returns to the initial state; and </claim-text>
<claim-text>applying the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the applying the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency further comprises: 
<claim-text>delaying a data signal at the second clock frequency by two cycles of the third clock frequency; </claim-text>
<claim-text>reclocking the data signal at the second clock frequency to the second intermediate clock frequency; and </claim-text>
<claim-text>reclocking the data signal at the second intermediate clock frequency to the third frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein data at the first clock frequency is synchronized to data at the third clock frequency by first synchronizing data to the second clock frequency then synchronizing the data at the second clock frequency to the third clock frequency. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the applying the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency further comprises: 
<claim-text>reclocking a data signal at the third clock frequency to the second intermediate clock; </claim-text>
<claim-text>delaying the data signal at the second intermediate clock by one cycle of the third clock frequency; and </claim-text>
<claim-text>reclocking the data signal at the second intermediate frequency to the second clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein data at the first clock frequency is synchronized to data at the third clock frequency by first synchronizing the data to the second clock frequency then synchronizing the data at the second clock frequency to the third clock frequency. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the state machine counter generates a precursor intermediate clock signal that is one period of the second clock frequency ahead of the intermediate clock signal. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising: 
<claim-text>distributing the precursor intermediate clock signal to different locations; </claim-text>
<claim-text>latching the precursor intermediate clock signal to a local second clock signal to generate a distributed intermediate clock signal; and, </claim-text>
<claim-text>synchronizing data at different locations using the distributed intermediate clock signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A product comprising: 
<claim-text>instructions to direct a processor to provide a first clock signal having a first frequency to a state machine counter, provide a second clock signal having a second frequency that is an integer multiple of the first clock frequency to the state machine counter, apply the first clock signal to reset the state machine counter to an initial state, increment the state machine counter with the second clock signal wherein the state machine counter has an integer number of states equivalent to the ratio of the second clock signal frequency to the first clock signal frequency, generate an intermediate clock signal with the state machine counter wherein the counter produces an output signal whenever the state machine increments through all states to return to the initial state, and, apply the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency, and; </claim-text>
<claim-text>machine readable media to store the instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the instructions to apply the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency further comprises instructions to: 
<claim-text>delay a data signal at the first clock frequency by two cycles of the second clock frequency, </claim-text>
<claim-text>reclock the data signal at the first clock frequency to the intermediate clock, and, </claim-text>
<claim-text>reclock the data signal at the intermediate clock to the second frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the instruction to apply the intermediate clock signal to synchronize data between the first clock frequency and the second clock frequency further comprises instructions to: 
<claim-text>reclock a data signal at the second clock frequency to the intermediate clock, </claim-text>
<claim-text>delay the data signal at the intermediate clock frequency by one cycle of the second clock frequency, and, </claim-text>
<claim-text>reclock the data signal at the intermediate clock to the first clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> further comprising: 
<claim-text>instructions to provide the second clock signal to a second state machine counter, provide a third clock signal having a third frequency that is an integer fraction of the first clock frequency to the second state machine counter, apply the second clock signal to reset the second state machine counter to an initial state, increment the second state machine counter with the third clock signal wherein the second state machine counter has an integer number of states equivalent to the ratio of the second clock frequency to the third clock frequency, generate a second intermediate clock signal with the second state machine counter wherein the second state machine counter produces an output signal whenever the state machine increments through all possible states and returns to the initial state, and, apply the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency, and; </claim-text>
<claim-text>machine readable media to store the instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the instructions to apply the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency further comprise instructions to: 
<claim-text>delay a data signal at the second clock frequency by two cycles of the third clock frequency; </claim-text>
<claim-text>reclock the data signal at the second clock frequency to the second intermediate clock; and </claim-text>
<claim-text>reclock the data signal at the second intermediate clock to the third frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein data at the first clock frequency is synchronized to data at the third clock frequency by first synchronizing data to the second clock frequency then synchronizing the data at the second clock frequency to the third clock frequency. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the instructions to apply the second intermediate clock signal to synchronize data between the second clock frequency and the third clock frequency further comprise instructions to: 
<claim-text>reclock a data signal at the third clock frequency to the second intermediate clock; </claim-text>
<claim-text>delay the data signal at the second intermediate clock frequency by one cycle of the third clock frequency; and </claim-text>
<claim-text>reclock the data signal at the second intermediate clock to the second clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein data at the first clock frequency is synchronized to data at the third clock frequency by first synchronizing the data to the second clock frequency then synchronizing the data at the second clock frequency to the third clock frequency. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the state machine counter generates a precursor intermediate clock signal that is one period of the second clock frequency ahead of the intermediate clock signal. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> further comprising instructions to: 
<claim-text>distribute the precursor intermediate clock signal to different locations, </claim-text>
<claim-text>latch the precursor intermediate clock signal to a local second clock signal to generate a distributed intermediate clock signal, and, </claim-text>
<claim-text>synchronize data at different locations using the distributed intermediate clock signal, and; machine readable media to store the instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. An apparatus comprising: 
<claim-text>a first data processing device clocked at a first frequency; </claim-text>
<claim-text>a second data processing device clocked at a second frequency that is an integer multiple of the first frequency; </claim-text>
<claim-text>instructions to direct a processor to provide a first clock signal having the first frequency to a state machine counter, provide a second clock signal having the second frequency to the state machine counter, apply the first clock signal to reset the state machine counter to an initial state, increment the state machine counter with the second clock signal wherein the state machine counter has an integer number of states equivalent to the ratio of the second clock signal frequency to the first clock signal frequency, generate an intermediate clock signal with the state machine counter wherein the counter produces an output signal whenever the state machine increments through all states to return to the initial state, and, apply the intermediate clock signal to synchronize data between the first data processing device and the second data processing device, and; </claim-text>
<claim-text>machine readable media to store the instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the instructions to apply the intermediate clock signal to synchronize data between the first data processing device and the second data processing device further comprises instructions to: 
<claim-text>delay a data signal at the first clock frequency by two cycles of the second clock frequency, </claim-text>
<claim-text>reclock the data signal at the first clock frequency to the intermediate clock, and, </claim-text>
<claim-text>reclock the data signal at the intermediate clock to the second frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the instruction to apply the intermediate clock signal to synchronize data between the first data processing device and the second data processing device further comprises instructions to: 
<claim-text>reclock a data signal at the second clock frequency to the intermediate clock, </claim-text>
<claim-text>delay the data signal at the intermediate clock by one cycle of the second clock frequency, and, </claim-text>
<claim-text>reclock the data signal at the intermediate clock to the first clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further comprising: 
<claim-text>a third data processing device clocked at a third frequency that is an integer fraction of the first clock frequency; </claim-text>
<claim-text>instructions to provide the second clock signal to a second state machine counter, provide a third clock signal having the third frequency to the second state machine counter, apply the second clock signal to reset the second state machine counter to an initial state, increment the second state machine counter with the third clock signal wherein the second state machine counter has an integer number of states equivalent to the ratio of the third clock frequency to the second clock frequency, generate a second intermediate clock signal with the second state machine counter wherein the second state machine counter produces an output signal whenever the state machine increments through all states and returns to the initial state, and, apply the second intermediate clock signal to synchronize data between the second data processing device and the third data processing device, and; machine readable media to store the instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the instructions to apply the second intermediate clock signal to synchronize data between the second data processing device and the third data processing device further comprise instructions to: 
<claim-text>delay a data signal at the second clock frequency by two cycles of the third clock frequency; </claim-text>
<claim-text>reclock the data signal at the second clock frequency to the second intermediate clock frequency; and </claim-text>
<claim-text>reclock the data signal at the second intermediate clock frequency to the third frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein data is synchronized between the first data processing device and the third data processing device by first synchronizing data between the first data processing device and the second data processing device then synchronizing the data between the second data processing device and the third data processing device. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the instructions to apply the second intermediate clock signal to synchronize data between the second data processing device and the third data processing device further comprise instructions to: 
<claim-text>reclock a data signal at the third clock frequency to the second intermediate clock; </claim-text>
<claim-text>delay the data signal at the second intermediate clock by one cycle of the third clock frequency; and </claim-text>
<claim-text>reclock the data signal at the second intermediate clock to the second clock frequency. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein data is synchronized between the first data processing device and the third data processing device by first synchronizing data between the first data processing device and the second data processing device then synchronizing the data between the second data processing device and the third data processing device. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the state machine counter generates a precursor intermediate clock signal that is one period of the second clock frequency ahead of the intermediate clock signal. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> further comprising instructions to: 
<claim-text>distribute the precursor intermediate clock signal to different locations, </claim-text>
<claim-text>latch the precursor intermediate clock signal to a local second clock signal to generate a distributed intermediate clock signal, and, </claim-text>
<claim-text>synchronize data at different locations using the distributed intermediate clock signal, and; machine readable media to store the instructions.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002606A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002606A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002606A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002606A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002606A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002606A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002606A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002606A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002606A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
