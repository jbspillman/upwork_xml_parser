<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005098A1-20030102-D00000.TIF SYSTEM "US20030005098A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005098A1-20030102-D00001.TIF SYSTEM "US20030005098A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005098A1-20030102-D00002.TIF SYSTEM "US20030005098A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005098A1-20030102-D00003.TIF SYSTEM "US20030005098A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005098A1-20030102-D00004.TIF SYSTEM "US20030005098A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005098A1-20030102-D00005.TIF SYSTEM "US20030005098A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005098</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894065</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/177</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/173</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F015/16</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>223000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>221000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>245000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus for using dynamic grouping data to group attributes relating to computer systems</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<middle-name>Michael</middle-name>
<family-name>Koelle</family-name>
</name>
<residence>
<residence-us>
<city>Marlborough</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jeffrey</given-name>
<middle-name>Phillip</middle-name>
<family-name>Snover</family-name>
</name>
<residence>
<residence-us>
<city>Woodinville</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Brian</given-name>
<middle-name>James</middle-name>
<family-name>Tarbox</family-name>
</name>
<residence>
<residence-us>
<city>Littleton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee, Carstens, Yee &amp; Cahoon, LLP</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, apparatus, and computer implemented instructions for grouping based on attributes in a data processing system. Messages are sent indicating an availability of a set of attributes relating to data processing systems in which the attributes are used to create. A request is received from a requester to generate a group using selected attributes from the set of attributes. A group is generated based on the selected attributes. The group is returned to the requester. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to an improved data processing system, and in particular to a method and apparatus for managing data processing systems. Still more particularly, the present invention provides a method, apparatus, and computer implemented instructions for grouping devices and data processing systems using dynamic grouping data. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Many computer networks tend to be extremely large, especially those for large businesses. For example, a large network is one that contains thousands of nodes or more. Such networks are routine in business today, and as the number of network nodes reaches into the millions, they become less manageable through existing means. Another example of a large network is the Internet. The Internet has become a cultural fixture as a source of both information and entertainment. Many businesses are creating Internet sites as an integral part of their marketing efforts. Many federal, state, and local government agencies are also employing Internet sites for informational purposes. Additionally, some businesses may operate and manage domain name servers or server farms in providing services to users. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> These types of networks make managing the networks difficult without appropriate grouping mechanisms. Currently available grouping mechanisms involve defining a set of criteria to be matched and a process for the ongoing evaluation of this set of criteria. These processes are used to insure that a system maintains a correct identification of members in the set as changes occur in the network. These processes usually receive attributes for computer systems and generate groups based on the attributes. These attributes may include, for example, clock speed, processor type, number of processors, amount of memory, and hard drive space. The computer systems provide the grouping mechanism with a preset set of attributes. The data received from these computer systems are used by the grouping mechanism to generate groups for use in managing the network. For example, an operator or network administrator may create a group of computer systems that act as domain name system (DNS) servers. Then, when needed the operator may quickly identify which computer systems are DNS servers. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Currently available mechanisms rely on a static definition of grouping attributes and are proprietary. With these systems, a user is unable to generate groupings based on new attributes without having the grouping software being reconfigured to use the new attributes. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Therefore, it would be advantageous to have an improved method and apparatus for generating groupings without relying on static definitions of grouping attributes. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention provides a method, apparatus, and computer implemented instructions for grouping based on attributes in a data processing system. Messages are sent indicating an availability of a set of attributes relating to data processing systems in which the attributes are used to create. A request is received from a requester to generate a group using selected attributes from the set of attributes. A group is generated based on the selected attributes. The group is returned to the requester. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a pictorial representation of a network of data processing systems in which the present invention may be implemented; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram illustrating data flow used in exchanging data used for dynamic grouping in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a diagram of data flow used in generating a group in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart of a process used for creating and broadcasting attributes in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of a process used for processing the request for a group in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart of a process used for processing a query to create a group in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart of a process used for requesting a group in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the depicted example, server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI local bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI local buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an IBM e-Server pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system or LINUX operating system. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, and CD-ROM drive <highlight><bold>330</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide nonvolatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The present invention provides a method, apparatus, and computer implemented instructions for allowing flexible extensions to a grouping process. The mechanism of the present invention allows defining meta-data, which describes which attribute may be searched and which attributes may be returned. Meta-data is data that describes other data. Data dictionaries and repositories are examples of meta-data. The meta tag that describes the content of a Web page is called meta-data. The term may also refer to any file or database that holds information about another database&apos;s structure, attributes, processing or changes. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The present invention realizes that is impossible to anticipate a range of attributes, which may be considered interesting to a user or a program. The mechanism of the present invention allows the dynamic addition of new attributes. With this mechanism, new programs may become suppliers of grouping data, which increases the value of both of the new programs and the overall system. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The meta-data in these examples is common to all suppliers of data, making it possible to create new higher order groups by performing operations against multiple groups at a time. For example, a user could obtain a group of all machines that are e-mail servers, and a group of all machines that have a low-bandwidth network connection. The user can then intersect these two groups, and determine the machines that require a connection upgrade before the latest e-mail server software is installed on them. This combines information gathered from an inventory application, which machines are e-mail servers, with information gathered from a network discovery application, which machines have low-bandwidth connections. By &ldquo;common&rdquo;, it is meant that the exchange of meta-data and membership information is done in the same way, regardless of the data providers; that is, there are no barriers unique to any particular data provider that have to be surmounted before data can be exchanged. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The mechanism of the present invention allows services to &ldquo;advertise&rdquo; attributes that may be used to generate groups. This feature allows any type of service, even those that are unknown, to supply any piece of data as a grouping attribute. The user of the grouping service can then ask for a group to be created and receive the membership of the group. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> diagram illustrating data flow used in exchanging data used for dynamic grouping is depicted in accordance with a preferred embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates components used to group attributes according to the present invention. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In this example, data provider <highlight><bold>400</bold></highlight> advertises or sends messages identifying the names of data for which data provider <highlight><bold>400</bold></highlight> is able to use in creating groups. Data provider <highlight><bold>400</bold></highlight> may be implemented in software in a data processing system, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The names of data may include, for example, a processor type, processor clock speed, an amount of memory, memory type, bus system, bus clock speed, storage capacity, connection, video card specification, and operating system. In the depicted implementation, no special format to the exchanged data is present. Rather, Java objects are sent through remote methods. For example, when a data provider advertises its metadata, it remotely calls a method in network management engine <highlight><bold>408</bold></highlight>, &ldquo;advertiseData&rdquo;, and passes objects representing the meta-data. The same procedure is true for sending requests to create a group (the remote method call is &ldquo;createGroup&rdquo;), and group membership information (the remote method call is &ldquo;sendMembership&rdquo;). The attributes, which may be used to create groups, are stored in data source <highlight><bold>402</bold></highlight>. Additionally, attribute information received from data processing systems also may be stored within data source <highlight><bold>402</bold></highlight>. In these examples, data source <highlight><bold>402</bold></highlight> is a database. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Data provider <highlight><bold>400</bold></highlight> receives attribute information from computer system <highlight><bold>404</bold></highlight> and computer system <highlight><bold>406</bold></highlight> in these examples. The attribute information may be added to data source <highlight><bold>402</bold></highlight> using various mapping mechanisms. No particular format is required in these examples. Any format recognized or usable in data source <highlight><bold>402</bold></highlight> may be employed. A standard ASCII string using a category, data scheme may be employed. Data provider <highlight><bold>400</bold></highlight> may receive information in various forms and map the information into an appropriate form for data source <highlight><bold>402</bold></highlight>. For example, data provider <highlight><bold>400</bold></highlight> may provide information on a system name and memory size may insert the system name and the memory size as an integer in data source <highlight><bold>402</bold></highlight>. Processes within data provider <highlight><bold>400</bold></highlight> may be used to map information received from a computer system in to a form for storage in data source <highlight><bold>402</bold></highlight>. These computer systems may be clients or servers, such as data processing system <highlight><bold>200</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> or data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Only two computer systems are shown in these examples for purposes of illustration. In actual practice, meta-data may be received from hundreds or thousands of computer systems. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The advertisement of names of data, which may be used to create groups, is received by network management engine <highlight><bold>408</bold></highlight> in these examples. Network management engine <highlight><bold>408</bold></highlight> is a program or application, which may request a group from data provider <highlight><bold>400</bold></highlight>. The request is based on the advertisement made by data provider <highlight><bold>400</bold></highlight>. In these examples, the user is presented with the names of advertised data, and may select any of the available advertised data when creating groups. Network management engine <highlight><bold>408</bold></highlight> then takes the user&apos;s selections and constructs an object to use in calling the remote method in data provider <highlight><bold>400</bold></highlight> for performing the appropriate action. In this example, network management engine <highlight><bold>408</bold></highlight> generates a request to identify all computers with available hard drive space of more than 40 megabytes. In response to this request, data provider <highlight><bold>400</bold></highlight> returns a group or set of results that fit the required characteristics for the hard drive space attribute. This set of results may be, for example: &lcub;system25.dev.tivoli.com, phi.dev.tivoli.com&rcub;, which are DNS names in this example. Other mechanisms may be used for obtaining names. The identified systems need not be DNS servers. The different types of groups that may be created depend on the particular implementation. These groups may be, for example, groups of users, groups of applications, or groups of data processing systems. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In these examples, data provider <highlight><bold>400</bold></highlight> includes processes for generating queries against items or entries in a database, such as data source <highlight><bold>402</bold></highlight>. The results received from data source <highlight><bold>402</bold></highlight> form a group meeting the query, which is based on the request for a new group. This result is place into a format for use by the requester. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In Java, the result returned from a database query is stored in a ResultSet object, part of Java&apos;s java.sql package. Data provider <highlight><bold>400</bold></highlight> traverses this ResultSet to generate a vector of objects, which are forwarded to the requester via the method that is used to communicate the membership of the SmartSet to the requester. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> diagram of data flow used in generating a group is depicted in accordance with a preferred embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a more detailed illustration of data flow used in requesting a group in response to advertisement of attributes, which may be used to generate groups. In particular these groupings may be used by a network management engine. SmartSets are groupings that allow a user to group network resources that should be managed similarly and apply policies to these groups. As a result, a user can manage a set of resources as though it were a single device. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Data Provider <highlight><bold>500</bold></highlight> advertises an ability to participate in a grouping system such as SmartSets, and also advertises the type of information contained in its database (step S<highlight><bold>1</bold></highlight>). This advertisement is received by the table cache server <highlight><bold>506</bold></highlight> and stored in directory service <highlight><bold>502</bold></highlight> (Step S<highlight><bold>9</bold></highlight>). Directory service <highlight><bold>502</bold></highlight> contains smartset metadata in this example. Client <highlight><bold>504</bold></highlight> requests that a group be created based on the advertised capabilities by asking table cache server <highlight><bold>506</bold></highlight> (Step S<highlight><bold>3</bold></highlight>). If the group already exists, table cache server <highlight><bold>506</bold></highlight> obtains the membership information from its own data source, membership database <highlight><bold>508</bold></highlight>, and sends it to client <highlight><bold>504</bold></highlight> (Steps S<highlight><bold>5</bold></highlight> and S<highlight><bold>6</bold></highlight>). Table cache server <highlight><bold>506</bold></highlight> holds grouping data so more than one client, such as client <highlight><bold>504</bold></highlight> can access an already constructed SmartSet, if one already exists. If the group does not exist, table cache server <highlight><bold>506</bold></highlight> asks data provider <highlight><bold>500</bold></highlight> to create the group (Step S<highlight><bold>7</bold></highlight>). Data provider <highlight><bold>500</bold></highlight> creates a group by making calls to data provider data source <highlight><bold>510</bold></highlight> (Step S<highlight><bold>8</bold></highlight>). This data source is not required to be a database; it may be any data source that is capable of determining that data belongs to a requested set. The membership data is sent from data provider <highlight><bold>500</bold></highlight> to the table cache server <highlight><bold>506</bold></highlight> (Step S<highlight><bold>11</bold></highlight>), and table cache server <highlight><bold>506</bold></highlight> stores the membership data in its data source (Step S<highlight><bold>5</bold></highlight>) so the next time a similar group is requested, the membership calculations do not have to be performed again, unless explicitly requested. Table cache server <highlight><bold>506</bold></highlight> then sends the membership information to client <highlight><bold>504</bold></highlight> (Step S<highlight><bold>6</bold></highlight>). In some special cases, updates to data provider data source <highlight><bold>510</bold></highlight> may be sent directly to table cache server <highlight><bold>506</bold></highlight>, bypassing the need for table cache server <highlight><bold>506</bold></highlight> to make requests to the data provider <highlight><bold>500</bold></highlight> (Step S<highlight><bold>12</bold></highlight>). Step S<highlight><bold>12</bold></highlight> is an optional step in these examples. Client <highlight><bold>504</bold></highlight> in this diagram is an instance of network management engine <highlight><bold>408</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Directory service <highlight><bold>502</bold></highlight> serves as the communication backbone. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> flowchart of a process used for creating and broadcasting attributes is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, may be implemented in a data provider, such as data provider <highlight><bold>400</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The process begins by identifying attributes used for creating group and returnable data (step <highlight><bold>600</bold></highlight>). This step includes user input from a user, such as a programmer who creates the data provider to advertise the data. This step actually occurs as part of the creation of the program, in this example. Next, the attributes and returnable data are broadcast (step <highlight><bold>602</bold></highlight>) with the process terminating thereafter. In the depicted examples, the broadcast is made to all devices on a network. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> flowchart of a process used for processing the request for a group is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> may be implemented in data provider, such as data provider <highlight><bold>400</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The process begins by receiving a request for a new group from a requester (step <highlight><bold>700</bold></highlight>). No particular format is used in generating requests. Requestors will have to know the application programming interface (API) for this brand of data providers in general, to know that methods like &ldquo;advertiseData&rdquo;, &ldquo;createGroup&rdquo;, and &ldquo;sendMembership&rdquo; exist. &ldquo;advertiseData&rdquo; is a method for the data provider to communicate the attributes, which may be used for grouping to the Table cache server. Next, &ldquo;createGroup&rdquo; is a method for the requestor to request that the Table cache server obtain the members of a SmartSet, which uses calls to the database. &ldquo;sendmembership&rdquo; is a method for the Table cache server to communicate the membership of a SmartSet to the requester. In this particular case, the request is obtained through a &ldquo;createGroup&rdquo; remote method call. Again, Java objects are used for passing the actual data through these method calls. The components of the Java objects are also part of the API. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A query is made to a database using the request (step <highlight><bold>702</bold></highlight>). This request may be, for example, a request for a group of all computers having a UNIX operating system. A result is returned from the database (step <highlight><bold>704</bold></highlight>). In this example, a remote method is called, which contains a Java object that describes the membership information. No special formatting is required. The Java object for describing membership information is defined in the API and simply consists of an array of strings. Then, the new group is returned to the requestor (step <highlight><bold>706</bold></highlight>) with the process terminating thereafter. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart of a process used for processing a query to create a group is depicted in accordance with a preferred embodiment of the present invention. This process may be implemented in a database, such as data source <highlight><bold>402</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The process begins by receiving a query from a requester (step <highlight><bold>800</bold></highlight>). For example, the query may be to select entries from the database in which the memory size is greater than <highlight><bold>128</bold></highlight>. In response to receiving the query, a result is created using the query (step <highlight><bold>802</bold></highlight>). The result, in these examples, may be an object containing entries matching the query. For example, the set may be &ldquo;system25.dev.tivoli.com, phi.dev.tivoli.com&rdquo;, which are DNS names. The result is returned to the requestor (step <highlight><bold>804</bold></highlight>) with the process terminating thereafter. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> flowchart of a process used for requesting a group is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may be implemented in software, such as network management engine <highlight><bold>408</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The process begins by receiving a message, identifying attributes and data returnable (step <highlight><bold>900</bold></highlight>). This message is received from a data provider. Next, a request is generated for grouping using data matching attributes in the message (step <highlight><bold>902</bold></highlight>). A request is then sent to the data provider broadcasting the message (step <highlight><bold>904</bold></highlight>). A result is received (step <highlight><bold>906</bold></highlight>) with the process terminating thereafter. The result may be a group containing zero or more computer systems, in this example. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Thus, the present invention provides an improved method, apparatus, and computer implemented instructions for grouping based on attributes that may be dynamically defined. This mechanism allows for management of networks based on a dynamic set of attributes that may be changed as the network changes. The mechanism of the present invention allows for dynamic generation of groups in response to receiving a request for a group containing certain attributes. This mechanism allows for groups to be generated on non-preexisting data. Non-preexisting data is data that may be added to a database after the database has been initially populated with data. In other words, new attributes may be added to the database after the database has been used to provide groups in response to requests. Accordingly, subsequent requests for groups may result in generation of groups using the new attributes. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> For example, the groups may be used for installing software based on various attributes of computers within a network. Different groups may require different installation procedures. Further, policy based management of the network may be applied to grouping using the mechanism of the present invention. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> For example, an operator may identify a group of machines as a group of DNS servers. With this grouping, the servers may be quickly identified if routing problems occur. In addition, the operator also may notice a computer that should be in the group or a computer exists in the group, which should not be in the group. With these groups, actions, such as the status of a set of print servers may be identified. Other types of data collection and polling may be performed on these groups. By allowing the use of new attributes in generating groups, the mechanism of the present invention allows for more flexibility in managing network data processing systems. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method in a data processing system for grouping based on attributes, the method comprising: 
<claim-text>sending messages indicating an availability of a set of attributes relating to data processing systems in which the attributes are used to create groups; </claim-text>
<claim-text>receiving a request from a requester to generate a group using selected attributes from the set of attributes; </claim-text>
<claim-text>dynamically generating a group based on the selected attributes; and </claim-text>
<claim-text>returning the group to the requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the groups are at least one of application groups, user groups, and data processing system groups. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the set of attributes include at least one of a processor type, processor clock speed, an amount of memory, memory type, bus system, bus clock speed, storage capacity, connection, video card specification, and operating system. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the group identifies a set of data processing systems. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the group is used to install software to members of the group. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the requester is a software process in a data processing system used to request members of the group. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the group is generated using non-preexisting data. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the group is generated using meta-data describing attributes within the set of attributes. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A data processing system comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a communications unit connected to the bus system; </claim-text>
<claim-text>a memory connected to the bus system, wherein the memory includes as set of instructions; and </claim-text>
<claim-text>a processing unit connected to the bus system, wherein the processing unit executes the set of instructions to send messages indicating a set of attributes relating to data processing systems on which groups are created; receive a request from a requester to generate a group using selected attributes from the set of attributes; dynamically generate a group based on the selected attributes; and return the group to the requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the bus system is a single bus. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the bus system includes a primary bus and a secondary bus. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the processing unit includes a plurality of processors. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the communications unit is one of a modem and Ethernet adapter. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A data processing system for grouping based on attributes, the data processing system comprising: 
<claim-text>sending means for sending messages indicating an availability of a set of attributes relating to data processing systems in which the attributes are used to create groups; </claim-text>
<claim-text>receiving means for receiving a request from a requester to generate a group using selected attributes from the set of attributes; </claim-text>
<claim-text>dynamically generating means for dynamically generating a group based on the selected attributes; and </claim-text>
<claim-text>returning means for returning the group to the requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the groups are at least one of application groups, user groups, and data processing system groups. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the set of attributes include at least one of a processor type, processor clock speed, an amount of memory, memory type, bus system, bus clock speed, storage capacity, connection, video card specification, and operating system. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the group identifies a set of data processing systems. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the group is used to install software to members of the group. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the requester is a software process in a data processing system used to request members of the group. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the group is generated using non-preexisting data. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer program product in a computer readable medium for grouping based on attributes, the computer program product comprising: 
<claim-text>first instructions for sending messages indicating an availability of a set of attributes relating to data processing systems in which the attributes are used to create groups; </claim-text>
<claim-text>second instructions for receiving a request from a requester to generate a group using selected attributes from the set of attributes; </claim-text>
<claim-text>third instructions for dynamically generating a group based on the selected attributes; and </claim-text>
<claim-text>fourth instructions for returning the group to the requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the groups are at least one of application groups, user groups, and data processing system groups. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the set of attributes include at least one of a processor type, processor clock speed, an amount of memory, memory type, bus system, bus clock speed, storage capacity, connection, video card specification, and operating system. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the group identifies a set of data processing systems. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the group is used to install software to members of the group. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the requester is a software process in a data processing system used to request members of the group. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the group is generated using non-preexisting data.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005098A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005098A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005098A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005098A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005098A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005098A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
