<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004770A1-20030102-D00000.TIF SYSTEM "US20030004770A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00001.TIF SYSTEM "US20030004770A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00002.TIF SYSTEM "US20030004770A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00003.TIF SYSTEM "US20030004770A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00004.TIF SYSTEM "US20030004770A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00005.TIF SYSTEM "US20030004770A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00006.TIF SYSTEM "US20030004770A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004770A1-20030102-D00007.TIF SYSTEM "US20030004770A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004770</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894074</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/60</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>008000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method, system, and program for generating a workflow</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wayne</given-name>
<middle-name>F.</middle-name>
<family-name>Miller</family-name>
</name>
<residence>
<residence-us>
<city>Cary</city>
<state>NC</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Alan</given-name>
<middle-name>Tsu-I</middle-name>
<family-name>Yaung</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>David W. Victor</name-1>
<name-2>KONRAD RAYNES &amp; VICTOR LLP</name-2>
<address>
<address-1>Suite 210</address-1>
<address-2>315 S. Beverly Drive</address-2>
<city>Beverly Hills</city>
<state>CA</state>
<postalcode>90212</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Provided is a method, system, and program for generating a workflow. A plurality of graphical user interfaces (GUT) panels are displayed through which a user may define nodes of a workflow and associate at least one action and user with each node. During workflow execution of each node, the associated user performs the associated action. Further, multiple nodes define actions that process at least one object that is routed through multiple nodes of the workflow. A workflow model is generated from information entered into the GUI panels including the nodes and workflow defined by the user through the GUI panels that process the at least one object. The workflow model is transformed into a workflow definition language (WDL) file. The WDL file is then transferred to a workflow server, wherein the workflow server interacts with a database to implement the workflow model defined in the WDL file in the database. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to the following copending and commonly assigned patent filed on the same date herewith, which are incorporated herein by reference in their entirety: </paragraph>
<paragraph id="P-0002" lvl="2"><number>&lsqb;0002&rsqb;</number> &ldquo;Method, System, and Program for Using Objects In Data Stores During Execution of a Workflow&rdquo;, having attorney docket no. STL920000095US1; and &ldquo;Method, System, and Program for Executing a Workflow&rdquo;, having attorney docket no. STL920000099US1.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The present invention relates to a method, system, and program for generating a workflow. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A workflow program allows businesses and other organizations to define their business operations as a computer model known as a workflow. A workflow defines a series of processes to be performed by users at a client computer. The user activities at the client computers may involve updating an electronic form, reviewing information, etc. After one user in the workflow performs a specified action, the work item or other information is then routed to one or more further nodes where further action may be taken. For instance, an on-line purchase of a product may involve numerous steps, such as receiving the customer order, routing the customer order to the credit department to process the bill and then routing the order to the shipment department to prepare the shipment. Once the shipment is prepared, the product may be shipped and information on the purchase is then transferred to the customer service department to take any further action. Each of these processes may be defined as nodes in a workflow. A workflow program would then route the customer order to the business agents designated to handle the job. For instance, the initial order would be received by the order department and then routed to a person in shipping and billing. Once the bill and package are prepared, a further invoice may be forwarded to shipping. After shipping sends the package, the shipping agent may then enter information into the invoice and forward the electronic invoice to customer service for any follow up action. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A workflow is designed using workflow software, such as the International Business Machines (IBM) MQSERIES** workflow software product. A process modeler is a person that analyzes the business operations, determines how the information related to the operations is routed electronically to client computers, and then defines a workflow model of the operations. The workflow model may be coded in the FlowMark Definition Language (FDL). The workflow model is then imported into a Runtime program that verifies and translates the workflow model into a process template. An instance of the process template can then be invoked to automates the sequence of events defined by the model. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> There is a continued need in the art to provide improved techniques for building and utilizing workflow models. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Provided is a method, system, and program for generating a workflow. A plurality of graphical user interfaces (GUI) panels are displayed through which a user may define nodes of a workflow and associate at least one action and user with each node. During workflow execution of each node, the associated user performs the associated action. Further, multiple nodes define actions that process at least one object that is routed through multiple nodes of the workflow. A workflow model is generated from information entered into the GUI panels including the nodes and workflow defined by the user through the GUI panels that process the at least one object. The workflow model is transformed into a workflow definition language (WDL) file. The WDL file is then transferred to a workflow server, wherein the workflow server interacts with a database to implement the workflow model defined in the WDL file in the database. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The workflow definition language (WDL) may comprise the FlowMark Definition Language (FDL). </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In further implementations, the displayed GUI panel illustrates a layout of the workflow, including graphical representations of nodes and paths between the nodes. The user may manipulate instances of the graphical representations of the nodes and paths in the workflow within the GUI panel to design a layout of the nodes of the workflow. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In still further implementations, a request by one user associated with one node is received to access the node when no other user is accessing the node. The user requesting access to the node is granted access to the node to perform the action associated with the node. The node is locked to prevent other users associated with the node from accessing the node. The lock on the node is released when the user granted access to the node completes the action associated with the node, wherein other users can access the node after the lock is released. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Still further, the at least one object routed through the nodes for processing comprises at least one electronic document that is modified by users and routed through the nodes of the workflow. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Moreover, the object processed at the nodes is included in a work packet, wherein the work packet is capable of including multiple objects. Modifications to at least one object in the work packet is received by one user performing actions associated with one node, wherein multiple users perform actions at different nodes to process objects in the work packet routed through the nodes. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The described implementations provide a GUI builder to allow a user to generate a workflow that is automatically translated into a workflow definition language (WDL) for use by a workflow server. In this way, the workflow model generated by the GUI builder may be transformed and used with different vendor workflow engines that are compatible with the workflow definition language (WDL). Further, with the described implementations, the nodes may be designed to be document centric, in that the processing occurs with respect to work items assigned to each node.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Referring now to the drawings in which like reference numbers represent corresponding parts throughout: </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a workflow computing environment in which aspects of the invention are implemented; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>7</bold></highlight> illustrate graphical user interface (GUI) panels used to design a workflow model in accordance with implementations of the invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates logic implemented in a buildtime program to generate a workflow model and worfklow definition language (WDL) file in accordance with implementations of the invention; and </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates logic performed by a workflow server to execute a workflow in accordance with implementations of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a workflow environment implementation in which the invention is realized. A workflow engine <highlight><bold>2</bold></highlight> includes a runtime database <highlight><bold>4</bold></highlight> and a workflow server <highlight><bold>6</bold></highlight>, such as the IBM MQSeries Workflow server. The workflow server <highlight><bold>6</bold></highlight> is capable of transforming a workflow model coded in a workflow definition language (WDL) file <highlight><bold>10</bold></highlight>, such as FDL, into a process template <highlight><bold>8</bold></highlight> implemented in the runtime database <highlight><bold>4</bold></highlight>. The runtime database <highlight><bold>4</bold></highlight> stores database tables that implement the data structures that provide the status and setup information needed for workflow process execution. Whenever the state of a process activity changes, such information is recorded in the runtime database <highlight><bold>4</bold></highlight>. The runtime database <highlight><bold>4</bold></highlight> may be implemented using any database program known in the art, such as IBM DB2.** </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The workflow server <highlight><bold>6</bold></highlight> coordinates and manages the execution of processes for a defined process template <highlight><bold>8</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> executes any programs associated with a process defined for the workflow, interprets the process definitions, creates process instances and manages their execution, manages processes and states, logs events, communicates with users as part of the workflow, etc. The workflow server <highlight><bold>6</bold></highlight> may include a database client program (not shown) to access and update records related to the workflow being processed maintained in the runtime database <highlight><bold>4</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> processing may be distributed across multiple computers to achieve workload balancing. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The workflow clients <highlight><bold>12</bold></highlight><highlight><italic>a, b . . . n </italic></highlight>represent the client computers that execute workflow application program interfaces (APIs) to perform workflow related actions and activities and return messages to the workflow server <highlight><bold>6</bold></highlight>. The workflow clients <highlight><bold>12</bold></highlight><highlight><italic>a, b . . . n </italic></highlight>thus comprise instances of the workflow code on the client computers that allow users to interface with the executing workflow and the workflow server <highlight><bold>6</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> would execute activity programs as part of executing the workflow and transmit messages and data to the workflow client <highlight><bold>12</bold></highlight> to request user action to proceed with the workflow. The actions associated with the nodes and executed by the workflow server <highlight><bold>6</bold></highlight> may comprise Java servlets. The workflow client <highlight><bold>12</bold></highlight> may comprise a Web browser capable of executing Java scripts transferred from the Java servlet executing on the workflow server <highlight><bold>6</bold></highlight>. Further, details on implementations and interactions of the workflow server <highlight><bold>6</bold></highlight> and client <highlight><bold>12</bold></highlight> are described in the IBM publication &ldquo;IBM MQSeries Workflow: Concepts and Architecture, Version 3.3&rdquo;, IBM document no. GH12-6285-03 (March, 2001), which publication is incorporated herein by reference in its entirety. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> A workflow builder <highlight><bold>20</bold></highlight> comprises a system including a buildtime program <highlight><bold>22</bold></highlight> that implements a plurality of graphical user interface (GUI) panels in which a user may define the components of a workflow model <highlight><bold>24</bold></highlight>. A workflow translator <highlight><bold>26</bold></highlight> converts the workflow model <highlight><bold>24</bold></highlight>, with the defined workflow components, into a workflow definition language (WDL) file <highlight><bold>10</bold></highlight> that implements the workflow model <highlight><bold>24</bold></highlight>. The workflow definition language (WDL) may comprise the FlowMark Definition Language (FDL), Workflow Process Definition Language (WPDL) or any other workflow definition language known in the art that is used to define workflows. The workflow translator <highlight><bold>24</bold></highlight> would transfer the WDL file <highlight><bold>10</bold></highlight> to the workflow server <highlight><bold>6</bold></highlight> to transform into a process template <highlight><bold>8</bold></highlight> in the runtime database <highlight><bold>4</bold></highlight> in a manner known in the art. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The workflow engine <highlight><bold>2</bold></highlight>, and each of the program components therein, such as the runtime database <highlight><bold>4</bold></highlight> and workflow server <highlight><bold>6</bold></highlight>, may be implemented in one or more computing machines. The workflow clients <highlight><bold>12</bold></highlight> which provide the workflow interface to users may be implemented on one or more client machines. The workflow builder <highlight><bold>20</bold></highlight>, including the buildtime program <highlight><bold>22</bold></highlight> and workflow translator <highlight><bold>26</bold></highlight> programs, may be implemented on one or more computing machines. Any portion of the workflow engine <highlight><bold>2</bold></highlight>, workflow builder <highlight><bold>20</bold></highlight>, and/or workflow client <highlight><bold>12</bold></highlight>, and program components therein, may be implemented on the same computing machines or separate machines. The computing machines used to implement the workflow engine <highlight><bold>2</bold></highlight>, workflow clients <highlight><bold>12</bold></highlight>, and workflow builder <highlight><bold>20</bold></highlight> may comprise any computing device known in the art, such as a server, workstation, mainframe, personal computer, laptop computer, hand held computer, telephony device, etc. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As discussed, the buildtime program <highlight><bold>22</bold></highlight> generates a series of graphical user interface (GUI) panels through which the user may define a workflow. Before utilizing the buildtime program <highlight><bold>22</bold></highlight>, the process modeler would plan the workflow and analyze the work the business performs, how it is performed, and by whom. The process modeler may then develop a workflow to generate a final product, which may comprise the result of the effort of a single business unit or the cumulative efforts of multiple users and units within an organization. To produce the final product, a workflow packet comprised of one or more documents would transfer through various user work stations in the company defined as nodes in the workflow to require the user associated with such node to handle and process and forward to another user to handle. A document is comprised of a multimedia item that has digital content. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> For instance, an insurance company may have to process numerous documents related to an insurance claim, such as photographs, appraisals, expert reports, etc. Employees may spend a substantial amount of time sorting through documents and associating the documents with particular claims. In the workflow model, all the documents related to a single claim would be part of a work packet that may move through various user stations to review and process. The workflow would comprise the flow of work and actions that are performed on the documents or workflow packet by multiple users in the system. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The workflow defines the sequence and boundaries of how the work is performed with respect to the documents in the workflow packet, and any restrictions on the order in which documents in the workflow packet must be processed. For instance, before the claim can proceed to a further step, a claims adjuster might be required to ensure that certain documents are included in the workflow packet for the claim before the workflow packet can proceed to further nodes in the workflow, e.g., determining the amount of compensation. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In workflow terminology, a worklist is a queue of work items. Each work item comprises a unit of work for a node in the workflow that is performed by the users associated with that node. Each work item may be associated with one work packet, which comprises documents or objects that are processed during the work defined for that work item. When a user at one node accesses the work item to perform the work defined therein, that workitem is locked, thereby preventing others at that node from accessing the work item. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> A worklist, which is a queue of work for the users of the organization to perform with respect to the workflow packet. The work items within the worklist can be handled by any of the employees/users assigned to the worklist. An action list defines the actions that a user can perform on the work packet objects associated with the work item, such as selections or data that may be entered in the work packet. For example, an adjuster in the claim process workflow can select an option to continue consideration of the claim if it appears valid or select an option to reject the claim. The workflow further consists of the paths defined as the connections between nodes which indicate the order of execution of nodes in the workflow. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example of a GUI panel <highlight><bold>50</bold></highlight> displayed by the buildtime program <highlight><bold>22</bold></highlight> illustrating a workflow <highlight><bold>52</bold></highlight> defined by a process modeler using workflow icons available in the GUI panel <highlight><bold>50</bold></highlight>. The workflow <highlight><bold>52</bold></highlight> has a start icon <highlight><bold>54</bold></highlight>, displayed as an icon having a green light, that indicates the start of the workflow and an end icon <highlight><bold>56</bold></highlight> is defined as indicating an end of the workflow. The start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons may be added automatically to the workflow <highlight><bold>52</bold></highlight> when the process modeler begins working on the workflow model <highlight><bold>24</bold></highlight>. Between the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons are a plurality of work nodes <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, and <highlight><bold>62</bold></highlight>, displayed as three stacked envelopes, that associate work items on the worklist and an action list for a specific point in a workflow <highlight><bold>52</bold></highlight>. A work node <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, <highlight><bold>62</bold></highlight> is a point in the workflow where work is performed. A user exit icon <highlight><bold>64</bold></highlight> indicates a user exit node where an application program is called to perform a background operation. Certain user exits may require that the called application program provide data to a work item in the workflow. Alternatively, the user exit may call an application program that may execute in the background, such as update a database, print reports, etc., while the workflow proceeds to further nodes. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As mentioned, the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons may be automatically added to the workflow <highlight><bold>52</bold></highlight> when the user starts a blank workflow model <highlight><bold>24</bold></highlight>. The user may move the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons to any location on the drawing surface. The user may select the control icons <highlight><bold>66</bold></highlight> and <highlight><bold>68</bold></highlight> to add work and user exit nodes, respectively, to the workflow. Control icon <highlight><bold>70</bold></highlight> is used to define a path between two nodes defining the sequence in which the nodes are processed, and the order in which the work items are processed. The path lines, which are shown as the arrows between the start <highlight><bold>54</bold></highlight>, end <highlight><bold>56</bold></highlight>, work and user exit icons <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, <highlight><bold>62</bold></highlight>, and <highlight><bold>64</bold></highlight> illustrate the operation flow from one node to another. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Once the process modeler has defined the general layout of a workflow using the control icons <highlight><bold>66</bold></highlight>, <highlight><bold>68</bold></highlight>, <highlight><bold>70</bold></highlight>, and <highlight><bold>72</bold></highlight>, as shown in the workflow <highlight><bold>52</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the process modeler may then use additional GUI panels shown in FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>7</bold></highlight> of the buildtime program <highlight><bold>22</bold></highlight> to associate particular users, actions and work items with the nodes. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a GUI panel <highlight><bold>100</bold></highlight> used to define properties for a new workflow being defined in the panel <highlight><bold>50</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. A description field <highlight><bold>102</bold></highlight> includes a description of the workflow being defined. An action list <highlight><bold>104</bold></highlight> is a list the actions that can be invoked at the nodes in the defined workflow. The actions may comprise programs that are executed at a particular node. In certain implementations, the actions comprise Java methods that the workflow server <highlight><bold>6</bold></highlight> executes when control proceeds to the node with which the method is associated. The program modeler would associate the actions in the action list with particular nodes. An access list <highlight><bold>106</bold></highlight> defines a mapping of users that can be assigned to nodes to perform the action associated with such node. Selection of the enable notification checkbox <highlight><bold>108</bold></highlight> causes a message to be sent to a specified user if the user associated with a node has not performed the action defined for the node within a specified time frame indicated in the deadline field <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> After defining the properties for the new workflow and placing icons in the drawing area and path arrows to define the workflow, the user would then use the GUI panels shown in FIGS. <highlight><bold>4</bold></highlight>-<highlight><bold>7</bold></highlight> to associate actions and a user with each node, where the associated user performs the associated action when the workflow server <highlight><bold>6</bold></highlight> processes the node according to the workflow. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a start node panel <highlight><bold>130</bold></highlight> in which the process modeler defines the action and user associated with the start node <highlight><bold>54</bold></highlight> in the workflow, i.e., the first user that will perform the action with respect to the item at the beginning of the workflow. The process modeler would select an action from the action list in the action field <highlight><bold>132</bold></highlight> and specify the user to perform the action at the start node in the user field <highlight><bold>134</bold></highlight>. The enable notification of deadline checkbox <highlight><bold>136</bold></highlight> may be selected to notify the user associated with the start node that a deadline has passed during which the user designated action for that node was not completed. Anyone, such as an administrator, user associated with node, or other user on the access list may receive the notification of the missed deadline for the start node <highlight><bold>54</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the property GUI panel <highlight><bold>150</bold></highlight> used to associate one or more actions and a user with one of the work nodes in the workflow, such as work nodes <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, and <highlight><bold>62</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The work nodes defined by the user may comprise a decision point node, collection point node, document node, and assign value node. A decision point node causes the workflow to proceed along a branch of execution based on selection by the user or some other action taken by an external application called at a previous work node. For instance, the path taken to the next node in the workflow may vary if the claim adjuster selects to reject the claim as opposed to approving the claim. A collection point node is a work node where certain documentation is gathered and added to the work packet. The collection node holds and manages work packages that cannot be processed completely until additional information is received. A document node represents a document in the workflow. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> illustrates the property panels used to define a user exit node that calls an external application to perform operations and perhaps transfer data back to the node for further processing. A user exit is a point in the workflow execution where a user exit routine can be given control, and transfer data back and forth from the external application to the node upon the occurrence of a user-specified event. Further, the user exit node may call an external application program to perform background operations while the workflow proceeds to the next work node. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Using all the above described panels shown in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>7</bold></highlight>, the process modeler can design a workflow model specifying work nodes and the actions associated with the work nodes, as well as the paths between the work nodes. If two paths lead into a node, such as the case with work node <highlight><bold>62</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, then the workflow will only proceed to the action specified for that next node once the actions associated with the two preceding nodes has completed. Before the user may use the buildtime program <highlight><bold>22</bold></highlight>, the user must define the access control lists, users, user groups, actions, action lists and worklist in a manner known in the art using application programming interfaces (APIs). The worklist would provide those work items assigned to users, indicating the work items a user may access when performing actions at a node. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates logic implemented in the workflow builder <highlight><bold>20</bold></highlight> and workflow engine <highlight><bold>2</bold></highlight> to generate a workflow in the runtime database <highlight><bold>4</bold></highlight> that may be invoked and executed. Control begins at block <highlight><bold>200</bold></highlight> with the buildtime program <highlight><bold>22</bold></highlight> receiving defined work lists, access control lists, and action lists. The buildtime program <highlight><bold>22</bold></highlight> and GUI panels therein are then used to generate (at block <highlight><bold>202</bold></highlight>) a workflow model <highlight><bold>24</bold></highlight> including a plurality of nodes, such as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, and paths therebetween defining the order of execution of the nodes in the workflow. At block <highlight><bold>204</bold></highlight>, the workflow translator <highlight><bold>26</bold></highlight> converts the workflow model <highlight><bold>24</bold></highlight> and the defined workflow, access lists, action lists, etc. into a WDL file coded using a workflow definition language known in the art and transfers the WDL file <highlight><bold>10</bold></highlight> to the workflow server <highlight><bold>6</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> then builds the process template <highlight><bold>8</bold></highlight>, including tables and other data structures, in the runtime database <highlight><bold>4</bold></highlight> that are used to implement the workflow model defined using the buildtime program <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In certain implementations, the workflow model <highlight><bold>24</bold></highlight> defined using the buildtime program <highlight><bold>22</bold></highlight> is document centric in that the actions performed at the node concern the processing of work packages that may comprise any content or object that is processed and routed through the workflow. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the logic performed by the workflow server <highlight><bold>6</bold></highlight> to execute the workflow logic generated using the buildtime program <highlight><bold>22</bold></highlight> GUI panel <highlight><bold>50</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. When a user invokes a workflow stored in the runtime database <highlight><bold>4</bold></highlight>, the workflow server <highlight><bold>6</bold></highlight> accesses (at block <highlight><bold>300</bold></highlight>) the start node of the invoked workflow by interacting with the runtime database <highlight><bold>4</bold></highlight> in a manner known in the art. From the properties defined for that node, the workflow server <highlight><bold>6</bold></highlight> determines (at block <highlight><bold>302</bold></highlight>) the actions and user associated with the node. The workflow server <highlight><bold>6</bold></highlight> further processes (at block <highlight><bold>304</bold></highlight>) the access list defined for the workflow to determine the work item for the accessed node. If (at block <highlight><bold>306</bold></highlight>) the determined work item currently accessed in the workflow is locked by another user at that node, then the workflow server <highlight><bold>6</bold></highlight> waits (at block <highlight><bold>308</bold></highlight>) for the lock on the work item(s) to be released. If the work item is not locked or after the lock is released, control proceeds to block <highlight><bold>310</bold></highlight> where the workflow server <highlight><bold>6</bold></highlight> places a lock on the determined work item. The workflow server <highlight><bold>6</bold></highlight> then executes (at block <highlight><bold>312</bold></highlight>) the action associated with the node and communicates data to the workflow client <highlight><bold>12</bold></highlight> of the determined user requesting user action. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> If (at block <highlight><bold>314</bold></highlight>) notification is enabled for the current node and the deadline has passed (at block <highlight><bold>316</bold></highlight>) without receiving a response from the user, then the workflow server <highlight><bold>6</bold></highlight> notifies the user specified with the enable notification that the deadline has passed. Upon receiving (at block <highlight><bold>318</bold></highlight>) a response from the user, which may comprise entering information, modifying a work item, adding a work item to the work package, selecting an option, etc., the workflow server <highlight><bold>6</bold></highlight> unlocks (at block <highlight><bold>320</bold></highlight>) the work item(s) previously locked for the user. If (at block <highlight><bold>322</bold></highlight>) the current node is the stop node, then control ends; otherwise, if there are further nodes to process in the workflow, then the workflow server <highlight><bold>6</bold></highlight> determines (at block <highlight><bold>324</bold></highlight>) from the path from the current node the next node in the workflow and accesses (at block <highlight><bold>326</bold></highlight>) the next node. Control then proceeds back to block <highlight><bold>326</bold></highlight> to process the next node. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The workflow logic of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> provides a document centric workflow in that the state of processing work items associated with the node controls the workflow because control cannot proceed to other subsequent nodes that process the locked work item until the node holding the lock completes execution and releases the lock on the work item. Thus, access to work items controls the flow through the workflow. The workflow builder <highlight><bold>20</bold></highlight> provides a GUI tool to allow the user to create a document centric workflow model and translate that workflow model <highlight><bold>24</bold></highlight>, including the defined worklists, access lists, action lists, etc., into a workflow definition language (WDL) file <highlight><bold>10</bold></highlight> that can be maintained and utilized in a robust workflow engine software product known in the art. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> With the described implementations, the workflow builder <highlight><bold>20</bold></highlight> generates a WDL file <highlight><bold>10</bold></highlight> that may be compatible with workflow engines from different vendors because different vendors may design their workflow engines to be compatible with the WDL format of the WDL file <highlight><bold>10</bold></highlight>. This allows the workflow model defined in the WDL file <highlight><bold>10</bold></highlight> to be transportable across different vendor workflow engine platforms. </paragraph>
<paragraph id="P-0045" lvl="7"><number>&lsqb;0045&rsqb;</number> Additional Implementation Details </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The preferred embodiments may be implemented as a method, apparatus or article of manufacture using standard programming and/or engineering techniques to produce software or code. The term &ldquo;article of manufacture&rdquo; as used herein refers to code or logic implemented in a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The workflow client and server may be implemented within any vendor workflow program known in the art. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In the described implementations, the actions were implemented as Java methods. Alternatively, the actions may be implemented in any programming language known in the art. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In the described implementations, particular icons were used to represent different information in the workflow, such as work nodes, exit nodes, etc. However, any icon design may be used to represent the workflow components. Further, additional graphical representations may be provided for different types of work nodes, e.g., collection work nodes, assign value node, decision point node, etc. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for generating a workflow, comprising: 
<claim-text>displaying a plurality of graphical user interfaces (GUI) panels through which a user is capable of defining nodes of a workflow and associating at least one action and user with each node, wherein the defined associated user performs the associated action at the node when executing the workflow, and wherein multiple nodes define actions that process at least one object that is routed through multiple nodes of the workflow; </claim-text>
<claim-text>generating from information entered into the GUI panels a workflow model including the nodes and workflow defined by the user through the GUI panels that process the at least one object; </claim-text>
<claim-text>transforming the workflow model into a workflow definition language (WDL) file; and </claim-text>
<claim-text>transferring the WDL file to a workflow server, wherein the workflow server interacts with a database to implement the workflow model defined in the WDL file in the database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the workflow definition language (WDL) comprises the FlowMark Definition Language (FDL). </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein one displayed GUI panel illustrates a layout of the workflow including graphical representations of nodes and paths between the nodes to enable the user to manipulate instances of the graphical representations of the nodes and paths in the work flow within the GUI panel to design a layout of the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein at least one graphical representation represents a work node, wherein for each graphical representation of the work node added to the GUI panel, further comprising: 
<claim-text>displaying a GUI panel including fields in which the user associates the at least one user and action with the work node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein at least one graphical representation represents a user exit node, wherein for each graphical representation of the user exit node added to the GUI panel, further comprising: 
<claim-text>displaying a GUI panel including fields in which the user associates at least one action to be performed in the background, wherein the workflow proceeds to the next node while the associated at least one background action is performed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the background action comprises a call to an application to perform an action with respect to the object. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>receiving a request by one user associated with one node to access the node when no other user is accessing the node; </claim-text>
<claim-text>granting the user requesting access to the node access to the node to perform the action associated with the node; </claim-text>
<claim-text>locking the node to prevent other users associated with the node from accessing the node; and </claim-text>
<claim-text>releasing the lock on the node when the user granted access to the node completes the action associated with the node, wherein other users can access the node after the lock is released. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if multiple nodes lead to one node in the workflow, then the workflow server when executing one instance of the workflow only proceeds to the node to which multiple nodes connect when the multiple nodes complete processing. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the at least one object routed through the nodes for processing comprises at least one electronic document that is modified by users and routed through the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object processed at the nodes is included in a work packet, wherein the work packet is capable of including multiple objects, further comprising: 
<claim-text>receiving modifications to at least one object in the work packet by one user performing actions associated with one node, wherein multiple users perform actions at different nodes to process objects in the work packet routed through the nodes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising: 
<claim-text>receiving at least one additional object to add to the work packet from at least one user performing actions from at least one node, wherein the work packet, including any added objects, is routed through the nodes of the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the objects in the work packet are capable of comprising documents, images, sound files, video files, and application data. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein multiple users at different nodes may concurrently process objects in the work packet. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A system for generating a workflow, comprising: 
<claim-text>a database; </claim-text>
<claim-text>a workflow server capable of interacting with the database; </claim-text>
<claim-text>a computer readable medium in communication with the workflow server; </claim-text>
<claim-text>means for displaying a plurality of graphical user interfaces (GUI) panels through which a user is capable of defining nodes of a workflow and associating at least one action and user with each node, wherein the associated user performs the associated action at the node when executing the workflow, and wherein multiple nodes define actions that process at least one object that is routed through multiple nodes of the workflow; </claim-text>
<claim-text>means for generating from information entered into the GUI panels a workflow model into the computer readable medium including the nodes and workflow defined by the user through the GUI panels that process the at least one object; </claim-text>
<claim-text>means for transforming the workflow model into a workflow definition language (WDL) file in the computer readable medium; and </claim-text>
<claim-text>means for transferring the WDL file from the computer readable medium to the workflow server, wherein the workflow server interacts with the database to implement the workflow model defined in the WDL file in the database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the workflow definition language (WDL) comprises the FlowMark Definition Language (FDL). </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein one displayed GUI panel illustrates a layout of the workflow including graphical representations of nodes and paths between the nodes to enable the user to manipulate instances of the graphical representations of the nodes and paths in the work flow within the GUI panel to design a layout of the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein at least one graphical representation indicates a work node, further comprising: 
<claim-text>means for displaying a GUI panel including fields in which the user associates the at least one user and action with the work node for each graphical representation of the work node added to the GUI panel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein at least one graphical representation indicates a user exit node, further comprising: 
<claim-text>means for displaying a GUI panel including fields in which the user associates at least one action to be performed in the background for each graphical representation of the user exit node added to the GUI panel, wherein the workflow proceeds to the next node while the associated at least one background action is performed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the background action comprises a call to an application to perform an action with respect to the object. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>means for receiving a request by one user associated with one node to access the node when no other user is accessing the node; </claim-text>
<claim-text>means for granting the user requesting access to the node access to the node to perform the action associated with the node; </claim-text>
<claim-text>means for locking the node to prevent other users associated with the node from accessing the node; and </claim-text>
<claim-text>means for releasing the lock on the node when the user granted access to the node completes the action associated with the node, wherein other users can access the node after the lock is released. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein if multiple nodes lead to one node in the workflow, then the workflow server when executing one instance of the workflow only proceeds to the node to which multiple nodes connect when the multiple nodes complete processing. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the at least one object routed through the nodes for processing comprises at least one electronic document that is modified by users and routed through the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the object processed at the nodes is included in a work packet, wherein the work packet is capable of including multiple objects, further comprising: 
<claim-text>means for receiving modifications to at least one object in the work packet by one user performing actions associated from at least one node, wherein multiple users perform actions at different nodes to process objects in the work packet routed through the nodes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>means for receiving at least one additional object to add to the work packet from at least one user performing actions at least node, wherein the work packet, including any added objects, is routed through the nodes of the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the objects in the work packet are capable of comprising documents, images, sound files, video files, and application data. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein multiple users at different nodes may concurrently process objects in the work packet. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. An article of manufacture including code for generating a workflow by: 
<claim-text>displaying a plurality of graphical user interfaces (GUI) panels through which a user is capable of defining nodes of a workflow and associating at least one action and user with each node, wherein the defined associated user performs the associated action at the node when executing the workflow, and wherein multiple nodes define actions that process at least one object that is routed through multiple nodes of the workflow; </claim-text>
<claim-text>generating from information entered into the GUI panels a workflow model including the nodes and workflow defined by the user through the GUI panels that process the at least one object; </claim-text>
<claim-text>transforming the workflow model into a workflow definition language (WDL) file; and </claim-text>
<claim-text>transferring the WDL file to a workflow server, wherein the workflow server interacts with a database to implement the workflow model defined in the WDL file in the database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the workflow definition language (WDL) comprises the FlowMark Definition Language (FDL). </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein one displayed GUI panel illustrates a layout of the workflow including graphical representations of nodes and paths between the nodes to enable the user to manipulate instances of the graphical representations of the nodes and paths in the work flow within the GUI panel to design a layout of the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein at least one graphical representation represents a work node, wherein for each graphical representation of the work node added to the GUI panel, further comprising: 
<claim-text>displaying a GUI panel including fields in which the user associates the at least one user and action with the work node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein at least one graphical representation represents a user exit node, wherein for each graphical representation of the user exit node added to the GUI panel, further comprising: displaying a GUI panel including fields in which the user associates at least one action to be performed in the background, wherein the workflow proceeds to the next node while the associated at least one background action is performed. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the background action comprises a call to an application to perform an action with respect to the object. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>receiving a request by one user associated with one node to access the node when no other user is accessing the node; </claim-text>
<claim-text>granting the user requesting access to the node access to the node to perform the action associated with the node; </claim-text>
<claim-text>locking the node to prevent other users associated with the node from accessing the node; and </claim-text>
<claim-text>releasing the lock on the node when the user granted access to the node completes the action associated with the node, wherein other users can access the node after the lock is released. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein if multiple nodes lead to one node in the workflow, then the workflow server when executing one instance of the workflow only proceeds to the node to which multiple nodes connect when the multiple nodes complete processing. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the at least one object routed through the nodes for processing comprises at least one electronic document that is modified by users and routed through the nodes of the workflow. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the object processed at the nodes is included in a work packet, wherein the work packet is capable of including multiple objects, further comprising: 
<claim-text>receiving modifications to at least one object in the work packet by one user performing actions associated with at least one node, wherein multiple users perform actions at different nodes to process objects in the work packet routed through the nodes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>receiving at least one additional object to add to the work packet from at least one user performing actions from at least node, wherein the work packet, including any added objects, is routed through the nodes of the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the objects in the work packet are capable of comprising documents, images, sound files, video files, and application data. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein multiple users at different nodes may concurrently process objects in the work packet.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004770A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004770A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004770A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004770A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004770A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004770A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004770A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004770A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
