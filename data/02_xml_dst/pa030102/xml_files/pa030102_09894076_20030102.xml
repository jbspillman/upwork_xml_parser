<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004771A1-20030102-D00000.TIF SYSTEM "US20030004771A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00001.TIF SYSTEM "US20030004771A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00002.TIF SYSTEM "US20030004771A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00003.TIF SYSTEM "US20030004771A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00004.TIF SYSTEM "US20030004771A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00005.TIF SYSTEM "US20030004771A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00006.TIF SYSTEM "US20030004771A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00007.TIF SYSTEM "US20030004771A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00008.TIF SYSTEM "US20030004771A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00009.TIF SYSTEM "US20030004771A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004771A1-20030102-D00010.TIF SYSTEM "US20030004771A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004771</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894076</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/60</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>008000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method, system, and program for executing a workflow</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Alan</given-name>
<middle-name>Tsu-I</middle-name>
<family-name>Yaung</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>David W. Victor</name-1>
<name-2>KONRAD RAYNES &amp; VICTOR LLP</name-2>
<address>
<address-1>Suite 210</address-1>
<address-2>315 S. Beverly Drive</address-2>
<city>Beverly Hills</city>
<state>CA</state>
<postalcode>90212</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Provided is a method, system, and program for executing a workflow. A workflow class implement methods and objects to provide information on and control of workflows. A work list class implements methods and objects to provide information on and manipulate work items assigned to the workflows. A work item class implements methods and objects to provide information on and manipulate work items when executing one workflow. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to the following copending and commonly assigned patent filed on the same date herewith, which are incorporated herein by reference in their entirety: </paragraph>
<paragraph id="P-0002" lvl="2"><number>&lsqb;0002&rsqb;</number> &ldquo;Method, System, and Program for Generating a Workflow&rdquo;, having attorney docket no. STL920000094US1; and </paragraph>
<paragraph id="P-0003" lvl="2"><number>&lsqb;0003&rsqb;</number> &ldquo;Method, System, and Program for Using Objects In Data Stores During Execution of a Workflow&rdquo;, having attorney docket no. STL920000095US1.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The present invention relates to a method, system, and program for executing a workflow. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A workflow program allows businesses and other organizations to define their business operations as a computer model known as a workflow. A workflow defines a series of processes to be performed by users at a client computer. The user activities at the client computers may involve updating an electronic form, reviewing information, etc. After one user in the workflow performs a specified action, the work item or other information is then routed to one or more further nodes where further action may be taken. For instance, an on-line purchase of a product may involve numerous steps, such as receiving the customer order, routing the customer order to the credit department to process the bill and then routing the order to the shipment department to prepare the shipment. Once the shipment is prepared, the product may be shipped and information on the purchase is then transferred to the customer service department to take any further action. Each of these processes may be defined as nodes in a workflow. A workflow program would then route the customer order to the business agents designated to handle the job. For instance, the initial order would be received by the order department and then routed to a person in shipping and billing. Once the bill and package are prepared, a further invoice may be forwarded to shipping. After shipping sends the package, the shipping agent may then enter information into the invoice and forward the electronic invoice to customer service for any follow up action. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A workflow is designed using workflow software, such as the International Business Machines (IBM) MQSeries Workflow software product. A process modeler is a person that analyzes the business operations, determines how the information related to the operations is routed electronically to client computers, and then defines a workflow model of the operations. The workflow model may be coded in the FlowMark Definition Language (FDL). The workflow model is then imported into a Runtime program that verifies and translates the workflow model into a process template. An instance of the process template can then be invoked to automates the sequence of events defined by the model. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> There is a continued need in the art to provide improved techniques for building and utilizing workflow models. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Provided is a method, system, and program for executing a workflow. Workflow classes implement methods and objects to provide information on and control of workflows. A work list class implements methods and objects to provide information on and manipulate work items assigned to the workflows. A work item class implements methods and objects to provide information on and manipulate work items when executing one workflow. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In further implementations, methods in the workflow class are called to begin and terminate an instance of one workflow comprising nodes. Methods in the work list class are called to obtain information on the work items and nodes in one workflow. Further, methods are called in the work item class to enable a user to perform actions associated with one work item in one workflow, wherein at least one work item is associated with each node in the workflow. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In further implementations, a workflow notification class includes methods and objects to provide information on notifications associated with the workflows. One notification is generated if an action associated with a work item is not performed in a specified time period. Methods in the workflow notification class are called to obtain information on one notification and control a state of the notification. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Further provided is a workflow service class including methods and objects to provide information on workflows associated with one workflow service. One method in the workflow service class is called to obtain a list of all workflows associated with one workflow service. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Still further, a workflow object maintaining information on one workflow is instantiated. The methods of the workflow class obtain information and control the workflow through the variables in the workflow object representing the workflow. A work list object maintaining information on work items and nodes in one workflow is instantiated. The methods of the work list class obtain information on work items and nodes in one workflow. One work item object for each work item in one workflow is instantiated. The methods of the work item class obtain information on work items from the work item objects. One work list object identifies one or more work items represented by work item objects and wherein one workflow object is associated with one or more work items. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The described implementations provide a class architecture to provide access to information on workflows and to execute and implement the operation of the workflow. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Referring now to the drawings in which like reference numbers represent corresponding parts throughout: </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a workflow computing environment in which aspects of the invention are implemented; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>7</bold></highlight> illustrate graphical user interface (GUI) panels used to design a workflow model in accordance with implementations of the invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates logic implemented in a buildtime program to generate a workflow model and workflow definition language (WDL) file in accordance with implementations of the invention; and </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates logic performed by a workflow server to execute a workflow in accordance with implementations of the invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an architecture of object oriented classes for implementing a workflow; and </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference> illustrate logic to utilize the methods and objects from the object oriented class architecture of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> to execute a workflow.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a workflow environment implementation in which the invention is realized. A workflow engine <highlight><bold>2</bold></highlight> includes a runtime database <highlight><bold>4</bold></highlight> and a workflow server <highlight><bold>6</bold></highlight>, such as the IBM MQSERIES Workflow server**. The workflow server <highlight><bold>6</bold></highlight> is capable of transforming a workflow model coded in a workflow definition language (WDL) file <highlight><bold>10</bold></highlight>, such as FDL, into a process template <highlight><bold>8</bold></highlight> implemented in the runtime database <highlight><bold>4</bold></highlight>. The runtime database <highlight><bold>4</bold></highlight> stores database tables that implement the data structures that provide the status and setup information needed for workflow process execution. Whenever the state of a process activity changes, such information is recorded in the runtime database <highlight><bold>4</bold></highlight>. The runtime database <highlight><bold>4</bold></highlight> may be implemented using any database program known in the art, such as IBM DB<highlight><bold>2</bold></highlight>.** <footnote id="FOO-00001">**MQSeries, IBM, and DB<highlight><bold>2</bold></highlight> are registered trademarks of International Business Machines Corp. </footnote></paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The workflow server <highlight><bold>6</bold></highlight> coordinates and manages the execution of processes for a defined process template <highlight><bold>8</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> executes any programs associated with a process defined for the workflow, interprets the process definitions, creates process instances and manages their execution, manages processes and states, logs events, communicates with users as part of the workflow, etc. The workflow server <highlight><bold>6</bold></highlight> may include a database client program (not shown) to access and update records related to the workflow being processed maintained in the runtime database <highlight><bold>4</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> processing may be distributed across multiple computers to achieve workload balancing. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The workflow clients <highlight><bold>12</bold></highlight><highlight><italic>a, b . . . n </italic></highlight>represent the client computers that execute workflow application program interfaces (APIs) to perform workflow related actions and activities and return messages to the workflow server <highlight><bold>6</bold></highlight>. The workflow clients <highlight><bold>12</bold></highlight><highlight><italic>a, b . . . n </italic></highlight>thus comprise instances of the workflow code on the client computers that allow users to interface with the executing workflow and the workflow server <highlight><bold>6</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> would execute activity programs as part of executing the workflow and transmit messages and data to the workflow client <highlight><bold>12</bold></highlight> to request user action to proceed with the workflow. The actions associated with the nodes and executed by the workflow server <highlight><bold>6</bold></highlight> may comprise Java servlets. The workflow client <highlight><bold>12</bold></highlight> may comprise a Web browser capable of executing Java scripts transferred from the Java servlet executing on the workflow server <highlight><bold>6</bold></highlight>. Further, details on implementations and interactions of the workflow server <highlight><bold>6</bold></highlight> and client <highlight><bold>12</bold></highlight> are described in the IBM publication &ldquo;IBM MQSeries Workflow: Concepts and Architecture, Version 3.3&rdquo;, IBM document no. GH12-6285-03 (March, 2001), which publication is incorporated herein by reference in its entirety. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> A workflow builder <highlight><bold>20</bold></highlight> comprises a system including a buildtime program <highlight><bold>22</bold></highlight> that implements a plurality of graphical user interface (GUI) panels in which a user may define the components of a workflow model <highlight><bold>24</bold></highlight>. A workflow translator <highlight><bold>26</bold></highlight> converts the workflow model <highlight><bold>24</bold></highlight>, with the defined workflow components, into a workflow definition language (WDL) file <highlight><bold>10</bold></highlight> that implements the workflow model <highlight><bold>24</bold></highlight>. The workflow definition language (WDL) may comprise the FlowMark Definition Language (FDL), Workflow Process Definition Language (WPDL) or any other workflow definition language known in the art that is used to define workflows. The workflow translator <highlight><bold>24</bold></highlight> would transfer the WDL file <highlight><bold>10</bold></highlight> to the workflow server <highlight><bold>6</bold></highlight> to transform into a process template <highlight><bold>8</bold></highlight> in the runtime database <highlight><bold>4</bold></highlight> in a manner known in the art. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The workflow engine <highlight><bold>2</bold></highlight>, and each of the program components therein, such as the runtime database <highlight><bold>4</bold></highlight> and workflow server <highlight><bold>6</bold></highlight>, may be implemented in one or more computing machines. The workflow clients <highlight><bold>12</bold></highlight> which provide the workflow interface to users may be implemented on one or more client machines. The workflow builder <highlight><bold>20</bold></highlight>, including the buildtime program <highlight><bold>22</bold></highlight> and workflow translator <highlight><bold>26</bold></highlight> programs, may be implemented on one or more computing machines. Any portion of the workflow engine <highlight><bold>2</bold></highlight>, workflow builder <highlight><bold>20</bold></highlight>, and/or workflow client <highlight><bold>12</bold></highlight>, and program components therein, may be implemented on the same computing machines or separate machines. The computing machines used to implement the workflow engine <highlight><bold>2</bold></highlight>, workflow clients <highlight><bold>12</bold></highlight>, and workflow builder <highlight><bold>20</bold></highlight> may comprise any computing device known in the art, such as a server, workstation, mainframe, personal computer, laptop computer, hand held computer, telephony device, etc. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As discussed, the buildtime program <highlight><bold>22</bold></highlight> generates a series of graphical user interface (GUI) panels through which the user may define a workflow. Before utilizing the buildtime program <highlight><bold>22</bold></highlight>, the process modeler would plan the workflow and analyze the work the business performs, how it is performed, and by whom. The process modeler may then develop a workflow to generate a final product, which may comprise the result of the effort of a single business unit or the cumulative efforts of multiple users and units within an organization. To produce the final product, a workflow packet comprised of one or more documents would transfer through various user work stations in the company defined as nodes in the workflow to require the user associated with such node to handle and process and forward to another user to handle. A document is comprised of a multimedia item that has digital content. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> For instance, an insurance company may have to process numerous documents related to an insurance claim, such as photographs, appraisals, expert reports, etc. Employees may spend a substantial amount of time sorting through documents and associating the documents with particular claims. In the workflow model, all the documents related to a single claim would be part of a work packet that may move through various user stations to review and process. The workflow would comprise the flow of work and actions that are performed on the documents or workflow packet by multiple users in the system. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The workflow defines the sequence and boundaries of how the work is performed with respect to the documents in the workflow packet, and any restrictions on the order in which documents in the workflow packet must be processed. For instance, before the claim can proceed to a further step, a claims adjuster might be required to ensure that certain documents are included in the workflow packet for the claim before the workflow packet can proceed to further nodes in the workflow, e.g., determining the amount of compensation. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In workflow terminology, a worklist is a queue of work items. Each work item comprises a unit of work for a node in the workflow that is performed by the users associated with that node. Each work item may be associated with one work packet, which comprises documents or objects that are processed during the work defined for that work item. When a user at one node accesses the work item to perform the work defined therein, that workitem is locked, thereby preventing others at that node from accessing the work item. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> A worklist, which is a queue of work for the users of the organization to perform with respect to the workflow packet. The work items within the worklist can be handled by any of the employees/users assigned to the worklist. An action list defines the actions that a user can perform on the work packet objects associated with the work item, such as selections or data that may be entered in the work packet. For example, an adjuster in the claim process workflow can select an option to continue consideration of the claim if it appears valid or select an option to reject the claim. The workflow further consists of the paths defined as the connections between nodes which indicate the order of execution of nodes in the workflow. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example of a GUI panel <highlight><bold>50</bold></highlight> displayed by the buildtime program <highlight><bold>22</bold></highlight> illustrating a workflow <highlight><bold>52</bold></highlight> defined by a process modeler using workflow icons available in the GUI panel <highlight><bold>50</bold></highlight>. The workflow <highlight><bold>52</bold></highlight> has a start icon <highlight><bold>54</bold></highlight>, displayed as an icon having a green light, that indicates the start of the workflow and an end icon <highlight><bold>56</bold></highlight> is defined as indicating an end of the workflow. The start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons may be added automatically to the workflow <highlight><bold>52</bold></highlight> when the process modeler begins working on the workflow model <highlight><bold>24</bold></highlight>. Between the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons are a plurality of work nodes <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, and <highlight><bold>62</bold></highlight>, displayed as three stacked envelopes, that associate work items on the worklist and an action list for a specific point in a workflow <highlight><bold>52</bold></highlight>. A work node <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, <highlight><bold>62</bold></highlight> is a point in the workflow where work is performed. A user exit icon <highlight><bold>64</bold></highlight> indicates a user exit node where an application program is called to perform a background operation. Certain user exits may require that the called application program provide data to a work item in the workflow. Alternatively, the user exit may call an application program that may execute in the background, such as update a database, print reports, etc., while the workflow proceeds to further nodes. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> As mentioned, the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons may be automatically added to the workflow <highlight><bold>52</bold></highlight> when the user starts a blank workflow model <highlight><bold>24</bold></highlight>. The user may move the start <highlight><bold>54</bold></highlight> and end <highlight><bold>56</bold></highlight> icons to any location on the drawing surface. The user may select the control icons <highlight><bold>66</bold></highlight> and <highlight><bold>68</bold></highlight> to add work and user exit nodes, respectively, to the workflow. Control icon <highlight><bold>70</bold></highlight> is used to define a path between two nodes defining the sequence in which the nodes are processed, and the order in which the work items are processed. The path lines, which are shown as the arrows between the start <highlight><bold>54</bold></highlight>, end <highlight><bold>56</bold></highlight>, work and user exit icons <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, <highlight><bold>62</bold></highlight>, and <highlight><bold>64</bold></highlight> illustrate the operation flow from one node to another. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Once the process modeler has defined the general layout of a workflow using the control icons <highlight><bold>66</bold></highlight>, <highlight><bold>68</bold></highlight>, <highlight><bold>70</bold></highlight>, and <highlight><bold>72</bold></highlight>, as shown in the workflow <highlight><bold>52</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the process modeler may then use additional GUI panels shown in FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>7</bold></highlight> of the buildtime program <highlight><bold>22</bold></highlight> to associate particular users, actions and work items with the nodes. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a GUI panel <highlight><bold>100</bold></highlight> used to define properties for a new workflow being defined in the panel <highlight><bold>50</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. A description field <highlight><bold>102</bold></highlight> includes a description of the workflow being defined. An action list <highlight><bold>104</bold></highlight> is a list the actions that can be invoked at the nodes in the defined workflow. The actions may comprise programs that are executed at a particular node. In certain implementations, the actions comprise Java methods that the workflow server <highlight><bold>6</bold></highlight> executes when control proceeds to the node with which the method is associated. The program modeler would associate the actions in the action list with particular nodes. An access list <highlight><bold>106</bold></highlight> defines a mapping of users that can be assigned to nodes to perform the action associated with such node. Selection of the enable notification checkbox <highlight><bold>108</bold></highlight> causes a message to be sent to a specified user if the user associated with a node has not performed the action defined for the node within a specified time frame indicated in the deadline field <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> After defining the properties for the new workflow and placing icons in the drawing area and path arrows to define the workflow, the user would then use the GUI panels shown in FIGS. <highlight><bold>4</bold></highlight>-<highlight><bold>7</bold></highlight> to associate actions and a user with each node, where the associated user performs the associated action when the workflow server <highlight><bold>6</bold></highlight> processes the node according to the workflow. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a start node panel <highlight><bold>130</bold></highlight> in which the process modeler defines the action and user associated with the start node <highlight><bold>54</bold></highlight> in the workflow, i.e., the first user that will perform the action with respect to the item at the beginning of the workflow. The process modeler would select an action from the action list in the action field <highlight><bold>132</bold></highlight> and specify the user to perform the action at the start node in the user field <highlight><bold>134</bold></highlight>. The enable notification of deadline checkbox <highlight><bold>136</bold></highlight> may be selected to notify the user associated with the start node that a deadline has passed during which the user designated action for that node was not completed. Anyone, such as an administrator, user associated with node, or other user on the access list may receive the notification of the missed deadline for the start node <highlight><bold>54</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the property GUI panel <highlight><bold>150</bold></highlight> used to associate one or more actions and a user with one of the work nodes in the workflow, such as work nodes <highlight><bold>58</bold></highlight>, <highlight><bold>60</bold></highlight>, and <highlight><bold>62</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The work nodes defined by the user may comprise a decision point node, collection point node, document node, and assign value node. A decision point node causes the workflow to proceed along a branch of execution based on selection by the user or some other action taken by an external application called at a previous work node. For instance, the path taken to the next node in the workflow may vary if the claim adjuster selects to reject the claim as opposed to approving the claim. A collection point node is a work node where certain documentation is gathered and added to the work packet. The collection node holds and manages work packages that cannot be processed completely until additional information is received. A document node represents a document in the workflow. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> illustrates the property panels used to define a user exit node that calls an external application to perform operations and perhaps transfer data back to the node for further processing. A user exit is a point in the workflow execution where a user exit routine can be given control, and transfer data back and forth from the external application to the node upon the occurrence of a user-specified event. Further, the user exit node may call an external application program to perform background operations while the workflow proceeds to the next work node. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Using all the above described panels shown in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>7</bold></highlight>, the process modeler can design a workflow model specifying work nodes and the actions associated with the work nodes, as well as the paths between the work nodes. If two paths lead into a node, such as the case with work node <highlight><bold>62</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, then the workflow will only proceed to the action specified for that next node once the actions associated with the two preceding nodes has completed. Before the user may use the buildtime program <highlight><bold>22</bold></highlight>, the user must define the access control lists, users, user groups, actions, action lists and worklist in a manner known in the art using application programming interfaces (APIs). The worklist would provide those work items assigned to users, indicating the work items a user may access when performing actions at a node. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates logic implemented in the workflow builder <highlight><bold>20</bold></highlight> and workflow engine <highlight><bold>2</bold></highlight> to generate a workflow in the runtime database <highlight><bold>4</bold></highlight> that may be invoked and executed. Control begins at block <highlight><bold>200</bold></highlight> with the buildtime program <highlight><bold>22</bold></highlight> receiving defined work lists, access control lists, and action lists. The buildtime program <highlight><bold>22</bold></highlight> and GUI panels therein are then used to generate (at block <highlight><bold>202</bold></highlight>) a workflow model <highlight><bold>24</bold></highlight> including a plurality of nodes, such as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, and paths therebetween defining the order of execution of the nodes in the workflow. At block <highlight><bold>204</bold></highlight>, the workflow translator <highlight><bold>26</bold></highlight> converts the workflow model <highlight><bold>24</bold></highlight> and the defined workflow, access lists, action lists, etc. into a WDL file coded using a workflow definition language known in the art and transfers the WDL file <highlight><bold>10</bold></highlight> to the workflow server <highlight><bold>6</bold></highlight>. The workflow server <highlight><bold>6</bold></highlight> then builds the process template <highlight><bold>8</bold></highlight>, including tables and other data structures, in the runtime database <highlight><bold>4</bold></highlight> that are used to implement the workflow model defined using the buildtime program <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In certain implementations, the workflow model <highlight><bold>24</bold></highlight> defined using the buildtime program <highlight><bold>22</bold></highlight> is document centric in that the actions performed at the node concern the processing of work packages that may comprise any content or object that is processed and routed through the workflow. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the logic performed by the workflow server <highlight><bold>6</bold></highlight> to execute the workflow logic generated using the buildtime program <highlight><bold>22</bold></highlight> GUI panel <highlight><bold>50</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. When a user invokes a workflow stored in the runtime database <highlight><bold>4</bold></highlight>, the workflow server <highlight><bold>6</bold></highlight> accesses (at block <highlight><bold>300</bold></highlight>) the start node of the invoked workflow by interacting with the runtime database <highlight><bold>4</bold></highlight> in a manner known in the art. From the properties defined for that node, the workflow server <highlight><bold>6</bold></highlight> determines (at block <highlight><bold>302</bold></highlight>) the actions and user associated with the node. The workflow server <highlight><bold>6</bold></highlight> further processes (at block <highlight><bold>304</bold></highlight>) the access list defined for the workflow to determine the work item for the accessed node. If (at block <highlight><bold>306</bold></highlight>) the determined work item currently accessed in the workflow is locked by another user at that node, then the workflow server <highlight><bold>6</bold></highlight> waits (at block <highlight><bold>308</bold></highlight>) for the lock on the work item(s) to be released. If the work item is not locked or after the lock is released, control proceeds to block <highlight><bold>310</bold></highlight> where the workflow server <highlight><bold>6</bold></highlight> places a lock on the determined work item. The workflow server <highlight><bold>6</bold></highlight> then executes (at block <highlight><bold>312</bold></highlight>) the action associated with the node and communicates data to the workflow client <highlight><bold>12</bold></highlight> of the determined user requesting user action. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> If (at block <highlight><bold>314</bold></highlight>) notification is enabled for the current node and the deadline has passed (at block <highlight><bold>316</bold></highlight>) without receiving a response from the user, then the workflow server <highlight><bold>6</bold></highlight> notifies the user specified with the enable notification that the deadline has passed. Upon receiving (at block <highlight><bold>318</bold></highlight>) a response from the user, which may comprise entering information, modifying a work item, adding a work item to the work package, selecting an option, etc., the workflow server <highlight><bold>6</bold></highlight> unlocks (at block <highlight><bold>320</bold></highlight>) the work item(s) previously locked for the user. If (at block <highlight><bold>322</bold></highlight>) the current node is the stop node, then control ends; otherwise, if there are further nodes to process in the workflow, then the workflow server <highlight><bold>6</bold></highlight> determines (at block <highlight><bold>324</bold></highlight>) from the path from the current node the next node in the workflow and accesses (at block <highlight><bold>326</bold></highlight>) the next node. Control then proceeds back to block <highlight><bold>326</bold></highlight> to process the next node. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The workflow logic of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> provides a document centric workflow in that the state of processing work items associated with the node controls the workflow because control cannot proceed to other subsequent nodes that process the locked work item until the node holding the lock completes execution and releases the lock on the work item. Thus, access to work items controls the flow through the workflow. The workflow builder <highlight><bold>20</bold></highlight> provides a GUI tool to allow the user to create a document centric workflow model and translate that workflow model <highlight><bold>24</bold></highlight>, including the defined worklists, access lists, action lists, etc., into a workflow definition language (WDL) file <highlight><bold>10</bold></highlight> that can be maintained and utilized in a robust workflow engine software product known in the art. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> With the described implementations, the workflow builder <highlight><bold>20</bold></highlight> generates a WDL file <highlight><bold>10</bold></highlight> that may be compatible with workflow engines from different vendors because different vendors may design their workflow engines to be compatible with the WDL format of the WDL file <highlight><bold>10</bold></highlight>. This allows the workflow model defined in the WDL file <highlight><bold>10</bold></highlight> to be transportable across different vendor workflow engine platforms. </paragraph>
</section>
<section>
<heading lvl="1">Object Oriented Workflow Architecture </heading>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an architecture of object oriented classes and their interrelationship that are used to implement a workflow of nodes. As indicated in the legend <highlight><bold>400</bold></highlight>, a rectangle indicates a class; a line connecting classes indicates an association of the connected classes; a line connecting classes terminating in a filled circle indicates that there may be one or more instances of the class at the end with the circle for each instance of the class at the other end of the line; and a line terminating at a diamond indicates that the class at the diamond end is an aggregate, such that the aggregate object is made up of one or more instances of the class at the other end of the line. <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates the relationship of the classes. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The WorkFlowService class <highlight><bold>402</bold></highlight> is the starting point for a user wanting to access a workflow. The WorkFlowService class <highlight><bold>402</bold></highlight> includes methods that allow users to access already defined workflow templates and executing workflows. The WorkFlowService class <highlight><bold>402</bold></highlight> is associated with the WorkFlowTemplate <highlight><bold>404</bold></highlight>, WorkFlow <highlight><bold>406</bold></highlight>, and WorkFlowList <highlight><bold>408</bold></highlight> classes. The WorkFlowTemplate class <highlight><bold>404</bold></highlight> provides methods that allow the user to manipulate workflow process template objects, e.g., process template <highlight><bold>8</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>), which comprise a defined workflow that is stored in the workflow engine <highlight><bold>2</bold></highlight>. The WorkFlow class <highlight><bold>406</bold></highlight> provides methods that allow the user to access information and control an executing workflow. The WorkList class <highlight><bold>408</bold></highlight> includes methods that allow the user to access an executing work list object comprised of work items and information on the current state of the executing work list, i.e., information on work items being processed. The methods in the WorkFlowService class <highlight><bold>402</bold></highlight> are used to retrieve information on particular workflows, workflow templates, and workflow lists associated with a particular workflow service. The methods from the other classes, such as the WorkFlowTemplate <highlight><bold>404</bold></highlight>, WorkFlow <highlight><bold>406</bold></highlight>, and WorkFlowList <highlight><bold>408</bold></highlight> classes, can then be used to obtain specific information and control over those workflow templates, workflows, and workflow lists identified by the WorkFlowService class <highlight><bold>402</bold></highlight> methods. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The WorkFlowTemplate class <highlight><bold>404</bold></highlight> provides information on a workflow template. A workflow object from the WorkFlow class <highlight><bold>406</bold></highlight> represents an executing workflow. The WorkFlowContainer class <highlight><bold>410</bold></highlight> includes methods to instantiate a container object that includes information on one container used to transfer data between nodes. Users at nodes may access data in the container and update the container with additional data. The data in the container may be used by the action being executed at a node. The WorkFlow class <highlight><bold>406</bold></highlight> is associated with the WorkFlowNotification class <highlight><bold>412</bold></highlight>, which is used to provide notifications, such as notifications if a user does not perform an action at a node within a predefined time period. There may be many notifications provided for one workflow. The WorkFlow class <highlight><bold>406</bold></highlight> is further associated with the WorkFlowItem class <highlight><bold>414</bold></highlight>, such that one executing workflow may be associated with one or more work items indicating a unit of work to perform for a node within the workflow. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The WorkFlowItem class <highlight><bold>414</bold></highlight> is associated with the WorkFlowContainer class <highlight><bold>410</bold></highlight>, such that one container may be used at a work item to provide data to the user executing the unit of work defined by the work item. The relationship between the WorkFlow class <highlight><bold>406</bold></highlight> and the WorkFlowItem class <highlight><bold>414</bold></highlight> indicates that there may be many work item objects associated with one executing workflow. The class architecture of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> further illustrates that a workflow list of the WorkFlowList class <highlight><bold>408</bold></highlight> is an aggregate of the workflow from the WorkFlow <highlight><bold>414</bold></highlight> Item class and workflow notifications from the WorkFlowNotification <highlight><bold>412</bold></highlight> class. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The above object oriented architecture of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> defines how the different classes interrelate in order to implement a workflow. Each of the above interrelated classes <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight>, <highlight><bold>408</bold></highlight>, <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, and <highlight><bold>414</bold></highlight> provides interfaces/methods that may be used within a workflow computer program to implement the workflow and actions performed at a node. The workflow program would be executed by the workflow server <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) in the workflow engine <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Following are examples of some methods of the WorkFlowService class <highlight><bold>402</bold></highlight>, including: </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> WorkFlowService( ): constructs a new workflow service, which provides access to different workflow services in the workflow engine <highlight><bold>2</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Each workflow service is associated with workflow templates, executing workflows, and workflow lists of work items for a workflow. </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> connect: provides a user name, authentication, and connection string to use to authenticate a user to provide access to a requested workflow service, which allows access to workflow templates, work lists, etc. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> connection: handle returned to a user to allow access to a particular workflow service. </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> setDatastore: a reference to a data store including documents and objects used by the work items in the workflows associated with the workflow service. Thus, different workflows for a workflow service may process documents within workflow packages from the same data store. </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> listWorkFlows: returns a list of all workflow objects of the WorkFlow class <highlight><bold>406</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> listWorkLists: returns a list of all work list objects of the WorkFlowList class <highlight><bold>408</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> listWorkFlowTemplates: returns a list of all template objects of the WorkFlowTemplate class <highlight><bold>404</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Following are examples of some methods of the WorkFlowService class <highlight><bold>402</bold></highlight>, including: </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> WorkFlowTemplate( ): constructs a workflow template object including a defined workflow. This workflow template may be created using the GUI panels and buildtime program described above. </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> name: returns name of a workflow template. </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> description: returns a description of the work performed by a workflow template. </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> modifiedTime: time the workflow template was last modified. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Following are examples of some methods of the WorkFlow class <highlight><bold>406</bold></highlight>, including: </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> WorkFlow( ): constructs a workflow object representing a workflow comprised of nodes and work items for a specified workflow. The workflow may also be provided a container that is used to allow users of different work items to communicate and/or a work packet comprised of one or more documents or objects to be processed as part of the workflow. </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> get/setName: returns or sets the name for a workflow. </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> workFlowTemplateName: returns the name of the workflow template associated with the workflow. </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> notificationTime: returns the time of the last notification generated for the workflow in response to a user not performing an action for one accessed node within a specified time period. </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> modifiedTime: Returns the last time the workflow was modified. </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> stateChangeTime: returns the last time a state change occurred with the workflow: </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> startTime: returns the time the workflow was started. </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> endTime: returns the time the workflow ended. </paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> state: returns a state of the workflow, such as ready, running, finished, terminated, suspended, terminating, suspending, deleted, etc. </paragraph>
<paragraph id="P-0076" lvl="2"><number>&lsqb;0076&rsqb;</number> inContainer: returns the input container associated with the workflow. </paragraph>
<paragraph id="P-0077" lvl="2"><number>&lsqb;0077&rsqb;</number> start: starts a workflow with a container if the state is ready. </paragraph>
<paragraph id="P-0078" lvl="2"><number>&lsqb;0078&rsqb;</number> terminate: terminates the workflow if the state is running, suspended, or suspending. </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> suspend: suspends the workflow if the state is running. </paragraph>
<paragraph id="P-0080" lvl="2"><number>&lsqb;0080&rsqb;</number> resume: resumes a suspended workflow if the state is suspended and suspending. </paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> add: adds a workflow to the system that is associated with one specified workflow template. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Following are examples of methods of the WorkFlowContainer class <highlight><bold>410</bold></highlight>, which instantiates a container object used with a workflow to transport information among the nodes. </paragraph>
<paragraph id="P-0083" lvl="2"><number>&lsqb;0083&rsqb;</number> WorkFlowContainer( ): constructs a container object for a container used within a particular workflow. </paragraph>
<paragraph id="P-0084" lvl="2"><number>&lsqb;0084&rsqb;</number> get/setPriority: get/sets the priority for an item in the container. </paragraph>
<paragraph id="P-0085" lvl="2"><number>&lsqb;0085&rsqb;</number> get/setActivityNode: get/sets the current node being processed, may also get/set information on the current activity node. </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> get/setWorkPacketID: get/sets an identifier of a work packet being routed through the system. </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> get/setActionPerformed: get/sets information on an action being performed. </paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> get/setUserVariable: get/sets a variable maintained in the container, that may have predefined values. The priority is maintained for a user variable in the container. </paragraph>
<paragraph id="P-0089" lvl="2"><number>&lsqb;0089&rsqb;</number> retrieve: retrieves and refreshes the container. </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> update: updates the container data. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Following are examples of some methods of the WorkList class <highlight><bold>408</bold></highlight>, where a work list object is a representation of a work list in the system. As discussed, a work list object comprises a collection of work items and notifications for an executing workflow. </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> WorkList( ): constructs a work list object for a specified work list. A work list consists of work items. </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> get/set ACLName: get/sets the action control list (ACL) name for the work list including the actions that may be performed as part of units of work for the work list. </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> listWorkItems: lists the work items on the work list. </paragraph>
<paragraph id="P-0095" lvl="2"><number>&lsqb;0095&rsqb;</number> listWorkItemsByTemplate: returns the work items for the work list by the specified workflow template name. </paragraph>
<paragraph id="P-0096" lvl="2"><number>&lsqb;0096&rsqb;</number> listWorkItemsByNode: returns a list of the work items assigned to each node in the work flow. </paragraph>
<paragraph id="P-0097" lvl="2"><number>&lsqb;0097&rsqb;</number> listProcessNotifications: lists notifications generated during workflow that are associated with the workflow process. For instance, the notification enabled through the GUI in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> provides a general notification for the workflow. In certain implementations, a notification process is activated and performed as a background process to generate notifications. </paragraph>
<paragraph id="P-0098" lvl="2"><number>&lsqb;0098&rsqb;</number> listActivityNotifications: lists notifications generated during workflow that are associated with a particular activity, such as a user not performing an activity within a specified time. For instance, the notification enabled through the GUI of <cross-reference target="DRAWINGS">FIGS. 4 and 5</cross-reference> enables notifications for activities at particular nodes. </paragraph>
<paragraph id="P-0099" lvl="2"><number>&lsqb;0099&rsqb;</number> add/update/delete/retrieve: separate commands that allow user to add, update, delete, and retrieve a work list. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Additional commands may be provided to access the information in the work list, such as filter commands to provide filters for accessing information from the work list, thresholds of the number of items that can be in the work list, etc. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Following are examples of some methods of the WorkFlowItem class <highlight><bold>414</bold></highlight>, where a work item object represents a unit of work performed in the workflow. The following methods are used to create and modify work items, and obtain information thereon. </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> WorkFlowItem( ): constructs a work item for a specified workflow, node, and owner. </paragraph>
<paragraph id="P-0103" lvl="2"><number>&lsqb;0103&rsqb;</number> name: returns the name of the node to which the work item is assigned. </paragraph>
<paragraph id="P-0104" lvl="2"><number>&lsqb;0104&rsqb;</number> state: returns a state of the work item, such as not set, ready, running, finished, terminated, suspended, disabled, checked out, in error, executed, etc. A work item is checked out when a user has accessed the work item to perform the actions defined for the work item. </paragraph>
<paragraph id="P-0105" lvl="2"><number>&lsqb;0105&rsqb;</number> workFlowName: returns the name of the workflow including the work item. </paragraph>
<paragraph id="P-0106" lvl="2"><number>&lsqb;0106&rsqb;</number> workFlowTemplateName: returns the name of the workflow template including the work item. </paragraph>
<paragraph id="P-0107" lvl="2"><number>&lsqb;0107&rsqb;</number> priority owner, notificationTime, startTime creationTime, modifiedTime: methods that return information on the priority, owner, time of last notification, time of creation and time of last modification for a work item, respectively. </paragraph>
<paragraph id="P-0108" lvl="2"><number>&lsqb;0108&rsqb;</number> retrieve, start finish: methods used to retrieve, begin executing, and complete a work item, respectively. </paragraph>
<paragraph id="P-0109" lvl="2"><number>&lsqb;0109&rsqb;</number> checkIn, checkOut: checkOut locks a work item to prevent other users at a node from accessing the work item and changes the state of the work item to checked out. Upon check out, the container associated with the work item is accessed from the previous node using the inContainer method. The checkIn method receives the completed work item from the user, releases the lock, and provides the container to route to the next node. </paragraph>
<paragraph id="P-0110" lvl="2"><number>&lsqb;0110&rsqb;</number> inContainer: method that obtains container from previous node for use with work item checked out at current node being processed. </paragraph>
<paragraph id="P-0111" lvl="2"><number>&lsqb;0111&rsqb;</number> outContainer: method generates an out container to include contents of container user accessed at work item, including any changes made by the user to the data in the container. A handle of the out container is generated and provided with checkOut method called for the next node to provide that container to the user of the next node in the workflow. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Following are examples of some methods of the WorkFlowNotification class <highlight><bold>412</bold></highlight>, where a notification object represents a generated notification. The following methods are used to create and modify notifications, and obtain information thereon. </paragraph>
<paragraph id="P-0113" lvl="2"><number>&lsqb;0113&rsqb;</number> WorkFlowNotification( ): constructs a notification object having a specified notification name, notification type, and owner name for a specified workflow service and workflow. The notification type indicates how the owner is notified. </paragraph>
<paragraph id="P-0114" lvl="2"><number>&lsqb;0114&rsqb;</number> state: returns a state of the notification, such as not set, ready, running, finished, terminated, suspended, disabled, etc. </paragraph>
<paragraph id="P-0115" lvl="2"><number>&lsqb;0115&rsqb;</number> priority, owner, notificationTime, startTime, creationTime, modifiedTime, </paragraph>
<paragraph id="P-0116" lvl="2"><number>&lsqb;0116&rsqb;</number> receivedTime: these methods return the priority of the notification, owner of the notification, time that must elapse before the notification is generated, time the notification started, time the notification was crated, time of last notification to the notification, time the notification was received, respectively. The notification would be started and executed as a background process. </paragraph>
<paragraph id="P-0117" lvl="2"><number>&lsqb;0117&rsqb;</number> receiveReason: returns a received reason for the notification. </paragraph>
<paragraph id="P-0118" lvl="2"><number>&lsqb;0118&rsqb;</number> retrieve, cancel: methods that retrieve and cancel a notification, respectively. </paragraph>
<paragraph id="P-0119" lvl="2"><number>&lsqb;0119&rsqb;</number> transfer: transfers a notification to a specified user. In this way, a notification can be transferred from the current owner to some other user. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The above described methods and classes would be included in a workflow program executed by the workflow server <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) to execute the workflow. The methods described above would be used to access and modify the workflow related objects, such as the workflow, work items, notifications, containers, etc. when running the workflow. The above described methods may also be used in other programs that can obtain information and status on a workflow. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> FIGS. <highlight><bold>11</bold></highlight>-<highlight><bold>12</bold></highlight> illustrate an example of program logic in a workflow program executed by the workflow server <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) utilizing the above discussed methods to implement a workflow. With respect to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, control begins at block <highlight><bold>450</bold></highlight> where the program calls the constructor methods, WorkFlowService( ) to construct a workflow service object. The workflow program would then call (at block <highlight><bold>452</bold></highlight>) the WorkFlowService list methods, such as listWorkFlows, listWorkLists, listWorkFlowTemplates, to obtain information on the workflows, workflow templates, and work lists for a workflow service. This information may then be presented to a user for selection. Various other methods in the classes may be called to access information on the workflow to present to the user when making a decision on which workflow to execute. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> At block <highlight><bold>454</bold></highlight>, user selection of a workflow to process is received. The workflow program then calls (at block <highlight><bold>456</bold></highlight>) the WorkFlow start method to start the workflow. The workflow program then calls (at block <highlight><bold>458</bold></highlight>) the listWorkItemsByNode method to obtain all the work items for the started workflow, and the nodes to which the one or more items are associated. The workflow program then performs a loop at blocks <highlight><bold>460</bold></highlight> through <highlight><bold>490</bold></highlight> for each node i in the workflow, as determined from the list of work items by node. For each node i, the workflow program performs a loop at block <highlight><bold>462</bold></highlight> to <highlight><bold>488</bold></highlight> for each work item j associated with node i. If (at block <highlight><bold>464</bold></highlight>) there is a notification for the work item and the user that is the owner of the item, as determined from the methods, then the workflow program retrieves (at block <highlight><bold>466</bold></highlight>) retrieves the notification and then starts a monitor to determine if the time period for the notification has elapsed without the work item completing. From block <highlight><bold>464</bold></highlight> or <highlight><bold>466</bold></highlight>, the workflow program calls (at block <highlight><bold>468</bold></highlight>) the checkOut method to lock the work item j. The inContainer method is called (at block <highlight><bold>470</bold></highlight>) to access any container associated with the work item j. Once the work item j is locked, the workflow program then executes (at block <highlight><bold>474</bold></highlight>) the actions associated with the work item j. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Control then proceeds to block <highlight><bold>476</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, where the workflow program calls container get and set methods to access or modify the data and variables in the container accessed for the work item j in response to executing actions assigned to that work item j. For instance, as part of performing actions for a work item, the user of the work item may read and write data to the container. The workflow program receives (at block <highlight><bold>482</bold></highlight>) indication from a user that the actions associated with the work item have completed. The workflow program further calls (at block <highlight><bold>486</bold></highlight>) the checkIn method to release the lock on the work item j and the outContainer method to generate a new container including any updates to provide to the user at the next node in the workflow. The handle to the new container would be used in the next called checkOut method to provide the container to the user at the next node of the workflow. If there are further work items for the node i, then control proceeds (at block <highlight><bold>488</bold></highlight>) back to block <highlight><bold>452</bold></highlight> to retrieve the next work item. After completing all the work items for node i, control proceeds (at block <highlight><bold>490</bold></highlight>) back to block <highlight><bold>460</bold></highlight> to process the next node in the work list. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> The above described logic utilized workflow related classes and the methods therein to implement a workflow and obtain information thereon. The workflow server <highlight><bold>6</bold></highlight>, or some other component in the workflow engine <highlight><bold>2</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>), would then translate the workflow objects and methods into application specific commands, such as Structured Query Language (SQL) commands to manipulate the data in the runtime database <highlight><bold>4</bold></highlight> and process template <highlight><bold>8</bold></highlight> to obtain information on the workflow and implement workflow operations. </paragraph>
</section>
<section>
<heading lvl="1">Additional Implementation Details </heading>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> The preferred embodiments may be implemented as a method, apparatus or article of manufacture using standard programming and/or engineering techniques to produce software or code. The term &ldquo;article of manufacture&rdquo; as used herein refers to code or logic implemented in a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> The workflow client and server may be implemented within any vendor workflow program known in the art. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> In the described implementations, the actions were implemented as Java methods. Alternatively, the actions may be implemented in any programming language known in the art. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In the described implementations, particular icons were used to represent different information in the workflow, such as work nodes, exit nodes, etc. However, any icon design may be used to represent the workflow components. Further, additional graphical representations may be provided for different types of work nodes, e.g., collection work nodes, assign value node, decision point node, etc. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> In the described implementations, the class architecture is implemented as an object oriented class architecture. Alternatively, non-object oriented programming techniques may be used to implement the described class architecture. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for executing a workflow, comprising: 
<claim-text>providing a workflow class implementing methods and objects to provide information on and control of workflows; </claim-text>
<claim-text>providing a work list class implementing methods and objects to provide information on and manipulate work items assigned to the workflows; and </claim-text>
<claim-text>providing a work item class implementing methods and objects to provide information on and manipulate work items when executing one workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>calling methods in the workflow class to begin and terminate an instance of one workflow comprising nodes; </claim-text>
<claim-text>calling methods in the work list class to obtain information on the work items and nodes in one workflow; and </claim-text>
<claim-text>calling the methods in the work item class to enable a user to perform actions associated with one work item in one workflow, wherein at least one work item is associated with each node in the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>calling one method in the work list class to determine nodes and associated work items in the workflow to process; </claim-text>
<claim-text>calling one method in the work item class to lock the work item when providing a user access to workflow actions and documents associated with the work item; and </claim-text>
<claim-text>calling one method in the work item class to unlock the work item after the user has completed all actions associated with the work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow notification class including methods and objects to provide information on notifications associated with the workflows, wherein one notification is generated if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>calling methods in the workflow notification class to obtain information on one notification and control a state of the notification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow service class including methods and objects to provide information on workflows associated with one workflow service; and </claim-text>
<claim-text>calling one method in the workflow service class to obtain a list of all workflows associated with one workflow service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>providing a container class including methods and objects to provide information and control containers provided for workflows, wherein the container comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>calling the methods in the container class to read and write data to the container for at least one user of one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>calling methods in the work item class to make one container associated with one work item available to one user of one work item; and </claim-text>
<claim-text>calling one method in the work item class to enable one user of one work item at a next node in the workflow access to the container. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>instantiating a workflow object maintaining information on one workflow, wherein the methods of the workflow class obtain information and control the workflow through the variables in the workflow object representing the workflow; </claim-text>
<claim-text>instantiating a work list object maintaining information on work items and nodes in one workflow, wherein the methods of the work list class obtain information on work items and nodes in one workflow; and </claim-text>
<claim-text>instantiating one work item object for each work item in one workflow, wherein the methods of the work item class obtain information on work items from the work item objects, wherein one work list object identifies one or more work items represented by work item objects and wherein one workflow object is associated with one or more work items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow service class including methods and objects to provide information one workflows associated with one workflow service; and </claim-text>
<claim-text>instantiating a workflow service object maintaining information on workflows and work lists for the workflows associated with one workflow service, wherein the methods of the workflow service obtain information on workflows and work lists from the workflow service object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the workflow service object includes information on associated workflow templates, wherein each instance of an executing workflow is instantiated from one workflow template, further comprising: 
<claim-text>providing a workflow template class including methods and objects to provide information on one worfklow template associated with one workflow service; and </claim-text>
<claim-text>instantiating a workflow template object maintaining information on one workflow template, wherein one or more workflow objects are associated with one workflow template object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the workflow service object includes information on one or more associated workflow templates, and wherein one method of the workflow service class is called to obtain information on the one or more workflow templates associated with the workflow service. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow notification class including methods and objects to provide information on notifications associated with one workflow that generate a notification if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>instantiating one workflow notification object maintaining information on one workflow notification, wherein one or more workflow notifications are associated with one workflow and wherein one work list includes one or more workflow notifications. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>providing a container class including methods and objects to provide information on and control of containers used in workflows to transport data among the nodes, wherein the container object comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>instantiating one container object maintaining information on one container used in a workflow, wherein one container object is associated with one workflow object and one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the classes comprise object oriented classes. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system for executing a workflow, comprising: 
<claim-text>means for providing a workflow class implementing methods and objects to provide information on and control of workflows; </claim-text>
<claim-text>means for providing a work list class implementing methods and objects to provide information on and manipulate work items assigned to the workflows; and </claim-text>
<claim-text>means for providing a work item class implementing methods and objects to provide information on and manipulate work items when executing one workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for calling methods in the workflow class to begin and terminate an instance of one workflow comprising nodes; </claim-text>
<claim-text>means for calling methods in the work list class to obtain information on the work items and nodes in one workflow; and </claim-text>
<claim-text>means for calling the methods in the work item class to enable a user to perform actions associated with one work item in one workflow, wherein at least one work item is associated with each node in the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for calling one method in the work list class to determine nodes and associated work items in the workflow to process; </claim-text>
<claim-text>means for calling one method in the work item class to lock the work item when providing a user access to workflow actions and documents associated with the work item; and </claim-text>
<claim-text>means for calling one method in the work item class to unlock the work item after the user has completed all actions associated with the work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a workflow notification class including methods and objects to provide information on notifications associated with the workflows, wherein one notification is generated if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>means for calling methods in the workflow notification class to obtain information on one notification and control a state of the notification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a workflow service class including methods and objects to provide information on workflows associated with one workflow service; and </claim-text>
<claim-text>means for calling one method in the workflow service class to obtain a list of all workflows associated with one workflow service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a container class including methods and objects to provide information and control containers provided for workflows, wherein the container comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>means for calling the methods in the container class to read and write data to the container for at least one user of one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising: 
<claim-text>means for calling methods in the work item class to make one container associated with one work item available to one user of one work item; and </claim-text>
<claim-text>means for calling one method in the work item class to enable one user of one work item at a next node in the workflow access to the container. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for instantiating a workflow object maintaining information on one workflow, wherein the methods of the workflow class obtain information and control the workflow through the variables in the workflow object representing the workflow; </claim-text>
<claim-text>means for instantiating a work list object maintaining information on work items and nodes in one workflow, wherein the methods of the work list class obtain information on work items and nodes in one workflow; and </claim-text>
<claim-text>means for instantiating one work item object for each work item in one workflow, wherein the methods of the work item class obtain information on work items from the work item objects, wherein one work list object identifies one or more work items represented by work item objects and wherein one workflow object is associated with one or more work items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a workflow service class including methods and objects to provide information one workflows associated with one workflow service; and </claim-text>
<claim-text>means for instantiating a workflow service object maintaining information on workflows and work lists for the workflows associated with one workflow service, wherein the methods of the workflow service obtain information on workflows and work lists from the workflow service object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the workflow service object includes information on associated workflow templates, wherein each instance of an executing workflow is instantiated from one workflow template, further comprising: 
<claim-text>means for providing a workflow template class including methods and objects to provide information on one worfklow template associated with one workflow service; </claim-text>
<claim-text>means for instantiating a workflow template object maintaining information on one workflow template, wherein one or more workflow objects are associated with one workflow template object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the workflow service object includes information on one or more associated workflow templates, and wherein one method of the workflow service class is called to obtain information on the one or more workflow templates associated with the workflow service. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a workflow notification class including methods and objects to provide information on notifications associated with one workflow that generate a notification if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>means for instantiating one workflow notification object maintaining information on one workflow notification, wherein one or more workflow notifications are associated with one workflow and wherein one work list includes one or more workflow notifications. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising: 
<claim-text>means for providing a container class including methods and objects to provide information on and control of containers used in workflows to transport data among the nodes, wherein the container object comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>means for instantiating one container object maintaining information on one container used in a workflow, wherein one container object is associated with one workflow object and one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the classes comprise object oriented classes. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. An article of manufacture for executing a workflow by: 
<claim-text>providing a workflow class implementing methods and objects to provide information on and control of workflows; </claim-text>
<claim-text>providing a work list class implementing methods and objects to provide information on and manipulate work items assigned to the workflows; and </claim-text>
<claim-text>providing a work item class implementing methods and objects to provide information on and manipulate work items when executing one workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>calling methods in the workflow class to begin and terminate an instance of one workflow comprising nodes; </claim-text>
<claim-text>calling methods in the work list class to obtain information on the work items and nodes in one workflow; and </claim-text>
<claim-text>calling the methods in the work item class to enable a user to perform actions associated with one work item in one workflow, wherein at least one work item is associated with each node in the workflow. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>calling one method in the work list class to determine nodes and associated work items in the workflow to process; </claim-text>
<claim-text>calling one method in the work item class to lock the work item when providing a user access to workflow actions and documents associated with the work item; and </claim-text>
<claim-text>calling one method in the work item class to unlock the work item after the user has completed all actions associated with the work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow notification class including methods and objects to provide information on notifications associated with the workflows, wherein one notification is generated if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>calling methods in the workflow notification class to obtain information on one notification and control a state of the notification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow service class including methods and objects to provide information on workflows associated with one workflow service; and </claim-text>
<claim-text>calling one method in the workflow service class to obtain a list of all workflows associated with one workflow service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>providing a container class including methods and objects to provide information and control containers provided for workflows, wherein the container comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>calling the methods in the container class to read and write data to the container for one at least one user of one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>calling methods in the work item class to make one container associated with one work item available to one user of one work item; and </claim-text>
<claim-text>calling one method in the work item class to enable one user of one work item at a next node in the workflow access to the container. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>instantiating a workflow object maintaining information on one workflow, wherein the methods of the workflow class obtain information and control the workflow through the variables in the workflow object representing the workflow; </claim-text>
<claim-text>instantiating a work list object maintaining information on work items and nodes in one workflow, wherein the methods of the work list class obtain information on work items and nodes in one workflow; and </claim-text>
<claim-text>instantiating one work item object for each work item in one workflow, wherein the methods of the work item class obtain information on work items from the work item objects, wherein one work list object identifies one or more work items represented by work item objects and wherein one workflow object is associated with one or more work items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow service class including methods and objects to provide information one workflows associated with one workflow service; and </claim-text>
<claim-text>instantiating a workflow service object maintaining information on workflows and work lists for the workflows associated with one workflow service, wherein the methods of the workflow service obtain information on workflows and work lists from the workflow service object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the workflow service object includes information on associated workflow templates, wherein each instance of an executing workflow is instantiated from one workflow template, further comprising: 
<claim-text>providing a workflow template class including methods and objects to provide information on one worfklow template associated with one workflow service; and </claim-text>
<claim-text>instantiating a workflow template object maintaining information on one workflow template, wherein one or more workflow objects are associated with one workflow template object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the workflow service object includes information on one or more associated workflow templates, and wherein one method of the workflow service class is called to obtain information on the one or more workflow templates associated with the workflow service. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>providing a workflow notification class including methods and objects to provide information on notifications associated with one workflow that generate a notification if an action associated with one work item is not performed in a specified time period; and </claim-text>
<claim-text>instantiating one workflow notification object maintaining information on one workflow notification, wherein one or more workflow notifications are associated with one workflow and wherein one work list includes one or more workflow notifications. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>providing a container class including methods and objects to provide information on and control of containers used in workflows to transport data among the nodes, wherein the container object comprises an object that is used to transfer information among the nodes by enabling users to read and write data to the container; and </claim-text>
<claim-text>instantiating one container object maintaining information on one container used in a workflow, wherein one container object is associated with one workflow object and one work item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the classes comprise object oriented classes.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004771A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004771A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004771A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004771A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004771A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004771A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004771A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004771A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004771A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004771A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004771A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
