<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002087A1-20030102-D00000.TIF SYSTEM "US20030002087A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00001.TIF SYSTEM "US20030002087A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00002.TIF SYSTEM "US20030002087A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00003.TIF SYSTEM "US20030002087A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00004.TIF SYSTEM "US20030002087A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00005.TIF SYSTEM "US20030002087A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00006.TIF SYSTEM "US20030002087A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00007.TIF SYSTEM "US20030002087A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00008.TIF SYSTEM "US20030002087A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00009.TIF SYSTEM "US20030002087A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00010.TIF SYSTEM "US20030002087A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00011.TIF SYSTEM "US20030002087A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00012.TIF SYSTEM "US20030002087A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00013.TIF SYSTEM "US20030002087A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00014.TIF SYSTEM "US20030002087A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00015.TIF SYSTEM "US20030002087A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00016.TIF SYSTEM "US20030002087A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00017.TIF SYSTEM "US20030002087A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00018.TIF SYSTEM "US20030002087A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00019.TIF SYSTEM "US20030002087A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00020.TIF SYSTEM "US20030002087A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00021.TIF SYSTEM "US20030002087A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00022.TIF SYSTEM "US20030002087A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00023.TIF SYSTEM "US20030002087A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00024.TIF SYSTEM "US20030002087A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030002087A1-20030102-D00025.TIF SYSTEM "US20030002087A1-20030102-D00025.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002087</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894160</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N001/40</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>358</class>
<subclass>462000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>358</class>
<subclass>448000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Fast efficient window region coalescing in a two-pass auto-windowing environment</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<middle-name>J.</middle-name>
<family-name>Metcalfe</family-name>
</name>
<residence>
<residence-us>
<city>Marion</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jeng-nan</given-name>
<family-name>Shiau</family-name>
</name>
<residence>
<residence-us>
<city>Webster</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Xerox Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>LAHIVE &amp; COCKFIELD</name-1>
<name-2></name-2>
<address>
<address-1>28 STATE STREET</address-1>
<city>BOSTON</city>
<state>MA</state>
<postalcode>02109</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and apparatus are provided for the processing of an image, such as a document. The invention determines the location of differing content types within the document allowing specialized processing of various content types. The invention performs the identification of pixels having similar content characteristics into windows during the first scanning pass of the document by the use of an identifier equivalence table to update selected memory locations to a base identifier during processing. A second pass processing is available to enhance or alter the image by the use of the information gathered during first pass processing. The present invention benefits from a very low memory requirement while being able to determine windows extending the length or width of the image. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates generally to the processing of documents and specifically to the identification and grouping of individual portions of a scanned document to enhance or modify the document. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The processing of scanned documents is typically enhanced by the ability to process different content types within a document differently. For example, processing of a document involving both text and halftone images can be enhanced by processing text differently from halftone images or one color differently from another color. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A wide variety of imaging technologies benefit from processing differing content types differently. For example, printing technologies, such as electrophotographic, electrostatic, electrostatographic, ionographic, acoustic, piezo, thermal, laser, ink jet, and other types of image forming or reproducing systems adapted to capture and/or store image data associated with a particular object, such as a document, and reproduce, form, or produce an image may provide improved results by altering processing depending on the content type. Furthermore, scanning of documents for electronic storage or other electronic processing, such as optical character recognition or digital photo manipulation or storage, can be improved by tailored processing of different content types. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> &ldquo;Auto-windowing&rdquo; is a process of determining contiguous areas of a document, e.g. windows, of one content type. By way of example, auto-windowing can group an area of text into a window, areas of white space into multiple windows and a halftone image into one or more windows depending on the composition of the halftone image. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Typically, the ability to determine the locations of differing content types is performed on a page-by-page basis and has involved multiple stages of processing of each full page of the document after an initial scanning process. Therefore, a large memory capacity is required to process each full page. Some conventional methods have involved multiple full-page scans of each page. Typically, substantial amounts of time are required because of the extensive processing and multiple stages that have been required, limiting the use of auto-windowing in high speed document processing. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> For many image-processing algorithms, such as filtering, the page is processed on a scan line by scan line basis. Ideally, the algorithm for grouping content types into windows would have available as many scan lines as required in order to determine where one region encounters (e.g. grows into) another region. Previously, this has required extensive processing time for average page sizes. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> As a result of the above-noted limitations of conventional methods, the ability to incorporate tailored processing of differing content types within a document has been difficult to implement in high-speed document processing machines. Such capabilities have also been difficult to inexpensively implement because of the substantial memory requirements. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention overcomes the difficulties of the prior art by the use of an identifier equivalence table that is updated to include a base identifier for a window during the first pass of processing the document. This equivalence table is then used to enable a second pass of processing the document to recognize windows of the document having a common content type. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> According to one embodiment of the invention, a method of processing an image, such as a document, is provided having the steps of obtaining content data about a plurality of pixels in an image, grouping pixels having similar content data to form a plurality of line segments, associating line segments from the plurality of line segments into at least a first window and a second window, wherein the first window and the second window represent similar pixels according to the content data and storing information pertaining to the line segments determined during the step of associating, wherein the information associates each line segment with a corresponding window. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> According to another embodiment of the invention, a method of processing an image is provided having the steps of comparing a first identifier of a first line segment on a first line on the image to a second identifier of a second line segment on a second line on the image, wherein the first line and the second line are parallel to a first axis and the first line segment overlaps the second line segment along the first axis and if the first identifier does not equal the second identifier, conducting a base identifier search to determine a base identifier for the first line segment. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> A method of processing an image is provided according to another embodiment of the invention, having the steps of determining a first segment tag for a first line segment on a first line parallel to a first axis, writing a first identifier into a first memory location and assigning the first identifier to the first line segment, determining a second segment tag for a second line segment on a second line parallel and proximate to the first line wherein the second line segment overlaps a position of the first line segment along the first axis. If the first segment tag equals the second segment tag, writing the first identifier to a second memory location, but if the first segment tag does not equal the second segment tag, then writing a second identifier into a second memory location and assigning the second identifier to the second line segment, reading a first memory location to determine a first memory location content, pointing to a further memory location corresponding to the first memory location content, if the first memory location content does not point to the first memory location, reading a further memory location content of the further memory location and continuing to point to succeeding memory locations until a memory location content points to its own memory location and designating the memory location as a base identifier along with writing the base identifier to the first memory location. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> According to another embodiment of the invention, an apparatus for processing an image is provided with a memory adapted to store at least one of the group of a first identifier of a first line segment on a first line and a second identifier of a second line segment on a second line and a processor coupled to the memory and adapted to compare the first identifier to the second identifier, determine a first segment tag for the first line segment, determine that the first line segment is eligible for a base identifier search if the first identifier does not equal the second identifier and conduct a base identifier search for the first line segment. Wherein the first line and the second line are parallel to a first axis and the first line segment overlaps the second line segment. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A method for processing an image is also provided according to another embodiment and having the steps of determining a pixel tag corresponding to a pixel content type of a pixel of a first row, determining a pixel identifier based on the pixel tag and pixel identifiers of neighboring pixels in the first row and in a neighboring second row, forming line segments of neighboring pixels of the first row having common pixel identifiers and reviewing line segments of the second row and the first row to associate line segments of the second row neighboring line segments of the first row and having common pixel tags.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The foregoing and other objects, features and advantages of the invention will be apparent from the following description and apparent from the accompanying drawings, in which like reference characters refer to the same parts throughout the different views. The drawings illustrate principles of the invention and, although not to scale, show relative dimensions. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a conceptual view of the processing stages of an image in an embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference> provide illustrations of the definitions used in the description of the present invention related to pixels and line segments; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> provides an illustration of the image and the unique identifier for each of the line segments contained therein; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a functional schematic according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a method of line segment identifier allocation during the first pass processing according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> FIGS. <highlight><bold>7</bold></highlight>A-<highlight><bold>7</bold></highlight>F provide illustrations of the allocations of pixel identifiers during first pass processing; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> provides an illustration of a line segment memory; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> provides an illustration of an identification number equivalence table; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> provides an illustration of a method for updating the identification number equivalence table during the first pass processing according to an illustrative embodiment of the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> provides time lines showing relationship between line segment identifier allocation and updating of the identification number equivalence table; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> provides illustration of an identification number equivalence table; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> illustrates the assignment of pixel identifiers at the conclusion of first pass processing; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> provides an illustration of line segment identifiers at the conclusion of first pass processing; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> provides an illustration of a line segment memory; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> provides an illustration of an identification number equivalence table; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> provides a timing diagram for the relationship between first pass processing, interdocument delay processing and second pass processing; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> provides a method for interdocument delay processing according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C provide illustrations of an update table during interdocument delay processing according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates a window retagging table according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates a method of second pass processing according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 21A through 21E</cross-reference> provide illustrations of a buffer memory according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> provides a method of pixel retagging during second pass processing according to an illustrative embodiment of the present invention; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> provides an illustration of window labels assigned to line segments of an image according to an illustrative embodiment of the present invention; and </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> provides an illustration of an apparatus according to an illustrative embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The present invention overcomes the difficulties of the prior art by the use of an identifier equivalence table that is updated to include a base identifier for each window during the first pass of processing the document. Frequent updating of the identifier equivalence table allows the rapid determination of window locations during the first pass of processing the document, requiring minimal memory and time. Various embodiments of the present invention are well suited to applications involving high speed document processing. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> As described above, auto-windowing is a process of establishing windows of a contiguous content type. Content types may include text, white space, halftone images, or any other type of imprint or image. Each page of a document may have multiple windows of text or other content type. Preferably, each contiguous content type area will be contained in one window. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> According to an embodiment of the present invention, each page of the document is divided into pixels, preferably arranged in a grid having rows and columns. A sample image <highlight><bold>10</bold></highlight>, representing a portion of a page <highlight><bold>15</bold></highlight> of a document, is provided in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> for purposes of illustration. The page <highlight><bold>15</bold></highlight> of the document, including the sample image <highlight><bold>10</bold></highlight>, is divided into pixels <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Each pixel <highlight><bold>30</bold></highlight> is assigned a pixel tag to identify the content type of the pixel. The pixel tags are determined by the characteristics of the corresponding portion of the scanned document. For example, a pixel tag may indicate that the pixel of the image is either white or non-white. Optionally, pixel tags may be used to represent further or alternative distinctions of the content type of the corresponding portion of the image. For example, a pixel tag may indicate a pixel corresponding to a half-tone image, text, a color graphic, a particular color, white space or other image characteristic beneficial for later processing. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Within each row of pixels, neighboring pixels having the same pixel tags are grouped into a line segment <highlight><bold>20</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates, by way of example, a first line segment <highlight><bold>60</bold></highlight> comprised of white pixels <highlight><bold>62</bold></highlight>, a second line segment <highlight><bold>70</bold></highlight> comprised of black pixels <highlight><bold>72</bold></highlight> and a third line segment <highlight><bold>80</bold></highlight> comprised of white pixels <highlight><bold>82</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates only a portion of the width of the page <highlight><bold>15</bold></highlight> divided into pixels for purposes of illustration. According to an embodiment of the invention, each row of pixels extends across the width of the page <highlight><bold>15</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Optionally, white pixel line segments not located between two or more non-white pixel line segments may be assigned an identifier of &ldquo;0.&rdquo;</paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Similar to pixels, line segments also have identifiers and tags. The line segment identifier matches the known pixel identifiers of the pixels forming the line segment. Similarly, the line segment tag matches the pixel tags of the pixels forming the line segment. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> One purpose of dividing the sample image <highlight><bold>10</bold></highlight> into line segments <highlight><bold>20</bold></highlight> is to provide for the processing of portions of the sample image <highlight><bold>10</bold></highlight>, and other surrounding images or borders, to allow for the determination of windows within the document. Each line segment constitutes a portion of the content in the window formed of a continuous array of pixels. Typically, an entire page will be processed, including white background pixels. It is understood that a page of a document will typically be divided into pixels on a row-by-row basis during processing. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As used herein, &ldquo;image&rdquo; means a portion of a page, or all of a page, of a document. An image may include text, graphics, white space or other types of printed matter content. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> As used herein, &ldquo;window&rdquo; means a portion of a document identified during processing as having substantially uniform characteristics suitable for similar processing. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> For ease of illustration, <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates the pixel naming convention used herein. The pixel to the left of the &ldquo;present pixel&rdquo; <highlight><bold>12</bold></highlight>, i.e. the pixel currently being processed, is the &ldquo;previous pixel&rdquo; <highlight><bold>14</bold></highlight>, while the pixel above the pixel currently being processed is the &ldquo;past pixel&rdquo; <highlight><bold>16</bold></highlight>. Similarly, <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows the naming convention used herein for line segments, including a present line segment <highlight><bold>32</bold></highlight>, a previous line segment <highlight><bold>34</bold></highlight> and a past line segment <highlight><bold>36</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> For purposes of illustration, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an image <highlight><bold>100</bold></highlight> formed of a plurality of line segments <highlight><bold>20</bold></highlight>. The line segments <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> denote both white and non-white portions of the image <highlight><bold>100</bold></highlight>. For ease of discussion, the three rows of the image <highlight><bold>100</bold></highlight> are labeled past scan line <highlight><bold>110</bold></highlight>, present scan line <highlight><bold>120</bold></highlight> and next scan line <highlight><bold>130</bold></highlight>. As processing of an image proceeds, each of the scan lines are moved down the page. Therefore, any series of rows of pixels on the page may be described as a next scan line <highlight><bold>130</bold></highlight>, a present scan line <highlight><bold>120</bold></highlight> and a past scan line <highlight><bold>110</bold></highlight>, preferably in that order. For clarity of the description herein, the scan line labels of the example are not moved to refer to different scan lines during processing. However, during the processing of a page, the scan line labels are moved. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> According to an illustrative embodiment of the invention, the image <highlight><bold>100</bold></highlight> is processed according to the method of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. First pass processing <highlight><bold>910</bold></highlight> is performed as described below and in accordance with the methods of <cross-reference target="DRAWINGS">FIGS. 6 and 10</cross-reference>. FIGS. <highlight><bold>7</bold></highlight>A-<highlight><bold>7</bold></highlight>F further illustrate aspects of the first pass processing <highlight><bold>910</bold></highlight> of the past scan line <highlight><bold>110</bold></highlight> and present scan line <highlight><bold>120</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. According to the illustrative embodiment, the first row of pixels of a page is processed differently from subsequent pixel rows and will now be discussed. In the present example, the processing of the first row of pixels of a page <highlight><bold>15</bold></highlight> will be discussed in relation to the past scan line <highlight><bold>110</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 7A</cross-reference>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The first row of pixels is processed on a pixel-by-pixel basis. A pixel tag of each pixel is read and line segment borders are determined at each change of a pixel tag from a previous pixel to a present pixel, see <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Each line segment is assigned a line segment tag and a unique identifier. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> For example, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, the left-most pixel of the past scan line <highlight><bold>110</bold></highlight> is determined to be a non-white pixel. Similarly, the next pixel to the right is also a non-white pixel. Upon reading the pixel tag of the third pixel, now the present pixel, of the past scan line <highlight><bold>110</bold></highlight>, the previous pixel tag differs from the present pixel tag. Therefore, a first segment tag <highlight><bold>42</bold></highlight> matching the pixel tag common to the pixels forming the first line segment A, shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, is assigned to the first line segment A. See <cross-reference target="DRAWINGS">FIGS. 4 and 7</cross-reference>A. In the present example, the first segment tag <highlight><bold>42</bold></highlight> indicates that the first line segment A is a non-white line segment. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> A first segment identifier <highlight><bold>52</bold></highlight>, such as &ldquo;1&rdquo;, is also assigned to the line segment A and written to a first memory location <highlight><bold>202</bold></highlight> of a line segment memory <highlight><bold>200</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. The line segment memory <highlight><bold>200</bold></highlight> also includes the first segment tag <highlight><bold>42</bold></highlight>. Optionally, the line segment memory <highlight><bold>200</bold></highlight> includes additional segment data such as the overall length of the first line segment A or a start position of the line segment <highlight><bold>43</bold></highlight>. Line segment length or start position may be indicated by the number of pixels in the line segment or by specifying a length in another unit of measurement. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Preferably, the line segment memory <highlight><bold>200</bold></highlight> is a ping-pong memory that can be repeatedly written to, such as a ping-pong random access memory (RAM). The ping-pong feature of the preferred memory eliminates the need for rewriting line segment data. For example, one side of the ping-pong RAM, RAM A in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, contains line segment data for the past scan line <highlight><bold>110</bold></highlight>. Upon processing of the present scan line <highlight><bold>120</bold></highlight>, line segment data can be written to the other side of the ping-pong RAM, RAM B shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. Upon processing of the next scan line <highlight><bold>130</bold></highlight>, line segment data for the next scan line <highlight><bold>130</bold></highlight> would be written in RAM A. Therefore, the ping-pong RAM would always contain line segment data for the required rows of pixels during processing, without need for rewriting data or shifting data. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The first identifier <highlight><bold>52</bold></highlight> is also written to an identification number equivalence table <highlight><bold>300</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. Initially, a new identification number is written to a new memory location. Identifiers may be any type of letter, number, symbol or combination thereof that would provide for the ability to distinguish identifiers from each other. Processing of the past scan line <highlight><bold>110</bold></highlight> continues until the end of the past scan line <highlight><bold>110</bold></highlight> is reached. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the identification number equivalence table <highlight><bold>300</bold></highlight> and a page storage buffer <highlight><bold>303</bold></highlight> are used to store the output of the first pass processing <highlight><bold>910</bold></highlight>. Preferably included in the page storage buffer <highlight><bold>303</bold></highlight> is the graphical representation of the image. Preferably, pixel tags or line segment tags are also stored in the page storage buffer <highlight><bold>303</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> According to the present embodiment, processing of the remainder of the page <highlight><bold>15</bold></highlight> and image <highlight><bold>100</bold></highlight> is conducted in accordance with the methods of <cross-reference target="DRAWINGS">FIGS. 6 and 10</cross-reference>. Optionally, every row of pixels of each page <highlight><bold>15</bold></highlight>, after the first page of a document, may be processed according to the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In the first stage of processing, step <highlight><bold>310</bold></highlight>, the past pixel count, the present pixel count, the pixel identifier count and the line segment width count are each set to zero. The present pixel identifier is also set to &ldquo;unknown.&rdquo; The pixel tag of the left-most pixel <highlight><bold>122</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight> is then obtained, step <highlight><bold>320</bold></highlight>. See <cross-reference target="DRAWINGS">FIG. 7A</cross-reference>. The present pixel tag is then compared to the previous pixel tag in step <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In the event the present pixel is the first pixel of the row of pixels, as is the case with the left-most pixel <highlight><bold>122</bold></highlight>, the present pixel tag is considered to be the same as the previous pixel tag in step <highlight><bold>330</bold></highlight> of the method shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Therefore, the previous pixel identifier is examined to determine if it is &ldquo;unknown&rdquo;, step <highlight><bold>340</bold></highlight>. In the present example, the left-most pixel <highlight><bold>122</bold></highlight>, i.e. currently the present pixel, does not have a corresponding previous pixel because there is no pixel to its left. Therefore, in this case, the previous pixel has an &ldquo;unknown&rdquo; identifier. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The past pixel tag is therefore compared to the present pixel tag, step <highlight><bold>350</bold></highlight>. In the present example, the past pixel is the left-most pixel <highlight><bold>112</bold></highlight> of the past scan line <highlight><bold>110</bold></highlight>. The past pixel tag in the present example represents a non-white pixel while the present pixel tag is a &ldquo;white&rdquo; pixel tag. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Therefore, in the present example, processing continues with step <highlight><bold>355</bold></highlight>, determining whether the line segment width count is greater or equal to the maximum unknown threshold count. The maximum unknown threshold count is designed to allow for a buffer memory to be used as described later in relation to second pass processing. In the present example, an artificially low maximum unknown threshold count is set to 6. However, the maximum unknown threshold count is typically set to a larger value corresponding to the memory addresses available in a buffer memory, such as 32 or 256 or higher. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Because the line segment width count does not equal or exceed the maximum unknown threshold count, the unknown identifier is retained for the present pixel, step <highlight><bold>360</bold></highlight>. Processing continues by incrementing the line segment width count, step <highlight><bold>365</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In accordance with the method of the present embodiment shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the process repeats, beginning at step <highlight><bold>320</bold></highlight>, for the pixel <highlight><bold>123</bold></highlight> to the right of the left-most pixel <highlight><bold>122</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight>. See <cross-reference target="DRAWINGS">FIG. 7B</cross-reference>. Because the relevant parameters for the pixel <highlight><bold>123</bold></highlight> to the right of the left-most pixel <highlight><bold>122</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight> are the same as for the left-most pixel <highlight><bold>122</bold></highlight>, the processing of the pixel <highlight><bold>123</bold></highlight> to the right of the left-most pixel <highlight><bold>122</bold></highlight> would be the same as for the left-most pixel <highlight><bold>122</bold></highlight> as described above. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Processing of the third pixel <highlight><bold>124</bold></highlight> from the left of the present scan line <highlight><bold>120</bold></highlight> is the same as the above-described process until the past pixel tag is compared to the present pixel tag in step <highlight><bold>350</bold></highlight>. In this case, the past pixel tag, here corresponding to the third pixel <highlight><bold>114</bold></highlight> from the left in the past scan line <highlight><bold>110</bold></highlight>, is &ldquo;white,&rdquo; therefore matching the third pixel <highlight><bold>124</bold></highlight> from the left in the present scan line <highlight><bold>120</bold></highlight>. Therefore, the past pixel identifier is assigned to the present pixel, step <highlight><bold>370</bold></highlight>. The line segment width count is again incremented, step <highlight><bold>365</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The process again repeats beginning at step <highlight><bold>320</bold></highlight> for the fourth pixel <highlight><bold>126</bold></highlight> from the left on the present scan line <highlight><bold>120</bold></highlight>. See <cross-reference target="DRAWINGS">FIG. 7C</cross-reference>. In this case, the previous pixel identifier is known, step <highlight><bold>340</bold></highlight>. The previous pixel identifier in this case is &ldquo;2,&rdquo; the pixel identifier of the fourth pixel <highlight><bold>125</bold></highlight> from the left of the present scan line <highlight><bold>120</bold></highlight>. Therefore, the previous pixel identifier is assigned to the present pixel, step <highlight><bold>380</bold></highlight>, followed by incrementing the line segment width count, step <highlight><bold>365</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>D, the fifth pixel <highlight><bold>126</bold></highlight> and sixth pixel <highlight><bold>127</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight> are processed as described above in relation to the fourth pixel <highlight><bold>125</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Upon reaching the seventh pixel <highlight><bold>128</bold></highlight> from the left of the present scan line <highlight><bold>120</bold></highlight>, the present pixel tag is compared to the previous pixel tag, step <highlight><bold>330</bold></highlight>. Because the present pixel tag of the seventh pixel <highlight><bold>128</bold></highlight>, representing a non-white pixel, is not the same as the previous pixel tag, representing a white pixel, a line segment border is detected, step <highlight><bold>390</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> At this time in the present example, the previous pixel is the sixth pixel <highlight><bold>127</bold></highlight> from the left of the present scan line <highlight><bold>120</bold></highlight> and its identifier is 2, as shown in <cross-reference target="DRAWINGS">FIG. 7D</cross-reference>. Therefore, because the previous pixel identifier is known, step <highlight><bold>400</bold></highlight>, processing proceeds to step <highlight><bold>430</bold></highlight>. The previous line segment data is stored to the line segment memory <highlight><bold>200</bold></highlight>, step <highlight><bold>430</bold></highlight>, with a line segment identifier equal to the pixel identifiers of the pixels forming the line segment. In the present case, the previous line segment &ldquo;F&rdquo; as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, including the first pixel <highlight><bold>122</bold></highlight> to the sixth pixel <highlight><bold>127</bold></highlight> from the left of the present scan line <highlight><bold>120</bold></highlight>, is assigned a line segment identifier of &ldquo;2&rdquo;. Therefore, &ldquo;2&rdquo; is stored to the line segment memory <highlight><bold>200</bold></highlight>, step <highlight><bold>430</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Because this is the first line segment data of a new scan line, the line segment data is stored in the opposite side from the earlier scan line. In this case, the line segment data of the past scan line <highlight><bold>110</bold></highlight> was stored in RAM A, so the line segment data of the present scan line <highlight><bold>120</bold></highlight> is stored in RAM B, as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. The line segment data for line segment &ldquo;F&rdquo; is shown in row <highlight><bold>204</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Next, the present pixel is assigned an unknown pixel identifier, step <highlight><bold>440</bold></highlight>, and the line segment width count is set to zero, step <highlight><bold>450</bold></highlight>. Processing continues at step <highlight><bold>350</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Because the past pixel, here the seventh pixel <highlight><bold>118</bold></highlight> from the left of the past scan line <highlight><bold>110</bold></highlight>, has a &ldquo;non-white&rdquo; pixel tag and the present pixel tag is also &ldquo;non-white,&rdquo; the present pixel is assigned the past pixel identifier, step <highlight><bold>370</bold></highlight>. In this case, the present pixel identifier is &ldquo;3&rdquo;, as shown in <cross-reference target="DRAWINGS">FIG. 7D</cross-reference>. By the use of the ping-pong memory for the line segment memory <highlight><bold>200</bold></highlight>, the past pixel information, such as the past pixel tag and past pixel identifier can be quickly determined. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The remaining pixels of the present scan line <highlight><bold>120</bold></highlight> until the fourteenth pixel <highlight><bold>129</bold></highlight> from the left, see <cross-reference target="DRAWINGS">FIG. 7E</cross-reference>. As noted above, for the purposes of this example the maximum unknown threshold count is set to 6. Therefore, at step <highlight><bold>355</bold></highlight>, the line segment width count is greater or equal to the maximum unknown threshold count. Therefore, a new segment identifier, &ldquo;6&rdquo; in this case, is assigned to the present line segment, step <highlight><bold>460</bold></highlight>. Also, the identifier count is incremented, step <highlight><bold>470</bold></highlight>, and the line segment width count is incremented, step <highlight><bold>365</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The remaining pixels of the present scan line <highlight><bold>120</bold></highlight> are processed according to the method described above. For reference, <cross-reference target="DRAWINGS">FIG. 7F</cross-reference> provides the pixel identifiers assigned to the pixels of the remainder of the present scan line <highlight><bold>120</bold></highlight> according to the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> during the first pass processing <highlight><bold>910</bold></highlight> proceeds until the end of the scan line. With reference to <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, first pass processing <highlight><bold>910</bold></highlight> includes line segment identifier allocation <highlight><bold>912</bold></highlight> and updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight>. In the illustrative embodiment of the invention, line segment identifier allocation <highlight><bold>912</bold></highlight> is provided by the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> by the method of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. Preferably, line segment identifier allocation <highlight><bold>912</bold></highlight> is performed on the first two scan lines of a page or document before updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>A, updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> may be performed between each scan line. Alternatively, as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>B, line segment identifier allocation <highlight><bold>912</bold></highlight> may be performed only every other scan line so that updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> may be performed on alternate scan lines. Although performing line segment identifier allocation <highlight><bold>912</bold></highlight> on only every other scan line reduces the resolution of the resulting windowing of the document, modem day scanner resolutions are sufficiently detailed to enable a reduction in windowing resolution with acceptable results. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> provides an illustration of the pixel identifiers assigned during the line segment identifier allocation <highlight><bold>912</bold></highlight> as provided by the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. With reference to <cross-reference target="DRAWINGS">FIGS. 4, 6</cross-reference> and <highlight><bold>13</bold></highlight>A, it is noted that after processing the pixels of line segment &ldquo;J,&rdquo; the previous pixel identifier is unknown in step <highlight><bold>400</bold></highlight>, so a new line segment identifier is assigned to the previous line segment, step <highlight><bold>410</bold></highlight>. In this case, the line segment identifier assigned to line segment J is &ldquo;7,&rdquo; as illustrated in <cross-reference target="DRAWINGS">FIG. 13B</cross-reference>. Next, the identifier count is incremented, step <highlight><bold>420</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> illustrates the line segment identifiers assigned during the line segment identifier allocation <highlight><bold>912</bold></highlight> as provided by the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> will be explained herein with reference to the lower two scan lines as illustrated in <cross-reference target="DRAWINGS">FIGS. 4, 13A</cross-reference> and <highlight><bold>13</bold></highlight>B, in order to better illustrate the illustrative embodiment of the invention. In keeping with the nomenclature illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, lines segments in the bottom-most scan line of <cross-reference target="DRAWINGS">FIGS. 4, 13A</cross-reference> and <highlight><bold>13</bold></highlight>B are progressively identified as present line segments. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> begins with reading line segment data from the line segment memory <highlight><bold>200</bold></highlight>, step <highlight><bold>510</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIGS. 3, 4</cross-reference>, <highlight><bold>10</bold></highlight>, <highlight><bold>13</bold></highlight>B and <highlight><bold>14</bold></highlight>, the line segment data of the past line segment, line segment &ldquo;F&rdquo; in this case, is read from the line segment memory <highlight><bold>200</bold></highlight>, step <highlight><bold>510</bold></highlight>. Line segment data for line segment &ldquo;F&rdquo; is contained in the first row <highlight><bold>204</bold></highlight> of RAM B of the line segment memory <highlight><bold>200</bold></highlight> as illustrated in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Similarly, line segment data for the present line segment, line segment &ldquo;J&rdquo;, is read from the first row <highlight><bold>202</bold></highlight> of RAM A of the line segment memory <highlight><bold>200</bold></highlight>. Next, the present line segment tag is compared to the past line segment tag, step <highlight><bold>520</bold></highlight>. In this case, the present line segment tag indicates a non-white line segment as illustrated in <cross-reference target="DRAWINGS">FIGS. 13B and 14</cross-reference>. The past line segment tag in this case indicates a white line segment. Therefore, processing continues at the next line segment, step <highlight><bold>530</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Processing repeats at step <highlight><bold>510</bold></highlight> by reading the appropriate line segment data from the line segment memory <highlight><bold>200</bold></highlight>. In this case, as illustrated in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the line segment data corresponding to line segment &ldquo;K&rdquo; is read from the second row <highlight><bold>206</bold></highlight> of RAM A of the line segment memory <highlight><bold>200</bold></highlight>. In this case, the present line segment tag is equal to the past line segment tag, step <highlight><bold>520</bold></highlight>, as both are &ldquo;white&rdquo; line segment tags. Therefore, as shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, processing continues by a comparison of the present line segment identifier to the past line segment identifier, step <highlight><bold>540</bold></highlight>. In the present case, the present line segment identifier, as illustrated in <cross-reference target="DRAWINGS">FIGS. 13B and 14</cross-reference> is equal to the past line segment identifier, as each line segment identifier is &ldquo;2&rdquo;. Therefore as illustrated in the method of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, processing proceeds to the next line segment, step <highlight><bold>530</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The determination of the appropriate next line segment in the method of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is accomplished by locating the next available, neighboring line segment above or below one of the previously processed line segments. For example, line segment &ldquo;G&rdquo; is the next available neighboring line segment to a previously processed line segment. See <cross-reference target="DRAWINGS">FIGS. 4 and 13</cross-reference>B. If there is no such neighboring line segment above or below a previously processed line segment and the ends of the scan lines have not been reached, the next available line segment lower of the two scan lines being processed will be the present scan line for the purposes of the method of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Processing continues by the reading of the appropriate line segment data, step <highlight><bold>510</bold></highlight>, and the present line segment tag is compared to the past line segment tag, step <highlight><bold>520</bold></highlight>. In the present case, the present line segment tag of line segment &ldquo;K&rdquo; does not equal the past line segment tag of line segment &ldquo;G&rdquo;, as one line segment is a white line segment and the other is a non-white line segment. Processing then proceeds to the next line segment, step <highlight><bold>530</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Beginning again through steps <highlight><bold>510</bold></highlight> and <highlight><bold>520</bold></highlight>, the present line segment tag is equal to the past line segment tag, step <highlight><bold>520</bold></highlight>, so processing continues by the comparing of the present line segment identifier to the past line segment identifier, step <highlight><bold>540</bold></highlight>. In this case, the present line segment identifier of line segment &ldquo;K&rdquo; is &ldquo;2&rdquo; and the line segment identifier of the past line segment &ldquo;H&rdquo; is &ldquo;6&rdquo;. Because the line segment identifiers are not equal, the processing continues with a base identifier search on the present line segment identifier, step <highlight><bold>550</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> A base identifier search involves searching through the identification number equivalence table <highlight><bold>300</bold></highlight> to find the base identifier of contiguous line segments having matching segment tags. This is performed by searching through the memory locations of the identification number equivalence table <highlight><bold>300</bold></highlight>, using the contents of each memory location as a pointer to a further memory location until a base identifier is found. A base identifier is signified by the contents of a memory location containing a pointer that points to its own memory location. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> A base identifier search of the present line segment is performed by looking to the memory location corresponding to the present line segment. The content of that memory location is then used as a pointer to a memory location. This process continues until a pointer points to its own memory location. For example, in the present case, the memory location corresponding to the present line segment &ldquo;K&rdquo; is memory location &ldquo;2.&rdquo; As shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the content of memory location &ldquo;2&rdquo; is &ldquo;2.&rdquo; Therefore, the base identifier search is complete, with the base identifier of the present line segment being &ldquo;2.&rdquo;</paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Next, the base identifier of the present line segment is written to the memory location in the identification number equivalence table <highlight><bold>300</bold></highlight> specified by using the past line segment identifier as a pointer, step <highlight><bold>560</bold></highlight>. In the present case, the past line segment &ldquo;H&rdquo; has an identifier of &ldquo;6.&rdquo; See <cross-reference target="DRAWINGS">FIGS. 4 and 13</cross-reference>B. Therefore, the base identifier &ldquo;2&rdquo; is written to the sixth memory location of the identification number equivalence table <highlight><bold>300</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. Note that the line segment identifiers assigned to each line segment, as illustrated in <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> do not change. Instead, the identification number equivalence table <highlight><bold>300</bold></highlight> is used to associate the line segments. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Optionally, the base identifier search may be omitted for line segments having various segment tags, such as for white pixel line segments. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIGS. 9, 12</cross-reference> and <highlight><bold>15</bold></highlight>, it is noted that the content of the fourth memory location of the identification number equivalence table <highlight><bold>300</bold></highlight> was updated from &ldquo;4&rdquo; to &ldquo;6&rdquo; upon an earlier operation of the method of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> after processing of the first two lines of <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> in view of line segments D and H. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> of the remainder of the present scan line <highlight><bold>120</bold></highlight> and next scan line <highlight><bold>130</bold></highlight> continues as described above for the remaining line segments. Then, line segment identifier allocation <highlight><bold>912</bold></highlight> begins for the next set of scan lines. This process of alternating between line segment identifier allocation <highlight><bold>912</bold></highlight> and updating <highlight><bold>914</bold></highlight> the identification number equivalence table <highlight><bold>300</bold></highlight> continues until the end of the document is reached. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> First pass processing <highlight><bold>910</bold></highlight> as described above associates proximate line segments of neighboring scan lines. However, the first pass processing of the illustrative embodiment uses only a two-line line segment memory <highlight><bold>200</bold></highlight> and therefore does not associate line segments beyond the present scan line and the past scan line at any given time. As an example, note that although line segments B, F, K H and D are proximate and of common content type, all of these line segments do not yet have a common identifier. See <cross-reference target="DRAWINGS">FIGS. 4, 13B</cross-reference> and <highlight><bold>15</bold></highlight>. Optionally, line segment memories having greater line capacity may be used in accordance with a variation of the present invention. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIGS. 5 and 16</cross-reference>, processing continues with interdocument delay processing <highlight><bold>304</bold></highlight> to perform further analysis of the identification number equivalence table <highlight><bold>300</bold></highlight> during an interdocument delay period. The interdocument delay period may occur between pages, at the end of a document or at other specified intervals. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> According to an illustrative embodiment of the invention, the interdocument delay processing <highlight><bold>304</bold></highlight> involves the method illustrated in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> to reduce all memory address contents to their base identifier, producing a window retagging table <highlight><bold>305</bold></highlight> for use in second pass processing <highlight><bold>920</bold></highlight>. Therefore, interdocument delay processing <highlight><bold>304</bold></highlight> as described below overcomes the shortcomings of the two-line line segment memory <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> According to an illustrative embodiment of the invention, the interdocument delay period begins by setting variables A and W equal to &ldquo;1&rdquo;, step <highlight><bold>610</bold></highlight>. The variable A is then compared to the maximum address used, step <highlight><bold>620</bold></highlight>. As provided in the identification number equivalence table <highlight><bold>300</bold></highlight> at the conclusion of first pass processing <highlight><bold>910</bold></highlight>, as illustrated in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, the maximum address used in this case is 7. Because A is not greater than the maximum address used, processing continues by comparing the entry at address A to A, step <highlight><bold>630</bold></highlight>. A&equals;1, and as illustrated in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, the entry for address <highlight><bold>1</bold></highlight> is &ldquo;1.&rdquo;</paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Preferably, the interdocument delay processing <highlight><bold>304</bold></highlight> involves a status table <highlight><bold>302</bold></highlight>. The status table <highlight><bold>302</bold></highlight> contains three items for each memory location. First, an entry <highlight><bold>307</bold></highlight> is provided matching the contents of the corresponding memory location in the identification number equivalence table <highlight><bold>300</bold></highlight> at the conclusion of first pass processing <highlight><bold>910</bold></highlight>. A BaseID flag <highlight><bold>308</bold></highlight> is also determined as described herein. Also, a window label <highlight><bold>309</bold></highlight> is determined, identifying the window to which line segments associated with the memory location are included. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> Because, at this stage in the present example, the entry at address A is equal to A, processing continues by marking the BaseID flag <highlight><bold>308</bold></highlight> as &ldquo;True&rdquo; for the current memory location, step <highlight><bold>640</bold></highlight>, identified by Address <highlight><bold>1</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 18A</cross-reference>. Processing continues by assigning the value of W to the window label <highlight><bold>309</bold></highlight> for the current memory location, step <highlight><bold>650</bold></highlight>. A is then incremented, step <highlight><bold>660</bold></highlight>, and the process begins again at step <highlight><bold>620</bold></highlight>. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>A, processing for the second and third memory locations is as described above. Processing for the fourth memory location differs in that, at step <highlight><bold>630</bold></highlight>, the entry <highlight><bold>307</bold></highlight> of the fourth memory location is not <highlight><bold>4</bold></highlight>. Therefore, the BaseID flag <highlight><bold>308</bold></highlight> is set to &ldquo;False,&rdquo; step <highlight><bold>670</bold></highlight>. In such a case, a window label is not assigned at this stage. Processing continues by incrementing A, step <highlight><bold>660</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> When the status table <highlight><bold>302</bold></highlight> has been processed, <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> illustrates the resulting status table <highlight><bold>302</bold></highlight> in the present example. At this stage, A will be greater than the maximum address used, step <highlight><bold>620</bold></highlight>, so the Connect_ID flag will be set to &ldquo;True&rdquo; and a loop counter set to zero, step <highlight><bold>680</bold></highlight>. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The remainder of the interdocument delay processing will work to fill in the widow labels <highlight><bold>309</bold></highlight> that were not provided earlier. In summary, the status table <highlight><bold>320</bold></highlight> is repeatedly scanned until the Connect_ID flag is set to &ldquo;False.&rdquo; Before each scan, the A is set to 1 and a second counter, BreakCnt, is set to zero. At each memory location A, the entry <highlight><bold>307</bold></highlight> of memory location A is represented by E. If the BaseID flag <highlight><bold>308</bold></highlight> at memory location A is False, then the entry <highlight><bold>307</bold></highlight> at memory location A is changed to the entry <highlight><bold>307</bold></highlight> at memory location E. The BaseID flag <highlight><bold>308</bold></highlight> is set to True, if it is True for memory location E. BreakCnt is also incremented to account for the change. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Specifically, with reference to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, processing continues from step <highlight><bold>680</bold></highlight> above by determining whether Connect_ID is true, step <highlight><bold>690</bold></highlight>. In the present example, Connect_ID is true, so processing proceeds to set A&equals;1 and BreakCnt&equals;0, step <highlight><bold>700</bold></highlight>. Step <highlight><bold>710</bold></highlight> determined whether A is greater than the maximum address used, step <highlight><bold>710</bold></highlight>. At this stage A&equals;1 and the maximum address used is <highlight><bold>7</bold></highlight>, so processing continues by setting the variable E equal to the entry <highlight><bold>307</bold></highlight> of memory location A, step <highlight><bold>720</bold></highlight>. Because the BaseID flag <highlight><bold>308</bold></highlight> of memory location A is not False, step <highlight><bold>730</bold></highlight>, processing continues by incrementing A, step <highlight><bold>740</bold></highlight>, and returning to step <highlight><bold>710</bold></highlight>. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Processing for the second and third memory locations is as described above. Processing for the fourth memory location differs in that, at step <highlight><bold>730</bold></highlight>, the BaseID flag <highlight><bold>308</bold></highlight> of the fourth memory location is False, as shown in <cross-reference target="DRAWINGS">FIG. 18A</cross-reference>. Therefore, the entry <highlight><bold>307</bold></highlight> of memory location A is set to the entry <highlight><bold>307</bold></highlight> of memory location E and BreakCnt in incremented, step <highlight><bold>750</bold></highlight>. At the present stage of the present example, A&equals;4 and E&equals;6. The entry <highlight><bold>307</bold></highlight> of the sixth memory location is &ldquo;2,&rdquo; so the entry <highlight><bold>307</bold></highlight> of the fourth memory location is set to &ldquo;2,&rdquo; as shown in <cross-reference target="DRAWINGS">FIG. 18B</cross-reference>. Because the BaseID flag <highlight><bold>308</bold></highlight> at memory location E is not True, step <highlight><bold>760</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>A, processing continues by returning to step <highlight><bold>740</bold></highlight> and incrementing A. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Processing for the fifth memory location is as described above in relation to the first memory location. However, the sixth memory location has a BaseID flag <highlight><bold>308</bold></highlight> set to False. Therefore, at step <highlight><bold>730</bold></highlight>, the entry <highlight><bold>307</bold></highlight> of memory location A is set to the entry <highlight><bold>307</bold></highlight> of memory location E and BreakCnt in incremented, step <highlight><bold>750</bold></highlight>, as described above in relation to the fourth memory location. At the present stage, A&equals;6 and E&equals;2 and the BaseID flag <highlight><bold>308</bold></highlight> of the second memory location is True. Therefore, processing proceeds to set the BaseID flag <highlight><bold>308</bold></highlight> at memory location A to True, step <highlight><bold>770</bold></highlight>. Also in step <highlight><bold>770</bold></highlight>, the window label <highlight><bold>309</bold></highlight> for memory location A is set to correspond to E, in this case, because E&equals;2, the window label <highlight><bold>309</bold></highlight> for memory location A is set to &ldquo;W2.&rdquo;</paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The remaining memory locations are processed as described above. <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> shows the content of the status table <highlight><bold>320</bold></highlight> after one iteration of proceeding through each memory location. After processing each memory location, A is greater than the maximum address used, step <highlight><bold>710</bold></highlight>, so processing continues by incrementing the loop counter, LoopCnt, step <highlight><bold>780</bold></highlight>. BreakCnt is then compared to zero and LoopCnt is compared to a limit, such as <highlight><bold>100</bold></highlight>, step <highlight><bold>790</bold></highlight>. BreakCnt is not zero at the present stage, indicating that at least one entry <highlight><bold>307</bold></highlight> was modified during the most recent iteration. LoopCnt is set to a high number to limit the processing time. Although a value of 100 is used herein, the value may be adjusted as desired. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Because BreakCnt is not equal to zero, processing returns to step <highlight><bold>690</bold></highlight> to begin the next iteration of processing the status table <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> At the conclusion of the next iteration, the status table <highlight><bold>302</bold></highlight> is as shown in <cross-reference target="DRAWINGS">FIG. 18C</cross-reference>. After the third iteration, all the BaseID flags <highlight><bold>308</bold></highlight> are True and the counter BreakCnt remains zero, therefore, Connect_ID is set to False, step <highlight><bold>800</bold></highlight>, and the processing then proceeds again to step <highlight><bold>690</bold></highlight>. Because Connect_ID is False at step <highlight><bold>690</bold></highlight>, interdocument delay processing <highlight><bold>304</bold></highlight> ends. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> The resulting window retagging table <highlight><bold>305</bold></highlight> is produced from the window label <highlight><bold>309</bold></highlight> items of the status table <highlight><bold>302</bold></highlight>. The window retagging table <highlight><bold>305</bold></highlight> of the present example is shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIGS. 4 and 23</cross-reference>, after interdocument delay processing <highlight><bold>304</bold></highlight>, the line segments &ldquo;D&rdquo; and &ldquo;H&rdquo; are associated with the line segments &ldquo;B&rdquo; &ldquo;F&rdquo; and &ldquo;K,&rdquo; each of these line segments now sharing a common window label <highlight><bold>309</bold></highlight>, thereby forming a window of common content type. In this case, this window is identified as &ldquo;W2&rdquo; and has a &ldquo;white&rdquo; content type. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Second pass processing <highlight><bold>920</bold></highlight> reads the image from the page storage buffer <highlight><bold>303</bold></highlight> to provide enhancement or alteration of the image according to the window retagging table <highlight><bold>305</bold></highlight>. In order to avoid the need to extensive memory requirements, pixel identifiers for each pixel of the image are not stored after first pass processing <highlight><bold>91</bold></highlight> <highlight><bold>0</bold></highlight> and are instead generated again by second pass processing <highlight><bold>920</bold></highlight>. During second pass processing <highlight><bold>920</bold></highlight>, a pixel retagging process <highlight><bold>922</bold></highlight> occurs to assign an appropriate final identifier to each pixel, based on the window in which the pixel is included. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> It is within the scope of the invention to specify output formats for each window. For example, windows having pixel content of a particular color can be changed to a different color. Windows having a graphical picture or text may be changed to output as a white space, thereby deleting the graphical picture or text. Also, windows of white space may be provided with text or a graphical image. As another example, pixels of white and non-white groups, as in the present example, may be reversed, thereby outputting a negative image. As will be appreciated, a wide variety of alternatives are available for enhancing or altering an image within the scope of the invention. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, second pass processing <highlight><bold>920</bold></highlight> is performed according to an illustrative embodiment of the invention by the methods of <cross-reference target="DRAWINGS">FIGS. 20 and 22</cross-reference>. The method of <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is similar in many respects to the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> of first pass processing <highlight><bold>910</bold></highlight>. The steps of the method illustrated in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> are numbered with the same numbers of the method illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Second pass processing <highlight><bold>920</bold></highlight> utilizes the graphical representation of the image stored in the page storage buffer <highlight><bold>303</bold></highlight> and the window retagging table <highlight><bold>305</bold></highlight> in order to identify each pixel of the image as it was identified during first pass processing <highlight><bold>910</bold></highlight>. However, second pass processing <highlight><bold>920</bold></highlight> benefits from the window labels <highlight><bold>309</bold></highlight> in the window retagging table <highlight><bold>305</bold></highlight> to be able to associate each line segment, as it is identified, to the appropriate window. Therefore, second pass processing <highlight><bold>920</bold></highlight> identifies pixels, groups pixels in line segments and assigns line segment identifiers identically to first pass processing <highlight><bold>910</bold></highlight>. Additional aspects of second pass processing <highlight><bold>920</bold></highlight> are involved with retagging each pixel with an appropriate designator to correspond to the window in which it is associated. Further aspects of second pass processing <highlight><bold>920</bold></highlight> involve managing an optional buffer memory, accommodating delays between the identification of a pixel and an assignment of a line segment identifier corresponding to that pixel. Only the steps unique to second pass processing <highlight><bold>920</bold></highlight> will be discussed in detail below. Steps commonly numbered to steps of first pass processing <highlight><bold>910</bold></highlight> are discussed in relation to first pass processing <highlight><bold>910</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, second pass processing <highlight><bold>920</bold></highlight> begins with step <highlight><bold>1010</bold></highlight> in which the past pixel count, the present pixel count, the pixel identifier count and the line segment width count are each set to zero. The present pixel identifier is also set to &ldquo;unknown.&rdquo; Furthermore, the Unknown flag and the Pixel Valid flag of the first memory location in the buffer memory are set to False. Also, the UpdatelD flag is set to False. The Unknown flag, the UpdatelD flag and the Pixel Valid flag are used for management of the buffer memory to modify a pixel identifier for each unknown pixel contained in the buffer before being output as a true pixel identifier, as explained below. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> A sample buffer memory <highlight><bold>1500</bold></highlight> is illustrated in FIGS. <highlight><bold>21</bold></highlight>A-<highlight><bold>21</bold></highlight>E. The buffer memory is preferably a first-in first-out memory register. Each memory location of the buffer memory is adapted to store a Pixel Valid flag <highlight><bold>1510</bold></highlight>, a pixel identifier <highlight><bold>1520</bold></highlight> and an Unknown flag <highlight><bold>1530</bold></highlight>. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> The UpdatelD flag is set to true under three conditions. The first condition occurs when the past pixel tag is the same as the present pixel tag and the previous pixel has an &ldquo;unknown&rdquo; identifier. In this case, all pixel identifiers within the buffer memory with an asserted Unknown flag will be modified with the identifier of the present pixel. The contents of the buffer memory are then shifted and a ResetUnknown flag is then asserted to clear all Unknown flag values. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> The second condition occurs when the past pixel tag is not the same as the present pixel tag, the previous pixel has an &ldquo;unknown&rdquo; identifier, but the LineSegmentWidth count is greater than or equal to the MaxUnknownThreshold value, such as <highlight><bold>6</bold></highlight> in the present example. Once again, all pixel identifiers within the buffer memory with an asserted Unknown flag will be modified with the identifier of the present pixel. The contents within the buffer memory are then shifted and the ResetUnknown flag is then asserted to clear all Unknown flag values. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The third condition occurs when the previous pixel identifier is unknown and a line segment border is encountered. All pixel identifiers within the buffer memory with an asserted Unknown flag will be modified with the identifier of the present pixel. The contents within the buffer memory are then shifted and the ResetUnknown flag is then asserted to clear all Unknown flag values. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> illustrates a method of operation of the buffer memory. The method includes the &ldquo;filling&rdquo; and &ldquo;flushing&rdquo; function of the entire delay buffer before actually outputting any useful pixel identifier information. In the present example, it takes a maximum of 6 clock cycles (or pixels) to produce the first pixel identifier. Likewise, it takes 6 clock cycles at the end of a scan line to &ldquo;flush&rdquo; the contents of the buffer memory in order to output the last 6 pixel identifiers of the scan line. The Pixel Valid flag is used as a way to detect when the pixel identifiers of the first and last memory locations of the buffer memory are valid. (i.e. for &ldquo;filling&rdquo; and &ldquo;flushing&rdquo;). </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, processing continues after step <highlight><bold>1010</bold></highlight> with the pixel tag of the left-most pixel <highlight><bold>122</bold></highlight> of the present scan line <highlight><bold>120</bold></highlight> is then obtained, step <highlight><bold>320</bold></highlight>, as in first pass processing. Because the image and the pixel tags are identical to the image and pixel tags discussed above in relation to first pass processing, and the decision steps of the first pass processing method illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> are identical to those in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> of second pass processing, we now proceed to step <highlight><bold>1020</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Step <highlight><bold>1020</bold></highlight> involves temporarily assigning a pixel identifier to the present pixel for ease of management of the buffer memory <highlight><bold>1500</bold></highlight>. Specifically, during the pixel retagging process <highlight><bold>922</bold></highlight>, the buffer memory <highlight><bold>1500</bold></highlight> memory locations whose Unknown flag is set to true are updated with the same identifier which was stored for the corresponding line-segment in the line segment memory <highlight><bold>200</bold></highlight>. Therefore, the same identifier corresponds to the same pixels in both the line segment memory <highlight><bold>200</bold></highlight> and those which will eventually be output from the last stage of the buffer memory <highlight><bold>1500</bold></highlight>. The present pixel is later assigned an &ldquo;unknown&rdquo; identifier in step <highlight><bold>440</bold></highlight>. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Also in step <highlight><bold>1020</bold></highlight>, for management of the buffer memory <highlight><bold>1500</bold></highlight>, the Unknown flag of the first memory location in the buffer memory is set to False, the Pixel Valid flag of the first memory location in the buffer memory is set to True. Also, the UpdateID flag is set to True. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Processing proceeds at step <highlight><bold>1030</bold></highlight> with the pixel retagging process <highlight><bold>922</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. The pixel retagging process <highlight><bold>922</bold></highlight> will be explained with reference to the buffer memory <highlight><bold>1500</bold></highlight> illustrated in FIGS. <highlight><bold>21</bold></highlight>A-<highlight><bold>21</bold></highlight>E. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Beginning at step <highlight><bold>1110</bold></highlight>, if the scan line is complete, the Flush flag and the Scan Line End flag are set to True, step <highlight><bold>1120</bold></highlight>. Alternatively, if the scan line is not complete, the Flush flag and the Scan Line End flag are set to False, step <highlight><bold>1130</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> If the UpdateID flag <highlight><bold>1540</bold></highlight> is not true as shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>A, step <highlight><bold>1140</bold></highlight>, processing proceeds by setting the pixel identifier <highlight><bold>1530</bold></highlight> of the first memory location <highlight><bold>1501</bold></highlight> in the buffer memory <highlight><bold>1500</bold></highlight> to the present pixel identifier, step <highlight><bold>1150</bold></highlight>. In the present example, the present pixel identifier is &ldquo;unknown&rdquo; and represented by &ldquo;U&rdquo; in <cross-reference target="DRAWINGS">FIG. 21A</cross-reference>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The contents of the memory locations of the buffer memory <highlight><bold>1500</bold></highlight> are then shifted by one, step <highlight><bold>1160</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 21B</cross-reference>. If the Pixel Valid flag <highlight><bold>1510</bold></highlight> of the last memory location <highlight><bold>1505</bold></highlight> in the buffer memory <highlight><bold>1500</bold></highlight> is not true, step <highlight><bold>1170</bold></highlight>, processing continues by looking to the Scan Line End flag. If the Scan Line End flag is not true, step <highlight><bold>1180</bold></highlight>, processing continues by returning to the method of second pass processing of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> With continued reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, if the UpdateID flag is true in step <highlight><bold>1140</bold></highlight> as illustrated in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>C, the present pixel identifier is assigned to all buffer memory <highlight><bold>1500</bold></highlight> memory locations whose Unknown flag <highlight><bold>1530</bold></highlight> is True, step <highlight><bold>1190</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 21D</cross-reference>. All Unknown flags are then set to False, preferably by the use of a RstUnknown flag, step <highlight><bold>1200</bold></highlight>. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>E, when the Pixel Valid flag of the last memory location <highlight><bold>1505</bold></highlight> in the buffer memory <highlight><bold>1500</bold></highlight> is True at step <highlight><bold>1170</bold></highlight>, processing continues by setting the memory location of the window retagging table <highlight><bold>305</bold></highlight> equal to the pixel identifier of the last memory location <highlight><bold>1505</bold></highlight> in the buffer memory <highlight><bold>1500</bold></highlight>, step <highlight><bold>1210</bold></highlight>. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> The pixel identifier of an output pixel is then set to the contents of the memory location of the window retagging table <highlight><bold>305</bold></highlight> equal to the pixel identifier of the last memory location <highlight><bold>1505</bold></highlight> in the buffer memory <highlight><bold>1500</bold></highlight>, step <highlight><bold>1220</bold></highlight>. The output pixel is the pixel assigned a final identifier as a result of the illustrative embodiment of the present invention. This final identifier will correspond to window label of the appropriate line segment of which the pixel belongs. See <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> If the Flush flag is True, step <highlight><bold>1230</bold></highlight>, the process will resume at step <highlight><bold>1160</bold></highlight>, as illustrated in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, resulting in outputting the memory locations of the buffer memory <highlight><bold>1500</bold></highlight> having Pixel Valid flags <highlight><bold>1510</bold></highlight> set to True. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, steps <highlight><bold>1030</bold></highlight>, <highlight><bold>1040</bold></highlight> and <highlight><bold>1050</bold></highlight> of second pass processing <highlight><bold>920</bold></highlight> correspond to steps <highlight><bold>360</bold></highlight>, <highlight><bold>370</bold></highlight> and <highlight><bold>380</bold></highlight>, respectively, of line segment identifier allocation <highlight><bold>912</bold></highlight> of first pass processing <highlight><bold>910</bold></highlight> and illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Steps <highlight><bold>1030</bold></highlight>, <highlight><bold>1040</bold></highlight> and <highlight><bold>1050</bold></highlight> further include adjustments to the Unknown flag and the Pixel Valid flag of the first memory location in the buffer memory and the UpdateID flag as described above and illustrated in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> Step <highlight><bold>1070</bold></highlight> of second pass processing <highlight><bold>920</bold></highlight>, after step <highlight><bold>460</bold></highlight>, is similar to step <highlight><bold>1020</bold></highlight> discussed above. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Following step <highlight><bold>365</bold></highlight> of second pass processing <highlight><bold>920</bold></highlight> is step <highlight><bold>1060</bold></highlight>, the pixel retagging process illustrated in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> The pixel retagging process <highlight><bold>922</bold></highlight> described above allows the use of a buffer memory <highlight><bold>1500</bold></highlight> to allow line segments to be determined while analyzing the image. Upon determination of line segments, pixel identifiers can be determined, allowing the pixel to be processed in accordance with the window retagging table <highlight><bold>305</bold></highlight>. Therefore, the buffer memory and associated pixel retagging process <highlight><bold>922</bold></highlight> allow the output of an enhanced or altered image while the image is being read from the page storage buffer <highlight><bold>303</bold></highlight> during second pass processing <highlight><bold>920</bold></highlight> with only a slight delay due to the time required for pixel information to pass through the buffer memory <highlight><bold>1500</bold></highlight>. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> According to a further illustrative embodiment of the invention, an apparatus is provided. The apparatus is illustrated in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. A processor <highlight><bold>1700</bold></highlight> is provided and is preferably adapted to execute the steps of the methods of the invention. A wide variety of processors may be used. The processor is in communication with a memory <highlight><bold>1710</bold></highlight> capable of storing data for use by the processor <highlight><bold>1710</bold></highlight>. An input device <highlight><bold>1720</bold></highlight> in communication with the processor <highlight><bold>1700</bold></highlight> is preferably provided to enable reading of an image. Some examples of input devices <highlight><bold>1720</bold></highlight> include an optical scanner and a program capable of reading an electronically stored image. An output device <highlight><bold>1730</bold></highlight> in communication with the processor <highlight><bold>1700</bold></highlight> is also preferably provided to enable the outputting of an image according to the present invention. Some examples of output devices <highlight><bold>1730</bold></highlight> include a printer and a program capable of storing an image in electronic format. It is noted that each of the above components may be located remotely from others and may be in communication with others by wired or wireless communication devices, including electrical and optical devices. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Although the examples herein involve the processing of a page of a document from top-to-bottom, other directions are within the scope of the invention. For example, each page may be processed from side-to-side or from bottom-to-top. Also, various angles of processing are within the scope of the invention. In such a case, the rows and columns are preferably aligned with the direction of processing. Also within the scope of the invention are pixel configurations not involving rows and columns. In such a case, processing may proceed by locating and processing proximate pixels, preferably proceeding until each pixel has been processed. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> These examples are meant to be illustrative and not limiting. The present invention has been described by way of example, and modifications and variations of the exemplary embodiments will suggest themselves to skilled artisans in this field without departing from the spirit of the invention. Features and characteristics of the above-described embodiments may be used in combination. The preferred embodiments are merely illustrative and should not be considered restrictive in any way. The scope of the invention is to be measured by the appended claims, rather than the preceding description, and all variations and equivalents that fall within the range of the claims are intended to be embraced therein. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Having described the invention, what is claimed as new and protected by Letters Patent is: </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of processing an image, comprising the steps of: 
<claim-text>obtaining content data about a plurality of pixels in an image; </claim-text>
<claim-text>grouping pixels having similar content data to form a plurality of line segments; </claim-text>
<claim-text>associating line segments from said plurality of line segments into at least a first window and a second window, wherein said first window and said second window represent similar pixels according to said content data; and </claim-text>
<claim-text>storing information pertaining to said line segments determined during said step of associating, wherein said information associates each line segment with a corresponding window. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the steps of: 
<claim-text>reading said information stored during said step of storing; and </claim-text>
<claim-text>assigning a final identifier to each pixel of said plurality of pixels, such that said final identifier corresponds to said information stored during said step of storing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising, before the step of assigning, the steps of: 
<claim-text>determining a desired output characteristic of at least said first window; and </claim-text>
<claim-text>incorporating said desired output characteristic in said information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising, after the step of assigning, the step of outputting to an output device, said image in the form of said plurality of pixels designated by said final identifiers. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said step of grouping involves grouping pixels of only two rows of pixels at any one time. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said step of associating involves grouping line segments by searching for a base identifier. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said step of associating involves assigning a line segment identifier to each of said line segments. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said step of associating involves assigning a line segment identifier to each of said line segments, wherein said line segment identifier is determined by line segment identifiers of neighboring line segments. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein line segment identifier is similar to line segment identifiers of neighboring line segments formed of similar pixels according to said content data. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said step of storing involves a single memory location for each unique line segment identifier. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising, after the step of storing, the step of processing said information to combine said first window and said second window into a single window if said single window would represent similar pixels according to said content data. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said step of processing comprises the steps of: 
<claim-text>reading a first memory location to determine a first memory location content; </claim-text>
<claim-text>pointing to a further memory location corresponding to said first memory location content; </claim-text>
<claim-text>if said first memory location content does not point to said first memory location, reading a further memory location content of said further memory location; </claim-text>
<claim-text>continuing to point to succeeding memory locations until a memory location content points to its own memory location and designating said memory location content as a base identifier; and </claim-text>
<claim-text>writing a base identifier to said first memory location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said content data is a pixel tag for each pixel of said plurality of pixels. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said image is a multiple-page document. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said step of obtaining involves assigning an input device. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said input device is a scanner. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method of processing an image, comprising the steps of: 
<claim-text>comparing a first identifier of a first line segment on a first line on said image to a second identifier of a second line segment on a second line on said image, wherein said first line and said second line are parallel to a first axis and said first line segment overlaps said second line segment along said first axis; and </claim-text>
<claim-text>if said first identifier does not equal said second identifier, conducting a base identifier search to determine a base identifier for said first line segment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising the steps of: 
<claim-text>if said first identifier does equal said second identifier, comparing said second identifier to a third identifier of a third line segment on a third line, wherein said third line is parallel to said first axis and proximate to said second line and said second line segment overlaps said third line segment along said first axis; and </claim-text>
<claim-text>if said second identifier does not equal said third identifier, conducting a base identifier search for said second line segment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said base identifier search comprises the steps of: 
<claim-text>reading a first memory location to determine a first memory location content; </claim-text>
<claim-text>pointing to a further memory location corresponding to said first memory location content; </claim-text>
<claim-text>if said first memory location content does not point to said first memory location, reading a further memory location content of said further memory location; </claim-text>
<claim-text>continuing to point to succeeding memory locations until a memory location content points to its own memory location and designating said memory location content as a base identifier; and </claim-text>
<claim-text>writing said base identifier to said first memory location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said first line segment and said second line segment are contiguous. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said first identifier is stored in a first side of a ping pong memory and said second identifier is stored in a second side of a ping pong memory. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said image comprises a plurality of said first scan lines and a plurality of said second scan lines and each of said plurality of first scan lines and said plurality of second scan lines are processed. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein all line segments on said first scan line and all line segments on said second scan line are processed before processing line segments on a different scan line. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein a first scan line of a page of said image is said first line and a last scan line of said page of said image is said second line and all remaining scan lines of said page of said image are selectively, alternatively designated as said first line and said second line during processing. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A method of processing an image, comprising the steps of: 
<claim-text>determining a first segment tag for a first line segment on a first line parallel to a first axis; </claim-text>
<claim-text>writing a first identifier into a first memory location and assigning said first identifier to said first line segment; </claim-text>
<claim-text>determining a second segment tag for a second line segment on a second line parallel and proximate to said first line wherein said second line segment overlaps a position of said first line segment along said first axis; </claim-text>
<claim-text>if said first segment tag equals said second segment tag, writing said first identifier to a second memory location; </claim-text>
<claim-text>if said first segment tag does not equal said second segment tag, writing a second identifier into a second memory location and assigning said second identifier to said second line segment; </claim-text>
<claim-text>reading a first memory location to determine a first memory location content; </claim-text>
<claim-text>pointing to a further memory location corresponding to said first memory location content; </claim-text>
<claim-text>if said first memory location content does not point to said first memory location, reading a further memory location content of said further memory location; </claim-text>
<claim-text>continuing to point to succeeding memory locations until a memory location content points to its own memory location and designating said memory location as a base identifier; and </claim-text>
<claim-text>writing said base identifier to said first memory location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, further comprising the step of determining a location of a third line segment by identifying said third line segment on one of said first line and said second line, as contiguous with one of the group of said first line segment and said second line segment extending a lesser distance in a first direction along said first axis such that said third line segment overlaps a position of the other of said group of said first line segment and said second line segment along said first axis. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said first line segment and said second line segment are contiguous. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said first identifier is stored in a first side of a ping pong memory and said second identifier is stored in a second side of a ping pong memory. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of processing an image of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein all line segments on said first line and all line segments on said second line are processed before processing line segments on a different line. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. An apparatus for processing an image, comprising: 
<claim-text>a memory adapted to store at least one of the group of a first identifier of a first line segment on a first line and a second identifier of a second line segment on a second line; and </claim-text>
<claim-text>a processor coupled to said memory and adapted to compare said first identifier to said second identifier, determine a first segment tag for said first line segment, determine that said first line segment is eligible for a base identifier search if said first identifier does not equal said second identifier and conduct a base identifier search for said first line segment; </claim-text>
<claim-text>wherein said first line and said second line are parallel to a first axis and said first line segment overlaps said second line segment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The apparatus for processing an image of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein said base identifier search comprises the steps of: 
<claim-text>reading a first memory location of said memory to determine a first memory location content; </claim-text>
<claim-text>pointing to a further memory location of said memory, corresponding to said first memory location content; </claim-text>
<claim-text>if said first memory location content does not point to said first memory location, read a further memory location content of said further memory location; </claim-text>
<claim-text>continuing to point to succeeding memory locations of said memory until a memory location content points to its own memory location and designating said memory location as a base identifier; and </claim-text>
<claim-text>writing said base identifier to said first memory location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The apparatus for processing an image of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein a first scan line of a page of said image is said first line and a last scan line of said page of said image is said second line and all remaining scan lines of said page of said image are selectively, alternatively designated as said first line and said second line during processing. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The apparatus for processing an image of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein said first line segment and said second line segment are contiguous. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising an input device coupled to said processor to enable said processor to determine said first segment tag. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein said input device is a scanner. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A method for processing an image, the method comprising the steps of: 
<claim-text>determining a pixel tag corresponding to a pixel content type of a pixel of a first row; </claim-text>
<claim-text>determining a pixel identifier based on said pixel tag and pixel identifiers of neighboring pixels in said first row and in a neighboring second row; </claim-text>
<claim-text>forming line segments of neighboring pixels of said first row having common pixel identifiers; and </claim-text>
<claim-text>reviewing line segments of said second row and said first row to associate line segments of said second row neighboring line segments of said first row and having common pixel tags. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising the step of assigning a line segment identifier to each of said line segments, wherein said line segment identifier corresponds to said pixel identifiers of said pixels forming each of said line segment. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, further comprising the step of storing said line segment identifiers for each of said line segments in said first row and said second row in a line segment memory. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising the step of forming an identifier equivalence table to store said associations of said line segments of said second row neighboring line segments of said first row and having common pixel tags. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising the step of performing a base identifier search to update said identifier equivalence table and associate line segments of at least a third row. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method of claim <highlight><bold>40</bold></highlight>, further comprising the step of processing said identifier equivalence table to assign window labels, wherein each window label is associated with an area of said image having pixels of a common content type.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002087A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002087A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002087A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002087A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002087A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002087A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002087A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002087A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002087A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002087A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002087A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002087A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002087A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002087A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002087A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002087A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002087A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002087A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002087A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002087A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002087A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030002087A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030002087A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030002087A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030002087A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030002087A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
