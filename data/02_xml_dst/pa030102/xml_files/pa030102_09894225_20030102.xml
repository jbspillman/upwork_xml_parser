<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001842A1-20030102-D00000.TIF SYSTEM "US20030001842A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001842A1-20030102-D00001.TIF SYSTEM "US20030001842A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001842A1-20030102-D00002.TIF SYSTEM "US20030001842A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001842A1-20030102-D00003.TIF SYSTEM "US20030001842A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001842A1-20030102-D00004.TIF SYSTEM "US20030001842A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001842</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894225</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06T015/50</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06T015/60</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>426000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Object visibility control for ray tracing</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Aaftab</given-name>
<middle-name>A.</middle-name>
<family-name>Munshi</family-name>
</name>
<residence>
<residence-us>
<city>Los Gatos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>PILLSBURY WINTHROP LLP</name-1>
<name-2></name-2>
<address>
<address-1>1600 Tysons Boulevard</address-1>
<city>McLean</city>
<state>VA</state>
<postalcode>22102</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A computer graphics method and apparatus allows designer control over the rendering of objects and scenes, in a rendering system using ray tracing for example. A modeling system is adapted to accept rules for controlling how certain objects affect the appearance of certain other objects. In a ray tracing implementation, rules are specified by ray type and can be specified as either &ldquo;including&rdquo; all but certain objects or &ldquo;excluding&rdquo; specific objects for any given object. A rendering system extracts these rules from a bytestream or other input including other graphics data and instructions, and populates lists for internal use by other components of the rendering system. A ray tracer in the rendering system is adapted to consult the list when performing ray tracing, so as to enforce the rendering control specified by the content creator when the objects and scene are rendered. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to computer graphics, and more particularly, to a method and apparatus for controlling rendering of objects and scenes using ray tracing techniques, for example. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Computer graphics systems are important components in many applications, such as CAD/CAM, computer animation and gaming, visualization systems, flight simulators, special effects, medical imaging, architectural visualization, virtual reality, etc. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Computer graphics involves the design or modeling of objects and scenes to be displayed (typically 3-dimensional, but can be 2-dimensional), which models and designs are translated into data and instructions in computer-readable form. Computer graphics systems use these data and instructions, perhaps under the further stimulus of a user input through a joystick for example, to render these objects and scenes on a display for human perception. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> During rendering, ray tracing techniques can be used to determine which of the modeled objects and/or portions thereof are to be included in a scene (perhaps from a perspective determined from a user input). Recursive ray tracing techniques can further determine how the appearance of some objects may be affected by the presence of other objects and light sources (e.g. shadows). Although typical computer graphics systems allow designers to specify how individual objects are to be displayed (e.g. lighting, special effects, textures, etc.), it may be desirable to allow a designer to further specify whether and how certain objects can affect the appearance of certain other objects. For example, a designer may wish to force one object not to be shadowed from another object, even though the other object may lie in a path between the first object and a specified light source. This presents a problem that has not been addressed by the prior art, including computer graphics systems employing a ray tracing rendering scheme. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The present invention relates to a computer graphics method and apparatus for controlling the rendering of objects and scenes, in a rendering system using ray tracing for example. A modeling system is adapted to accept rules for controlling how certain objects and/or light sources affect the appearance of certain other objects and/or lights. In a ray tracing implementation, rules are specified by ray type and can be specified as either &ldquo;including&rdquo; all but certain objects and/or lights or &ldquo;excluding&rdquo; specific objects and/or lights. A rendering system extracts these rules from a bytestream including other graphics data and instructions and populates lists for internal use by other components of the rendering system. A ray tracer in the rendering system is adapted to consult the list when performing ray tracing, so as to enforce the rendering control specified by the content creator when the objects and scene are rendered.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> These and other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures, wherein: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a top-level diagram illustrating an example computer graphics environment for an implementation of the present invention; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a functional block diagram illustrating an example implementation of a rendering system in accordance with the present invention; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A</cross-reference> to <highlight><bold>3</bold></highlight>C illustrate ray tracing processing of a scene with objects that demonstrates certain aspects of the present invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an example of data structures that can be used to implement the rules for controlling rendering in accordance with an aspect of the present invention; and </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating an example method implemented in accordance with the principles of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The present invention will now be described in detail with reference to the drawings, which are provided as illustrative examples of the invention so as to enable those skilled in the art to practice the invention. Notably, the figures and examples below are not meant to limit the scope of the present invention. Moreover, where certain elements of the present invention can be partially or fully implemented using known components, only those portions of such known components that are necessary for an understanding of the present invention will be described, and detailed descriptions of other portions of such known components will be omitted so as not to obscure the invention. Further, the present invention encompasses present and future known equivalents to the known components referred to herein by way of illustration. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A top-level block diagram of an example implementation of the present invention is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> computer graphics system includes a modeling system <highlight><bold>102</bold></highlight> and rendering system <highlight><bold>104</bold></highlight>. Although shown separately for clarity, modeling system <highlight><bold>102</bold></highlight> and rendering system <highlight><bold>104</bold></highlight> can be implemented as software that is commonly executed by a common processor. Alternatively, modeling system <highlight><bold>102</bold></highlight> and rendering system <highlight><bold>102</bold></highlight> are implemented as hardware or software components that are separately provided in different platforms and communicate with each other via a bus, a network, or other communication means, using interprocess schemes such as client-server communications, for example. It should be apparent that many alternative topologies and implementations are possible. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Generally, modeling system <highlight><bold>102</bold></highlight> (e.g. Maya from Alias&verbar;Wavefront of Toronto, Ontario, Softimage&verbar;3D from Avid Technology, Inc. of Tewskbury, Mass. and 3D Studio Max from Discreet Logic, Inc. of Montreal, Quebec) allows a content creator/editor to model objects and specify how they are to be displayed in a scene (e.g. lighting, effects, material definitions) via GUI system <highlight><bold>106</bold></highlight>. These models and instructions are sent by modeling system <highlight><bold>102</bold></highlight> to rendering system <highlight><bold>104</bold></highlight> to be displayed on a display <highlight><bold>108</bold></highlight> (which may be commonly or separately provided with GUI <highlight><bold>106</bold></highlight> system such as in a SGI Octane visual workstation, for example) or captured in an image file. In one example, particularly where autonomy between the modeling system <highlight><bold>102</bold></highlight> and rendering system <highlight><bold>104</bold></highlight> is desired, this transfer of graphics data and instructions is performed using an industry standard interface such as the RenderMan Interface (see, for example, the RenderMan Interface V3.1 description at www.pixar.com), or non-standard interfaces based thereon. In accordance with an aspect of the invention, modeling system <highlight><bold>102</bold></highlight> allows a content creator/editor to further specify relationships between modeled objects and/or rules concerning how they are allowed to affect each other&apos;s appearance, and rendering system <highlight><bold>104</bold></highlight> is adapted to consider these relationships and rules and to render scenes in accordance therewith. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The present invention contemplates the use or adaptation of various modeling systems and ways of specifying object relationships and rendering rules, and such are considered to be incidental to the invention. In one possible implementation, modeling system <highlight><bold>102</bold></highlight> can be based on the Maya modeling/animation system from Alias&verbar;Wavefront. In this example, as is known in the art, the Maya system includes an Application Programming Interface (API) which is an open architecture that includes the ability to provide additional graphics capability through plug-in applications. Accordingly, the present invention can be implemented by providing a plug-in application(s) <highlight><bold>103</bold></highlight> to the Maya API that allows content creators to specify object relationships and rules in addition to performing other modeling functions that are provided by Maya alone. Those skilled in the art will recognize various alternative implementations, whether or not including an environment such as Maya. Further, those skilled in the art will understand how to add the graphics capabilities of the present invention by adapting or creating other API&apos;s, plug-in applications <highlight><bold>103</bold></highlight> and the like after being taught about their functionality below. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example implementation of rendering system <highlight><bold>104</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> rendering system <highlight><bold>104</bold></highlight> includes a scene server <highlight><bold>202</bold></highlight>, a ray server <highlight><bold>203</bold></highlight>, a ray tracer <highlight><bold>204</bold></highlight> and a shader <highlight><bold>206</bold></highlight>. Scene server <highlight><bold>202</bold></highlight> receives a graphics input (e.g. a RenderMan Interface Bytestream (RIB)), and in response provides scene parameters to ray server <highlight><bold>203</bold></highlight> and establishes graphics data structures <highlight><bold>208</bold></highlight> (e.g. object descriptions, textures, surface shading programs, lights, etc.) for use by ray tracer <highlight><bold>204</bold></highlight> and shader <highlight><bold>206</bold></highlight>. Of particular relevance to the present invention, as further shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, scene server <highlight><bold>202</bold></highlight> can maintain object visibility relationships and rules <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> It should be apparent that many other components, stores and graphics data and instructions can be included or processed in the rendering system <highlight><bold>104</bold></highlight>, but these will not be illustrated or described so as not to obscure the invention. Moreover, it should be noted that scene server <highlight><bold>202</bold></highlight>, ray server <highlight><bold>203</bold></highlight>, ray tracer <highlight><bold>204</bold></highlight> and shader <highlight><bold>206</bold></highlight> are shown and described separately for clarity of the invention. However, it should be apparent that these components and the functionality performed by each as described herein can be consolidated and/or divided among fewer or additional components, including scene server <highlight><bold>202</bold></highlight>, ray server <highlight><bold>203</bold></highlight>, ray tracer <highlight><bold>204</bold></highlight> and shader <highlight><bold>206</bold></highlight>. In one example implementation, ray tracer <highlight><bold>204</bold></highlight> and shader <highlight><bold>206</bold></highlight> are implemented together as multiple ASICs in a distributed computing architecture in which scene server <highlight><bold>202</bold></highlight> and ray server <highlight><bold>203</bold></highlight>, implemented as software executing on one or more processors, act as hosts to divide a scene into multiple partitions and provide graphics data and instructions to individual ray tracer and shader ASICs respectively assigned to the partitions. However, it should be apparent that many alternative implementations and topologies are possible. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Generally, in operation, scene server <highlight><bold>202</bold></highlight> extracts object data from the graphics input, updates and/or maintains the appropriate graphics data in store <highlight><bold>208</bold></highlight>, and provides image resolution parameters and camera information to ray server <highlight><bold>203</bold></highlight>. In one example implementation, for a given scene or frame to be rendered, scene server <highlight><bold>202</bold></highlight> determines the center of projection and window on the view plane (i.e. the camera or eye view) of the scene and provides this information to ray server <highlight><bold>203</bold></highlight>. Ray server <highlight><bold>203</bold></highlight> then causes ray tracer <highlight><bold>204</bold></highlight> and shader <highlight><bold>206</bold></highlight> (or respectively assigned circuits thereof) to compute the color of each pixel in the window. For example, for a given pixel (or for each subpixel in a pixel), ray server <highlight><bold>203</bold></highlight> determines the camera ray from the center of projection through the pixel, and instructs ray tracer <highlight><bold>204</bold></highlight> to determine objects hit by the ray. For certain implementations, ray tracer <highlight><bold>204</bold></highlight> may further generate rays that are spawned from the original ray (e.g. reflections, refractions and shadows). Given the objects hit by or shadowed from the original and subsidiary rays, as computed by ray tracer <highlight><bold>204</bold></highlight>, shader <highlight><bold>206</bold></highlight> computes the color contributed by each object for that pixel, and may further generate additional rays to be processed. Those skilled in the art will understand how to implement or adapt a shader <highlight><bold>206</bold></highlight> that computes colors given the output of a ray tracer and other shading information, and so an even further detailed description thereof is unnecessary for an understanding of the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In accordance with an aspect of the invention, scene server <highlight><bold>202</bold></highlight> further extracts object visibility relationships and rules from the graphics input and maintains lists associated therewith in store <highlight><bold>208</bold></highlight>. Ray tracer <highlight><bold>204</bold></highlight> can thus consider these relationships and rules when performing ray tracing processing, as will be described in more detail below. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A</cross-reference> to <highlight><bold>3</bold></highlight>C are directed to an example scene containing objects for rendering that illustrates certain aspects of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3A, a</cross-reference> scene includes objects <highlight><bold>302</bold></highlight>, <highlight><bold>304</bold></highlight>, <highlight><bold>306</bold></highlight>, and <highlight><bold>308</bold></highlight>, and light L<highlight><bold>1</bold></highlight> that potentially illuminates objects <highlight><bold>302</bold></highlight> and <highlight><bold>304</bold></highlight>. In one example, a camera ray is projected into the scene and strikes object <highlight><bold>302</bold></highlight> at point P<highlight><bold>1</bold></highlight> on a surface (a front facing surface in this example) at which there is a normal N<highlight><bold>1</bold></highlight>. Using recursive ray tracing techniques, at point P<highlight><bold>1</bold></highlight>, refracted ray T<highlight><bold>1</bold></highlight> and reflected ray R<highlight><bold>1</bold></highlight> are spawned. Refracted ray T<highlight><bold>1</bold></highlight> continues through object <highlight><bold>302</bold></highlight> and strikes the back surface at point P<highlight><bold>2</bold></highlight>, at which point reflected ray R<highlight><bold>2</bold></highlight> and refracted ray T<highlight><bold>2</bold></highlight> are spawned. Reflected ray R<highlight><bold>1</bold></highlight> strikes the surface of object <highlight><bold>304</bold></highlight> at point P<highlight><bold>3</bold></highlight> having a normal N<highlight><bold>2</bold></highlight> thereat. At point P<highlight><bold>3</bold></highlight>, reflected ray R<highlight><bold>3</bold></highlight> is spawned. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As further shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, ray tracing processing will include determining any shadows at points P<highlight><bold>1</bold></highlight>, P<highlight><bold>2</bold></highlight> and P<highlight><bold>3</bold></highlight>. Therefore, if light L<highlight><bold>1</bold></highlight> is associated with objects <highlight><bold>302</bold></highlight> and <highlight><bold>304</bold></highlight>, shadow rays S<highlight><bold>1</bold></highlight> and S<highlight><bold>2</bold></highlight> will be projected from points P<highlight><bold>1</bold></highlight> and P<highlight><bold>3</bold></highlight>, respectively, toward L<highlight><bold>1</bold></highlight> to determine the visibilities associated with each due to the presence of occluding objects. In this example, object <highlight><bold>306</bold></highlight> lies in the path of both S<highlight><bold>1</bold></highlight> and S<highlight><bold>2</bold></highlight>, and so rays S<highlight><bold>1</bold></highlight> and S<highlight><bold>2</bold></highlight> would intersect object <highlight><bold>306</bold></highlight> at points P<highlight><bold>4</bold></highlight> and P<highlight><bold>5</bold></highlight>, respectively. The complete ray tree for the above-described ray tracing is shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> As discussed above, an aspect of the present invention includes the ability to control the visibility of certain objects and how certain objects and/or lights can affect the appearance of other objects and/or lights. As is clear from the example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the appearance of object <highlight><bold>302</bold></highlight> (at least at point P<highlight><bold>1</bold></highlight>) is affected by both objects <highlight><bold>304</bold></highlight> and <highlight><bold>306</bold></highlight>. Suppose, however, that a content creator wished to create a special relationship between objects <highlight><bold>304</bold></highlight> and <highlight><bold>306</bold></highlight> such that no shadows will be cast on object <highlight><bold>304</bold></highlight> from object <highlight><bold>306</bold></highlight>, for example. The creator would then specify a rule (using plug-in application <highlight><bold>103</bold></highlight> in modeling system <highlight><bold>102</bold></highlight>, for example) that no shadow rays from object <highlight><bold>304</bold></highlight> striking object <highlight><bold>306</bold></highlight> are allowed (i.e., no shadows from object <highlight><bold>306</bold></highlight> should be cast on object <highlight><bold>304</bold></highlight>). Rendering system <highlight><bold>104</bold></highlight>, after considering the rule established by the content creator and included in the graphics input from the modeling system <highlight><bold>102</bold></highlight>, would then disallow ray-object intersection processing between shadow ray S<highlight><bold>2</bold></highlight> and object <highlight><bold>306</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, shadow ray S<highlight><bold>2</bold></highlight> projects on toward L<highlight><bold>1</bold></highlight>, and strikes object <highlight><bold>308</bold></highlight> at point P<highlight><bold>6</bold></highlight>. The ray tree after such rule processing is shown in <cross-reference target="DRAWINGS">FIG. 3C</cross-reference>. When shading object <highlight><bold>302</bold></highlight> at point P<highlight><bold>1</bold></highlight> due to the camera ray, therefore, the shader will arrive at the appropriate color by traversing the ray tree shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>C, which does not include the intersection of shadow ray S<highlight><bold>2</bold></highlight> with object <highlight><bold>306</bold></highlight>, rather than the original ray tree shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The present invention contemplates many types and combinations of object visibility rules that can be specified. For example, a designer can specify that an object should not be affected by reflected, refracted or shadow rays that intersect certain other objects or photon rays from certain light sources. Or, a designer can specify that an object should not be affected by reflected, refracted or shadow rays that intersect any other objects or photon rays that originate from any lights except for a designated set. Such rules can be generally specified in a format such as &ldquo;&lt;OBJID&gt; exclude/include &lt;RAYTYPE&gt; &lt;OBJLIST&gt;,&rdquo; which indicates that when processing rays for the object specified by OBJID, exclude/include rays of RAYTYPE (e.g. reflected, refracted, shadow, camera, photon) that intersect the list of objects and/or lights specified by OBJLIST. Where a content creator wishes to exclude the effects of only a limited number of objects and/or lights on the display of other objects and/or lights, the &ldquo;exclude&rdquo; rule may be more efficient. Conversely, where the effects of all but a limited number of objects and/or lights are intended to be excluded, the use of the &ldquo;include&rdquo; rule may be more efficient. It will become apparent to those skilled in the art, after being taught by the present disclosure, that there are many variations in how object visibility rules may be specified, stored or processed to achieve substantially the same object visibility results in substantially the same way, and so the invention is not limited to the above described rule formats but rather embraces alternative embodiments exploiting such variations. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In one implementation, the object visibility rules are specified in a modeling system adapted in accordance with the invention. This can be done, for example, by including a plug-in application(s) <highlight><bold>103</bold></highlight> to an API included in the modeling system environment, which plug-in application allows the content creator to specify these rules in addition to performing other object modeling tasks. Along with other graphics data and instructions, the rules can be provided in an adapted RIB or other graphics stream to the rendering system <highlight><bold>204</bold></highlight>. The rendering system can then extract these rules from the bytestream for processing in accordance with the present invention. It should be noted, however, that there can be other ways to specify and receive the object visibility rules in addition to, or in place of, a modeling system, and so the present invention is not limited thereby. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> When processing the RIB or other graphics input from the modeling system, the rendering system can create and/or populate data structures such as those illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> for internal use by other components of the rendering system. As can be seen in this example, these structures are a linked set of lists. Particularly, object descriptor <highlight><bold>402</bold></highlight> includes pointers to lists of objects for various forward and backward ray types such as reflected rays <highlight><bold>404</bold></highlight>, refracted rays <highlight><bold>406</bold></highlight>, shadow rays <highlight><bold>408</bold></highlight> and photon rays <highlight><bold>410</bold></highlight>. Along with the pointer there may be stored an indication of the number of objects stored in the respective list <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight>, <highlight><bold>408</bold></highlight>, <highlight><bold>410</bold></highlight>. Accordingly, when a ray tracer such as ray tracer <highlight><bold>204</bold></highlight> is processing rays from a point of intersection on an object or from a light source, it will consult object descriptor <highlight><bold>402</bold></highlight>. Thus, when a reflected ray is spawned from the point of intersection on an object, for example, the ray tracer will determine whether any objects are stored in reflections list <highlight><bold>404</bold></highlight> for the intersected object (e.g. if the number/length of the list is nonzero as specified in object descriptor <highlight><bold>402</bold></highlight>), and if so, it will ignore any intersections of the spawned reflected ray with objects listed in list <highlight><bold>404</bold></highlight> (or ignore intersections for all but the listed objects if list <highlight><bold>404</bold></highlight> specifies an &ldquo;include&rdquo; rule). </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> It should be apparent that the types of rays that can be included for special processing in accordance with the invention is not limited in number or type to the specific types of rays listed above, but may include fewer or additional types of rays, whether specifically mentioned in the list of ray types provided herein or not. It should be further apparent that additional object information may be stored and considered for object rendering beyond that illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, and that object descriptor <highlight><bold>402</bold></highlight> may be included in, or separate from, such further information. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> An example method for controlling the appearance of objects rendered in a scene that can be executed by a graphics system in accordance with an aspect of the present invention is illustrated by the flowchart in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the rules received from the modeling system are parsed and are used to populate the include/exclude lists such as those illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> (S<highlight><bold>502</bold></highlight>). For each ray of a scene or frame to be rendered (determined in step S<highlight><bold>504</bold></highlight>), therefore, the list of object visibility rules for the object or light source from which the ray is projecting is retrieved (S<highlight><bold>506</bold></highlight>). Regardless of the type of ray that is being projected from the point of intersection with the object (e.g. reflected, refracted, shadow, etc.), the ray tracer begins to trace the ray from a point of intersection or light source (S<highlight><bold>508</bold></highlight>). The nearest object struck by the ray is then compared to the list of rules specified for the originating object or light source and the ray type (S<highlight><bold>510</bold></highlight>). If the struck object is specified in the list, and is associated with an &ldquo;include&rdquo; rule, or if the object is not specified in the list, normal ray-object intersection processing with the object will be performed (S<highlight><bold>512</bold></highlight>). This may include, for example, determining a point of intersection on the object, and spawning other rays from the point of intersection. Otherwise, the object is specified in the list and is associated with an &ldquo;exclude&rdquo; rule. Accordingly, it should be excluded from ray-object intersection processing and is skipped (see &ldquo;Exclude&rdquo; arrow back to step S<highlight><bold>508</bold></highlight>). Finally, it is determined whether any additional tracing for this ray should be performed (S<highlight><bold>514</bold></highlight>). If so, processing returns to step S<highlight><bold>508</bold></highlight>. Otherwise, processing returns to step S<highlight><bold>504</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Although not shown, it should be understood that when a ray tree is completed or as it is generated, it can be provided to a shader such as shader <highlight><bold>206</bold></highlight> for determining the color associated with the original ray-object intersection corresponding to the ray tree. For example, if the ray tree is constructed for a camera or eye ray associated with a pixel, the shader will compute the color for the pixel by traversing the ray tree as constructed by the ray tracer in accordance with a method such as that described above. It should be further understood that the processing of the ray tree need not sequentially follow completion of the construction of the ray tree, but that certain shading operations may be performed in parallel with certain ray tracing operations. Moreover, it should be apparent that the shader may process certain rays (e.g. shadow rays) separately from ray trees. Those skilled in the art will understand the various implementation alternatives and the present invention embraces corresponding alternative embodiments. Furthermore, it should be understood that additional rendering and ray tracing operations may be performed in conjunction with or in addition to the above-described processing, such as computing intersection points and determining opacities and the like. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> It should be further noted that the above described method does not include detailed descriptions of other ray tracing, rendering and shading operations that may be performed in conjunction with or in addition to the processing described above. Details of such other operations are omitted here so as not to obscure the invention. Moreover, the invention is not limited to any specific sequence or implementation of such additional operations. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Although the present invention has been particularly described with reference to the preferred embodiments thereof, it should be readily apparent to those of ordinary skill in the art that changes and modifications in the form and details may be made without departing from the spirit and scope of the invention. It is intended that the appended claims include such changes and modifications. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A graphics apparatus, comprising: 
<claim-text>a rendering system that renders an object in response to a graphics input, the graphics input including object visibility rules, the rendering system constraining the rendering of the object in accordance with the object visibility rules. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the rendering system receives the graphics input from a modeling system. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the rendering system includes a ray tracer, the object visibility rules specifying a relationship between the object and certain rays, the ray tracer looking up a rule associated with the object when processing the certain rays for the object. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the rendering system includes a ray tracer, the object visibility rules specifying a relationship between the object and certain other objects for certain rays, the ray tracer looking up a rule associated with the object when processing the certain rays for the object. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the certain rays include rays originating from a point of intersection with the object. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the rendering system includes a ray tracer, the object visibility rules specifying a relationship between light sources and certain rays, the ray tracer looking up a rule associated with one of the light sources when processing the certain rays for the light source. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the certain rays include rays originating from the light source and potentially intersecting the object. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the ray tracer constructs a ray tree associated with the object in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the relationship establishes objects to be excluded from processing for the certain rays. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the relationship establishes objects to be included for processing for the certain rays to the exclusion of all other objects. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a modeling system adapted to construct the object visibility rules in accordance with user inputs. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A plug-in application for a modeling system that constructs object visibility rules in response to user input, the object visibility rules being supplied to a rendering system in a graphics input from the modeling system, the rendering system rendering an object in response to the graphics input, the rendering system constraining the rendering of the object in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the rendering system includes a ray tracer, the object visibility rules specifying a relationship between the object and certain rays, the ray tracer looking up a rule associated with the object when processing the certain rays for the object. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the certain rays include rays originating from a point of intersection with the object. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the rendering system includes a ray tracer, the object visibility rules specifying a relationship between light sources and certain rays, the ray tracer looking up a rule associated with one of the light sources when processing the certain rays for the light source. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the certain rays include rays originating from the light source and potentially intersecting the object. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the ray tracer constructs a ray tree associated with the object in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the relationship establishes objects to be excluded from processing for the certain rays. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A plug-in application according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the relationship establishes objects to be included for processing for the certain rays to the exclusion of all other objects. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A graphics apparatus comprising: 
<claim-text>a scene server that receives a graphics input specifying a plurality of objects and extracts object visibility information from the graphics input; and </claim-text>
<claim-text>a ray tracer coupled to the scene server that determines intersections of rays with certain of the plurality of objects included in a scene, the ray tracer receiving the object visibility information and constraining the ray intersection determination in accordance therewith. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the object visibility rules specify relationships between the objects and certain types of the rays, the ray tracer constraining the ray intersection determination for the certain types of rays in accordance with the specified relationships. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the certain types of the rays include one or more of shadow rays, refracted rays, reflected rays and photon rays. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the ray tracer constructs ray trees associated with the certain objects and the intersections, the ray tracer constraining objects to be included in the ray trees in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the relationships establish objects to be excluded from processing for the certain types of rays. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the relationships establish objects to be included for processing for the certain types of rays to the exclusion of all other objects. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising a shader coupled to the ray tracer for determining colors associated with the intersections. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising a shader coupled to the ray tracer for determining colors associated with the ray trees. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the scene server receives the graphics input from a modeling system. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising a modeling system adapted to construct the object visibility rules in accordance with user inputs. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising a plug-in application that constructs the object visibility rules in accordance with user inputs. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A graphics apparatus comprising: 
<claim-text>means for receiving a graphics input specifying a plurality of objects; </claim-text>
<claim-text>means for extracting object visibility information from the graphics input; and </claim-text>
<claim-text>means for determining intersections of rays with certain of the plurality of objects in a scene, the determining means including means for receiving the object visibility information and means for constraining the ray intersection determination in accordance therewith. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the object visibility rules specify relationships between the objects and certain types of the rays, the determining means determining the intersections for the certain types of rays in accordance with the specified relationships. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the certain types of rays include one or more of shadow rays, refracted rays, reflected rays and photon rays. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the determining means further includes means for constructing ray trees associated with the certain objects and the intersections, the constraining means constraining objects included in the ray trees in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the relationships establish objects to be excluded from processing for the certain types of rays. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the relationships establish objects to be included for processing for the certain types of rays to the exclusion of all other objects. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, further comprising means for determining colors associated with the intersections. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, further comprising means for determining colors associated with the ray trees. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the receiving means receives the graphics input from a modeling system. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, further comprising means for constructing the object visibility rules in accordance with user inputs. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A graphics method comprising: 
<claim-text>receiving a graphics input specifying a plurality of objects; </claim-text>
<claim-text>extracting object visibility information from the graphics input; and </claim-text>
<claim-text>determining intersections of rays with certain of the plurality of objects in a scene, the determining step including receiving the object visibility information and constraining the ray intersection determination in accordance therewith. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the object visibility rules specify relationships between the objects and certain types of the rays, the determining step including determining the intersections for the certain types of rays in accordance with the specified relationships. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the certain types of rays include one or more of shadow rays, refracted rays, reflected rays and photon rays. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the determining step further includes constructing ray trees associated with the certain objects and the intersections, the constraining step including constraining objects included in the ray trees in accordance with the object visibility rules. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the relationships establish objects to be excluded from processing for the certain types of rays. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the relationships establish objects to be included for processing for the certain types of rays to the exclusion of all other objects. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A graphics method according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, further comprising determining colors associated with the intersections. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, further comprising determining colors associated with the ray trees. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the receiving step includes receiving the graphics input from a modeling system. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. A graphics apparatus according to <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, further comprising constructing the object visibility rules in accordance with user inputs.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001842A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001842A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001842A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001842A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001842A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
