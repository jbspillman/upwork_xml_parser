<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005272A1-20030102-D00000.TIF SYSTEM "US20030005272A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005272A1-20030102-D00001.TIF SYSTEM "US20030005272A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005272A1-20030102-D00002.TIF SYSTEM "US20030005272A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005272A1-20030102-D00003.TIF SYSTEM "US20030005272A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005272A1-20030102-D00004.TIF SYSTEM "US20030005272A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005272A1-20030102-D00005.TIF SYSTEM "US20030005272A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005272</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894294</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/177</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>002000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for external bus device support</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Rajeev</given-name>
<middle-name>K.</middle-name>
<family-name>Nalawadi</family-name>
</name>
<residence>
<residence-us>
<city>Folsom</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Frederick</given-name>
<middle-name>H.</middle-name>
<family-name>Bolay</family-name>
</name>
<residence>
<residence-us>
<city>Rancho Cordova</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">System and method for external bus device support. The system comprises a processor, a memory, one or more external bus controllers and a basic input-output system (BIOS). The BIOS contains an external bus support component to cause a periodic interrupt to be generated and to provide support for external bus enabled devices responsive to the periodic interrupt. The method comprises obtaining a portion of the memory to be used to maintain a plurality of external bus device data; causing an interrupt to be periodically generated; and handling input produced by external bus enabled devices using the portion of the memory. The interrupt may be a system management interrupt (SMI) of the 32-bit Intel Architecture (IA-32). The external bus controller may be a Universal Serial Bus (USB) host controller, the external bus devices may be USB devices, and the external bus support component may be a USB support component. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to computers and computing devices that include external bus enabled devices, such as Universal Serial Bus (USB) devices, and more particularly to providing support for USB and other external bus enabled devices during system boot up, before operating system support for USB and other external bus enabled devices is present, by issuing a periodic software interrupt. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> As personal computers have evolved, the processing power, available memory, available peripheral devices and personal computer features such as the kinds of peripheral connection methods have increased with each passing year. When powering on a personal computer, a basic input-output system (BIOS) controls what occurs. A BIOS may check the status of various hardware components and devices and receive input from the hardware devices, such as keyboard, mouse, and other input devices. To receive such input, the BIOS must be able to receive data from and otherwise communicate with the devices attached to or included in the system. For example, it may be necessary for the BIOS to receive user input from a keyboard or for the BIOS to initiate execution of startup software to be read from, for example, a floppy disk, hard disk, and compact disk read-only memory (CD-ROM). To provide support for all of these devices, the BIOS contains software that is executed in system memory that serves as device drivers or other software that supports various devices until an operating system including drivers for the particular devices is loaded.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The invention described herein is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that references to &ldquo;an&rdquo; or &ldquo;one&rdquo; embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hardware environment in which one embodiment of the invention executes. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> illustrates a diagram of Universal Serial Bus (USB) controller registers and system memory showing the organization of USB data. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> illustrates a diagram of system memory showing the location of Universal USB support memory. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a flow of actions taken pursuant to one embodiment of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In many current computers, support must be provided for external devices while the system is booting up and while the operating system is loading, until the operating system and device drivers have completed loading. To allow the system to support one or more external peripheral devices during system boot up, the basic input-output system (BIOS) includes support software to process input from external devices during system boot up. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In many current computer systems, and particularly processors available from Intel Corporation having a 32-bit architecture known as IA-32 and other processors compatible with the 32-bit Intel Architecture, (See <highlight><italic>IA</italic></highlight>-32 <highlight><italic>Intel Architecture Software Developer&apos;s Manual </italic></highlight>available from Intel Corporation, Santa Clara, Calif.), before operating system support for external devices, such as, Universal Serial Bus (USB) devices is present, the BIOS enables the chipset (hardware) to convert all enabled USB hardware interrupt occurrences into USB legacy system management interrupts (SMIs). The SMI that is generated internally by the chipset (hardware) after conversion of the USB interrupt to an SMI is referred to herein as a &ldquo;USB legacy SMI&rdquo;. There is a single SMI pin connection from the chipset (hardware) to the processor, and there are various individual sources of SMIs in the system. The chipset (hardware) acts as a collector for all SMI events in the system. When any of the SMI sources is active in the system, the chipset (hardware) asserts the SMI pin to the processor. This SMI pin assertion from the chipset (hardware) to the processor is referred to herein as a &ldquo;Hardware SMI&rdquo;. When the SMI signal is asserted, the processor enters System Management Mode (SMM) and the BIOS code executes. The BIOS includes SMM software that checks for various registers in the chipset (hardware) to determine the source of the SMI and handle it appropriately. Among the various SMI sources in the system, there is a capability provided in the chipset (hardware) to generate an SMI periodically based on expiration of an internal hardware timer. The granularity and the occurrence of this periodic SMI is programmable by the BIOS. This SMI is referred to herein as a &ldquo;periodic software SMI&rdquo;. A periodic software SMI issues, is generated, whenever an internal timer in the chipset times-out. The periodic software SMI can occur in conjunction with SMIs, generated by other sources, such as by software writing to known specific registers in the chipset (hardware). Hence, the periodic software SMI may be referred to as an &ldquo;asynchronous periodic software SMI&rdquo;. The granularity of the periodic software SMI occurrence may vary among various chipsets that may be used in a system, but a few feasible granularities are provided in all the chipsets. The BIOS SMM software is usually capable of handling multiple SMI occurrences during one instance of the SMM code execution. In addition, the chipset also provides various software controls to enable and disable the various USB interrupt sources, and also to enable and disable the occurrence of USB legacy SMIs. However, many existing computer systems do not have chipset (hardware) that allows for the conversion of USB hardware interrupts into legacy USB software interrupts. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In the system and method described herein, when the chipset (hardware) does not have the capability to generate a USB legacy SMI, software added to a traditional BIOS sets an asynchronous periodic software SMI, and parses through and processes completed USB descriptors of one or more USB host controller(s) when the periodic software SMI is generated. The chipset (hardware) provides different time periods for the occurrence of the asynchronous periodic software SMI generation. On every asynchronous periodic software SMI occurrence, the USB support software parses through completed USB descriptors. In one embodiment, the USB support software dynamically increases or decreases the periodic SMI occurrence to a faster or slower rate to handle the data transfer rate of attached USB devices. To parse through the USB descriptors without interference from existing components, the USB support software disables the conversion of USB hardware interrupts into USB legacy software interrupts and also disables the chipset (hardware) from generating USB interrupts. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hardware environment in which one embodiment of the invention executes. A computing device such as personal computer <highlight><bold>100</bold></highlight> may include processor <highlight><bold>102</bold></highlight>, memory <highlight><bold>104</bold></highlight>, storage device <highlight><bold>106</bold></highlight>, and communications device <highlight><bold>108</bold></highlight> coupled to bus <highlight><bold>140</bold></highlight>. In one embodiment, the processor may be a processor conforming to or compatible with the 32-bit Intel Architecture known as IA-32. In one embodiment, memory <highlight><bold>104</bold></highlight> may be any kind of random access memory (RAM). In one embodiment, storage device <highlight><bold>106</bold></highlight> may be any kind of machine readable medium including, for example, magnetic media such as disk drives and magnetic tape; optical drives such as compact disk read only memory (CD-ROM) and readable and writeable compact disks (CD-RW); stick and card memory devices; ROM, RAM, flash memory devices and the like; whether internal, such as storage device <highlight><bold>106</bold></highlight>, directly coupled such as such as external device <highlight><bold>126</bold></highlight>, accessible locally or remotely via a network, and via electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.) via communications device <highlight><bold>108</bold></highlight>. In one embodiment, communications device <highlight><bold>108</bold></highlight> may be a modem, network interface unit, or other communications device that allows for communication with other computing devices. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Personal computer <highlight><bold>100</bold></highlight> may include graphics adapter <highlight><bold>110</bold></highlight> that allows for the display of information such as text and graphics on display monitor <highlight><bold>112</bold></highlight>. Graphics adapter <highlight><bold>110</bold></highlight> may provide support for the video graphics array (VGA), super VGA (SVGA) and/or other graphics standards. In one embodiment, graphics adapter <highlight><bold>110</bold></highlight> may be included as part of an integrated processor/graphics chipset. In one embodiment, graphics adapter <highlight><bold>110</bold></highlight> may be coupled to the system via an Accelerated Graphics Port (AGP) interface supported by the chipset used in personal computer <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Personal computer <highlight><bold>100</bold></highlight> may include an external bus controller, such as, USB host controller <highlight><bold>120</bold></highlight> which allows for two-way communication with external USB devices, such as external device <highlight><bold>126</bold></highlight>. Although only one USB host controller is shown, multiple USB host controllers and/or other external bus controllers may be physically included in the personal computer. In various embodiments external device <highlight><bold>126</bold></highlight> may be any USB enabled device, such as, for example, a machine readable medium reader and/or writer, a digital camera, a printer, a digital music player/recorder such as an MP3 player, etc. Various USB enabled input devices may also be coupled to personal computer <highlight><bold>100</bold></highlight> via USB controller <highlight><bold>120</bold></highlight>, such as, for example, keyboard <highlight><bold>122</bold></highlight> and mouse <highlight><bold>124</bold></highlight>. In one embodiment, a USB enabled biometric device such as fingerprint reader <highlight><bold>128</bold></highlight>, retinal scanner or voice recognition device may be coupled to personal computer <highlight><bold>100</bold></highlight> via USB controller <highlight><bold>120</bold></highlight>. Although these devices are referred to and/or are depicted as external devices or external bus enabled devices, the devices may exist inside or otherwise within the enclosure of a computer or other computing device. These devices are called external devices because they communicate via what are well known as external bus protocols via external bus controllers, such as USB. In addition, each of the devices may include its own controller, such as a USB host controller. In one embodiment, the USB devices and host controller(s) may conform to the <highlight><italic>Universal Serial Bus Specification, </italic></highlight>Revision 1.1, dated Sep. 23, 1998 and/or Revision 2.0 dated Apr. 29, 2000 (the &ldquo;USB Specification&rdquo;). </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Graphics adapter <highlight><bold>110</bold></highlight> and USB controller <highlight><bold>120</bold></highlight> are each coupled to bus <highlight><bold>140</bold></highlight>. Although only one each of processor <highlight><bold>102</bold></highlight>, external device <highlight><bold>126</bold></highlight> and storage device <highlight><bold>106</bold></highlight> are depicted, multiple processors and multiple storage devices may be included in personal computer <highlight><bold>100</bold></highlight>, and multiple external USB devices may be coupled to personal computer <highlight><bold>100</bold></highlight> via USB controller <highlight><bold>120</bold></highlight>. A basic input-output system (BIOS) <highlight><bold>130</bold></highlight> that may include a USB support component such as USB support software <highlight><bold>132</bold></highlight> is also coupled to bus <highlight><bold>140</bold></highlight>. BIOS <highlight><bold>130</bold></highlight> may be software stored in hardware, such as, for example, an electrically erasable programmable read-only memory (EEPROM) device, a flash memory device, etc. In one embodiment, the BIOS and/or the USB support software may be updated or installed from computer instructions stored on a machine readable medium such as a floppy disk or CD-ROM. In this embodiment, the instructions are copied or otherwise transferred from the machine readable medium to the BIOS chip such that they are executed during all subsequent booting up of the system. In one embodiment, bus <highlight><bold>140</bold></highlight> may be a USB such that all components and devices communicate via USB. USB support software <highlight><bold>132</bold></highlight> is discussed in more detail below. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to one embodiment of the system and method presented herein, during start-up of the computing device, the computing device may request input from the user or the user may access an input device, such as a keyboard, to alter the regular boot process. To request and receive user input during boot up, software in the BIOS may display information on a display to the user, and the user may provide input via a keyboard or keypad, a mouse, a biometric device, and/or another input device, each of which may be coupled to the computing device via USB. In addition, in one embodiment, a user identification card may be presented via a USB enabled card reader (not shown) to authenticate the user&apos;s access to the computing device. In some situations, a software update or other software may need to be read or otherwise executed by the BIOS from a storage device coupled to the computing device via the USB controller. To support the multitude of devices which may be coupled to the computing device via one or more USB host controllers, the BIOS stores device information and/or device driver information in the computing device&apos;s memory, including USB device data such as transfer descriptors. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> illustrates a diagram of USB controller registers and system memory showing the organization of USB data. USB host controllers have 1024 frames associated with them in memory such that each USB host controller is represented in memory by a 1024&times;4 byte region. (See the USB Specification.). In one embodiment, a portion of system memory is obtained to be used to be used by USB support software to maintain USB data. USB support memory <highlight><bold>200</bold></highlight> may include a portion of memory designated USB host controller memory <highlight><bold>220</bold></highlight> to hold USB host controller data. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> USB host controllers include well-known registers that are used to access and control the USB host controller and the controllers communication with USB devices. In one embodiment, a USB host controller may include registers <highlight><bold>210</bold></highlight>. Registers <highlight><bold>210</bold></highlight> include a register or registers that points to frames in USB host controller data <highlight><bold>220</bold></highlight>, such as frame base <highlight><bold>212</bold></highlight> and frame number <highlight><bold>214</bold></highlight>. Frame base <highlight><bold>212</bold></highlight> and frame number <highlight><bold>214</bold></highlight> point to a base address of a list of frames and a frame number, or offset, in USB host controller memory <highlight><bold>220</bold></highlight>. Each frame <highlight><bold>222</bold></highlight> in USB host controller memory <highlight><bold>220</bold></highlight> points to a transfer descriptor <highlight><bold>230</bold></highlight> having USB data <highlight><bold>240</bold></highlight> associated with the transfer descriptor. The contents of frame <highlight><bold>222</bold></highlight> is a pointer to a memory address where the TD resides. In one embodiment, a USB schedule for each USB host controller consists of 1024 frames. Each frame <highlight><bold>222</bold></highlight> may point to one or more USB descriptors. In a classic USB host controller implementation, the USB host controller takes one millisecond to execute each frame. If all the USB descriptors associated with the frame execute within a one millisecond period, the hardware waits for the completion of one millisecond to start executing the next frame to ensure that the 1024 frames have completed execution. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> illustrates a diagram of system memory showing the location of Universal USB support memory. In one embodiment, the system memory may be mapped according to a predetermined specification, such as, for example, the memory structure defined in the Advanced Configuration and Power Interface (ACPI) specification (rev. 2.0 dated Jul. 27, 2000; see also <highlight><italic>ACPI Component Architecture Programmer Reference, </italic></highlight>rev. 1.05 dated Feb. 27, 2001 available from Intel Corporation, Santa Clara, Calif.). In one embodiment, a portion of the non-volatile sleeping (NVS) region of memory may be used by the USB support software of the BIOS to provide USB device support during system boot up until an operating system including USB device drivers has completed loading. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Pursuant to the ACPI specification, the system memory is mapped according to memory structure <highlight><bold>250</bold></highlight>. Memory structure <highlight><bold>250</bold></highlight> includes compatibility memory <highlight><bold>252</bold></highlight>, located in the region of memory located at from 0 to 640 Kbytes. Compatibility holes <highlight><bold>254</bold></highlight> are located at from 640 Kbyte to 1 Mbyte. In traditional systems, the BIOS was limited to accessing compatibility memory <highlight><bold>252</bold></highlight> and compatibility holes <highlight><bold>254</bold></highlight>. The compatibility memory <highlight><bold>252</bold></highlight> and compatibility holes <highlight><bold>254</bold></highlight> may be referred to as the programmable address map (PAM) region of memory <highlight><bold>256</bold></highlight>. The ACPI specification also defines operating system usable system memory as contiguous RAM <highlight><bold>258</bold></highlight> which is located at from 1 Mbyte to the bottom of memory one <highlight><bold>260</bold></highlight>. In one embodiment, bottom of memory one <highlight><bold>260</bold></highlight> may be at 8 Mbytes. ACPI tables <highlight><bold>262</bold></highlight> are located in the region from bottom of memory one <highlight><bold>260</bold></highlight> to an area referred to in the ACPI specification as the top of memory one, denoted <highlight><bold>264</bold></highlight>. The area of memory between the top of memory one and what the ACPI specification refers to as the top of memory two, denoted <highlight><bold>272</bold></highlight>, is defined to include two regions of memory, ACPI NVS memory <highlight><bold>266</bold></highlight> and ACPI reserved memory <highlight><bold>270</bold></highlight>. It is a portion of ACPI NVS memory <highlight><bold>266</bold></highlight> that the method and system described herein uses, in one embodiment, to provide USB support. One portion of memory is denoted USB support memory <highlight><bold>268</bold></highlight> within or part of ACPI NVS memory <highlight><bold>266</bold></highlight>. It is this portion of system memory that is used for the data format described above regarding <cross-reference target="DRAWINGS">FIG. 2A</cross-reference>. To complete the memory structure description, the ACPI specification also defines a &ldquo;no memory region&rdquo; referred to in one embodiment as Peripheral Component Interconnect (PCI) bus addressable memory <highlight><bold>280</bold></highlight> located between top of memory two and boot base <highlight><bold>292</bold></highlight>. The memory area from boot base <highlight><bold>292</bold></highlight> to the top of memory <highlight><bold>294</bold></highlight>, at, in one embodiment, 4 Gbytes, is virtually used for boot ROM <highlight><bold>290</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a flow of actions taken pursuant to one embodiment of the invention. When a system such as a computing device is powered on, the boot process begins, as shown in block <highlight><bold>310</bold></highlight>. The BIOS code executes, as shown in block <highlight><bold>312</bold></highlight>. This process as a whole is sometimes referred to as power on self test (POST). The system memory initializes, as shown in block <highlight><bold>314</bold></highlight>. External bus support software such as USB support software then obtains a portion of memory and constructs USB device data structures, as shown in block <highlight><bold>316</bold></highlight>. The USB device data includes the data described above regarding <cross-reference target="DRAWINGS">FIG. 2A</cross-reference>. The USB support software then sets the system hardware to generate a periodic SMI at a slow rate, and disables the system hardware from generating USB legacy SMIs, as shown in block <highlight><bold>318</bold></highlight>. There are various periodic SMI occurrence rates that can be programmed in the chipset (hardware). Periodic SMI rates available on many systems are every 64 seconds (approximately one minute), 32 seconds, 16 seconds, 8 seconds, 64 milliseconds, 32 milliseconds, 16 milliseconds, 8 milliseconds, and one millisecond. These periodic SMI rates are provided as an example, and some hardware embodiments may provide a much wider range of periodic occurrences that may be used by the USB support software and the BIOS. The SMI is initially set by the USB support software to be generated at a slow rate, such as, for example, every minute or every 30 seconds, so as not to unnecessarily impede performance of the system during the boot process by causing unneeded processing of SMIs. The USB support software then starts the USB host controller such that the USB host controller processes USB device descriptors using the obtained portion of memory, the USB support memory, as shown in block <highlight><bold>320</bold></highlight>. To provide USB device support during the remainder of the boot process, execution continues in parallel at block <highlight><bold>330</bold></highlight> and at block <highlight><bold>350</bold></highlight>. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The USB host controller processes USB device data by transmitting data to USB devices and/or receiving data from USB devices, as shown in block <highlight><bold>330</bold></highlight>. The system hardware then generates a periodic SMI, as shown in block <highlight><bold>332</bold></highlight>. The USB support software then checks for the presence of USB device drivers, as shown in block <highlight><bold>334</bold></highlight>. The USB frame list base address register is set to reflect the address of the location of the USB support memory until the device drivers are loaded. Because the USB frame list base address register is modified when the operating system has loaded the USB drivers, the USB support software uses the technique of looking at the USB frame list base address to determine whether the operating system drivers are loaded (see frame base <highlight><bold>202</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2A</cross-reference>). The USB frame list base address register is located in the USB host controller chipset (hardware) and contains a pointer to the start of the USB frames, which may also be referred to as the USB schedule, constructed by the USB support software or operating system device drivers. When the USB host controller is &ldquo;started&rdquo; or &ldquo;activated&rdquo; by the USB support software or the operating system drivers, the USB host controller chipset (hardware) executes the USB descriptors located in memory pointed to by the current contents of the USB frame list base address register. The contents of the USB frame list base address register are incremented by a value of four (4) automatically by the USB host controller chipset (hardware) after execution. The USB frame list base address register contents keep rolling in a round-robin fashion, thus executing the active USB descriptors until the USB host controller is &ldquo;stopped&rdquo;. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> If USB device drivers are absent, flow continues at block <highlight><bold>334</bold></highlight>. The USB support software then parses through USB descriptors and processes USB data, as shown in block <highlight><bold>336</bold></highlight>. The parsing involves traversing the descriptors and other data described above regarding <cross-reference target="DRAWINGS">FIG. 2A</cross-reference>. When the periodic software SMI occurs, after parsing, the processing performed by the USB support software may include passing the USB data to the processor, a keyboard controller, a mouse controller, etc. In this way, the USB data is transferred to the BIOS code or other boot software that is executing. The USB support software may then adjust the rate of the periodic SMI based on the USB data traffic, as shown in block <highlight><bold>338</bold></highlight>. More specifically, in one embodiment, the USB support software may change the periodic software SMI occurrence rate to dynamically complement the rate of the USB data. That is, the SMI occurrence period may be increased, sped up, or decreased, slowed down, as needed. Such speed or period adjustments are often needed when the USB descriptors are transferring user based input. When no input data is received, the rate is reduced; when input data is received, the rate is increased and remains at a faster level, such as, for example, every 16 milliseconds or every 8 milliseconds, until the amount of received data drops off. Execution then continues at block <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> After the check for the presence of USB device drivers is made, as shown in block <highlight><bold>334</bold></highlight>, if USB device drivers are present, flow continues a block <highlight><bold>340</bold></highlight>, and the USB support software de-allocates the obtained portion of memory, the USB support memory, disables the periodic SMI, and exits, as shown in block <highlight><bold>340</bold></highlight>. USB support is thereafter provided by device drivers, as shown in block <highlight><bold>342</bold></highlight>. In one embodiment, the USB support software may at some point regain control from the operating system and then, again, begin issuing periodic software SMIs and processing USB data. One of example of when this may occur is during a soft reboot. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In parallel with the flow beginning at block <highlight><bold>330</bold></highlight> is the flow beginning at block <highlight><bold>350</bold></highlight>. The BIOS code continues to execute, as shown in block <highlight><bold>350</bold></highlight>. At some point, the BIOS code passes control to the operating system, as shown in block <highlight><bold>352</bold></highlight>. The operating system loads, including loading USB (and other) device drivers while user input offered during operating system and device driver loading and/or configuration is processed by the USB support software responsive to the periodic SMI, as shown in block <highlight><bold>354</bold></highlight>. The USB support software generates periodic SMIs to invoke the processing of USB data during loading to the operating system. If the USB support software is not included in the system to generate periodic SMIs to invoke the processing of USB data during loading of the operating system, the operating system may hang during boot or input data may be lost when control of the USB devices and USB host controller transitions from the BIOS to the operating system device drivers. The USB support software that causes the generation of periodic SMIs to invoke the processing of USB data during loading of the operating system alleviates missed USB input and alleviates the system hanging during operating system boot should a USB interrupt not be handled. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus; </claim-text>
<claim-text>an external bus controller coupled to the bus; and </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS comprising an external bus support component to cause a periodic interrupt to be generated and to provide support for external bus enabled devices responsive to the periodic interrupt. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the external bus support component is to provide support for external bus enabled devices until an operating system providing external bus support is loaded. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the external bus enabled devices comprise at least one of a keyboard, a mouse, a floppy drive, a biometric device, a hard disk drive, a compact disk read-only memory (CD-ROM) player. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein: 
<claim-text>the external bus controller is a Universal Serial Bus (USB) host controller; </claim-text>
<claim-text>the external bus support component is a USB support component; and </claim-text>
<claim-text>the external bus enabled devices are USB devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the memory is mapped according to the Advanced Configuration and Power Interface (ACPI) specification and the BIOS comprises a software component to implement the ACPI specification. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor conforms to the 32 bit Intel Architecture (IA-32) and the periodic interrupt is a system management interrupt (SMI). </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor is compatible with the 32 bit Intel Architecture (IA-32). </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus; </claim-text>
<claim-text>an external bus controller coupled to the bus; </claim-text>
<claim-text>an external bus enabled device coupled to the external bus controller; </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS having instructions which when executed cause the processor to perform operations comprising: 
<claim-text>obtaining a portion of the memory to be used to maintain a plurality of external bus device data; </claim-text>
<claim-text>causing an interrupt to be periodically generated; and </claim-text>
<claim-text>handling input produced by the external bus enabled device using the portion of the memory responsive to the interrupt. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the processor conforms to the 32-bit Intel Architecture (IA-32) and the interrupt is a system management interrupt (SMI). </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations comprising: 
<claim-text>disabling the periodically generated interrupt when an operating system providing external bus device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations comprising: 
<claim-text>de-allocating the portion of the memory when an operating system providing external bus device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein: 
<claim-text>the external bus controller is a Universal Serial Bus (USB) host controller; </claim-text>
<claim-text>the external bus support component is a USB support component; and </claim-text>
<claim-text>the external bus enabled device is a USB device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein obtaining comprises: 
<claim-text>mapping a memory pursuant to the Advanced Configuration and Power Interface (ACPI) specification to include a non-volatile-sleeping (NVS) memory region such that the portion of the memory is in the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method comprising: 
<claim-text>obtaining a portion of a memory to be used to maintain a plurality of USB device data; </claim-text>
<claim-text>causing an interrupt to be periodically generated; and </claim-text>
<claim-text>handling input produced by one or more USB devices using the portion of the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the interrupt is a system management interrupt (SMI) of the 32-bit Intel Architecture (IA-32). </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>disabling the periodically generated interrupt when an operating system providing USB device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>de-allocating the portion of the memory when an operating system providing USB device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>mapping a memory pursuant to the Advanced Configuration and Power Interface (ACPI) specification to include a non-volatile-sleeping (NVS) memory region such that the portion of the memory is in the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>sending data to one or more USB devices using the portion of the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>determining whether an operating system providing USB device support is loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein determining comprises: 
<claim-text>checking a frame list base address register value to determine whether it is set to the address of the portion of the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>disabling conversion of USB hardware interrupts into USB legacy software interrupts; and </claim-text>
<claim-text>disabling the hardware generated USB interrupts. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>adjusting the rate of the interrupt based on data traffic involving the one or more USB devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A machine readable medium having instructions thereon which when executed by a processor cause the instructions to be copied to a basic input-output system (BIOS) such that during subsequent boot up of a system including the processor, the processor performs operations comprising: 
<claim-text>obtaining a portion of a memory to be used to maintain a plurality of external bus device data; </claim-text>
<claim-text>causing an interrupt to be periodically generated; and </claim-text>
<claim-text>handling input produced by an external bus enabled device using the portion of the memory responsive to the interrupt. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The machine readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the processor conforms to the 32-bit Intel Architecture (IA-32) and the interrupt is a system management interrupt (SMI). </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The machine readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> having further instructions thereon which, after being copied to the BIOS, when executed, cause the processor to perform further operations comprising: 
<claim-text>disabling the periodically generated interrupt when an operating system providing external bus device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The machine readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> having further instructions thereon which, after being copied to the BIOS, when executed, cause the processor to perform further operations comprising: 
<claim-text>de-allocating the portion of the memory when an operating system providing external bus device support is completely loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein: 
<claim-text>the external bus controller is a Universal Serial Bus (USB) host controller; </claim-text>
<claim-text>the external bus support component is a USB support component; and </claim-text>
<claim-text>the external bus enabled device is a USB device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The machine readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein obtaining comprises: 
<claim-text>mapping the memory pursuant to the Advanced Configuration and Power Interface (ACPI) specification to include a non-volatile-sleeping (NVS) memory region such that the portion of the memory is in the NVS memory region.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005272A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005272A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005272A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005272A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005272A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005272A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
