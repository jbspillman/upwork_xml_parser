<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005259A1-20030102-D00000.TIF SYSTEM "US20030005259A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005259A1-20030102-D00001.TIF SYSTEM "US20030005259A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005259A1-20030102-D00002.TIF SYSTEM "US20030005259A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005259A1-20030102-D00003.TIF SYSTEM "US20030005259A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005259A1-20030102-D00004.TIF SYSTEM "US20030005259A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005259A1-20030102-D00005.TIF SYSTEM "US20030005259A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005259</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894333</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>712</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for device support</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Rajeev</given-name>
<middle-name>K.</middle-name>
<family-name>Nalawadi</family-name>
</name>
<residence>
<residence-us>
<city>Folsom</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Khong</given-name>
<middle-name>Jye</middle-name>
<family-name>Liew</family-name>
</name>
<residence>
<residence-us>
<city>Folsom</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Rocky</given-name>
<family-name>Phagura</family-name>
</name>
<residence>
<residence-us>
<city>Sacramento</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">System and method for device support. The system may comprise a processor, a memory, a device controller and a basic input-output system (BIOS). The memory may be mapped according to a predetermined specification, such as the Advanced Configuration and Power Interface (ACPI) specification. A device support component in the BIOS uses a portion of a defined region of the memory, such as the non-volatile sleeping (NVS) memory region, to maintain device data for a device. A method involves providing the software component in the BIOS. The software component maps the memory, reserving a portion of the defined region of the memory to maintain a plurality of device data regarding the device controller, and provides support for at least one device utilizing the portion of the defined region of the memory. The system and method may be used with Universal Serial Bus (USB) devices and controllers, as well as with secondary graphics adapters. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to computers and computing devices that include devices such as Universal Serial Bus (USB) devices and graphics adapters, and more particularly to providing support for these devices using a defined area of memory during and/or after boot up, before an operating system is present and/or after an operating system is loaded. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> As computers have evolved, the processing power and available memory have both increased with each passing year. However, to allow for continuing use of existing software applications and hardware devices, current computers must take into consideration limitations inherent in earlier computer models so as to provide compatibility. This is sometimes referred to as legacy support, support for legacy systems, support for legacy devices, etc. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> One of the most popular computer processor architectures is the 32 bit Intel Architecture known as IA-32. For more information see the <highlight><italic>IA</italic></highlight>-32<highlight><italic>Intel Architecture Software Developer&apos;s Manual </italic></highlight>available from Intel corporation, Santa Clara, Calif. For each new advance in processor technology, certain old limitations must be maintained so as to allow for software and/or component and/or system compatibility. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> One such legacy limitation is the ability to access and/or use system memory during boot up. As older systems may have had only 256 Kbytes or 512 Kbytes of random access memory (RAM), an upper threshold from earlier systems limiting memory access to those portions of RAM from zero to 1 Mbyte of memory has been maintained, to various degrees, during processor boot up in current systems conforming to and/or compatible with the IA-32 architecture. That is, during boot up, many systems may only use 1 Mbyte of memory even though the current system may have, for example, 64 Mbytes or 256 Mbytes of RAM. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Such a limitation has drawbacks that restrict system performance in various areas. One such area is device support during system boot up. During the boot process of a computer, a basic input-output system (BIOS) controls what occurs. A BIOS may check the status of various hardware components and devices and receive input from the hardware devices. To do so, the BIOS must be able to receive data from and otherwise communicate with the devices attached to or included in the system. For example, it may be necessary for the BIOS to receive user initiated input such as from a keyboard or for the BIOS to initiate execution of startup software to be read from, for example, a floppy disk, hard disk, and compact disk read-only memory (CD-ROM). </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The BIOS may also provide support to a graphics adapter to allow for the display of information on a display monitor for communication to a system user. Because of legacy considerations, only information about a single graphics adapter may be stored in memory. However, some more recent systems include a second graphics adapter to support a second graphics display monitor. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> To provide support for all of these devices, the BIOS contains software that uses system RAM to serve as device drivers or other software that supports various devices. However, in some systems the available RAM is limited based on legacy considerations to only the space from 0 to 1 Mbyte. As such, the BIOS software, the device drivers and/or other software and their associated data structures may encroach on or exceed this legacy limitation.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The invention described herein is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that references to &ldquo;an&rdquo; or &ldquo;one&rdquo; embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hardware environment in which one embodiment of the invention executes. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a diagram of system memory showing the location of an embodiment of the invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a flow of actions taken pursuant to one embodiment of the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a flow of actions taken pursuant to another embodiment of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a functional block diagram of an embodiment of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In current computers featuring processors that conform to and/or are compatible with the 32 bit Intel Architecture known as IA-32 promulgated by Intel Corporation, access to system memory during boot up is limited to the first megabyte of memory to allow for compatibility with earlier systems. (For more information on IA-32 architecture see the <highlight><italic>IA</italic></highlight>-32 <highlight><italic>Intel Architecture Software Developer&apos;s Manual</italic></highlight>available from Intel corporation, Santa Clara, Calif.). To better allow the basic input-output system (BIOS) of computers to support devices during system boot up, the BIOS may be provided access to system memory outside of and exceeding the 1 Mbyte limitation of the IA-32 architecture. According to the system and method described herein, when system memory is mapped according to a specification such as the Advanced Configuration and Power Interface (ACPI) specification (rev. 2.0 dated Jul. 27, 2000; see also <highlight><italic>ACPI Component Architecture Programmer Reference, </italic></highlight>rev. 1.05 dated Feb. 27, 2001 available from Intel Corporation of Santa Clara, Calif.), a portion of a Non-Volatile Sleeping (NVS) region of memory may be used by the BIOS, in one embodiment, to provide device support during system boot up, and, in another embodiment, through all use of the system. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hardware environment in which one embodiment of the invention executes. A computing device such as personal computer <highlight><bold>100</bold></highlight> may include processor <highlight><bold>102</bold></highlight>, memory <highlight><bold>104</bold></highlight>, storage device <highlight><bold>106</bold></highlight>, and communications device <highlight><bold>108</bold></highlight> coupled to bus <highlight><bold>140</bold></highlight>. In one embodiment, the processor may be an IA-32 processor or similarly compatible processor. In one embodiment, memory <highlight><bold>104</bold></highlight> may be any kind of random access memory (RAM). In one embodiment, storage device <highlight><bold>106</bold></highlight> may be any kind of machine readable medium including, for example, magnetic media such as disk drives and magnetic tape; optical drives such as compact disk read only memory (CD-ROM) and readable and writeable compact disks (CD-RW); stick and card memory devices; ROM, RAM, flash memory devices and the like; whether internal, such as storage device <highlight><bold>106</bold></highlight>, directly coupled such as such as external device <highlight><bold>126</bold></highlight>, accessible locally or remotely via a network, and via electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.) via communications device <highlight><bold>108</bold></highlight>. In one embodiment, communications device <highlight><bold>108</bold></highlight> may be a modem, network interface unit, or other communications device that allows for communication with other computing devices. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Personal computer <highlight><bold>100</bold></highlight> may include primary graphics adapter (PGA) <highlight><bold>110</bold></highlight> that allows for the display of information such as text and graphics on display monitor <highlight><bold>112</bold></highlight>. PGA <highlight><bold>110</bold></highlight> includes PGA video option ROM <highlight><bold>111</bold></highlight> which provides hardware dependent information that is used in delivering text and graphics to a display monitor. Personal computer <highlight><bold>100</bold></highlight> may also include secondary graphics adapter (SGA) <highlight><bold>114</bold></highlight> that allows for the display of information such as text and graphics on second display monitor <highlight><bold>116</bold></highlight>. SGA <highlight><bold>114</bold></highlight> includes SGA video option ROM <highlight><bold>115</bold></highlight> which provides hardware dependent information that is used in delivering text and graphics to a display monitor. PGA <highlight><bold>110</bold></highlight> and SGA <highlight><bold>114</bold></highlight> may provide support for the video graphics array (VGA), super VGA (SVGA) and/or other graphics standards. In one embodiment, PGA video option ROM <highlight><bold>111</bold></highlight> and SGA video option ROM <highlight><bold>115</bold></highlight> may each be electronically erasable programmable read only memory (EEPROM) chips. In one embodiment, either or both of SGA <highlight><bold>114</bold></highlight> and PGA <highlight><bold>110</bold></highlight> may be included as part of an integrated processor/graphics chipset. In one embodiment, either or both of SGA <highlight><bold>114</bold></highlight> and PGA <highlight><bold>110</bold></highlight> may be coupled to the system via an Accelerated Graphics Port (AGP) interface supported by the chipset used in personal computer <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Personal computer <highlight><bold>100</bold></highlight> may include a Universal Serial Bus (USB) host controller <highlight><bold>120</bold></highlight> which allows for two-way communication with external USB devices, such as external device <highlight><bold>126</bold></highlight>. Although only one USB host controller is shown, multiple USB host controllers may be included in the personal computer. In various embodiments external device <highlight><bold>126</bold></highlight> may be any USB enabled device, such as, for example, a device for reading and/or writing a machine readable medium, a digital camera, a printer, a digital music player/recorder such as an MP3 player, etc. Various USB enabled input devices may also be coupled to personal computer <highlight><bold>100</bold></highlight> via USB controller <highlight><bold>120</bold></highlight>, such as, for example, keyboard <highlight><bold>122</bold></highlight> and mouse <highlight><bold>124</bold></highlight>. In one embodiment, a USB enabled biometric device such as fingerprint reader <highlight><bold>150</bold></highlight>, retinal scanner or voice recognition device may be coupled to personal computer <highlight><bold>100</bold></highlight> via USB controller <highlight><bold>120</bold></highlight>. In addition, each of the USB enabled devices may include its own host controller. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Graphics adapter <highlight><bold>110</bold></highlight> and USB controller <highlight><bold>120</bold></highlight> are each coupled to bus <highlight><bold>140</bold></highlight>. Although only one each of processor <highlight><bold>102</bold></highlight>, external device <highlight><bold>126</bold></highlight> and storage device <highlight><bold>106</bold></highlight> are depicted, multiple processors and multiple storage devices may be included in personal computer <highlight><bold>100</bold></highlight>, and multiple external devices may be coupled to personal computer <highlight><bold>100</bold></highlight> via external device <highlight><bold>126</bold></highlight>. A BIOS <highlight><bold>130</bold></highlight> that may include USB support software <highlight><bold>132</bold></highlight> and/or SGA support software <highlight><bold>134</bold></highlight> is also coupled to bus <highlight><bold>140</bold></highlight>. USB support software <highlight><bold>132</bold></highlight> and SGA support software <highlight><bold>134</bold></highlight> are discussed in more detail below. In one embodiment, BIOS <highlight><bold>130</bold></highlight> also includes ACPI software <highlight><bold>136</bold></highlight> which is executed during the boot process to provide support for the ACPI specification. In one embodiment, BIOS <highlight><bold>130</bold></highlight> may be software stored on hardware such as an electrically erasable programmable read-only memory (EEPROM) device, a flash memory device, etc. In one embodiment, bus <highlight><bold>140</bold></highlight> may be a USB such that all components and devices communicate via USB. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to one embodiment of the system and method presented herein, during start-up of the computing device, the computing device may request input from the user. To do so, software in the BIOS may display information on a display to the user, and the user may provide input via a keyboard or keypad, a mouse, a biometric device, and/or other input devices, each which may be coupled to the computing device via USB. In addition, a user identification card may be presented via a USB enabled card reader (not shown) to authenticate the user&apos;s access to the computing device. In some situations, a software update or other software may need to be read or otherwise executed by the BIOS from a storage device coupled to the computing device via the USB controller. To support the multitude of devices which may be coupled to the computing device via a USB host controller, the BIOS stores device information in the computing device&apos;s memory. However, due to historical system architecture limitations, the BIOS may be restricted to using the first megabyte of system memory. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> However, the ACPI specification, which is being supported on current computing devices such as personal computers, provides a region in memory which can be used to store information regarding USB devices. In one embodiment, the USB support software obtains a portion of the NVS region of memory and uses it to store USB device data such as transfer descriptors. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a diagram of system memory showing the location of an embodiment of the invention. In one embodiment, the system memory is mapped according to memory structure <highlight><bold>200</bold></highlight>, as defined in the ACPI specification. Compatibility memory <highlight><bold>202</bold></highlight> is located in the region of memory located at from 0 to 640 Kbytes. Compatibility holes <highlight><bold>204</bold></highlight> are located at from 640 Kbyte to 1 Mbyte. In traditional systems, the BIOS was limited to accessing compatibility memory <highlight><bold>202</bold></highlight> and compatibility holes <highlight><bold>204</bold></highlight>. The compatibility memory <highlight><bold>202</bold></highlight> and compatibility holes <highlight><bold>204</bold></highlight> may be referred to as the programmable address map (PAM) region of memory <highlight><bold>206</bold></highlight>. The ACPI specification also defines operating system usable system memory as contiguous RAM <highlight><bold>208</bold></highlight> which is located at from 1 Mbyte to the bottom of memory one <highlight><bold>210</bold></highlight>. In one embodiment, bottom of memory one <highlight><bold>210</bold></highlight> may be 8 Mbytes. ACPI tables <highlight><bold>212</bold></highlight> are located in the region from bottom of memory one <highlight><bold>210</bold></highlight> to an area referred to in the ACPI specification as the top of memory one, denoted <highlight><bold>214</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The area of memory between the top of memory one and what the ACPI specification refers to as the top of memory two, denoted <highlight><bold>222</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, is defined to include two regions of memory, ACPI NVS memory <highlight><bold>216</bold></highlight> and ACPI reserved memory <highlight><bold>220</bold></highlight>. It is a portion of ACPI NVS memory <highlight><bold>216</bold></highlight> that the method and system described herein uses, in one embodiment, to provide USB support and, in another embodiment, to provide SGA support. One portion of memory is denoted USB support memory <highlight><bold>218</bold></highlight> within or part of ACPI NVS memory <highlight><bold>216</bold></highlight>. Another portion of memory is denoted SGA support memory <highlight><bold>219</bold></highlight> within or part of ACPI NVS memory <highlight><bold>216</bold></highlight>. To complete the memory structure description, the ACPI specification also defines a &ldquo;no memory region&rdquo; referred to in one embodiment as Peripheral Component Interconnect (PCI) bus addressable memory <highlight><bold>230</bold></highlight> located between top of memory two and boot base <highlight><bold>242</bold></highlight>. The memory area from boot base <highlight><bold>242</bold></highlight> to the top of memory <highlight><bold>244</bold></highlight>, at, in one embodiment, 4 Gbytes, is virtually used for boot ROM <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a flow of actions taken pursuant to one embodiment of the invention. When a system such as a computing device is powered on, the boot process begins, as shown in block <highlight><bold>310</bold></highlight>. The BIOS code is transferred to and executes from the PAM region of memory. The BIOS code executes, as shown in block <highlight><bold>312</bold></highlight>. The BIOS code determines the size of physical memory and builds a memory map based on system components such as the existence of a USB host controller, including obtaining exclusive access to a portion of ACPI NVS RAM, which may be referred to as USB support memory, as shown in block <highlight><bold>316</bold></highlight>. The BIOS code also copies software and/or other information obtained from various devices which may be part of the computing device or personal computer, such as, for example, the contents of modem option ROM, the contents of PGA video option ROM, local area network (LAN) card option ROM, small computer system interconnect (SCSI) option ROM, etc. All of the software code from each of these ROMs as well as the BIOS code itself are stored in the PAM region of memory. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The BIOS code may also include ACPI software that implements the ACPI specification, including providing an interface by which the operating system may access ACPI tables (see ACPI software <highlight><bold>136</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). It is through this ACPI interface that an operating system may obtain information about and control the characteristics of motherboard devices and other devices coupled to the personal computing device. The ACPI interface may be accessed by the operating system using ACPI Machine Language (AML). AML is the ACPI control method virtual machine language, a machine code for a virtual machine which is supported by an ACPI-compatible operating system. AML is a pseudo-assembly language that is interpreted by an operating system driver. AML is a language processed by an ACPI method interpreter and is primarily a declarative language in that AML provides a set of declarations that are compiled by the ACPI interpreter into the ACPI name space at definition block load time. The AML resides in the ACPI tables within the system BIOS. A portion of the ACPI software in the BIOS known as ACPI control methods may be written in ACPI Source Language (ASL) as the source language. Original equipment manufacturers (OEMs) and BIOS developers may write control methods in ASL. The ASL code is then translated to AML. ASL and AML are different languages that are closely related. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> As set forth in the ACPI specification, the ACPI NVS memory region typically holds data that is saved/restored during a resume from one of the ACPI power management suspend states. The ACPI NVS region is generally used to hold critical data that is used to program various devices such as, for example, onboard chipsets, processor(s), PCI devices, AGP devices, Super I/O, etc. when resuming from a suspend state. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The USB support software then starts using the portion of the NVS RAM obtained and constructs USB device data in the obtained memory, as shown in blocks <highlight><bold>318</bold></highlight> and <highlight><bold>320</bold></highlight>. The USB device data is built and maintained based on power-on or start-up signaling received from USB devices via a USB host controller. Boot up continues, as shown in block <highlight><bold>322</bold></highlight>. The USB support software may process input data received from USB devices, utilizing the obtained memory, as shown in block <highlight><bold>324</bold></highlight>. Such data may include input requested by software in the BIOS and/or other boot-up software within the system, and may also include data initiated by a device that includes its own automatic start-up software. In addition, this data may include data requested by the operating system via USB devices while the operating system is loading, before the operating system is fully loaded, and before the operating system has loaded USB device drivers or other USB supporting components. Boot up continues and input is processed from USB devices, as shown in blocks <highlight><bold>322</bold></highlight> and <highlight><bold>324</bold></highlight>, until control is passed to the operating system loader, as shown in block <highlight><bold>326</bold></highlight>. In one embodiment, the operating system may not support USB devices such that the USB support software from the BIOS continues to handle all USB device support via the obtained portion of ACPI NVS memory, the USB support memory, during any use of the system. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The operating system queries the system memory map by issuing an interrupt <highlight><bold>15</bold></highlight>H subfunction E<highlight><bold>820</bold></highlight>H, as shown in block <highlight><bold>328</bold></highlight>. In this way, the operating system obtains the system memory map. After obtaining the system memory map from the System BIOS, the operating system will refrain from using the memory region declared as ACPI NVS for its normal functioning. The operating system and USB device drivers are loaded, as shown in block <highlight><bold>330</bold></highlight>. In one embodiment, the USB device driver may be included in or be part of an operating system, such that only the operating system need be loaded. The USB support software then internally deallocates the obtained memory, the USB support memory, until the operating system/USB drivers relinquish control of the USB host controller(s), as shown in block <highlight><bold>332</bold></highlight>. That is, the obtained memory is no longer used in supporting USB devices until the BIOS is given control again of the USB host controller(s) when the USB drivers are unloaded. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a flow of actions taken pursuant to another embodiment of the invention. When a system such as a computing device is powered on, the boot process begins, as shown in block <highlight><bold>410</bold></highlight>. The BIOS code executes, as shown in block <highlight><bold>412</bold></highlight>. The BIOS code determines the size of physical memory and builds a memory map based on system components, including copying the content of the video option ROM of the primary graphics adapter to the programmable address map region of RAM, as shown in block <highlight><bold>416</bold></highlight>. The BIOS code may also copy software and/or other information obtained from various devices which may be part of the computing device or personal computer, such as, for example, the contents of a modem option ROM, a local area network (LAN) card option ROM, a small computer system interconnect (SCSI) option ROM, etc. All of the software code from each of these ROMs as well as the BIOS code itself are stored in the PAM region of memory. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The secondary graphics adapter support software then checks for the existence of a secondary graphics adapter, as shown in block <highlight><bold>418</bold></highlight>. If there is a SGA, because of legacy considerations, the SGA may contain an option ROM which often has an access time of between 100 and 120 nanoseconds. To increase the speed at which information may be accessed from the SGA video option ROM, the contents of the SGA video option ROM may be copied to an area of memory from which information may be accessed in a shorter amount of time, typically in the range of 10 to 20 nanoseconds. This allows for faster access of the contents of the SGA video option ROM. In one embodiment, the size of the contents of the SGA video option ROM may be 48 Kbytes. In current computer systems, system memory in the form of various kinds of RAM operates at speeds significantly faster than the speed of video option ROMs. In some embodiments, system memory speeds may be 100 Mhz and 133 Mhz. If a secondary graphics adapter is present, the SGA support software obtains exclusive access to a portion of ACPI NVS RAM, which may be referred to as SGA support memory, and copies the contents of the video option ROM of the secondary graphics adapter to the obtained portion of the NVS RAM, as shown in block <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Boot up continues, as shown in block <highlight><bold>422</bold></highlight>. Control of the system is passed to the operating system, as shown in block <highlight><bold>424</bold></highlight>. The operating system queries the system memory map by issuing an interrupt <highlight><bold>15</bold></highlight>H subfunction E<highlight><bold>820</bold></highlight>H which reports the obtained memory region as ACPI NVS (Reserved), as shown in block <highlight><bold>426</bold></highlight>. After obtaining the system memory map from the BIOS, by virtue of the obtained portion being declared as ACPI NVS (Reserved), the operating system will refrain from using the obtained portion of memory during its normal functioning. The SGA video option ROM stored in the obtained portion of ACPI NVS RAM, the SGA support memory, is then used to process access made to the secondary graphics adapter when necessary, as shown in block <highlight><bold>428</bold></highlight>. Such access to the obtained portion of ACPI NVS RAM increases throughput when performing operations involving the SGA video option ROM when compared to accessing the ROM itself. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a functional block diagram of an embodiment of the invention. Generally, the ACPI specification defines ACPI driver/interface <highlight><bold>550</bold></highlight> to ACPI <highlight><bold>520</bold></highlight> through which an operating system kernel <highlight><bold>560</bold></highlight> may communicate with and control system hardware <highlight><bold>510</bold></highlight> and devices via device drivers <highlight><bold>540</bold></highlight>. The BIOS <highlight><bold>530</bold></highlight> is considered to be on the same level as hardware <highlight><bold>510</bold></highlight>. As discussed above, BIOS <highlight><bold>530</bold></highlight> may contain USB support software <highlight><bold>532</bold></highlight> and/or SGA support software <highlight><bold>534</bold></highlight>. Before the ACPI driver/interface <highlight><bold>550</bold></highlight>, device drivers <highlight><bold>540</bold></highlight> and kernel <highlight><bold>560</bold></highlight> are fully loaded and up and running in a computing device, software in the BIOS and/or the ACPI software may require user input via a USB device or other information from a USB device to proceed with booting up. In one embodiment, USB support software <highlight><bold>532</bold></highlight> included in BIOS <highlight><bold>530</bold></highlight> provides the necessary support for accessing these USB devices by utilizing a portion of the ACPI NVS region of memory until the applicable device drivers and the operating system are loaded. If no support is provided for USB devices by the operating system, then the USB support software continues to provide USB support throughout the duration of use of the computing device. In another embodiment, SGA support software <highlight><bold>534</bold></highlight> included in BIOS <highlight><bold>530</bold></highlight> increases throughput when accessing a second display device by utilizing a portion of the ACPI NVS region of memory to hold a copy of the SGA video option ROM. Access to the information from the SGA video option ROM via the NVS RAM is faster than accessing the same information from the SGA video option ROM itself. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus, the memory mapped according to a predetermined specification; </claim-text>
<claim-text>a device controller coupled to the bus; and </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS having a device support component to provide support for a device using a portion of a defined region of the memory to maintain a plurality of device data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein: 
<claim-text>the predetermined specification is the Advanced Configuration and Power Interface (ACPI) specification; and </claim-text>
<claim-text>the defined region is the non-volatile sleeping (NVS) region defined by the ACPI specification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein: 
<claim-text>the device controller is a Universal Serial Bus (USB) host controller, the device is a USB device; and </claim-text>
<claim-text>the device data comprises USB transaction descriptors. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the USB device comprises at least one of a keyboard, a mouse, a floppy drive, a compact disk read only memory (CD-ROM) player. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the device support component is to provide support for Universal Serial Bus (USB) devices until an operating system providing USB device support is loaded. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising a secondary device controller wherein: 
<claim-text>the device controller and the secondary device controller are graphics adapters; </claim-text>
<claim-text>the secondary device controller comprises a video option read-only memory (ROM); and </claim-text>
<claim-text>the device support component is to copy the contents of the video option ROM to the portion of the defined region of the memory such that access requests involving the video option ROM are redirected to the portion of the redefined region of the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor conforms to the 32 bit Intel Architecture (IA-32). </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor is compatible with the 32 bit Intel Architecture (IA-32). </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus; </claim-text>
<claim-text>a device controller coupled to the bus; </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS having instructions which when executed cause the processor to perform operations including: 
<claim-text>mapping the memory pursuant to a predetermined specification to include a defined region of the memory; </claim-text>
<claim-text>allocating a portion of the defined region of the memory to be used to maintain a plurality of device data regarding a device. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein: 
<claim-text>the predetermined specification is the Advanced Configuration and Power Interface (ACPI) specification; and </claim-text>
<claim-text>the defined region is the non-volatile sleeping (NVS) region defined by the ACPI specification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein: 
<claim-text>the device controller is a Universal Serial Bus (USB) controller; </claim-text>
<claim-text>the device is a USB device; and </claim-text>
<claim-text>the device data comprises USB transaction descriptors. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising a secondary device controller wherein: 
<claim-text>the device controller and the secondary device controller are graphics adapters; </claim-text>
<claim-text>the secondary device controller comprises a video option read only memory (ROM); and </claim-text>
<claim-text>the plurality of device data is a copy of the contents of the video option ROM. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations including: 
<claim-text>de-allocating the portion of the defined region of the memory when an operating system providing device support is loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein allocating comprises: 
<claim-text>receiving an interrupt 15h sub-function E820h. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus; </claim-text>
<claim-text>a Universal Serial Bus (USB) controller coupled to the bus; </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS having instructions which when executed cause the processor to perform operations including: 
<claim-text>mapping the memory pursuant to a predetermined specification to include a defined region of the memory; </claim-text>
<claim-text>allocating a portion of the defined region of the memory to be used to maintain a plurality of USB device data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein: 
<claim-text>the predetermined specification is the Advanced Configuration and Power Interface (ACPI) specification; and </claim-text>
<claim-text>the defined region is the non-volatile sleeping (NVS) region defined by the ACPI specification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations including: 
<claim-text>de-allocating the portion of the NVS memory region when an operating system providing USB device support is loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein allocating comprises: 
<claim-text>receiving an interrupt 15h sub-function E820h. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A system comprising: 
<claim-text>a processor coupled to a bus; </claim-text>
<claim-text>a memory coupled to the bus; </claim-text>
<claim-text>a primary graphics adapter coupled to the bus; </claim-text>
<claim-text>a secondary graphics adapter coupled to the bus, the secondary graphics adapter comprising a video option read only memory (ROM); </claim-text>
<claim-text>a basic input-output system (BIOS) coupled to the bus, the BIOS having instructions which when executed cause the processor to perform operations including: </claim-text>
<claim-text>mapping the memory pursuant to a predetermined specification to include a defined region of the memory; </claim-text>
<claim-text>copying the contents of the video option ROM to a portion of the defined region of the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein: 
<claim-text>the predetermined specification is the Advanced Configuration and Power Interface (ACPI) specification; and </claim-text>
<claim-text>the defined region is the non-volatile sleeping (NVS) region defined by the ACPI specification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations including: 
<claim-text>redirecting access requests involving the video option ROM to the portion of the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the BIOS has further instructions which when executed cause the processor to perform further operations including: 
<claim-text>limiting access to the portion of the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A method comprising: 
<claim-text>mapping a memory pursuant to the Advanced Configuration and Power Interface (ACPI) specification to include a non-volatile-sleeping (NVS) memory region; </claim-text>
<claim-text>reserving a portion of the NVS memory region to maintain a plurality of device data regarding a device controller; </claim-text>
<claim-text>providing support for at least one device utilizing the portion of the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein: 
<claim-text>the device controller is a Universal Serial Bus (USB) host controller; </claim-text>
<claim-text>the device is a Universal Serial Bus (USB) device; and </claim-text>
<claim-text>the device data comprises USB transaction descriptors. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the providing ceases when an operating system providing USB device support is loaded. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein 
<claim-text>the device controller is a secondary graphics adapter having a video option read-only memory (ROM), </claim-text>
<claim-text>the device is a secondary video display, and </claim-text>
<claim-text>the device data is a copy the contents of the video option ROM. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A method comprising: 
<claim-text>mapping a memory pursuant to the Advanced Configuration and Power Interface (ACPI) specification to include a non-volatile-sleeping (NVS) memory region; </claim-text>
<claim-text>reserving a portion of the NVS memory region to maintain a plurality of Universal Serial Bus (USB) device data; and </claim-text>
<claim-text>providing USB device support utilizing the portion of the NVS memory region. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> further comprising: 
<claim-text>returning the portion of the NVS memory region when USB device drivers are loaded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein providing ceases when USB device drivers have been loaded.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005259A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005259A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005259A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005259A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005259A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005259A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
