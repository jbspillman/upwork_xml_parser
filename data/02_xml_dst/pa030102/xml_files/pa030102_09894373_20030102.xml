<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004922A1-20030102-D00000.TIF SYSTEM "US20030004922A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00001.TIF SYSTEM "US20030004922A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00002.TIF SYSTEM "US20030004922A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00003.TIF SYSTEM "US20030004922A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00004.TIF SYSTEM "US20030004922A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00005.TIF SYSTEM "US20030004922A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00006.TIF SYSTEM "US20030004922A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00007.TIF SYSTEM "US20030004922A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004922A1-20030102-D00008.TIF SYSTEM "US20030004922A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004922</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894373</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for data management</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ross</given-name>
<middle-name>A.</middle-name>
<family-name>Schmidt</family-name>
</name>
<residence>
<residence-us>
<city>New Hope</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Robert</given-name>
<middle-name>M.</middle-name>
<family-name>Craig</family-name>
</name>
<residence>
<residence-us>
<city>Richfield</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Cameron</given-name>
<family-name>Black</family-name>
</name>
<residence>
<residence-us>
<city>Burnsville</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Sean</given-name>
<middle-name>M.</middle-name>
<family-name>Brockway</family-name>
</name>
<residence>
<residence-us>
<city>Minnetonka</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Todd</given-name>
<family-name>Partington</family-name>
</name>
<residence>
<residence-us>
<city>Shakopee</city>
<state>MN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>ONTRACK Data International, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>MERCHANT &amp; GOULD PC</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 2903</address-1>
<city>MINNEAPOLIS</city>
<state>MN</state>
<postalcode>55402-0903</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An automated data management system and method for logging, processing, and reporting a large volume of data having different file types, using different versions, stored on different media, and/or run by different operating systems, includes a first processor for restoring a plurality of received data files, the data files being capable of being different file types; a file organizing/categorizing processor for organizing the received data files into data slices, each data slice including an identification number and a descriptor that describes characteristics of the received data file; a file logging processor for logging the received data files into a first database based on the data slices; a data uploading processor for uploading the first database to a second database; a de-duplicate processor for calculating a SHA value of the received data files to determine whether the received data files have duplicates and flagging duplicated data files in the second database; an image conversion processor for converting at least a portion of the received data files into image files; and a second processor for exporting the image files. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This present invention relates in general to a data management system and method, and more particularly, to an automated data management system and method for organizing and processing a large volume of various types of data files. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> With more and more information being stored electronically, it is found that the information is often stored in different formats, i.e., different types of files, on different storage media, using different versions of applications, or run by different operating systems. For example, some data may be in Microsoft Word format, while other data may be in WordPerfect format. Some data is in Microsoft Excel format, while others are in a variety of formats including, but not limited to, Microsoft Mail, Outlook, GroupWise, Lotus Notes, etc. Further, data may be stored in a hard drive, a floppy disk, a backup tape, a CD, or an optical device, etc. Furthermore, data may be operated by a UNIX, NOVELL, NT, or DOS system, etc. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> To review and/or manipulate any of data that are stored in different file types, using different versions, on different media, run by different operating systems, a customer often needs to open/close the corresponding different software programs, such as Word, WordPerfect, Excel, Email Outlook, etc. This is a very inefficient way of reviewing and manipulating the stored data. Further, one has to have these software programs and their updated versions to review and/or manipulate the stored data. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In an area of litigation support, in particular, huge amount of documents and/or exhibits may have to be produced, organized, reviewed, reproduced, etc., for example, in merger and acquisition, intellectual property, anti-trust, and class action cases. The documents and/or exhibits may come from different locations in different file types using different versions. The existing methods of handling documents and/or exhibits include hand-coding or bar-coding. The hand-coding or bar-coding methods are not truly automated methods, and these methods are not efficient particularly in handling a volumetric amount of documents and/or exhibits. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Many litigation support companies often send out huge amounts of electronic documents to a third world developing country or hire scores of temporary workers. These workers would open documents, print documents, and enter information about a document by hand into an organized file. These methods are often time consuming, labor intensive, and prone to human mistakes. The sheer volume of data that one needs to review under strict discovery deadlines becomes a challenging and time demanding task. As a reviewer gathers electronic information, the reviewer is required to be confident that s/he has thoroughly searched, found, and reviewed all of the information residing on laptops, desktops, servers, and backup tapes, and sometimes in multiple locations. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The existing data management systems use data paths, such as data source paths and data destination paths, to organize and/or log or access data files. When one process the data files, s/he has to find the data paths. Further, the number of data paths is limited. For example, to administer and process three data files, i.e. two generated by John Smith at ABC company on Sep. 12, 2000 in its two New York branch offices and one by Jay Smith at ABC company on Sep. 12, 2000 in one of its New York branch offices, the existing data management systems have used the data paths, such as ABC&bsol;9/12/2000&bsol;NY&bsol;JohnSmith&bsol;file name; ABC&bsol;9/12/2000&bsol;JohnSmith&bsol;NY2&bsol;file name; and ABC&bsol;9/12&bsol;2000&bsol;NY&bsol;JaySmith&bsol;file name. These data paths closely tie to a specific user, location, etc. The quality and efficiency of processing data files are significantly dependent on a process controller&apos;s experience and knowledge of data path structures. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Accordingly, there is a need for an efficient, automated data management system and method for organizing and processing a large volume of various types of data files. Further, improvements on administering and controlling the automated data management process are desired. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> It is with respect to these or other considerations that the present invention has been made. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In accordance with this invention, the above and other problems were solved by providing an efficient, automated data management system for logging, processing, and reporting a large volume of data capable of being in any types. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In one embodiment, a data management system in accordance with the principles of the present invention provides a data slice which is used to describe and categorize a unique set of data where every data file in that set of data has common characteristics, such as, but not limited to, owner/creator, location, backup date, or data type, etc., that are important in describing and labeling the data files. In other words, a data slice is a label assigned to a set or collection of data, and a data slice generally includes data descriptors or characteristics, such as company, user, date, location, etc. A data slice preferably has an ID number that is stored in a database. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> One embodiment of a data management system in accordance with the principles of the present invention includes: a first processor for restoring a plurality of received data files, the data files being capable of being differentfile types; a file organizing/categorizing processor for organizing the received data files into data slices, each data slice including an identification number and a descriptor that describes characteristics of the received data file; a file logging processor for logging the received data files into a first database based on the data slices; a data uploading processor for uploading the first database to a second database; a de-duplicate processor for calculating a SHA value of the received data files to determine whether the received data files have duplicates and flagging duplicated data files in the second database; an image conversion processor for converting at least a portion of the received data files into image files; and a second processor for exporting the image files. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In one embodiment, the first database is a local database for a specific data slice or a predetermined number of data slices, and the second database is a global database for the data slices in combination. The image files are preferably stored in the global database to be viewed. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Further in one embodiment, the image files that are converted from the data files are in a standardized image format, such as tiff format, PDF format, etc. The image files can then be exported/outputted, e.g. printed, etc. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Yet in one embodiment, the data files are in a variety of formats including, but not limited to, Microsoft Mail, Outlook, GroupWise, Lotus Notes, etc. Also, the data files have a variety of formats including Word, Excel, PowerPoint, and Access. The data files may include an attachment data file, which in turn may contain additional attachment data file. The process is designed to handle an endless number of levels of embedded data files. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Additionally in one embodiment, an attachment data file is generally associated with a data file such that image files for the data file and the corresponding attachment data file can be viewed together. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Still in one embodiment, the file logging processor, the image conversion processor, and the second processor are parallel processors such that the data files are parallel-processed in a data file logging stage, an image conversion stage, and an image file output stage. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Further in one embodiment, the data files having the same file type are preferably converted into the image files together. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Yet in one embodiment, the data management system includes a plurality of image conversion processors, each of the image conversion processors being capable of converting the data files having the same file type into the corresponding image files. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Additionally in one embodiment, the file logging processor identifies the file type of the data files based on the SHA value and a file header of each of the data files. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Still in one embodiment, the data management system may include a keyword search processor for searching a keyword from the received data files or processed image files. The keyword search can be performed either before processing the data files or after processing the data files. If a preprocessing keyword search, i.e. the keyword search is performed before processing the data files, is desired and preformed, and if there is a hit, the corresponding data file that is being searched is retained for processing, and the data file without a hit is discarded without being processed. If a post-processing keyword search, i.e. the keyword search is performed after processing the data files, is desired and performed, and if there is a hit, the corresponding image file is exported, and the image file without a hit is not exported. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The present invention also provides a method of logging, processing, and reporting a large volume of data capable of being in different types. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In one embodiment, the method in accordance with the principles of the present invention includes the steps of: restoring a plurality of received data files, the data files being capable of being different file types; organizing/categorizing the received data files into data slices, each data slice including an identification number and a descriptor that describes characteristics of the received data file; logging the received data files into a first database based on the data slices; uploading the first database to a second database; de-duplicating duplicates in the received data files by calculating a SHA value of the received data files to determine whether the received data files have duplicates and flagging duplicated data files in the database; converting at least a portion of the received data files into image files, respectively; and exporting the image files. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Still in one embodiment, the method further includes the step of viewing the image files stored in the second database. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Further in one embodiment, the converting of the data files includes converting the data files into the corresponding image files in a standardized image format, such as a PDF format, a tiff format, etc. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> One of the advantages of the present invention is that the data files are organized and processed in an efficient automated manner. The turn around time for generating a report containing the organized image files is substantially shortened. The quality and efficiency of processing data files are improved. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Another advantage of the present invention is that the duplicates in the data files can be eliminated (i.e. de-duplicating). The size of the entire data files can be substantially reduced. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A further advantage of the present invention is that the parallel processing of the data files allows the processing of the data files to be scalable. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> An additional advantage of the present invention is that the converted image files are organized such that it allows readily further processing of the data files. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Yet another advantage of the present invention is that every data file logged associates with a data slice id, which allows the processes, such as de-duplication, image conversion, and image output, to be performed on the data slice level. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> These and various other features as well as advantages which characterize the present invention will be apparent from a reading of the following detailed description and a review of the associated drawings. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Referring now to the drawings in which like reference numbers represent corresponding parts throughout: </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a block diagram of one embodiment of a data management system in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an operational flow diagram of an exemplary operation of a data management method in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an operational flow diagram of an exemplary logging data file operation in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an operational flow diagram of an exemplary de-duplicating data file operation in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an operational flow diagram of an exemplary image conversion operation in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an operational flow diagram of an exemplary outputting image file operation in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates an operational flow diagram of exemplary operation phases of a data management system in accordance with the principles of the present invention. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates exemplary data files and their corresponding organized data slices in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The present invention discloses an efficient, automated data management system for logging, processing, and reporting a large volume of data capable of being in different types, using different versions, stored on different media, and/or run by different operating systems. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> A preferred embodiment of a data management system <highlight><bold>20</bold></highlight> in accordance with the principles of the present invention is shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. A plurality of data files N are imported into a data file input processor <highlight><bold>22</bold></highlight>. The data files are organized by a file organizing/categorizing processor <highlight><bold>24</bold></highlight> into data slices. Each data slice includes an identification number and a descriptor. A descriptor describes characteristics of a received data file. Data slice is a term of art that is used to describe and catgorize a unique set of data where every data file in that set of data has common characteristics, such as, but not limited to, owner/creator, location, backup date, data type, or etc. These characteristics are generally considered to be important in describing and labeling the data files. In other words, a data slice is a label assigned to a set or collection of data, and a data slice generally includes a data descriptor or characteristics, such as company, user, date, location, etc. A data slice preferably has an ID number that is stored in a database. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> An example of a data slice structure or database is shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. There are ten data files. Three data files are generated by Bob (Manager), Bill (Supervisor), and Joe (Supervisor), respectively, and backed up on Oct. 5, 2000 at the Tech Center in Denver. These data files are stored on a backup tape <highlight><bold>1</bold></highlight>. Four data files are generated by Bob (Manager), Bill (Supervisor), Joe (Supervisor), and Fred (CEO), respectively, and backed up on Jan. 2, 2001 at the Tech Center in Denver. These four data files are stored on a backup tape <highlight><bold>2</bold></highlight>. The last three data files are generated by Sally (Manager), Frank (Sr. Accountant), and Bob (Manager), respectively, and backed up on Mar. 12, 2001 at the Administration Office in Minneapolis. These three data files are stored on a backup tape <highlight><bold>3</bold></highlight>. A data slice is assigned to each data file with a unique data slice ID and a descriptor. The descriptor includes, but not limited to, the person&apos;s name, location, data, and the person&apos;s position in the company, etc. The data slices are logged into a database such as the one shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, data files are first logged into a local database <highlight><bold>26</bold></highlight> by a file logging processor <highlight><bold>28</bold></highlight> and then uploaded into a global database <highlight><bold>30</bold></highlight> by a data upload processor <highlight><bold>32</bold></highlight>. The file logging processor <highlight><bold>28</bold></highlight> also identifies a file type of the data file and stores the file type information of the data file into the local database <highlight><bold>26</bold></highlight>. The file type information is also uploaded into the global database <highlight><bold>30</bold></highlight> by the data upload processor <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A de-duplicate processor <highlight><bold>34</bold></highlight> is coupled to the data upload processor <highlight><bold>32</bold></highlight>. The de-duplicate processor <highlight><bold>34</bold></highlight> flags duplicates of the data files, i.e. de-duplicates the data files by creating a unique subset of data files and flagging duplicated files as such and storing this information in the global database <highlight><bold>30</bold></highlight>. Generally, the de-duplicate processor <highlight><bold>30</bold></highlight> calculates a SHA value of the received data files to determine whether the received data files have duplicates and flags duplicated data files in the global database <highlight><bold>30</bold></highlight>. The data slice structure of the system <highlight><bold>20</bold></highlight> allows one to have options of de-duplicating the entire database, no de-duplicating at all, or de-duplicating per data slice or a set of data slices. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> An image conversion processor <highlight><bold>36</bold></highlight> is coupled to the do-duplicate processor <highlight><bold>34</bold></highlight>. The image conversion processor <highlight><bold>36</bold></highlight> converts the data files into image files. The data slice structure of the system <highlight><bold>20</bold></highlight> allows one to convert the desired data slice. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> A data file output processor <highlight><bold>38</bold></highlight> is coupled to the image conversion processor <highlight><bold>36</bold></highlight>. The data file output processor <highlight><bold>38</bold></highlight> exports the image files. The data slice structure of the system <highlight><bold>20</bold></highlight> allows one to have options of exporting the entire converted image files or exporting a set of converted image files. The exporting may include, but not limited to, printing the image files, or sending the image files to a device, etc. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The application of the data management system <highlight><bold>20</bold></highlight> may include three phases of data processing. Phase 1 is the file logging/uploading/de-duplicating process. Phase 2 is the file converting process. Phase 3 is the file exporting process. The details of three phases are discussed in operational flows shown in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an operational flow <highlight><bold>40</bold></highlight> of an exemplary data management method in accordance with the principles of the present invention. The operation <highlight><bold>40</bold></highlight> starts with an operation <highlight><bold>42</bold></highlight> of restoring a plurality of received data files. The data files can be of different file types. For example, the data files can be Word, JPEG, GIF, Bitmap, Excel, Access, Power Point, text, Adobe Acrobat, Paradox, ZIP files, etc. The data files are then organized/categorized into data slices in an operation <highlight><bold>44</bold></highlight>. Next, in an operation <highlight><bold>46</bold></highlight>, the received data files are logged into a local database formed by the data slice(s). The operation <highlight><bold>46</bold></highlight> also identifies a file type of the received data files. Then, in an operation <highlight><bold>48</bold></highlight>, the data slice in the local database is uploaded into a global database. The global database stores the information for all data files, their corresponding data slices, the converted image files, flags for the duplicates, flags for encrypted files, etc. The global database is generally a relational database that is known in the computer database art. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Next in an operation <highlight><bold>50</bold></highlight>, the received data files are de-duplicated by calculating a SHA value of the received data files so as to determine whether the received data files have the same SHA value. If the data files have the same SHA value, then the data files are duplicates. If duplicates of the data files are found, they are flagged in the global database. Data files are then converted into image files in an operation <highlight><bold>52</bold></highlight>. The control of the operational flow <highlight><bold>40</bold></highlight> allows one to have the options of converting the de-duplicated data files, i.e. the data files without deplicates, or converting the data files disregard of the duplicates, i.e. no de-duplicate, or converting a part of de-duplicated data files. Next in an operation <highlight><bold>54</bold></highlight>, the converted image files are exported to a device, e.g. a printer, a viewer program, a PDA (Personal Digital Assistant), etc. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an operational flow <highlight><bold>56</bold></highlight> of logging data files in accordance with the principles of the present invention. The operation <highlight><bold>56</bold></highlight> starts with an operation <highlight><bold>58</bold></highlight> of logging/categorizing/organizing data files into data slices. Then, the current data file is logged into a local database in an operation <highlight><bold>60</bold></highlight>. Next, an operation <highlight><bold>62</bold></highlight> identifies the file type of the data file. Then, an operation <highlight><bold>64</bold></highlight> determines whether there is an attachment to the current data file. If there is an attachment to the data file, i.e. the &ldquo;Yes&rdquo; path, then the attachment is associated with the data file in an operation <highlight><bold>66</bold></highlight> so that the image files of the attachment can be reviewed with the image files of the data file. The attachment is then further logged into the local database in the operation <highlight><bold>60</bold></highlight>. If there is no attachment to the data file, i.e. the &ldquo;No&rdquo; path, then the logging data file operation <highlight><bold>56</bold></highlight> terminates. A quality &amp; assurance (QA) operation <highlight><bold>68</bold></highlight> may be launched to determine whether there is any problem in the logging operation <highlight><bold>56</bold></highlight>. If there is a problem, i.e. the &ldquo;Yes&rdquo; path, then the operation <highlight><bold>56</bold></highlight> goes back to start logging the data file or re-logging the data file in the operation <highlight><bold>58</bold></highlight>. If there is no problem, then the data slice moves onto the next process phase. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The QA operation <highlight><bold>68</bold></highlight> can be implemented in a user interface to the system. The user interface may provide the status of operations in each phase. For example, the user interface may indicate whether the selected or current data file is in a New status, In-Progress status, Done status, Error status, Ignore status, Check/Search status, QA In-Process status, or No Data status, etc. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an operational flow <highlight><bold>70</bold></highlight> of de-duplicating data files in accordance with the principles of the present invention. The de-duplicating data file operation <highlight><bold>70</bold></highlight> starts with an operation <highlight><bold>72</bold></highlight> of calculating a SHA value for each of the data files. Then, in an operation <highlight><bold>74</bold></highlight>, the SHA values of the data files are compared. The SHA values can be compared to existing SHA values in the local or global database. If the data files have the same SHA value from an operation <highlight><bold>76</bold></highlight>, i.e. the &ldquo;Yes&rdquo; path, one of the duplicated data files is retained in the global database, and the other duplicated data files are flagged in the global database in an operation <highlight><bold>78</bold></highlight>. Then, the operation <highlight><bold>70</bold></highlight> ends. If the data files do not have the same SHA values, the operation <highlight><bold>70</bold></highlight> ends without flagging. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an operational flow <highlight><bold>80</bold></highlight> of image conversion in accordance with the principles of the present invention. An operation <highlight><bold>82</bold></highlight> starts image conversion based on next data slice ready for this conversion phase. Next, an operation <highlight><bold>84</bold></highlight> selects a new file status to convert the data files. The file status may include statuses such as New, Corrupted, or Encrypted, etc. Then, an operation <highlight><bold>86</bold></highlight> selects a file type to convert the data files. Next, an operation <highlight><bold>88</bold></highlight> selects a new data file. Then, the selected data file is converted into an image file in an operation <highlight><bold>90</bold></highlight>. Also, if extracting text from the data file is needed, the operation <highlight><bold>90</bold></highlight> flags the text to be extracted. If indication of a big file is desired, the operation <highlight><bold>90</bold></highlight> flags when the data file exceeds a predetermined size of a file. If the data file is corrupted, the operation <highlight><bold>90</bold></highlight> flags the data file being corrupted. If the data file is encrypted, the operation <highlight><bold>90</bold></highlight> flags the data file being encrypted. The corrupted file is generally repaired before converting it to an image file. The encrypted file is generally decrypted before converting it to an image file. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Next, the image file is stored in the global database in an operation <highlight><bold>92</bold></highlight>. Then, an operation <highlight><bold>94</bold></highlight> determines whether there is another file of this file type category left to convert. If &ldquo;Yes&rdquo;, then the operational flow <highlight><bold>80</bold></highlight> goes to the operation <highlight><bold>88</bold></highlight> to select a new data file under the selected file type. If &ldquo;No&rdquo;, then an operation <highlight><bold>96</bold></highlight> determines whether there is another file type left to select. If&ldquo;Yes&rdquo;, then the operational flow <highlight><bold>80</bold></highlight> goes to the operation <highlight><bold>96</bold></highlight> to select a new file type. If &ldquo;No&rdquo;, then an operation <highlight><bold>98</bold></highlight> determines whether there is another file status left to select. If &ldquo;Yes&rdquo;, then the operational flow <highlight><bold>80</bold></highlight> goes to the operation <highlight><bold>84</bold></highlight> to select a new file status. If &ldquo;No&rdquo;, then the image conversion operational flow <highlight><bold>80</bold></highlight> ends. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an operational flow <highlight><bold>100</bold></highlight> of outputting image files in accordance with the principles of the present invention. An operation <highlight><bold>102</bold></highlight> starts outputting the image files of the selected data slice. Then, an operation <highlight><bold>104</bold></highlight> identifies the file that needs to be processed in a report. Then, the control of the operational flow <highlight><bold>100</bold></highlight> determines whether a keyword search is desired in an operation <highlight><bold>106</bold></highlight>. If &ldquo;Yes&rdquo;, then the keyword search among the image files is performed. An operation <highlight><bold>108</bold></highlight> determines whether there is a hit after the keyword search. If &ldquo;Yes&rdquo;, then an operation <highlight><bold>110</bold></highlight> generates bates numbers for image files/slip sheets. If &ldquo;No&rdquo;, the outputting operational flow <highlight><bold>100</bold></highlight> ends. If the keyword search is not desired from the operation <highlight><bold>106</bold></highlight>, then bates numbers for image files/slip sheets are generated in the operation <highlight><bold>110</bold></highlight>. Next, slip sheets are generated to separate certain image files in an operation <highlight><bold>112</bold></highlight>. Then, a review log is generated for further review and response to the report in an operation <highlight><bold>114</bold></highlight>. Next, the report is outputted in a print format and/or an electronic viewer in an operation <highlight><bold>116</bold></highlight>. Then, the operational flow <highlight><bold>100</bold></highlight> ends. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Also shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and as described above, a quality and assurance (QA) operation <highlight><bold>118</bold></highlight> may be launched to determine whether there is any problem in the outputting operation <highlight><bold>102</bold></highlight>. If there is a problem, i.e. the &ldquo;Yes&rdquo; path, then the operational flow <highlight><bold>100</bold></highlight> goes back to start outputting the data file or re-outputting the data file in the operation <highlight><bold>102</bold></highlight>. If there is no problem, then the data slice moves onto the next process. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> It is appreciated that the sequence or order of the operational flows <highlight><bold>40</bold></highlight>, <highlight><bold>56</bold></highlight>, <highlight><bold>70</bold></highlight>, <highlight><bold>80</bold></highlight>, and <highlight><bold>100</bold></highlight> can be varied within the scope of the present invention. Also, it is appreciated that some steps in the operation flows <highlight><bold>40</bold></highlight>, <highlight><bold>56</bold></highlight>, <highlight><bold>70</bold></highlight>, <highlight><bold>80</bold></highlight>, and <highlight><bold>100</bold></highlight> can be added, merged, and/or eliminated depending on a customer&apos;s needs without departing from the scope of the present invention. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a flow diagram <highlight><bold>120</bold></highlight> representing a specific application of the data management system <highlight><bold>20</bold></highlight> with exemplary system processing steps and user input steps in accordance with the principles of the present invention In box <highlight><bold>122</bold></highlight>, the user selects the phase of data slices that s/he wants to process, for example, Phase 1, Phase 2, etc. As described above, Phase 1 is a filing logging phase, Phase 2 is an image conversion phase, and Phase 3 is a report generation phase. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In box <highlight><bold>124</bold></highlight>, the user selects the status of data slices that s/he wants to process, for example, New, In Progress, etc. As described above, usually status &ldquo;New&rdquo; is selected for processing. If a data slice had a problem, such as the machine it was running on was shut down, etc., that data slice would have the status &ldquo;In Progress&rdquo;. In order to view this problematic data slice to select it for processing, the status is set to &ldquo;In Progress&rdquo;. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Then, the system displays all data slices that have the selected phase and status as shown in box <highlight><bold>126</bold></highlight>. Next, the user selects a data slice for processing in box <highlight><bold>128</bold></highlight>. If phase 2, i.e. image conversion, is selected from box <highlight><bold>130</bold></highlight>, i.e. &ldquo;Yes&rdquo; path, it is determined whether to process specific file types or file status in box <highlight><bold>132</bold></highlight>. If &ldquo;Yes&rdquo;, the user selects status (e.g. New, In Progress, etc.) of the files that s/he wants to process in box <highlight><bold>134</bold></highlight> and selects category or file type (Word Processing, Spreadsheet, etc.) of the files that s/he wants to process in box <highlight><bold>136</bold></highlight>. Then, the system sets the status of the selected data slice to &ldquo;In Progress&rdquo; in box <highlight><bold>138</bold></highlight>. If no specific file type or file status is processed from box <highlight><bold>132</bold></highlight>, or if the user does not want to process phase 2, i.e. the image conversion phase, from box <highlight><bold>130</bold></highlight>, the system sets the data slice status to &ldquo;In Progress&rdquo; as shown in box <highlight><bold>138</bold></highlight>. Then, the system processes the data slice in box <highlight><bold>140</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Next, the system checks for processing problems to ensure quality and assurance (QA) and posts QA information in box <highlight><bold>142</bold></highlight> as described above. Then, the system sets data slice status to &ldquo;Done&rdquo; in box <highlight><bold>144</bold></highlight>. The user determines whether the QA results are good in box <highlight><bold>146</bold></highlight>. If &ldquo;No&rdquo;, then the system sets data slice status to &ldquo;Error&rdquo; in box <highlight><bold>148</bold></highlight> and determines whether to continue processing data slices with the same phase and status in box <highlight><bold>150</bold></highlight>. If it is to continue, i.e. &ldquo;Yes&rdquo; path, then the operational flow <highlight><bold>120</bold></highlight> goes to the operation <highlight><bold>128</bold></highlight> to select a data slice for processing. If it is not to continue, i.e. &ldquo;No&rdquo; path, then the operational flow <highlight><bold>120</bold></highlight> goes to the operation <highlight><bold>122</bold></highlight> to select a phase of data slices that the user wants to process. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> If the QA results are good from the box <highlight><bold>146</bold></highlight>, i.e. &ldquo;Yes&rdquo; path, then the user sets the data slice Phase to the next Phase Status to &ldquo;New&rdquo; in box <highlight><bold>152</bold></highlight>. Then, the operational flow <highlight><bold>120</bold></highlight> goes to the operation <highlight><bold>150</bold></highlight> as described above. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> It will be clear that the present invention is well adapted to attain the ends and advantages mentioned as well as those inherent therein. While presently preferred embodiments have been described for purposes of this disclosure, various changes and modifications may be made which are well within the scope of the present invention. For example, in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, if desired, the steps set by the user may be automatically performed by the system without departing from the scope of the present invention. Numerous other changes may be made which will readily suggest themselves to those skilled in the art and which are encompassed in the spirit of the invention disclosed and as defined in the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data management system, comprising: 
<claim-text>a first processor for restoring a plurality of received data files, the data files being capable of being different file types; </claim-text>
<claim-text>a file organizing/categorizing processor, coupled to the first processor, for organizing the received data files into data slices, each data slice including an identification number and a descriptor that describes characteristics of the received data file; </claim-text>
<claim-text>a file logging processor, coupled to the file organizing/categorizing processor, for logging the received data files into a first database based on the data slices; </claim-text>
<claim-text>a data uploading processor, coupled to the file logging processor, for uploading the first database to a second database; </claim-text>
<claim-text>a de-duplicate processor, coupled to the data uploading processor, for calculating a SHA value of the received data files to determine whether the received data files have duplicates and flagging duplicated data files in the second database; </claim-text>
<claim-text>an image conversion processor, coupled to the de-duplicate processor, for converting at least a portion of the received data files into image files; and </claim-text>
<claim-text>a second processor, coupled to the image conversion processor, for exporting the image files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first database is a local database for at least one data slice, and the second database is a global database for all logged data slices. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the image files converted from the data files are in a standardized image format. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data files are in a variety of formats including Microsoft Mail, Outlook, GroupWise, Lotus Notes, the user data files have a variety of formats including Word, Excel, PowerPoint, and Access. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein an attachment data file in one of the data files is associated with the data file such that image files for the data file and the corresponding attachment data file are viewed together. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the file logging processor, the image conversion processor, and the second processor are parallel processors such that the data files are parallel-processed in a data file logging stage, an image conversion stage, and an image file output stage. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data files having the same fie type are converted into the image files together. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data management system includes a plurality of image conversion processors, each of the image conversion processors being capable of converting the data files having the same file type into the corresponding image files. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the file logging processor identifies the file type of the data files based on the SHA value and a file header of each of the data files. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a keyword search processor, coupled to the file logging processor, for searching a keyword from the received data files, wherein if there is a hit, the corresponding data file is retained for processing, and the data file without a hit is discarded without being processed. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a keyword search processor, coupled to the image conversion processor, for searching a keyword from the image files, wherein if there is a hit, the corresponding image file is exported, and the image file without a hit is not exported. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a file status filter to indicate different statuses of the received data files. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the different statuses comprise New, In-Progress, Done, Error, Corrupted, Encrypted, No Keyword Hit, Big File, Large Page Count. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A data management method, comprising the steps of: 
<claim-text>restoring a plurality of received data files, the data files being capable of being different file types; </claim-text>
<claim-text>organizing/categorizing the received data files into data slices, each data slice including an identification number and a descriptor that describes characteristics of the received data file; </claim-text>
<claim-text>logging the received data files into a first database based on the data slices; </claim-text>
<claim-text>uploading the first database to a second database; </claim-text>
<claim-text>de-duplicating duplicates in the received data files by calculating a SHA value of the received data files to determine whether the received data files have duplicates and flagging duplicated data files in the database; </claim-text>
<claim-text>converting at least a portion of the received data files into image files, respectively; and </claim-text>
<claim-text>exporting the image files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising the step of viewing the image files stored in the second database. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the step of converting of the data files comprises the step of converting the data files into a standardized image format. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising the step of searching a keyword from the received data files, if there is a hit, the corresponding data file is retained for processing, and the data file without a hit is discarded without being processed. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising the step of searching a keyword from the image files, if there is a hit, the corresponding image file is exported, and the image file without a hit is not exported.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004922A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004922A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004922A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004922A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004922A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004922A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004922A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004922A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004922A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
