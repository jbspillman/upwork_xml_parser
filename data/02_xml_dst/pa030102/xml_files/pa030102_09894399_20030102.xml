<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005096A1-20030102-D00000.TIF SYSTEM "US20030005096A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00001.TIF SYSTEM "US20030005096A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00002.TIF SYSTEM "US20030005096A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00003.TIF SYSTEM "US20030005096A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00004.TIF SYSTEM "US20030005096A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00005.TIF SYSTEM "US20030005096A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00006.TIF SYSTEM "US20030005096A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005096A1-20030102-D00007.TIF SYSTEM "US20030005096A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005096</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894399</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>222000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>230000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and system for dynamic redistribution of remote computer boot service in a network containing multiple boot servers</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Chakkalamattam</given-name>
<middle-name>J.</middle-name>
<family-name>Paul</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Bradford</given-name>
<middle-name>A.</middle-name>
<family-name>Stern</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>INTERNATIONAL BUSINESS MACHINES CORPORATION</organization-name>
<address>
<city>ARMONK</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Joseph R. Burwell</name-1>
<name-2>Law Office of Joseph R. Burwell</name-2>
<address>
<address-1>P.O. Box 28022</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78755-8022</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and a system are presented for facilitating a PXE-compliant (Preboot Execution Environment) remote boot process between clients and multiple servers. All clients are initially directed to the address of the central boot server when they initially request remote boot service. The central boot server returns the same small initial bootstrap program to every client, which is then executed by the client&apos;s embedded boot program. The received initial bootstrap program contains only enough logic to have the client request and receive a list of alternate boot server addresses. The list may be ordered to present to the client a series of best-available boot servers, or the client may search the list to determine an address of an alternate boot server that can efficiently continue the remote boot process. The client selects a boot server from the list and requests the next program from the selected boot server. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to an improved data processing system and method for coordinating the operation of multiple computing devices, and in particular, to a method and system for initializing computers and other computing devices through a computer communications network. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> A modern distributed computing environment in a moderate to large enterprise consists of many computing devices that communicate with each other through a computer communications network. There are two groups of devices, called clients and servers, which perform the computational tasks associated with the defined purposes, or missions, of the enterprise. Clients request centralized data processing services from servers when performing computational tasks. Servers supply those requested services. Generally, there are more clients than servers because servers are typically larger machines that can each service the requests of many clients. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Clients are usually operated by people who are end-users of the enterprise computing environment. Each end-user has a role in the enterprise which requires access to a subset of the computational tasks associated with the missions of the enterprise. End-users with different roles require access to different subsets of computational tasks. It is important that each end-user have rapid and easy access to the appropriate subset of computational tasks associated with that end-user&apos;s role. It is also important that each end-user not have access to computational tasks that are not associated with that end-user&apos;s role. By limiting end-user access in this way, end-users are prevented from causing inadvertent or deliberate damage to the enterprise computing environment. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Servers are operated by people who are administrators of the enterprise computing environment. Administrators have roles that assure that the enterprise computing environment is available to end-users with a minimum specified quality of service. The computational tasks associated with administrator roles are therefore associated with the availability of the enterprise computing environment and not necessarily directly associated with the missions of the enterprise. In addition to operating servers, administrators are responsible for the installation, configuration and maintenance of the entire enterprise computing environment, including servers, networks, and clients. An important responsibility of administrators is to define the software configuration of each client so that it matches the access requirements of the end-user who is operating the client. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The integration of clients and servers into distributed computing environments has provided benefits to enterprises by making data more available when and where it is needed. The productivity of end-users has been increased by significantly reducing manual handling and processing of data that is required to make the data useful to the enterprise. Moreover, client-server environments have made it possible to use this data as a tool to improve strategic decision making, and it has permitted enterprises to take advantage of the decreasing unit cost of computing by distributing data processing to newer devices. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The increasing complexity of distributed computing environments has also increased the costs of administering these environments. These increasing administrative costs offset the benefits described above. In fact, as the unit cost of computing devices has decreased, these administrative costs are responsible for an increasing proportion of the total cost of ownership of data processing resources. This has made these administrative costs a target for increasing cost-containment efforts by enterprises. End-user client devices contribute a significant and increasing share of these administrative costs because they are the most numerous, most functionally diverse, most physically scattered, and most vulnerable of the computing resources. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The concept of the server-managed client has been introduced as a means of controlling the administrative costs of these clients. The implementation of this concept permits administrators to define the client software environment using resources available on centrally located servers rather than having to physically visit and configure each client separately. These server resources include files that are stored on servers and that are copied through the network by clients. These transferred files include program files that contain the client software instructions that execute on the client and data files which define the enterprise computing environment for that client software. These server resources also include administrative software running on servers to automate the creation and management of client software environment definitions. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The implementation of server-managed clients is made possible with a remote boot process that is provided to the client. A boot process on a client is defined as a sequence of program instructions that begins automatically when the client is started or reset and completes when an end-user software environment is operational on the client. The initial instructions that are executed in a boot process are fixed in the nonvolatile memory of the hardware of the client. As the boot process progresses, program instructions are located on a source outside of the client&apos;s nonvolatile memory and copied into the client&apos;s volatile memory (also referred to as dynamic or random access memory). Client execution is then transferred from nonvolatile memory to these instructions in volatile memory. Those instructions in volatile memory continue the boot process by locating and copying additional program instructions and data into the client until the end-user software environment is operational. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In a remote boot process (also called a network boot process) some or all of the program instructions and data are copied to the client&apos;s volatile memory by requesting and receiving files from a specified server, called a boot server, over a network through the client&apos;s network interface device. This is distinguished from a local boot process where the source of the program instructions and data is nonvolatile medium residing in a device that is attached to the client, such as a diskette, hard disk, or CD-ROM. A remote boot process allows end-user software environments to be located in a repository on a centrally-located boot server instead of having to be transported on a separate physical media to the location of every client. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The server-managed client concept has administrative benefits that go well beyond those associated with the initial deployment of a client. Updates, fixes, or changes to client operating systems and application programs can be applied to the client files where they are stored on the servers. Those changes can then be deployed to all clients automatically using the remote boot process with no administrator or end-user intervention required except to initiate the remote boot by restarting or resetting each client. By assuring the consistency of the client machine software environments in this manner, the incidence and impact of software-related problems is reduced, thereby reducing the cost and complexity of diagnosing and rectifying client-side problems. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Multiple client operating systems can be supported to meet application needs, end-user preferences, or hardware compatibility issues. Access to a client machine&apos;s local hard drive can be restricted to force all end-user generated data to be stored on a server, ensuring that such critical enterprise data is always available. End-user authentication and authorization processes can be centralized and simplified. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Separate classes of client desktop interfaces can be deployed for each class of end-user, or an administrator can have the ability to define customized desktop environments, including a set of specific authorized applications for each end-user in a domain. More dynamically, end-users can have &ldquo;roaming&rdquo; desktops. When an end-user logs on to a client machine, the end-user&apos;s desktop and applications are supplied from the server, giving the end-user the ability to log on to any client machine in the domain and see the same desktop and applications. This capability is particularly useful in environments in which end-users do not always work at an assigned workstation but move between workstations based on availability, such as call centers, banks, or airline departure gates. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The server-managed client architecture also increases the reliance of clients upon the boot server for their ability to operate. By extension, the mission-critical computational tasks of the enterprise are also more reliant upon having the boot server maintain a minimum quality of service. For instance, during failure recovery after a power failure or some other type of widespread system outage, a large number of clients will need to be remote booted almost simultaneously. In some environments, the distributed computing environment needs to assure that the clients can complete the remote boot process within a specified time constraint, thereby imposing both availability and performance constraints on the remote boot infrastructure. A fault-tolerant, performance-sensitive solution would ensure that the clients can complete the remote boot process with a minimum required quality of service over a wide range of operating conditions within the remote boot infrastructure. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> A remote boot service which requires the network transfer of an operating system to the target client computer can generate a considerable amount of demand on a source server computer providing the boot service, particularly if there are many client computers requesting the remote boot service concurrently. One manner of resolving the demand problem is to place multiple alternate server computers within the network, any of which can provide the remote boot service to any of the target client computers. However, with this solution, there is no guarantee that the demand will be appropriately load-balanced among the boot servers. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Therefore, it would be advantageous to provide a method and system for a performance-sensitive remote boot solution that can dynamically respond to changes in the quality of service provided by each of multiple redundant boot servers. It would be particularly advantageous for the method and system to dynamically direct clients to boot servers that have relatively low demands in order to provide the best possible service to the requesting clients. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> A method, a system, an apparatus, and a computer program product are presented for facilitating a remote boot process. All clients are initially directed to the address of the central boot server when they initially request remote boot service. The central boot server returns the same small initial bootstrap program to every client computer, which is then executed by the client&apos;s embedded boot program. The received initial bootstrap program contains only enough logic to have the client computer request and receive a list of alternate boot server addresses. The list may already be ordered to present a series of best-available boot servers to the client, or the client may search the list to determine an address of an alternate boot server that can efficiently continue the remote boot of the client. The initial bootstrap logic concludes by requesting the next program from the selected boot server, receiving the requested program, and transferring client computer execution to that program to continue the remote boot of the client. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> While the set of alternate boot servers are providing boot service, each boot server in the set of alternate boot servers runs a daemon to determine the load of the server. The daemon reports its server&apos;s load status back to the central boot server. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The central boot server runs a boot service configuration daemon to maintain the list of alternate boot servers. The order of the alternate boot server addresses on the list is continuously updated by the boot service configuration daemon running on the central boot server. This daemon may have access to data provided by other services which can indicate the current status of the network and the current status of the availability and loading of all of the alternate boot servers. The alternate boot server address list is reordered by this daemon as the monitored statuses change. In a preferred embodiment, the daemon orders the list so that the address of the alternate boot server that can most efficiently service the next received client computer boot request appears first on the list, with the other alternate boot server addresses following in order of decreasing efficiency with which they can service the request. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, further objectives, and advantages thereof, will be best understood by reference to the following detailed description when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> depicts a typical distributed data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> depicts a typical computer architecture that may be used within a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>A-<highlight><bold>2</bold></highlight>D are a set of figures that are used to describe the standard PXE remote boot methodology; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a data flow diagram that shows a series of actions between a client and a DHCP/PXE proxy server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram depicting a client-server configuration for performing a remote boot operation in accordance with the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a data flow diagram showing a series of actions between a client and a central boot server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a data flow diagram showing a series of actions between a client and an alternate boot server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart depicting a method to be used by a boot service monitor daemon in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart depicting a method to be used by a boot service monitor daemon in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> depicts a typical network of data processing systems. Distributed data processing system <highlight><bold>100</bold></highlight> contains network <highlight><bold>102</bold></highlight>, which is a medium that may be used to provide communications links between various devices and computers connected together within distributed data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone or wireless communications. In the depicted example, application server <highlight><bold>104</bold></highlight> and application server <highlight><bold>106</bold></highlight> are connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>108</bold></highlight>. In addition, clients <highlight><bold>110</bold></highlight>-<highlight><bold>114</bold></highlight> also are connected to network <highlight><bold>102</bold></highlight>. Clients <highlight><bold>110</bold></highlight>-<highlight><bold>114</bold></highlight> can employ boot servers <highlight><bold>116</bold></highlight> and <highlight><bold>118</bold></highlight> to receive operating system files and/or application files. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The present invention could be implemented on a variety of hardware platforms; <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is intended as an example of a heterogeneous computing environment and not as an architectural limitation for the present invention. Data processing systems connected to the network may be represented by a variety of computing devices, such as mainframes, personal computers, personal digital assistants (PDAs), etc. Distributed data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, routers, and other devices that are not shown. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 1B, a</cross-reference> diagram depicts a typical computer architecture of a data processing system, such as those shown in <cross-reference target="DRAWINGS">FIG. 1A</cross-reference>. Data processing system <highlight><bold>120</bold></highlight> contains one or more central processing units (CPUs) <highlight><bold>122</bold></highlight> connected to internal system bus <highlight><bold>123</bold></highlight>, which interconnects random access memory (RAM) <highlight><bold>124</bold></highlight>, read-only memory (ROM) <highlight><bold>126</bold></highlight>, and input/output adapter <highlight><bold>128</bold></highlight>, which supports various I/O devices, such as printer <highlight><bold>130</bold></highlight>, disk units <highlight><bold>132</bold></highlight>, or other devices not shown, such as a sound system, etc. System bus <highlight><bold>123</bold></highlight> also connects communication adapter <highlight><bold>134</bold></highlight> that provides access to communication link <highlight><bold>136</bold></highlight>. Communication adapter <highlight><bold>134</bold></highlight> may include a network interface card (NIC), and system <highlight><bold>120</bold></highlight> may be PXE-enabled by including the appropriate functionality within an optional ROM on the NIC or within some other system ROM. User interface adapter <highlight><bold>148</bold></highlight> connects various user devices, such as keyboard <highlight><bold>140</bold></highlight> and mouse <highlight><bold>142</bold></highlight>, or other devices not shown, such as a stylus, microphone, etc. Display adapter <highlight><bold>144</bold></highlight> connects system bus <highlight><bold>123</bold></highlight> to display device <highlight><bold>146</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> may vary depending on the system implementation. For example, the system may have one or more processors and multiple types of nonvolatile memory. Other peripheral devices may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference>. In other words, one of ordinary skill in the art would not expect to find similar components or architectures within a network-enabled phone and a desktop workstation. The depicted examples are not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In addition to being able to be implemented on a variety of hardware platforms, the present invention may be implemented in a variety of software environments. A typical operating system may be used to control program execution within each data processing system. For example, one device may run a Unix&reg; operating system, while another device contains a Microsoft&reg; Windows&reg; operating system environment. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The present invention may be implemented on a variety of hardware and software platforms, as described above. More specifically, though, the present invention is directed to providing a performance-sensitive, load-balanced, remote boot methodology. As background, a typical remote boot methodology is described before describing the present invention in more detail. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> With reference now to FIGS. <highlight><bold>2</bold></highlight>A-<highlight><bold>2</bold></highlight>D, a set of figures describes the standard PXE remote boot methodology. The description of FIGS. <highlight><bold>2</bold></highlight>A-<highlight><bold>2</bold></highlight>D is adapted from <highlight><italic>Preboot Execution Environment </italic></highlight>(<highlight><italic>PXE</italic></highlight>) <highlight><italic>Specification, Version </italic></highlight>2.1, Intel Corp., September 1999, which provides a complete description of the PXE protocol. PXE is a remote boot protocol that relies upon a set of industry-standard, Internet-related protocols, such as TCP/IP (Transport Control Protocol/Internet Protocol), DHCP (Dynamic Host Configuration Protocol), and TFTP (Trivial File Transfer Protocol). PXE extends DHCP by using the option fields within DHCP-formatted packets to transfer PXE-related information. By using standard protocols, an enterprise is able to use its existing TCP/IP network infrastructure with the DHCP protocol to implement remote boot capabilities. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2A, a</cross-reference> block diagram describes PXE-enabled client <highlight><bold>200</bold></highlight>. Network interface hardware <highlight><bold>202</bold></highlight> must be present within the client device to communicate with other devices across a network. The client also contains BIOS (Basic Input/Output System) <highlight><bold>204</bold></highlight>, usually in the form of a ROM, that allows the client to perform the initial steps of a boot process, such as a Power On Self-Test (POST) that initializes the client hardware. Client <highlight><bold>200</bold></highlight> also contains PXE functionality <highlight><bold>206</bold></highlight>, which is usually contained within another ROM. It should be noted that the present invention (described in more detail below after the description of the standard PXE protocol) does not require modification to the typical DHCP functionality within the client. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> PXE specifies the protocols by which a client requests and downloads an executable image from a boot server. PXE does not specify the operational details and functionality of the network bootstrap program (NBP) that the client receives from the server, i.e. the remote boot image downloaded by the PXE client via TFTP or MTFTP (Multicast TFTP). In general, the execution of the downloaded NBP initiates a series of processing steps on the client that ultimately will result in the client being ready for use by its user. Typically, the NBP will use an application program interface (API) specified by PXE and provided by the client PXE support to request and install additional files via M/TFTP from the boot server containing executable images of an operating system, appropriate communications and other device drivers, and other system software. The NBP will then transfer client execution to the operating system which can use either PXE or its own communications support to request user-specific configuration information and application software executable images from the boot server for installation on the client. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The initial phase of the PXE client-server protocol uses a subset of the DHCP protocol messages to enable the client to discover a boot server, i.e. a server that delivers executables for booting the client. The client may use the opportunity to obtain an IP address, which is the expected behavior but is not required. A standard DHCP service provides communications-related configuration values to client computers on a network during the client boot process; the primary configuration value that the client might receive is a dynamically allocated IP address. The second phase of the protocol occurs between the client and a boot server and uses the DHCP message format as a convenient format for communication, so the second phase is otherwise unrelated to the standard DHCP services. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Hence, the PXE protocol is a combination of an extension of DHCP (through the use of several DHCP Option tags) and the definition of simple packet transactions that use the DHCP packet format and options to pass additional information between the client and the server. In this manner, the functionality of existing DHCP services is not disturbed by the operation of the PXE protocol. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In the PXE protocol, DHCP option fields are used to perform the following: (a) distinguish between DHCPDISCOVER and DHCPREQUEST packets sent by a client as part of this extended protocol from other packets that the DHCP server or boot server might receive; (b) distinguish between DHCPOFFER and DHCPACK packets sent by a DHCP or Proxy DHCP server as part of this extended protocol from other packets that the client may receive; (c) convey the client system&apos;s ID (in most cases, the client&apos;s UUID--Universally Unique Identifier) to the DHCP and boot server; (d) convey the client system&apos;s architecture type to the DHCP server and boot server; and (e) convey the boot server type from which the client is requesting a response. Based on any or all of the client network adapter type, system architecture type, and client system ID, the boot server returns to the client the file name (on the server) of an appropriate NBP executable. The client downloads the specified NBP executable into memory and then executes it. As noted above, the functionality within the downloaded NBP is not specified by the PXE protocol. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In summary, the PXE protocol operates as follows. The client initiates the protocol by broadcasting a DHCPDISCOVER containing an extension that identifies the request as coming from a client that implements the PXE protocol. Assuming that a DHCP server or a proxy DHCP server implementing this extended protocol is available, after several intermediate steps, the server sends the client a list of appropriate boot servers. The client then discovers a boot server of the type selected and receives the name of an NBP executable file on the chosen boot server. The client uses TFTP to download the NBP executable from the boot server and then initiates the execution of the downloaded NBP image. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> As should be apparent from the description above, the server-side functionality of the client-server interaction must provide both standard DHCP functionality and redirection of the client to an appropriate boot server. Each PXE-enabled boot server must then have one or more executables appropriate to the clients that it serves. The redirection of the client is generally performed in two ways: (<highlight><bold>1</bold></highlight>) by implementing a combined service with standard DHCP functionality and redirection functionality; or (<highlight><bold>2</bold></highlight>) by implementing both a standard DHCP service with standard DHCP functionality and a separate redirection service with only redirection functionality. In the first case, the DHCP servers that are supplying IP addresses to clients are modified to become (or are replaced by) servers that provide IP addresses for all clients within a network while also redirecting PXE-enabled clients to boot servers as requested. In the second case, PXE redirection servers called &ldquo;Proxy DHCP servers&rdquo; are added to the existing network environment; these servers respond only to PXE-enabled clients and provide only redirection to boot servers. Examples of both of these methodologies are provided below. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2B, a</cross-reference> data flow diagram shows the messages that are passed between a PXE-enabled client and a combined DHCP/Proxy DHCP server and a boot server. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The remote boot process begins with the client broadcasting a DHCPDISCOVER message to the standard DHCP port <highlight><bold>67</bold></highlight> (step <highlight><bold>210</bold></highlight>). An option field in this packet contains: a tag for the client identifier (UUID); a tag for the client UNDI (Universal Network Device Interface) version; a tag for the client system architecture; a DHCP option <highlight><bold>60</bold></highlight>, Class ID, set to &ldquo;PXEClient:Arch:xxxxx:UNDI:yyyzzz&rdquo;. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The DHCP or Proxy DHCP service responds by sending a DHCPOFFER message to the client on the standard DHCP reply port <highlight><bold>68</bold></highlight> (step <highlight><bold>212</bold></highlight>). If a Proxy DHCP service is responding, then the client IP address field is null (0.0.0.0). If a DHCP service is responding, then the returned client IP address field contains a valid IP address. It should be noted that other DHCP services could respond with DHCP offers such that the client receives multiple offers. The DHCPOFFER contains, among other data items, a client IP address and a boot server list in the Boot Server field in the PXE tags of the DHCPOFFER. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Assuming that the client selects an IP address offered by a DHCP service, it then completes the standard DHCP protocol by sending a request (DHCPREQUEST) for the selected address back to the DHCP service (step <highlight><bold>214</bold></highlight>) and waiting for an acknowledgment (DHCPACK) from the service (step <highlight><bold>216</bold></highlight>). </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The client then selects and discovers a boot server by sending a boot service discovery message (step <highlight><bold>218</bold></highlight>) in the appropriate manner as specified in the discovery control options included in the previous DHCPOFFER containing the PXE service extension tags (using port <highlight><bold>67</bold></highlight> if broadcast or port <highlight><bold>4011</bold></highlight> if either multicast or unicast). The boot server unicasts a DHCPACK packet back to the client on the client source port (step <highlight><bold>220</bold></highlight>). The reply packet contains the name of the boot file that the client needs to download. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The client initiates the download of the executable NBP file using either TFTP or MTFTP (step <highlight><bold>222</bold></highlight>); the file to be downloaded and the placement of the downloaded code within memory is dependent on the client&apos;s hardware architecture, its operating system, etc. After the boot server has provided the NBP (step <highlight><bold>224</bold></highlight>), the client can initiate the execution of the NBP (step <highlight><bold>226</bold></highlight>). </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> depicts an implementation of the PXE protocol in which the standard DHCP service has been modified to include the Proxy DHCP service for redirecting the client to the boot server. In contrast, <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> shows an alternative implementation of the PXE protocol in which the standard DHCP service is maintained while a Proxy DHCP service is added that supplies the PXE DHCP options. The Proxy DHCP service may reside on the same server machine as the DHCP service, or it may be located on a separate server; <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> shows the Proxy DHCP service implemented on the same server as the DHCP service. In this case, the Proxy DHCP service is listening to UDP port <highlight><bold>4011</bold></highlight>, and communication with the Proxy DHCP service occurs after completing the standard DHCP protocol. The Proxy DHCP uses port <highlight><bold>4011</bold></highlight> because it cannot share port <highlight><bold>67</bold></highlight> with the DHCP service on the same machine. The PXE client knows to interrogate the Proxy DHCP service because the DHCPOFFER from the DHCP service contains an Option &num;<highlight><bold>60</bold></highlight> &ldquo;PXEClient&rdquo; tag without corresponding Option &num;<highlight><bold>43</bold></highlight> tags or a boot file name that the client requires to complete the PXE boot process. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In contrast to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>B and <cross-reference target="DRAWINGS">FIG. 2</cross-reference>C, <cross-reference target="DRAWINGS">FIG. 2D</cross-reference> depicts an implementation of a Proxy DHCP service on a server separate from the DHCP service. In this case, since the services are implemented on different machines, the Proxy DHCP service can listen on UDP port <highlight><bold>67</bold></highlight> and responds in parallel with the DHCP service. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Turning to remote boot processes in general, as noted previously, a server-managed client architecture increases the reliance of clients upon the boot server for their ability to operate. By extension, the mission-critical computational tasks of the enterprise are also more reliant upon having the boot server maintain a minimum quality of service. For instance, during failure recovery after a power failure or some other type of widespread system outage, a large number of clients will need to be remote booted almost simultaneously. It would be desirable in some distributed computing environments to assure that the clients can complete the remote boot process within a specified time constraint, thereby imposing both availability and performance constraints on the remote boot infrastructure. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In order to provide this and other advantages, the present invention is directed to a load-balanced, performance-sensitive solution that ensures that the clients can complete the remote boot process with a minimum required quality of service over a wide range of operating conditions within the remote boot infrastructure. The present invention is explained below in more detail with reference to the remaining figures. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> A portion of the solution provided by the present invention includes the provision of a sufficient number of alternate, i.e. redundant, boot servers in the remote boot infrastructure so that a minimum quality of service for the remote boot can be maintained for all clients over a foreseeable range of operating conditions. However, simply deploying multiple boot servers would not solve many other problems that might appear during remote boot operations. For instance, it would be advantageous for the remote boot infrastructure to assure that a client can always locate a boot server that can provide its specific software environment with at least a minimum specified quality of service. The determination of the number of alternate boot servers to accomplish the desired quality of service is not further discussed herein. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In addition, a portion of the solution provided by the present invention would assure that any boot server that can respond to a boot request from a client is able to supply that client&apos;s specific software environment. This requires an administrative process that assures that a software environment definition for a specific client is copied to all boot servers. This process does not require compliance with the remote boot processes of clients and can be implemented entirely within the administrative control of the server environment; this administrative process is not further discussed herein. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> More importantly, the present invention assures that a client is directed to a boot server if and only if that boot server can adequately service the remote boot of the client with a minimum quality of service, thereby assuring that the client can select an appropriate boot server to complete the remote boot process. This portion of the solution entails compliance with the remote boot environments that are implemented as instructions in the nonvolatile memory of clients. Administrators are not likely to have control of these client remote boot environments because they are provided as hardware or firmware by vendors of network interfaces for client machines. Hence, the present invention is compatible with standard client remote boot environments, and, in particular, the relevance of a PXE-enabled network environment is explained in more detail below with respect to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> data flow diagram shows a series of actions between a client and a DHCP/PXE proxy server in accordance with a preferred embodiment of the present invention. Client <highlight><bold>302</bold></highlight> has a network interface that supports the PXE specification. The PXE specification in the Intel&reg; Wired for Management (WfM) initiative, previously discussed in more detail above, is a standard client remote boot environment that has gained wide acceptance among vendors of client network interfaces that support Internet Protocol (IP) networks. IP networks have become very common in distributed enterprise computing environments because IP is an open, rather than proprietary, protocol that is implemented on both local area networks (LANs) and wide area networks (WANs). IP is also supported by a large number of computer communications devices. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> At some point in time, client <highlight><bold>302</bold></highlight> is powered-on or otherwise restarted in a manner that requires it to perform a remote boot operation. At this time, client <highlight><bold>302</bold></highlight> is executing code within its PXE ROM. PXE-enabled client <highlight><bold>302</bold></highlight> initiates the remote boot process by broadcasting a DHCP Discover message (step <highlight><bold>306</bold></highlight>). This message contains a unique identifier of the client, and the packet indicates that the client needs to be assigned an IP address so that it can perform all subsequent point-to-point, network-wide communications. This packet also indicates that the client implements PXE and needs to be directed to a boot server to complete a remote boot operation. The PXE support in the client waits briefly so that it can receive one or more responses before choosing a response. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In this example, server <highlight><bold>304</bold></highlight> responds to the DHCP Discover message from client <highlight><bold>302</bold></highlight>. Server <highlight><bold>304</bold></highlight> returns a DHCP/PXE Proxy Offer message (step <highlight><bold>308</bold></highlight>) which offers an IP address to the client and indicates an IP address of a central boot server that provides PXE Boot Server Discovery service. The significance of the central boot server is discussed in more detail further below. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Client <highlight><bold>302</bold></highlight> responds with a DHCP Request message (step <highlight><bold>310</bold></highlight>) that requests the IP address offered to client <highlight><bold>302</bold></highlight> by server <highlight><bold>304</bold></highlight>, which essentially is an acceptance of the offered IP address. Server <highlight><bold>304</bold></highlight> then responds with a DHCP Ack message (step <highlight><bold>312</bold></highlight>), which confirms the assignment of the IP address to client <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> After receiving the DHCP Ack message, client <highlight><bold>302</bold></highlight> ceases communication with server <highlight><bold>304</bold></highlight> with respect to the DHCP-related operations. Client <highlight><bold>302</bold></highlight> may communicate with server <highlight><bold>304</bold></highlight> at some later point in time with respect to other services. In this example, client <highlight><bold>302</bold></highlight> performs the remaining remote boot operations with servers that are physically distinct from server <highlight><bold>304</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> It should be noted that the configuration of the DHCP/PXE Proxy server is not limited to an implementation on a single machine as represented in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The &ldquo;standard&rdquo; DHCP service (which offers IP addresses to clients) and the &ldquo;proxy&rdquo; DHCP service (which directs clients to a PXE Boot Server Discovery service) can be located on separate machines. In such a case, there will be two separate communications in place of step <highlight><bold>308</bold></highlight> above: a &ldquo;standard&rdquo; DHCP offer which offers an IP address to the client; and a &ldquo;proxy&rdquo; DHCP offer which directs the client to a PXE Boot Server Discovery service. In addition, the communications depicted in steps <highlight><bold>310</bold></highlight> and <highlight><bold>312</bold></highlight> above would occur between the client and the &ldquo;standard&rdquo; DHCP service only. In fact, any of the configurations described in Intel Corp.&apos;s <highlight><italic>Preboot Execution Environment </italic></highlight>(<highlight><italic>PXE</italic></highlight>) <highlight><italic>Specification, Version </italic></highlight>2.1, and illustrated in FIGS. <highlight><bold>2</bold></highlight>B-<highlight><bold>2</bold></highlight>D, or any other specification of initial boot operations, could be used for this invention as long as the client can receive an IP address and by directed to a central boot server, i.e. a boot direction service. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> It should also be noted that there may be more than one instance of a &ldquo;standard&rdquo; DHCP service, of a &ldquo;proxy&rdquo; DHCP service, and/or of a &ldquo;combined&rdquo; DHCP service, i.e. a DHCP service that does both by offering an IP address to the client and directing the client to a Boot Discovery service, within the range of the client&apos;s DHCP Discover broadcast. This can be accomplished by placing the instances of these DHCP services on machines located in the same subnetwork as the client, and/or by configuring network gateways and routers to forward the client&apos;s DHCP Discover broadcasts to DHCP services on machines located in other subnetworks. In this regard, client <highlight><bold>302</bold></highlight> and server <highlight><bold>304</bold></highlight> are similar to client <highlight><bold>402</bold></highlight> and server <highlight><bold>408</bold></highlight> described with respect to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> below. Having more than one instance of these DHCP services can provide redundancy in case any one instance of these DHCP services becomes unable to respond to the client. If the client receives more than one &ldquo;standard&rdquo;, &ldquo;proxy&rdquo; or &ldquo;combined&rdquo; DHCP/PXE Proxy offer, it will select only one IP address for its use, and will select only one Central Boot Server IP address to be directed to. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> block diagram depicts a client-server configuration for performing a remote boot operation in accordance with the present invention. Clients <highlight><bold>402</bold></highlight> and <highlight><bold>404</bold></highlight> perform remote boot operations via network <highlight><bold>406</bold></highlight>. DHCP/PXE proxy server <highlight><bold>408</bold></highlight> provides a combined DHCP/PXE proxy service, while DHCP server <highlight><bold>410</bold></highlight> provides only DHCP services and PXE proxy server <highlight><bold>412</bold></highlight> provides only PXE proxy service. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> As noted above, there may be more than one instance of a &ldquo;standard&rdquo; DHCP service, of a &ldquo;proxy&rdquo; DHCP service, and/or of a &ldquo;combined&rdquo; DHCP service within the network. In that regard, network <highlight><bold>406</bold></highlight> may support multiple instances of DHCP servers, multiple instances of PXE proxy servers, and multiple instances of DHCP/PXE proxy servers. In prior art implementations of the PXE protocol, an instance of a PXE proxy service may supply a list of one or more boot servers in the DHCP Offer message. In contrast, in the present invention, each instance of the PXE proxy service is configured to &ldquo;redirect&rdquo; the client to a central boot server. In other words, each instance of the PXE proxy service is configured to provide a boot server list in the DHCP Offer message that contains a single, central boot server. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Central boot server <highlight><bold>414</bold></highlight> provides PXE boot server discovery service, and alternate boot servers <highlight><bold>416</bold></highlight>-<highlight><bold>422</bold></highlight> provide additional services needed to boot clients. Central boot server <highlight><bold>414</bold></highlight> comprises PXE Boot Server Discovery service <highlight><bold>430</bold></highlight> for responding to Boot Service Discover messages from clients. TFTP service <highlight><bold>432</bold></highlight> responds to TFTP requests from clients, such as a request for initial NBP file <highlight><bold>434</bold></highlight>. Central boot server daemon <highlight><bold>436</bold></highlight> maintains list <highlight><bold>438</bold></highlight> of IP addresses of alternate boot servers. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Each instance of alternate boot servers <highlight><bold>416</bold></highlight>-<highlight><bold>422</bold></highlight> comprises TFTP service <highlight><bold>442</bold></highlight> for responding to TFTP requests from clients, such as requests for client boot files <highlight><bold>444</bold></highlight>, which may be operating system files, application files, configuration files, or other types of files. Boot service monitor daemon <highlight><bold>446</bold></highlight> performs certain types of monitoring functions on an alternate boot server. Additional details of the operations of central boot server <highlight><bold>414</bold></highlight> and alternate boot servers <highlight><bold>416</bold></highlight>-<highlight><bold>422</bold></highlight> are provided below. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 5A, a</cross-reference> data flow diagram shows a series of actions between a client and a central boot server in accordance with a preferred embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> should be interpreted as depicting a sequence of steps that occurs immediately following the sequence of steps that are depicted within <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, and client <highlight><bold>502</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is identical to client <highlight><bold>302</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, client <highlight><bold>302</bold></highlight> was provided with an IP address of a central boot server that provides PXE Boot Server Discovery service; in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, central boot server <highlight><bold>504</bold></highlight> owns the provided IP address. Hence, client <highlight><bold>502</bold></highlight> communicates with central boot server <highlight><bold>504</bold></highlight> to continue with its remote boot operations. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Client <highlight><bold>502</bold></highlight> sends Boot Service Discover message to central boot server <highlight><bold>504</bold></highlight> (step <highlight><bold>506</bold></highlight>), which requests the IP address of a instance of a TFTP service for requesting an initial NBP. It should be noted that, in order to provide redundancy, there may be more than a single instance of &ldquo;a central boot server&rdquo; that is running a PXE Boot Server Discovery service. It is possible to configure network devices, such as gateways, routers, and servers, to redirect the client-originated Boot Server Discover packets originally directed to the IP address of a &ldquo;primary&rdquo; central boot server machine that has failed so that a &ldquo;backup&rdquo; central boot server machine can receive and process them. In this manner, it is not necessary to change the configuration of the DHCP/PXE proxy servers in the event that the &ldquo;primary&rdquo; central boot server machine fails. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Central boot server <highlight><bold>504</bold></highlight> responds with a Boot Service Ack message (step <highlight><bold>508</bold></highlight>) that indicates the IP address of central boot server <highlight><bold>504</bold></highlight> and also indicates the file name of the initial NBP. In other words, the PXE Boot Server Discovery service on the central boot server points the client to an instance of the TFTP service on the same central boot server. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Client <highlight><bold>502</bold></highlight> sends a TFTP Request message (step <highlight><bold>510</bold></highlight>) to central boot server <highlight><bold>504</bold></highlight> to request the initial NBP, and central boot server <highlight><bold>504</bold></highlight> then responds with a TFTP transfer of the initial NBP file (step <highlight><bold>512</bold></highlight>). After receiving the initial NBP file, the PXE ROM code within client <highlight><bold>502</bold></highlight> transfers execution to the initial NBP. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The initial network bootstrap program is configured to perform the following operations. Under the execution control of the initial NBP, client <highlight><bold>502</bold></highlight> sends a TFTP Request message (step <highlight><bold>514</bold></highlight>) to central boot server <highlight><bold>504</bold></highlight> to request a file containing a list of alternate boot servers. The alternate boot server list file is a small text file with a simple syntax for listing alternate boot server addresses; the data format of the file may vary depending on the implementation of the invention. In response, central boot server <highlight><bold>504</bold></highlight> performs a TFTP transfer of the alternate boot server list file (step <highlight><bold>516</bold></highlight>). The manner in which central boot server <highlight><bold>504</bold></highlight> generates or maintains the alternate boot server list file is described in more detail further below. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> After receiving the alternate boot server list file, client <highlight><bold>502</bold></highlight> ceases communication with central boot server <highlight><bold>504</bold></highlight> with respect to its remote boot operations. Preferably, client <highlight><bold>502</bold></highlight> does not further communicate with central boot server <highlight><bold>504</bold></highlight> because it is assumed that central boot server <highlight><bold>504</bold></highlight> is dedicated to performing certain duties as a central boot server. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Client <highlight><bold>502</bold></highlight> selects an alternate boot server from the alternate boot server list. The selected alternate boot server may be similar to alternate boot server <highlight><bold>422</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; client <highlight><bold>502</bold></highlight> does not communicate with the other alternate boot servers in the alternate boot server list unless the selected boot server does not respond to requests for files. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 5B, a</cross-reference> data flow diagram shows a series of actions between a client and an alternate boot server in accordance with a preferred embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> should be interpreted as depicting a sequence of steps that occurs immediately following the sequence of steps that are depicted within <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, and client <highlight><bold>502</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is identical to client <highlight><bold>502</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, client <highlight><bold>502</bold></highlight> was provided with a list of IP addresses of alternate boot servers; in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>B, alternate boot server <highlight><bold>524</bold></highlight> owns the selected IP address. Hence, in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>B, client <highlight><bold>502</bold></highlight> is still under the execution control of the initial NBP, and client <highlight><bold>502</bold></highlight> communicates with alternate boot server <highlight><bold>524</bold></highlight> to continue with its remote boot operations. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Client <highlight><bold>502</bold></highlight> sends TFTP Request message to alternate boot server <highlight><bold>524</bold></highlight> (step <highlight><bold>526</bold></highlight>), which requests a configuration file for client <highlight><bold>502</bold></highlight>. In response, alternate boot server <highlight><bold>524</bold></highlight> performs a TFTP transfer of the requested configuration file (step <highlight><bold>528</bold></highlight>). The configuration file comprises a list of additional files that client <highlight><bold>502</bold></highlight> requires to complete its remote boot operation; the configuration file may be a generic configuration file for a class of client computers, or the configuration file may be specifically configured for client <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Client <highlight><bold>502</bold></highlight> then generates additional requests for the remaining boot files using TFTP or perhaps other protocols (step <highlight><bold>530</bold></highlight>). In response, alternate boot server <highlight><bold>524</bold></highlight> transfers the remaining boot files (step <highlight><bold>532</bold></highlight>), and client <highlight><bold>502</bold></highlight> then continues its boot process from the transferred files stored at the client. After receiving the additional boot files, client <highlight><bold>502</bold></highlight> ceases communication with server <highlight><bold>524</bold></highlight>, although client <highlight><bold>502</bold></highlight> may subsequently communicate with server <highlight><bold>524</bold></highlight> with respect to other services. In this example, it may be assumed that server <highlight><bold>524</bold></highlight> is dedicated to providing the boot service. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> As should be apparent from the description of FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>B, the present invention relies on the formation and distribution of a list of alternate boot servers to ensure that the remote boot service is load-balanced across a set of alternate boot servers. The maintenance of the list of alternate boot servers is explained in more detail below with respect to the descriptions of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> flowchart depicts a method to be used by a boot service monitor daemon in accordance with a preferred embodiment of the present invention. Referring again to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, alternate boot server <highlight><bold>422</bold></highlight> includes boot service monitor daemon <highlight><bold>446</bold></highlight>, which executes on each alternate boot server. The operation of the boot service monitor daemon loops through a series of steps as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Although it may be assumed that the daemon is never halted, an appropriate mechanism may be implemented for terminating the daemon if necessary. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The process starts with the boot service monitor daemon monitoring the server load using an appropriate server load algorithm to determine various load values (step <highlight><bold>602</bold></highlight>). The boot service monitor daemon then reports the load factor values to the central boot server (step <highlight><bold>604</bold></highlight>). The load factor values represent execution load information at the reporting alternate boot server. The form of the execution load information may vary depending upon the implementation and may be contained within a message, a data file, or any other form of a dataset. After optionally waiting for a configurable time delay interval (step <highlight><bold>606</bold></highlight>), the boot service monitor daemon then loops through the series of steps again. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> For example, the server load algorithm within the boot service monitor daemon could consider several factors within the boot server: the total number of current remote boot requests that are already being serviced by the daemon&apos;s boot server; the expected remaining duration of each remote boot request that is already being serviced; the estimated server load, e.g., in terms of CPU usage and memory utilization, to remote boot different types of client operating systems; the current trends of CPU usage and memory utilization within the boot server; and/or other factors. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> flowchart depicts a method to be used by a boot service monitor daemon in accordance with a preferred embodiment of the present invention. Referring again to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, central boot server <highlight><bold>414</bold></highlight> includes central boot server daemon <highlight><bold>436</bold></highlight>, which executes on the central boot server. The operation of the central boot server daemon loops through a series of steps as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Although it may be assumed that the daemon is never halted, an appropriate mechanism may be implemented for terminating the daemon if necessary. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> If there is a &ldquo;primary&rdquo; central boot server and one or more &ldquo;backup&rdquo; central boot servers, then the central boot server daemon executes on the &ldquo;primary&rdquo; central boot server and the &ldquo;backup&rdquo; central boot servers. In this case, each instance of the boot service monitor daemon on the multiple alternate boot servers reports its data to multiple instances of the central boot server daemon. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The process starts with the central boot server daemon waiting to receive server load values from any one of the boot service monitor daemons that is operating on the alternate boot servers (step <highlight><bold>702</bold></highlight>). The daemon then reorders the list of alternate boot servers as appropriate (step <highlight><bold>704</bold></highlight>) and stores the list for subsequent distribution to clients upon request (step <highlight><bold>706</bold></highlight>). </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The central boot server dynamically maintains the list of alternate boot server addresses. The order of the alternate boot server addresses on this list is updated and re-ordered by the central boot server daemon using its own algorithm with various inputs. In addition to the load factor values reported by each alternate boot server that indicate the current status of the availability and the loading of an alternate boot server, the central boot server daemon may also have access to data provided by other services, such as an indication of the current load status of the network or various subnetworks. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Preferably, the address of the alternate boot server that can most efficiently service the next received client computer boot request appears first on the list with the other alternate boot server addresses following in order of decreasing efficiency with which they can service a client request. As mentioned above in the description of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, after step <highlight><bold>516</bold></highlight> in which the client receives the file containing the list of alternate boot server addresses, the client selects an alternate boot server address. It may be assumed that the client selects the first address on the list, but it is not necessary. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The advantages of the present invention should be apparent in view of the detailed description of the invention that is provided above. In the prior art, a typical PXE-compliant remote boot implementation has the disadvantage of being static in nature because of the configuration of the PXE support on the client and of the configurations of the DHCP server services and other remote boot support services on the boot servers. These typical configurations cannot be changed dynamically in response to changing boot server quality of service conditions. For example, it is possible for the boot services on a boot server to continue to operate and send responses that direct clients to that same boot server even though other services on the boot server that are required to complete the remote boot of clients have failed or have had their quality of service degraded below an acceptable level by severe server processing loads. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Hence, the present invention provides a method and system for a performance-sensitive remote boot solution that can dynamically respond to changes in the quality of service provided by each of multiple redundant boot servers. When a client machine makes a boot request on the network, the boot servers that have spare capacity to service the boot request will be preferentially indicated to the client. Boot servers that are relatively overloaded are concurrently de-emphasized, thereby discouraging a client from attempting to boot from a boot server from which it will receive slow service. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The present invention uses a small text file with a simple syntax for indicating a list of alternate boot server addresses that is maintained by a daemon on a central boot server. The central boot server daemon interprets boot server status information to determine the most efficient ordering of the addresses on the list. The ordering can be changed by simply rewriting or replacing the text file so that the next client remote boot request receives the new order. The central boot server needs to send only the small initial bootstrap program file and the alternate boot server list file to a client computer. The bulk of the boot files are sent by the alternate boot servers, and the significant workload of serving those files is efficiently distributed among the alternate boot servers. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> With the present invention, no configuration requirements are placed on the client computers. In addition, boot direction services have a minimal initial configuration requirement whereby clients are directed to the central boot server, and the boot direction service does not need to be changed when network or boot server conditions change. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The present invention also avoids the need to physically collocate a boot server in the same subnetwork with each subset of client computers because of limitations which may be imposed by the inability to route client boot request broadcasts between subnetworks. This minimizes the need to reconfigure the network or physically move computers to meet network requirements as the population of client computers and server computers changes. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of instructions in a computer readable medium and a variety of other forms, regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include media such as EPROM, ROM, tape, paper, floppy disc, hard disk drive, RAM, and CD-ROMs and transmission-type media, such as digital and analog communications links. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The description of the present invention has been presented for purposes of illustration but is not intended to be exhaustive or limited to the disclosed embodiments. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiments were chosen to explain the principles of the invention and its practical applications and to enable others of ordinary skill in the art to understand the invention in order to implement various embodiments with various modifications as might be suited to other contemplated uses. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method at a server for facilitating a remote boot process at a client, wherein the client and the server reside on a network, the method comprising the steps of: 
<claim-text>receiving, at the server, a dataset of load information associated with an execution load at a boot server; </claim-text>
<claim-text>in response to receiving the dataset of load information, ordering a list of multiple boot server addresses based on the received dataset of load information and based on previously received datasets of load information; </claim-text>
<claim-text>receiving, at the server, a first file transfer request initiated by a remote boot process at the client; </claim-text>
<claim-text>in response to receiving the first file transfer request, sending a file comprising the ordered list of multiple boot server addresses to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising, prior to the step of receiving the first file transfer request: 
<claim-text>receiving, at the server, a boot service discover message from the client; and </claim-text>
<claim-text>in response to receiving the boot service discover message, sending a boot service acknowledgment message to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising, prior to the step of receiving the first file transfer request: 
<claim-text>receiving, at the server, a second file transfer request from the client; and </claim-text>
<claim-text>in response to receiving the second file transfer request, sending an initial network bootstrap program to the client, wherein the initial network bootstrap program, when executed at the client, generates the first file transfer request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method at a server for facilitating a remote boot process at a client, wherein the client and the server reside on a network, the method comprising the steps of: 
<claim-text>receiving, at the server, a boot file transfer request initiated by a remote boot process at the client; </claim-text>
<claim-text>in response to receiving the boot file transfer request, sending a file to the client; </claim-text>
<claim-text>monitoring an execution load at the server; </claim-text>
<claim-text>generating a dataset containing load information associated with the execution load at the server; and </claim-text>
<claim-text>sending the generated dataset to another server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. An apparatus for facilitating a remote boot process at a client on a network, the apparatus comprising: 
<claim-text>first receiving means for receiving a dataset of load information associated with an execution load of a boot server; </claim-text>
<claim-text>ordering means for ordering, in response to receiving the dataset of load information, a list of multiple boot server addresses based on the received dataset of load information and based on previously received datasets of load information; </claim-text>
<claim-text>second receiving means for receiving a first file transfer request initiated by a remote boot process at the client; </claim-text>
<claim-text>first sending means for sending, in response to receiving the first file transfer request, a file comprising the ordered list of multiple boot server addresses to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> further comprising: 
<claim-text>third receiving means for receiving a boot service discover message from the client; and </claim-text>
<claim-text>second sending means for sending a boot service acknowledgment message to the client in response to receiving the boot service discover message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> further comprising: 
<claim-text>fourth receiving means for receiving a second file transfer request from the client; and </claim-text>
<claim-text>third sending means for sending an initial network bootstrap program to the client in response to receiving the second file transfer request, wherein the initial network bootstrap program, when executed at the client, generates the first file transfer request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A data processing system for facilitating a remote boot process on a network, the data processing system comprising: 
<claim-text>first receiving means for receiving, at a first server, a dataset of load information associated with an execution load of a second server; </claim-text>
<claim-text>ordering means for ordering at the first server, in response to receiving the dataset of load information, a list of multiple boot server addresses based on the received dataset of load information and based on previously received datasets of load information; </claim-text>
<claim-text>second receiving means for receiving at the first server a first file transfer request initiated by a remote boot process at a client; </claim-text>
<claim-text>first sending means for sending, in response to receiving the first file transfer request, a file comprising the ordered list of multiple boot server addresses to the client from the first server. </claim-text>
<claim-text>third receiving means for receiving at the second server a boot file transfer request from the client; </claim-text>
<claim-text>second sending means for sending a file to the client in response to receiving the boot file transfer request; </claim-text>
<claim-text>monitoring means for monitoring an execution load at the second server; </claim-text>
<claim-text>generating means for generating a dataset containing load information associated with the execution load at the second server; and </claim-text>
<claim-text>third sending means for sending the generated dataset to the first server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A computer program product on a computer readable medium for use in a server for facilitating a remote boot process at a client, wherein the client and the server reside on a network, the computer program product comprising: 
<claim-text>instructions for receiving, at the server, a dataset of load information associated with an execution load at a boot server; </claim-text>
<claim-text>instructions for ordering, in response to receiving the dataset of load information, a list of multiple boot server addresses based on the received dataset of load information and based on previously received datasets of load information; </claim-text>
<claim-text>instructions for receiving, at the server, a first file transfer request initiated by a remote boot process at the client; </claim-text>
<claim-text>instructions for sending, in response to receiving the first file transfer request, a file comprising the ordered list of multiple boot server addresses to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising: 
<claim-text>instructions for receiving, at the server, a boot service discover message from the client; and </claim-text>
<claim-text>instructions for sending, in response to receiving the boot service discover message, a boot service acknowledgment message to the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> further comprising: 
<claim-text>instructions for receiving, at the server, a second file transfer request from the client; and </claim-text>
<claim-text>instructions for sending, in response to receiving the second file transfer request, an initial network bootstrap program to the client, wherein the initial network bootstrap program, when executed at the client, generates the first file transfer request.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005096A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005096A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005096A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005096A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005096A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005096A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005096A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005096A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
