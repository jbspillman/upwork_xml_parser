<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005335A1-20030102-D00000.TIF SYSTEM "US20030005335A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00001.TIF SYSTEM "US20030005335A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00002.TIF SYSTEM "US20030005335A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00003.TIF SYSTEM "US20030005335A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00004.TIF SYSTEM "US20030005335A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00005.TIF SYSTEM "US20030005335A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00006.TIF SYSTEM "US20030005335A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005335A1-20030102-D00007.TIF SYSTEM "US20030005335A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005335</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894473</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/32</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>202000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Protecting secured codes and circuits in an integrated circuit</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Hidekazu</given-name>
<family-name>Watanabe</family-name>
</name>
<residence>
<residence-us>
<city>San Diego</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A security access system for an integrated circuit (IC) is disclosed. The system includes an access code generator and a security portal. The access code generator generates a key code that allows access to secured portions of the IC through a debug module in the IC. The security portal receives the key code from the access code generator, and allows access to the debug module if the key code matches a pre-stored code in the security portal. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to an integrated circuit, and more particularly, to protecting secured codes and circuits in such an integrated circuit. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> It is often necessary in areas of electronic data processing to protect secret information or circuit from unauthorized access. However, in designing integrated circuits (IC), protection of these secret information or circuit may not be a priority task. This is because the information, the circuit, and the bus that carries the information are all internal to a chip or a board. Access to memories or other peripherals within the chip would normally go through a security apparatus in the chip/board. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> If the IC includes a central processing unit (CPU), a digital signal processor (DSP), or other microprocessors, the IC may provide a debug function on these processors to develop software. Thus, the debug function provides access to the entire peripherals or memories. Accordingly, the debug function on the processor may provide unauthorized &ldquo;back-door&rdquo; access to the secret information or circuit. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In one aspect, a security access system for an integrated circuit (IC) is disclosed. The system includes an access code generator and a security portal. The access code generator generates a key code that allows access to secured portions of the IC through a debug module in the IC. The security portal receives the key code from the access code generator, and allows access to the debug module if the key code matches a pre-stored code in the security portal. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In another aspect, an integrated circuit (IC) system is disclosed. The IC system includes a debugging tool, a processor, a plurality of peripheral device, a debug module, an access code generator, and a security portal. The peripheral devices may include secured portions, which may comprise secret codes or circuits. The debug module is coupled to the processor, and is arranged to receive commands from the debugging tool and to send data according to the commands. The access code generator generates a key code. The security portal is disposed between the debug module and the debugging tool. The security portal allows the commands from the debugging tool to pass to the debug module only when the key code from the access code generator matches an internally stored code in the security portal, such that the security portal operates to provide debugging tool with authorized access to the secured portions. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In a further aspect, a method for accessing secured portions of an integrated circuit (IC) through a debug module is disclosed. The method includes receiving a key code, determining if the received key code is correct, and enabling access to the debug module if a match is made. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a typical layout of a conventional integrated circuit including at least a central processing unit (CPU) and a debug module. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a more detailed diagram of a debug module and a debugger. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a security portal disposed between the debugger and the debug module in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows one implementation of the security portal design shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows an alternative implementation of the security portal design shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a timing diagram of a security access process. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of the security access process according to an embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In recognition of the above-stated problem with the prior design of the integrated circuit (IC), the present invention describes embodiments for providing a security portal for debugging tools to enable only authorized access to the debug module in the IC. Consequently for purposes of illustration and not for purposes of limitation, the exemplary embodiments of the invention are described in a manner consistent with such use, though clearly the invention is not so limited. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a typical layout of a conventional integrated circuit <highlight><bold>100</bold></highlight> including at least a central processing unit (CPU) <highlight><bold>104</bold></highlight> and a debug module <highlight><bold>102</bold></highlight>. In some cases, the debug module <highlight><bold>102</bold></highlight> may reside within the CPU <highlight><bold>104</bold></highlight>. The circuit <highlight><bold>100</bold></highlight> may also include a program memory <highlight><bold>106</bold></highlight>, which may include secret codes. The circuit <highlight><bold>100</bold></highlight> may further include a data memory <highlight><bold>108</bold></highlight>, a secured peripheral device <highlight><bold>110</bold></highlight>, and other peripherals <highlight><bold>112</bold></highlight>. The devices and memories <highlight><bold>104</bold></highlight>-<highlight><bold>112</bold></highlight> may be connected through a bus <highlight><bold>114</bold></highlight>. The debug module <highlight><bold>102</bold></highlight> provides the debugging tool <highlight><bold>120</bold></highlight> with access to the CPU <highlight><bold>104</bold></highlight> through a debug port <highlight><bold>116</bold></highlight> in the IC <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> A more detailed diagram of the debug module <highlight><bold>102</bold></highlight> and the debugger <highlight><bold>120</bold></highlight> is shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The diagram also illustrates information exchange between the debug module <highlight><bold>102</bold></highlight> and the debugger <highlight><bold>120</bold></highlight> through the debug port <highlight><bold>116</bold></highlight>. In the illustrated example, the debugger <highlight><bold>120</bold></highlight> sends a command to access memory or peripheral to the debug module <highlight><bold>102</bold></highlight>, and the module <highlight><bold>102</bold></highlight> responds with data. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a security portal <highlight><bold>300</bold></highlight> disposed between the debugger <highlight><bold>302</bold></highlight> and the debug module <highlight><bold>304</bold></highlight> in accordance with an embodiment of the present invention. The security portal <highlight><bold>300</bold></highlight> is arranged in a configuration that allows access to the debug module <highlight><bold>304</bold></highlight> only when an access code <highlight><bold>306</bold></highlight> that matches the pre-stored code is received at the portal <highlight><bold>300</bold></highlight>. Thus, this design prevents unauthorized access to the debug module <highlight><bold>304</bold></highlight>, and subsequently, to the secret code or circuit in the peripheral devices. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One implementation of the security portal design <highlight><bold>400</bold></highlight> (described in conjunction with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) is shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In the illustrated embodiment, the security portal <highlight><bold>400</bold></highlight> includes an AND gate <highlight><bold>408</bold></highlight> and a key matching circuit <highlight><bold>410</bold></highlight>. Moreover, the access code circuit <highlight><bold>306</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) is implemented with a key generator circuit <highlight><bold>406</bold></highlight>. In one embodiment, the key matching circuit <highlight><bold>410</bold></highlight> may be implemented with a comparator, while the key generator circuit <highlight><bold>406</bold></highlight> may be implemented with shift registers and/or counters. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> When the debugger <highlight><bold>402</bold></highlight> sends a command to the debug module <highlight><bold>404</bold></highlight>, the AND gate <highlight><bold>408</bold></highlight> in the security portal <highlight><bold>400</bold></highlight> intercepts the command and does not release the command until an enable signal is received from the key matching circuit <highlight><bold>410</bold></highlight>. While the security portal <highlight><bold>400</bold></highlight> is in a reset mode, the enable signal stays de-asserted, at logic low level. This keeps the output of the AND gate <highlight><bold>408</bold></highlight> also de-asserted to prevent the debugger commands from reaching the debug module <highlight><bold>404</bold></highlight>, and thus, prevent the debugger <highlight><bold>402</bold></highlight> from obtaining unauthorized access to the secret code or circuit. When the key generator <highlight><bold>406</bold></highlight> supplies a key that matches a pre-stored internal key in the key matching circuit <highlight><bold>410</bold></highlight>, the key matching circuit <highlight><bold>410</bold></highlight> generates the enable signal. For example, if the pre-stored internal key code is set to &lsquo;01011010&rsquo;, the key matching circuit <highlight><bold>410</bold></highlight> generates the enable signal only when the key generator <highlight><bold>406</bold></highlight> supplies the same serial code &lsquo;01011010&rsquo; to the key matching circuit <highlight><bold>410</bold></highlight>. This enables the debug command to reach the debug module <highlight><bold>404</bold></highlight>, and hence, the secured portions of the IC. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> An alternative embodiment of the security portal <highlight><bold>500</bold></highlight> is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. This embodiment provides an additional layer of security by adding a reset timer <highlight><bold>508</bold></highlight> to the design of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In the illustrated embodiment, the security portal <highlight><bold>500</bold></highlight> includes a first AND gate <highlight><bold>502</bold></highlight> and a key matching circuit <highlight><bold>504</bold></highlight> similar to those shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. However, the security portal <highlight><bold>500</bold></highlight> of the present embodiment further includes a second AND gate <highlight><bold>504</bold></highlight> and a reset timer <highlight><bold>508</bold></highlight>. The reset timer <highlight><bold>508</bold></highlight> sets a window of time period within which the matching key must be supplied by the key generator <highlight><bold>510</bold></highlight>. Thus, the reset timer <highlight><bold>508</bold></highlight> provides a key unlock time window starting at a system reset point. In one embodiment, the reset timer <highlight><bold>508</bold></highlight> may be implemented with a flip-flop. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> If a correct key code is supplied to the second AND gate <highlight><bold>506</bold></highlight> within the time window, an enable signal is then sent to the first AND gate <highlight><bold>502</bold></highlight> to enable the debug command. Otherwise, if a correct key code is not supplied within that time window, the reset timer <highlight><bold>508</bold></highlight> prevents the key matching circuit <highlight><bold>504</bold></highlight> from issuing an enable signal by triggering a key lock signal to the second AND gate <highlight><bold>506</bold></highlight>. Therefore, even if a correct key code is supplied to the second AND gate <highlight><bold>506</bold></highlight>, if the key code arrives after the time window set up by the reset timer <highlight><bold>508</bold></highlight>, the debug command will not be enabled. Accordingly, this embodiment prevents unauthorized access to the secured portions of the IC chip by supplying a series of key code sequences until a key code matches the pre-stored key. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the above-described process in a timing diagram. A reset signal <highlight><bold>600</bold></highlight> received by the reset timer <highlight><bold>508</bold></highlight> starts a key unlock time window <highlight><bold>602</bold></highlight> by triggering a key lock signal <highlight><bold>604</bold></highlight>. If a correct key code <highlight><bold>606</bold></highlight> is received by the second AND gate <highlight><bold>506</bold></highlight> within the key unlock time window <highlight><bold>602</bold></highlight>, an enable signal <highlight><bold>608</bold></highlight> is sent to the first AND gate <highlight><bold>502</bold></highlight>. Moreover, the enable signal <highlight><bold>608</bold></highlight> enables the debug command to pass to the debug module <highlight><bold>510</bold></highlight>. The length of the key unlock time window may be appropriately adjusted to allow sufficient time to enter the correct key code. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of the security access process according to an embodiment of the present invention. The process enables only authorized access to the debug module. The process includes issuing a reset command to start a key unlock time window, at <highlight><bold>700</bold></highlight>. If a correct key code is received (at <highlight><bold>702</bold></highlight>), the security portal is unlocked, at <highlight><bold>704</bold></highlight>, and the debug command is enabled, at <highlight><bold>706</bold></highlight>. In an alternative embodiment, the correct key code must be received within the key unlock time window (at <highlight><bold>702</bold></highlight>) to unlock the security portal and enable the debug command. Otherwise, if a correct key code is not received, the security portal is locked, at <highlight><bold>708</bold></highlight>, and the debug command is disabled at <highlight><bold>710</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> There has been disclosed herein embodiments for providing a security portal for debugging tools to gain authorized access to the debug module in the IC. The access authorization is performed by the security portal by verifying that the correct key code is received within the key unlock time window. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> While specific embodiments of the invention have been illustrated and described, such descriptions have been for purposes of illustration only and not by way of limitation. Accordingly, throughout this detailed description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the system and method may be practiced without some of these specific details. For example, the circuits in the security portal may be implemented with devices such as comparators, shift registers, counters, and/or flip-flops. In other instances, well-known structures and functions were not described in elaborate detail in order to avoid obscuring the subject matter of the present invention. Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A security access system for an integrated circuit (IC), comprising: 
<claim-text>an access code generator to generate a key code that allows access to secured portions of the IC through a debug module in the IC; and </claim-text>
<claim-text>a security portal arranged to receive the key code from the access code generator, and allow access to the debug module if the key code matches a pre-stored code in the security portal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said access code generator includes a series of registers arranged to provide the key code. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the key code is a sequence of binary digits. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said security portal includes 
<claim-text>a key matching circuit to compare the key code entered by the access code generator with the pre-stored code in the security portal, where said key matching circuit generates an enable signal if the key code matches the pre-stored code. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said key matching circuit includes a comparator. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising: 
<claim-text>a debug command enabling element arranged to allow access to the debug module when the enable signal is received from the key matching circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said debug command enabling element includes an AND gate. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>a reset timer to provide a time window within which the key code from the access code generator is supplied to the key matching circuit, said reset timer de-asserting a key lock signal for a programmed time duration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>a key unlocking element arranged to pass the key code generated by the access code generator while the key lock signal is de-asserted. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said key unlocking element includes an AND gate. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said reset timer includes at least one flip-flop. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said reset timer includes at least one register. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An integrated circuit (IC) system, comprising: 
<claim-text>a debugging tool; </claim-text>
<claim-text>a processor; </claim-text>
<claim-text>a plurality of peripheral devices coupled to said processor, said plurality of peripheral devices including secured portions, which may comprise secret codes or circuits; </claim-text>
<claim-text>a debug module coupled to said processor, said debug module arranged to receive commands from the debugging tool and to send data according to said commands; </claim-text>
<claim-text>an access code generator to generate a key code; and </claim-text>
<claim-text>a security portal disposed between said debug module and said debugging tool, said security portal allows the commands from the debugging tool to pass to the debug module only when the key code from the access code generator matches an internally stored code in the security portal, </claim-text>
<claim-text>such that said security portal operates to provide debugging tool with authorized access to said secured portions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>a bus connecting said plurality of peripheral devices and the processor, such that data communication is enabled among said plurality of devices and the processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said plurality of peripheral devices includes memory devices having secret codes. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said processor is a central processing unit (CPU). </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said processor is a digital signal processor (DSP). </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein security portal includes 
<claim-text>a key matching circuit to compare the key code generated by the access code generator with the internally stored code in the security portal, where said key matching circuit generates an enable signal if the key code matches the internally stored code. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising: 
<claim-text>a reset timer to provide a time window within which the key code from the access code generator is supplied to the key matching circuit, said reset timer de-asserting a key lock signal for a programmed time duration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising: 
<claim-text>a key unlocking element arranged to pass the key code generated by the access code generator while the key lock signal is de-asserted. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method for accessing secured portions of an integrated circuit (IC) through a debug module, comprising: 
<claim-text>receiving a key code; </claim-text>
<claim-text>determining if the received key code is correct; and </claim-text>
<claim-text>unlocking and enabling access to the debug module if a match is made. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said determining includes matching the received key code with a pre-stored code. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said unlocking and enabling includes passing a debug command to the debug module. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising: 
<claim-text>issuing a reset command to start a key unlock time window. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said determining includes verifying that the received key code is correct, and that the key code is received within the key unlock time window. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising: 
<claim-text>locking and disabling access to the debug module if a match is not made.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005335A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005335A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005335A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005335A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005335A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005335A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005335A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005335A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
