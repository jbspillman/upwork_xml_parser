<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005224A1-20030102-D00000.TIF SYSTEM "US20030005224A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005224A1-20030102-D00001.TIF SYSTEM "US20030005224A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005224A1-20030102-D00002.TIF SYSTEM "US20030005224A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005224A1-20030102-D00003.TIF SYSTEM "US20030005224A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005224A1-20030102-D00004.TIF SYSTEM "US20030005224A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005224</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894513</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010627</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>118000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Cache architecture for pipelined operation with on-die processor</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Kenneth</given-name>
<middle-name>R.</middle-name>
<family-name>Smits</family-name>
</name>
<residence>
<residence-us>
<city>San Ramon</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Bharat</given-name>
<family-name>Bhushan</family-name>
</name>
<residence>
<residence-us>
<city>Cupertino</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Mahadevamurty</given-name>
<family-name>Nemani</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Intel Corporation</organization-name>
<address>
<address-1>2200 Mission College Boulevard</address-1>
<city>Santa Clara</city>
<state>CA</state>
<postalcode>95052</postalcode>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Bradley J. Bereznak</name-1>
<name-2>Blakely, Sokoloff, Taylor &amp; Zafman LLP</name-2>
<address>
<address-1>12400 Wilshire Boulevard, Seventh Floor</address-1>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1030</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Architecture for a cache fabricated on a die with a processor including a plurality of cache banks, each containing a plurality of storage cell subarrays, the cache banks being arranged in physical relationship to a central location on the die that provides a point for information transfer between the processor and the cache. A data path provides synchronous transmission of data to/from the cache banks such that data requested by the processor in a given clock cycle is received at the central location a predetermined number of clock cycles later regardless of which cache bank in the cache the data is stored. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to Ser. No. ______ filed ______, entitled &ldquo;CACHE ARCHITECTURE WITH REDUNDANT SUB ARRAY&rdquo; and Ser. No. ______ filed ______, entitled &ldquo;ON-DIE CACHE MEMORY WITH REPEATERS&rdquo;, both of which are assigned to the assignee of the present application.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to the field of very large-scale integrated circuits fabricated on a single semiconductor die or chip. More particularly, the invention relates to the field of high-performance cache memories. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Cache memories have been used to maximize processor performance, while maintaining reasonable system costs, for many years. A cache memory is a very fast buffer comprising an array of local storage cells that is used by a processor to hold frequently requested copies of data. A typical cache memory system comprises a hierarchy of memory structures, which usually includes a local (L1), on-chip cache that represents the first level in the hierarchy. A secondary (L2) cache is often associated with the processor for providing an intermediate level of cache memory between the processor and main memory. Main memory, also commonly referred to as system or bulk memory, lies at the bottom (i.e., slowest, largest) level of the memory hierarchy. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In a conventional computer system, a processor is coupled to a system bus that provides access to main memory. An additional backside bus may be utilized to couple the processor to a L2 cache memory. Other system architectures may couple the L2 cache memory to the system bus via its own dedicated bus. Most often, L2 cache memory comprises a static random access memory (SRAM) that includes a data array, a cache directory, and cache management logic. The cache directory usually includes a tag array, tag status bits, and least recently used (LRU) bits. (Each directory entry is called a &ldquo;tag&rdquo;.) The tag RAM contains the main memory addresses of code and data stored in the data cache RAM plus additional status bits used by the cache management logic. By way of background, U.S. Pat. No. 6,115,795 discloses a computer system comprising a processor that includes second level cache controller logic for use in conjunction with an external second level cache memory. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Recent advances in semiconductor processing technology have made possible the fabrication of large L2 cache memories on the same die as the processor core. As device and circuit features continue to shrink as the technology improves, researchers have begun proposing designs that integrate a very large (e.g., multiple megabytes) third level (L3) cache memory on the same die as the processor core for improved data processing performance. While such a high level of integration is desirable from the standpoint of achieving high-speed performance, there are still difficulties that must be overcome. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Large on-die cache memories are typically subdivided into multiple cache memory banks, which are then coupled to a wide (e.g., 32 bytes, 256 bits wide) data bus. For instance, U.S. Pat. Nos. 5,752,260 and 5,818,785 teach interleaved cache memory devices having a plurality of banks consisting of memory cell arrays. In a very large cache memory comprising multiple banks, one problem that arises is the large RC signal delay associated with the long bus lines when driven at a high clock rate (e.g., 1 GHz). Thus, there is a need for some sort of repeater device to connect each bank of cache memory to the data bus without loss of signal integrity. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> One traditional method for sharing a bus is to have each circuit utilize a tri-state driver in order to connect to the bus. Tri-state driver devices are well known in the prior art. A conventional tri-state driver comprises two transistor devices coupled in series to pull the output to either a high or low logic level. The third output state is a high impedance (i.e., inactive) state. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> When a tri-state driver is utilized to connect to a bus, the two series-connected output devices of the driver need to be large so as to provide adequate drive strength to the long bus wire. This requirement, however, makes it difficult to use tri-state drivers as repeaters in a multi-megabyte on-die cache memory because the large source/drain diode of the output devices adds considerable load to the bus. The additional load attributable to the tri-state drivers increases bus power and causes significant resistive/capacitive (RC) signal delay. Another drawback of using tri-state drivers as repeaters is the need for decoding circuitry for the drivers. This decoding circuitry is in addition to the decoding circuitry already required for the cache memory banks. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The requirement of sharing the data bus between banks in a large cache memory also creates timing difficulties. The subarrays within a bank may be placed close enough such that the individual bits of the bus will have about the same timing. However, the cache banks themselves are often located at various physical distances from the receiver or central location on the die that provides a point for information transfer to the processor core. This means that the relative signal timing of data to/from each bank may be very different. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> For example, one bank may be located far from the core (or some central location on the die that provides a point for information transfer between the processor and the cache) whereas another bank may be located adjacent to the core. The farther bank would incur a significant signal delay due to the RC nature of the metal lines whereas the nearer bank would not. In other words, some data bits travel a long distance and have a long delay, while other data bits travel a short distance and have a short delay to reach the receiver. At high processor speeds and with very large cache sizes, it can take one or more clock cycles for the bits that are farthest away to arrive at the receiver relative to the bits that are closest. That is, even though data is sent/received synchronously with the clock, the RC delay of the long metal lines prevents the data signals from traversing the distance between a bank and the core in a single clock cycle. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Therefore, what is needed is a solution to the synchronization and timing problems inherent in the design of a very large, on-die cache memory operating with a high-speed processor core. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The present invention will be understood more fully from the detailed description which follows and from the accompanying drawings, which however, should not be taken to limit the invention to the specific embodiments shown, but are for explanation and understanding only. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a logic diagram of a repeater circuit utilized in one embodiment of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a circuit schematic diagram of a cache memory according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a logic diagram of another repeater circuit utilized in a particular embodiment of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating one embodiment of the cache architecture of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an example of a chip floorplan for a processor that includes an on-die L3 cache. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Architecture for a cache fabricated on a die with a processor is described. In the following description, numerous details are set forth, such as specific circuit configurations, logic device types, numerical values, etc., in order to provide a thorough understanding of the invention. It will be clear, however, to one skilled in the art, that these specific details may not be needed to practice the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In typical cache memory storage arrays that are organized into banks, when one bank is active, it drives a data bus. All of the bit signal lines of the data bus are usually received at some central location on the die. From there the information is transmitted to the processor core. (In the context of the present application, the term &ldquo;central location&rdquo; is intended to have a broad meaning. The term may be construed to include the processor core itself, a receiver device, a set of buffers or latches, or simply a point on the die where the signal lines are coupled to the core. Additionally, the term &ldquo;central location&rdquo; is not limited to any particular area, such as the center, of the die; for example, it may refer to a set of connections or points distributed along the periphery of a circuit or region of the core.) </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Because of the high frequencies that signals are driven at, and the thinner metal traces that are printed on the die using modern processing techniques, there is a need to repeat or rejuvenate the signal every so often. For example, in state-of-the-art semiconductor processing technology a transmitted signal usually needs to be repeated every 1500 microns or so of metal trace. Without some means of rejuvenating or repeating the signal, the RC delay associated with a long bus line operating at high frequency would result in loss of data. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> According to one embodiment of the present invention, each bit of the cache memory bank is connected to a repeater that comprises logic that overcomes the drawbacks associated with the conventional use of tri-state buffers. In one particular implementation, the repeater comprises a single logic gate that drives an inverter. If a bank in the memory is unselected, its output is precharged so that it does not drive the bus. In this manner, when the bank connected to the logic gate is selected, the data stored in the cache array is transmitted through the combinatorial logic structure. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, there is shown a circuit diagram in which repeater <highlight><bold>10</bold></highlight> is connected in series with data bus <highlight><bold>13</bold></highlight>. Repeater <highlight><bold>10</bold></highlight> comprises a 2-input NAND gate <highlight><bold>11</bold></highlight> having an output connected to the input of an inverter <highlight><bold>12</bold></highlight>. One of the inputs of gate <highlight><bold>11</bold></highlight> is coupled to data bus <highlight><bold>13</bold></highlight>, and the other input is coupled to receive data output from the subarray of an associated cache bank (in this example bank B<highlight><subscript>0</subscript></highlight>). The output of inverter <highlight><bold>12</bold></highlight> drives data bus <highlight><bold>13</bold></highlight>, which, in this example, is shown connected to another repeater comprising NAND gate <highlight><bold>14</bold></highlight> and inverter <highlight><bold>15</bold></highlight>, both associated with a corresponding subarray of bank B<highlight><subscript>1</subscript></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The use of the repeater structure shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> implies certain conventions be adopted in the cache memory architecture. One convention is that if the cache bank is unselected (i.e., inactive), the data output from the cache bank is held precharged (high). In the example of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the precharged state is a logical high potential (&equals;1). A logical high potential at one input of NAND gate <highlight><bold>11</bold></highlight> means that repeater <highlight><bold>10</bold></highlight> will allow whatever signal is present on data bus <highlight><bold>13</bold></highlight> to pass through the repeater structure unaltered. That is, data driven from any other cache bank in the memory is unaffected by an inactive cache bank. In this way, repeaters may be concatenated together along a data bus line, with individual repeaters being associated with corresponding subarrays of each bank of cache memory storage. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Practitioners familiar with the data storage arts will also appreciate that the repeater structure of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> obviates the need for additional enable logic or enable pulses. This is made possible, in part, by the convention of precharging the output of the cache bank when the bank is inactive, and also by assigning a default logic value to the data bus itself. Note that in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, data bus line <highlight><bold>13</bold></highlight> is initially coupled to a logical high potential (e.g., V<highlight><subscript>CC</subscript></highlight>). In other words, the first segment of data bus <highlight><bold>13</bold></highlight> that is provided as one of the inputs to NAND gate <highlight><bold>11</bold></highlight> of the first cache bank (B<highlight><subscript>0</subscript></highlight>) is driven by the positive supply potential of the integrated circuit. Thus, a logical high potential is the default value assigned to the data bus in the cache memory architecture of the embodiment of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> All together, the combinatorial logic gate structure of repeater <highlight><bold>10</bold></highlight> and the convention of precharging the cache data output and assigning a default logic potential to the bus lines allows data to simply flow from cache bank to processor core, without concern about set-up and hold times. For instance, in the case where the data output from an active cache bank is a logical 1, it is already valid by the existing bus line state. The state of data bus line <highlight><bold>13</bold></highlight> only changes if the data value output from a given cache bank is a logical 0, in which case there is a propagation delay through all of the repeaters associated with each of the banks before the data on the bus becomes valid. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> It should be understood that there is no precharging of the data bus line itself; that is, there is no switching or clocking applied to the data bus. A scheme in which the data bus is switched or clocked periodically would require some sort of dynamic driver design, adding complexity, power, and cost. Instead, the repeater structure of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be advantageously implemented with simple combinatorial logic. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Another important advantage of the repeater structure shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is that the NAND logic gate <highlight><bold>11</bold></highlight> may be made relatively small, with the inverter <highlight><bold>12</bold></highlight> made relatively large to drive the next segment of the bus. This circuit construction has the benefit of providing increased speed and reduced power so that no additional repeaters are needed before the bus line reaches the next data bank in the cache memory. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Practitioners in the art will further appreciate that the approach of the present invention also provides another advantage when redundant subarrays are employed. Each subarray in a block can have its own enable signal that is used to switch the subarray on or off the bus. In this manner, a subarray can be substituted for any other subarray with just the switching of an enable signal, leaving the bus itself unchanged. Hence, the repeater circuit of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> permits implementing a redundant subarray scheme without adversely impacting power or speed. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, there is shown an alternative embodiment of the repeater circuit of the present invention. The embodiment of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is essentially the same as that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> except that repeater <highlight><bold>20</bold></highlight> includes a NOR gate <highlight><bold>21</bold></highlight> instead of a NAND gate as the input logic device. The output of NOR gate <highlight><bold>21</bold></highlight> is coupled to inverter <highlight><bold>22</bold></highlight>, which, in turn, drives data bus <highlight><bold>23</bold></highlight>. As can be seen, repeater <highlight><bold>20</bold></highlight> is associated with cache bank B<highlight><subscript>0</subscript></highlight>, and is concatenated in series on the bus with a second repeater (associated with bank B<highlight><subscript>1</subscript></highlight>) comprising NOR gate <highlight><bold>24</bold></highlight> and inverter <highlight><bold>25</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Instead of being precharged to a logical high potential, the data output from all inactive cache banks are precharged to a logical low potential (&equals;0). Also, the default data bus logic level is a logical 0, e.g., V<highlight><subscript>SS</subscript></highlight>. Thus, when the data output from an active bank is logically low, the data on the bus is already valid. The only case in which there is a propagation delay through the repeaters before the data on the bus becomes valid is when a cache bank outputs a logical 1. As discussed in connection with <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> cache organization implemented using the repeaters shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> has the advantage of permitting activation of redundant subarray elements with minimal overhead. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a cache memory <highlight><bold>17</bold></highlight> organized into banks (B<highlight><subscript>0</subscript></highlight>-B<highlight><subscript>M</subscript></highlight>) with repeaters associated with corresponding subarrays (A<highlight><subscript>0</subscript></highlight>-A<highlight><subscript>N</subscript></highlight>) of each bank in accordance to one embodiment of the present invention. By way of example, data from subarray A<highlight><subscript>0 </subscript></highlight>of each bank is selectively connected to one of the lines of bus <highlight><bold>18</bold></highlight> through repeaters <highlight><bold>10</bold></highlight>. In typical operation, only one of the banks of memory <highlight><bold>17</bold></highlight> is activated at a time, with the data from the subarrays of that bank being transmitted onto bus <highlight><bold>18</bold></highlight> exclusively. For instance, bank B<highlight><subscript>2 </subscript></highlight>may be activated (with remaining banks B<highlight><subscript>0</subscript></highlight>-B<highlight><subscript>1 </subscript></highlight>and B<highlight><subscript>3</subscript></highlight>-B<highlight><subscript>M </subscript></highlight>inactive) in order to read data stored subarrays A<highlight><subscript>0</subscript></highlight>-A<highlight><subscript>N </subscript></highlight>on bus <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> It should be appreciated that the repeater structure described above allows cache memory <highlight><bold>17</bold></highlight> to be easily configurable to any size as spaced allows on the die. Moreover, the solution offered by the present invention may be used on any cache memory. For example, current cache memory designs often use the way hit information to decode individual wordlines internal to the subarray. According to the prior art, if the size of the cache memory is changed and the number of ways changes, then the subarray must be redesigned to accommodate the new number of ways. In contrast, according to the present invention, the way hit may be used to select a bank. If the number of ways is changed, the bank is simply added or removed from the die. This approach is much easier and less disruptive to the die floorplan as compared to prior art schemes, and no edits to the subarrays are required. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, there is shown an example floorplan of a chip <highlight><bold>100</bold></highlight> having a processor core <highlight><bold>101</bold></highlight> that includes L1 and L2 caches. Also included on chip <highlight><bold>100</bold></highlight> is an on-die L3 cache <highlight><bold>105</bold></highlight>. The bus lines <highlight><bold>102</bold></highlight> coupled to the multiple banks of the L3 cache are received at a central location <highlight><bold>104</bold></highlight> on the die for communication with the processor core <highlight><bold>101</bold></highlight>. (Although the direction of the arrow shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> denotes information transfer from the banks to the core, it is appreciated that information is likewise transferred in the opposite direction, i.e., from the core to the cache banks.) </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, some banks of L3 cache memory <highlight><bold>105</bold></highlight> are located relatively close to central location <highlight><bold>104</bold></highlight>, and other banks are located relatively far from central location <highlight><bold>104</bold></highlight>. As previously discussed data timing and synchronization problems arise in the prior art due to the various distances between the banks and central location <highlight><bold>104</bold></highlight>. To overcome these problems, the cache memory architecture of the present invention sends data synchronously along the bus lines such that it arrives at the receiver (e.g., central location <highlight><bold>104</bold></highlight>) at a predetermined time regardless of which bank the data originated from. This is achieved by inserting flip-flops (i.e., &ldquo;flops&rdquo;), buffers or latches along the bus in the data path such that data read from the closest banks passes through the same number of flops, and therefore takes the same number of clocks, as data read from the farthest bank. The same scheme is utilized along the input data path for writing data to the cache banks. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an exemplary cache memory <highlight><bold>20</bold></highlight> organized in accordance with one embodiment of the present invention. Cache memory <highlight><bold>20</bold></highlight> includes seven cache banks (Bank<highlight><subscript>0</subscript></highlight>-Bank<highlight><subscript>6</subscript></highlight>) each of which is coupled to an input data/address bus and to a data output bus. The input and output buses are both coupled to a block <highlight><bold>28</bold></highlight>, which represents the central location on the chip where information is transferred to/from the processor core. By way of example, block <highlight><bold>28</bold></highlight> may comprise the tag arrays associated with the cache, the processor core itself, or other logic. Data either originates from or is received by block <highlight><bold>28</bold></highlight> depending upon the data flow direction. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The spaced-relationship shown between each of the cache banks and block <highlight><bold>28</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is intended to represent the various physical distances that each of the banks are located on the die relative to the central location associated with data transmission from/to the processor core. For example, Bank<highlight><subscript>6 </subscript></highlight>is shown being located closest to block <highlight><bold>28</bold></highlight>, and Bank<highlight><subscript>0 </subscript></highlight>is shown being located farthest from block <highlight><bold>28</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The cache memory of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> also includes bus repeaters <highlight><bold>21</bold></highlight>-<highlight><bold>24</bold></highlight> inserted in the output data path and bus repeaters <highlight><bold>31</bold></highlight>-<highlight><bold>34</bold></highlight> included in the input data/address path. Each of the bus repeaters is a synchronous device such a clocked flop, buffer, or latch. Bus repeaters are inserted in the data transmission path because a data or address signal can only travel a certain physical or geographic distance along the bus within a given clock cycle. This distance determines the spacing of the bus repeaters along the bus. In other words, bus repeaters are spaced along the bus lines such that a synchronously transmitted signal is received by a next bus repeater (down the line) prior to the next clock cycle. The physical spacing between bus repeaters, therefore, represents the distance a signal can be transmitted on the bus lines in a single clock cycle. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> For example, data output from Bank<highlight><subscript>0 </subscript></highlight>must travel the longest distance across the chip and therefore requires the use of bus repeaters <highlight><bold>21</bold></highlight>-<highlight><bold>24</bold></highlight> in order to reach block <highlight><bold>28</bold></highlight>. Stated differently, it takes five clock cycles for signal transmission to/from Bank<highlight><subscript>0</subscript></highlight>. In contrast, Bank<highlight><subscript>6</subscript></highlight>, being the closest bank, only requires the use of bus repeater <highlight><bold>24</bold></highlight> for output data to reach block <highlight><bold>28</bold></highlight>. To insure that all data arrives and is latched at the central location at a predetermined time regardless of which bank the data is actually stored in, the present invention includes staging devices in the input and output data paths. The blocks labeled &ldquo;S&rdquo; (e.g., blocks <highlight><bold>40</bold></highlight> and <highlight><bold>41</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> denote the staging devices. The staging devices may comprise any ordinary synchronous device such a clocked flop, buffer, or latch. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Note that three staging devices are shown inserted in the data path (input and output) coupled to Bank<highlight><subscript>6</subscript></highlight>. In this example, these staging devices are included in order to make the latency associated with Bank<highlight><subscript>6 </subscript></highlight>the same as that associated with the farthest bank, Bank<highlight><subscript>0</subscript></highlight>. By staging data transmission in this manner, synchronization problems inherent in the prior art&mdash;such as data accessed from a closer bank colliding on the bus with data from an earlier access to a farther bank&mdash;are overcome. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Practitioners in the art will appreciate that the concept of staging provides the further advantage of pipelined data accesses. Because the latency to/from all cache banks is made to be identical in the architecture of the present invention, data accesses can be pipelined, i.e., continuous read and write operations can be performed regardless of which bank the data is actually located. Output data flows back the processor core in the same order it was requested irrespective of the location of the cache bank on the chip where the data is physically stored. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> It should be understood that the insertion of the staging devices in the data path for a given bank in the cache is a function of the physical distance of the bank from the central location, and also the operating frequency. For example, more staging devices (and also more bus repeaters) will be needed the faster the operating frequency. Similarly, more staging devices and bus repeaters will be needed the larger the distance between the closest and farthest cache bank. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Whatever the number of staging devices and bus repeaters utilized, the latency or synchronous delay (&num; of clocks) when accessing any bank in the cache remains constant. In other words, in the cache memory of the present invention a data request to the farthest bank can be immediately followed by a data request to the nearest bank, and the outputs from the respective banks will not collide. The solution of the present invention therefore allows 100% of the bandwidth of the data bus to be utilized. Moreover, it is appreciated that the architecture of the present invention may be used advantageously on non-banked cache memory designs. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A cache fabricated on a die with the processor, comprising: 
<claim-text>a plurality of cache banks, each containing a plurality of subarrays, the cache banks being arranged in physical relationship to a central location on the die that provides a point for information transfer between the processor and the cache; </claim-text>
<claim-text>means for synchronously transmitting output data from the cache banks to the central location in a pipelined manner such that data requested by the processor arrives at the central location at a predetermined time regardless of which of the cache banks is accessed to retrieve the data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the means comprises a first data bus to transmit the output data from the cache banks to the central location. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the means further comprises a second data bus to transmit input data from the central location to the cache banks. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the physical relationship is such that a first cache bank is located a farthest distance from the central location, and a second cache bank is located a nearer distance to the central location. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the means further comprises: 
<claim-text>N bus repeaters, where N is an integer greater than or equal to one, each of the N bus repeaters operating synchronous with the processor and being spaced on the first bus such that data accessed from the first cache bank, which is sent on the first bus in a first clock cycle by either the first cache bank or a bus repeater, is received at a next repeater or the central location before a next clock cycle. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein the means further comprises: 
<claim-text>at least one staging device associated with the second cache bank to provide a synchronous delay to data output on the first bus from the second cache bank. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the second cache bank comprises a nearest cache bank to the central location, and the synchronous delay comprises N&minus;1 clock cycles. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the predetermined time comprises a latency that remains constant for each data request of the processor to the cache. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the cache comprises a third level cache of a cache hierarchy associated with the processor. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method of accessing data stored in a cache, comprising: 
<claim-text>issuing first and second data requests by a processor core to the cache in a first pair of consecutive clock cycles, the processor core being fabricated on a single die with the cache; </claim-text>
<claim-text>accessing first and second locations in the cache responsive to the first and second data requests, respectively, the first and second locations having a physical relationship to the processor core; </claim-text>
<claim-text>returning to the processor core in a second pair of consecutive clock cycles data from the first location followed by data from the second location, regardless of the physical relationship. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the first and second locations comprises first and second banks, respectively. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein data from the first and second banks is returned to the processor core in a predetermined number of clock cycles. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the predetermined number of clock cycles comprises a function of an operating frequency of the processor and a distance between a nearest and a farthest bank in the cache relative to a central location on the single die that provides a point for information transfer between the processor core and the cache. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the first bank is the farthest bank and the second bank is the nearest bank. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> further comprising: 
<claim-text>staging the return of data from the second bank using one or more clocked devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the one or more clocked devices comprise flip-flops. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A cache fabricated on a die with a processor comprising: 
<claim-text>a plurality of cache banks, each containing a plurality of storage cell subarrays, the cache banks being arranged in physical relationship to a central location on the die that provides a point for information transfer between the processor and the cache; </claim-text>
<claim-text>a data path to provide synchronous transmission of data to/from the cache banks such that data requested by the processor in a given clock cycle is received at the central location a predetermined number of clock cycles later regardless of which cache bank in the cache the data is stored. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the data path comprises a first data bus to transmit the output data from the cache banks to the central location. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the data path further comprises a second data bus to transmit input data from the central location to the cache banks. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the physical relationship is such that a first cache bank is located a farthest distance from the central location, and a second cache bank is located a nearer distance to the central location. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the data path further comprises: 
<claim-text>N bus repeaters, where N is an integer greater than or equal to one, each of the N bus repeaters operating synchronous with the processor core and being spaced on the first bus such that data accessed from the first cache bank, which is sent on the first bus in a first clock cycle by either the first cache bank or a bus repeater, is received at a next repeater or the central location before a next clock cycle. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the data path further comprises: 
<claim-text>at least one staging device associated with the second cache bank to provide a synchronous delay to data output on the first bus from the second cache bank. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein the second cache bank comprises a nearest cache bank to the central location, and the synchronous delay comprises N&minus;1 clock cycles. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the predetermined number of clock cycles comprises a latency that remains constant for each data request of the processor core to the cache. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The cache of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the cache comprises a third level cache of a cache hierarchy associated with the processor core.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005224A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005224A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005224A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005224A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005224A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
