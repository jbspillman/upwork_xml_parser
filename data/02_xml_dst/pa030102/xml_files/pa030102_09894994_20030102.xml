<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004923A1-20030102-D00000.TIF SYSTEM "US20030004923A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004923A1-20030102-D00001.TIF SYSTEM "US20030004923A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004923A1-20030102-D00002.TIF SYSTEM "US20030004923A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004923A1-20030102-D00003.TIF SYSTEM "US20030004923A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004923A1-20030102-D00004.TIF SYSTEM "US20030004923A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004923</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09894994</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and system for converting and plugging user interface terms</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Jose</given-name>
<middle-name>Luis Montero</middle-name>
<family-name>Real</family-name>
</name>
<residence>
<residence-us>
<city>Seattle</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Terry</given-name>
<family-name>Farrell</family-name>
</name>
<residence>
<residence-non-us>
<city>Mount Merrion Dublin</city>
<country-code>IE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Christopher</given-name>
<middle-name>H.</middle-name>
<family-name>Pratley</family-name>
</name>
<residence>
<residence-us>
<city>Seattle</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>MERCHANT &amp; GOULD</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 2903</address-1>
<city>MINNEAPOLIS</city>
<state>MN</state>
<postalcode>55402-0903</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and system for converting and plugging user interface terms is disclosed. A program module may allow the user to change the user interface language and the help feature language such that the user interface language may be different than the help feature language. Because the help feature often refers to user interface terms, a user may become confused if the help feature refers to user interface terms in the help language rather than in the user interface language. A mechanism for dynamically changing user interface terms in the help feature to the user interface language chosen by the user as opposed to the help feature language is disclosed. In one embodiment, the tagging of the HTML help feature files is altered with a special set of HTML tags so that these user interface terms may be identified and converted to the user interface language. Once a particular user interface term is identified in the HTML help feature file of the help feature language, the corresponding user interface term may be retrieved from the help feature file of the user interface language by identifying the same tag. The corresponding user interface term of the help feature file of the user interface language may then be plugged into the help feature file of the help feature language and displayed to the user. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention generally relates to a method and system for converting the user interface terms of a help feature of a program module into the same language as the current user interface language of the program module. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> A software program module may include a help feature for providing users with guidance in performing particular functions in the program. The instructions provided to the user via a help feature often include particular steps that need to be executed to perform a particular function. These instructions may include references to particular user interface terms of the program. User interface terms are words used to describe the user interfaces (i.e., the menus, tabs, toolbars, pictures, icons and other tools) that allow a user to interact with the program. Thus, the instructions of a help feature may make reference to these user interface terms so that a user will understand which user interfaces to use to perform a particular function. For example, the instructions may advise the user to select the &ldquo;File&rdquo; menu (where &ldquo;File&rdquo; is the user interface term). </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Programs often include a user interface language that defines the language in which user interfaces will be displayed to the user. These programs may also allow the user interface language to be set for the user by a system administrator. In a corporate environment, the system administrator may set the user interface language to a single language throughout the corporation so that the same user interface is presented to users throughout the corporation. Sometimes, the user is not allowed to change the user interface language setting unless he has system administration access. The user may, however, change the help feature language to a language different than the user interface language. For example, a corporate user may change the help feature language to Spanish even if the user interface language is in a different language, such as English. The help feature language defines the language in which the help feature will be displayed. Typically, a user will change the help feature language to the language with which the user is most familiar. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> A difference between the user interface language and the help feature language is confusing to the user because the user interface terms referred to in the help feature do not match the user interface terms displayed by the program module (because the two languages are different). For example, the help feature may refer to the user interface term &ldquo;Archivo&rdquo; (if the help feature language is Spanish) while the operating system may display the user interface term as &ldquo;File&rdquo; (if the user interface language is English). Thus, changing the help feature language to a familiar language may make the help feature easier to understand for the user but, it may also make it difficult to understand which user interfaces to use because the user interface terms are displayed in the help feature language rather than being displayed in the user interface language. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> There is a need for a method and system for ensuring that the user interface terms of a help feature and the user interface terms displayed to the user by a program module are in the same language regardless of the help feature language. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The present invention meets the above-described needs by providing a method and system for converting and plugging user interface terms. A program module may allow the user to change the user interface language and the help feature language such that the user interface language may be different than the help feature language. Because the help feature often refers to user interface terms, a user may become confused if the help feature refers to user interface terms in the help language rather than in the user interface language. In one embodiment, the invention is a mechanism for dynamically changing user interface terms in the help feature to the user interface language chosen by the user as opposed to the help feature language. In one embodiment, the tagging of the HTML help feature files is altered with a special set of HTML tags (and Attributes) so that these user interface terms may be identified and converted to the user interface language. Once a particular user interface term is identified in the HTML help feature file of the help feature language, the corresponding user interface term may be retrieved from the help feature file of the user interface language by identifying the same tag and Attributes. The corresponding user interface term of the help feature file of the user interface language may then be plugged into the help feature file of the help feature language and displayed to the user. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> That the invention improves over the drawbacks of the prior art and accomplishes the advantages described above will become apparent from the following detailed description of the exemplary embodiments and the appended drawings and claims.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE FIGURES </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary system for implementing the invention. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flow diagram illustrating a method for automatically marking the user interface terms of U.S. HTML help feature files in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram illustrating a method for copying the markup of U.S. help feature files to non-U.S. help feature files in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram illustrating a method for plugging user interface terms from a user interface language help file into a help language help file in accordance with an embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> An embodiment of the present invention will be incorporated into the &ldquo;OFFICE XP&rdquo; suite of application program modules manufactured and distributed by Microsoft Corporation of Redmond, Wash. &ldquo;OFFICE XP&rdquo; program modules allow the user to change the user interface language and the help feature language such that the user interface language may be different than the help feature language. Because the help feature often refers to user interface terms, a user may become confused if the help feature refers to user interface terms in the help language rather than in the user interface language. To avoid this problem, the present invention provides a mechanism for dynamically changing user interface terms in the help feature to the user interface language chosen by the user as opposed to the help feature language. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> It should be understood that in one embodiment, the &ldquo;OFFICE XP&rdquo; program module ships in 30 different languages. Each language adds another set of combinations (e.g., English Help with German Software, or German Help with English Software). This means there are 30 languages*29 other languages&equals;870 supported combinations in &ldquo;OFFICE XP&rdquo;. However, of course, there is no limit to the number of language combinations that this invention supports. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In one embodiment, the help feature is implemented in a number of HTML files with one or more help feature files for each help feature language. In this embodiment, the tagging of the HTML help feature files is altered to implement the invention. User interface terms are tagged with a special set of HTML tags (and Attributes) so that these user interface terms may be identified and converted into the user interface language if the user interface language and the help feature language are not the same. Once a particular user interface term is identified in the HTML help feature file of the help feature language, the corresponding user interface term may be retrieved from the help feature file of the user interface language by identifying the same tag (and Attributes). The corresponding user interface term of the help feature file of the user interface language may then be plugged into the help feature file of the help feature language and displayed to the user. </paragraph>
<paragraph id="P-0015" lvl="7"><number>&lsqb;0015&rsqb;</number> Exemplary Operating Environment </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices. It should be further understood that the present invention may also be applied in the context of users accessing content on the Internet via a browser&mdash;so the present invention applies to much lower end devices that may not have many of the components described in reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> (e.g., hard disks, etc.). </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer <highlight><bold>20</bold></highlight>, including a processing unit <highlight><bold>21</bold></highlight>, a system memory <highlight><bold>22</bold></highlight>, and a system bus <highlight><bold>23</bold></highlight> that couples various system components including the system memory to the processing unit <highlight><bold>21</bold></highlight>. The system bus <highlight><bold>23</bold></highlight> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM) <highlight><bold>24</bold></highlight> and random access memory (RAM) <highlight><bold>25</bold></highlight>. A basic input/output system <highlight><bold>26</bold></highlight> (BIOS), containing the basic routines that help to transfer information between elements within the personal computer <highlight><bold>20</bold></highlight>, such as during startup, is stored in ROM <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The personal computer <highlight><bold>20</bold></highlight> further includes a hard disk drive <highlight><bold>27</bold></highlight> for reading from and writing to a hard disk, not shown, a magnetic disk drive <highlight><bold>28</bold></highlight> for reading from or writing to a removable magnetic disk <highlight><bold>29</bold></highlight>, and an optical disk drive <highlight><bold>30</bold></highlight> for reading from or writing to a removable optical disk <highlight><bold>31</bold></highlight> such as a CD-ROM or other optical media. The hard disk drive <highlight><bold>27</bold></highlight>, magnetic disk drive <highlight><bold>28</bold></highlight> and optical disk drive <highlight><bold>30</bold></highlight> are connected to the system bus <highlight><bold>23</bold></highlight> by a hard disk drive interface <highlight><bold>32</bold></highlight>, a magnetic disk drive interface <highlight><bold>33</bold></highlight> and an optical drive interface <highlight><bold>34</bold></highlight>, respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Although the exemplary environment described herein employs a hard disk, a removable magnetic disk <highlight><bold>29</bold></highlight> and a removable optical disk <highlight><bold>31</bold></highlight>, it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the exemplary operating environment. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A number of program modules may be stored on the hard disk, magnetic disk <highlight><bold>29</bold></highlight>, optical disk <highlight><bold>31</bold></highlight>, ROM <highlight><bold>24</bold></highlight> or RAM <highlight><bold>25</bold></highlight>, including an operating system <highlight><bold>35</bold></highlight>, one or more application programs <highlight><bold>36</bold></highlight>, other program modules <highlight><bold>37</bold></highlight>, and program data <highlight><bold>38</bold></highlight>. In a preferred embodiment, the application programs <highlight><bold>36</bold></highlight> comprise the &ldquo;OFFICE XP&rdquo; suite of program modules. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> A user may enter commands and information into the personal computer <highlight><bold>20</bold></highlight> through input devices such as a keyboard <highlight><bold>40</bold></highlight> and pointing device <highlight><bold>42</bold></highlight>. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <highlight><bold>21</bold></highlight> through a serial port interface <highlight><bold>46</bold></highlight> that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial port (USB). A monitor <highlight><bold>47</bold></highlight> or other type of display device is also connected to the system bus <highlight><bold>23</bold></highlight> via an interface, such as a video adapter <highlight><bold>48</bold></highlight>. In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The personal computer <highlight><bold>20</bold></highlight> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <highlight><bold>49</bold></highlight>. The remote computer <highlight><bold>49</bold></highlight> may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer <highlight><bold>20</bold></highlight>, although only a memory storage device <highlight><bold>50</bold></highlight> has been illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The logical connections depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> include a local area network (LAN) <highlight><bold>51</bold></highlight> and a wide area network (WAN) <highlight><bold>52</bold></highlight>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> When used in a LAN networking environment, the personal computer <highlight><bold>20</bold></highlight> is connected to the local network <highlight><bold>51</bold></highlight> through a network interface or adapter <highlight><bold>53</bold></highlight>. When used in a WAN networking environment, the personal computer <highlight><bold>20</bold></highlight> typically includes a modem <highlight><bold>54</bold></highlight> or other means for establishing communications over the wide area network <highlight><bold>52</bold></highlight>, such as the Internet. The modem <highlight><bold>54</bold></highlight>, which may be internal or external, is connected to the system bus <highlight><bold>23</bold></highlight> via the serial port interface <highlight><bold>46</bold></highlight>. In a networked environment, program modules depicted relative to the personal computer <highlight><bold>20</bold></highlight>, or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Class and Name Attributes to Tag User Interface Terms </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> It should be understood that, in a preferred embodiment of the present invention, user interface terms in help files are marked, or tagged, to distinguish them from other parts of the help files. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In a preferred embodiment of the present invention, help files for a program module are stored as Hypertext Markup Language (HTML) files. Alternatively, the help files maybe stored as XML files or in some other file format. Typically, one or more help files are stored for each help feature language supported by the program module. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Each user interface term in the help files needs to include some indication, such as a mark or a tag, to identify them so that these terms may be cross-referenced and plugged between the help files as will be further described. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In a preferred embodiment, user interface terms in help feature files are displayed in bold by the &ldquo;OFFICE XP&rdquo; suite of program modules. However, searching a help feature file for bold terms returns more than simply user interface terms because words that are not user interface terms may also be in bold. So, it is necessary to distinguish regular bold words from user interface terms. In a preferred embodiment, user interface terms are tagged with two attributes that distinguish them. These two attributes are referred to as class and name. For example, the HTML document displaying the user interface term &ldquo;File&rdquo; (as in File Menu) may look something like this: </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> &lt;h<highlight><bold>1</bold></highlight>&gt;&lt;b class&equals;ui name&equals;file&gt;File&lt;/b&gt;Menu&lt;/h<highlight><bold>1</bold></highlight>&gt;</paragraph>
<paragraph id="P-0030" lvl="7"><number>&lsqb;0030&rsqb;</number> and would be displayed as: File Menu </paragraph>
<paragraph id="P-0031" lvl="7"><number>&lsqb;0031&rsqb;</number> Thus, the two attributes to distinguish user interface terms from the rest of the help file, including other bold-faced words, are referred to as class and name. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The class attribute will be equal to &ldquo;ui&rdquo; in a preferred embodiment of the present invention to identify a term as a user interface term. The class attribute serves at least two useful purposes. The first is that the class attribute allows the invention to function without forcing the author of the help files to format the help files in any intrusive way. For example, user interface terms do not have to be bolded to be identified as user interface terms. Instead, all user interface terms in a help file may be located by searching for all terms with a class equal to ui. So, for example, Japanese user interface terms are not typically displayed in bold and do not have to be. A second useful purpose of the class attribute is that it indicates that an item is a pluggable user interface term. In other words, the class attribute identifies that the same user interface term in another help function file may be plugged into the help function file. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The name attribute is a lowercase version of the English user interface term with spaces removed. For example, for the user interface term &ldquo;File&rdquo; the name attribute is &ldquo;file&rdquo;. Similarly, for the Spanish user interface term &ldquo;Archivo&rdquo; the name attribute is &ldquo;file&rdquo;. The name attribute allows crossreferencing of user interface terms in one language with user interface terms from another language. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Tagging or marking the user interface terms of help files with the class and name attributes may be performed manually by editing the help files and tagging the user interface terms. However, manual tagging of user interface terms may be time-consuming due to the large number of help files in a typical program module. In one embodiment of the present invention, authors of help files do not need to add the name attribute and class attribute to a user interface term, because they will be automatically generated as described below. A method for automatically tagging pre-existing help files will be described below. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Automatically Tagging User Interface Terms in Help Files </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> A method may be used to mark the user interface terms in existing help feature files. The goal is to quickly and efficiently process large numbers of HTML help feature files and mark (tag) the user interface terms in them. In a preferred embodiment, the user interface terms in the U.S. (English) HTML help files are first marked as will be described in reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The mark-up of the English help feature files is then copied to non-English help feature files as will be described in reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> method <highlight><bold>200</bold></highlight> for automatically marking the user interface terms of U.S. (English) HTML help feature files in accordance with an embodiment of the present invention will be described. At step <highlight><bold>205</bold></highlight>, each bold term in the U.S. help feature file is identified. Typically, if the help feature file is an HTML file, then bold terms are those wrapped with &lt;b&gt; and &lt;/b&gt; tags. In a preferred embodiment, existing help feature files display most, if not all, of their user interface terms in bold. The method then proceeds to step <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> At step <highlight><bold>210</bold></highlight>, any obvious non-user interface terms are excluded from consideration. Obvious non-user interface terms may comprise those which have a class attribute that is equal to something other than ui (e.g. in the sequence &ldquo;&lt;p class&equals;TPT&gt;&lt;b&gt;Note:&lt;/b&gt; . . . &rdquo;). The method then proceeds to step <highlight><bold>215</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> At step <highlight><bold>215</bold></highlight>, the identified terms are cross-referenced with a software database to determine whether there is a match. The software database is normally used to translate the software. All of the user interface terms are extracted from software files (e.g., menu and dialog resources in .EXE and .DLL) and placed into the database where they can be translated. The present invention uses the software database for another purpose: to determine whether bold terms in the help files are actually UI terms by performing a database lookup or search. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In a preferred embodiment, at least 75% fuzzy matching is used to determine if there is a match. A fuzzy match is an imperfect match. So, for example, if a search was performed searching for &ldquo;File&rdquo; and the database found &ldquo;Files&rdquo;, it would be considered a positive match because &ldquo;75%&rdquo; fuzzy match means that at least 75% of the words/letters in the terms are required to match. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> If there is a match, then the method proceeds to step <highlight><bold>220</bold></highlight> and the class&equals;ui and name&equals;xxx attributes are automatically added to the help feature file as a tag. For example, the &ldquo;&lt;b&gt;&rdquo; tag already exists, so the attributes may be added as illustrated below: </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Before: </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> Choose &lt;b&gt;Open&lt;/b&gt; from the &lt;b&gt;File&lt;/b&gt; menu. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> After: </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> Choose &lt;b class&equals;&ldquo;UI&rdquo; name&equals;&ldquo;open&rdquo;&gt;Open&lt;/b&gt; from the &lt;b class&equals;&ldquo;UI&rdquo; name&equals;&ldquo;file&rdquo;&gt;File&lt;/b&gt; menu. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> If there is not a match at decision step <highlight><bold>215</bold></highlight>, the method <highlight><bold>200</bold></highlight> proceeds to decision step <highlight><bold>225</bold></highlight> and it is determined whether there are any remaining identified terms in the help feature file that have not been cross-referenced with the software database and, if so, the method returns to decision step <highlight><bold>215</bold></highlight>. If not, the method ends at step <highlight><bold>299</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Performing method <highlight><bold>200</bold></highlight> on a help feature file is typically effective enough to mark the user interface terms of the U.S. help feature files with about 90-95% accuracy. However, some user interface terms may be missed (either because they weren&apos;t already formatted as bold or because they do not exist in the software database, i.e., they are incorrect) and somenon-user interface terms may accidentally get marked (because they closely match something that does exist in the software database). </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Thus, an automatic solution is not 100% effective and requires a human review after performing method <highlight><bold>200</bold></highlight>. Therefore, it is recommended that authors check to see if the correct UI terms have been marked in the U.S. files. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> flowchart illustrating a method <highlight><bold>250</bold></highlight> for copying the mark-up of the U.S. help files to non-English help files (localized help files) in accordance with an embodiment of the present invention will be described. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> It should be first noted that the mark-up can be manually added to the non-English help files and the invention will function equally well. In a preferred embodiment, the process of marking up the non-English help files has been automated to make the process more precise and to save time. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The method <highlight><bold>250</bold></highlight> begins at step <highlight><bold>255</bold></highlight> when a U.S. help file is opened. The method then proceeds to step <highlight><bold>260</bold></highlight> when a localized help file corresponding to the U.S. help file is opened. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> At step <highlight><bold>265</bold></highlight>, the first paragraphs in both the U.S. help file and the localized help file are identified. At step <highlight><bold>270</bold></highlight>, the user interface terms in the U.S. help file are identified. Typically, the user interface terms are identified based on the HTML mark-up, tags and attributes of the help file. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> At step <highlight><bold>275</bold></highlight>, all relevant translations of each of the U.S. user interface terms is located in the software database. The method then proceeds to decision step <highlight><bold>280</bold></highlight> where it is determined whether there are any matches in the localized help file corresponding to the relevant translations found at step <highlight><bold>275</bold></highlight>. If so, then the method proceeds to step <highlight><bold>285</bold></highlight> and the U.S. formatting is copied to the corresponding matched terms foundin the localized help file. If not matches are found at decision step <highlight><bold>280</bold></highlight>, the method proceeds to step <highlight><bold>290</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> At step <highlight><bold>290</bold></highlight>, a number of hypotheses are used to copy the U.S. formatting to the localized help file. In a preferred embodiment, the following series of hypotheses is used: </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> Hypothesis <highlight><bold>1</bold></highlight>: If only unmatched U.S. term and one localized term remain, assume these terms are a match. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> Hypothesis <highlight><bold>2</bold></highlight>: Make a second pass on all the files using the hypotheses of the first pass. </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> Hypothesis <highlight><bold>3</bold></highlight>: Use fuzzy matching, (e.g., accept &ldquo;files&rdquo; and &ldquo;filing&rdquo; as a match for &ldquo;file&rdquo;). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> At step <highlight><bold>295</bold></highlight>, the steps of method <highlight><bold>250</bold></highlight> are repeated for all U.S. help files, and all paragraphs in them. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The results of method <highlight><bold>250</bold></highlight> are marked up localized files ready for runtime &ldquo;plugging&rdquo; as will be described in reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> It should be noted that this process of marking up the nonEnglish files has a useful by-product; i.e., it tests that the translations of the UI terms in the help match the translations of the UI terms in the software. Different people typically translate the user interface terms at different times and it&apos;s easy for the translator to make mistakes. The tool is still smart enough to plug in most cases even if there are mistakes, but the tool also generates a report detailing the obvious errors in the help files so that they can be corrected. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> It should be understood that the methods <highlight><bold>200</bold></highlight> and <highlight><bold>250</bold></highlight> described in reference to <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference> are pre-processing methods performed before the help files are shipped to the client. On the other hand, the method <highlight><bold>300</bold></highlight> described in reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a runtime method that is performed at runtime. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Matching User Interface Terms Using the Name Attribute </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> In an embodiment of the present invention, the name attribute is used to match user interface terms in a help feature file of one language with the equivalent user interface terms in a help feature file of another language. The name attribute allows a runtime scripting code to find a corresponding localized term if it is out of order and plug it into the help feature file. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The name attribute was chosen for the following reasons: </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> 1. It is meaningful, so authors of help feature files are more likely to keep the correct name with the correct UI term. </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> 2. It allows authors the flexibility of re-arranging a sentence, without breaking any of the international files. </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> 3. It allows translators to reorder terms in sentences. </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> 4. It allows authors the flexibility to re-order paragraphs within the help feature file. </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> 5. Paragraphs can be easily moved to different help feature files by the author. </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> 6. It allows translators to delete user interface terms (which can be necessary). For example, the U.S. text might read: Choose &lt;b&gt;File&lt;/b&gt;, &lt;b&gt;Save&lt;/b&gt; or choose &lt;b&gt;File&lt;/b&gt;, &lt;b&gt;Save As&lt;/b&gt;. However, the translator may reword this text as: Choose &lt;b&gt;File&lt;/b&gt; &lt;b&gt;Save&lt;/b&gt; or &lt;b&gt;Save As&lt;/b&gt;. In other words, the translator has deleted an occurrence of the word &ldquo;File&rdquo;. Similarly, a translator could also add in extra occurrences of U.S. terms (and these will still plug). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> It should be understood that, in one embodiment of the invention, the author of a help feature file does not need to manually add the name attribute because methods <highlight><bold>200</bold></highlight> and <highlight><bold>250</bold></highlight> may be used to automatically add the name attribute and class attribute for a user interface term. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> As described above, the name attribute allows translations and re-ordering of sentences during translations without disrupting the plugging of user interface terms between help feature files of different languages. For example, the following may be an HTML document for a help feature file in English: </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> &lt;p&gt;Choose&lt;b class&equals;UI name&equals;open&gt;Open&lt;/b&gt;from the &lt;b class&equals;UI name&equals;file&gt;File&lt;/b&gt;menu.&lt;/p&gt;</paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> &lt;p&gt;Then click on the &lt;b class&equals;UI name&equals;tools&gt;Tools&lt;/b&gt;button and choose &lt;b class&equals;UI name&equals;find&gt;Find&lt;/b&gt;from the menu. Next choose &lt;b class&equals;UI name&equals;filename&gt;File name&lt;/b&gt;in the &lt;b class&equals;UI name&equals;property&gt;Property&lt;/b&gt;drop down.&lt;/p&gt;</paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Listed below is the correct fake translation of the sample shown above. Notice how the translator has re-ordered some of the user interface terms within the segments, which is perfectly acceptable. </paragraph>
<paragraph id="P-0076" lvl="2"><number>&lsqb;0076&rsqb;</number> &lt;p&gt;From a la &lt;b class&equals;UI name&equals;file&gt;Fillee&lt;/b&gt;menu, choosa &lt;b class&equals;UI name&equals;open&gt;Opeena&lt;/b&gt;.&lt;/p&gt;</paragraph>
<paragraph id="P-0077" lvl="2"><number>&lsqb;0077&rsqb;</number> &lt;p&gt;Nexta choosa &lt;b class&equals;UI name&equals;find&gt;Fiinda&lt;/b&gt;froma the &lt;b class&equals;UI name&equals;tools&gt;Toola&lt;/b&gt; buttona meenuu. Finallee ina da &lt;b class&equals;UI name&equals;property&gt;Propertee&lt;/b&gt; dropa downa, picka da &lt;b class&equals;UI name&equals;filename&gt;Fillee nama&lt;/b&gt;.&lt;/p&gt;</paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Note: This again shows that translators can manually add the correct mark-up, but for efficiency to the present invention automates this process. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Runtime Framework </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> In one embodiment of the present invention, each help feature file requires a &ldquo;runtime framework&rdquo; to perform the actual plugging of user interface terms from one help feature file in a first language to a second help feature file in a second language. This runtime framework includes adding a script tag to the HTML head section of each help feature file and an onload event in the body tag of each help feature file. For example the head section may appear as follows: </paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> &lt;head&gt;</paragraph>
<paragraph id="P-0082" lvl="2"><number>&lsqb;0082&rsqb;</number> &lt;script language&equals;vbscript src&equals;&bsol;fplug.js&gt;</paragraph>
<paragraph id="P-0083" lvl="2"><number>&lsqb;0083&rsqb;</number> &lt;/head&gt;</paragraph>
<paragraph id="P-0084" lvl="7"><number>&lsqb;0084&rsqb;</number> and the body section may appear as follows: </paragraph>
<paragraph id="P-0085" lvl="2"><number>&lsqb;0085&rsqb;</number> &lt;body onload&equals;plugUITerms( ) . . . &gt;</paragraph>
<paragraph id="P-0086" lvl="1"><number>&lsqb;0086&rsqb;</number> &lt;/body&gt;</paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> This runtime framework may be added to the files with an automatic tool or may be manually added to the help feature files. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Plugging User Interface Terms </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> method <highlight><bold>300</bold></highlight> for plugging user interface terms from a user interface language help file into a help language help file in accordance with an embodiment of the present invention will be described. The method <highlight><bold>300</bold></highlight> begins at step <highlight><bold>305</bold></highlight> when a user starts the help feature. The user may start the help feature in any way he wishes, such as from any one of the &ldquo;OFFICE&rdquo; applications or by running a Compiled Help (CHM) file. A CHM file contains a set of compressed HTML/css/js etc. help files. It should be understood that all of the data in the help files is in UNICODE format at the time of plugging, so there is no need to perform any codepage or character conversions. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> As an example, assume that GRAPH<highlight><bold>9</bold></highlight>.CHM is the help feature file in question. Also assume the start topic is in the file &ldquo;default.htm&rdquo;. The method proceeds to step <highlight><bold>310</bold></highlight> and the help feature file is loaded and calls &ldquo;plugUITerms( )&rdquo; when it is loaded (i.e., in the onload event). This function is part of the runtime framework. The method <highlight><bold>300</bold></highlight> then proceeds to step <highlight><bold>315</bold></highlight> where it is determined what the help language is. In a preferred embodiment, this is determined by looking at the Uniform Resource Locator (URL) that was just loaded. Of course, the current help language may be identified by a variety of methods (such as checking which folder the file was loaded from, or by checking information within the file (e.g., an attribute), or by looking for information in the registry). </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> At step <highlight><bold>320</bold></highlight>, it is determined what the user interface language for the software program module is. In a preferred embodiment, the value for the user interface language for the software program module is found in the registry. But there are countless other methods that could be used to determine this. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> At decision step <highlight><bold>325</bold></highlight>, it is determined whether the user interface language matches the help feature language. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> If so, then the method ends at step <highlight><bold>399</bold></highlight> because the user interface language and the help feature language are the same. However, if at decision step <highlight><bold>325</bold></highlight>, it is determined that the user interface language and the help feature language do not match, then the method proceeds to step <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> At step <highlight><bold>330</bold></highlight>, the help feature file for the user interface language is searched for all of its user interface terms. Typically, this is done by searching for terms with a tag with class equal to ui. The method then proceeds to step <highlight><bold>335</bold></highlight>. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> At step <highlight><bold>335</bold></highlight>, the terms found at step <highlight><bold>335</bold></highlight> are plugged into their equivalent terms in the help feature file of the help language and the help feature is displayed to the user. Typically, this step is accomplished using the name attribute to match terms. For example, the Spanish user interface term &ldquo;Archivo&rdquo; is equivalent to the English user interface term &ldquo;File&rdquo; because both have the same name attribute of &ldquo;file&rdquo;. The method then ends at step <highlight><bold>399</bold></highlight>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> With regard to steps <highlight><bold>330</bold></highlight> and <highlight><bold>335</bold></highlight>, in a preferred embodiment, it&apos;s worth noting that the equivalent help file (of the UI language) is first loaded onto a hidden/invisible &ldquo;frame&rdquo; on the main page. From there, the scripting (tfplug.js) inside the localized file actually performs the plugging. This is important because it is used to load the HTML file (of the UI language) from which the UI terms will be extracted for plugging. In the present invention, the equivalent help file is loaded in a way that the user doesn&apos;t even notice (because it&apos;s invisible), and in a way that most web browsers support (i.e., using a frame). </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Reading the UI terms directly from a HTML file removes the need to use databases. A key part of this invention is removing the need to use databases or additional files to store UI terms. Standard help files are used instead and no code (itself an added overhead) is needed to read from databases. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> An example of method <highlight><bold>300</bold></highlight> is provided below. The following HTML is assumed for this example: </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> English: </paragraph>
<paragraph id="P-0100" lvl="2"><number>&lsqb;0100&rsqb;</number> &lt;p&gt;Choose&lt;b class&equals;UI name&equals;open&gt;Open&lt;/b&gt;from the &lt;b class&equals;UI name&equals;file&gt;File&lt;/b&gt;menu.&lt;/p&gt;</paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Translation: </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> &lt;p&gt;From a la &lt;b class&equals;UI name&equals;file&gt;Fillee&lt;/b&gt;menu, choosa &lt;b class&equals;UI name&equals;open&gt;Opeena&lt;/b&gt;.&lt;/p&gt;</paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Assume the Help language is English and the Software (UI) Language is the translated one above. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Steps: </paragraph>
<paragraph id="P-0105" lvl="2"><number>&lsqb;0105&rsqb;</number> 1. Find all the help language (English) UI terms. For this implementation it is the set of terms wrapped in &lt;b&gt; tags that contain a class&equals;UI attribute. (&ldquo;Open&rdquo; and &ldquo;File&rdquo;). </paragraph>
<paragraph id="P-0106" lvl="2"><number>&lsqb;0106&rsqb;</number> 2. Find the equivalent set in the localized file. (&ldquo;Fillee&rdquo; and &ldquo;Opeena&rdquo;) </paragraph>
<paragraph id="P-0107" lvl="2"><number>&lsqb;0107&rsqb;</number> 3. For each one use the name attribute to match them (Both &ldquo;File&rdquo; and &ldquo;Fillee&rdquo; have name&equals;file so they match, the same goes for &ldquo;Open&rdquo; and &ldquo;Opeena&rdquo; which have name&equals;open). </paragraph>
<paragraph id="P-0108" lvl="2"><number>&lsqb;0108&rsqb;</number> 4. Swap in the localized text that has been found: </paragraph>
<paragraph id="P-0109" lvl="3"><number>&lsqb;0109&rsqb;</number> &lt;p&gt;Choose&lt;b class&equals;UI name&equals;open&gt;Opeena&lt;/b&gt;from the &lt;b class&equals;UI name&equals;file&gt;Fillee&lt;/b&gt;menu.&lt;/p&gt;</paragraph>
<paragraph id="P-0110" lvl="2"><number>&lsqb;0110&rsqb;</number> 5. Finally, in a preferred embodiment, add a tooltip (using the Title attribute) so that the user can see what the original language version (i.e., the help language) of each plugged term was. A tooltip is a text box that floats over an item when the mouse is held over that item for a short period of time. The resulting HTML is: </paragraph>
<paragraph id="P-0111" lvl="3"><number>&lsqb;0111&rsqb;</number> &lt;p&gt;Choose&lt;b class&equals;UI name&equals;open title&equals;&ldquo;Open&rdquo;&gt;Opeena&lt;/b&gt; from the &lt;b class&equals;UI name&equals;file title&equals;&ldquo;File&rdquo;&gt;Fillee&lt;/b&gt;menu.&lt;/p&gt;</paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> The tooltip described above is a key part of an embodiment of the invention. It means the help displayed to the user is effectively &ldquo;dual&rdquo; language because the user can see each UI term (individually) in both the UI and Software language at the same time. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> It should be understood that, in a preferred embodiment, the method <highlight><bold>300</bold></highlight> is written in Jscript and is not able to access the registry. Therefore, in this embodiment, an ActiveX control is used to access the registry. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> For example, first assume that the UI language is <highlight><bold>1025</bold></highlight> (Arabic), and the Help language (which has just been loaded) is <highlight><bold>1033</bold></highlight> (English USA), and that the loaded file is called &ldquo;default.htm&rdquo;. Because &ldquo;default.htm&rdquo; is inside a CHM file (graph<highlight><bold>10</bold></highlight>.chm) it&apos;s full path would be: </paragraph>
<paragraph id="P-0115" lvl="1"><number>&lsqb;0115&rsqb;</number> mk:&commat;MSITStore:c:&bsol;program files&bsol;Microsoft office&bsol;office<highlight><bold>10</bold></highlight>&bsol;<highlight><bold>1033</bold></highlight>&bsol;graph<highlight><bold>10</bold></highlight>.chm::/htm<highlight><bold>1</bold></highlight>/default.htm: </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The first task is to load the equivalent help file in the UI language. Given the Office <highlight><bold>10</bold></highlight> file structures this file can be found at the following location (URL): </paragraph>
<paragraph id="P-0117" lvl="2"><number>&lsqb;0117&rsqb;</number> mk:&commat;MSITStore:c:&bsol;program files&bsol;Microsoft office&bsol;office<highlight><bold>10</bold></highlight>&bsol;<highlight><bold>1025</bold></highlight>&bsol;graph<highlight><bold>10</bold></highlight>.chm::/htm<highlight><bold>1</bold></highlight>/default.htm </paragraph>
<paragraph id="P-0118" lvl="1"><number>&lsqb;0118&rsqb;</number> TFPLUG.JS will automatically add a hidden IFRAME to the page with the SRC set to this URL. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> This forces the localized help topic to be loaded into the frame, but the user never gets to see it because it is loaded into a frame that is invisible </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> If the localized help file is not available then nothing will happen. The Office XP installation features ensure that the necessary help files are available on the users system (i.e., the help for both the UI language and the help language). </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Assuming the localized help file exists, the topic again calls into &ldquo;plugUITerms( )&rdquo; when it is loaded. However, this time TFPLUG.JS determines that the topic is loaded in a FRAME and calls a function to plug the UI terms. This uses the &ldquo;name&rdquo; attributes to know which order to plug in the terms (described above). </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> It should be understood that one of the key advantages of the present invention is that no additional files are being shipped with the &ldquo;OFFICE XP&rdquo; suite of program modules to store the translated user interface terms. Instead, the user interface terms in the help files are simply tagged without creating additional files to translate the terms. The translated user interface terms are retrieved directly from the localized help files. Thus, the present invention does not contribute to bloatedsoftware, i.e., software that requires unreasonable amounts of disk space or memory. However, user interface terms of the help files need to be clearly marked or tagged in certain embodiments of the present invention. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> The present invention could also be used to retrieve other content (not UI terms in other languages) from a mirror CHM/HTML file. This could include additional help, additional images, terminology explanations, pointers to additional help, etc. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> It should be understood that the foregoing pertains only to the preferred embodiments of the present invention, and that numerous changes may be made to the embodiments described herein without departing from the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for automatically tagging a plurality of user interface terms in a US (English) help file of an application program module, comprising the steps of: 
<claim-text>identifying the bold terms in the help file; </claim-text>
<claim-text>excluding from the identified bold terms any non-user interface terms; </claim-text>
<claim-text>cross-referencing the remaining bold terms with a database to determine which remaining bold terms match the database; and </claim-text>
<claim-text>tagging the matching remaining bold terms as user interface terms. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of excluding from the identified bold terms any non-user interface terms comprises excluding bold terms which are obviously not UI terms based on formatting clues. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the database comprises a list of possible user interface terms and the step of cross-referencing the remaining bold terms with a database to determine which remaining bold terms match the database comprises determining which of the remaining bold terms matches at least one of the terms in the list of possible user interface terms. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of tagging the matching remaining bold terms as user interface terms comprises adding an HTML tag to the matching terms. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the HTML tag comprises a name attribute specifically identifying each matching term and a class attribute identifying each matching term as one of the plurality of user interface terms. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the steps of: 
<claim-text>cross-referencing the help file with a translated help file and tagging the user interface terms in the translated help file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the help file comprises an English help file and the translated help file comprises a non-English help file. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the steps of cross-referencing the help file with a translated help file and tagging the user interface terms in the translated help file comprise: 
<claim-text>opening the help file and the translated help file; </claim-text>
<claim-text>identifying user interface terms in the help file; </claim-text>
<claim-text>identifying translations of the identified user interface terms; </claim-text>
<claim-text>finding matches to the translations in the translated help file; and </claim-text>
<claim-text>for each match, copying the formatting associated with the help file user interface term to the formatting of the match in the translated help file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the step of identifying user interface terms in the English help file comprises searching for a name attribute associated with text that identifies the text as a user interface term. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the step of identifying translations of the identified user interface terms comprises performing a look-up in a software database of translations. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the step of copying the formatting associated with the help file user interface term to the formatting of the match in the translated help file comprises the steps of: 
<claim-text>locating the class and name attribute associated with the help file user interface term; and </claim-text>
<claim-text>copying the class and name attribute to the match in the translated help file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the help file and translated help file are HTML files. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method for plugging a plurality of user interface terms in a user interface language of a first help file to replace a plurality of user interface terms in a help language of a second help file, wherein both the first help file and second help file are associated with a program module on a computer, the method comprising the steps of: 
<claim-text>determining the help language for the program module and the user interface language for the program module; </claim-text>
<claim-text>determining whether the help language for the program module and the user interface language for the program module are equivalent; </claim-text>
<claim-text>if not, then searching the first help file for the plurality of user interface terms in the user interface language; and </claim-text>
<claim-text>replacing the plurality of user interface terms in the help language of the second help file with the retrieved plurality of user interface terms in the user interface language from the first help file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> further comprising the step of displaying the second help file with the plurality of user interface terms in the help language of the second help file replaced with the retrieved plurality of user interface terms in the user interface language from the first help file. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the step of searching the first help file for the plurality of user interface terms in the user interface language comprises searching the first help file for instances in which an attribute stored in association with text in the first help file indicates that the text is a user interface term. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the step of replacing the plurality of user interface terms in the help language of the second help file with the retrieved plurality of user interface terms in the user interface language from the first help file comprises locating the attribute stored in association with text in the second help file and replacing the text in the second help file with the text from the first help file. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer-readable medium comprising computer-readable instructions for performing the steps of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising the step of displaying a tooltip when a cursor hovers over one of the retrieved plurality of user interface terms in the user interface language from the first help file, wherein the tooltip comprises a display of the corresponding user interface term displayed in the help language of the second help file. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method for cross-referencing a first plurality of user interface terms in a first help file with a second plurality of user interface terms in a second help file, comprising the steps of: 
<claim-text>opening the first help file and the second help file; </claim-text>
<claim-text>identifying user interface terms in the first help file; </claim-text>
<claim-text>identifying translations of the identified user interface terms in the first help file; </claim-text>
<claim-text>finding matches to the translations in the second help file; and </claim-text>
<claim-text>for each match, copying the formatting associated with the first help file user interface term to the formatting of the match in the second help file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the step of identifying user interface terms in the first help file comprises searching for a name attribute associated with text that identifies the text as a user interface term. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of claim <highlight><bold>20</bold></highlight> wherein the step of identifying translations of the identified user interface terms comprises performing a look-up in a software database of translations.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004923A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004923A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004923A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004923A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004923A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
