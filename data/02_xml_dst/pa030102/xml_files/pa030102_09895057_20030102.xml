<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005301A1-20030102-D00000.TIF SYSTEM "US20030005301A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00001.TIF SYSTEM "US20030005301A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00002.TIF SYSTEM "US20030005301A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00003.TIF SYSTEM "US20030005301A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00004.TIF SYSTEM "US20030005301A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00005.TIF SYSTEM "US20030005301A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00006.TIF SYSTEM "US20030005301A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00007.TIF SYSTEM "US20030005301A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00008.TIF SYSTEM "US20030005301A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00009.TIF SYSTEM "US20030005301A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00010.TIF SYSTEM "US20030005301A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00011.TIF SYSTEM "US20030005301A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00012.TIF SYSTEM "US20030005301A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005301A1-20030102-D00013.TIF SYSTEM "US20030005301A1-20030102-D00013.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005301</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895057</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>176000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Apparatus and method for enabling secure content decryption within a set-top box</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Curtis</given-name>
<middle-name>E.</middle-name>
<family-name>Jutzi</family-name>
</name>
<residence>
<residence-us>
<city>Lake Oswego</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Richard</given-name>
<middle-name>P.</middle-name>
<family-name>Mangold</family-name>
</name>
<residence>
<residence-us>
<city>Forest Grove</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ajit</given-name>
<middle-name>P.</middle-name>
<family-name>Joshi</family-name>
</name>
<residence>
<residence-us>
<city>Hillsboro</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus and method for enabling secure content decryption within a set-top box are described. The method includes performance of security authentication of a content driver by a content decryption component. Security authentication is performed in order to verify an identity of the content driver as a secure content driver. Next, the content decryption component receives an encrypted content stream from the secure content driver. Once received, the content decryption component performs integrity authentication of a run-time image of the secure content driver. Finally, while integrity authentication of the secure content driver is verified, the content decryption component streams decrypted content to the secure content driver to enable playback of the decrypted content to a user. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates generally to the field of set-top boxes. More particularly, the invention relates to a method and apparatus for enabling secure content decryption within a set-top box. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Broadcast systems traditionally transmit content from a broadcast server system to a plurality of client systems. Users of the client systems consume the content received from the broadcast server system as broadcast using, for example, a set-top box. For instance, cable television providers commonly broadcast the same movies repeatedly on multiple channels at staggered intervals. As such, users of the client systems, or set-top boxes, typically consume the content signals received from the server as they are broadcast. However, such broadcasts generally have the capability to generate additional revenues by broadcasting content, which is offered to users at a predetermined fee, which is normally referred as viewing on a pay-per-view basis, but also includes viewing via a subscription basis. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Unfortunately, when broadcasting premium content to client systems (e.g., Pay-Per-View, HBO, Showtime, etc.), the broadcast systems must ensure that premium content is not captured or pirated by client set-top boxes. As such, the broadcast systems traditionally transmit content in an encrypted format, which is streamed to the client set-top boxes. As a result, the client set-top boxes must include content decryption capability in order to enable playback of the content to users. In addition, current set-top boxes also include the capability to capture premium content, which is stored and may be viewed by a user at a later time using content playback capability of the set-top box. Accordingly, in such a set-top box environment, it is vital to prevent exposure of clear content on the set-top box, which may be pirated by a user. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Consequently, current decrypt solutions in the field labor at complying with industry standards robustness rules for avoiding exposure of clear content on a set-top box. Fortunately, avoiding exposure of clear content on a set-top is facilitated when a set-top box runs a proprietary operating system and a non-standard software architecture. Unfortunately, as we move into more advanced set-top box environments, operating systems utilized by the set-top boxes are becoming standardized. In addition, software environments and architectures running on these advanced set-top boxes are also becoming standardized. Consequently, this openness, or open system, facilitates development of features on set-top boxes, however, presents various challenges from a security standpoint. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Therefore, there remains a need to overcome one or more of the limitations in the above-described, existing art. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which: </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a block diagram illustrating a broadcast service system as known in the art. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a block diagram illustrating a computer system representative of a client within the broadcast service system as depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram illustrating a content playback interface of the client computer as depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a block diagram illustrating a broadcast service system utilizing client computers configured as depicted in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference> in accordance with an exemplary embodiment of the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a flowchart illustrating a method for enabling secure content decryption within a set-top box in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a flowchart illustrating an additional method for performing security authentication in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a flowchart illustrating an additional method for performing run-time integrity verification in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a flowchart illustrating an additional method for performing security authentication in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts a flowchart illustrating an additional method for performing run-time integrity verification in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a flowchart illustrating a method for initialization of a content decryption component in accordance with an exemplary embodiment of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> depicts a method for authenticating a secure content drive in order to receive clear, decrypted content in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts a flowchart illustrating an additional method for performing security authentication in accordance with a further embodiment of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> depicts a flowchart illustrating an additional method for the receipt of a stream of encrypted content in accordance with an exemplary embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The present invention describes an apparatus and method for enabling secure content decryption within a set-top box. The method includes performance of security authentication of a content driver by a content decryption component. Security authentication is performed in order to verify an identity of the content driver as a secure content driver. Next, the content decryption component receives an encrypted content stream from the secure content driver. Once received, the content decryption component performs integrity authentication of a run-time image of the secure content driver. Finally, while integrity authentication of the secure content driver is verified, the content decryption component streams decrypted content to the secure content driver to enable playback of the decrypted content to a user. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The method also includes establishment of security authentication from a content decryption component to verify a content driver as the secure content driver. Once verified, the secure content driver receives access to a callback function in order to receive clear, decrypted content streams from the content decryption component. Next, the secure content driver receives a stream of encrypted content. The content driver then streams the encrypted content to the content decryption component. Finally, assuming the secure content driver is successfully authenticated, the secure content driver receives clear, decrypted content from the content decryption component via the received callback function. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In addition, the following description provides examples, and the accompanying drawings show various examples for the purposes of illustration. However, these examples should not be construed in a limiting sense as they are merely intended to provide examples of the present invention rather than to provide an exhaustive list of all possible implementations of the present invention. In other instances, well-known structures and devices are shown in block diagram form in order to avoid obscuring the details of the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In an embodiment, the methods of the present invention are embodied in machine-executable instructions. The instructions can be used to cause a general-purpose or special-purpose processor that is programmed with the instructions to perform the steps of the present invention. Alternatively, the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The present invention may be provided as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic devices) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs (compact disc, read-only memory), and magneto-optical disks, ROMs (read-only memory), RAMs (random access memory), EPROMs (erasable programmable read-only memory), EEPROMs (electrically erasable programmable read-only memory), magnet or optical cards, flash memory, or other type of media/machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product. As such, the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection). </paragraph>
<paragraph id="P-0025" lvl="7"><number>&lsqb;0025&rsqb;</number> System Architecture </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an illustration of one embodiment of a conventional broadcast service system <highlight><bold>100</bold></highlight>, as known to those skilled in the art. The broadcast service system <highlight><bold>100</bold></highlight> includes a server <highlight><bold>102</bold></highlight> configured to broadcast encrypted content <highlight><bold>130</bold></highlight> to a plurality of clients <highlight><bold>104</bold></highlight> (<highlight><bold>104</bold></highlight>-<highlight><bold>1</bold></highlight>, . . . , <highlight><bold>104</bold></highlight>-N) via antenna <highlight><bold>110</bold></highlight>. The clients <highlight><bold>105</bold></highlight> receive a broadcast of the encrypted content from server <highlight><bold>102</bold></highlight> through a plurality of links <highlight><bold>120</bold></highlight> (<highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . , <highlight><bold>120</bold></highlight>-N) from a broadcast antenna <highlight><bold>110</bold></highlight>. Unfortunately, links <highlight><bold>120</bold></highlight> are unidirectional wireless radio frequency (RF) links from broadcast antenna <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In one embodiment, the broadcast service system <highlight><bold>100</bold></highlight> broadcasts the encrypted content <highlight><bold>130</bold></highlight> via the network <highlight><bold>140</bold></highlight> which provides a capability for enabling users of the client systems <highlight><bold>104</bold></highlight> to provide feedback to broadcasters with regard to programming. The format of such broadcasts is, for example but not limited to, known amplitude modification (AM) or frequency modification (FM) radio signals, television (TV) signals, digital video broadcasts (DVB) signals, advanced television systems committee (ATSC) signals, or the like, which are broadcast through the atmosphere. In addition, transmission of encrypted content via the network <highlight><bold>140</bold></highlight> is accomplished by conventional means, such as, for example, transmission control protocol (TCP)/Internet protocol (TCP/IP). </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Accordingly, the broadcast server may transmit encrypted content via broadcast antenna <highlight><bold>110</bold></highlight> or via the network <highlight><bold>140</bold></highlight> using, for example, TCP/IP. The encrypted content <highlight><bold>130</bold></highlight> may include, for example, any combination of a number of different types of content including for example video, audio, graphics, text, multimedia or the like. For purposes of explanation, many of the examples provided in this disclosure assume that the content to be transmitted by the server <highlight><bold>102</bold></highlight> are audio/video files, such as for example movies with moving images and sound. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> However, it will be appreciated that the content transmitted in accordance with the teachings of the present invention is not limited only to audio/video files. As described above, content, as contemplated by the present invention includes any combination of, for example, video, audio, graphics, text, multimedia or the like. In one embodiment, network <highlight><bold>140</bold></highlight> may be any type of communications network through which a plurality of different devices may communicate such as, but not limited to, the Internet, a wide area network (WAN), a local area network (LAN), an Intranet, an Extranet or the like. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating one embodiment of a machine <highlight><bold>200</bold></highlight> that may be used for the clients <highlight><bold>104</bold></highlight> in accordance with the teachings of the present invention. The machine <highlight><bold>200</bold></highlight> is, for example, a computer or a set top box that includes a processor <highlight><bold>202</bold></highlight> coupled to a bus <highlight><bold>206</bold></highlight>. The machine <highlight><bold>200</bold></highlight> includes a memory <highlight><bold>204</bold></highlight>, a storage <highlight><bold>210</bold></highlight>, a display controller <highlight><bold>208</bold></highlight>, a communications interface <highlight><bold>218</bold></highlight>, a content playback interface <highlight><bold>300</bold></highlight>, an input/output controller <highlight><bold>212</bold></highlight> and an audio controller <highlight><bold>220</bold></highlight> are also coupled to bus <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In one embodiment, machine <highlight><bold>200</bold></highlight> interfaces to external systems through communications interface <highlight><bold>218</bold></highlight>. Communications interface <highlight><bold>218</bold></highlight> may include, for example, a radio transceiver compatible with AM, FM, TV, digital TV, DVB, ATSC, wireless telephone signals or the like. Communications interface <highlight><bold>218</bold></highlight> may also include, for example, an analog modem, Integrated Services Digital Network (ISDN) modem, cable modem, Digital Subscriber Line (DSL) modem, a T-1 line interface, a T-3 line interface, an optical carrier interface (e.g. OC-3), token ring interface, satellite transmission interface, a wireless interface or other interfaces for coupling a device to other devices. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A carrier wave signal <highlight><bold>230</bold></highlight> including, for example, encrypted content <highlight><bold>130</bold></highlight> may be received by communications interface <highlight><bold>218</bold></highlight> from antenna <highlight><bold>110</bold></highlight>. In addition, a signal <highlight><bold>240</bold></highlight> may be received/transmitted between communications interface and network <highlight><bold>140</bold></highlight> including, for example, the encrypted content <highlight><bold>130</bold></highlight> as well as content meta-data, user response and data, or the like. The signal <highlight><bold>240</bold></highlight> may also be used to interface machine <highlight><bold>200</bold></highlight> with another computer system, a network hub, router or the like. The carrier wave signal <highlight><bold>230</bold></highlight> is, for example, considered to be machine readable media, which may be transmitted through wires, cables, optical fibers or through the atmosphere, or the like. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The processor <highlight><bold>202</bold></highlight> may be a conventional microprocessor, such as, for example, but not limited to an Intel x86 or Pentium family microprocessor, a Motorola family microprocessor, or the like. Memory <highlight><bold>204</bold></highlight> may be a machine readable medium such as dynamic random access memory (DRAM) and may include static random access memory (SRAM). Display controller <highlight><bold>208</bold></highlight> controls, in a conventional manner, a display <highlight><bold>216</bold></highlight>, which may be a cathode ray tube (CRT), a liquid crystal display (LCD), an active matrix display, a television monitor or the like. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The input/output device <highlight><bold>214</bold></highlight> coupled to input/output controller <highlight><bold>212</bold></highlight> may be, for example, a keyboard, disk drive, printer, scanner and other input and output devices, including a television remote, mouse, trackball, trackpad, joystick, or the like. In one embodiment, audio controller <highlight><bold>222</bold></highlight> controls in a conventional manner audio output <highlight><bold>224</bold></highlight>, which may include for example audio speakers, headphones, an audio receiver, amplifier or the like. In addition, the audio controller may also control, in a conventional manner, audio input <highlight><bold>229</bold></highlight>, which may include for example a microphone or input(s) from an audio or musical device, or the like. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The storage <highlight><bold>210</bold></highlight> may, for example, include machine readable media such as for example but not limited to a magnetic hard disk, a floppy disk, an optical disk, a smart card or another form of storage for data. Alternatively, the storage <highlight><bold>210</bold></highlight> may include, for example, removable media, read-only media, readable/writable media or the like. Some of the data may, for example, be written by a direct memory access process into memory <highlight><bold>204</bold></highlight> during execution of software in computer system <highlight><bold>201</bold></highlight>. It is appreciated that software may reside in storage <highlight><bold>210</bold></highlight>, memory <highlight><bold>204</bold></highlight> or may be transmitted or received via modem or the communications interface. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> For the purposes of the specification, the term &ldquo;machine readable medium&rdquo; shall be taken to include any medium that is capable of storing data, information or encoding a sequence of instructions for execution by processor <highlight><bold>202</bold></highlight> to cause processor <highlight><bold>202</bold></highlight> to perform the methodologies of the present invention. The term &ldquo;machine readable medium&rdquo; shall be taken to include, but is not limited to solid-state memories, optical and magnetic disks, carrier wave signals, and the like. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The machine <highlight><bold>200</bold></highlight> further includes a content playback interface <highlight><bold>300</bold></highlight>, which receives the encrypted content stream <highlight><bold>130</bold></highlight> from the communications interface <highlight><bold>218</bold></highlight> via the bus <highlight><bold>206</bold></highlight>. The content playback interface <highlight><bold>300</bold></highlight> is further illustrated with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The content playback interface <highlight><bold>300</bold></highlight> includes a playback user interface (UI) <highlight><bold>302</bold></highlight> which enables a user to provide a request for playback of received content that is contained within an application user space <highlight><bold>316</bold></highlight>. The playback interface <highlight><bold>300</bold></highlight> includes a content transfer at block <highlight><bold>304</bold></highlight> that interfaces with the communications interface <highlight><bold>218</bold></highlight> in order to receive the encrypted content stream <highlight><bold>130</bold></highlight>. Once received, the encrypted content stream may be stored in a content storage device <highlight><bold>306</bold></highlight>. Alternatively, the encrypted content is stored within the storage <highlight><bold>210</bold></highlight> or the memory <highlight><bold>204</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Accordingly, when the playback user interface <highlight><bold>302</bold></highlight> receives a request for playback of content, a content source file reader <highlight><bold>308</bold></highlight> selects the requested content from the content storage device <highlight><bold>306</bold></highlight>. The selected encrypted content <highlight><bold>130</bold></highlight> is provided to a content reader interface <highlight><bold>310</bold></highlight>. Once received, the content reader interface <highlight><bold>310</bold></highlight> provides the encrypted content stream <highlight><bold>130</bold></highlight> to a secure content driver <highlight><bold>320</bold></highlight>. Once provided, the content reader interface <highlight><bold>310</bold></highlight> directs the secure content driver <highlight><bold>320</bold></highlight>, via filter switch <highlight><bold>312</bold></highlight>, to stream the encrypted content to a content decryption component <highlight><bold>330</bold></highlight> in order to decrypt the received content. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> However, in order for the secure content driver <highlight><bold>320</bold></highlight> to receive decrypted content from the content decryption component <highlight><bold>330</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> must achieve successful security authentication at start-up from the content decryption component <highlight><bold>330</bold></highlight>, which are located within a kernel application space <highlight><bold>318</bold></highlight>. Accordingly, the content decryption component <highlight><bold>330</bold></highlight> resides in a secure, tamper-resistant software (TRS) environment in order to obfuscate the process of decrypting encrypted content streams <highlight><bold>130</bold></highlight> received from the secure content driver <highlight><bold>320</bold></highlight>. As such, during start-up of the content playback interface <highlight><bold>300</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> registers with the content decryption component <highlight><bold>330</bold></highlight> in order to receive security identity authentication. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In one embodiment, identity authentication is provided using the public key infrastructure. As known to those skilled in the art, the public key infrastructure (PKI) enables users of unsecure public networks, such as the Internet, to securely and privately exchange data and money through the use of a public and a private cryptographic key pair that is obtained and shared through a trusted authority. The public key infrastructure provides for a digital certificate that can identify an individual or an organization and directory of services that can store, and when necessary, revoke the certificates. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> As such, the content decryption component <highlight><bold>330</bold></highlight> may, in one embodiment, authenticate the identity of the secure content driver <highlight><bold>320</bold></highlight> utilizing a digital certificate issued to the secure content driver <highlight><bold>320</bold></highlight>. In addition, the content decryption component <highlight><bold>330</bold></highlight> must also authenticate integrity of a static image of the secure content driver <highlight><bold>320</bold></highlight>. This is, for example, accomplished using, in one embodiment, a digital signature of a static image of the secure content driver <highlight><bold>320</bold></highlight> prior to loading the secure content driver within memory <highlight><bold>204</bold></highlight>. Accordingly, using a digital signature of a static image of the secure content driver <highlight><bold>320</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> may compute a hash value of a static image of the secure content driver. Once computed, the content decryption component <highlight><bold>330</bold></highlight> verifies that the computed hash value matches a static hash value contained within the digital signature of the secure content driver <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In a further embodiment, the content decryption component <highlight><bold>330</bold></highlight> also provides for run-time integrity authentication of the secure content driver <highlight><bold>320</bold></highlight> utilizing a pre-stored run-time digital signature of the secure content driver <highlight><bold>320</bold></highlight>. In this embodiment, the content decryption component <highlight><bold>330</bold></highlight> generates a hash value of code segments that perform the functionality of the secure content driver <highlight><bold>320</bold></highlight> while loaded in memory. Next, the computed hash value is compared with a run-time hash value contained within the run-time digital signature. Consequently, the various security constraints utilized by the content decryption component <highlight><bold>330</bold></highlight> enable security verification of the content driver <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Accordingly, once security authentication is completed, the secure content driver <highlight><bold>320</bold></highlight> receives clear, decrypted content via a callback function <highlight><bold>332</bold></highlight> provided to the secure content driver <highlight><bold>320</bold></highlight>. However, the various security constraints taught by the present invention do not cause current playback solutions to be modified in any way. Due to the fact that there is a given content player (content source reader file reader <highlight><bold>308</bold></highlight> and content media interface <highlight><bold>310</bold></highlight>), no changes need to be made to the application user space <highlight><bold>316</bold></highlight> of current set-top boxes. As a result, the present invention requires modification of the kernel application space <highlight><bold>318</bold></highlight> for registering a secure content driver <highlight><bold>320</bold></highlight> with a tamper-resistant content decryption component <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a broadcast service system <highlight><bold>350</bold></highlight> utilizing clients <highlight><bold>352</bold></highlight> (<highlight><bold>352</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>352</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . , <highlight><bold>352</bold></highlight>-N), each configured as, for example, a set-top box as depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> utilizing a content playback interface <highlight><bold>300</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Accordingly, a server of the broadcast system <highlight><bold>350</bold></highlight> may broadcast or transmit encrypted content via broadcast antenna <highlight><bold>110</bold></highlight> or network <highlight><bold>140</bold></highlight> to the various clients <highlight><bold>352</bold></highlight>. As such, the various clients will receive the encrypted content <highlight><bold>130</bold></highlight> via communications interface <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Consequently, when a user desires playback of received content, the content playback interface <highlight><bold>300</bold></highlight> will decrypt the received encrypted content <highlight><bold>130</bold></highlight> using a content decryption component <highlight><bold>330</bold></highlight> and a secure content driver <highlight><bold>320</bold></highlight>. As a result, utilizing the teachings of the present invention, a broadcast service system <highlight><bold>350</bold></highlight> prevents unauthorized use or display of clear content, which may be pirated by users of the set-top box. Procedural methods for implementing the teachings of the present invention are now described. </paragraph>
<paragraph id="P-0046" lvl="7"><number>&lsqb;0046&rsqb;</number> Operation </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a flowchart illustrating a method <highlight><bold>400</bold></highlight> for enabling secure, dynamic content decryption on a set-top box, for example, within the broadcast service system <highlight><bold>350</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. At process block <highlight><bold>416</bold></highlight>, a content decryption component <highlight><bold>330</bold></highlight> performs security authentication of a content driver to verify authenticity of the content driver as a secure content driver <highlight><bold>320</bold></highlight>. Next, at process block <highlight><bold>436</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> receives a stream of encrypted content <highlight><bold>130</bold></highlight> from the secure content driver <highlight><bold>320</bold></highlight>. Once received, process block <highlight><bold>438</bold></highlight> is performed. At process block <highlight><bold>438</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> performs integrity authentication of a run-time image of the secure content driver <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Consequently, once integrity of the run-time image of the secure content driver <highlight><bold>320</bold></highlight> is authenticated, process block <highlight><bold>470</bold></highlight> is performed. Otherwise, the method <highlight><bold>400</bold></highlight> terminates. At process block <highlight><bold>470</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> streams decrypted content to the secure content driver <highlight><bold>320</bold></highlight>. Finally, at process block <highlight><bold>472</bold></highlight>, it is determined whether encrypted content continues to be received by the content decryption component <highlight><bold>330</bold></highlight>. Accordingly, process blocks <highlight><bold>438</bold></highlight>-<highlight><bold>470</bold></highlight> are repeated while encrypted content is streamed to the content decryption component <highlight><bold>330</bold></highlight>. Once encrypted content is not longer received, the process terminates. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a flowchart illustrating an additional method <highlight><bold>418</bold></highlight> for performing security authentication of process block <highlight><bold>416</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. At process block <highlight><bold>420</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> locates authorization information of the secure content driver <highlight><bold>320</bold></highlight>. In one embodiment, the authorization information is a digital certificate issued to the secure content driver <highlight><bold>320</bold></highlight>. At process block <highlight><bold>422</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> decrypts the authorization information received from the secure content driver <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In the embodiment described, a digital certificate received as the authorization information is decrypted using a public key of the secure content driver <highlight><bold>320</bold></highlight>. Once decrypted, process block <highlight><bold>424</bold></highlight> is performed. At process block <highlight><bold>420</bold></highlight>, it is determined whether an identity of the secure content driver <highlight><bold>320</bold></highlight> is authenticated based on the decrypted authorization information. When the content decryption component <highlight><bold>330</bold></highlight> fails to authenticate an identity of the secure content driver <highlight><bold>320</bold></highlight>, the method terminates. Otherwise, process block <highlight><bold>426</bold></highlight> is performed. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> At process block <highlight><bold>426</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> provides the secure content driver <highlight><bold>320</bold></highlight> with access to a callback function <highlight><bold>332</bold></highlight>. As such, once the secure content driver <highlight><bold>320</bold></highlight> has access to the callback function <highlight><bold>332</bold></highlight>, the secure content driver may receive clear, decrypted content from the content decryption component <highlight><bold>330</bold></highlight> via the callback function. Otherwise, regardless of whether the secure content driver <highlight><bold>320</bold></highlight> streams encrypted content to the content decryption component <highlight><bold>330</bold></highlight>, unless the secure content driver <highlight><bold>320</bold></highlight> has access to the callback function <highlight><bold>332</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> cannot receive the clear content. Once access to the callback function is received, control flow returns to process block <highlight><bold>416</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts an additional method <highlight><bold>440</bold></highlight> for performing run-time integrity authentication of process block <highlight><bold>438</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. At process block <highlight><bold>442</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> calculates a hash value of a static image of the secure content driver <highlight><bold>320</bold></highlight>. As described herein, the term &ldquo;static image&rdquo; refers to program instructions that perform the functionality of the secure content driver prior to loading of the program instructions within memory or at run-time. In one embodiment, hash values utilized by the present invention are calculated using the Rivas-Shamir-Adelman (RSA) authentication system. Once calculated, process block <highlight><bold>444</bold></highlight> is performed. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> At process block <highlight><bold>444</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> selects a stored digital signature of the static image of the secure content driver <highlight><bold>330</bold></highlight>. Next, at process block <highlight><bold>446</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> decrypts the stored digital signature of the static image to retrieve a pre-calculated hash value of the static image. Next, at process block <highlight><bold>448</bold></highlight>, it is determined whether the calculated hash value matches the pre-calculated hash value. When the hash values match, process block <highlight><bold>450</bold></highlight> is performed. Otherwise, the process terminates. At process block <highlight><bold>450</bold></highlight>, the content decryption component notifies the secure content driver <highlight><bold>330</bold></highlight> of successful security authentication. Next, control flow progresses to process block <highlight><bold>454</bold></highlight> of the method <highlight><bold>452</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a flowchart illustrating an additional method <highlight><bold>428</bold></highlight> for performing security authentication of process block <highlight><bold>416</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. At process block <highlight><bold>430</bold></highlight>, it is determined whether an identity of the secure content driver <highlight><bold>320</bold></highlight> is authenticated. Once authenticated, process block <highlight><bold>432</bold></highlight> is performed. Otherwise, the method terminates. At process block <highlight><bold>432</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> determines a run-time memory location wherein the content driver <highlight><bold>320</bold></highlight> is loaded once executed by the content playback interface <highlight><bold>300</bold></highlight>. Finally, at process block <highlight><bold>434</bold></highlight>, the content decryption component establishes a function entry point <highlight><bold>322</bold></highlight> from the secure content driver <highlight><bold>320</bold></highlight> in order to receive the stream of encrypted content from the secure content driver <highlight><bold>320</bold></highlight>. Once established, control flow returns to process block <highlight><bold>416</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts a flowchart illustrating an additional method <highlight><bold>452</bold></highlight> for performing run-time integrity authentication of process block <highlight><bold>438</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. At process block <highlight><bold>454</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> decrypts the encrypted content stream <highlight><bold>130</bold></highlight> received from the secure content driver <highlight><bold>320</bold></highlight>. Next, at process block <highlight><bold>456</bold></highlight>, the content decryption component calculates a hash value of code segments that perform functionality of the secure content driver <highlight><bold>320</bold></highlight> while loaded in memory. Once calculated, process block <highlight><bold>458</bold></highlight> is performed. At process block <highlight><bold>458</bold></highlight>, the content decryption component selects a stored run-time digital signature of a run-time image of the secure content driver. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As described herein, the term &ldquo;run-time image&rdquo; refers to program instructions that perform the functionality of the secure content driver <highlight><bold>320</bold></highlight> when loaded in memory. As such, the run-time image consists of the program instructions loaded in memory to perform the functionality of the secure content driver <highlight><bold>320</bold></highlight>. Once selected, process block <highlight><bold>460</bold></highlight> is performed. At process block <highlight><bold>460</bold></highlight>, the content decryption component <highlight><bold>330</bold></highlight> decrypts the selected digital signature to reveal a run-time hash value of a run-time image of the secure content driver <highlight><bold>320</bold></highlight>. Finally, at process block <highlight><bold>462</bold></highlight>, it is determined whether the calculated hash value matches the run-time hash value. When the hash values match, control flows to process block <highlight><bold>470</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Otherwise, the method terminates. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a flowchart illustrating a method <highlight><bold>402</bold></highlight> for initialization of the content decryption component <highlight><bold>330</bold></highlight> in accordance with an exemplary embodiment of the present invention. At process block <highlight><bold>404</bold></highlight>, it is determined whether the content decryption component <highlight><bold>330</bold></highlight> has received a content decryption key <highlight><bold>314</bold></highlight>. The content decryption key <highlight><bold>314</bold></highlight> enables the content decryption component to decrypt received encrypted content streams. In the embodiment described, only the content decryption component has access to the content decryption key which is receive using, for example, the PKI. Once received, process block <highlight><bold>406</bold></highlight> is performed. At process block <highlight><bold>406</bold></highlight>, the content decryption component stores the received content decryption key within the tamper-resistant software environment of the content decryption component <highlight><bold>330</bold></highlight>. Once stored, process block <highlight><bold>408</bold></highlight> is performed. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> At process block <highlight><bold>408</bold></highlight>, it is determined whether the content decryption component <highlight><bold>330</bold></highlight> has received a digital signature of a static image of the secure content driver <highlight><bold>320</bold></highlight>. Once received, the static digital signature of the secure content driver <highlight><bold>320</bold></highlight> is stored within the tamper-resistant software environment of the content decryption component <highlight><bold>330</bold></highlight> at process block <highlight><bold>410</bold></highlight>. At process block <highlight><bold>412</bold></highlight>, it is determined whether the content decryption component <highlight><bold>330</bold></highlight> has received a run-time digital signature of a run-time image of the secure content driver <highlight><bold>320</bold></highlight>. Once received, process block <highlight><bold>414</bold></highlight> is performed. At process block <highlight><bold>414</bold></highlight>, the received run-time digital signature is stored within the tamper-resistant software environment of the content decryption component <highlight><bold>330</bold></highlight>. Once stored, control flow branches to process block <highlight><bold>416</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, <cross-reference target="DRAWINGS">FIG. 11</cross-reference> depicts a flowchart illustrating a method <highlight><bold>500</bold></highlight> for establishment of security authentication by a secure content driver <highlight><bold>320</bold></highlight> in order to receive clear, decrypted content from the content decryption component <highlight><bold>330</bold></highlight>. At process block <highlight><bold>502</bold></highlight>, it is determined whether the secure content driver <highlight><bold>320</bold></highlight> has received security authentication from the content decryption component <highlight><bold>330</bold></highlight>. If security authentication is not received, the process terminates. Once successful security authentication is received, process block <highlight><bold>520</bold></highlight> is performed. At process block <highlight><bold>520</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> receives access to a callback function <highlight><bold>332</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> As described above, access to the callback function enables the secure content driver <highlight><bold>320</bold></highlight> to receive clear, decrypted content from the content decryption component <highlight><bold>332</bold></highlight>. Otherwise, clear content is not received, resulting in failure to playback content to a requesting user. Once received, process block <highlight><bold>522</bold></highlight> is performed. At process block <highlight><bold>522</bold></highlight>, it is determined whether the secure content driver <highlight><bold>320</bold></highlight> has received a stream of encrypted content. Once received, process block <highlight><bold>530</bold></highlight> is performed. At process block <highlight><bold>530</bold></highlight>, the content driver <highlight><bold>320</bold></highlight> streams the received encrypted content to the content decryption component <highlight><bold>330</bold></highlight>. Finally, at process block <highlight><bold>532</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> will receive a stream of clear, decrypted content from the content decryption component <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts a flowchart illustrating an additional method for achieving successful security authentication from the content decryption component <highlight><bold>330</bold></highlight>. At process block <highlight><bold>506</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> may receive a request for authorization information from the content decryption component <highlight><bold>330</bold></highlight>. As described above, the authorization information is, in one embodiment, a digital certificate issued to the secure content driver <highlight><bold>320</bold></highlight>. Once a request is received, process block <highlight><bold>508</bold></highlight> is performed. At process block <highlight><bold>508</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> transmits the requested authorization information to the requesting content decryption component <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Next, at process block <highlight><bold>510</bold></highlight>, it is determined whether security authentication is successfully established. When security authentication is established, process block <highlight><bold>512</bold></highlight> is performed. Otherwise, the process terminates. At process block <highlight><bold>512</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> provides the content decryption component <highlight><bold>330</bold></highlight> with a memory location wherein the secure content driver <highlight><bold>320</bold></highlight> program instructions are loaded at run-time. Finally, at process block <highlight><bold>514</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> provides the content decryption component <highlight><bold>330</bold></highlight> with a function entry point <highlight><bold>322</bold></highlight> for receiving the stream of encrypted content. Once provided, control flow branches to process block <highlight><bold>520</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Finally, referring to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 13</cross-reference> depicts a flow chart illustrating an additional method <highlight><bold>524</bold></highlight> performed once a stream of encrypted content is received at process block <highlight><bold>522</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. At process block <highlight><bold>526</bold></highlight>, the secure content driver <highlight><bold>320</bold></highlight> receives a stream of encrypted content from a content source reader <highlight><bold>310</bold></highlight>. Next, at process block <highlight><bold>528</bold></highlight>, a content reader interface <highlight><bold>310</bold></highlight> directs the secure content driver <highlight><bold>320</bold></highlight>, via filter switch <highlight><bold>312</bold></highlight>, to stream the received encrypted content to the content decryption component <highlight><bold>330</bold></highlight>. Once streamed, control flow branches to process block <highlight><bold>530</bold></highlight>, as depicted in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Accordingly, utilizing the teachings of the present invention, the content decryption component <highlight><bold>320</bold></highlight> ensures that a content driver is authenticated as a secure content driver <highlight><bold>330</bold></highlight> utilizing the various security authentication mechanisms as described herein. Once authenticated as a secure content driver <highlight><bold>320</bold></highlight>, both from an identity standpoint and a run-time integrity standpoint, the secure content driver <highlight><bold>320</bold></highlight> will stream encrypted content to the content decryption component <highlight><bold>330</bold></highlight>, which is decrypted by the content decryption component <highlight><bold>330</bold></highlight> and then streamed back to the secure content driver <highlight><bold>320</bold></highlight> via the callback function <highlight><bold>322</bold></highlight>. As a result, the secure content driver <highlight><bold>320</bold></highlight> may then provide the received, clear decrypted content to a content decode device <highlight><bold>340</bold></highlight>. In one embodiment, the content decode device <highlight><bold>340</bold></highlight> is a motion picture expert group <highlight><bold>2</bold></highlight> (MPEG-2) hardware decode chip. Once decoded, the content may be transmitted to display <highlight><bold>216</bold></highlight> in order to enable playback to the user. </paragraph>
<paragraph id="P-0065" lvl="7"><number>&lsqb;0065&rsqb;</number> Alternate Embodiments </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Several aspects of one implementation of a set-top box for providing secure, automated content decryption have been described. However, various implementations of the set-top box provide numerous features including, complementing, supplementing, and/or replacing the features described above. Features can be implemented as part of the set-top box or as part of a computer, digital video receiver, cable receiver, or the like in different implementations. In addition, the foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention. However, it will be apparent to one skilled in the art that the specific details are not required in order to practice the invention. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In addition, although an embodiment described herein is directed to a set-top box, it will be appreciated by those skilled in the art that the teaching of the present invention can be applied to other systems. In fact, systems for receipt of content streamed in a media streaming format are within the teachings of the present invention, without departing from the scope and spirit of the present invention. The embodiments described above were chosen and described in order to best explain the principles of the invention and its practical applications. These embodiment were chosen to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> It is to be understood that even though numerous characteristics and advantages of various embodiments of the present invention have been set forth in the foregoing description, together with details of the structure and function of various embodiments of the invention, this disclosure is illustrative only. In some cases, certain subassemblies are only described in detail with one such embodiment. Nevertheless, it is recognized and intended that such subassemblies may be used in other embodiments of the invention. Changes may be made in detail, especially matters of structure and management of parts within the principles of the present invention to the full extent indicated by the broad general meaning of the terms in which the appended claims are expressed. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The present invention provides many advantages over known techniques. The present invention includes the ability to avoid exposure of clear content on a set-top box, which utilizes an open environment including a standardized operating system, as well as standardized software environments and architectures. Moreover, the solution does not cause current playback solutions to be modified in any way. Due to the fact that there is a given content player, no changes need to be made to an application user space of current set-top boxes. As a result, the present invention only requires modification of a kernel application space for registering a secure content driver with a tamper-resistant content decryption component. Accordingly, application development time and time to market for a set-top box utilizing the teachings of the present invention are minimized. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Having disclosed exemplary embodiments and the best mode, modifications and variations may be made to the disclosed embodiments while remaining within the scope of the invention as defined by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>performing security authentication of a content driver in order to verify an identity of the content driver as a secure content driver; </claim-text>
<claim-text>receiving an encrypted content stream from the secure content driver; </claim-text>
<claim-text>performing integrity authentication of a run-time image of the secure content driver; and </claim-text>
<claim-text>while integrity authentication of the secure content driver is verified, streaming decrypted content to the secure content driver to enable playback of the decrypted content to a user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein performing security authentication further comprises: 
<claim-text>locating authorization information of the secure content driver; </claim-text>
<claim-text>decrypting the authorization information received from the secure content driver; </claim-text>
<claim-text>authenticating an identity of the secure content driver based on the decrypted authorization information; and </claim-text>
<claim-text>once the identity of the secure content driver is authenticated, providing the secure content driver with access to a callback function, such that access to the callback function enables the secure content driver to receive the decrypted content stream. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein authenticating the identity further comprises: 
<claim-text>calculating a hash value of a static image of the secure content driver prior to loading the secure content driver into memory; </claim-text>
<claim-text>selecting a stored digital signature of the static image; </claim-text>
<claim-text>decrypting the stored digital signature to retrieve a pre-calculated hash value of the secure content driver; </claim-text>
<claim-text>comparing the pre-calculated hash value with the calculated hash value; and </claim-text>
<claim-text>when the calculated hash value matches the pre-calculated hash value of the secure content driver, notifying the secure content driver of successful security authentication. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein performing security authentication further comprises: 
<claim-text>once security authentication of the content driver is established, determining a run-time at memory location of the secure content driver; and </claim-text>
<claim-text>establishing a function entry point for receiving the stream of encrypted content from the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>receiving a content decryption key in order to enable decryption of encrypted content streams received from the secure content driver; </claim-text>
<claim-text>receiving a digital signature of a static image of the secure content driver; and </claim-text>
<claim-text>receiving a digital signature of a run-time image of the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein performing integrity authentication further comprises: 
<claim-text>decrypting the encrypted content stream received from the secure content driver; </claim-text>
<claim-text>while decrypting the received encrypted content stream, performing a hash value calculation of code segments that perform functionality of the secure content driver while loaded in memory; </claim-text>
<claim-text>selecting a stored digital signature of a run-time image of the secure content driver; </claim-text>
<claim-text>decrypting the digital signature to reveal a run-time hash value; </claim-text>
<claim-text>comparing the computed hash value with the run-time hash value of the secure content driver; and </claim-text>
<claim-text>while the calculated hash value matches the run-time hash value of the secure content driver, repeating the decryption, the performing, the selecting and the comparing until decryption of the received encrypted content stream is complete. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method comprising: 
<claim-text>establishing security authentication from a content decryption component, such that a content driver is verified as a secure content driver; </claim-text>
<claim-text>when establishment of security authentication is successful, receiving access to a callback function in order to receive clear, decrypted content streams from the content decryption component; </claim-text>
<claim-text>receiving a stream of encrypted content; </claim-text>
<claim-text>streaming the encrypted content to the content decryption component; and </claim-text>
<claim-text>when security authentication is successfully established, receiving clear, decrypted content from the content decryption component via the received callback function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein establishing security verification further comprises: 
<claim-text>receiving a request for authorization information from the content decryption component; </claim-text>
<claim-text>transmitting the requested authorization information to the content decryption component; and </claim-text>
<claim-text>when security authentication is successfully established, receiving notification of successful security authentication from the content decryption component, such that the content driver is established as the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein establishing security authentication further comprises: 
<claim-text>once security authentication is established, providing content decryption component with a memory location wherein the secure content driver is loaded at run-time; and </claim-text>
<claim-text>providing the content decryption component with a function entry point for receiving the stream of encrypted content. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein receiving encrypted content further comprises: 
<claim-text>receiving encrypted content from a content source reader; and </claim-text>
<claim-text>receiving a direction from a content driver to stream the encrypted content to the content decryption component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A computer readable storage medium including program instruction that directs a computer to function in a specified manner when executed by a processor, the program instructions comprising: 
<claim-text>performing security authentication of a content driver in order to verify an identity of the content driver as a secure content driver; </claim-text>
<claim-text>receiving an encrypted content stream from the secure content driver; </claim-text>
<claim-text>performing integrity authentication of a run-time image of the secure content driver; and </claim-text>
<claim-text>while integrity authentication of the secure content driver is verified, streaming decrypted content to the secure content driver to enable playback of the decrypted content to a user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein performing security authentication further comprises: 
<claim-text>locating authorization information of the secure content driver; </claim-text>
<claim-text>decrypting the authorization information received from the secure content driver; </claim-text>
<claim-text>authenticating an identity of the secure content driver based on the decrypted authorization information; and </claim-text>
<claim-text>once the identity of the secure content driver is authenticated, providing the secure content driver with access to a callback function, such that access to the callback function enables the secure content driver to receive the decrypted content stream. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein authenticating the identity further comprises: 
<claim-text>calculating a hash value of a static image of the secure content driver prior to loading the secure content driver into memory; </claim-text>
<claim-text>selecting a stored digital signature of the static image; </claim-text>
<claim-text>decrypting the stored digital signature to retrieve a pre-calculated hash value of the secure content driver; </claim-text>
<claim-text>comparing the pre-calculated hash value with the calculated hash value; and </claim-text>
<claim-text>when the calculated hash value matches the pre-calculated hash value of the secure content driver, notifying the secure content driver of successful security authentication. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein performing security authentication further comprises: 
<claim-text>once security authentication of the content driver is established, determining a run-time at memory location of the secure content driver; and </claim-text>
<claim-text>establishing a function entry point for receiving the stream of encrypted content from the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>receiving a content decryption key in order to enable decryption of encrypted content streams received from the secure content driver; </claim-text>
<claim-text>receiving a digital signature of a static image of the secure content driver; and </claim-text>
<claim-text>receiving a digital signature of a run-time image of the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein performing integrity authentication further comprises: 
<claim-text>decrypting the encrypted content stream received from the secure content driver; </claim-text>
<claim-text>while decrypting the received encrypted content stream, performing a hash value calculation of code segments that perform functionality of the secure content driver while loaded in memory; </claim-text>
<claim-text>selecting a stored digital signature of a run-time image of the secure content driver; </claim-text>
<claim-text>decrypting the digital signature to reveal a run-time hash value; </claim-text>
<claim-text>comparing the computed hash value with the run-time hash value of the secure content driver; and </claim-text>
<claim-text>while the calculated hash value matches the run-time hash value of the secure content driver, repeating the decryption, the performing, the selecting and the comparing until decryption of the received encrypted content stream is complete. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer readable storage medium including program instruction that directs a computer to function in a specified manner when executed by a processor, the program instructions comprising: 
<claim-text>establishing security authentication from a content decryption component, such that a content driver is verified as a secure content driver; </claim-text>
<claim-text>when establishment of security authentication is successful, receiving access to a callback function in order to receive clear, decrypted content streams from the content decryption component; </claim-text>
<claim-text>receiving a stream of encrypted content; </claim-text>
<claim-text>streaming the encrypted content to the content decryption component; and </claim-text>
<claim-text>when security authentication is successfully established, receiving clear, decrypted content from the content decryption component via the received callback function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein establishing security verification further comprises: 
<claim-text>receiving a request for authorization information from the content decryption component; </claim-text>
<claim-text>transmitting the requested authorization information to the content decryption component; and </claim-text>
<claim-text>when security authentication is successfully established, receiving notification of successful security authentication from the content decryption component, such that the content driver is established as the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein establishing security authentication further comprises: 
<claim-text>once security authentication is established, providing content decryption component with a memory location wherein the secure content driver is loaded at run-time; and </claim-text>
<claim-text>providing the content decryption component with a function entry point for receiving the stream of encrypted content. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein receiving encrypted content further comprises: 
<claim-text>receiving encrypted content from a content source reader; and </claim-text>
<claim-text>receiving a direction from a content driver to stream the encrypted content to the content decryption component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. An apparatus, comprising: 
<claim-text>a processor having circuitry to execute instructions; </claim-text>
<claim-text>a content play-back interface coupled to the processor, the content play-back interface to receive encrypted content, and to enable play-back of the received encrypted content to a user; and </claim-text>
<claim-text>a storage device coupled to the processor, having sequences of instructions stored therein, which when executed by the processor cause the processor to: 
<claim-text>perform security authentication of a content driver in order to verify an identity of the content driver as a secure content driver, </claim-text>
<claim-text>receive an encrypted content stream from the secure content driver, </claim-text>
<claim-text>perform integrity authentication of a run-time image of the secure content driver, and </claim-text>
<claim-text>while integrity authentication of the secure content driver is verified, stream decrypted content to the secure content driver to enable playback of the decrypted content to a user. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to perform security authentication further comprises the processor to: 
<claim-text>locate authorization information of the secure content driver, </claim-text>
<claim-text>decrypt the authorization information received from the secure content driver, </claim-text>
<claim-text>authenticate an identity of the secure content driver based on the decrypted authorization information, and </claim-text>
<claim-text>once the identity of the secure content driver is authenticated, provide the secure content driver with access to a callback function, such that access to the callback function enables the secure content driver to receive the decrypted content stream. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the instruction to perform security authentication further comprises the processor to: 
<claim-text>calculate a hash value of a static image of the secure content driver prior to loading the secure content driver into memory, </claim-text>
<claim-text>select a stored digital signature of the static image, </claim-text>
<claim-text>decrypt the digital signature to retrieve a pre-calculated hash value of the secure content driver, </claim-text>
<claim-text>compare the pre-calculated hash value with the calculated hash value, and </claim-text>
<claim-text>when the calculated hash value matches the pre-calculated hash value of the secure content driver, notify the secure content driver of successful security authentication. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to perform security authentication further comprises the processor to: 
<claim-text>once security authentication of the content driver is established, determine a run-time at memory location of the secure content driver, and </claim-text>
<claim-text>establish a function entry point for receiving the stream of encrypted content from the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the processor is further caused to: 
<claim-text>receive a content decryption key in order to enable decryption of encrypted content streams received from the secure content driver, </claim-text>
<claim-text>receive a digital signature of a static image of the secure content driver, and </claim-text>
<claim-text>receive a digital signature of a run-time image of the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to perform security authentication further comprises the processor to: 
<claim-text>decrypt the encrypted content stream received from the secure content driver, </claim-text>
<claim-text>while decrypting the received encrypted content stream, perform a hash value calculation of code segments that perform functionality of the secure content driver while loaded in memory, </claim-text>
<claim-text>select a stored digital signature of a run-time image of the secure content driver, </claim-text>
<claim-text>decrypt the digital signature to reveal a run-time hash value, </claim-text>
<claim-text>compare the computed hash value with the run-time hash value of the secure content driver, and </claim-text>
<claim-text>while the calculated hash value matches the run-time hash value of the secure content driver, repeat the decryption, the performing, the selecting and the comparing until decryption of the received encrypted content stream is complete. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the processor is further caused to: 
<claim-text>establish security authentication from a content decryption component, such that a content driver is verified as a secure content driver, </claim-text>
<claim-text>when establishment of security authentication is successful, receive access to a callback function in order to receive clear, decrypted content streams from the content decryption component, </claim-text>
<claim-text>receive a stream of encrypted content, </claim-text>
<claim-text>stream the encrypted content to the content decryption component, and </claim-text>
<claim-text>when security authentication is successfully established, receive clear, decrypted content from the content decryption component via the received callback function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to establish security verification further comprises the processor to: 
<claim-text>receive a request for authorization information from the content decryption component, </claim-text>
<claim-text>transmit the requested authorization information to the content decryption component, and </claim-text>
<claim-text>when security authentication is successfully established, receive notification of successful security authentication from the content decryption component, such that the content driver is established as the secure content driver. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to establish security authentication further comprises the processor to: 
<claim-text>once security authentication is established, provide content decryption component with a memory location wherein the secure content driver is loaded at run-time, and </claim-text>
<claim-text>provide the content decryption component with a function entry point for receiving the stream of encrypted content. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instruction to receive encrypted content further comprises the processor to: 
<claim-text>receive encrypted content from a content source reader, and </claim-text>
<claim-text>receive a direction from a content driver to stream the encrypted content to the content decryption component.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005301A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005301A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005301A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005301A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005301A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005301A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005301A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005301A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005301A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005301A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005301A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005301A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005301A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005301A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
