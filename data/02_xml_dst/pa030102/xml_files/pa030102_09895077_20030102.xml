<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004956A1-20030102-D00000.TIF SYSTEM "US20030004956A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00001.TIF SYSTEM "US20030004956A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00002.TIF SYSTEM "US20030004956A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00003.TIF SYSTEM "US20030004956A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00004.TIF SYSTEM "US20030004956A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00005.TIF SYSTEM "US20030004956A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00006.TIF SYSTEM "US20030004956A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00007.TIF SYSTEM "US20030004956A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00008.TIF SYSTEM "US20030004956A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00009.TIF SYSTEM "US20030004956A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00010.TIF SYSTEM "US20030004956A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00011.TIF SYSTEM "US20030004956A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00012.TIF SYSTEM "US20030004956A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00013.TIF SYSTEM "US20030004956A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00014.TIF SYSTEM "US20030004956A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00015.TIF SYSTEM "US20030004956A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004956A1-20030102-D00016.TIF SYSTEM "US20030004956A1-20030102-D00016.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004956</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895077</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010702</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>100000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Methods and system for efficient association traversals</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Thomas</given-name>
<middle-name>V.</middle-name>
<family-name>Johnson</family-name>
</name>
<residence>
<residence-us>
<city>Burlington</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Zane</given-name>
<middle-name>Zheng Yan</middle-name>
<family-name>Pan</family-name>
</name>
<residence>
<residence-us>
<city>Lexington</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Charles</given-name>
<middle-name>C.</middle-name>
<family-name>Ting</family-name>
</name>
<residence>
<residence-us>
<city>Wayland</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Sun Microsystems, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>FINNEGAN, HENDERSON, FARABOW, GARRETT &amp;</name-1>
<name-2>DUNNER LLP</name-2>
<address>
<address-1>1300 I STREET, NW</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20006</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Methods and systems are provided for performing efficient association traversal operations in a Common Information Model (CIM) implemented environment. A CIM Object Manager creates and defines instance objects and corresponding association objects in a repository. The CIM Object Manager creates wrappers for each object that include reverse links that show the relationship from an object to any corresponding association objects. When a relationship request for a selected object is received by the CIM Object Manager, it performs an association traversal operation using the reverse links stored in the repository. The CIM Object Manager locates the target object&apos;s wrapper in the repository, and collects relationship information from the reverse links included within the wrapper. The collected relationship information is then passed to the entity that initiated the request. Accordingly, efficient association traversals may be performed, without having to traverse each instance of defined association objects. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to Common Information Model (CIM) environments and, more particularly, to methods and systems for performing efficient association traversals. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Background of the Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The Common Information Model (CIM) is a common data model of a schema for describing the management of information in a network environment. The model is not bound to a particular implementation and enables distributed system management to take place between management systems and applications. The CIM enables applications to be built using management data from a plurality of management systems. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A CIM typically consists of two parts, a CIM specification and a CIM schema. The CIM specification describes the language, naming and mapping to other management models, while the CIM schema provides the model descriptions. The CIM schema includes a set of classes with properties and associations that are used to organize information about a managed system. The CIM schema is separated into three layers: a core model; a common model; and an extension schema. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The core model contains a set of classes that are associated with a plurality of management domains. The common model is a model having a lower level than the core model, and provides base classes that are associated with certain management areas, yet not specific to a particular technology. The base classes allow for extensions into specific areas of technology. The extension schema defines technology specific extensions to the common model. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The CIM is based on object-oriented modeling techniques. The Unified Modeling Language (UML) is generally used to construct an object oriented model. An exemplary model including UML representations is presented in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown, a class <highlight><bold>110</bold></highlight> may have properties <highlight><bold>120</bold></highlight> and methods <highlight><bold>130</bold></highlight>. Properties <highlight><bold>120</bold></highlight> are values used to represent certain characteristics of class <highlight><bold>110</bold></highlight>, such as a unit of data. Methods <highlight><bold>130</bold></highlight> represent behavior characteristics of class <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Classes may be associated with subclasses that inherit characteristics from respective classes. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight> have a hierarchical relationship with class <highlight><bold>110</bold></highlight>, represented by the link <highlight><bold>115</bold></highlight>. Thus, subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight> include the characteristics of class <highlight><bold>110</bold></highlight>, with additional characteristics uniquely defined for each subclass. A relationship between objects in a hierarchical model may also be defined between peers, such as subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight>. Such a relationship is represented by an association in the CIM. An association is a class that comprises two or more references. References are basically pointers to other objects and define the role each object plays in an association. An association allows the CIM schema to establish a relationship between objects without affecting the objects themselves. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an association <highlight><bold>160</bold></highlight> establishes a relationship between subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight>. The association <highlight><bold>160</bold></highlight> has two references. One reference <highlight><bold>165</bold></highlight> is directed to subclass <highlight><bold>150</bold></highlight>, while another reference <highlight><bold>167</bold></highlight> is directed to subclass <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In the CIM model, only associations have knowledge of relationships between classes. With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, only association <highlight><bold>160</bold></highlight> has knowledge that subclass <highlight><bold>150</bold></highlight> is related to subclass <highlight><bold>140</bold></highlight> via references <highlight><bold>165</bold></highlight> and <highlight><bold>167</bold></highlight>, respectively. Subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight>, however, have no information indicating to either association <highlight><bold>160</bold></highlight> or subclass <highlight><bold>150</bold></highlight>. Likewise, subclass <highlight><bold>150</bold></highlight> has no reference to either association <highlight><bold>160</bold></highlight> or subclass <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> While <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates subclasses dependent upon a base class, other objects may be defined as well. For example, an instance may be defined that also inherits characteristics from an object it depends upon. An instance is a representation of a managed object that belongs to a particular class, or occurrence of an event. That is, an instance of a class includes real data that relates to a real world managed object. For example, suppose class <highlight><bold>110</bold></highlight> represents a class labeled CAR, and includes the inherent base characteristics for such a class. An instance of class <highlight><bold>110</bold></highlight> may represent, for example, a car driven by a particular driver. Another instance may represent a particular make of the car class <highlight><bold>110</bold></highlight>. As described, objects such as instances are defined dynamically as the CIM schema grows. Each time an object is defined, any relationships between the newly object defined and existing objects are generally maintained in it the form of an association. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> While the use of associations introduces a method for relating objects, a problem may occur when the relationship between the objects is requested by an application. In the CIM, the link information for an association and its referenced objects is stored with the association instance. That is, referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, references <highlight><bold>165</bold></highlight> and <highlight><bold>167</bold></highlight>, which define the relationship between subclasses <highlight><bold>140</bold></highlight>, <highlight><bold>150</bold></highlight> and association <highlight><bold>160</bold></highlight>, are located with association <highlight><bold>160</bold></highlight>. Therefore, in order to collect relationship information regarding subclasses <highlight><bold>140</bold></highlight> and <highlight><bold>150</bold></highlight>, association <highlight><bold>160</bold></highlight> would have to be examined (traversed). As a result, in order to determine if there is a relationship between any two or more objects, each instance of all associations defined in a CIM schema would need to be examined to determine the existence of any related objects. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In a conventional CIM schema, there is no way to recognize a relationship between two or more instances that are &ldquo;separated&rdquo; by intermediate associations. As an example, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, an instance of a particular class <highlight><bold>210</bold></highlight> is related another instance <highlight><bold>220</bold></highlight> by an association <highlight><bold>215</bold></highlight>. Instance <highlight><bold>220</bold></highlight> has a plurality of relationships with instances <highlight><bold>230</bold></highlight>, <highlight><bold>240</bold></highlight> and <highlight><bold>250</bold></highlight>, represented by associations <highlight><bold>222</bold></highlight>, <highlight><bold>224</bold></highlight> and <highlight><bold>226</bold></highlight>, respectively. Instances <highlight><bold>230</bold></highlight>, <highlight><bold>240</bold></highlight> and <highlight><bold>250</bold></highlight> each are separate instances of class <highlight><bold>1</bold></highlight>, while associations <highlight><bold>215</bold></highlight>, <highlight><bold>222</bold></highlight>, <highlight><bold>224</bold></highlight> and <highlight><bold>226</bold></highlight> are separate instances of a class association A-<highlight><bold>1</bold></highlight>. In the conventional CIM schema depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in order to find the relationship between instance <highlight><bold>210</bold></highlight> and any of instances <highlight><bold>230</bold></highlight>, <highlight><bold>240</bold></highlight> and <highlight><bold>250</bold></highlight>, all associations <highlight><bold>215</bold></highlight>, <highlight><bold>222</bold></highlight>, <highlight><bold>224</bold></highlight> and <highlight><bold>226</bold></highlight> must be examined to identify the desired relationship. In the event a request to determine all instances associated with instance <highlight><bold>210</bold></highlight> is made (such as instances <highlight><bold>220</bold></highlight>, <highlight><bold>230</bold></highlight>, <highlight><bold>240</bold></highlight> and <highlight><bold>250</bold></highlight>), all associations related to instance <highlight><bold>210</bold></highlight> would have to be examined to determine which objects relate to instance <highlight><bold>210</bold></highlight>. This technique is extremely inefficient, especially in a well established schema with a complex hierarchy. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> It is therefore desirable to provide a method and system that enable the relationship between objects in a CIM implemented system to be realized without having to traverse each instance of an association. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Methods, systems and articles of manufacture consistent with the present invention enable a CIM Object Manager (CIMOM) to create and store reverse links from an object to an association. The CIM Object Manager may then subsequently use the reverse links to efficiently determine the objects associated to a given input object, such as an instance of a class. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In accordance with an aspect of the invention, clients initiate requests to create classes and instances. The requests may be sent through a network to a server node that incorporates a CIM Object Manager that performs CIM object management functions. The CIM Object Manager processes the requests, creates the classes and instances for each class, and stores them in a CIM Object Manager repository. The CIM Object Manager creates wrappers for each instance of each class stored in the repository. The wrappers are accessible only by the CIM Object Manager, and do not interfere with object definitions. The wrappers provide knowledge to a class instance outside the object definition itself, of what relationships it participates in. In one aspect of the invention, the wrappers for each class instance point to a second level table for each association class that references the class instance. The CIM Object Manager defines association instances for each class instance that has a relationship with another class instance. In addition to creating and storing association instances in the repository, the CIM Object Manager creates references within each wrapper of a class instance. In another aspect of the invention, the wrappers for each class instance point to a second level table that contains references directed to the association class instances that reference the class instance. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> When the server node receives a client request for the relationship for a specific instance of a class, the CIM Object Manager accesses the reverse links stored in the wrapper of the instance associated with the request, or alternatively stored in the second level tables. The CIM Object Manager uses the reverse links to determine the relationship between the requested instance, and any other associated objects. The server node then sends the relationship information to the client. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Accordingly, methods, systems and articles of manufacture consistent with the present invention enable association traversal requests to be handled without having to traverse each instance of the associations defined in an object repository. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Additional features of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several embodiments of the invention and together with the description, serve to explain the principles of the invention. In the drawings: </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary conventional object oriented model; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary conventional CIM hierarchy; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of a CIM based network, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of the CIM Object Manager repository illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a block diagram of an exemplary CIM hierarchy, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a block diagram of wrapper tables associated with the CIM hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> is a block diagram of an exemplary CIM hierarchy, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5D and 5E</cross-reference> are block diagrams of wrapper tables associated with the CIM hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>C, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a block diagram of an exemplary CIM hierarchy, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> is a block diagram of wrapper tables associated with the CIM hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> is another block diagram of wrapper tables associated with the CIM hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6D</cross-reference> is a block diagram of the exemplary CIM hierarchy shown in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> when another instance is added to the hierarchy, in accordance with methods and systems consistent with features of the present invention </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6E</cross-reference> is a block diagram of wrapper tables associated with the CIM hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>D, in accordance with methods and systems consistent with features of the present invention; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an exemplary flow chart of a process performed by the CIM Object Manager associated with the creation of new instances, in accordance with methods and systems consistent with features of the present invention; and </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart showing association traversal operations, in accordance with methods and system consistent with features of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The following description of embodiments of this invention refers to the accompanying drawings. Where appropriate, the same reference numbers in different drawings refer to the same or similar elements. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In accordance with an aspect of the present invention, clients initiate CIM requests to create objects, generally, instances. The requests are received, via a network, at an object manager node incorporating a CIM Object Manager. The CIM Object Manager processes the requests and defines the objects stipulated in the client requests, and stores the definitions in a CIM Object Manager repository. Wrappers are then created for each defined object, and also are stored in the repository. The CIM Object Manager then defines associations related to the objects defined in the repository. For each association that is defined in the repository, the CIM Object Manager creates a reverse link that shows a reverse reference from each object to its respective associations. Thus, when a client initiates a relationship request associated with a particular object, the CIM Object Manager utilizes the reverse links to process the request. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The requests may be generated based on an operation defined by a Web Based Enterprise Management (WBEM) specification. WBEM is an initiative that provides standard based management tools for creating a compatible computing environment for technologies like CIM and eXtensible Markup Language (XML). The requests may include a standard association traversal request. An Object Manager, among other standard management operations, also includes a predefined association traversal operation. This operation enables the Object Manager to traverse all associations of a given object. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an exemplary system implementing the CIM association traversal techniques consistent with the present invention. As shown, the exemplary system comprises a Java&trade; Virtual Machine (JVM) <highlight><bold>330</bold></highlight>, a network <highlight><bold>310</bold></highlight> and clients <highlight><bold>320</bold></highlight>. JVM <highlight><bold>330</bold></highlight> further comprises a CIM Object Manager <highlight><bold>340</bold></highlight> and repository <highlight><bold>350</bold></highlight>. JVM <highlight><bold>330</bold></highlight> may operate on a conventional computer system (not shown) such as an IBM PS/2 personal computer but is not limited to any particular system. JVM <highlight><bold>330</bold></highlight>, may operate on any number of computer systems such as network computers, workstations, and even mainframe computers having architectures dissimilar to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A client <highlight><bold>320</bold></highlight> is a computer system that may use the Java&trade; programming language and Java&trade; virtual machine architecture. A client <highlight><bold>320</bold></highlight> utilizes objects managed by JVM <highlight><bold>330</bold></highlight>, by initiating requests, which may be facilitated through network <highlight><bold>310</bold></highlight>. A client <highlight><bold>320</bold></highlight> may also initiate requests for the creation of new objects to be defined in repository <highlight><bold>350</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> JVM <highlight><bold>330</bold></highlight> is a microprocessor implemented in software that runs using the capabilities provided by an operating system and computer hardware associated with the computer system that JVM <highlight><bold>330</bold></highlight> is implemented with. JVM <highlight><bold>330</bold></highlight> acts as an interpreter between Java&trade; bytecodes and the particular computer system (not shown) employing the JVM <highlight><bold>330</bold></highlight>. Bytecodes are compiled Java&trade; source code created using the Java&trade; programming language. The Java&trade; programming language is platform-independent, thus its utility is not bound to one particular platform (i.e., operating system and hardware). The advantages of a Java&trade; virtual machine architecture is that the virtual machine can be implemented in software in a variety of operating systems and hardware. Implementing a JVM on a particular platform enables the bytecodes to run without recompiling them. This is useful in a network that interconnects heterogeneous systems, such as the Internet. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> JVM <highlight><bold>330</bold></highlight> accepts requests from clients <highlight><bold>320</bold></highlight> for objects, including classes and S instances, defined in repository <highlight><bold>350</bold></highlight>. These requests are interpreted and managed by CIM Object Manager <highlight><bold>340</bold></highlight>. CIM Object Manager <highlight><bold>340</bold></highlight> is a CIM managing component that facilitates the interaction between a client <highlight><bold>320</bold></highlight> and management applications. CIM Object Manager <highlight><bold>340</bold></highlight> handles CIM based requests sent from clients <highlight><bold>320</bold></highlight>, and manages repository <highlight><bold>350</bold></highlight>. CIM Object Manager <highlight><bold>340</bold></highlight> defines classes, instances, associations, wrappers and reverse links. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Repository <highlight><bold>350</bold></highlight> is a storage area managed by CIM Object Manager <highlight><bold>340</bold></highlight>. Repository <highlight><bold>350</bold></highlight> stores the definitions of classes, instances, associations, wrappers and reverse links created by CIM Object Manager <highlight><bold>340</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Network <highlight><bold>310</bold></highlight> connects JVM <highlight><bold>330</bold></highlight> and clients <highlight><bold>320</bold></highlight>, and may include one or more communication networks, including the Internet or any other similar network known in the art. Communication protocols used between elements connected to the network may be, but are not limited to XML, HTTP and TCP/IP. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Although <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a network interconnecting JVM <highlight><bold>330</bold></highlight> and clients <highlight><bold>320</bold></highlight>, it is understood that clients <highlight><bold>320</bold></highlight> and JVM <highlight><bold>330</bold></highlight> may be implemented in common system environment that does not require a network for the exchange of information. Furthermore, clients may include processes operating within the common system environment. Additionally, it should be understood that features and principles of the present invention need not be implemented as depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. That is, the repository <highlight><bold>350</bold></highlight> and Object Manager <highlight><bold>340</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, are exemplary and is not intended to be limiting. For example, the repository <highlight><bold>350</bold></highlight> and object manager <highlight><bold>340</bold></highlight> need not be implemented with a virtual machine or a CIM environment, but may operate with other types of object-oriented processes that operate in a manner consistent with features and principles of the present invention. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an exemplary block diagram of repository <highlight><bold>350</bold></highlight>. As shown, repository <highlight><bold>350</bold></highlight> contains a plurality of defined objects <highlight><bold>420</bold></highlight>, <highlight><bold>450</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the objects represented are instances <highlight><bold>450</bold></highlight>A-<highlight><bold>450</bold></highlight>J of a first class defined in repository <highlight><bold>350</bold></highlight>. Instances <highlight><bold>420</bold></highlight>A and <highlight><bold>420</bold></highlight>B, for exemplary purposes, represent instances of a second class defined in repository <highlight><bold>350</bold></highlight>. Each instance may be associated with an association <highlight><bold>430</bold></highlight> that represents a relationship between objects. For example, instances <highlight><bold>420</bold></highlight>A and instance <highlight><bold>450</bold></highlight>A have an association <highlight><bold>430</bold></highlight>-<highlight><bold>1</bold></highlight> establishing a relationship between these two objects. Associations <highlight><bold>430</bold></highlight> are considered classes in the CIM, and provide links <highlight><bold>460</bold></highlight> (represented as solid line arrows) to an object, such as instance <highlight><bold>420</bold></highlight> or instance <highlight><bold>450</bold></highlight>. Each association class in turn may have instances defined as well. Thus, the associations <highlight><bold>430</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, may represent instances of a single association class. Links <highlight><bold>460</bold></highlight> point to instances and reflect a relationship between them. For example, instance <highlight><bold>450</bold></highlight>A and instance <highlight><bold>450</bold></highlight>F have a defined association <highlight><bold>430</bold></highlight>-<highlight><bold>2</bold></highlight> between them. Link <highlight><bold>460</bold></highlight>-<highlight><bold>1</bold></highlight> defines a reference from association <highlight><bold>430</bold></highlight>-<highlight><bold>2</bold></highlight> to instance <highlight><bold>450</bold></highlight>A, and link <highlight><bold>460</bold></highlight>-<highlight><bold>2</bold></highlight> defines a reference from the association <highlight><bold>430</bold></highlight>-<highlight><bold>2</bold></highlight> to instance <highlight><bold>450</bold></highlight>F. Repository <highlight><bold>350</bold></highlight> also includes wrappers <highlight><bold>410</bold></highlight> for each instance, <highlight><bold>420</bold></highlight> and <highlight><bold>450</bold></highlight>. Wrappers <highlight><bold>410</bold></highlight> are locally maintained tables that are specific to an instance it &ldquo;wraps.&rdquo; As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, each wrapper (depicted as the shaded area surrounding an instance) &ldquo;wraps&rdquo; around an instance <highlight><bold>420</bold></highlight> or instance <highlight><bold>450</bold></highlight>. These wrappers may also be referred to as instance wrappers. Wrappers <highlight><bold>410</bold></highlight> will be described in further detail below with respect to FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>D and <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>E. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Each wrapper <highlight><bold>410</bold></highlight> defines reverse links <highlight><bold>440</bold></highlight> (represented as dotted line arrows) that provide references from each instance <highlight><bold>420</bold></highlight>, <highlight><bold>450</bold></highlight> to a respective association instance <highlight><bold>430</bold></highlight>. For example, in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the association instance <highlight><bold>430</bold></highlight>-<highlight><bold>1</bold></highlight> shown between instances <highlight><bold>420</bold></highlight>B and <highlight><bold>420</bold></highlight>A receives reverse links <highlight><bold>440</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>440</bold></highlight>-<highlight><bold>2</bold></highlight> that reference the relationships from instances <highlight><bold>420</bold></highlight>B, <highlight><bold>420</bold></highlight>A to the association instance <highlight><bold>430</bold></highlight>-<highlight><bold>1</bold></highlight>, respectively. It should be noted that the objects shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> are exemplary, and any number of objects and hierarchical relationships may be defined in the repository by CIM Object Manager <highlight><bold>340</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> CIM Object Manager <highlight><bold>340</bold></highlight> establishes and manages the definitions of instances <highlight><bold>420</bold></highlight>, <highlight><bold>450</bold></highlight>, associations instances <highlight><bold>430</bold></highlight>, links <highlight><bold>460</bold></highlight>, wrappers <highlight><bold>410</bold></highlight> and reverse links <highlight><bold>440</bold></highlight>. Each time an instance is created in repository <highlight><bold>350</bold></highlight>, CIM Object Manager <highlight><bold>340</bold></highlight> generates associations <highlight><bold>430</bold></highlight> based on the hierarchical relationship associated with each defined object. In turn, whenever an association is defined, CIM Object Manager generates reverse links within each respective wrapper. FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>D illustrate this process, in accordance with one aspect of the invention. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> shows a CIM model similar to that represented in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. That is, the model includes instances of various classes, represented by instances <highlight><bold>510</bold></highlight> (I-<highlight><bold>5</bold></highlight>), <highlight><bold>520</bold></highlight> (I-<highlight><bold>1</bold></highlight>), <highlight><bold>530</bold></highlight> (I-<highlight><bold>2</bold></highlight>), <highlight><bold>540</bold></highlight> (I-<highlight><bold>3</bold></highlight>) and <highlight><bold>550</bold></highlight> (I-<highlight><bold>4</bold></highlight>), and associations <highlight><bold>515</bold></highlight> (A-<highlight><bold>1</bold></highlight>), <highlight><bold>522</bold></highlight> (A-<highlight><bold>2</bold></highlight>), <highlight><bold>524</bold></highlight> (A-<highlight><bold>3</bold></highlight>) and <highlight><bold>526</bold></highlight> (A-<highlight><bold>4</bold></highlight>). Also included in the model illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, are wrappers associated with each instance. Specifically, instance wrapper <highlight><bold>512</bold></highlight> is associated with instance <highlight><bold>510</bold></highlight> (I-<highlight><bold>5</bold></highlight>), instance wrapper <highlight><bold>523</bold></highlight> is associated with instance <highlight><bold>520</bold></highlight> (I-<highlight><bold>1</bold></highlight>), instance wrapper <highlight><bold>532</bold></highlight> is associated with instance <highlight><bold>530</bold></highlight> (I-<highlight><bold>2</bold></highlight>), instance wrapper <highlight><bold>542</bold></highlight> is associated with instance <highlight><bold>540</bold></highlight> (I-<highlight><bold>3</bold></highlight>) and instance wrapper <highlight><bold>552</bold></highlight> is associated with instance <highlight><bold>550</bold></highlight> (I-<highlight><bold>4</bold></highlight>). The wrappers shown in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> are depicted in detail in <cross-reference target="DRAWINGS">FIG. 5B</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> shows repository <highlight><bold>350</bold></highlight> containing the wrappers, or wrapper tables, associated with each instance illustrated in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. As shown, instance <highlight><bold>5</bold></highlight> wrapper table is related to wrapper <highlight><bold>512</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, while the instance wrapper tables I-<highlight><bold>4</bold></highlight> correlate to the instance wrappers <highlight><bold>523</bold></highlight>, <highlight><bold>532</bold></highlight>, <highlight><bold>542</bold></highlight> and <highlight><bold>552</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, respectively. Each wrapper table includes a reference to an association instance that has been defined for its respective instance, depending upon the representation of the wrapper. That is, instance <highlight><bold>5</bold></highlight> wrapper table is defined for instance <highlight><bold>510</bold></highlight> (I-<highlight><bold>5</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, and any associations defined for that instance will be represented in its wrapper table. Instance <highlight><bold>5</bold></highlight> wrapper table includes association <highlight><bold>515</bold></highlight>, labeled A-<highlight><bold>1</bold></highlight>, corresponding to the relationship depicted in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. Also included in each wrapper table are reverse links established for each relationship with the association listed in a respective wrapper. Again referring to the instance <highlight><bold>5</bold></highlight> wrapper table, and <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, it can be seen that association A-<highlight><bold>1</bold></highlight> defines a relationship between instance I-<highlight><bold>5</bold></highlight> of class <highlight><bold>1</bold></highlight> and instance I-<highlight><bold>1</bold></highlight> of class <highlight><bold>2</bold></highlight>. Accordingly, instance <highlight><bold>5</bold></highlight> wrapper table also defines the relationship of association A-<highlight><bold>1</bold></highlight> with instance I-<highlight><bold>1</bold></highlight>. As there are no other associations defined for instance I-<highlight><bold>5</bold></highlight>, the remainder of its wrapper table is empty. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The remaining wrapper tables are similarly configured with information. Referring to instance <highlight><bold>1</bold></highlight> wrapper table and <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, it can be seen that instance I-<highlight><bold>1</bold></highlight> has four association instances related to it, A-<highlight><bold>1</bold></highlight> through A-<highlight><bold>4</bold></highlight>. These are indicated in its wrapper table. Association instance A-<highlight><bold>1</bold></highlight> has references to instance I-<highlight><bold>5</bold></highlight>, thus instance <highlight><bold>1</bold></highlight> wrapper table includes a reverse link that establishes this relationship. The same is true for the relationships between association instances A-<highlight><bold>2</bold></highlight> through A-<highlight><bold>4</bold></highlight>. Instance <highlight><bold>1</bold></highlight> wrapper table includes the reverse links that show the relationship between each association instance and instances I-<highlight><bold>2</bold></highlight> through I-<highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Instance wrappers are dynamically managed by CIM Object Manager <highlight><bold>340</bold></highlight>, in order to maintain an updated version of the hierarchical relationship of a CIM scheme. At any time, a client <highlight><bold>320</bold></highlight> may request the creation of additional objects. CIM Object Manager <highlight><bold>340</bold></highlight> updates repository <highlight><bold>350</bold></highlight>, and the wrappers for each affected instance, whenever a new association is defined. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an exemplary process performed by CIM Object Manager <highlight><bold>340</bold></highlight> when a request to create a new instance is received from a client <highlight><bold>320</bold></highlight>. A client <highlight><bold>320</bold></highlight> sends a request to create a new object, such as an instance of a particular class, over network <highlight><bold>310</bold></highlight> (Step <highlight><bold>710</bold></highlight>). The request may be performed using XML/HTTP protocols. For example, one client <highlight><bold>320</bold></highlight> may initiate a request to create a new instance I-<highlight><bold>7</bold></highlight> of class <highlight><bold>1</bold></highlight>, while another client <highlight><bold>320</bold></highlight> may initiate a request to create a new instance I-<highlight><bold>6</bold></highlight> of class <highlight><bold>1</bold></highlight>. Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>C, CIM Object Manager <highlight><bold>350</bold></highlight> receives the requests and defines the new instance I-<highlight><bold>7</bold></highlight>, and stores the definition in repository <highlight><bold>350</bold></highlight>. CIM Object Manager <highlight><bold>340</bold></highlight> then creates a wrapper for the newly defined instance (Step <highlight><bold>720</bold></highlight>). A wrapper is created by creating a wrapper table for the new instance. In this case, a new wrapper table for instance <highlight><bold>7</bold></highlight>, would be created in repository <highlight><bold>350</bold></highlight>. The new wrapper table includes default fields to be filled relating to associations and reverse links correlated to these associations. <cross-reference target="DRAWINGS">FIG. 5D</cross-reference> shows repository <highlight><bold>350</bold></highlight> including newly defined wrappers, instance <highlight><bold>6</bold></highlight> wrapper table and instance <highlight><bold>7</bold></highlight> wrapper table. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> CIM Object Manager <highlight><bold>340</bold></highlight> defines an association instance <highlight><bold>564</bold></highlight> (A-<highlight><bold>5</bold></highlight>) between instance I-<highlight><bold>5</bold></highlight> and instance I-<highlight><bold>7</bold></highlight> (step <highlight><bold>730</bold></highlight>), using the characteristics of new instance I-<highlight><bold>7</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> illustrates the new association <highlight><bold>564</bold></highlight> (A-<highlight><bold>5</bold></highlight>), including its links pointing to instances I-<highlight><bold>5</bold></highlight> and I-<highlight><bold>7</bold></highlight>. Once CIM Object Manager <highlight><bold>340</bold></highlight> recognizes a newly defined association instance, it determines all objects the new association instance defines a relationship between. In this case, association instance A-<highlight><bold>5</bold></highlight> establishes a relationship between instances I-<highlight><bold>5</bold></highlight> and I-<highlight><bold>7</bold></highlight>. Accordingly, CIM Object Manager <highlight><bold>340</bold></highlight> defines reverse links within each instance&apos;s wrapper (Step <highlight><bold>740</bold></highlight>). The reverse links are represented by the dotted lines pointing from wrappers <highlight><bold>512</bold></highlight> and <highlight><bold>562</bold></highlight> to association <highlight><bold>564</bold></highlight> (A-<highlight><bold>5</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 5C</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5E</cross-reference> illustrates how the wrappers in repository <highlight><bold>350</bold></highlight> are modified based on the created reverse links. The addition of newly defined instance I-<highlight><bold>7</bold></highlight>, and association A-<highlight><bold>5</bold></highlight> triggers CIM Object Manager <highlight><bold>340</bold></highlight> to add the reverse links to the instance <highlight><bold>5</bold></highlight> wrapper table. As depicted, the instance <highlight><bold>5</bold></highlight> wrapper table includes a reverse link showing the relationship between association A-<highlight><bold>5</bold></highlight> and instance I-<highlight><bold>7</bold></highlight>. Furthermore, newly defined wrapper table for instance I-<highlight><bold>7</bold></highlight> is modified to include the relationship A-<highlight><bold>5</bold></highlight> between instance I-<highlight><bold>7</bold></highlight> and instance I-<highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The process for creating and maintaining the new instance wrapper for instance I-<highlight><bold>6</bold></highlight> in repository <highlight><bold>350</bold></highlight> is the same as that described for instance I-<highlight><bold>7</bold></highlight>. That is, once CIM Object Manager <highlight><bold>340</bold></highlight> defines an association instance A-<highlight><bold>6</bold></highlight> between instances I-<highlight><bold>6</bold></highlight> and I-<highlight><bold>4</bold></highlight>, a new wrapper table for the new instance I-<highlight><bold>6</bold></highlight> is created in repository <highlight><bold>350</bold></highlight> and reverse links (depicted in <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> as dotted lines pointing from wrappers <highlight><bold>552</bold></highlight> and <highlight><bold>572</bold></highlight> to association A-<highlight><bold>6</bold></highlight>) are defined within each instance&apos;s wrapper table. Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>E, the newly defined instance <highlight><bold>6</bold></highlight> wrapper table includes a reverse link showing the relationship between association instance A-<highlight><bold>6</bold></highlight> and instance I-<highlight><bold>4</bold></highlight>. Furthermore, instance <highlight><bold>4</bold></highlight> wrapper table includes a reverse link showing the relationship between association instance A-<highlight><bold>6</bold></highlight> and instance I-<highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Accordingly, CIM Object Manager <highlight><bold>340</bold></highlight> dynamically adjusts repository <highlight><bold>350</bold></highlight> with new reverse links each time an instance of an association is created. This keeps repository <highlight><bold>350</bold></highlight> updated with the most recent relationships for instances defined by CIM Object Manager <highlight><bold>340</bold></highlight>. In ill keeping an updated status of these relationships enable association traversals to be performed more efficiently by the CIM Object Manager <highlight><bold>340</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Although the wrapper table structure described above, provides efficient association traversals, the structure is not rigid. That is, other wrapper structures may be employed to provide traversal operations. In one aspect of the invention, the wrapper tables defined in repository <highlight><bold>350</bold></highlight>, include pointers to secondary level association class wrapper tables. These secondary tables include each instance of a respective class association, and the reverse links to corresponding objects. FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>E illustrate this aspect of the invention. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> As shown, <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> shows a CIM hierarchy similar to that represented in <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. However the model illustrated in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> includes instances of several classes C-<highlight><bold>1</bold></highlight> to C-<highlight><bold>4</bold></highlight>, and instances of several different association classes A-<highlight><bold>1</bold></highlight> to A-<highlight><bold>3</bold></highlight>. As shown, an instance of a first instance of class C-<highlight><bold>1</bold></highlight> is represented by instance I-<highlight><bold>1</bold></highlight> of class C-<highlight><bold>1</bold></highlight> (<highlight><bold>610</bold></highlight>), while instances I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>2</bold></highlight>, I-<highlight><bold>2</bold></highlight> of C-<highlight><bold>2</bold></highlight> and I-<highlight><bold>3</bold></highlight> of C-<highlight><bold>2</bold></highlight> (<highlight><bold>622</bold></highlight>, <highlight><bold>624</bold></highlight> and <highlight><bold>626</bold></highlight>, respectively), reflect instances of a second class, C-<highlight><bold>2</bold></highlight>. Additionally, individual instances of a third and fourth class are shown by I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>3</bold></highlight> (<highlight><bold>628</bold></highlight>), and I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>4</bold></highlight> (<highlight><bold>630</bold></highlight>). Instances <highlight><bold>622</bold></highlight>-<highlight><bold>630</bold></highlight> are each related to instance <highlight><bold>610</bold></highlight> through association instances of varying association classes <highlight><bold>612</bold></highlight>, <highlight><bold>614</bold></highlight>, <highlight><bold>616</bold></highlight>, <highlight><bold>618</bold></highlight> and <highlight><bold>620</bold></highlight>, respectively. Each association instance is an instance of an association class. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, instances AC<highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight>, AC<highlight><bold>1</bold></highlight>-<highlight><bold>2</bold></highlight> and AC<highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight> are in association class AC<highlight><bold>1</bold></highlight>, instance AC<highlight><bold>2</bold></highlight>-<highlight><bold>1</bold></highlight> is in association class AC<highlight><bold>2</bold></highlight>, and instance AC<highlight><bold>3</bold></highlight>-<highlight><bold>1</bold></highlight> is in association class AC<highlight><bold>3</bold></highlight>. Although not shown in <cross-reference target="DRAWINGS">FIG. 6A, a</cross-reference> wrapper is associated with each respective class instance. These wrappers are described below with reference to <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> represents a wrapper table defined in repository <highlight><bold>350</bold></highlight> associated with class instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>1</bold></highlight> (<highlight><bold>610</bold></highlight>) illustrated in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, wrapper table <highlight><bold>632</bold></highlight> includes a column <highlight><bold>631</bold></highlight> identifying association classes that have instances that are &ldquo;associated&rdquo; with instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>1</bold></highlight> (<highlight><bold>610</bold></highlight>). Also, the wrapper table <highlight><bold>632</bold></highlight> includes a column <highlight><bold>633</bold></highlight> identifying pointers to a second wrapper table corresponding to the association classes identified in column <highlight><bold>631</bold></highlight>. For example, column <highlight><bold>631</bold></highlight> of wrapper table <highlight><bold>632</bold></highlight> contains identifiers for association classes AC<highlight><bold>1</bold></highlight>, AC<highlight><bold>2</bold></highlight> and AC<highlight><bold>3</bold></highlight>, and column <highlight><bold>633</bold></highlight> includes pointers to second level tables for these association classes <highlight><bold>644</bold></highlight>, <highlight><bold>646</bold></highlight> and <highlight><bold>648</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Wrapper table <highlight><bold>632</bold></highlight> correlates to the relationship illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, for instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>1</bold></highlight>. Referring to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, it can be seen that instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>1</bold></highlight> (<highlight><bold>610</bold></highlight>) includes references to three different association classes AC<highlight><bold>1</bold></highlight>, AC<highlight><bold>2</bold></highlight> and AC<highlight><bold>3</bold></highlight>. Although there are several instances of association class AC<highlight><bold>1</bold></highlight> referencing instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>1</bold></highlight> (<highlight><bold>610</bold></highlight>), the wrapper table <highlight><bold>632</bold></highlight> for instance (<highlight><bold>610</bold></highlight>) only includes pointers to the association classes, not to the instances of these association classes. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, the second level tables <highlight><bold>644</bold></highlight>, <highlight><bold>646</bold></highlight> and <highlight><bold>648</bold></highlight> that are referenced by column <highlight><bold>633</bold></highlight> include the appropriate association instances. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, second level wrapper table AC-<highlight><bold>1</bold></highlight> (<highlight><bold>644</bold></highlight>) includes pointers to each instance of association class AC<highlight><bold>1</bold></highlight>. Moreover, second level wrapper table <highlight><bold>646</bold></highlight> includes pointer to each instance of association class AC<highlight><bold>2</bold></highlight>, and second level wrapper table <highlight><bold>648</bold></highlight> includes pointer to each instance of association class AC<highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> To further explain the features and principles of the present invention, <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> shows the wrapper tables associated with instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>3</bold></highlight> and instance I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>4</bold></highlight>. As with the wrapper tables depicted in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, the wrapper tables illustrated in <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> correspond to the hierarchy illustrated in <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. Particularly, <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> shows a wrapper table <highlight><bold>636</bold></highlight> including an identifier for association class AC<highlight><bold>2</bold></highlight> and a pointer to a second level wrapper table <highlight><bold>650</bold></highlight> corresponding to association class AC<highlight><bold>2</bold></highlight>. Second level wrapper table <highlight><bold>650</bold></highlight> includes a pointer to the instance of association class AC<highlight><bold>2</bold></highlight>-<highlight><bold>1</bold></highlight>. Wrapper table <highlight><bold>642</bold></highlight> includes an identifier for association class AC<highlight><bold>3</bold></highlight> and a pointer to second level wrapper table <highlight><bold>660</bold></highlight> corresponding to association class AC<highlight><bold>3</bold></highlight>. And, second level table <highlight><bold>660</bold></highlight> includes a pointer to association class instance AC<highlight><bold>3</bold></highlight>-<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> To illustrate the dynamic management of the wrapper table of this aspect of the invention, <cross-reference target="DRAWINGS">FIG. 6D</cross-reference> shows new instance objects <highlight><bold>670</bold></highlight> and <highlight><bold>680</bold></highlight> added to the CIM of <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>. These new objects may be added using the same client request process described for the aspect of the present invention illustrated in FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>E and <highlight><bold>7</bold></highlight>. That is, a client <highlight><bold>320</bold></highlight> may initiate a request to create a new instance of class <highlight><bold>5</bold></highlight> (I-<highlight><bold>1</bold></highlight> of C-<highlight><bold>5</bold></highlight>) in repository <highlight><bold>350</bold></highlight>. Once CIM object manager <highlight><bold>340</bold></highlight> defines the new instance, an association instance is formed, based on the characteristics of instance I-<highlight><bold>4</bold></highlight> of C-<highlight><bold>5</bold></highlight>. In this case, an new association class instance AC<highlight><bold>4</bold></highlight>-<highlight><bold>1</bold></highlight> of association class AC<highlight><bold>4</bold></highlight> is defined, that relates instances <highlight><bold>680</bold></highlight> and <highlight><bold>622</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> After these objects are defined, a first level wrapper table for the affected class instances are modified to reflect the change to the CIM shown in <cross-reference target="DRAWINGS">FIG. 6D</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>E, the first level wrapper table <highlight><bold>623</bold></highlight> for class instance <highlight><bold>622</bold></highlight> is modified to reflect the new association class added to the CIM of <cross-reference target="DRAWINGS">FIG. 6D</cross-reference>. Particularly, first level wrapper table <highlight><bold>623</bold></highlight> includes identifiers <highlight><bold>625</bold></highlight> for association classes AC<highlight><bold>1</bold></highlight> and AC<highlight><bold>4</bold></highlight> corresponding to the association classes that include instances that are related to class instance <highlight><bold>622</bold></highlight>. Also, the first level wrapper table <highlight><bold>623</bold></highlight> includes pointers to second level wrapper tables <highlight><bold>627</bold></highlight> and <highlight><bold>629</bold></highlight>, that correspond to the association classes AC<highlight><bold>1</bold></highlight> and AC<highlight><bold>4</bold></highlight>, respectively. Second level table <highlight><bold>627</bold></highlight> includes a pointer to association class instance AC<highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight>, and second level table <highlight><bold>629</bold></highlight> includes a pointer to association class instance AC<highlight><bold>4</bold></highlight>-<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> As can be seen, methods and systems consistent with features of the present invention allow the first and second level wrapper tables to be used in order to maintain an updated &ldquo;map&rdquo; of all relationships between objects defined in repository <highlight><bold>350</bold></highlight>. This allows specific object relationships to be efficiently provided when they are requested, by using known traversal methods and the defined wrapper tables. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates an exemplary process performed when using second level wrapper tables to perform a traversal request, consistent with features and principles of the present invention. The process begins when a traversal request is received by CIM Object Manager <highlight><bold>340</bold></highlight> to obtain association relations for a class instance (Step <highlight><bold>810</bold></highlight>). Next, a defined first level wrapper table associated with the class instance designated in the request is located and accessed (Step <highlight><bold>820</bold></highlight>). Once located, the appropriate association classes reflected in the first level wrapper table are identified (Step <highlight><bold>830</bold></highlight>). For each association class reflected in the first level wrapper table, a pointer corresponding to the association class is used to identify and locate the appropriate second level wrapper table (Step <highlight><bold>840</bold></highlight>). Afterwards, the identified second level wrapper table is accessed and each instance of the association class identified in the second level table is located using defined pointer information (Step <highlight><bold>850</bold></highlight>). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The CIM Object Manager <highlight><bold>340</bold></highlight> accesses each association class instance identified in the second level wrapper table and references to class instances defined by these association class instances are collected (Step <highlight><bold>855</bold></highlight>). This process repeats until there are no more association class instances identified in the second level wrapper table (Step <highlight><bold>860</bold></highlight>). Once every instance in the second level wrapper table has been located and accessed (Step <highlight><bold>860</bold></highlight>; NO), the first level wrapper table may be checked to determine whether there any more association classes identified in the first level wrapper table that have not been processed (Step <highlight><bold>870</bold></highlight>). If there are more association classes, the process may be repeated by returning to Step <highlight><bold>820</bold></highlight>. If no there are no more association classes to be processed, CIM Object Manager <highlight><bold>340</bold></highlight> packages the relationship information into a response for Java&trade; VM <highlight><bold>330</bold></highlight> (Step <highlight><bold>880</bold></highlight>). Java&trade; VM <highlight><bold>330</bold></highlight> subsequently receives the packaged information and sends it to the client <highlight><bold>320</bold></highlight> that initiated the request (Step <highlight><bold>890</bold></highlight>). </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Although <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows the process steps associated with the first and second level tables being performed in a particular sequence, it is understood that this sequence is limiting to the present invention. That is, variations of the sequence of process steps described in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may be implemented without departing from the features and principles of the present invention. Moreover, the process described in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may be modified to accommodate a request to identify a particular object associated with the instance identified in the traversal request. That is, the process described in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may be modified to accommodate a single association class traversal identified in a first level wrapper table. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As described, methods and systems consistent with features of the present invention enables an efficient traversal technique to be implemented by CIM Object Manager <highlight><bold>340</bold></highlight> through the use of the wrappers defined in the repository. The process performed by CIM Object Manager <highlight><bold>340</bold></highlight> reduces the processing time and requirements for performing association traversals, by accessing the wrapper table associated with a target object. Without the wrappers, CIM Object Manager <highlight><bold>340</bold></highlight> would have to traverse each association to determine the objects that have relationships with the target object. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The wrappers defined in repository <highlight><bold>350</bold></highlight> are only accessible by CIM Object Manager <highlight><bold>340</bold></highlight>. The information within the wrappers is not directly accessible by clients <highlight><bold>320</bold></highlight> or any other remote system. CIM Object Manager <highlight><bold>340</bold></highlight> manages the definitions in repository <highlight><bold>350</bold></highlight>, and handles CIM based requests without sharing the data stored within the wrappers. CIM Object Manager <highlight><bold>340</bold></highlight> may use the wrapper information to provide a response to a request, but access to the wrappers is not given to any other component. Additionally, the wrappers themselves within repository <highlight><bold>350</bold></highlight> are non-volatile. That is, in the event a failure occurs that affects JVM <highlight><bold>330</bold></highlight>, the wrapper tables defined within repository <highlight><bold>350</bold></highlight> are not lost. In one aspect of the invention, the system implementing Java&trade; VM <highlight><bold>330</bold></highlight> may include transaction logs that record any changes to the wrappers defined in repository <highlight><bold>350</bold></highlight>. Thus, in the event of a failure that affects Java&trade; VM <highlight><bold>330</bold></highlight>, changes to the wrappers may be reinstated by using the transaction log. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The foregoing description of an implementation of the invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. Additional modifications and variations of the invention may be, for example, the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone. The invention may be implemented with both object-oriented and non-object-oriented programming systems. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Furthermore, one skilled in the art would recognize the ability to implement the present invention using various configurations. For example, where separate tables are described, such as shown in <cross-reference target="DRAWINGS">FIGS. 6B and 6C</cross-reference>, it is understood that a single table may be used to store the wrapper table information. Alternately, a single table may be used for first level wrapper table information and a second single table may used for second level wrapper table information. Also, implementation of well known processing techniques and configurations may be utilized to facilitate efficient data retrieval. For example, the use of caching techniques may be used to store frequently requested object information thus further decreasing the time it takes to perform a traversal request. Such implementations are within the scope of one skilled in the art and may be facilitated using known cache configurations. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Moreover, it should be understood that the term &ldquo;reverse link&rdquo; is only a construct to aid in explaining features and principles of the present invention. Reverse links represent the relationships between objects and are not to be confused with actual physical &ldquo;connections&rdquo; between these objects. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Additionally, although aspects of the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet or other propagation medium; or other forms of RAM or ROM. The scope of the invention is defined by the claims and their equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for determining a relationship between objects related to a common information model, the objects including at least a first and second instance and an association, the method comprising: 
<claim-text>creating, for the first instance, a reverse link that defines a relationship between the first instance and the association; and </claim-text>
<claim-text>determining a relationship between the first and second instances based on the reverse link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each association reflects a relationship between a respective association and a corresponding associated object. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the instance is associated with a first wrapper defining the reverse link. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the association represents an instance of an association class and wherein creating the reverse link further includes: 
<claim-text>defining a pointer in a first table that references a second table; and </claim-text>
<claim-text>defining a pointer in the second table that references the instance of the association class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein determining a relationship includes: 
<claim-text>collecting a reference reflecting a relationship between the association and the second instance based on the pointer in the second table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method for maintaining reverse links in a object-oriented environment including class instances and associations, the method comprising: 
<claim-text>for each class instance associated with N instances of an association class that each references the class instance, wherein N represents an integer value greater than or equal to one: 
<claim-text>(i) creating a first level wrapper table including a pointer to a second level wrapper table associated with the association class; and </claim-text>
<claim-text>(ii) creating N pointers in the second level wrapper table that each references an individual instance of the association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>for each new class instance and corresponding new association class instance that references the new class instance that is created: 
<claim-text>(iii) creating a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>(iv) creating a pointer in the new second level wrapper table that references the new instance of the association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>for each new class instance and corresponding new association class instance that is created: 
<claim-text>(iii) determining all instances of the association class that references the new class instance; </claim-text>
<claim-text>(iv) creating a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>(v) creating a pointer in the new second level wrapper table for each instance of the association class determined in step (iii). </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method for maintaining reverse links in an object-oriented environment including instances, association classes and association class instances, the method comprising: 
<claim-text>for each class instance associated with N association class that each includes at least one association class instance that references the class instance, wherein N represents an integer value greater than or equal to one: 
<claim-text>creating a first level wrapper table including N pointers to N second level wrapper tables associated with the association classes. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method for maintaining reverse links in a object-oriented environment including class instances and associations, the method comprising: 
<claim-text>for each class instance associated with N instances of a first association class that each references the class instance, and X instances of a second association class that each reference the class instance, wherein N and X represent integer values greater than or equal to one: 
<claim-text>(i) creating a first level wrapper table including: 
<claim-text>a first pointer to a second level wrapper table associated with the first association class, and </claim-text>
<claim-text>a second pointer to a second level wrapper table associated with the second association class; </claim-text>
</claim-text>
<claim-text>(ii) creating N pointers, in the second table wrapper table associated with the first association class, that each references an individual instance of the first association class; and </claim-text>
<claim-text>(iii) creating X pointers, in the second table wrapper table associated with the second association class, that each references an individual instance of the second association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; and </claim-text>
<claim-text>performing an association traversal process based on pointer information reflecting a relationship between the class instance and all association instances that reference the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the association traversal process includes: 
<claim-text>accessing a first table including a pointer to a second table; and </claim-text>
<claim-text>accessing the second table, using the pointer, to obtain pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the association traversal process further includes: 
<claim-text>for each association instance pointed to by the second table: 
<claim-text>collecting a reference to another class instance that is referenced by the association instance. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; </claim-text>
<claim-text>obtaining pointers to each association instance that references the class instance; and </claim-text>
<claim-text>collecting references to other class instances that are referenced by the association instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; and </claim-text>
<claim-text>obtaining pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. In a system comprising a client and a server, a method for performing association traversals performed by the client, comprising: 
<claim-text>generating a request for relationship information associated with a selected class instance; and </claim-text>
<claim-text>receiving a response including information reflecting a relationship between the selected class instance and other class instances that are referenced by the same association class instances, wherein the response was generated using pointers defined in a table associated with the selected class instance that reference the common association class instances. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. In a system comprising a client and a server, a method for performing association traversals performed by the server, comprising; 
<claim-text>receiving a request for relationship information associated with a selected class instance; and </claim-text>
<claim-text>generating a response including information reflecting a relationship between the selected class instance and other class instances that are referenced by the same association class instances, based on pointers defined in a table associated with the selected class instance that reference the common association class instances. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A system for performing association traversals, comprising: 
<claim-text>a client for generating a request for information reflecting the relationship between selected objects defined in a repository; and </claim-text>
<claim-text>a server including: 
<claim-text>the repository for storing objects, wherein a set of the objects are associated with object wrappers, and </claim-text>
<claim-text>an object manager for processing the request by using an object wrapper associated with one object of the selected objects. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the object wrapper associated with one object includes pointers to all association instances that reference the one object. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the object manager uses the pointers to collect references to the selected objects. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A system for traversing associations in a common information model implemented environment, the model comprising at least a first and second instance and an association, comprising: 
<claim-text>means for creating, for the first instance, a reverse link that defines a relationship between the first instance and the association; and </claim-text>
<claim-text>means for determining a relationship between the first and second instances based on the reverse link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein each association reflects a relationship between a respective association and a corresponding associated object. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the instance is associated with an first wrapper defining the reverse link. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the association represents an instance of an association class and wherein the means for creating the reverse link further includes: 
<claim-text>means for defining a pointer in a first table that references a second table; and </claim-text>
<claim-text>means for defining a pointer in the second table that references the instance of the association class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the means for determining a relationship includes: 
<claim-text>means for collecting a reference reflecting a relationship between the association and the second instance based on the pointer in the second table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight> A system for maintaining reverse links in a object-oriented environment including class instances and associations, comprising: 
<claim-text>means for creating, for each class instance associated with N instances of an association class that each references the class instance, wherein N represents an integer value greater than or equal to one, a first level wrapper table including a pointer to a second level wrapper table associated with the association class; and </claim-text>
<claim-text>means for creating N pointers in the second level wrapper table that each point to an individual instance of the association class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, further comprising: 
<claim-text>means for creating, for each new class instance and corresponding new association class instance that references the new class instance that is created, a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>means for creating a pointer in the new second level wrapper table that references the new instance of the association class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, further comprising: 
<claim-text>means for determining, for each new class instance and corresponding new association class instance that is created, all instances of the association class that references the new class instance; </claim-text>
<claim-text>means for creating a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>means for creating a pointer in the new second level wrapper table for each instance of the association class determined by the means for determining. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A system for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>means for receiving an association traversal request for a class instance; and </claim-text>
<claim-text>means for performing an association traversal process based on pointer information reflecting a relationship between the class instance and all association instances that reference the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the means for performing an association traversal process includes: 
<claim-text>means for accessing a first table including a pointer to a second table; and </claim-text>
<claim-text>means for accessing the second table, using the pointer, to obtain pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the means for performing an association traversal process further includes: 
<claim-text>means for collecting, for each association instance pointed to by the second table, a reference to another class instance that is referenced by the association instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A system for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>means for receiving an association traversal request for a class instance; </claim-text>
<claim-text>means for obtaining pointers to each association instance that references the class instance; and </claim-text>
<claim-text>means for collecting references to other class instances that are referenced by the association instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A system for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>means for receiving an association traversal request for a class instance; and </claim-text>
<claim-text>means for obtaining pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A method for tracking relationships between objects in an object-oriented programming environment, comprising: 
<claim-text>determining a relationship between at least one object and a first association object; and </claim-text>
<claim-text>maintaining a record of the relationship for the at least one object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, further comprising: 
<claim-text>using the record to obtain a reference to a second object, </claim-text>
<claim-text>wherein the second object has a relationship to the at least one object defined by the first association object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein the first respective object is one of a class object and an instance object. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for determining a relationship between objects related to a common information model, the objects including at least a first and second instance and an association, the method comprising: 
<claim-text>creating, for the first instance, a reverse link that defines a relationship between the first instance and the association; and </claim-text>
<claim-text>determining a relationship between the first and second instances based on the reverse link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein each association reflects a relationship between a respective association and a corresponding associated object. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the instance is associated with an first wrapper defining the reverse link. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the association represents an instance of an association class and wherein the step for creating the reverse link further includes: 
<claim-text>defining a pointer in a first table that references a second table; and </claim-text>
<claim-text>defining a pointer in the second table that references the instance of the association class. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>, wherein the step of determining a relationship includes: 
<claim-text>collecting a reference reflecting a relationship between the association and the second instance based on the pointer in the second table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight> A computer-readable medium including instructions for performing a method, when executed by a processor, for maintaining reverse links in a object-oriented environment including class instances and associations, the method comprising: 
<claim-text>for each class instance associated with N instances of an association class that each references the class instance, wherein N represents an integer value greater than or equal to one: 
<claim-text>(i) creating a first level wrapper table including a pointer to a second level wrapper table associated with the association class; and </claim-text>
<claim-text>(ii) creating N pointers in the second level wrapper table that each references an individual instance of the association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the method further comprises: 
<claim-text>for each new class instance and corresponding new association class instance that references the new class instance that is created: 
<claim-text>(iii) creating a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>(iv) creating a pointer in the new second level wrapper table that references the new instance of the association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the method further comprises: 
<claim-text>for each new class instance and corresponding new association class instance that is created: 
<claim-text>(iii) determining all instances of the association class that references the new class instance; </claim-text>
<claim-text>(iv) creating a new first wrapper table including a pointer to a new second level wrapper table associated with the association class; and </claim-text>
<claim-text>(v) creating a pointer in the new second level wrapper table for each instance of the association class determined in step (iii). </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for maintaining reverse links in a object-oriented environment including class instances and associations, the method comprising: 
<claim-text>for each class instance associated with N association classes that each includes at least one association class instance that references the class instance, wherein N represents an integer value greater than or equal to one: 
<claim-text>creating a first level wrapper table including N pointers to N second level wrapper tables associated with the association classes. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for maintaining reverse links in a object-oriented environment including class instances and associations, the method comprising: 
<claim-text>for each class instance associated with N instances of a first association class that each references the class instance, and X instances of a second association class that each reference the class instance, wherein N and X represent integer values greater than or equal to one: 
<claim-text>(i) creating a first level wrapper table including: 
<claim-text>a first pointer to a second level wrapper table associated with the first association class, and </claim-text>
<claim-text>a second pointer to a second level wrapper table associated with the second association class; </claim-text>
</claim-text>
<claim-text>(ii) creating N pointers, in the second table wrapper table associated with the first association class, that each references an individual instance of the first association class; and </claim-text>
<claim-text>(iii) creating X pointers, in the second table wrapper table associated with the second association class, that each references an individual instance of the second association class. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; and </claim-text>
<claim-text>performing an association traversal process based on pointer information reflecting a relationship between the class instance and all association instances that reference the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein the association traversal process includes: 
<claim-text>accessing a first table including a pointer to a second table; and </claim-text>
<claim-text>accessing the second table, using the pointer, to obtain pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the association traversal process further includes: 
<claim-text>for each association instance pointed to by the second table: 
<claim-text>collecting a reference to another class instance that is referenced by the association instance. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; </claim-text>
<claim-text>obtaining pointers to each association instance that references the class instance; and </claim-text>
<claim-text>collecting references to other class instances that are referenced by the association instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for performing association traversals in an object-oriented environment including a plurality of class instances and association instances, comprising: 
<claim-text>receiving an association traversal request for a class instance; and </claim-text>
<claim-text>obtaining pointers to each association instance that references the class instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. In a system comprising a client and a server, a computer-readable medium including instructions for performing a method, when executed by a processor, for performing association traversals performed by the client, comprising: 
<claim-text>generating a request for relationship information associated with a selected class instance; </claim-text>
<claim-text>receiving a response including information reflecting a relationship between the selected class instance and other class instances that are referenced by the same association class instances, wherein the response was generated using pointers defined in a table associated with the selected class instance that reference the common association class instances. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. In a system comprising a client and a server, a computer-readable medium including instructions for performing a method, when executed by a processor, for performing association traversals performed by the server, comprising; 
<claim-text>receiving a request for relationship information associated with a selected class instance; </claim-text>
<claim-text>generating a response including information reflecting a relationship between the selected S class instance and other class instances that are referenced by the same association class instances, based on pointers defined in a table associated with the selected class instance that reference the common association class instances. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. A computer-readable medium including instructions for performing a method, when executed by a processor, for tracking relationships between objects in an object-oriented programming environment, comprising: 
<claim-text>determining a relationship between at least one object and a first association object; and </claim-text>
<claim-text>maintaining a record of the relationship for the at least one object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, wherein the method further comprises: 
<claim-text>using the record to obtain a reference to a second object, </claim-text>
<claim-text>wherein the second object has a relationship to the first respective object defined by the first association object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, wherein the first respective object is one of a class object and an instance object.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004956A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004956A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004956A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004956A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004956A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004956A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004956A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004956A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004956A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004956A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004956A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004956A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004956A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004956A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004956A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004956A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004956A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
