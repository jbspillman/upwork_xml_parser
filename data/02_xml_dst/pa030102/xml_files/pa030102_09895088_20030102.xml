<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001894A1-20030102-D00000.TIF SYSTEM "US20030001894A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001894A1-20030102-D00001.TIF SYSTEM "US20030001894A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001894A1-20030102-D00002.TIF SYSTEM "US20030001894A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001894A1-20030102-D00003.TIF SYSTEM "US20030001894A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001894A1-20030102-D00004.TIF SYSTEM "US20030001894A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001894</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895088</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>764000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>345</class>
<subclass>810000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus for dynamically determining actions to perform for an object</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>James</given-name>
<middle-name>Russell</middle-name>
<family-name>Boykin</family-name>
</name>
<residence>
<residence-us>
<city>Pflugerville</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>Conrad</middle-name>
<family-name>Sanchez</family-name>
</name>
<residence>
<residence-us>
<city>Pflugerville</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, apparatus, and computer implemented instructions for presenting actions associated with an object displayed in a graphical user interface in a data processing system. Actions are dynamically associated with the object. In response to a selection of the object, the actions are presented in the graphical user interface. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention provides an improved data processing system and in particular a method and apparatus for manipulating data. Still more particularly, the present invention provides a method, apparatus, and computer implemented instructions for identifying actions that may be performed for an object. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The use of data processing systems has become widespread and pervasive in society. The interface through which a user interacts with a data processing system has advanced from the entry of command line commands to graphical user interfaces (GUIs). A graphical user interface (GUI) is a graphics-based user interface that incorporates icons, pull-down menus and a mouse. The GUI has become the standard way users interact with a computer. The GUI is used to perform actions such as, for example, start programs, terminate programs, communicate with other users at other data processing systems, and data manipulation. These actions are accomplished by the user employing input devices such as, for example, a mouse and a keyboard. Objects representing data and programs may be represented on the GUI using icons. Oftentimes, a list of actions that may be performed on an object are presented to the user in response to some input, such as a selection of a right mouse button, pressing a function key on a keyboard, or by moving a pointer over a certain region of the GUI. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The actions that may be performed on an object are numerous. For example, a user may copy, cut, delete, paste, run, export, or move an object. These actions may be presented to the user to allow the user to identify what actions may be taken and to provide an interface to execute a selected action. These actions are commonly presented in a pop-up menu for user selection. Currently, the actions that are presented to the user are predetermined and not easily changed. The actions that are associated with an object are hard coded. Hard coded software is software that is programmed to perform a fixed number of tasks without regard to future flexibility. This type of programming is very easy to perform and is the ideal kind of programming for one-time jobs. Such programs typically use a fixed set of values and may only work with certain types of devices. The problem with these types of programs is that one-time programs often become widely used, even in day-to-day operations, but they are difficult to change because the routines have not been generalized to accept change. Changing actions allowed on an object are difficult and require reinstalling or recompiling a program. The mechanism of the present invention also supports runtime determination of actions against object types when both the object type and related actions are not known at creation of the launching code. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Therefore, it would be advantageous to have an improved method, apparatus, and computer implemented instructions for determining actions that can be performed with an object. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention provides a method, apparatus, and computer implemented instructions for presenting actions associated with an object displayed in a graphical user interface in a data processing system. Actions are dynamically associated with the object. In response to a selection of the object, the actions are presented in the graphical user interface. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a pictorial representation of a data processing system in which the present invention may be implemented in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram illustrating components used to dynamically determine actions that can be performed on an object in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram of a graphical user interface in which actions are presented to a user in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart of a process used for registering actions in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart of a process used for adding menu items for a Java class in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of a process used for populating a collection for a pop-up menu in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart of a process used for executing an action in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> With reference now to the figures and in particular with reference to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> pictorial representation of a data processing system in which the present invention may be implemented is depicted in accordance with a preferred embodiment of the present invention. A computer <highlight><bold>100</bold></highlight> is depicted which includes system unit <highlight><bold>102</bold></highlight>, video display terminal <highlight><bold>104</bold></highlight>, keyboard <highlight><bold>106</bold></highlight>, storage devices <highlight><bold>108</bold></highlight>, which may include floppy drives and other types of permanent and removable storage media, and mouse <highlight><bold>110</bold></highlight>. Additional input devices may be included with personal computer <highlight><bold>100</bold></highlight>, such as, for example, a joystick, touchpad, touch screen, trackball, microphone, and the like. Computer <highlight><bold>100</bold></highlight> can be implemented using any suitable computer, such as an IBM eServer pSeries computer or IntelliStation computer, which are products of International Business Machines Corporation, located in Armonk, N.Y. Although the depicted representation shows a computer, other embodiments of the present invention may be implemented in other types of data processing systems, such as a network computer. Computer <highlight><bold>100</bold></highlight> also preferably includes a graphical user interface (GUI) that may be implemented by means of systems software residing in computer readable media in operation within computer <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system is shown in which the present invention may be implemented. Data processing system <highlight><bold>200</bold></highlight> is an example of a computer, such as computer <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in which code or instructions implementing the processes of the present invention may be located. Data processing system <highlight><bold>200</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>202</bold></highlight> and main memory <highlight><bold>204</bold></highlight> are connected to PCI local bus <highlight><bold>206</bold></highlight> through PCI bridge <highlight><bold>208</bold></highlight>. PCI bridge <highlight><bold>208</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>202</bold></highlight>. Additional connections to PCI local bus <highlight><bold>206</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>210</bold></highlight>, small computer system interface (SCSI) host bus adapter <highlight><bold>212</bold></highlight>, and expansion bus interface <highlight><bold>214</bold></highlight> are connected to PCI local bus <highlight><bold>206</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>216</bold></highlight>, graphics adapter <highlight><bold>218</bold></highlight>, and audio/video adapter <highlight><bold>219</bold></highlight> are connected to PCI local bus <highlight><bold>206</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>214</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>220</bold></highlight>, modem <highlight><bold>222</bold></highlight>, and additional memory <highlight><bold>224</bold></highlight>. SCSI host bus adapter <highlight><bold>212</bold></highlight> provides a connection for hard disk drive <highlight><bold>226</bold></highlight>, tape drive <highlight><bold>228</bold></highlight>, and CD-ROM drive <highlight><bold>230</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> An operating system runs on processor <highlight><bold>202</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>200</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The operating system may be a commercially available operating system such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>200</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>226</bold></highlight>, and may be loaded into main memory <highlight><bold>204</bold></highlight> for execution by processor <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> For example, data processing system <highlight><bold>200</bold></highlight>, if optionally configured as a network computer, may not include SCSI host bus adapter <highlight><bold>212</bold></highlight>, hard disk drive <highlight><bold>226</bold></highlight>, tape drive <highlight><bold>228</bold></highlight>, and CD-ROM <highlight><bold>230</bold></highlight>, as noted by dotted line <highlight><bold>232</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> denoting optional inclusion. In that case, the computer, to be properly called a client computer, must include some type of network communication interface, such as LAN adapter <highlight><bold>210</bold></highlight>, modem <highlight><bold>222</bold></highlight>, or the like. As another example, data processing system <highlight><bold>200</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>200</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>200</bold></highlight> may be a personal digital assistant (PDA), which is configured with ROM and/or flash ROM to provide nonvolatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>200</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>200</bold></highlight> also may be a kiosk or a Web appliance. The processes of the present invention are performed by processor <highlight><bold>202</bold></highlight> using computer implemented instructions, which may be located in a memory such as, for example, main memory <highlight><bold>204</bold></highlight>, memory <highlight><bold>224</bold></highlight>, or in one or more peripheral devices <highlight><bold>226</bold></highlight>-<highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The present invention provides a method, apparatus, and computer implemented instructions for dynamically determining actions that are to be associated with an object. The mechanism of the present invention involves non hard-coded software, which is data independent with respect to the mappings of actions and their associations or mappings to objects. This type of software is written such that any data that can possibly be changed should be stored in a database and not &ldquo;hard wired&rdquo; into the code of the program. When values change or are added only the database item is altered, which is a simple task, rather than recompiling programs. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In these examples, the mechanism is implemented in the Java programming language. Mappings between actions to perform and an object&apos;s class type identify a set of allowable actions for a given object. This determination may be made at runtime. This mechanism allows existing relationships or associations of actions and objects to be determined at runtime based on the saved class type to actions&apos; mappings. Examples of object types include security objects, such as roles, accounts, capabilities, principals, and persons. Other objects types may be, for example, Java Naming Directory Interface (JNDI) objects, such as javax.naming.Context (a folder) and javax.naming.directory.DirContext (a folder with attributes). These object types also may include an IP address, an IP node, and a gateway. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> diagram illustrating components used to dynamically determine actions that can be performed on an object is depicted in accordance with a preferred embodiment of the present invention. The components illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may be found in a data processing system, such as, for example, data processing system <highlight><bold>200</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Classes <highlight><bold>300</bold></highlight> are classes for objects presented in GUI <highlight><bold>302</bold></highlight>. Menu process <highlight><bold>304</bold></highlight> provides a mechanism to generate menus of actions that can be performed on objects. Menu process <highlight><bold>304</bold></highlight> receives classes <highlight><bold>300</bold></highlight> and dynamically determines which actions should be associated in preparation for displaying a pop-up menu. In these examples, menus are the form in which the actions are presented to a user. These examples are not meant to limit the fashion in which actions associated with objects can be presented. These associations are determined at runtime or at the time the program is executed in these examples. In this manner, actions may be added and removed from associations with objects such that the effects of these changes are presented to the user at runtime. An example of this mapping is a file system directory, which can have multiple actions related to it. Examples of these multiple actions are cut, copy, paste, rename, delete, create subdirectory, and view. A file system item such as a bat file has a different set of related actions even though some are common with the directory above. Some examples are cut, copy, rename, delete, and execute. In this example, the actions paste, create subdirectory and view are not applicable to a non-folder. But a new action of execute also has been added since a bat file is executable. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, diagram of a graphical user interface in which actions are presented to a user is depicted in accordance with a preferred embodiment of the present invention. Window <highlight><bold>400</bold></highlight> is an example of a window that may be presented in a GUI, such as GUI <highlight><bold>302</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In this example, window <highlight><bold>400</bold></highlight> is an interface for a file navigation program used to manipulate files and folders or directories in a file system. Window <highlight><bold>400</bold></highlight> shows a tree of folders in section <highlight><bold>402</bold></highlight>. The folders are nodes in which the nodes are presented as folder icons, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight>, <highlight><bold>408</bold></highlight>, and <highlight><bold>410</bold></highlight>. Section <highlight><bold>412</bold></highlight> in window <highlight><bold>400</bold></highlight> illustrates the contents of folder <highlight><bold>408</bold></highlight>. Pop-up window <highlight><bold>414</bold></highlight> shows actions that may be performed on folder <highlight><bold>408</bold></highlight>. These actions include &ldquo;Copy&rdquo; <highlight><bold>416</bold></highlight>, &ldquo;Create Subdirectory&rdquo; <highlight><bold>418</bold></highlight>, &ldquo;Cut&rdquo; <highlight><bold>420</bold></highlight>, &ldquo;Remove&rdquo; <highlight><bold>422</bold></highlight>, &ldquo;Rename&rdquo; <highlight><bold>424</bold></highlight>, &ldquo;Select All&rdquo; <highlight><bold>426</bold></highlight>, &ldquo;Select None&rdquo; <highlight><bold>428</bold></highlight>, and &ldquo;View Directory&rdquo; <highlight><bold>430</bold></highlight>. In this example, these actions are identified dynamically at the time the program that presents the actions started. The time when this program starts is also referred to as &ldquo;runtime&rdquo;. In other words, actions associated with folder <highlight><bold>408</bold></highlight> may be changed and the change will be reflected the next time the program is started. Depending on the implementation, some actions may be hard-coded while others are dynamically determined. The two are combined to make the final pop-up menu. Examples of hard-coded actions in the file system are rename and remove. Examples of dynamically-determined actions are create subdirectory, view, and execute. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>8</bold></highlight> below illustrate processes used to dynamically identify actions associated with objects and generate a presentation of these actions. The flowcharts in FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>8</bold></highlight> are presented for an implementation of the present invention in the Java programming language. With reference now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> flowchart of a process used for registering actions is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> occurs prior to runtime of a program in a registration phase. The source of the registered material may be, for example, XML, a GUI, or a command line. In these examples, the process in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> stores data registering a Java class and its associated actions in a data structure, such as a database or a flat file on a file system. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The process begins with a determination as to whether an unprocessed fully-qualified Java class, which can have an action, is present (step <highlight><bold>500</bold></highlight>). A fully qualified Java class name includes the Java package in which it resides as a prefix. Most Java classes reside in packages to ensure that there is no name collision between two classes produced by two different companies, divisions, etc. For instance, the Java language has a standard class named &ldquo;String&rdquo;. The fully-qualified class name is java.lang.String. When storing the String class name, the fully-qualified java.lang.String is stored because there also could be a com.foo.String class. This action avoids confusing the two when determining related actions at runtime. The qualifiers are not mandatory, but product-level code typically uses package qualifiers to ensure that no collision of the class names occurs across companies, products, etc. So, the package qualification of a Java class is an intrinsic part of its name. An action is a separately-related object in its own right. If an unprocessed Java class is present in which the Java class can have an action, the unprocessed Java class is selected (step <highlight><bold>502</bold></highlight>). The string version of the fully-qualified Java class that has related actions is saved (step <highlight><bold>504</bold></highlight>). In the case of the Java String class, &ldquo;java.lang.String&rdquo; is saved in the data structure. This string version of the class is later used in step <highlight><bold>700</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> as a lookup mechanism for related actions. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Next, a determination is made as to whether an unprocessed action, which can be launched relative to the Java class, is present (step <highlight><bold>506</bold></highlight>). If an unprocessed action is absent, the process returns to step <highlight><bold>500</bold></highlight> as described above to determine whether additional unprocessed Java class are present. Otherwise, the ResourceBundle class name and key is saved for the action text (step <highlight><bold>508</bold></highlight>). A ResourceBundle is Java&apos;s way of providing internationalized, separately-provided text for a Java program. The ResourceBundle includes a key for a string and then its value. In the case of an action, an actual example is a key of &ldquo;CREATE_SUBDIR&rdquo; with an English value of &ldquo;Create Subdirectory&rdquo;, a Spanish value of &ldquo;Crear subdirectorio&rdquo; and an Italian value of &ldquo;Crea sottodirectory&rdquo;. Depending on the language used at execution of the program, the user would see the appropriate text for their language for the create subdirectory action. The fully-qualified Java class is saved for the action (step <highlight><bold>510</bold></highlight>) with the process returning to step <highlight><bold>506</bold></highlight>. The fully-qualified class name of the Java class is saved in the data structure. That name is later used at runtime as a key for related actions to that Java class. In order to get the fully-qualified string class name for any Java object, you can do the following: </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> AnyJavaObject.getClass( ).getName( ) </paragraph>
<paragraph id="P-0033" lvl="7"><number>&lsqb;0033&rsqb;</number> For instance, if you ask a Java Object of type String for its class(via someStringJavaObject.getClass( ).getName( )), &ldquo;java.lang.String&rdquo; will be returned. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> flowchart of a process used for adding menu items for a Java class is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> may be implemented in a menu process, such as menu process <highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The process begins by passing a Java object in from an application from a source (step <highlight><bold>600</bold></highlight>). This source may be, for example, an explorer, a tree, or a table. Next, an empty collection for pop-up menu items is created (step <highlight><bold>602</bold></highlight>). This collection also is referred to as a pop-up menu items collection. Then, the Java object&apos;s class is retrieved (step <highlight><bold>604</bold></highlight>). Actions are added to the pop-up menu items collection for the Java class (step <highlight><bold>606</bold></highlight>). Step <highlight><bold>606</bold></highlight> is described in more detail in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> below. A pop-up menu is created from the pop-up menu item collection (step <highlight><bold>608</bold></highlight>). This step includes registering ActionListeners for each pop-up menu item and recording the actionCommand as the Java class needed to perform the related action. The pop-up menu is displayed (step <highlight><bold>610</bold></highlight>) and the process terminates. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> flowchart of a process used for populating a collection for a pop-up menu is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> may be implemented in a menu process, such as menu process <highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. This process is used to store action information in a collection and may call itself in a recursive fashion. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The process begins by retrieving related actions for the string name for the Java class (step <highlight><bold>700</bold></highlight>). In these examples, the related actions are retrieved from a database or a flat file. The actions are stored using information generated by registration of classes as illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> above. These actions are in the form of action definitions in this example. Next, a determination is made as to whether an unprocessed action definition is present (step <highlight><bold>702</bold></highlight>). If unprocessed action definitions are present, an unprocessed action definition is selected for processing (step <highlight><bold>704</bold></highlight>). The text for the action is looked up using a ResourceBundle and a key for the registered action using standard Java logic (step <highlight><bold>706</bold></highlight>). A string name for the Java class for the action is retrieved from the registered information (step <highlight><bold>708</bold></highlight>). Then, the action text and the Java class string name are saved in the collection (step <highlight><bold>710</bold></highlight>) with the process then returning to step <highlight><bold>702</bold></highlight> as described above. The collection is the pop-up menu items collection discussed in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> above. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Turning back to step <highlight><bold>702</bold></highlight>, if unprocessed action definitions are not present, all of the action definitions for the Java class have been processed. At this point, a determination is made as to whether an unprocessed Java superclass is present for this Java class (step <highlight><bold>712</bold></highlight>). A superclass is a parent class to a class. If an unprocessed Java superclass in present, this superclass is selected for processing (step <highlight><bold>714</bold></highlight>). Pop-up menu items are added for this Java superclass (step <highlight><bold>716</bold></highlight>) with the process then returning to step <highlight><bold>712</bold></highlight> as described above. Step <highlight><bold>716</bold></highlight> is a recursive call to the process in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> for the Java superclass. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> With reference again to step <highlight><bold>712</bold></highlight>, if unprocessed Java superclasses are absent, a determination is made as to whether an unprocessed interface implemented by the Java class is present (step <highlight><bold>718</bold></highlight>). An interface, as used with respect to the description of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, defines a set of methods and constants to be implemented by another object. If an unprocessed interface implemented by the Java class is present, the unprocessed interface is selected for processing (step <highlight><bold>720</bold></highlight>). Pop-up menu items for this interface are added by recursively calling the process in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> (step <highlight><bold>722</bold></highlight>) with the process then returning to step <highlight><bold>718</bold></highlight>. Otherwise, the process terminates. In steps <highlight><bold>716</bold></highlight> and <highlight><bold>722</bold></highlight>, the recursive call initiates the process in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The actions retrieved, however, are for the superclass or the interface rather than the original Java class when the process in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is first called. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart of a process used for executing an action is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may be implemented in a menu process, such as menu process <highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The process in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is in response to a user selecting a pop-up menu item causing an actionperformed method to be called. This process results in an ActionEvent object being passed in the callback. Java provides an interface which can be implemented to handle callbacks on menu item selection, button presses, etc. This interface is called the ActionListener interface. The fully-qualified name is java.awt.event.ActionListener. The one method in this interface is the actionperformed method which receives an input parameter of type java.awt.event.ActionEvent. This ActionEvent object has the method getActionCommand, which returns a string for the menu item which is triggering the callback. In the present invention, when the actionperformed callback is invoked, the code interrogates the ActionEvent object (via the getActionCommand method) to determine which pop-up menu item has been selected. Then, the user&apos;s selected action can be instantiated and executed. The object contains the string name of the Java class saved in the process described in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> above. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the process begins by retrieving the actioncommand for an action from the ActionEvent object passed in response to a selection of an action from menu item (step <highlight><bold>800</bold></highlight>). The object, in this example, is a string version of the Java class as saved by the process described in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> above. The action class is instantiated based on the actioncommand passing the object of the pop-up to the new action class (step <highlight><bold>802</bold></highlight>). Then, the action class is executed (step <highlight><bold>804</bold></highlight>) with the process terminating thereafter. This action class performs the process or logic to execute the action selected by the user. The mechanism of the present invention may be implemented in other programming environments, such as C&plus;&plus;. In the C&plus;&plus; environment, the process of the present invention may be performed using C&plus;&plus; Runtime-type identification (RTTI) to determine the class type and then use that type to find the related actions. Generally, if a type for an object can be obtained, the related actions for the object can be looked up. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Thus, the present invention provides an improved method, apparatus, and computer implemented instructions for identifying actions that may be performed by or on an object. This identification is a dynamic identification in which the association of the actions with an object may be different and dynamically presented at runtime. The menu logic of the present invention can dynamically determine differing menu items at runtime based on registered class-to-action relationships, but the registration of the items related to Java classes is performed prior to runtime. This mechanism allows associating actions with objects without requiring a hard-coded relationship. In this manner, new actions may be associated or existing actions may be unassociated with an object as needed. The present invention provides for extensibility, which allows the behavior of a running program to be extended without redesigning, reworking or recompiling the program. Dynamic, runtime determination of a Java class to its related actions provides for extensibility. Hardcoded relationships between a Java class and its actions are undesirable because these types of relationships remove extensibility. The mechanism of the present invention reduces the need for using hardcoded relationships. Further, the mechanism provides a common interface for presenting actions to a user in which only the underlying associations between actions and objects change. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Although the examples are discussed with respect to the Java programming language, the mechanism of the present invention may be implemented in other programming languages, such as, for example, C. Also, the associations in these examples are identified at runtime. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for dynamically associating actions with an object, comprising the computer implemented steps of: 
<claim-text>responsive to selection of an object, determining an object type of the selected object; </claim-text>
<claim-text>determining actions which can be performed on the object type by other objects in a data processing system at the time of selection; and </claim-text>
<claim-text>associating the determined actions with the selected object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the determining step further comprises: 
<claim-text>querying the selected object for a runtime list of methods/actions known to object from a database; </claim-text>
<claim-text>retrieving a static list of methods/actions for the object type; and </claim-text>
<claim-text>combining the runtime list, static list, and actions by other objects to produce a combined list of actions for the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is a Java object. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the determining steps are performed on a Java class. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein object is graphical user interface object representative of a network resource and the combined list of actions is presented in the interface to a user. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the method provides a static list of actions for a specific class. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method in a data processing system for presenting actions associated with an object displayed in a graphical user interface, the method comprising: 
<claim-text>dynamically associating actions with the object based on an object type of the object; and </claim-text>
<claim-text>responsive to a selection of the object, presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the selection is made using a pointing device. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the pointing device is one of a mouse, a track ball, a touch pad, a light pen, a touch screen, or a digitizing pad. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the actions are presented as a pop-up menu. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the actions are presented as at least one of a selectable list, a selectable table, a tree, a set of button, and check boxes. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the actions are dynamically associated in response to the selection of the object. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the actions are dynamically associated when the object is initialized. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further comprising: 
<claim-text>adding a new action to the actions prior to dynamically associating the actions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein changes to the actions result in only existing actions are presented. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the method if implemented using a Java programming language. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method in a data processing system for presenting actions associated with an object displayed in a graphical user interface, the method comprising: 
<claim-text>associating actions with the object to form associated actions, wherein a hard-coded association between the associated actions and the object are absent, not extensible and undesirable; and </claim-text>
<claim-text>responsive to a selection of the object, presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the object is a folder and wherein the program is a file navigation program. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the object is a security object. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A data processing system comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a communications unit connected to the bus system; </claim-text>
<claim-text>a memory connected to the bus system, wherein the memory includes a set of instructions; and </claim-text>
<claim-text>a processing unit connected to the bus system, wherein the processing unit executes the set of instructions to dynamically associate actions with the object; and present the actions in the graphical user interface in response to a selection of the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A data processing system comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a communications unit connected to the bus system; </claim-text>
<claim-text>a memory connected to the bus system, wherein the memory includes a set of instructions; and </claim-text>
<claim-text>a processing unit connected to the bus system, wherein the processing unit executes the set of instructions to associate actions with the object to form associated actions, wherein a hard-coded association between the associated actions and the object are absent, not extensible and undesirable; and present the actions in the graphical user interface responsive to a selection of the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A data processing system comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a communications unit connected to the bus system; </claim-text>
<claim-text>a memory connected to the bus system, wherein the memory includes a set of instructions; and </claim-text>
<claim-text>a processing unit connected to the bus system, wherein the processing unit executes the set of instructions to identify actions associated with the object to form associated actions in response to an execution of a program associated with the object; and present the actions in the graphical user interface in response to a selection of the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A data processing system for dynamically associating actions with an object, comprising: 
<claim-text>first determining means, responsive to selection of an object, for determining an object type of the selected object; </claim-text>
<claim-text>second determining means for determining actions which can be performed on the object type by other objects in a data processing system at the time of selection; and </claim-text>
<claim-text>associating means for associating the determined actions with the selected object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The data processing system as in <highlight><bold>23</bold></highlight> comprising: 
<claim-text>querying means for querying the selected object for a runtime list of methods/actions known to object from a database; </claim-text>
<claim-text>retrieving means for retrieving a static list of methods/actions for the object type; and </claim-text>
<claim-text>combining means for combining the runtime list, static list, and actions by other objects to produce a combined list of actions for the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the object is a Java object. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the first determining means and the second determining means process a Java class. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein object is graphical user interface object representative of a network resource and the combined list of actions is presented in the interface to a user. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the method provides a static list of actions for a specific class. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A data processing system for presenting actions associated with an object displayed in a graphical user interface, the data processing system comprising: 
<claim-text>dynamically associating means for dynamically associating actions with the object; and </claim-text>
<claim-text>presenting means, responsive to a selection of the object, for presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the selection is made using a pointing device. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the pointing device is one of a mouse, a track ball, a touch pad, a light pen, a touch screen, or a digitizing pad. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the actions are presented as a pop-up menu. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the actions are presented as at least one of a selectable list, a selectable table, a tree, a set of button, and check boxes. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the actions are dynamically associated in response to the selection of the object. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the actions are dynamically associated when the object is initialized. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the actions are dynamically associated at runtime. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> further comprising: 
<claim-text>adding means for adding a new action to the actions prior to dynamically associating the actions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein changes to the actions result in only existing actions are presented. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the method if implemented using a Java programming language. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A data processing system for presenting actions associated with an object displayed in a graphical user interface, the data processing system comprising: 
<claim-text>associating means for associating actions with the object to form associated actions, wherein a hard-coded association between the associated actions and the object are absent, not extensible and undesirable; and </claim-text>
<claim-text>presenting means, responsive to a selection of the object, for presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A data processing system for presenting actions associated with an object displayed in a graphical user interface, the data processing system comprising: 
<claim-text>identifying means, responsive to an execution of a program associated with the object, for identifying actions associated with the object to form associated actions; and </claim-text>
<claim-text>presenting means, responsive to a selection of the object, for presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the object is a folder and wherein the program is a file navigation program. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the object is a security object. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A computer program product in a computer readable medium for dynamically associating actions with an object, the computer program product comprising: 
<claim-text>first instructions, responsive to selection of an object, for determining an object type of the selected object; </claim-text>
<claim-text>second instructions for determining actions which can be performed on the object type by other objects in a data processing system at the time of selection; and </claim-text>
<claim-text>third instructions for associating the determined actions with the selected object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A computer program product in a computer readable medium for presenting actions associated with an object displayed in a graphical user interface, the computer program product comprising: 
<claim-text>first instructions for dynamically associating actions with the object; and </claim-text>
<claim-text>second instructions, responsive to a selection of the object, for presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. A computer program product in a computer readable medium presenting actions associated with an object displayed in a graphical user interface, the computer program product comprising: 
<claim-text>first instructions for associating actions with the object to form associated actions, wherein a hard-coded association between the associated actions and the object are absent, not extensible and undesirable; and </claim-text>
<claim-text>second instructions, responsive to a selection of the object, for presenting the actions in the graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A computer program product in a computer readable medium for presenting actions associated with an object displayed in a graphical user interface, the computer program product comprising: 
<claim-text>first instructions, responsive to an execution of a program associated with the object, for identifying actions associated with the object to form associated actions; and </claim-text>
<claim-text>second instructions, responsive to a selection of the object, for presenting the actions in the graphical user interface.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001894A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001894A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001894A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001894A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001894A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
