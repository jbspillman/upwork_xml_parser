<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005082A1-20030102-D00000.TIF SYSTEM "US20030005082A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00001.TIF SYSTEM "US20030005082A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00002.TIF SYSTEM "US20030005082A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00003.TIF SYSTEM "US20030005082A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00004.TIF SYSTEM "US20030005082A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00005.TIF SYSTEM "US20030005082A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00006.TIF SYSTEM "US20030005082A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00007.TIF SYSTEM "US20030005082A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00008.TIF SYSTEM "US20030005082A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00009.TIF SYSTEM "US20030005082A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005082A1-20030102-D00010.TIF SYSTEM "US20030005082A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005082</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895116</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G09G005/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>218000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>345</class>
<subclass>739000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Methods and apparatus in information management system providing adding data and bookmarks to existing information logged</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Rajeeta</given-name>
<middle-name>Lalji</middle-name>
<family-name>Shah</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Lorin</given-name>
<middle-name>Evan</middle-name>
<family-name>Ullmann</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, program and system for editing data in a distributed computer network are provided. The invention comprises, in response to a request from a user, opening a log file and noting an entry associated with a message of interest. A message locator finds the message of interest in a designated location and bookmarks the message. A bookmark I/O component then locates and modifies the bookmarked message, and rewrites the modified message back to the designated location. The user can then view the modified message via a display device (i.e. GUI). </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to computer network environments, and more specifically it relates to bookmarking logged data. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Logging is the process of recording system events so that those actions can be reviewed later. Handlers are software objects that direct messages recorded by a logger to a destination. Messages can be directed to a file, a database, a console screen, or to other destinations. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Currently, adding notes to a file on a certain area of interest typically involves editing a copy of the file and creating new lines for bookmarks. This process is problematic if this information has to be shared across locations or by multiple people. The situation becomes even more problematic if two or more people are simultaneously analyzing the same log and wish to add a bookmark or a note to a particular event message or a group of messages. Current approaches are limited to I/O at the file level. This allows many people to view data, but only one can actually write to it. In addition, current approaches do not allow for distributed logging and distributed editing of log files. Current techniques also require parsing through large amounts of distributed kernel service (DKS) log data files due to installation and scale requirements. These techniques cannot pinpoint specific distributed data. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Therefore, it would be desirable to have a method of distributed editing of data in a distributed computer environment by means of bookmarking logged files, without having to edit the files and parse large amounts of data. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention provides a method, program and system for editing data in a distributed computer network. The invention comprises, in response to a request from a user, opening a log file and noting an entry associated with a message of interest. A message locator finds the message of interest in a designated location and bookmarks the message. A bookmark I/O component then locates and modifies the bookmarked message, and rewrites the modified message back to the designated location. The user can then view the modified message via a display device (i.e. GUI). </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram illustrating a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a schematic diagram illustrating a logging subsystem in accordance with the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a pictorial image illustrating a GUI console in accordance with the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a schematic diagram illustrating the system architecture for bookmarking log data in accordance with the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a flowchart illustrating an overview of the bookmarking process flow, using the architecture in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, in accordance with the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a flowchart illustrating the process of creating BookmarkNote data in accordance with the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts a flowchart illustrating the process of bookmarking and modifying messages via the Message group locator and Log Bookmark I/O, is depicted in accordance with the present invention; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a flowchart illustrating the process of displaying the new log data via the GUI console in accordance with the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the depicted example, a server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> also are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an eServer pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) or Linux operating systems. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, CD-ROM drive <highlight><bold>330</bold></highlight>, and DVD drive <highlight><bold>332</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The present invention provides a logging system with distributed, multilevel architecture which allows remote control of logging elements. The present invention also allows the logging system to be used standalone or in a distributed environment. The logging system allows a system to produce large amounts of data for local consumption, as opposed to a small amount of data for storage in a central remote repository. Dual output is easily configured for an administrator wishing to see logs on the console, in multiple files and in a database for future queries. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Furthermore, the present invention provides for the creation and logging of a taskID. This allows a component that is logging to create a task identification (TaskID) which follows this logging task (which may flow across multiple components and ORBs) until completion. The TaskID is passed in the thread context in local methods and in the message context in remote method invocations. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> schematic diagram illustrating a logging subsystem is depicted in accordance with the present invention. The logging subsystem <highlight><bold>400</bold></highlight> uses several objects to record system events. These objects include loggers <highlight><bold>415</bold></highlight>, handlers <highlight><bold>424</bold></highlight>, filters <highlight><bold>420</bold></highlight> (also referred to as masks), and formatters <highlight><bold>418</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Loggers are software objects that record events that occur while a component is operating. The Logging subsystem supports two types of loggers: message loggers <highlight><bold>416</bold></highlight> and trace loggers <highlight><bold>417</bold></highlight>. Message loggers <highlight><bold>416</bold></highlight> are used to record textual messages from a component. These messages are internationalized for individual locales. Trace loggers <highlight><bold>417</bold></highlight> are used to capture information about the operating environment when component code fails to operate as intended. Support personnel use the information captured by trace loggers <highlight><bold>417</bold></highlight> to trace a problem to its source or to determine why an error occurred. Generally, this information is not enabled by default. Because trace messages are intended for support personnel, they are generally written to a file that can be viewed during a postmortem Examination. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Handlers <highlight><bold>424</bold></highlight> are software objects that direct messages recorded by a logger to a destination. Messages can be directed to a file, a database, a console screen, or to other destinations. Handlers are associated with loggers to send information recorded by a logger to the desired destination. The present invention provides the configuration definitions for the following types of handlers: </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> Console Handler <highlight><bold>426</bold></highlight> writes log records to a console. </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> File Handler <highlight><bold>428</bold></highlight> writes log records to a file. </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> Multifile Handler <highlight><bold>430</bold></highlight> writes log records to a rotating set of log files. </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> Serial File Handler <highlight><bold>432</bold></highlight> writes log records to files as serialized objects. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Database Handler <highlight><bold>434</bold></highlight> writes log records to a database. </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> Server Handler <highlight><bold>436</bold></highlight> sends log records in batch mode to a remote logging server for processing. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Filters <highlight><bold>420</bold></highlight> can be applied to loggers, to handlers, or to both loggers and handlers. When applied to a logger, the filter determines which types of message and trace records the logger processes. When applied to a handler, the filter determines which types of message and trace records the handler sends to a destination. Filters <highlight><bold>420</bold></highlight> work by comparing a log record type against a set of criteria, or a query, contained within the filter <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Formatters <highlight><bold>418</bold></highlight> are software objects used to format the output of information contained in log records. In general, formatters <highlight><bold>418</bold></highlight> can be used to tailor things like date and time stamps to local conventions. A single formatter can be used by multiple handlers. Having numerous loggers, handlers, filters, and formatters can cause an undue amount of logging administration to perform. To reduce the administration burden, one can create &ldquo;groups&rdquo;. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> A group contains loggers, handlers, filters, or formatters that have common properties. By creating groups, a newly created logger, handler, filter, or formatter with unset properties can inherit values for those properties from the group. If a logger, handler, filter, or formatter belongs to a group and its properties are updated, all other loggers, handlers, filters or formatters in that group will also have that property updated. This eliminates the need for manually updating individual logger, handler, filter, or formatter properties. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The Log Manager <highlight><bold>422</bold></highlight> is the heart of the logging system. It creates and configures all of the previously discussed logging objects. It is coupled with the ORB, the Configuration Service, and the Directory Service to respond to component and application requests to send log messages to handlers and formatters. Each ORB has a log manager associated with it. The handlers may be local or remote with respect to the originating application. It is useful at times to refer to loggers, handlers, filters, and formatters using a generic term that includes one or more of these software objects. The term &ldquo;logging element&rdquo; will be used when a reference to a particular kind of logging object, such as a formatter object, is not necessary. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The present invention uses existing logging subsystem elements to find messages, via bookmarks, that need to be modified. Smart bookmark-logging-enabled readers can be used to perform additional tracking of status via bookmark data. Additional data can be gathered based on a user, ORB, etc., and automatically added on the user&apos;s behalf in order to convey more information to another user reading this bookmark&apos;s data. This approach allows for distributed editing within the distributed network, enabling multiple administrators to simultaneously edit logging data. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In the present invention, data serves as both a bookmark locator and user customized data attached to logging data. GUI and CLI are used to read, edit, or filter bookmark data. The user can add (edit) logging data such as simple notes tagged to a single message, or notes tagged to a group of messages (duration). </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> pictorial image illustrating a GUI console is depicted in accordance with the present invention. The Console <highlight><bold>500</bold></highlight> is the role-based GUI for performing tasks using management software. It presents only the tasks that are relevant to a particular role, and enables the user to perform tasks without having to understand the details of the underlying software. The Console <highlight><bold>500</bold></highlight> also provides consistent controls and behaviors across tasks and includes embedded user assistance. A &ldquo;role&rdquo; is a job function, such as &ldquo;software distributor&rdquo;, that identifies the tasks that can be performed and the resources to which a user has access. A user might be assigned one or more roles depending on the duties that the user performs. A &ldquo;task&rdquo; represents one or more software components that run as an independent entity to accomplish a user&apos;s work. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The banner area <highlight><bold>501</bold></highlight> between the title bar and the menu bar that can serve as a Web browser. This optional area can be customized by a system administrator to include relevant information for a particular organization. For example, an organization might want to include the role description for a particular user, the company logo, or links to Internet and intranet sites in this area. The portfolio <highlight><bold>502</bold></highlight> is a container for the tasks that are relevant for a given role. When open, the portfolio <highlight><bold>502</bold></highlight> displays within the Console <highlight><bold>500</bold></highlight> to the left of the work area <highlight><bold>506</bold></highlight>. When closed, the portfolio <highlight><bold>502</bold></highlight> is indicated by the portfolio handle. The status bar <highlight><bold>503</bold></highlight> is located below the work area <highlight><bold>506</bold></highlight> that is divided into two sections. The section on the left contains information about the object over which the mouse pointer is hovering. The section on the right contains a progress indicator or status information about the task that is running. The taskbar <highlight><bold>504</bold></highlight> is located at the bottom of the window that contains a task button for each task that is running. When a user right-clicks the background of the taskbar <highlight><bold>504</bold></highlight>, the context menu for the taskbar <highlight><bold>504</bold></highlight> opens. The task button <highlight><bold>505</bold></highlight> on the taskbar <highlight><bold>504</bold></highlight> represents a task that is running. A task might have multiple windows associated with it. When a user clicks the task button <highlight><bold>505</bold></highlight>, the window associated with the task opens in the work area <highlight><bold>506</bold></highlight>. When the user right-clicks a task button <highlight><bold>505</bold></highlight>, the context menu for that task opens. Each task button <highlight><bold>505</bold></highlight> also includes a small icon that conveys the current status of the task. The work area <highlight><bold>506</bold></highlight> is the area in which the GUI for a task is displayed. This area does not include the portfolio <highlight><bold>502</bold></highlight> and the Assistant <highlight><bold>507</bold></highlight>. The assistant <highlight><bold>507</bold></highlight> is the place to go for answers to questions. The assistant <highlight><bold>507</bold></highlight> is opened by the question mark located on the far right of the toolbar or in the upper right of any detached window. When it is open, the assistant <highlight><bold>507</bold></highlight> displays within the Console <highlight><bold>500</bold></highlight> to the right of the work area. It provides contextual help information for the task that you are performing, as well as reference information. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The present invention also provides a CLI that allows the user to perform system operations from a command line instead of using the GUI Console <highlight><bold>500</bold></highlight>. The command line interface can be run without the GUI <highlight><bold>500</bold></highlight> running or in a separate window while the GUI <highlight><bold>500</bold></highlight> is also running. The CLI provides complete control of the managed environment and can easily be used by shell scripts to perform complex sequences of commands. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> schematic diagram illustrating the system architecture for bookmarking log data is depicted in accordance with the present invention. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> flowchart illustrating an overview of the bookmarking process flow, using the architecture in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, is depicted in accordance with the present invention. The user opens a log file from the GUI console <highlight><bold>500</bold></highlight>, or by using an OS file reader, and identifies a particular message of interest via filters or manual inspection (step <highlight><bold>701</bold></highlight>). An example of a message of interest is: </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> 07:17:41.139 FNGDR3012E The Messaging Service for the directory running on the local ORB was unable to subscribe to event messages. No directory events can be processed by the ORB. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The user enters a command to note a particular message (step <highlight><bold>702</bold></highlight>). The user can enter the command using a log CLI to add the note &ldquo;look here ASAP&rdquo; to a message. Alternatively, the user may enter the data using a GUI, such as GUI Console <highlight><bold>500</bold></highlight>. The CLI or GUI then calls the Log Bookmark Manager (LBM) <highlight><bold>610</bold></highlight> to create a BookmarkNote (step <highlight><bold>703</bold></highlight>). </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart illustrating the process of creating BookmarkNote data is depicted in accordance with the present invention. After the LBM <highlight><bold>610</bold></highlight> is called, the system determines the means of command input (step <highlight><bold>801</bold></highlight>). If the user uses a CLI, the LBM <highlight><bold>610</bold></highlight> gets an orbname from the option on the command line (step <highlight><bold>802</bold></highlight>). If the user relies on a GUI <highlight><bold>500</bold></highlight>, the LBM <highlight><bold>610</bold></highlight> gets the orbname based on the particular log file that is being viewed with the GUI <highlight><bold>500</bold></highlight> (step <highlight><bold>803</bold></highlight>). </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Once the needed orbname is retrieved, the LBM <highlight><bold>610</bold></highlight> gets the name of the principal executing the CLI or GUI from the DKS security subsystem (step <highlight><bold>804</bold></highlight>). The LBM <highlight><bold>610</bold></highlight> then determines the current date and time in order to note the time of bookmark creation (step <highlight><bold>805</bold></highlight>). Based on the information gathered in the previous steps, the LBM <highlight><bold>610</bold></highlight> creates a BookmarkNote data <highlight><bold>613</bold></highlight> (step <highlight><bold>806</bold></highlight>). Bookmarks can be sorted according to time, date, and/or the administrator editing the data. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the LBM <highlight><bold>610</bold></highlight> calls the Message group locator <highlight><bold>611</bold></highlight> and Log Bookmark I/O <highlight><bold>612</bold></highlight> (step <highlight><bold>704</bold></highlight>). The Message group locator <highlight><bold>611</bold></highlight> locates the log file <highlight><bold>601</bold></highlight> or database <highlight><bold>602</bold></highlight> that needs to be updated with the BookmarkNote data <highlight><bold>613</bold></highlight>, and the Log Bookmark I/O <highlight><bold>612</bold></highlight> reads the old log data and locates the message data to be modified, adds the new BookmarkNote data <highlight><bold>613</bold></highlight>, and then writes the new data back to the file <highlight><bold>601</bold></highlight> or database <highlight><bold>602</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> flowchart illustrating the process of bookmarking and modifying messages via the Message group locator <highlight><bold>611</bold></highlight> and Log Bookmark I/O <highlight><bold>612</bold></highlight>, is depicted in accordance with the present invention. The Message group locator <highlight><bold>611</bold></highlight> first determines the type of handler being used (step <highlight><bold>901</bold></highlight>). If the handler is local, the data will be read from and written to local log file <highlight><bold>601</bold></highlight>. If the handler is distributed, the data will be read from and written to the logging database <highlight><bold>602</bold></highlight>. After the Message group locator <highlight><bold>611</bold></highlight> has determined the handler type, it gets all the messages from the proper location (step <highlight><bold>902</bold></highlight>) and sorts them in time order (step <highlight><bold>903</bold></highlight>). </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The Message group locator <highlight><bold>611</bold></highlight> then determines if the messages are grouped by duration (step <highlight><bold>904</bold></highlight>). If there is no duration grouping, the Message group locator <highlight><bold>611</bold></highlight> iterates through the messages individually until it finds the message that needs to be modified (steps <highlight><bold>906</bold></highlight> and <highlight><bold>907</bold></highlight>). </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> If the messages are grouped by duration, the Message group locator <highlight><bold>611</bold></highlight> looks for an end time (step <highlight><bold>905</bold></highlight>). In duration bookmarking, messages are grouped according to start and end times, and possibly start and end dates. All messages falling within the specified start and end times are treated as a single group for purposes of bookmarking and modification. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In the absence of duration grouping, there is a start time (log time) but no end time. In this manner, individual messages are treated as groups of one. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> After the Message group locator <highlight><bold>611</bold></highlight> finds a message to be modified, it bookmarks the data (step <highlight><bold>908</bold></highlight>). The Log Bookmark I/O <highlight><bold>612</bold></highlight> then locates the bookmarked data, gets the proper BookmarkNote data <highlight><bold>613</bold></highlight> and performs a string Replace with new data (step <highlight><bold>909</bold></highlight>). The data is then written to the local file <highlight><bold>601</bold></highlight> or logging database <highlight><bold>602</bold></highlight> (step <highlight><bold>910</bold></highlight>). </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, after the bookmark has been added to the log data, the user views the new log data using GUI console <highlight><bold>500</bold></highlight> or a file reader program provided by the OS editor (step <highlight><bold>705</bold></highlight>). </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> flowchart illustrating the process of displaying the new log data via the GUI console <highlight><bold>500</bold></highlight> is depicted in accordance with the present invention. The GUI <highlight><bold>500</bold></highlight> determines the types of handlers that are available and gives the user a choice among the handlers (step <highlight><bold>1001</bold></highlight>). The user then selects one of the handlers (steps <highlight><bold>1002</bold></highlight>). The GUI <highlight><bold>500</bold></highlight> then finds the message location (step <highlight><bold>1003</bold></highlight>) and asks the handler for the first messageID (step <highlight><bold>1004</bold></highlight>). The GUI <highlight><bold>500</bold></highlight> uses the messageID to get the correct version of the message (step <highlight><bold>1005</bold></highlight>). The GUI <highlight><bold>500</bold></highlight> then gets the attributes (e.g. time, date, language) based on preferences specified by filter settings (step <highlight><bold>1006</bold></highlight>) and then displays the message, with the proper attributes, to the user (step <highlight><bold>1007</bold></highlight>). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for editing data in a distributed computer network, the method comprising the computer implemented steps of: 
<claim-text>in response to a request from a user, opening a log file and noting an entry associated with a message of interest; </claim-text>
<claim-text>calling a message locator which locates the message of interest in a designated location and bookmarks the message; </claim-text>
<claim-text>calling a bookmark I/O component which locates and modifies the bookmarked message, and rewrites the modified message back to the designated location; and </claim-text>
<claim-text>displaying the modified message to the user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising creating bookmark note data for the message of interest, wherein the bookmark note data comprises at least one of the following: 
<claim-text>the name of a node within the distributed network which generated the message of interest; </claim-text>
<claim-text>the name of the user submitting the request for message data; and </claim-text>
<claim-text>current time and data when the bookmark note data is created. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein bookmark note data is sorted according to time and date. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein bookmark note data is sorted according to user name. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the designated location containing the message of interest is determined by a logging handler. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the designated location containing the message of interest is a local log file. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the designated location containing the message of interest is a logging database. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the steps of receiving user input and displaying the modified message to the user are by means of a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein messages in the designated location are grouped according to a start time and end time, wherein the messages between the start and end times are bookmarked and modified as a group. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising associating messages from different nodes within the distributed computer network. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein multiple users may simultaneously access and edit logging data. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein attributes for displaying the message are predetermined. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein attributes for displaying the message are customized by the user. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method for a plurality of users to simultaneously annotate a log file in which events in a distributed computer environment are recorded, the method comprising the steps of: 
<claim-text>responsive to a first user input from a first user at a node coupled to the distributed environment, retrieving at least a first event record (message) in the log file from a logging system; </claim-text>
<claim-text>responsive to a second user input from the first user, modifying the first event record; </claim-text>
<claim-text>sending the modified first event record to the logging system; </claim-text>
<claim-text>responsive to a third user input from a second user at a second node coupled to the distributed environment, retrieving at least a second event record (message) in the log file from the logging system; </claim-text>
<claim-text>responsive to a fourth user input from the second user, modifying the second event record; </claim-text>
<claim-text>sending the modified second event record to the logging system; and </claim-text>
<claim-text>updating the log file to reflect the modified first and second event records by the logging system; </claim-text>
<claim-text>wherein the modification of the first and second event records is accomplished contemporaneously. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the modification to the first and second event records is bookmarking the first and second records. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the modification to the first and second event records is annotating the first and second event records. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein a plurality of copies of the log file are stored in a plurality of locations in the distributed environment and updates are sent to each of the locations to reflect the modification of the first and second event records. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer program product in a computer readable medium for use in a data processing system, for editing data in a distributed computer network, the computing program product comprising: 
<claim-text>in response to a request from a user, instructions for opening a log file and noting an entry associated with a message of interest; </claim-text>
<claim-text>instructions for calling a message locator which locates the message of interest in a designated location and bookmarks the message; </claim-text>
<claim-text>instructions for calling a bookmark I/O component which locates and modifies the bookmarked message, and rewrites the modified message back to the designated location; and </claim-text>
<claim-text>instructions for displaying the modified message to the user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising instructions for creating bookmark note data for the message of interest, wherein the bookmark note data comprises at least one of the following: 
<claim-text>the name of a node within the distributed network which generated the message of interest; </claim-text>
<claim-text>the name of the user submitting the request for message data; and </claim-text>
<claim-text>current time and data when the bookmark note data is created. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein bookmark note data is sorted according to time and date. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein bookmark note data is sorted according to user name. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the designated location containing the message of interest is determined by a logging handler. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the designated location containing the message of interest is a local log file. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the designated location containing the message of interest is a logging database. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the steps of receiving user input and displaying the modified message to the user are by means of a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein messages in the designated location are grouped according to a start time and end time, wherein the messages between the start and end times are bookmarked and modified as a group. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein multiple users may simultaneously access and edit logging data. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising instructions for setting a filter to display only specified types of bookmarks. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein attributes for displaying the message are predetermined. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein attributes for displaying the message are customized by the user. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A computer program product in a computer readable medium for use in a data processing system, for a plurality of users to simultaneously annotate a log file in which events in a distributed computer environment are recorded, the computer program product comprising: 
<claim-text>responsive to a first user input from a first user at a node coupled to the distributed environment, instructions for retrieving at least a first event record (message) in the log file from a logging system; </claim-text>
<claim-text>responsive to a second user input from the first user, instructions for modifying the first event record; </claim-text>
<claim-text>instructions for sending the modified first event record to the logging system; </claim-text>
<claim-text>responsive to a third user input from a second user at a second node coupled to the distributed environment, instructions for retrieving at least a second event record (message) in the log file from the logging system; </claim-text>
<claim-text>responsive to a fourth user input from the second user, instructions for modifying the second event record; </claim-text>
<claim-text>instructions for sending the modified second event record to the logging system; and </claim-text>
<claim-text>instructions for updating the log file to reflect the modified first and second event records by the logging system; </claim-text>
<claim-text>wherein the modification of the first and second event records is accomplished contemporaneously. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the modification to the first and second event records is bookmarking the first and second records. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the modification to the first and second event records is annotating the first and second event records. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein a plurality of copies of the log file are stored in a plurality of locations in the distributed environment and updates are sent to each of the locations to reflect the modification of the first and second event records. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A system for editing data in a distributed computer network, the system comprising: 
<claim-text>a register which, in response to a request from a user, opens a log file and notes an entry associated with a message of interest; </claim-text>
<claim-text>a message locator which locates the message of interest in a designated location and bookmarks the message; </claim-text>
<claim-text>a bookmark I/O component which locates and modifies the bookmarked message, and rewrites the modified message back to the designated location; and </claim-text>
<claim-text>a display component which displays the modified message to the user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A system for a plurality of users to simultaneously annotate a log file in which events in a distributed computer environment are recorded, the system comprising: 
<claim-text>a first retrieving component which retrieves at least a first event record (message) in the log file from a logging system responsive to a first user input from a first user at a node coupled to the distributed environment; </claim-text>
<claim-text>a first editing component which modifies the first event record responsive to a second user input from the first user; </claim-text>
<claim-text>a first communication component which sends the modified first event record to the logging system; </claim-text>
<claim-text>a second retrieving component which retrieves at least a second event record (message) in the log file from the logging system responsive to a third user input from a second user at a second node coupled to the distributed environment; </claim-text>
<claim-text>a second editing component which modifies the second event record responsive to a fourth user input from the second user; </claim-text>
<claim-text>a second communication component which sends the modified second event record to the logging system; and </claim-text>
<claim-text>a register which updates the log file to reflect the modified first and second event records by the logging system; </claim-text>
<claim-text>wherein the modification of the first and second event records is accomplished contemporaneously.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005082A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005082A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005082A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005082A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005082A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005082A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005082A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005082A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005082A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005082A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005082A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
