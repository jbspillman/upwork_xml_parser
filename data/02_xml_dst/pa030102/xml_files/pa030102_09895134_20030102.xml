<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004933A1-20030102-D00000.TIF SYSTEM "US20030004933A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00001.TIF SYSTEM "US20030004933A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00002.TIF SYSTEM "US20030004933A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00003.TIF SYSTEM "US20030004933A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00004.TIF SYSTEM "US20030004933A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00005.TIF SYSTEM "US20030004933A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00006.TIF SYSTEM "US20030004933A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00007.TIF SYSTEM "US20030004933A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00008.TIF SYSTEM "US20030004933A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00009.TIF SYSTEM "US20030004933A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00010.TIF SYSTEM "US20030004933A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004933A1-20030102-D00011.TIF SYSTEM "US20030004933A1-20030102-D00011.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004933</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895134</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>003000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Compound request processing</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Doron</given-name>
<family-name>Ben-Yehezkel</family-name>
</name>
<residence>
<residence-us>
<city>Newport Beach</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>J.D. Harriman II</name-1>
<name-2>COUDERT BROTHERS</name-2>
<address>
<address-1>333 South Hope Street, 23rd Floor</address-1>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90071</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention provides a method and apparatus for compound request processing. In one embodiment, a server maintains a cache of data items it has provided to a client. When the client requests a data item from the server, the server retrieves the data item and also retrieves all available associated data items. The server determines which associated data items are unchanged. Then, the server transmits the data item along with information indicating whether associated data items are unchanged. In one embodiment, when a client wishes to request an associated data item, it first determines whether the server indicated that the associated data item is unchanged. If the associated data item is unchanged, the client uses the copy of the associated data item in the client&apos;s cache. If the associated data item is changed, the client requests the associated data item from the server. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to the field of client/server systems, and in particular to a method and apparatus for compound request processing. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Background Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In some client/server systems, a client retrieves data from a server. Some data, web pages for instance, is associated with other data which the client will likely wish to retrieve as well. Typically, a client must issue several requests to a server to retrieve all associated data, and each request has an associated latency period. In some systems (e.g., wireless networks), the latency period is large. If the number of requests is large, the delay in retrieving all data becomes unacceptably large. Additionally, some data is retrieved on multiple occasions, which reduces the efficiency of the data transfer. In systems where data transfers between a client and a server are expensive (e.g., wireless networks for cell phones or pagers), sending the same data multiple times increases costs. These problems can be better understood by a review of client/server systems. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Client/Server Systems </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In client/server systems, a client sends requests for service to a server. The server receives the requests of many clients and services these requests. In some systems, the request is for a data item. Some data objects are associated with other data objects which the client will likely wish to retrieve as well. For example, a web page may be associated with multiple images, frames or sound. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In prior art methods, a web page is requested by the client. The server retrieves the web page and sends it to the client. Then, the client requests the objects associated with the web page. The number of objects a client can retrieve simultaneously is four. If a web page contains 40 objects, the client must make requests at least 11 times (one time for the web page and ten times for the 40 objects). </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a prior art method of retrieving a web page and associated data items. At step <highlight><bold>100</bold></highlight>, the client requests the web page from the server. At step <highlight><bold>110</bold></highlight>, the server retrieves the web page. At step <highlight><bold>120</bold></highlight>, the server transmits the web page to the client. At step <highlight><bold>130</bold></highlight>, it is determined whether there are any associated data objects left to retrieve. If there are no associated data objects left to retrieve, at step <highlight><bold>140</bold></highlight>, the retrieval is complete. If there is an associated data object left to retrieve, at step <highlight><bold>150</bold></highlight>, the client simultaneously requests a maximum of four associated data objects from the server. At step <highlight><bold>160</bold></highlight>, the server retrieves the requested data objects. At step <highlight><bold>170</bold></highlight>, the server transmits the requested data objects to the client and the process repeats at step <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Each request between a client and a server is associated with a latency period. In some wireless networks (e.g., the client is a cellular phone or pager), the latency period is large because the transmission medium is unstable and is shared by many users. Thus, a high number of requests causes a large gap between when a web page is requested and when the web page and all associated data items are displayed. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Sometimes, some of the data items associated with a data item are altered. For example, a web page may contain an image or text that changes periodically. An image may be an advertisement which changes if another advertiser pays for the space. Similarly, a page may contain news headlines which change as new events occur. Thus, a client may refresh the web page by requesting it from the server again. However, some or all of page may be unchanged. In prior art methods, the client makes multiple requests to retrieve the page and all associated objects even though no object has changed. If bandwidth is expensive (e.g., wireless networks), the unchanged objects are retrieved at a high cost. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In a prior art method described in U.S. Pat. No. 6,115,384 entitled &ldquo;Gateway architecture for data communication bandwidth-constrained and charge-by-use networks&rdquo;, herein incorporated by reference, the cost associated with transmitting data over a section of a network where bandwidth is expensive is reduced by converting the data from TCP to a more efficient protocol before transmission over the bandwidth-constrained portion of the network and converting back to TCP after transmission. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The present invention provides a method and apparatus for compound request processing. In one embodiment of the present invention, a server maintains a cache of data items it has provided to a client. When the client requests a data item from the server, the server retrieves the data item and also retrieves all available associated data items. The server determines which associated data items are unchanged. Then, the server transmits the data item along with information indicating whether associated data items are unchanged. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one embodiment, when a client wishes to request an associated data item, it first determines whether the server indicated that the associated data item is unchanged. If the associated data item is unchanged, the client uses the copy of the associated data item in the client&apos;s cache. If the associated data item is changed, the client requests the associated data item from the server. In one embodiment, the client can request an unlimited number of associated data items from the server with one request. The server retrieves the associated data items and stores them in a cache. Then, the server transmits as many data items to the client as the client requests. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In another embodiment, the connection between the client and the server is a wireless network, and data items are web pages and associated objects. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> These and other features, aspects and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flow diagram of a prior art method of retrieving a web page and associated data items. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> is a block diagram of a client/server architecture in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> is a block diagram of a client/server request servicing architecture in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> is a block diagram of the client of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> in greater detail in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2D</cross-reference> is a block diagram of the server of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> in greater detail in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram of the process of retrieving a data item and available associated data items in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram of the process of requesting associated data items in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram of the process of requesting associated data items in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow diagram of the process of retrieving a web page via a wireless network in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flow diagram of the process of transmitting to a client new/unchanged indicators for associated objects in accordance with one embodiment of the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow diagram of the process of retrieving an object in accordance with one embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The invention is a method and apparatus for compound request processing. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It is apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Retrieving Previously Retrieved Data Items </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In one embodiment of the present invention, a server maintains a cache of data items it has provided to a client. The client also maintains a cache of data items. When the client requests a data item from the server, the server retrieves the data item. In one embodiment, the server also retrieves all available associated data items. If the data items were previously requested, the server determines which associated data items are unchanged. Then, the server transmits the data item along with information indicating whether associated data items are unchanged to the client without converting the response to another transmission protocol. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Since the information indicating whether a data item is unchanged is typically much smaller than the data item, a significantly lower amount of data is transmitted between the server and the client with the above embodiment. In systems where transmissions between clients and servers are expensive (e.g., wireless networks), the above embodiment reduces the total cost of some transmissions. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> illustrates a client/server architecture in accordance with one embodiment of the present invention. The client <highlight><bold>200</bold></highlight> includes a cache <highlight><bold>205</bold></highlight> and connects to the server <highlight><bold>210</bold></highlight>. The server has a cache <highlight><bold>215</bold></highlight> of data items it previously sent to the client. The server is also connected to the Internet <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> illustrates a client/server request servicing architecture in accordance with one embodiment of the present invention. When a request is initiated by the browser <highlight><bold>220</bold></highlight>, a socket <highlight><bold>225</bold></highlight> is opened and the request is sent through the socket. After the client receives the request, the client temp cache <highlight><bold>230</bold></highlight> is checked to see if a response for the request already exists. If it does, the database <highlight><bold>235</bold></highlight> is updated and the response object is sent back to the browser and displayed. If the response object is not in the temp cache, a database lookup is performed and a request is prepared <highlight><bold>238</bold></highlight> for submittal to the server <highlight><bold>240</bold></highlight>. The request type is identified, and it is then compressed and sent to the server side of the process via the Protocol Application Layer <highlight><bold>245</bold></highlight>. A response from the server is processed via the Protocol Application Layer. Response objects are reconstructed by separating composite responses <highlight><bold>239</bold></highlight>. The database is updated and the response is sent to the browser. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> On the server, the request from the client is processed via the server&apos;s Protocol Application Layer <highlight><bold>246</bold></highlight>. When the request type has been identified the process begins a cache database lookup and reconstructs the request <highlight><bold>250</bold></highlight>. If the requested item is not in the temp cache <highlight><bold>255</bold></highlight>, the request is sent to the Internet <highlight><bold>247</bold></highlight> through a CSHTTP thread pool <highlight><bold>248</bold></highlight>. The response from the internet returns through the CSHTTP thread pool. If the response is HTML <highlight><bold>253</bold></highlight>, the html tag is scanned and a pre-fetch http request is built <highlight><bold>254</bold></highlight>. The pre-fetch request is registered in the temp cache, and sent to the Internet through the CSHTTP thread pool. If the response is a pre-fetch <highlight><bold>256</bold></highlight>, the image is compressed <highlight><bold>257</bold></highlight> and the data is added to the temp cache. If the response is not a pre-fetch, a proper response is built <highlight><bold>249</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> If the requested item is in the temp cache, a proper response is built. If this response does not have some associated pending pre-fetch <highlight><bold>251</bold></highlight>, the response is sent to the client via the server&apos;s Protocol Application Layer. If the response has some associated pending pre-fetch, it is added to a temp response Q <highlight><bold>252</bold></highlight>, which is sent to the client through the server&apos;s Protocol Application Layer later. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Client </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> illustrates the client of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> in greater detail in accordance with one embodiment of the present invention. When a request is initiated by the browser <highlight><bold>220</bold></highlight>, a socket <highlight><bold>225</bold></highlight> is opened and the request is sent through the socket. After the client receives the request, the client temp cache is checked to see if it contains a matching URL <highlight><bold>258</bold></highlight>. If it does, it is determined whether the requested data is valid <highlight><bold>259</bold></highlight>. If the data is valid, the object may be removed from the cache if the reference count is 0 and a time period is expired <highlight><bold>261</bold></highlight>. Then, the database <highlight><bold>235</bold></highlight> is updated and the response object is sent back to the browser and displayed. If the response object is not in the temp cache or if the requested data is not valid, a database lookup is performed and a request is prepared <highlight><bold>238</bold></highlight> for submittal to the server <highlight><bold>240</bold></highlight>. The request type is identified, and it is then compressed and sent to the server side of the process via the Protocol Application Layer <highlight><bold>245</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> A response from the server is processed via the Protocol Application Layer. The response is uncompressed <highlight><bold>262</bold></highlight>. It is determined whether the response is a composite response <highlight><bold>263</bold></highlight>. If it is a composite response, the response is separated into individual responses <highlight><bold>264</bold></highlight>. For each individual response, it is determined whether it is a full response <highlight><bold>266</bold></highlight>, a delta response <highlight><bold>267</bold></highlight> or a delta-crc response <highlight><bold>268</bold></highlight>. If the response is a delta or delta-crc response, a lookup is performed in the database <highlight><bold>269</bold></highlight>. It is determined whether the response is http status <highlight><bold>200</bold></highlight> <highlight><bold>270</bold></highlight>. If it is, it is determined whether the response is HTML <highlight><bold>283</bold></highlight>. If the response is HTML, the html tag is scanned and a pre-fetch http request is built <highlight><bold>284</bold></highlight>. Regardless of whether the response is HTML, it is saved in the temp cache <highlight><bold>271</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> If the response is not http status <highlight><bold>200</bold></highlight>, it is determined whether it is http status <highlight><bold>304</bold></highlight> <highlight><bold>272</bold></highlight>. If it is, it is determined whether the data is in the cache <highlight><bold>273</bold></highlight>. If the data is not in the temp cache, it is saved to the temp cache. If it is in the temp cache, it is determined whether the response is HTML <highlight><bold>283</bold></highlight>. After the response is saved to the cache, if there is a browser request <highlight><bold>274</bold></highlight>, the object may be removed from the cache if the reference count is 0 and a time period is expired <highlight><bold>261</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Server </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2D</cross-reference> illustrates the server of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> in greater detail in accordance with one embodiment of the present invention. When the request type has been identified the process begins a cache database lookup and reconstructs the request <highlight><bold>250</bold></highlight>. It is determined whether a matching URL is found <highlight><bold>275</bold></highlight> in the temp cache <highlight><bold>255</bold></highlight>. If no matching URL is found, the request is sent to the pending Q <highlight><bold>260</bold></highlight> for transfer to the Internet via the CSHTTP thread pool <highlight><bold>248</bold></highlight>. If there is a matching URL, it is determined whether the response is in the cache <highlight><bold>276</bold></highlight>. If the response is not in the cache, the type of request on the pending queue is modified to match the client request <highlight><bold>277</bold></highlight>. If the response is in the cache, it is determined whether the requested data is valid <highlight><bold>278</bold></highlight>. If it is, the object is removed from the cache after it expires <highlight><bold>279</bold></highlight> and the database is updated <highlight><bold>280</bold></highlight>. If the requested data is not valid, it is removed form the cache and the client request is re-sent <highlight><bold>281</bold></highlight> and put on the pending Q. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When a reply comes back from the Internet, it passes through the CSHTTP thread pool and it is determined whether the status code is <highlight><bold>200</bold></highlight> <highlight><bold>282</bold></highlight>. If it is, it is determined whether the response is HTML <highlight><bold>285</bold></highlight>. If the response is not HMTL, it is determined whether it is an image <highlight><bold>286</bold></highlight>. If it is an image, image reduction is performed <highlight><bold>287</bold></highlight>. Regardless of whether it is an image, a database lookup is performed <highlight><bold>288</bold></highlight> and the data is compressed <highlight><bold>289</bold></highlight>. If the status code is not <highlight><bold>200</bold></highlight>, it is determined whether the status code is <highlight><bold>304</bold></highlight> <highlight><bold>291</bold></highlight>. If it is, a database lookup is performed to determine whether the response is available in the cache <highlight><bold>292</bold></highlight>. If it is, it is determined whether the response is HTML <highlight><bold>293</bold></highlight>. If the response is HTML in <highlight><bold>293</bold></highlight> or <highlight><bold>285</bold></highlight>, the HTML tag is scanned <highlight><bold>294</bold></highlight>. Then, an http request is built <highlight><bold>295</bold></highlight> and sent to the pending Q. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> For all requests, it is determined whether the response is to a pre-fetch <highlight><bold>290</bold></highlight>. If it is not, the database is updated <highlight><bold>280</bold></highlight>. If it is, it is added to the pending Q and it is determined whether an HTML page is pending <highlight><bold>296</bold></highlight>. If an HTML page is pending, the data base is updated and the response is added to the temporary response pending Q <highlight><bold>297</bold></highlight>. After a database update, it is determined whether the response is an HTML page spun off from a pre-fetch request <highlight><bold>298</bold></highlight>. If it is not, the response is sent to the client through the Protocol Application Layer <highlight><bold>246</bold></highlight>. If the response is an HTML page spun off from a pre-fetch request, it is added to the temporary response pending Q. Once the response on the temporary response pending Q reaches a size limit or a time out <highlight><bold>299</bold></highlight>, it is removed from the Q and sent to the client through the Protocol Application Layer. Thus, the server will piggyback all &ldquo;no change&rdquo; responses back to the client within the single reply. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates the process of retrieving a data item and available associated data items in accordance with one embodiment of the present invention. At step <highlight><bold>300</bold></highlight>, a client requests a data item from a server. At step <highlight><bold>310</bold></highlight>, the server retrieves the data item and all available associated data items. In one embodiment, the server retrieves the data item and available associated data items from the Internet. At step <highlight><bold>320</bold></highlight>, the server determines which associated data items were previously requested and are still in its cache. At step <highlight><bold>330</bold></highlight>, the server determines which cached associated data items are unchanged. At step <highlight><bold>340</bold></highlight>, the server transmits the data item to the client along with information about which associated data items are identical to data items in the server&apos;s cache. In one embodiment, the server updates its cache with the retrieved data items. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In one embodiment, when a client wishes to request an associated data item, it first determines whether the server indicated that the associated data item is unchanged. If the associated data item is unchanged, the client uses the copy of the associated data item in the client&apos;s cache. If the associated data item is changed, the client requests the associated data item from the server. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates the process of requesting associated data items in accordance with one embodiment of the present invention. At step <highlight><bold>400</bold></highlight>, a client requests a data item from a server. At step <highlight><bold>410</bold></highlight>, the client receives the data items and a list of unchanged associated data items from the server. In one example, the data item is a web page and the associated data items are elements (e.g., images, sound files, etc.) of the web page. At step <highlight><bold>420</bold></highlight>, the client selects an associated data item for retrieval. The selection could be made manually by a user, or it could be an automatic selection. For example, a web browser may request a web page and then automatically request all elements of the page, such as images or audio files, without further request from a user. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> At step <highlight><bold>430</bold></highlight>, it is determined whether the selected data item is one of the unchanged data items. If the selected data item is one of the unchanged data items, at step <highlight><bold>440</bold></highlight>, the client uses the copy of the selected data item in the client&apos;s cache and the process continues at step <highlight><bold>470</bold></highlight>. If the selected data item is not one of the unchanged data items, at step <highlight><bold>450</bold></highlight>, the client requests the selected data item from the server. At step <highlight><bold>460</bold></highlight>, the client receives the selected data item from the server and the process continues at step <highlight><bold>470</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> At step <highlight><bold>470</bold></highlight>, it is determined whether any associated data items remain to be retrieved. If an associated data item remains to be retrieved, the process repeats at step <highlight><bold>420</bold></highlight>. If no associated data items remain to be retrieved, at step <highlight><bold>480</bold></highlight>, the process is complete. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Requesting More Than Four Data Items at One Time </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In one embodiment, the client can request an unlimited number of associated data items from the server with one request. In one embodiment, the client accumulates data item requests until a specific number of requests are pending. Then, the client sends all pending requests as one request. In another embodiment, the client accumulates data item requests until a period of time passes. Then, the client sends all pending requests as one request. In another embodiment, a time period passing or a threshold number of pending requests causes all pending requests to be sent to the server as one request. The server retrieves the associated data items and stores them in a cache. Then, the server transmits as many data items to the client as the client requests. In one embodiment, the server retrieves the associated data items no more than four at a time. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Since there is a latency period associated with each request, the above embodiment decreases the total amount of time required for data transfers by reducing the number of requests. If the latency period is high (e.g., wireless networks for cell phones or pagers), the above embodiment decreases total transmission time noticeably. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the process of requesting associated data items in accordance with one embodiment of the present invention. At step <highlight><bold>500</bold></highlight>, a client requests a data item from a server. At step <highlight><bold>510</bold></highlight>, the client receives the data items and a list of unchanged associated data items from the server. At step <highlight><bold>520</bold></highlight>, the client selects an associated data item for retrieval. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> At step <highlight><bold>530</bold></highlight>, it is determined whether the selected data item is one of the unchanged data items. If the selected data item is one of the unchanged data items, at step <highlight><bold>540</bold></highlight>, the client uses the copy of the selected data item in the client&apos;s cache and the process continues at step <highlight><bold>560</bold></highlight>. If the selected data item is not one of the unchanged data items, at step <highlight><bold>550</bold></highlight>, the client adds a request for the selected data item to a pending request list and the process continues at step <highlight><bold>560</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> At step <highlight><bold>560</bold></highlight>, it is determined whether any associated data items remain to be retrieved that are not already on the pending request list. If an associated data item remains to be retrieved and the associated data item is not already on the pending request list, the process repeats at step <highlight><bold>520</bold></highlight>. If all associated data items are retrieved or are already on the pending request list, at step <highlight><bold>570</bold></highlight>, all pending requests are sent to the server as one request. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Web Page Retrieval Via Wireless Networks </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In one embodiment, the connection between the client and the server is a wireless network. In one embodiment, data items are web pages and associated objects. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the process of retrieving a web page via a wireless network in accordance with one embodiment of the present invention. At step <highlight><bold>600</bold></highlight>, a client requests a web page from a server. In this embodiment, the client sends a uniform resource locator (URL) to indicate which web page is desired. In another embodiment, a handle to a URL (HURL) is sent in place of the URL. The HURL is associated with the URL at the server and is typically much smaller than a URL. At step <highlight><bold>605</bold></highlight>, the server retrieves the web page. At step <highlight><bold>610</bold></highlight>, the available objects associated with the web page (e.g., images or frames) are retrieved by the server. At step <highlight><bold>615</bold></highlight>, a previously unselected retrieved object is selected. At step <highlight><bold>620</bold></highlight>, it is determined whether the selected object has the same URL as any of the objects in the server&apos;s cache. If the selected object does not have the same URL as any of the objects in the server&apos;s cache, at step <highlight><bold>625</bold></highlight> the selected object is marked as new and the process continues at step <highlight><bold>645</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> If at step <highlight><bold>620</bold></highlight> the selected object has the same URL as one of the objects in the server&apos;s cache, at step <highlight><bold>630</bold></highlight>, it is determined whether the selected object is identical to the object in the cache. If the selected object is identical to the object in the cache, at step <highlight><bold>635</bold></highlight>, the selected object is marked as unchanged and the process continues at step <highlight><bold>645</bold></highlight>. If the selected object is not identical to the object in the cache, at step <highlight><bold>640</bold></highlight>, the selected object is marked as new and the process continues at step <highlight><bold>645</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> At step <highlight><bold>645</bold></highlight>, it is determined whether any retrieved objects were not previously selected. If a retrieved object was previously not selected, the process repeats at step <highlight><bold>615</bold></highlight>. If all retrieved objects were previously selected, at step <highlight><bold>650</bold></highlight>, the server transmits to the client the web page and an indication of which associated items are unchanged. In one embodiment, the indication is a bitmap with one bit representing whether an associated object is new or unchanged. In another embodiment, the indication is a list of URLs for the unchanged objects. In another embodiment, the indication is a list of HURLS for unchanged objects. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Transmitting New/Unchanged Indicators Over Multiple Transmissions </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In one embodiment, not all associated objects are retrievable by the server before a web page is sent to the client. In this embodiment, the web page is transmitted to the client with new/unchanged indicators for all associated objects which are retrieved by the server before the web page is sent. New/unchanged indicators for associated objects which are retrieved by the server after the web page is sent are transmitted to the client in subsequent transmissions if appropriate. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the process of transmitting to a client new/unchanged indicators for associated objects in accordance with one embodiment of the present invention. At step <highlight><bold>700</bold></highlight>, a client requests a web page. At step <highlight><bold>705</bold></highlight>, the server retrieves the web page. At step <highlight><bold>710</bold></highlight>, the server retrieves available associated objects. At step <highlight><bold>715</bold></highlight>, the server determines new/unchanged indicators for all retrieved associated objects. At step <highlight><bold>720</bold></highlight>, the server sends the web page and new/unchanged indicators to the client. At step <highlight><bold>725</bold></highlight>, the server continues to retrieve the remaining associated objects. At step <highlight><bold>730</bold></highlight>, as associated objects are retrieved, the server determines new/unchanged indicators for the objects. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> At step <highlight><bold>735</bold></highlight>, it is determined whether the server receives a request from the client. If the server does not receive a request from the client, the process continues at step <highlight><bold>725</bold></highlight>. If the server receives a request from the client, at step <highlight><bold>740</bold></highlight>, it is determined whether the request is for one of the associated objects. If the request is not for one of the associated objects, at step <highlight><bold>745</bold></highlight>, the process is complete and the server starts a new process for the request at step <highlight><bold>700</bold></highlight>. If the request is for one of the associated objects, at step <highlight><bold>750</bold></highlight>, it is determined whether the object is already retrieved. If the object is not already retrieved, at step <highlight><bold>755</bold></highlight>, the object is retrieved and the process continues at step <highlight><bold>760</bold></highlight>. If the object is already retrieved, at step <highlight><bold>760</bold></highlight> the object and unsent new/unchanged indicators are transmitted to the client and the process repeats at step <highlight><bold>725</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> New/Unchanged Determination When Object Not In Server Cache </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In one embodiment, the client maintains a cache of previously retrieved objects and computes a value using an error correction method (e.g., a cyclic redundancy code) from an object the client is requesting again. The value is transmitted to the server along with the request. After the server retrieves the object, if the server does not have the object in its cache, the server computes a second value using the same error correction method as the client from the retrieved object. If the value from the client and the second value are identical, the server marks the object as unchanged. If the values are not identical, the server marks the object as new. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the process of retrieving an object in accordance with one embodiment of the present invention. At step <highlight><bold>800</bold></highlight>, the client computes a value from a copy of an object in its cache using a cyclic redundancy code. At step <highlight><bold>810</bold></highlight>, the client transmits the value and a request for an update on the object to the server. At step <highlight><bold>820</bold></highlight>, the server retrieves the object. At step <highlight><bold>830</bold></highlight>, it is determined whether the object is in the server&apos;s cache. If the object is in the server&apos;s cache, at step <highlight><bold>840</bold></highlight>, it is determined whether the retrieved object is identical to the object in the cache. If the retrieved object is identical to the object in the cache, at step <highlight><bold>850</bold></highlight>, the server marks the object as unchanged. If the retrieved object is not identical to the object in the cache, at step <highlight><bold>860</bold></highlight>, the server marks the object as new. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> If at step <highlight><bold>830</bold></highlight>, the object is not in the server&apos;s cache, at step <highlight><bold>870</bold></highlight>, the server computes a second value from the retrieved object using the cyclic redundancy code. At step <highlight><bold>880</bold></highlight>, it is determined whether the value from the client is identical to the second value. If the value from the client is identical to the second value, the process continues at step <highlight><bold>850</bold></highlight>. If the value from the client is not identical to the second value, the process continues at step <highlight><bold>860</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Thus, a method and apparatus for compound request processing is described in conjunction with one or more specific embodiments. The invention is defined by the following claims and their full scope and equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for retrieving a data item comprising: 
<claim-text>transmitting a request for said data item from a client to a server; </claim-text>
<claim-text>retrieving said data item by said server; </claim-text>
<claim-text>retrieving one or more associated data items by said server; </claim-text>
<claim-text>obtaining an indicator corresponding to each of said associated data items; and </claim-text>
<claim-text>transmitting said data item and said indicators from said server to said client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said indicators show whether said associated data items have changed. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said step of obtaining comprises: 
<claim-text>maintaining a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>maintaining a second cache of said plurality of previously requested data objects on said server; and </claim-text>
<claim-text>indicating a first associated data item is unchanged if said first associated data item is identical to a first previously requested version of said first associated data item in said second cache. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> further comprising: 
<claim-text>using a second previously requested version of said first associated data item in said first cache if said first indicator indicates that said first associated data item is unchanged. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>transmitting a second request for five or more of said associated data items from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said client and said server are connected by a wireless network. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>transmitting a second request for a second associated data item from said client to said server; </claim-text>
<claim-text>retrieving said second associated data item by said server; and </claim-text>
<claim-text>determining a second indicator for a second associated data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said step of transmitting said second request comprises: 
<claim-text>maintaining a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>calculating a value from a copy of said data item using a correction method wherein said copy is in said first cache; and </claim-text>
<claim-text>transmitting said value from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said correction method is a cyclic redundancy code. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said step of determining said second indicator comprises: 
<claim-text>calculating a second value from said second associated data item using said correction method; and </claim-text>
<claim-text>indicating said second associated data item is unchanged if said value is identical to said second value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said data item is a web page. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>retrieving a second associated data item after said step of transmitting said data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> further comprising: 
<claim-text>determining a second indicator for said second associated data item; and </claim-text>
<claim-text>transmitting said second indicator from said server to said client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A data retrieval system comprising: 
<claim-text>a first transmission unit configured to transmit a request for a data item from a client to a server; </claim-text>
<claim-text>a first retrieval unit configured to retrieve said data item by said server; </claim-text>
<claim-text>a second retrieval unit configured to retrieve one or more associated data items by said server; </claim-text>
<claim-text>a obtaining unit configured to obtain an indicator corresponding to each of said associated data items; and </claim-text>
<claim-text>a second transmission unit configured to transmit said data item and said indicators from said server to said client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said indicators show whether said associated data items have changed. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein said obtaining unit comprises: 
<claim-text>a first maintenance unit configured to maintain a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>a second maintenance unit configured to maintain a second cache of said plurality of previously requested data objects on said server; and </claim-text>
<claim-text>an indication unit configured to indicate a first associated data item is unchanged if said first associated data item is identical to a first previously requested version of said first associated data item in said second cache. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising: 
<claim-text>a selection unit configured to select a second previously requested version of said first associated data item in said first cache if said first indicator indicates that said first associated data item is unchanged. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>a third transmission unit configured to transmit a second request for five or more of said associated data items from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said client and said server are connected by a wireless network. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>a third transmission unit configured to transmit a second request for a second associated data item from said client to said server; </claim-text>
<claim-text>a third retrieval unit configured to retrieve said second associated data item by said server; and </claim-text>
<claim-text>a second determiner configured to determine a second indicator for a second associated data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein said third transmission unit comprises: 
<claim-text>a maintenance unit configured to maintain a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>a calculation unit configured to calculate a value from a copy of said data item using a correction method wherein said copy is in said first cache; and </claim-text>
<claim-text>a fourth transmission unit configured to transmit said value from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said correction method is a cyclic redundancy code. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said second determiner comprises: 
<claim-text>a second calculation unit configured to calculate a second value from said second associated data item using said correction method; and </claim-text>
<claim-text>an indication unit configured to indicate said second associated data item is unchanged if said value is identical to said second value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said data item is a web page. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>a third retrieval unit configured to retrieve a second associated data item after said step of transmitting said data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The data retrieval system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> further comprising: 
<claim-text>a second determiner configured to determine a second indicator for said second associated data item; and </claim-text>
<claim-text>a third transmission unit configured to transmit said second indicator from said server to said client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A computer program product comprising: 
<claim-text>a computer usable medium having computer readable program code embodied therein configured to retrieve a data item, said computer program product comprising: 
<claim-text>computer readable code configured to cause a computer to transmit a request for said data item from a client to a server; </claim-text>
<claim-text>computer readable code configured to cause a computer to retrieve said data item by said server; </claim-text>
<claim-text>computer readable code configured to cause a computer to retrieve one or more associated data items by said server; </claim-text>
<claim-text>computer readable code configured to cause a computer to obtain an indicator corresponding to each of said associated data items; and </claim-text>
<claim-text>computer readable code configured to cause a computer to transmit said data item and said indicators from said server to said client. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein said indicators show whether said associated data items have changed. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said computer readable code configured to cause a computer to determine comprises: 
<claim-text>computer readable code configured to cause a computer to maintain a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>computer readable code configured to cause a computer to maintain a second cache of said plurality of previously requested data objects on said server; and </claim-text>
<claim-text>computer readable code configured to cause a computer to indicate a first associated data item is unchanged if said first associated data item is identical to a first previously requested version of said first associated data item in said second cache. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> further comprising: 
<claim-text>computer readable code configured to cause a computer to select a second previously requested version of said first associated data item in said first cache if said first indicator indicates that said first associated data item is unchanged. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> further comprising: 
<claim-text>computer readable code configured to cause a computer to transmit a second request for five or more of said associated data items from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein said client and said server are connected by a wireless network. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> further comprising: 
<claim-text>computer readable code configured to cause a computer to transmit a second request for a second associated data item from said client to said server; </claim-text>
<claim-text>computer readable code configured to cause a computer to retrieve said second associated data item by said server; and </claim-text>
<claim-text>computer readable code configured to cause a computer to determine a second indicator for a second associated data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference> wherein said computer readable code configured to cause a computer to transmit said second request comprises: 
<claim-text>computer readable code configured to cause a computer to maintain a first cache of a plurality of previously requested data objects on said client; </claim-text>
<claim-text>computer readable code configured to cause a computer to calculate a value from a copy of said data item using a correction method wherein said copy is in said first cache; and </claim-text>
<claim-text>computer readable code configured to cause a computer to transmit said value from said client to said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference> wherein said correction method is a cyclic redundancy code. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference> wherein said computer readable code configured to cause a computer to determine said second indicator comprises: 
<claim-text>computer readable code configured to cause a computer to calculate a second value from said second associated data item using said correction method; and </claim-text>
<claim-text>computer readable code configured to cause a computer to indicate said second associated data item is unchanged if said value is identical to said second value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein said data item is a web page. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> further comprising: 
<claim-text>computer readable code configured to cause a computer to retrieve a second associated data item after said step of transmitting said data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> further comprising: 
<claim-text>computer readable code configured to cause a computer to determine a second indicator for said second associated data item; and </claim-text>
<claim-text>computer readable code configured to cause a computer to transmit said second indicator from said server to said client.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2B</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004933A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004933A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004933A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004933A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004933A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004933A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004933A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004933A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004933A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004933A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004933A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004933A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
