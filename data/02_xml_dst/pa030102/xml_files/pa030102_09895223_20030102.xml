<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005349A1-20030102-D00000.TIF SYSTEM "US20030005349A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00001.TIF SYSTEM "US20030005349A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00002.TIF SYSTEM "US20030005349A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00003.TIF SYSTEM "US20030005349A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00004.TIF SYSTEM "US20030005349A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00005.TIF SYSTEM "US20030005349A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00006.TIF SYSTEM "US20030005349A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00007.TIF SYSTEM "US20030005349A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00008.TIF SYSTEM "US20030005349A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005349A1-20030102-D00009.TIF SYSTEM "US20030005349A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005349</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895223</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H05K010/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>714</class>
<subclass>002000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Architecture for the graphical management and analysis of authentication tokens</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Theodore</given-name>
<middle-name>Jack London</middle-name>
<family-name>Shrader</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Randy</given-name>
<middle-name>Scott</middle-name>
<family-name>Humphrey</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Davis</given-name>
<middle-name>Kent</middle-name>
<family-name>Soper</family-name>
</name>
<residence>
<residence-us>
<city>Cedar Park</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Xiaoyan</given-name>
<family-name>Zhang</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>IBM Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An analysis of at least one authentication token for an application is provided. At least one login module within the application is identified. Responsive to a failure to access the application, principal information is retrieved associated with the at least one login module. A recovery action is then generated. The recovery action corresponds to the failure and the principal information. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to an architecture for graphical representation. More particularly, the present invention relates to management and analysis of authentication tokens in Java. Still more particularly, the present invention relates to an architecture for a graphical representation of the management and analysis of authentication tokens in Java. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> With the proliferation of computer business and the ever expanding internets and Internets, vendors are scrambling to meet the security needs of their customers. Vendors are presented with security issues in a broad range of applications. Electronic commerce in business-to-business and home-to-business applications implies a selectable range of security solutions which are difficult to incorporate in a single application. Content distribution of software, reference information, educational material, or entertainment content require new algorithms and protocols to keep ahead of attacks from hackers. Metering of content, service, or both, and the requirement for secure storage of state and value becomes more important with the increasing number of protocols and cryptographic applications. Securing business or personal activity for private e-mail, home banking, and monetary transactions require a wide range of security solutions where the value of the data, and thus the threat, may be quite varied. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The CDSA (Common Data Security Architecture) was conceived by the Intel Corporation 2200 Mission College Blvd. Santa Clara, Calif. 95052 in response to the above mentioned concerns. CDSA describes a pluggable model for cryptographic and certificate services. This architecture is most commonly implemented as a set of DLLs (Dynamically Linked Libraries). A framework DLL is present that controls all access to &ldquo;plugin&rdquo; DLLs that actually perform CDSA services (e.g., encryption, signature, digital certificate parsing, and digital certificate validation). The API (Application Programming Interface) to the framework DLL is a published standard. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Normally, all applications built to the CDSA standard will execute successfully on a given CDSA implementation. This means that all CDSA applications have access to all cryptographic services plugged in to the framework DLL. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> This framework presents problems when exporting applications which support CDSA implementations. The problems occur when exporting a CDSA implementation to jurisdictions where other CDSA applications are not legally allowed to use the specific cryptographic services of the CDSA implementation, thus it may be impossible to use the CDSA implementation in a vendor&apos;s CDSA application product. One problem is that CDSA is implemented in dynamically linked cryptographic libraries, which leaves the encryption APIs open for illegal use. Another problem is that the API to the framework DDL is a published standard. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Currently vendors give up the advantages of the CDSA in order to solve these problems. They statically link cryptographic libraries to their applications. Static libraries are not flexible (e.g., untouched, the application cannot take advantage of new plugin implementations automatically) and which waste space (each application carries along a copy of the static library code and multiple copies are loaded into memory when multiple applications run). </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Also, Java Authentication and Authorization Service (JAAS) has recently been developed. JAAS is a new and emerging security model that uses login modules to provide authentication and a modified Java 2 policy to provide authorization. The login modules may perform one of many types of user identity verification such as accessing native system information, certificate databases, or smart cards. After authentication, JAAS creates principals based upon the user&apos;s defining qualities such as username, system groups, serial number, domain, and the like. The principals can then be used to define granted permissions, which represent a finer granularity of the Java 2 policy file model. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In a typical present scenario, users execute a Java application or applet under the layer of a controlling security model. When controlled by a security model, Java applications are subject to authentication as well as authorization processes that ultimately decide the success or failure of the applications. All models provide authorization based upon prescribed permissions usually contained within user created policy files. In addition, some security models utilize authentication to verify who is executing the application. For example, a database of certificates, passwords, or Kerberos tickets may be used to authenticate the user. Once authorization has been verified, the application may proceed to execute as long as it does not violate the security policy. As a result, success or failure of the application may be determined by both authentication and authorization rules. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Therefore, it would be advantageous to have a user interface that provides a comprehensive graphical representation of the authentication process. Further, it would be advantageous to offer the ability to dynamically depict active principals, as well as runtime failures in Java applications that are due to inadequate policy failures or login modules. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The present invention provides an analysis of at least one authentication token for an application. At least one login module within the application is identified. Responsive to a failure to access the application, principal information is retrieved associated with the at least one login module. A recovery action is then generated. The recovery action corresponds to the failure and the principal information. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a pictorial representation of a distributed data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram depicting a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> is a block diagram illustrating a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> is a block diagram illustrating the relationship of software components operating within a computer system that may implement the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a graphical user interface representing the management and analysis of login modules and principals in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a login module principal list dialog display in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a successful principal dialog display in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a failed principal dialog display in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating graphical management of authentication tokens in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a pictorial representation of a distributed data processing system in which the present invention may be implemented. Distributed data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Distributed data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections. In the depicted example, a server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>112</bold></highlight> also are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. For purposes of this application, a network computer is any computer coupled to a network, which receives a program or other application from another computer coupled to the network. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Distributed data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In the depicted example, distributed data processing system <highlight><bold>100</bold></highlight> is the Internet, with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, education, and other computer systems that route data and messages. Of course, distributed data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as, for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram depicting a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be an example of server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted either directly or indirectly. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> is a block diagram illustrating a data processing system in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> may be an example of a client computer such as clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures, such as Micro Channel and ISA, may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. SCSI host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, and CD-ROM drive <highlight><bold>330</bold></highlight>. Typical PCI local bus implementations support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. The operating system may be a commercially available operating system such as a UNIX based operating system, AIX for instance, which is available from International Business Machines Corporation. &ldquo;AIX&rdquo; is a trademark of International Business Machines Corporation. Other operating systems include Microsoft Windows <highlight><bold>2000</bold></highlight>. Alternatively, the operating system may be another commercially available operating system such as JavaOS For Business&trade; or OS/2&trade;, which are also available from IBM. JavaOS is loaded from a server on a network to a network client and supports Java programs and applets. An object oriented programming system, such as Java, may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> For example, data processing system <highlight><bold>300</bold></highlight>, if optionally configured as a network computer, may not include SCSI host bus adapter <highlight><bold>312</bold></highlight>, hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, and CD-ROM <highlight><bold>330</bold></highlight>, as noted by dotted line <highlight><bold>332</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, denoting optional inclusion. In that case, the computer, to be properly called a client computer, must include some type of network communication interface, such as LAN adapter <highlight><bold>310</bold></highlight>, modem <highlight><bold>322</bold></highlight>, or the like. As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device which is configured with ROM and/or flash ROM in order to provide nonvolatile memory for storing operating system files and/or user-generated data. The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, as well as above-described examples, are not meant to imply architectural limitations. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The present invention provides a method, a system or apparatus, and computer-implemented instructions for graphical management and analysis of authentication tokens on a variety of computer platforms and operating systems. The present invention may be implemented in most computer languages. However, the example user interface could be implemented in Java. Hence, the present invention may operate within a Java runtime environment and operate in conjunction with a Java virtual machine (JVM) yet within the boundaries of a JVM as defined by Java standard specifications. In order to provide a context for the present invention, portions of the operation of a JVM according to Java specifications are herein described. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> is a block diagram illustrating the relationship of software components operating within a computer system that may implement the present invention. Java-based system <highlight><bold>350</bold></highlight> contains platform specific operating system <highlight><bold>352</bold></highlight> that provides hardware and system support to software executing on a specific hardware platform. JVM <highlight><bold>354</bold></highlight> is one software application that may execute in conjunction with the operating system. JVM <highlight><bold>354</bold></highlight> provides a Java runtime environment with the ability to execute Java application, applet or servlet <highlight><bold>356</bold></highlight>, which is a program or software component written in the Java programming language. The computer system in which JVM <highlight><bold>354</bold></highlight> operates may be similar to data processing system <highlight><bold>300</bold></highlight> described above. However, JVM <highlight><bold>354</bold></highlight> may be implemented in dedicated hardware on a so-called Java chip, Java-on-silicon, or Java processor with an embedded picoJava core. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> At the center of a Java runtime environment is the JVM, which supports all aspects of Java&apos;s environment, including its architecture, security features, mobility across networks, and platform independence. The JVM is a virtual computer, i.e. a computer that is specified abstractly. The Java specifications define certain features that every JVM must implement, with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example, all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for hardware platforms, such as mainframe computers and PDAs. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM, which is itself a piece of software running on the processor. The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner, Java is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a graphical user interface representing the management and analysis of login modules and principals in accordance with a preferred embodiment of the present invention. In this example, icons <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> and <highlight><bold>408</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> represent the login modules an application configures for authentication purposes. Login modules <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> and <highlight><bold>408</bold></highlight> are formatted in a configuration file much like the text policy files the Java 2 security model incorporates. Login module objects <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> and <highlight><bold>408</bold></highlight> may be achieved in a manner similar to parsing of policy files by a policy tool. However, the present invention goes beyond the abilities of a policy tool since a policy tool does not allow the analysis of authentication processes nor examine recovery possibilities. Depending on the authentication configuration, one or more login module icons may be displayed. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Icons <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight> and <highlight><bold>416</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> represent the authentication tokens created by the login modules once the user has been authenticated. This set of icons presents a dynamic view of authenticated principals currently assigned to the Java program. Due to space constraints, it may not be possible to list all the individual principals in main graphical interface <highlight><bold>400</bold></highlight>. However, by selecting the principal authentication token icon, such as icons <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight>, or <highlight><bold>416</bold></highlight>, this may open a new window or frame with the set of contained principals displayed. If a user or administrator chooses a principal icon, a user interface will be displayed which will include a login module principal list dialog which is further illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. If an identical principal exists in two or more principal sets, then, this information may be displayed in the same window. In addition, some login modules may fail in their authentication attempt. In such a case, an appropriate icon may be displayed representing the failure and may replace the one or more of principal icons <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight> or <highlight><bold>416</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Icons <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> represent any principals that may have caused the application to fail in its execution. Icons <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight> are also depicted as representing a polygon for now. Normally, an application may go through the authentication process and then proceed with normal execution while the security model performs authorization checks. Failure may occur in some instances due to system configuration issues. One example is an incorrect classpath configuration or network difficulties. However, failure frequently occurs due to missing permissions in the security policy files themselves. With a modification to the security model, it may be determined what principal or principals were the cause of the failure. Also, it may be determined which login module, such as login modules <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> and/or <highlight><bold>408</bold></highlight> the failing principals are associated with. Once this information is known, icon <highlight><bold>418</bold></highlight> and/or <highlight><bold>420</bold></highlight> may be placed in main graphical user interface <highlight><bold>400</bold></highlight> representing the failing principal and the login module(s) to which the failing belongs. If the user or administrator chooses a failed principal icon, a user interface will display a failed principal dialog which includes information regarding the failed principal as further illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> If a failure has occurred, the present invention may provide a recovery suggestion. Main graphical interface <highlight><bold>400</bold></highlight> may provide suggestions based on the security exception provided, the current protection domain, and the full set of permissions as defined by the security policy. For example, a suggestion may include a statement for user or policy administrator to issue a specific permission for a principal to the policy. Icons <highlight><bold>422</bold></highlight> and <highlight><bold>424</bold></highlight> may represent one or more recovery suggestions for the failed login module. More than one login module may have recovery option icons depending on the number of possible suggestions by main graphical interface <highlight><bold>400</bold></highlight>. As with principal icons <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight> and <highlight><bold>416</bold></highlight>, recovery icons <highlight><bold>422</bold></highlight> and <highlight><bold>424</bold></highlight> may also be selected to display the actual recovery suggestion in a separate window or frame. If a user or administrator chooses a recovery icon, a user interface will display a failed principal dialog with a principal failure as further illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a login module principal list dialog display in accordance with a preferred embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an example of a display allowing a user or administrator to view login module tokens. Login module principal dialog display <highlight><bold>500</bold></highlight> is presented when a user or administrator chooses a principal icon, such as, for example, principal icons <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight> and <highlight><bold>416</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> under login module <highlight><bold>402</bold></highlight> in main display <highlight><bold>400</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In this example, login module principal dialog display <highlight><bold>500</bold></highlight> is a graphical user interface although the present invention is not limited to presenting login module principal dialog display <highlight><bold>500</bold></highlight> as a graphical user interface and other means is conveying the information included in login module principal dialog display <highlight><bold>500</bold></highlight> may be provided. In this example, Login Module Name <highlight><bold>510</bold></highlight> indicates a login module name and is displayed within an upper portion of login module principal list dialog display <highlight><bold>500</bold></highlight>. Login module principal list dialog display <highlight><bold>500</bold></highlight> displays all principal information <highlight><bold>555</bold></highlight> associated with login module principal list dialog display <highlight><bold>500</bold></highlight>. Each principal, whether successful or failing upon attempting access to an application, is displayed in a row, for example, row <highlight><bold>520</bold></highlight>, along with the principal&apos;s associated authentication information. &ldquo;Principal 1&rdquo; <highlight><bold>520</bold></highlight> may indicate that this principal has successfully accessed an application and &ldquo;Principal 3&rdquo; <highlight><bold>515</bold></highlight> may indicate that this principal has failed to successfully access an application. Each principal row contains status column <highlight><bold>525</bold></highlight> which indicates whether the principal succeeded or failed to gain access to the application. Column <highlight><bold>530</bold></highlight> displays principal names which are attempting to access an application. Column <highlight><bold>535</bold></highlight> contains a creation time of a principal. The creation time assists a user or administrator in determining at what point in time a principal has failed. The user or administrator may sort the principal rows within login module principal dialog display <highlight><bold>500</bold></highlight> by choosing any of column title blocks <highlight><bold>525</bold></highlight>, <highlight><bold>530</bold></highlight> or <highlight><bold>535</bold></highlight>. Additional principal information may be added to the principal rows in login module principal dialog display <highlight><bold>500</bold></highlight> to be included in login module principal dialog display <highlight><bold>500</bold></highlight> for display to the user. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Within a lower portion of login module principal list dialog display <highlight><bold>500</bold></highlight> is &ldquo;OK&rdquo; button <highlight><bold>540</bold></highlight> in which, upon selection, removes the login module principal list dialog from display to the user or administrator. In addition, within the lower portion of login module principal list dialog display <highlight><bold>500</bold></highlight> is &ldquo;View&rdquo; button <highlight><bold>545</bold></highlight> in which may be selected to display information regarding a successful or failing principal. If a specific principal is chosen in login module principal list dialog display <highlight><bold>500</bold></highlight> and &ldquo;View&rdquo; button <highlight><bold>545</bold></highlight> is subsequently chosen, information regarding this chosen principal a subsequent dialog display displays information regarding the successful or failure of a principal to access and application. For example, if row <highlight><bold>520</bold></highlight> is chosen, a dialog display will be displayed to the user or administrator containing information about a successful access to the application by &ldquo;Principal 1&rdquo; in row <highlight><bold>520</bold></highlight>. This successful dialog display is further illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Alternatively, if row <highlight><bold>515</bold></highlight> is chosen, a dialog display will be displayed to the user or administrator containing information about a failed access to the application by &ldquo;Principal 3.&rdquo; This failed dialog display is further illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a successful principal dialog display in accordance with a preferred embodiment of the present invention. Successful principal dialog display <highlight><bold>600</bold></highlight> is presented if a user or administrator chooses a successful principal, such as &ldquo;Principal 1&rdquo; <highlight><bold>520</bold></highlight>, from login module principal list dialog display <highlight><bold>500</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In this example, successful principal dialog display <highlight><bold>600</bold></highlight> as a graphical user interface although the present invention is not limited to presenting successful principal dialog display <highlight><bold>600</bold></highlight> in a graphical user interface and other means is conveying the information included in successful principal dialog display <highlight><bold>600</bold></highlight> may be provided. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Successful principal dialog display <highlight><bold>600</bold></highlight> includes login module name <highlight><bold>610</bold></highlight>, which in this example is &ldquo;Login <highlight><bold>1</bold></highlight>&rdquo;. In addition, successful principal dialog display <highlight><bold>600</bold></highlight> includes principal name <highlight><bold>610</bold></highlight> and principal creation time <highlight><bold>630</bold></highlight>. Furthermore, successful principal dialog display <highlight><bold>600</bold></highlight> includes status <highlight><bold>640</bold></highlight> which indicates whether access to an application is successful or has failed. In this example, status <highlight><bold>640</bold></highlight> associated with successful principal dialog display <highlight><bold>600</bold></highlight> indicates that access to the application has been achieved thereby indicating a successful entry associated with status <highlight><bold>640</bold></highlight>. A bottom portion of successful principal dialog display <highlight><bold>600</bold></highlight> contains &ldquo;OK&rdquo; button <highlight><bold>650</bold></highlight> in which a user or administrator may choose to close successful principal dialog display <highlight><bold>600</bold></highlight> and &ldquo;Next&rdquo; button <highlight><bold>660</bold></highlight> which a user or administrator may choose to see a next successful principal. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a failed principal dialog display in accordance with a preferred embodiment of the present invention. Failed principal dialog display <highlight><bold>700</bold></highlight> is presented if a user or administrator chooses a successful principal, such as &ldquo;Principal 3&rdquo; <highlight><bold>515</bold></highlight>, from login module principal list dialog display <highlight><bold>500</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In this example, failed principal dialog display <highlight><bold>700</bold></highlight> is a graphical user interface although the present invention is not limited to presenting failed principal dialog display <highlight><bold>700</bold></highlight> as a graphical user interface and other means is conveying the information included in successful principal dialog <highlight><bold>700</bold></highlight> may be provided. Failed principal dialog display <highlight><bold>700</bold></highlight> includes login module name <highlight><bold>705</bold></highlight>, principal name <highlight><bold>710</bold></highlight>, principal creation time <highlight><bold>715</bold></highlight> and status <highlight><bold>720</bold></highlight>. Up to this point, failed principal dialog display <highlight><bold>700</bold></highlight> contains similar information as successful principal dialog display <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In addition, failed principal dialog display <highlight><bold>700</bold></highlight> includes &ldquo;Cause of Failure&rdquo; text box <highlight><bold>725</bold></highlight>. &ldquo;Cause of Failure&rdquo; text box <highlight><bold>725</bold></highlight> contains information as to why a principal, such as, for example, &ldquo;Principal 3&rdquo; <highlight><bold>515</bold></highlight> did not succeed in access an application. For example, &ldquo;Cause of Failure&rdquo; text box <highlight><bold>725</bold></highlight> may display a JAVA exception that caused the failure of the principal along with an exception stack. An exception stack and exception text may be expressed as: </paragraph>
<paragraph id="P-0050" lvl="2"><number>&lsqb;0050&rsqb;</number> com.mycompany.PermissionException: </paragraph>
<paragraph id="P-0051" lvl="3"><number>&lsqb;0051&rsqb;</number> Principal &ldquo;Principal 1&rdquo; does not have permission to </paragraph>
<paragraph id="P-0052" lvl="3"><number>&lsqb;0052&rsqb;</number> get contents for security1.txt. </paragraph>
<paragraph id="P-0053" lvl="3"><number>&lsqb;0053&rsqb;</number> at myappurl.getcount(myappurl.java:52) </paragraph>
<paragraph id="P-0054" lvl="3"><number>&lsqb;0054&rsqb;</number> at myappurl.main(myappurl.java:19) </paragraph>
<paragraph id="P-0055" lvl="7"><number>&lsqb;0055&rsqb;</number> Failure information <highlight><bold>730</bold></highlight> contained in &ldquo;Cause of Failure&rdquo; text box <highlight><bold>725</bold></highlight> may give a user, administrator, developer, and the like more information about a cause of the failure of the principal. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Furthermore, failed principal dialog display <highlight><bold>700</bold></highlight> includes &ldquo;Suggested Recovery&rdquo; text box <highlight><bold>735</bold></highlight>. If a recovery action can be supplied to remedy the failure of the principal in accessing the application, &ldquo;Suggested Recovery&rdquo; text box <highlight><bold>735</bold></highlight> will be enabled and contain recovery information <highlight><bold>740</bold></highlight> for recovery of the failed principal. For example, recovery information <highlight><bold>740</bold></highlight> may include an indication that permission for the principal need to be added to a policy file. If recovery information <highlight><bold>740</bold></highlight> is displayed in &ldquo;Suggested Recovery&rdquo; text box <highlight><bold>735</bold></highlight>, a user or administrator may choose &ldquo;Attempt Recovery&rdquo; button <highlight><bold>745</bold></highlight> to activate the suggested recovery action. If a suggested recovery action is successful this fact will be displayed in &ldquo;Status of Recovery&rdquo; text box <highlight><bold>750</bold></highlight>. A successful recovery action may be a modification of a policy file. If the suggested recovery action is successful, the failed principal will then be shown as a successful principal and a display similar to successful principal dialog display <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> may appear. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> However, if a suggested recovery action is not successful and thereby results in failure this fact will also be displayed in &ldquo;Status of Recovery&rdquo; text box <highlight><bold>750</bold></highlight>. A failed recovery action may result from the policy file not being modified. A policy file may not be able to be modified if, for example, the policy file is &ldquo;read only&rdquo;. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> If there is no suggested recovery action displayed in &ldquo;Suggested Recovery&rdquo; text box <highlight><bold>725</bold></highlight>, &ldquo;Attempt Recovery&rdquo; button <highlight><bold>745</bold></highlight> is inactive and &ldquo;Suggested Recovery&rdquo; text box <highlight><bold>740</bold></highlight> may contain information that no suggested recovery actions are available. A bottom portion of failed principal dialog display <highlight><bold>700</bold></highlight> includes &ldquo;OK&rdquo; button <highlight><bold>760</bold></highlight> which may be selected by a user or administrator to close failed principal dialog display <highlight><bold>700</bold></highlight> and &ldquo;Next&rdquo; button <highlight><bold>765</bold></highlight> which may be selected by a user or administrator to view a next failed principal. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating graphical management of authentication tokens in accordance with a preferred embodiment of the present invention. In this example, the operation begins by determining the application to be monitored (step <highlight><bold>800</bold></highlight>). Configured login modules are then read from a configuration file (step <highlight><bold>802</bold></highlight>). An image is displayed representing a configured login module (step <highlight><bold>804</bold></highlight>). The image being displayed representing a configured login module may be modules <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> or <highlight><bold>408</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The next configured login module is then executed (step <highlight><bold>806</bold></highlight>). </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Then, a determination is made as to whether or not user input is needed (step <highlight><bold>808</bold></highlight>). User input may be, for example, by way of a password, a smart card and the like. At this point user information may be retrieved from an underlying system or server. If user input is not needed (step <highlight><bold>808</bold></highlight>:NO), then, the operation proceeds to step <highlight><bold>814</bold></highlight> in which an attempt to authenticate the user with the associated login module is made. If user input is needed (step <highlight><bold>808</bold></highlight>:YES), then, a determination is made as to whether or not user input was received (step <highlight><bold>810</bold></highlight>). If user input is not received (step <highlight><bold>810</bold></highlight>:NO), the operation terminates. If user input is received (step <highlight><bold>810</bold></highlight>:YES), the user input is processed (step <highlight><bold>812</bold></highlight>). </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Whether user input is not needed (step <highlight><bold>808</bold></highlight>:NO) or user input is processed (step <highlight><bold>812</bold></highlight>), an attempt is then made to authenticate the user with the associated login module (step <highlight><bold>814</bold></highlight>). If user authentication is not successful (step <highlight><bold>816</bold></highlight>:NO), an image is displayed representing the failed principal for the login module (step <highlight><bold>817</bold></highlight>) and thereafter the operation continues to step <highlight><bold>822</bold></highlight> in which a determination is made as to whether or not more login modules are available for execution. This display of the failed login module may be principals <highlight><bold>410</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight> or <highlight><bold>416</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. If user authentication is successful (step <highlight><bold>816</bold></highlight>:YES), a principal is appended to an internal principal list associated with the current login module (step <highlight><bold>818</bold></highlight>). Then an image is displayed representing the principal (step <highlight><bold>820</bold></highlight>). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Next, a determination is made as to whether or not more login modules are available for execution (step <highlight><bold>822</bold></highlight>). If more login modules are to be executed (step <highlight><bold>822</bold></highlight>:YES), the operation returns to step <highlight><bold>806</bold></highlight> in which the next configured login module is executed. If more login modules are not to be executed (step <highlight><bold>822</bold></highlight>:NO), the application is executed (step <highlight><bold>824</bold></highlight>). Thereafter, a determination is made as to whether or not there are any authorization failures detected (step <highlight><bold>826</bold></highlight>). If there are no authorization failures detected (step <highlight><bold>826</bold></highlight>:NO), an image is displayed indicating a successful execution of the application (step <highlight><bold>828</bold></highlight>) and thereafter the operation terminates. If there are any authorization failures detected (step <highlight><bold>826</bold></highlight>:YES), then principals and policy domain information associated with the failing or the next failing configured login module is retrieved (step <highlight><bold>830</bold></highlight>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> A determination is then made as to whether or not the failure was caused by a principal associated with the login module (step <highlight><bold>832</bold></highlight>). If the failure was not caused by the principal associated with the login module (step <highlight><bold>832</bold></highlight>:NO), no image is displayed indicating that the failure was not associated with the login module (step <highlight><bold>834</bold></highlight>) and thereafter the operation terminates. If the failure was caused by a principal associated with the login module (step <highlight><bold>832</bold></highlight>:YES), an image is displayed indicating a failing principal (step <highlight><bold>836</bold></highlight>). This image may be, for example, failing principal images <highlight><bold>418</bold></highlight> or <highlight><bold>420</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Then, authorization failure and failing principal are examined for a possible recovery action (step <highlight><bold>838</bold></highlight>). Next, a determination is made as to whether or not a recovery action is possible (step <highlight><bold>840</bold></highlight>). If a recovery action is not possible (step <highlight><bold>840</bold></highlight>:NO), then an image is displayed indicating that recovery is not possible for the login module (step <highlight><bold>844</bold></highlight>). If a recovery action is possible (step <highlight><bold>840</bold></highlight>:YES), then an image is displayed indicating a recovery action (step <highlight><bold>842</bold></highlight>). The displayed recovery action may be suggested recovery actions <highlight><bold>422</bold></highlight> and <highlight><bold>424</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Whether an image is displayed indicating a recovery action (step <highlight><bold>842</bold></highlight>) or an image is displayed indicating that recovery is not available for the login module (step <highlight><bold>844</bold></highlight>), a determination is then made as to whether or not more login modules are available for examination (step <highlight><bold>846</bold></highlight>). If more login modules are available for examination (step <highlight><bold>846</bold></highlight>:YES), the operation returns to step <highlight><bold>830</bold></highlight> in which principals and policy domain information associated with the next configured login module is retrieved. If no more login modules are available for examination (step <highlight><bold>846</bold></highlight>:NO), the operation terminates. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Therefore, the present invention provides a comprehensive graphical representation of the authentication process. Furthermore, the present invention provides the ability to dynamically depict active principals, as well as runtime failures in Java applications that are due to inadequate policy failures or login modules. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data processing system implemented method for analysis of at least one authentication token for an application, comprising the steps of: 
<claim-text>identifying at least one login module within the application; </claim-text>
<claim-text>responsive to a failure to access the application, retrieving principal information associated with the at least one login module; and </claim-text>
<claim-text>generating and displaying a recovery action on a user interface according to an attribute of the failure and the retrieved principal information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>displaying analysis of the at least one authentication token in a graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>displaying a representation of at least one login module within the application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein identifying at least one login module within the application includes receiving user input and identifying the at least one login module by associating the user input with the at least one login module. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein receiving user input includes receiving at least one of a password and input from a smart card. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, in response to a failure to associate the user input with the at least one login module within the application, further comprising: 
<claim-text>displaying a representation of a failed login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising: 
<claim-text>associating a principal with the at least one login module; </claim-text>
<claim-text>generating an internal principal list; and </claim-text>
<claim-text>appending the principal to the internal principal list based on the association of the user input to the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>displaying a representation of the principal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>displaying a representation of a failed principal if the failure is caused by a principal associated with the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein generating a recovery action further comprises: 
<claim-text>displaying a representation indicating the recovery action for the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>displaying a representation indicating that the recovery action is not available for the at least one login module if displaying a recovery action cannot be generated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>displaying a representation indicating a successful execution of the application in response to a user obtaining authentication to access the application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A data processing system comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a communications unit connected to the bus system; </claim-text>
<claim-text>a memory connected to the bus system, wherein the memory includes a set of instructions; and </claim-text>
<claim-text>a processing unit connected to the bus system, wherein the processing unit executes the set of instructions to identify at least one login module within an application; responsive to a failure to access the application, the processing unit retrieves principal information associated with the at least one login module; and the processing unit generates and displays a recovery action on a user interface according to an attribute of the failure and the retrieved principal information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A system for analysis of at least one authentication token for an application, comprising: 
<claim-text>identifying means for identifying at least one login module within the application; </claim-text>
<claim-text>retrieving means, responsive to a failure to access the application, for retrieving principal information associated with the at least one login module; and </claim-text>
<claim-text>generating means and displaying means for generating and displaying a recovery action on a user interface according to an attribute of the failure and the retrieved principal information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying analysis of the at least one authentication token in a graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying a representation of at least one login module within the application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the identifying means for identifying at least one login module within the application includes receiving user input and identifying the at least one login module by associating the user input with the at least one login module. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein receiving user input includes receiving at least one of a password and input from a smart card. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, in response to a failure to associate the user input with the at least one login module within the application, further comprising: 
<claim-text>displaying means for displaying a representation of a failed login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising: 
<claim-text>associating means for associating a principal with the at least one login module; </claim-text>
<claim-text>generating means for generating an internal principal list; and </claim-text>
<claim-text>appending means appending the principal to the internal principal list based on the association of the user input to the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying a representation of the principal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying a representation of a failed principal if the failure is caused by a principal associated with the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein generating a recovery action further comprises: 
<claim-text>displaying means for displaying a representation indicating the recovery action for the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>responsive to a recovery action not being generated, displaying means for displaying a display indicating that a recovery action is not possible for the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying a representation indicating that the recovery action is not available for the at least one login module if displaying a recovery action cannot be generated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>displaying means for displaying a representation indicating a successful execution of the application in response to a user obtaining authentication to access the application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A computer program product in a computer readable medium for analysis of at least one authentication token for an application, comprising: 
<claim-text>instructions for identifying at least one login module within the application; </claim-text>
<claim-text>instructions, responsive to a failure to access the application, for retrieving principal information associated with the at least one login module; and </claim-text>
<claim-text>instructions for generating and displaying a recovery action on a user interface according to an attribute of the failure and the retrieved principal information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying analysis of the at least one authentication token in a graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying a representation of at least one login module within the application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the instructions for identifying at least one login module within the application further includes instructions for receiving user input and identifying the at least one login module by associating the user input with the at least one login module. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein receiving user input includes receiving at least one of a password and input from a smart card. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, in response to a failure to associate the user input with the at least one login module within the application, further comprising: 
<claim-text>instructions for displaying a representation of a failed login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising: 
<claim-text>instructions for associating a principal with the at least one login module; </claim-text>
<claim-text>instructions for generating an internal principal list; and </claim-text>
<claim-text>instructions for appending the principal to the internal principal list based on the association of the user input to the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying a representation of the principal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying a representation of a failed principal if the failure is caused by a principal associated with the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the instructions for generating a recovery action further comprises: 
<claim-text>instructions for displaying a representation indicating the recovery action for the at least one login module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying a representation indicating that the recovery action is not available for the at least one login module if displaying a recovery action cannot be generated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>instructions for displaying a representation indicating a successful execution of the application in response to a user obtaining authentication to access the application.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005349A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005349A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005349A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005349A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005349A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005349A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005349A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005349A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005349A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005349A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
