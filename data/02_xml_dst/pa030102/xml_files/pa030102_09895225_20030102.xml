<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005215A1-20030102-D00000.TIF SYSTEM "US20030005215A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005215A1-20030102-D00001.TIF SYSTEM "US20030005215A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005215A1-20030102-D00002.TIF SYSTEM "US20030005215A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005215A1-20030102-D00003.TIF SYSTEM "US20030005215A1-20030102-D00003.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005215</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895225</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>105000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus for allocating data usages within an embedded dynamic random access memory device</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ravi</given-name>
<middle-name>Kumar</middle-name>
<family-name>Arimilli</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>James</given-name>
<middle-name>Stephen</middle-name>
<family-name>Fields</family-name>
<name-suffix>JR.</name-suffix>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Sanjeev</given-name>
<family-name>Ghai</family-name>
</name>
<residence>
<residence-us>
<city>Round Rock</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Praveen</given-name>
<middle-name>S.</middle-name>
<family-name>Reddy</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>William</given-name>
<middle-name>John</middle-name>
<family-name>Starke</family-name>
</name>
<residence>
<residence-us>
<city>Round Rock</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>BRACEWELL &amp; PATTERSON, L.L.P.</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 969</address-1>
<city>AUSTIN</city>
<state>TX</state>
<postalcode>78767-0969</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus for allocating data usage in an embedded dynamic random access memory (DRAM) device is disclosed. The apparatus for allocating data usages within an embedded dynamic random access memory (DRAM) device comprises a control analysis circuit, a data/command flow circuit, and a partition management control. The control analysis circuit generates an allocation signal in response to processing performances of a processor. Coupled to an embedded DRAM device, the data/command flow circuit controls data flow from the processor to the embedded DRAM device. The partition management control, coupled to the control analysis circuit, partitions the embedded DRAM device into a first partition and a second partition. The data stored in the first partition are different from the data stored in the second partition according to their respective usage. The allocation percentages of the first and second partitions are dynamically allocated by the allocation signal from the control analysis circuit. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED PATENT APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This patent application is related to a copending application U.S. Ser. No. ______ filed on even date, entitled &ldquo;METHOD AND APPARATUS FOR ACCESSING BANKED EMBEDDED DYNAMIC RANDOM ACCESS MEMORY DEVICES&rdquo; (IBM Docket No. AUS92000906US1).</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to memory devices in general, and in particular to embedded dynamic random access memory devices. Still more particularly, the present invention relates to a method and apparatus for allocating data usages within an embedded dynamic random access memory device. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Prior Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Embedded dynamic random access memory (DRAM) is a type of integrated circuit having both memory cells and their control circuits formed on a single semiconductor chip. Specifically, a complete embedded DRAM includes multiple transfer field effect transistors (FETs), a capacitor coupled to each of the transfer FETs, and a group of control circuitry. Each transfer FET acts as a switch between the lower electrode of the capacitor and a bit line. As such, data within the capacitor can be written in or read out from the embedded DRAM. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Embedded DRAMs are capable of transferring a large quantity of data at a very high speed. Because of their relatively high processing speed and storage capacity, embedded DRAMs have been commonly employed in various high-end integrated circuits, such as graphic processors. In addition, embedded DRAMs can provide an embedded processor a faster access to a relatively large capacity of on-chip memory at a lower cost than that currently available using conventional embedded static random access memories (SRAMs) and/or electrically erasable programmable read only memories (EEPROMs). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present disclosure provides a method for allocating data usages within an embedded DRAM. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In accordance with a preferred embodiment of the present invention, an apparatus for allocating data usages within an embedded dynamic random access memory (DRAM) device comprises a control analysis circuit, a data/command flow circuit, and a partition management control. The control analysis circuit generates an allocation signal in response to processing performances of a processor. Coupled to an embedded DRAM device, the data/command flow circuit controls data flow from the processor to the embedded DRAM device. The partition management control, coupled to the control analysis circuit, partitions the embedded DRAM device into a first partition and a second partition. The data stored in the first partition are different from the data stored in the second partition according to their respective usage. The allocation percentages of the first and second partitions are dynamically allocated by the allocation signal from the control analysis circuit. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> All objects, features, and advantages of the present invention will become apparent in the following detailed written description. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The invention itself, as well as a preferred mode of use, further objects, and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a data processing system having an embedded DRAM, in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an embedded DRAM management control circuit for controlling the embedded DRAM from <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a high-level logic flow diagram of a method for allocating the usages of the embedded DRAM from <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Referring now to the drawings and in particular to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, there is depicted a block diagram of a data processing system having an embedded dynamic random access memory (DRAM), in accordance with a preferred embodiment of the present invention. As shown, a data processing system <highlight><bold>10</bold></highlight> includes a processor <highlight><bold>11</bold></highlight> coupled to an embedded DRAM <highlight><bold>12</bold></highlight>, an embedded DRAM management control circuit <highlight><bold>13</bold></highlight>, and a system memory <highlight><bold>16</bold></highlight>. Each of processor <highlight><bold>11</bold></highlight>, embedded DRAM <highlight><bold>12</bold></highlight>, and embedded DRAM management control circuit <highlight><bold>13</bold></highlight> is preferably an individual integrated circuit device, though some or all of the above-mentioned components can be incorporated within a single integrated circuit device. Processor <highlight><bold>11</bold></highlight> is coupled to a system interconnect <highlight><bold>17</bold></highlight> via embedded DRAM <highlight><bold>12</bold></highlight>. A direct access storage disk (DASD) is coupled to system interconnect <highlight><bold>17</bold></highlight> via an input/output controller <highlight><bold>14</bold></highlight>. Processor <highlight><bold>11</bold></highlight> preferably includes multiple levels of internal cache memories (not shown). Together with embedded DRAM management control circuit <highlight><bold>13</bold></highlight>, embedded DRAM <highlight><bold>12</bold></highlight> supplants the need of external cache memories as they are often required in the prior art data processing systems. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, there is depicted a block diagram of embedded DRAM management control circuit <highlight><bold>13</bold></highlight> (from <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) for controlling embedded DRAM <highlight><bold>12</bold></highlight>, in accordance with a preferred embodiment of the present invention. As shown, embedded DRAM management control circuit <highlight><bold>13</bold></highlight> includes a partition management control (PMC) circuit <highlight><bold>21</bold></highlight>, a control analysis circuit <highlight><bold>22</bold></highlight>, and a data/command flow circuit <highlight><bold>23</bold></highlight>. Although embedded DRAM management control circuit <highlight><bold>13</bold></highlight> is shown to be external to a processor, it is understood by those skilled in the art that embedded DRAM management control circuit <highlight><bold>13</bold></highlight> may be incorporated within a processor such as processor <highlight><bold>11</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Control analysis circuit <highlight><bold>22</bold></highlight> monitors various processing performances of processor <highlight><bold>11</bold></highlight> (from <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) via a control line <highlight><bold>28</bold></highlight>. The monitoring function performed by control analysis circuit <highlight><bold>22</bold></highlight> is similar to a hardware process monitor. By using a group of control buses, control analysis circuit <highlight><bold>22</bold></highlight> informs PMC circuit <highlight><bold>21</bold></highlight> when a change in processing needs has been requested by processor <highlight><bold>11</bold></highlight>. Changes in processing needs can be initiated by hardware, software, or a combination of both. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to the processing needs of processor <highlight><bold>11</bold></highlight>, data stored within embedded DRAM can preferably be divided into two types, namely, Type I data and Type II data. Type I data can be any kind of data that have different resource demands from those of Type II data. For example, Type I data may be data from a cache memory (from a processor) and Type II data may be data from an application, or Type I data may be instructions from a cache memory and Type II data may be data from the same cache memory. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> There are many parameters that control analysis circuit <highlight><bold>22</bold></highlight> can monitor in order to trigger a change in data allocation in embedded DRAM <highlight><bold>12</bold></highlight>. For example, control analysis circuit <highlight><bold>22</bold></highlight> can monitor a counter that keeps track of all the misses in a cache memory. If the cache misses have reached a predetermined threshold value, control analysis circuit <highlight><bold>22</bold></highlight> can initiate a change in data allocation in embedded DRAM <highlight><bold>12</bold></highlight>. As another example, control analysis circuit <highlight><bold>22</bold></highlight> can monitor a loader that keeps track of the number of instructions within a software application. Based of the size of the software application, control analysis circuit <highlight><bold>22</bold></highlight> can initiate a change in data allocation in embedded DRAM <highlight><bold>12</bold></highlight> to provide an optimal execution rate for the software application. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The group of control lines from control analysis circuit <highlight><bold>22</bold></highlight> specifies how PMC circuit <highlight><bold>21</bold></highlight> configure embedded DRAM <highlight><bold>12</bold></highlight> for Type I or Type II data. In this implementation, the group of control lines includes a two-bit action request bus <highlight><bold>24</bold></highlight>, a two-bit partition type bus <highlight><bold>25</bold></highlight>, an eight-bit allocation percentage bus <highlight><bold>26</bold></highlight>, and a one-bit complete bus <highlight><bold>27</bold></highlight>. Specifically, action request bus <highlight><bold>24</bold></highlight> indicates whether an initiated change was sourced from hardware only or from software in the form of an application, or a combination of both. Partition type bus <highlight><bold>25</bold></highlight> indicates whether all congruence classes within embedded DRAM <highlight><bold>12</bold></highlight> will have Type I data, all congruence classes within embedded DRAM <highlight><bold>12</bold></highlight> will have Type II data, some sets of congruence class within embedded DRAM <highlight><bold>12</bold></highlight> will have Type I data, or some groups of congruence classes within embedded DRAM <highlight><bold>12</bold></highlight> will have Type I data. Allocation percentage bus <highlight><bold>26</bold></highlight> indicates what percentage of the sets or congruence classes within embedded DRAM <highlight><bold>12</bold></highlight> are to be allocated for Type I data. Complete bus <highlight><bold>27</bold></highlight> indicates when PMC circuit <highlight><bold>21</bold></highlight> is done restructuring embedded DRAM <highlight><bold>12</bold></highlight>, as defined by the request. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, there is depicted a high-level logic flow diagram of a method for allocating data usages of embedded DRAM <highlight><bold>12</bold></highlight> by embedded DRAM management control circuit <highlight><bold>13</bold></highlight>, in accordance with a preferred embodiment of the present invention. After receiving an allocation request, PMC circuit <highlight><bold>21</bold></highlight> drives a &ldquo;hold&rdquo; signal to data/command flow circuit <highlight><bold>23</bold></highlight> to quiescent the command flow to embedded DRAM <highlight><bold>12</bold></highlight>, as shown in block <highlight><bold>31</bold></highlight>. The allocation request preferably came from control analysis circuit <highlight><bold>22</bold></highlight> (from <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Then, data/command flow circuit <highlight><bold>23</bold></highlight> sends a &ldquo;hold&rdquo; response to processor <highlight><bold>11</bold></highlight> to quiescent subsequent commands for a period of time, as depicted in block <highlight><bold>32</bold></highlight>. A determination is then made as to how embedded DRAM <highlight><bold>12</bold></highlight> is allocated (or subdivided) at this point, as shown in block <highlight><bold>33</bold></highlight>. Such information is provided to PMC circuit <highlight><bold>21</bold></highlight> by control analysis circuit <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> If entire embedded DRAM <highlight><bold>12</bold></highlight> is currently allocated for Type I data usage, then a determination is made as to how embedded DRAM <highlight><bold>12</bold></highlight> should be allocated based on the allocation request, as depicted in block <highlight><bold>34</bold></highlight>. If the allocation request is to demand all Type I data usage, then no change is required. If the allocation request is to demand all Type II data usage, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type I data in all congruence classes, and the deallocated data are send to a system memory, as shown in block <highlight><bold>35</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format all congruence classes to be of Type II data usage, as depicted in block <highlight><bold>36</bold></highlight>. However, if the allocation request is to demand Type II data usage in some sets of the congruence classes (i.e., columns), then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type I data in the requested sets within all congruence classes, and the deallocated data are sent to the <highlight><bold>5</bold></highlight> system memory, as shown in block <highlight><bold>37</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the requested sets of the congruence classes to be of Type II data usage, as depicted in block <highlight><bold>38</bold></highlight>. Otherwise, if the allocation request is to demand Type II data usage in some congruence classes (i.e., rows), then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type I data in the requested congruence classes, and the deallocated data are sent to the system memory, as shown in block <highlight><bold>39</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the requested congruence classes to be of Type II data usage, as depicted in block <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> If entire embedded DRAM <highlight><bold>12</bold></highlight> is currently allocated for Type II data usage, then a determination is made as to how embedded DRAM <highlight><bold>12</bold></highlight> should be allocated based on the allocation request, as shown in block <highlight><bold>41</bold></highlight>. If the allocation request is to demand all Type II data usage, then no change is required. If the allocation request is to demand all Type I data usage, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type II data in all the congruence classes, and the deallocated data are send to the system memory, as depicted in block <highlight><bold>42</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format all congruence classes to be of Type I data usage, as shown in block <highlight><bold>43</bold></highlight>. However, if the allocation request is to demand Type I data usage in some sets of the congruence classes, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type II data in the requested sets within all the congruence classes, and the deallocated data are sent to the system memory, as depicted in block <highlight><bold>44</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the requested sets of the congruence classes to be of Type I data usage, as shown in block <highlight><bold>45</bold></highlight>. Otherwise, if the allocation request is to demand Type I data usage in some congruence classes, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate Type II data in the requested congruence classes, and the deallocated data are sent to the system memory, as depicted in block <highlight><bold>46</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the requested congruence classes to be of Type I data usage, as shown in block <highlight><bold>47</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> If some of embedded DRAM <highlight><bold>12</bold></highlight> is currently allocated for Type I data usage (while the remaining portions are allocated for Type II data usage), then a determination is made as to how embedded DRAM <highlight><bold>12</bold></highlight> should be allocated based on the allocation request, as depicted in block <highlight><bold>48</bold></highlight>. If the allocation request is to demand all Type I data usage, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate all Type II data, and the deallocated data are sent to the system memory, as shown in block <highlight><bold>49</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format all congruence classes to be of Type I data usage, as depicted in block <highlight><bold>50</bold></highlight>. But, if the allocation request is to demand all Type II data usage, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate all Type I data, and the deallocated data are sent to the system memory, as shown in block <highlight><bold>51</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format all congruence classes to be of Type I data usage, as depicted in block <highlight><bold>52</bold></highlight>. However, if the allocation request is to demand Type II data usage in some sets of congruence classes, then a determination is made as to whether there will be more Type II data usage after this re-allocation, as shown in block <highlight><bold>53</bold></highlight>. If there is, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate all necessary Type I data for Type II data usage, and the deallocated data are sent to the system memory, as depicted in block <highlight><bold>54</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the necessary additional space to be for Type II data usage, as shown in block <highlight><bold>55</bold></highlight>. Otherwise if there is not, then commands are sent to embedded DRAM <highlight><bold>12</bold></highlight> to deallocate all necessary Type II data for Type I data usage, and the deallocated data are sent to the system memory, as depicted in block <highlight><bold>56</bold></highlight>. Commands are then sent to embedded DRAM <highlight><bold>12</bold></highlight> to format the necessary additional apace to be for Type I data usage, as shown in block <highlight><bold>57</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Subsequently, PMC circuit <highlight><bold>21</bold></highlight> sends a &ldquo;complete&rdquo; signal to control analysis circuit <highlight><bold>22</bold></highlight>, as depicted in block <highlight><bold>58</bold></highlight>. The &ldquo;hold&rdquo; is then removed from data/command flow circuit <highlight><bold>23</bold></highlight> by PMC circuit <highlight><bold>21</bold></highlight>, as shown in block <highlight><bold>59</bold></highlight>. Finally, control analysis circuit <highlight><bold>22</bold></highlight> sends a &ldquo;complete&rdquo; response to processor <highlight><bold>11</bold></highlight>, as depicted in block <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> As has been described, the present invention provides a method and apparatus for allocating data usage in an embedded DRAM device. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus for allocating data usage in an embedded dynamic random access memory (DRAM) device, said apparatus comprising: 
<claim-text>a control analysis circuit for generating an allocation signal in response to processing performances of a processor; </claim-text>
<claim-text>a data/command flow circuit, coupled to an embedded DRAM device, for controlling data flow from said processor to said embedded DRAM device; and </claim-text>
<claim-text>a partition management control, coupled to said control analysis circuit, for partitioning said embedded DRAM device into a first partition and a second partition, wherein data stored in said first partition are different from data stored in said second partition according to their respective usage, wherein allocation percentages of said first and second partitions are dynamically allocated by said allocation signal from said control analysis circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said control analysis circuit sends said partition request to said partition management control via a request bus. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said control analysis circuit informs said partition management control the type of each of said partitions via a partition type bus. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said control analysis circuit informs said partition management control the percentage of each of said partitions via an allocation percentage bus. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A data processing system comprising: 
<claim-text>a processor; </claim-text>
<claim-text>an embedded dynamic random access memory (DRAM) device coupled to said processor; and </claim-text>
<claim-text>means for allocating data usage in said embedded DRAM device, wherein said data usage allocating means includes 
<claim-text>a control analysis circuit for generating an allocation signal in response to processing performances of said processor; </claim-text>
<claim-text>a data/command flow circuit, coupled to an embedded DRAM device, for controlling data flow from said processor to said embedded DRAM device; and </claim-text>
<claim-text>a partition management control, coupled to said control analysis circuit, for partitioning said embedded DRAM device into a first partition and a second partition, wherein data stored in said first partition are different from data stored in said second partition according to their respective usage, wherein allocation percentages of said first and second partitions are dynamically allocated by said allocation signal from said control analysis circuit. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said control analysis circuit sends said partition request to said partition management control via a request bus. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said control analysis circuit informs said partition management control the type of each of said partitions via a partition type bus. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The data processing system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said control analysis circuit informs said partition management control the percentage of each of said partitions via an allocation percentage bus. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method for allocating data usage in an embedded dynamic random access memory (DRAM) device, said method comprising: 
<claim-text>generating an allocation signal in response to processing performances of a processor; and </claim-text>
<claim-text>partitioning said embedded DRAM device into a first partition and a second partition, wherein data stored in said first partition are different from data stored in said second partition according to their respective usage, wherein allocation percentages of said first and second partitions are dynamically allocated by said allocation signal from said control analysis circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said partitioning is performing via a partition management control. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said method further include a step informing said partition management control the type of each of said partitions via a partition type bus. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said method further include a step informing said partition management control the percentage of each of said partitions via an allocation percentage bus.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005215A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005215A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005215A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005215A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
