<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005411A1-20030102-P00001.TIF SYSTEM "US20030005411A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00002.TIF SYSTEM "US20030005411A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00003.TIF SYSTEM "US20030005411A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00004.TIF SYSTEM "US20030005411A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00005.TIF SYSTEM "US20030005411A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00006.TIF SYSTEM "US20030005411A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00007.TIF SYSTEM "US20030005411A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00008.TIF SYSTEM "US20030005411A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00009.TIF SYSTEM "US20030005411A1-20030102-P00009.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00010.TIF SYSTEM "US20030005411A1-20030102-P00010.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00011.TIF SYSTEM "US20030005411A1-20030102-P00011.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00012.TIF SYSTEM "US20030005411A1-20030102-P00012.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00013.TIF SYSTEM "US20030005411A1-20030102-P00013.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00014.TIF SYSTEM "US20030005411A1-20030102-P00014.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00015.TIF SYSTEM "US20030005411A1-20030102-P00015.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00016.TIF SYSTEM "US20030005411A1-20030102-P00016.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00017.TIF SYSTEM "US20030005411A1-20030102-P00017.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00018.TIF SYSTEM "US20030005411A1-20030102-P00018.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00019.TIF SYSTEM "US20030005411A1-20030102-P00019.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00020.TIF SYSTEM "US20030005411A1-20030102-P00020.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00021.TIF SYSTEM "US20030005411A1-20030102-P00021.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00022.TIF SYSTEM "US20030005411A1-20030102-P00022.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00023.TIF SYSTEM "US20030005411A1-20030102-P00023.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-P00024.TIF SYSTEM "US20030005411A1-20030102-P00024.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00000.TIF SYSTEM "US20030005411A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00001.TIF SYSTEM "US20030005411A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00002.TIF SYSTEM "US20030005411A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00003.TIF SYSTEM "US20030005411A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00004.TIF SYSTEM "US20030005411A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00005.TIF SYSTEM "US20030005411A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00006.TIF SYSTEM "US20030005411A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00007.TIF SYSTEM "US20030005411A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00008.TIF SYSTEM "US20030005411A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00009.TIF SYSTEM "US20030005411A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00010.TIF SYSTEM "US20030005411A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00011.TIF SYSTEM "US20030005411A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00012.TIF SYSTEM "US20030005411A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00013.TIF SYSTEM "US20030005411A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00014.TIF SYSTEM "US20030005411A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00015.TIF SYSTEM "US20030005411A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00016.TIF SYSTEM "US20030005411A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005411A1-20030102-D00017.TIF SYSTEM "US20030005411A1-20030102-D00017.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005411</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895228</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/44</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F009/455</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>717</class>
<subclass>120000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>717</class>
<subclass>168000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for dynamic packaging of component objects</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Christopher</given-name>
<middle-name>Henry</middle-name>
<family-name>Gerken</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Joseph T. Van Leeuwen</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 81641</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78708-1641</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method for dynamically packaging component objects. A server receives a request from a client. The server identifies one or more objects based on the request. The identified objects may be copied from the server&apos;s nonvolatile storage area, generated dynamically, or be a result of modifying objects stored on the server&apos;s nonvolatile storage area. The identified objects are written to a package file. The server downloads the package file to the client. A dialog may be sent to the client to determine whether the client wishes to download the package file. The package file is provided dynamically in response to the client&apos;s request. The package file may include objects that include generated code, such as Java tag handler files, Java tag extra info files, and Java tag library description information. Java definitions may be included with the package file to create a Java jar file. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates in general to a method and system for dynamically packaging component objects. More particularly, the present invention relates to a system and method packaging objects corresponding to a client request and returning the packaged objects to the client. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computer networks, such as the Internet, typically include client computer (those that request information) and server computers (those that provide information in response to requests). Software called a &ldquo;browser&rdquo; provides interactive sessions between clients and servers. Common browser software includes Netscape&apos;s Navigator&trade; software and Microsoft&apos;s Internet Explorer&trade; software. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Originally, servers provided static text, or &ldquo;web pages&rdquo; to clients which were displayed in the client&apos;s web browsers. Soon after introducing static web pages, however, it became increasingly desirable to provide web pages with dynamic content, for example to display a customer&apos;s current account balance. Web servers provided public interfaces so that applications could interface (&ldquo;plug-in&rdquo;) and collaborate with the web servers to provide the client browsers web pages with dynamic content. As a group, these applications became known as &ldquo;application servers.&rdquo; Public specifications (the &ldquo;J2EE Specification&rdquo;) have been provided by Sun Microsystems so that applications built to the specification can be ported from one application server to another. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Application servers include a Java object called a &ldquo;servlet&rdquo; which is invoked in response to a request that passes from the client to the server to the application server. The servlet is provided information pertaining to the request as well as an object that encapsulates the response stream back to the client. By using servlet logic developers have control over how a request is processed as well as what information is sent back to the client. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Over time the servlet model proved to be quite powerful. A simple interface existed to a class that could invoke complex logic and reuse any number of system components. One drawback, however, was that developers often coded large portions of static text to accompany a relative small amount of dynamic information. Using servlets, static text is encoded in &ldquo;write statements&rdquo; which was more challenging than working with the same static text in a hypertext markup language (HTML) file. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> This challenge was addressed with the introduction of Java Server Pages (JSP). JSPs were essentially text macro files that were resolved dynamically into servlets. A JSP source file looks like an HTML file with the addition of embedded Java code. When the page is requested by a client, the JSP source is transformed into a servlet that writes the static text to the response while invoking the Java code to write dynamic content to the response. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Java Server Pages, however, introduced additional challenges to the development environment. While JSP was quite powerful, it increased the skills needed to prepare pages from those of a simple HTML author to those of a Java developer. In development environments, lower amounts of skills were needed to code HTML documents resulting in more employees capable of writing HTML documents. However, Java development required a higher amount of programming skills. Java development skills in development environments is often in short supply and provided by a higher paid Java programmer, while HTML page design skills can be provided by lower paid and less skilled Web page designers. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> To address this challenge has been the introduction of &ldquo;custom tags.&rdquo; Skilled Java programmers can now place the logic that formerly was embedded in Java statements in JSP documents into custom tag files. Web page designers are then able to place the custom tags in Java Server Pages. The custom tags appear much like other HTML or Extended Markup Language (XML) tags which are easier for Web page designers to incorporate into Web pages. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The introduction of custom tags, however, introduced a new set of challenges for application developers. For each custom tag that is to be used in Web pages, there are two classes (a tag handler class and a tag extra information (TEI) class) that are implemented in addition to an XML file that provides parsing information, nesting behavior, and attribute descriptions for the custom tag. The framework for each of these files changes depending on the actions that the custom tags are going to perform. Developers implement the framework in the custom tag files before writing the customized business logic code that will actually perform a particular business function (i.e., look up a customer&apos;s account balance). </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> What is needed, therefore, is a system and method for receiving general tag information from a developer and creating custom tag files that include a framework for implementing the custom tags. The developer should be able to use the resulting files to code particular business logic pertaining to the custom tags. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> An additional challenge includes packaging the resulting custom tag files to dynamically provide the developer with the custom tag files. In a client-server environment, the developer would request the custom tag framework files from a server application. Based on the developer&apos;s needs, the server would dynamically generate the custom tag files. Traditionally, these files could be placed in a server area that would later be downloaded from the server area using the file transfer protocol (FTP). </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> What is needed, therefore, is a system and method for dynamically packaging any number of components into a package and providing the resulting package to the client through familiar interface. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> It has been discovered that custom tag files can be created using a tool designed to receive general information about the custom tags and create corresponding tag files, including tag handler classes, tag extended information (TEI) classes, and tag library descriptor (TLD) files. The corresponding tag files are frameworks that are used by Java Server Page (JSP) processing when a custom tag file is encountered. The developer can edit the created files to add particular business logic to perform desired functions. For example, the developer can add the logic used to access the organization&apos;s database to retrieve a customer&apos;s current account balance. The questions asked to the developer and the types of answers elicited from the developer are designed to be understood by a JSP author with little or no understanding of how custom tag logic is written. In addition, comments can be included with the generated custom tag files to inform the developer of exactly where business logic should be added to further limit the amount of custom tag file understanding needed by the developer. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The developer accesses the software tool, called a Custom Tag Wizard, that creates the custom tag files. The Custom Tag Wizard can be stored and executed from the developer&apos;s computer system or the developer can access a Web server that hosts the Custom Tag Wizard. If the Custom Tag Wizard is stored on the developer&apos;s computer system then the resulting custom tag files are stored in a disk location on the developer&apos;s computer specified by the developer. On the other hand, if a Web server application is used, the Custom Tag Wizard dynamically packages the created custom tag files into a package file, such as a .zip file or a .jar file, and displays a screen to the developer allowing the developer to select a location on the developer&apos;s computer system to store the newly created custom tag files. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The packaging component is useful for packaging other components other than custom tag files. Any number of components stored at a Web server can be dynamically packaged and provided to a user. The components included in the dynamically packaged file can either be custom components, such as the custom tag files, or can be static components. For example, a Web site could allow a client to select multiple download files, such as software tools. The Web site could dynamically package all the files selected by a client into a single package and allow the client to download all the selected files in a single download step. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high level diagram showing the tasks performed by various individuals in providing and using custom tags; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a high level diagram showing a Custom Tag Wizard used to create and package custom tag frameworks for a developer; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a high level diagram showing a server dynamically package custom components and return a resulting package to a client computer; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart showing the processing involved in dynamically packaging components and returning the resulting package file to a client; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a high level diagram showing a developer receiving a custom tag package and using components within the custom tag package to create custom tags; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a high level diagram showing a web page designer using custom tags in a Web page and processing resulting when a client computer requests the Web page; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a screen flow showing various screens used to create and receive a custom tag framework package; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a screen design of a page to gather custom tag information from a developer; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a high level flowchart showing the processing involved in preparing the custom tag package; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a high level flowchart showing the processing involved in writing a custom tag handler class; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing the processing involved in writing the class definition included in the tag handler; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flowchart showing the processing involved in writing the doStartTag( ) method included in the tag handler; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a flowchart showing the processing involved in writing the doAfterBody( ) method included in the tag handler; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a flowchart showing the processing involved in writing the doEndTag( ) method included in the tag handler; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>is a high level flowchart showing the processing involved in writing a tag extra info (TEI) class; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>is a flowchart showing the processing involved in writing the IsValid( ) method included in the TEI class; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a flowchart showing the processing involved in writing the GetVariableInfo( ) method included in the TEI class; and </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a block diagram of an information handling system capable of performing the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Included at the end of this detailed description are Appendices that include sample output files created by the processing described herein. These sample output files are provided for examples for further understanding when used in conjunction with the description of processes included herein. The inclusion of such examples, however, are intended solely as examples and should not be taken to limit the scope of the invention. Any number of variations may fall within the scope of the processes described herein with the included examples only being one instance of such possible variations. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a high level diagram showing the tasks performed by various individuals in providing and using custom tags. Developer <highlight><bold>100</bold></highlight> uses a user interface included with the Custom Tag Wizard to specify general characteristics, or actions, of the custom tag the developer wishes to create (step <highlight><bold>105</bold></highlight>). The Custom Tag Wizard generates custom tags according to the developer&apos;s specifications (step <highlight><bold>110</bold></highlight>). In a client-server implementation, the generated custom tag files are dynamically packaged into a package file that is returned to the developer (step <highlight><bold>115</bold></highlight>). The developer edits the generated custom tag files to add particular business logic in order to perform a desired business function (step <highlight><bold>120</bold></highlight>). For example, the developer may edit the custom tag files to include code for a custom tag to retrieve a customer&apos;s current balance information from the company&apos;s database. The custom tag files with the added business logic are made available to Web page designer <highlight><bold>130</bold></highlight> for inclusion in Web pages. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Web page designer <highlight><bold>130</bold></highlight> often has less programming skills than developer <highlight><bold>100</bold></highlight>. Web page designer <highlight><bold>130</bold></highlight> is typically trained to develop Web pages using the hypertext markup language (HTML) and extended markup language (XML) but often lacks skills needed to program Java code used in custom tags and Java applications. Web page designer <highlight><bold>130</bold></highlight> uses tags to code Java Server Pages (JSPs) that include standard tags as well as custom tags created by developer <highlight><bold>100</bold></highlight> (step <highlight><bold>140</bold></highlight>). The Java Server Pages created by Web page designer <highlight><bold>130</bold></highlight> are made available to clients by publishing them on the business&apos; Web site (step <highlight><bold>150</bold></highlight>). </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Client <highlight><bold>160</bold></highlight> requests server pages that include custom tags from the Web site (step <highlight><bold>170</bold></highlight>). The Web site retrieves the Web Page (i.e., JSP) and resolves the static and dynamic text by processing the custom tags. The resulting Web page, with both static and dynamic content, are received by the client and displayed on the client&apos;s display using standard browser software (step <highlight><bold>180</bold></highlight>). </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a high level diagram showing a Custom Tag Wizard used to create and package custom tag frameworks for a developer. Developer <highlight><bold>210</bold></highlight> invokes Custom Tag Wizard <highlight><bold>200</bold></highlight> that reside either on the developer&apos;s computer system or on a server computer system. Custom Tag Wizard <highlight><bold>200</bold></highlight> reads custom tag creation questions <highlight><bold>205</bold></highlight> and provides tag questions <highlight><bold>215</bold></highlight> to developer <highlight><bold>210</bold></highlight>. Developer <highlight><bold>210</bold></highlight> provides tag answers <highlight><bold>220</bold></highlight> in response to tag questions <highlight><bold>215</bold></highlight> and the custom tag characteristics that the developer wishes to create. When developer <highlight><bold>210</bold></highlight> requests that Custom Tag Wizard <highlight><bold>200</bold></highlight> generate custom tag files corresponding to the developer&apos;s custom tag requests, Custom Tag Wizard <highlight><bold>200</bold></highlight> creates tag handler classes (predefined process <highlight><bold>230</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 10</cross-reference> for processing details), tag extra info (TEI) classes (predefined process <highlight><bold>240</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>for processing details), and a tag library description (TLD) file (predefined process <highlight><bold>250</bold></highlight>). The processing results in one or more tag handler classes <highlight><bold>235</bold></highlight>, one or more tag extra info classes <highlight><bold>245</bold></highlight>, an at least one tag library description files <highlight><bold>255</bold></highlight>. In a client-server environment, the created custom tag files are packaged into package file <highlight><bold>270</bold></highlight> using predefined process <highlight><bold>260</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 3, 4</cross-reference>, and <highlight><bold>9</bold></highlight> for processing details). Package file <highlight><bold>270</bold></highlight> is sent to the developer (step <highlight><bold>280</bold></highlight>) for inclusion of business specific logic. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a high level diagram showing a server dynamically package custom components and return a resulting package to a client computer. Client <highlight><bold>300</bold></highlight> sends custom solution data <highlight><bold>305</bold></highlight>, such as a request, through computer <highlight><bold>310</bold></highlight> (such as the Internet) to server <highlight><bold>320</bold></highlight>. Server <highlight><bold>320</bold></highlight> receives custom solution request <highlight><bold>315</bold></highlight> from computer network <highlight><bold>310</bold></highlight> using receive request process <highlight><bold>325</bold></highlight>. Server <highlight><bold>320</bold></highlight> processes the client&apos;s request. Processing includes reading and customizing one or more components <highlight><bold>340</bold></highlight> based on the clients request (process <highlight><bold>330</bold></highlight>). Customizing components (step <highlight><bold>330</bold></highlight>) may include reading standard files or packages from component data store <highlight><bold>340</bold></highlight>, modifying standard files included in component data store <highlight><bold>340</bold></highlight> based on the client&apos;s request, dynamically creating new components not included in component data store <highlight><bold>340</bold></highlight>, as well as any combination thereof. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Server <highlight><bold>320</bold></highlight> packages custom components requested by the client (process <highlight><bold>350</bold></highlight>) resulting in package <highlight><bold>360</bold></highlight> which includes one or more component files. Package file <highlight><bold>360</bold></highlight> may be a &ldquo;zip&rdquo; file that is able to be processed by any number of zip utilities or might be a &ldquo;jar&rdquo; file which is a Java package that includes certain Java components. Server <highlight><bold>320</bold></highlight> sends package file <highlight><bold>360</bold></highlight> back the client computer (process <highlight><bold>370</bold></highlight>). Reply <highlight><bold>380</bold></highlight> results from sending process <highlight><bold>380</bold></highlight> and includes the package file. Reply <highlight><bold>380</bold></highlight> is sent through computer network <highlight><bold>310</bold></highlight> to client computer <highlight><bold>300</bold></highlight>. Client computer <highlight><bold>300</bold></highlight> receives package file <highlight><bold>390</bold></highlight> from the network. Client is then able to store package file <highlight><bold>390</bold></highlight> onto a nonvolatile storage device, such as a disk drive, and process the package file using a common zip utility (i.e., pkzip, winzip, etc.) to extract the component files. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart showing the processing involved in dynamically packaging components and returning the resulting package file to a client. Package processing commences at <highlight><bold>400</bold></highlight> whereupon request <highlight><bold>410</bold></highlight> from client <highlight><bold>405</bold></highlight> is received (step <highlight><bold>415</bold></highlight>). Create new package processing <highlight><bold>420</bold></highlight> commences in response to determining that request <highlight><bold>410</bold></highlight> is for creation of a package file. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The first component included in the request is prepared (step <highlight><bold>425</bold></highlight>). A determination is made as to whether the component request is based on a standard component (decision <highlight><bold>430</bold></highlight>). If the component request is based on a standard component (such as a boilerplate file), decision <highlight><bold>430</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>435</bold></highlight> whereupon the standard component is received (step <highlight><bold>440</bold></highlight>) from standard component data store <highlight><bold>445</bold></highlight> (such as a library of boilerplate files). On the other hand, if the component is not based on a standard component, decision <highlight><bold>430</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>450</bold></highlight> bypassing the retrieval of a standard component. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> A custom component is created (step <highlight><bold>455</bold></highlight>) either dynamically or based on a retrieved standard component. If based on a retrieved standard component, step <highlight><bold>455</bold></highlight> may or may not change the standard component. The component is written (step <highlight><bold>460</bold></highlight>) to package file <highlight><bold>465</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> A determination is made as to whether more components need to be retrieved or created to respond to the client&apos;s request (decision <highlight><bold>470</bold></highlight>). If more components are needed, decision <highlight><bold>470</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>475</bold></highlight> which prepares the next component for the request (step <highlight><bold>480</bold></highlight>) and loops back to process the next component. This looping continues until no more components are needed, at which time decision <highlight><bold>470</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>485</bold></highlight> whereupon package file <highlight><bold>465</bold></highlight> is sent to client <highlight><bold>405</bold></highlight> (step <highlight><bold>490</bold></highlight>), and processing ends at <highlight><bold>495</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a high level diagram showing a developer receiving a custom tag package and using components within the custom tag package to create custom tags. Developer <highlight><bold>500</bold></highlight> receives custom tag package <highlight><bold>520</bold></highlight> using process <highlight><bold>510</bold></highlight>. Developer <highlight><bold>500</bold></highlight> stores custom tag package <highlight><bold>540</bold></highlight> on a nonvolatile storage device accessible by the developer&apos;s computer system (process <highlight><bold>530</bold></highlight>). Developer <highlight><bold>500</bold></highlight> unpacks the received package file using an unpacking utility, such as pkzip, winzip, etc. (process <highlight><bold>550</bold></highlight>). Unpacking package file <highlight><bold>540</bold></highlight> results in one or more tag handler class files <highlight><bold>560</bold></highlight>, one or more tag extra info (TEI) class files <highlight><bold>570</bold></highlight>, and a tag library description file <highlight><bold>580</bold></highlight>. Developer <highlight><bold>500</bold></highlight> modifies the unpacked class files (process <highlight><bold>590</bold></highlight>) using an editor to add the business logic that the developer desires, such as retrieving a customer&apos;s account balance from a database. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a high level diagram showing a web page designer using custom tags in a Web page and processing resulting when a client computer requests the Web page. Page designer <highlight><bold>600</bold></highlight> receives custom tag usage instructions <highlight><bold>605</bold></highlight> corresponding to newly created custom tags that were created by a developer. Page designer <highlight><bold>600</bold></highlight> creates Web pages (Java Server Pages) that include one or more custom tags that were provided by the developer (process <highlight><bold>610</bold></highlight>) resulting in Web page <highlight><bold>615</bold></highlight>. Page designer <highlight><bold>600</bold></highlight> makes Web page <highlight><bold>615</bold></highlight> available to Web clients by publishing Web page <highlight><bold>615</bold></highlight> onto Web site <highlight><bold>625</bold></highlight> (process <highlight><bold>620</bold></highlight>). Published Web page <highlight><bold>630</bold></highlight> is stored on Web Site <highlight><bold>625</bold></highlight> in an area accessible to Web client <highlight><bold>650</bold></highlight>. In addition, the developer published the tag handler class files <highlight><bold>635</bold></highlight>, tag extra info (TEI) class files <highlight><bold>640</bold></highlight>, and tag library description files <highlight><bold>645</bold></highlight> that include processing details for handling the custom tags included in published Web page <highlight><bold>630</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Web client uses a standard browser (such as Netscape&apos;s Navigator&trade; software or Microsoft&apos;s Internet Explorer&trade; software) to use computer network <highlight><bold>655</bold></highlight> (i.e., the Internet) to access Web site <highlight><bold>625</bold></highlight>. Web client <highlight><bold>650</bold></highlight> sends request <highlight><bold>660</bold></highlight> to Web site <highlight><bold>625</bold></highlight> requesting published Web page <highlight><bold>630</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Web site <highlight><bold>625</bold></highlight> receives the client request (process <highlight><bold>665</bold></highlight>) and determines that the client is requesting published Web page <highlight><bold>630</bold></highlight>. As a result, Web site <highlight><bold>625</bold></highlight> retrieves Web page <highlight><bold>630</bold></highlight> (process <highlight><bold>670</bold></highlight>). The Web page, being a Java Server Page, is converted into servlet <highlight><bold>682</bold></highlight> using process <highlight><bold>680</bold></highlight>. Servlet <highlight><bold>682</bold></highlight> includes dynamic content <highlight><bold>686</bold></highlight> which is written in Java and adapted to be executed by a Java Virtual Machine (JVM) running on the Web client&apos;s computer system. Servlet <highlight><bold>682</bold></highlight> also includes static content <highlight><bold>688</bold></highlight>, such as standard HTML or XML code. Resulting servlet <highlight><bold>682</bold></highlight> is executed and writes a combination of static and dynamic text to the response object. That text, in turn, is returned to the Web client (step <highlight><bold>690</bold></highlight>) as response <highlight><bold>695</bold></highlight>. Web client <highlight><bold>650</bold></highlight> receives response <highlight><bold>695</bold></highlight> and the resulting dynamic and static content is displayed using the client&apos;s browser software and a Java Virtual Machine on the client&apos;s computer is used to process the dynamic content. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a screen flow showing various screens used to create and receive a custom tag framework package. Screen <highlight><bold>700</bold></highlight> is a screen used by the developer to enter tag library information about a tag being created. The developer supplies tag library (taglib) name <highlight><bold>705</bold></highlight>, Java package name <highlight><bold>710</bold></highlight>, taglib version number <highlight><bold>715</bold></highlight>, Java Server Page (JSP) version number <highlight><bold>720</bold></highlight>, and short description <highlight><bold>725</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> To define new tags to include in the tag library, the developer selects &ldquo;Define New Tag&rdquo; command button <highlight><bold>730</bold></highlight>. In response, Define New Tag screen <highlight><bold>750</bold></highlight> is displayed with detailed questions regarding the tag that the developer wishes to create (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference> for screen details). When the developer is finished creating a tag he is returned to screen <highlight><bold>700</bold></highlight>. The developer can create multiple new tags by repeatedly selecting &ldquo;Define New Tag&rdquo; command button <highlight><bold>730</bold></highlight> and providing information about the new tags in screen <highlight><bold>750</bold></highlight>. To modify a tag that was previously created, the developer selects the tag from tag modify list box <highlight><bold>732</bold></highlight>. In response, the current information pertaining to the selected tag is loaded and displayed to the developer in screen <highlight><bold>750</bold></highlight>. When the developer is finished developing tags he selects &ldquo;Generate&rdquo; command button <highlight><bold>735</bold></highlight>. In a client-server environment, command button <highlight><bold>735</bold></highlight> results in the custom tag files being dynamically generated, packaged and returned to the developer in File Download screen <highlight><bold>760</bold></highlight>. In a non-client-server environment, command button <highlight><bold>735</bold></highlight> generates the custom tag files. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> File Download screen <highlight><bold>760</bold></highlight> informs the developer that he can download the newly created package file (screen text <highlight><bold>765</bold></highlight>). The developer is presented with a choice to either open the file from its current location (option button <highlight><bold>770</bold></highlight>) or save the file to a disk accessible to the developer (option button <highlight><bold>775</bold></highlight>). The developer selects option button <highlight><bold>775</bold></highlight> and selects &ldquo;OK&rdquo; command button <highlight><bold>780</bold></highlight> to download the file to a disk location that he can specify or selects &ldquo;Cancel&rdquo; command button <highlight><bold>785</bold></highlight> to cancel the operation and not save the file to a disk location. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Screen <highlight><bold>700</bold></highlight> also includes command button <highlight><bold>740</bold></highlight> to retrieve previously saved custom tag files so they can be edited and new tags can be added to the package of custom tags by selecting &ldquo;Define New Tag&rdquo; command button <highlight><bold>730</bold></highlight>. If the developer wishes to cancel entering tag library information, he selects &ldquo;Cancel&rdquo; command button <highlight><bold>745</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a screen design of a page to gather custom tag information from a developer. Define New Tag Screen <highlight><bold>800</bold></highlight> is displayed in response to a developer requesting to define a new tag (see command button <highlight><bold>730</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The developer enters tag name <highlight><bold>805</bold></highlight> which is a name that will be used to refer to the custom tag in a Java Server Page. The developer can also enter short description <highlight><bold>810</bold></highlight> describing the tag. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The developer selects an option in response to the question, &ldquo;Should any JSP tags, expressions and scriptlets nested inside this tag be processed&quest;&rdquo; The options available to the developer include option <highlight><bold>815</bold></highlight> (&ldquo;No, this tag is always empty&rdquo;), option <highlight><bold>820</bold></highlight> (&ldquo;Yes, process nested JSP elements&rdquo;), and option <highlight><bold>825</bold></highlight> (&ldquo;No, if there are nested JSP elements treat them as static text&rdquo;). The developer selects one of the included options. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The developer selects another option in response to the question, &ldquo;How many times will this tag&apos;s content be processed&quest;&rdquo; The options available to the developer include option <highlight><bold>830</bold></highlight> (&ldquo;Exactly once&mdash;it is a simple tag&rdquo;), option <highlight><bold>835</bold></highlight> (&ldquo;The tag will decide whether or not to process the contents one time&rdquo;), and option <highlight><bold>840</bold></highlight> (&ldquo;The tag may iterate over itself any number of times&rdquo;). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The developer selects another option in response to the question, &ldquo;Does the tag need to access or manipulate the results of processing its content&quest;&rdquo; The options available to the developer include option <highlight><bold>845</bold></highlight> (&ldquo;Yes, the tag acts on its content in some way&rdquo;) and option <highlight><bold>850</bold></highlight> (&ldquo;No, the tag does not process its content&rdquo;). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The developer also describes any attributes that are used by the tag. The developer provides attribute name <highlight><bold>855</bold></highlight> and an attribute type for each attribute. Attribute type can be selected from the list of available attributes in list box <highlight><bold>860</bold></highlight>. List box <highlight><bold>860</bold></highlight> includes attribute types of java.lang.string (for string attributes), int (for integer attributes), long (for long number attributes), double (for double number attributes), Boolean (for Boolean attributes), and java.lang.object (for Java object attributes). The developer also selects whether the attribute is required using checkbox control <highlight><bold>865</bold></highlight> and whether an expression is allowed as an attribute using checkbox control <highlight><bold>870</bold></highlight>. If more attributes are needed, the developer selects More Attributes command button <highlight><bold>872</bold></highlight> whereupon additional text boxes and controls are displayed for the developer to add information about additional attributes. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Custom tags may create some Java beans that can be used by other tags, scriptlets and expressions. These Java beans are described by the developer. If additional bean descriptions are needed the developer selects More Beans command button <highlight><bold>875</bold></highlight> whereupon additional text boxes and controls are added to screen <highlight><bold>800</bold></highlight> to describe the additional beans. The developer enters bean name <highlight><bold>880</bold></highlight> and the type of bean <highlight><bold>885</bold></highlight>. If bean name <highlight><bold>880</bold></highlight> and/or bean type <highlight><bold>885</bold></highlight> are specified as a tag attribute, the developer is asked to type an asterisk (&ldquo;*&rdquo;) followed by the name of the attribute in the text boxes supplied. The developer also selects a Java bean creation option using list box control <highlight><bold>890</bold></highlight>. Options included in list box control <highlight><bold>890</bold></highlight> include &ldquo;Create bean for use after the Start tag,&rdquo; &ldquo;Create bean for use between the Start and End tags,&rdquo; &ldquo;Create bean for use after the End tag,&rdquo; and &ldquo;Don&apos;t create the bean. It already exists.&rdquo;</paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> When the developer is finished providing information for the custom tag he either selects Accept Changes command button <highlight><bold>894</bold></highlight> to accept the changes made on the screen and store the tag information for future generation of tag files (see Generate command button <highlight><bold>735</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>) and return to the Enter Tag Library Information screen (see screen <highlight><bold>700</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). If the developer does not wish to save the tag information he selects Cancel Tag command button <highlight><bold>898</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a high level flowchart showing the processing involved in preparing the custom tag package. Processing commences at <highlight><bold>900</bold></highlight> whereupon the tag library definition (.TLD) file is written (step <highlight><bold>910</bold></highlight>). A sample Java Server Page (JSP) is written to the package (step <highlight><bold>920</bold></highlight>). The information about the first custom tag that the developer described (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>) is read (step <highlight><bold>930</bold></highlight>). The tag handler class file is written (predefined process <highlight><bold>940</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 10</cross-reference> for further processing details). The tag extra info (TEI) class file is written (predefined process <highlight><bold>950</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>for further processing details). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> A determination is made as to whether there are more tag definitions that need to be processed (decision <highlight><bold>960</bold></highlight>). If there are more tag definitions, decision <highlight><bold>960</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>965</bold></highlight> whereupon the next tag definition information is read (step <highlight><bold>970</bold></highlight>) and processing loops back to process the next tag&apos;s tag handler and TEI files. This looping continues until there are no more tag definitions to process, at which time decision <highlight><bold>960</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>975</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The tag definitions (i.e., the developer&apos;s responses to the tag generation questions) are written to the package so that they can be read by the Custom Tag Wizard for modification and creation of additional tags within the tag package (step <highlight><bold>980</bold></highlight>). Processing for writing the package file ends at <highlight><bold>995</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a high level flowchart showing the processing involved in writing a custom tag handler class. Processing commences at <highlight><bold>1000</bold></highlight> whereupon the class definition for the tag handler is written (predefined process <highlight><bold>1010</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 11</cross-reference> for processing details). Getters and Setters are written for attributes used by the tag (step <highlight><bold>1020</bold></highlight>). The doStartTag( ) method for the tag handler is written (predefined process <highlight><bold>1030</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 12</cross-reference> for processing details). </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> A determination is made, based on the developer&apos;s responses to tag questions (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>), as to whether the tag accesses its content or iterates multiple times (decision <highlight><bold>1040</bold></highlight>). If the tag accesses its content or iterates multiple times, decision <highlight><bold>1040</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1045</bold></highlight> whereupon the doInitBody( ) method is written (step <highlight><bold>1050</bold></highlight>) as well as the doAfterBody( ) method (predefined process <highlight><bold>1060</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 13</cross-reference> for processing details). On the other hand, if the tag does not access its content and does not iterate multiple times, decision <highlight><bold>1040</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1045</bold></highlight> bypassing the writing of the doInitBody( ) and doAfterBody( ) methods. The doEndTag( ) method is written (predefined process <highlight><bold>1070</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 14</cross-reference> for processing details). Processing for writing the tag handler ends at <highlight><bold>1095</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing the processing involved in writing the class definition included in the tag handler. Processing commences at <highlight><bold>1100</bold></highlight> whereupon a determination is made, based on the developer&apos;s responses to tag questions (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>), as to whether the tag accesses its content or iterates multiple times (decision <highlight><bold>1105</bold></highlight>). If the tag accesses its content or iterates multiple times, decision <highlight><bold>1105</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1108</bold></highlight> whereupon code is written to extend body tag support (step <highlight><bold>1110</bold></highlight>, see Appendix G, footnote 1, for an example). On the other hand, if the tag does not access its content and does not iterate multiple times, decision <highlight><bold>1105</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1112</bold></highlight> whereupon code is written to extend tag support (step <highlight><bold>1115</bold></highlight>, see Appendix A, footnote 1, for an example). </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> A determination is made as to whether the tag includes one or more attributes (decision <highlight><bold>1120</bold></highlight>). If the tag includes one or more attributes, decision <highlight><bold>1120</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1122</bold></highlight> whereupon the first attribute is read (step <highlight><bold>1125</bold></highlight>) and a line is written declaring a class variable using the attribute information (step <highlight><bold>1130</bold></highlight>, see Appendix G, footnote 2, for an example). A determination is made as to whether there are more attributes to process (decision <highlight><bold>1135</bold></highlight>). If there are more attributes, decision <highlight><bold>1135</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1138</bold></highlight> whereupon information regarding the next attribute is read (step <highlight><bold>1145</bold></highlight>) and processing loops back to write a line declaring a class variable using this attribute information. This looping continues until there are no more attributes to process, at which time decision <highlight><bold>1135</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1142</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> If there are no attributes to process, decision <highlight><bold>1120</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1148</bold></highlight> and when all attributes have been processed decision <highlight><bold>1135</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1142</bold></highlight> whereupon processing continues to determine whether the tag definition includes any declared beans (decision <highlight><bold>1150</bold></highlight>). Decision <highlight><bold>1150</bold></highlight> is based on information that was provided to the process (see developer user interface screen in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). If there are declared beans, decision <highlight><bold>1150</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1152</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1155</bold></highlight>) and a line is written declaring a class variable using the declared bean information (step <highlight><bold>1160</bold></highlight>, see Appendix O, footnote 1, for an example). A determination is made as to whether there are more beans to process (decision <highlight><bold>1170</bold></highlight>). If there are more beans, decision <highlight><bold>1170</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1172</bold></highlight> whereupon information regarding the next bean is read (step <highlight><bold>1180</bold></highlight>) and processing loops back to write a line declaring a class variable using the declared bean information (step <highlight><bold>1160</bold></highlight>). This looping continues until there are no more beans to process, at which time decision <highlight><bold>1170</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1178</bold></highlight>. If there are no beans to process, decision <highlight><bold>1150</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1190</bold></highlight> and when all beans have been processed decision <highlight><bold>1170</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1178</bold></highlight> whereupon processing ends at <highlight><bold>1195</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flowchart showing the processing involved in writing the doStartTag( ) method included in the tag handler. Processing commences at <highlight><bold>1200</bold></highlight> whereupon a determination is made, based on the developer&apos;s responses to tag questions (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>), as to whether the tag accesses its content or iterates multiple times (decision <highlight><bold>1205</bold></highlight>). If the tag accesses its content or iterates multiple times, decision <highlight><bold>1205</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1208</bold></highlight> whereupon code is written for the default result to be &ldquo;EVAL_BODY_TAG&rdquo; (step <highlight><bold>1210</bold></highlight>, see Appendix K, footnote 1, for an example). On the other hand, if the tag does not access its content and does not iterate multiple times, decision <highlight><bold>1205</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1212</bold></highlight> whereupon code is written for the default result to be &ldquo;EVAL_BODY_INCLUDE&rdquo; (step <highlight><bold>1215</bold></highlight>, see Appendix C, footnote 1, for an example). </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> A determination is made as to whether the tag includes any declared beans (decision <highlight><bold>1220</bold></highlight>). Decision <highlight><bold>1220</bold></highlight> is based on information that was provided to the process (see developer user interface screen in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). If there are declared beans, decision <highlight><bold>1220</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1222</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1225</bold></highlight>). A determination is made as to whether the bean is a read-only bean (decision <highlight><bold>1230</bold></highlight>). If the bean is a read only bean, decision <highlight><bold>1230</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1232</bold></highlight> whereupon code is written to retrieve the bean from page context (step <highlight><bold>1235</bold></highlight>, see Appendix S, footnote 1, for an example). On the other hand, if the bean is not a read-only bean, decision <highlight><bold>1230</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1238</bold></highlight> bypassing step <highlight><bold>1235</bold></highlight>. A determination is made as to whether there are more beans to process (decision <highlight><bold>1235</bold></highlight>). If there are more beans, decision <highlight><bold>1235</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1242</bold></highlight> whereupon processing loops back to read information regarding the next bean (step <highlight><bold>1225</bold></highlight>) and process the bean accordingly. This looping continues until there are no more beans to process, at which time decision <highlight><bold>1240</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1248</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Some code is written to the doStartTag( ) method (step <highlight><bold>1250</bold></highlight>) after declared beans have been processed (&ldquo;no&rdquo; branch <highlight><bold>1242</bold></highlight>) or if there were no beans to process (decision <highlight><bold>1220</bold></highlight> branching to &ldquo;no&rdquo; branch <highlight><bold>1272</bold></highlight>). Another determination is made as to whether the tag includes any declared beans (decision <highlight><bold>1255</bold></highlight>). If there are no declared beans, decision <highlight><bold>1265</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1288</bold></highlight> and processing ends at <highlight><bold>1295</bold></highlight>. On the other hand, if there are declared beans, decision <highlight><bold>1255</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1258</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1260</bold></highlight>). A determination is made as to whether the bean is created for use after the start tag (&ldquo;AT_BEGIN&rdquo;) or between the start and end tags (&ldquo;NESTED&rdquo;) (decision <highlight><bold>1265</bold></highlight>). If decision <highlight><bold>1265</bold></highlight> is true, then &ldquo;yes&rdquo; branch <highlight><bold>1268</bold></highlight> is taken whereupon code is written to store the bean in page context (step <highlight><bold>1270</bold></highlight>, see Appendix S, footnote 2, for an example). On the other hand, if decision <highlight><bold>1265</bold></highlight> is false, &ldquo;no&rdquo; branch <highlight><bold>1272</bold></highlight> is taken bypassing step <highlight><bold>1270</bold></highlight>. A determination is made as to whether there are more beans to process (decision <highlight><bold>1275</bold></highlight>). If there are more beans, decision <highlight><bold>1275</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1278</bold></highlight> whereupon processing loops back to read information regarding the next bean (step <highlight><bold>1265</bold></highlight>) and process the bean accordingly. This looping continues until there are no more beans to process, at which time decision <highlight><bold>1275</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1282</bold></highlight> whereupon processing ends at <highlight><bold>1295</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a flowchart showing the processing involved in writing the doAfterBody( ) method included in the tag handler. Processing commences at <highlight><bold>1300</bold></highlight> whereupon a determination is made, based on the developer&apos;s responses to tag questions (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>), as to whether the tag accesses its content (decision <highlight><bold>1310</bold></highlight>). If the tag accesses its content, decision <highlight><bold>1310</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1315</bold></highlight> whereupon code is written to obtain content into a buffer and write the buffer (step <highlight><bold>1320</bold></highlight>, see Appendix P, footnote 1, for an example). On the other hand, if the tag does not access its content and does not iterate multiple times, decision <highlight><bold>1310</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1325</bold></highlight> whereupon code is written to pass the content through to a previous buffer (step <highlight><bold>1330</bold></highlight>, see Appendix H, footnote 1, for an example). </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> A determination is made as to whether the tag includes any declared beans (decision <highlight><bold>1340</bold></highlight>). Decision <highlight><bold>1340</bold></highlight> is based on information that was provided to the process (see developer user interface screen in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). If there are no declared beans, decision <highlight><bold>1340</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1390</bold></highlight> and processing ends at <highlight><bold>1395</bold></highlight>. On the other hand, if there are declared beans, decision <highlight><bold>1340</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1345</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1350</bold></highlight>). A determination is made as to whether the bean is nested between the start and end tags (decision <highlight><bold>1360</bold></highlight>). If the bean is nested, decision <highlight><bold>1360</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1365</bold></highlight> whereupon code is written to store the bean in page context (step <highlight><bold>1370</bold></highlight>). On the other hand, if the bean is not nested, decision <highlight><bold>1360</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1375</bold></highlight> bypassing step <highlight><bold>1370</bold></highlight>. A determination is made as to whether there are more beans to process (decision <highlight><bold>1380</bold></highlight>). If there are more beans, decision <highlight><bold>1380</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1382</bold></highlight> whereupon processing loops back to read information regarding the next bean (step <highlight><bold>1350</bold></highlight>) and process the bean accordingly. This looping continues until there are no more beans to process, at which time decision <highlight><bold>1380</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1388</bold></highlight> and processing ends at <highlight><bold>1395</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a flowchart showing the processing involved in writing the doEndTag( ) method included in the tag handler. A determination is made as to whether the tag includes any declared beans (decision <highlight><bold>1410</bold></highlight>). Decision <highlight><bold>1410</bold></highlight> is based on information that was provided to the process (see developer user interface screen in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). If there are no declared beans, decision <highlight><bold>1410</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1490</bold></highlight> and processing ends at <highlight><bold>1495</bold></highlight>. On the other hand, if there are declared beans, decision <highlight><bold>1410</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1415</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1420</bold></highlight>). A determination is made as to whether the bean is nested between the start and end tags (decision <highlight><bold>1430</bold></highlight>). If the bean is nested, decision <highlight><bold>1430</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1435</bold></highlight> whereupon code is written to remove bean from page context (step <highlight><bold>1440</bold></highlight>, see Appendix Q, footnote 2, for an example). On the other hand, if the bean is not nested, decision <highlight><bold>1430</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1445</bold></highlight> bypassing step <highlight><bold>1440</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> A determination is made as to whether the bean is used after the &ldquo;end&rdquo; tag for the custom tag (decision <highlight><bold>1450</bold></highlight>). If it is available after the &ldquo;end&rdquo; tag, decision <highlight><bold>1455</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1455</bold></highlight> whereupon code is written to put the bean into the page context (step <highlight><bold>1460</bold></highlight>, see Appendix Q, footnote 1, for an example). On the other hand, if the bean is not available after the end tag, decision <highlight><bold>1460</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1465</bold></highlight> bypassing step <highlight><bold>1460</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> A determination is made as to whether there are more beans to process (decision <highlight><bold>1470</bold></highlight>). If there are more beans, decision <highlight><bold>1470</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1475</bold></highlight> whereupon processing loops back to read information regarding the next bean (step <highlight><bold>1420</bold></highlight>) and process the bean accordingly. This looping continues until there are no more beans to process, at which time decision <highlight><bold>1470</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1480</bold></highlight> and processing ends at <highlight><bold>1495</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>is a high level flowchart showing the processing involved in writing a tag extra info (TEI) class. Processing commences at <highlight><bold>1500</bold></highlight> whereupon class definition information is written to the TEI class file (step <highlight><bold>1510</bold></highlight>). The IsValid( ) method for the TEI class is written (predefined process <highlight><bold>1520</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>for processing details) based on information provided from the developer (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). The GetVariableInfo( ) method for the TEI class is also written to the TEI class file (predefined process <highlight><bold>1530</bold></highlight>, see <cross-reference target="DRAWINGS">FIG. 16</cross-reference> for processing details) based on information provided from the developer (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). Write tag extra info processing ends at <highlight><bold>1540</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>is a flowchart showing the processing involved in writing the IsValid( ) method included in the TEI class. Processing commences at <highlight><bold>1550</bold></highlight> whereupon a determination is made as to whether the tag has any attributes (decision <highlight><bold>1560</bold></highlight>). If the tag does not have any attributes, decision <highlight><bold>1560</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1590</bold></highlight> and processing ends at <highlight><bold>1595</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> On the other hand, if the tag has one or more attributes, decision <highlight><bold>1560</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1565</bold></highlight> whereupon information pertaining to the first attribute is read (step <highlight><bold>1570</bold></highlight>) and code is written to the IsValid( ) method to declare a local variable and initialize it to the attribute value (step <highlight><bold>1580</bold></highlight>, see Appendix V, footnote 1, for an example). A determination is made as to whether the tag has more attributes (decision <highlight><bold>1585</bold></highlight>). If the tag has more attributes, decision <highlight><bold>1585</bold></highlight> branches to &ldquo;yes&rdquo; loop <highlight><bold>1588</bold></highlight> which loops back to read the information pertaining to the next attribute and write the local variable information accordingly. This looping continues until there are no more attributes to process, at which time decision <highlight><bold>1585</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1592</bold></highlight> and processing ends at <highlight><bold>1595</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a flowchart showing the processing involved in writing the GetVariableInfo( ) method included in the TEI class. Processing commences at <highlight><bold>1600</bold></highlight> whereupon a determination is made as to whether the tag includes any declared beans (decision <highlight><bold>1610</bold></highlight>). Decision <highlight><bold>1610</bold></highlight> is based on information that was provided by the developer (see developer user interface screen in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>). If there are declared beans, decision <highlight><bold>1610</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1615</bold></highlight> to process the beans. Information about the first bean is read (step <highlight><bold>1620</bold></highlight>). A determination is made as to whether the bean is a read-only bean (decision <highlight><bold>1630</bold></highlight>). If the bean is not a read only bean, decision <highlight><bold>1630</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1635</bold></highlight> whereupon code is written to declare the bean to the Java Server Page container, constructing the name and type expressions (step <highlight><bold>1640</bold></highlight>, see Appendix U, footnote <highlight><bold>1</bold></highlight>, for an example). On the other hand, if the bean is a read-only bean, decision <highlight><bold>1630</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1645</bold></highlight> bypassing step <highlight><bold>1640</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> A determination is made as to whether there are more beans to process (decision <highlight><bold>1650</bold></highlight>). If there are more beans, decision <highlight><bold>1650</bold></highlight> branches to &ldquo;yes&rdquo; branch <highlight><bold>1660</bold></highlight> whereupon processing loops back to read information regarding the next bean (step <highlight><bold>1620</bold></highlight>) and process the bean accordingly. This looping continues until there are no more beans to process, at which time decision <highlight><bold>1650</bold></highlight> branches to &ldquo;no&rdquo; branch <highlight><bold>1670</bold></highlight> and processing ends at <highlight><bold>1695</bold></highlight>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates information handling system <highlight><bold>1701</bold></highlight> which is a simplified example of a computer system capable of performing the copy processing described herein. Computer system <highlight><bold>1701</bold></highlight> includes processor <highlight><bold>1700</bold></highlight> which is coupled to host bus <highlight><bold>1705</bold></highlight>. A level two (L2) cache memory <highlight><bold>1710</bold></highlight> is also coupled to the host bus <highlight><bold>1705</bold></highlight>. Host-to-PCI bridge <highlight><bold>1715</bold></highlight> is coupled to main memory <highlight><bold>1720</bold></highlight>, includes cache memory and main memory control functions, and provides bus control to handle transfers among PCI bus <highlight><bold>1725</bold></highlight>, processor <highlight><bold>1700</bold></highlight>, L2 cache <highlight><bold>1710</bold></highlight>, main memory <highlight><bold>1720</bold></highlight>, and host bus <highlight><bold>1705</bold></highlight>. PCI bus <highlight><bold>1725</bold></highlight> provides an interface for a variety of devices including, for example, LAN card <highlight><bold>1730</bold></highlight>. PCI-to-ISA bridge <highlight><bold>1735</bold></highlight> provides bus control to handle transfers between PCI bus <highlight><bold>1725</bold></highlight> and ISA bus <highlight><bold>1740</bold></highlight>, universal serial bus (USB) functionality <highlight><bold>1745</bold></highlight>, IDE device functionality <highlight><bold>1750</bold></highlight>, power management functionality <highlight><bold>1755</bold></highlight>, and can include other functional elements not shown, such as a real-time clock (RTC), DMA control, interrupt support, and system management bus support. Peripheral devices and input/output (I/O) devices can be attached to various interfaces <highlight><bold>1760</bold></highlight> (e.g., parallel interface <highlight><bold>1762</bold></highlight>, serial interface <highlight><bold>1764</bold></highlight>, infrared (IR) interface <highlight><bold>1766</bold></highlight>, keyboard interface <highlight><bold>1768</bold></highlight>, mouse interface <highlight><bold>1770</bold></highlight>, and fixed disk (FDD) <highlight><bold>1772</bold></highlight>) coupled to ISA bus <highlight><bold>1740</bold></highlight>. Alternatively, many I/O devices can be accommodated by a super I/O controller (not shown) attached to ISA bus <highlight><bold>1740</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> BIOS <highlight><bold>1780</bold></highlight> is coupled to ISA bus <highlight><bold>1740</bold></highlight>, and incorporates the necessary processor executable code for a variety of low-level system functions and system boot functions. BIOS <highlight><bold>1780</bold></highlight> can be stored in any computer readable medium, including magnetic storage media, optical storage media, flash memory, random access memory, read only memory, and communications media conveying signals encoding the instructions (e.g., signals from a network). In order to attach computer system <highlight><bold>1701</bold></highlight> another computer system to copy files over a network, LAN card <highlight><bold>1730</bold></highlight> is coupled to PCI-to-ISA bridge <highlight><bold>1735</bold></highlight>. Similarly, to connect computer system <highlight><bold>1701</bold></highlight> to an ISP to connect to the Internet using a telephone line connection, modem <highlight><bold>1775</bold></highlight> is connected to serial port <highlight><bold>1764</bold></highlight> and PCI-to-ISA Bridge <highlight><bold>1735</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> While the computer system described in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is capable of executing the copying processes described herein, this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the copying process described herein. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> One of the preferred implementations of the invention is a client application, namely, a set of instructions (program code) in a code module which may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that is a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases &ldquo;at least one&rdquo; and &ldquo;one or more&rdquo; to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles &ldquo;a&rdquo; or &ldquo;an&rdquo; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &ldquo;one or more&rdquo; or &ldquo;at least one&rdquo; and indefinite articles such as &ldquo;a&rdquo; or &ldquo;an&rdquo;; the same holds true for the use in the claims of definite articles. 
<image file="US20030005411A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030005411A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030005411A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030005411A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030005411A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030005411A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030005411A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030005411A1-20030102-P00008.TIF" id="EMI-00008"></image>
<image file="US20030005411A1-20030102-P00009.TIF" id="EMI-00009"></image>
<image file="US20030005411A1-20030102-P00010.TIF" id="EMI-00010"></image>
<image file="US20030005411A1-20030102-P00011.TIF" id="EMI-00011"></image>
<image file="US20030005411A1-20030102-P00012.TIF" id="EMI-00012"></image>
<image file="US20030005411A1-20030102-P00013.TIF" id="EMI-00013"></image>
<image file="US20030005411A1-20030102-P00014.TIF" id="EMI-00014"></image>
<image file="US20030005411A1-20030102-P00015.TIF" id="EMI-00015"></image>
<image file="US20030005411A1-20030102-P00016.TIF" id="EMI-00016"></image>
<image file="US20030005411A1-20030102-P00017.TIF" id="EMI-00017"></image>
<image file="US20030005411A1-20030102-P00018.TIF" id="EMI-00018"></image>
<image file="US20030005411A1-20030102-P00019.TIF" id="EMI-00019"></image>
<image file="US20030005411A1-20030102-P00020.TIF" id="EMI-00020"></image>
<image file="US20030005411A1-20030102-P00021.TIF" id="EMI-00021"></image>
<image file="US20030005411A1-20030102-P00022.TIF" id="EMI-00022"></image>
<image file="US20030005411A1-20030102-P00023.TIF" id="EMI-00023"></image>
<image file="US20030005411A1-20030102-P00024.TIF" id="EMI-00024"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for dynamically packaging objects, said method comprising: 
<claim-text>receiving a request from a client computer system through a computer network, the request corresponding to a plurality of objects; </claim-text>
<claim-text>preparing the plurality of objects, the preparing including writing each of the objects to a package file; and </claim-text>
<claim-text>downloading the package file to the client computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>sending a package download dialog to the client computer system in response to the preparing; </claim-text>
<claim-text>receiving a download request from the client computer system in response to the package download dialog, wherein the downloading is performed in response to the download request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as described in claim <highlight><bold>1</bold></highlight>-further comprising: 
<claim-text>dynamically creating at least one of the objects based on the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the dynamically creating further includes: 
<claim-text>identifying one or more standard component objects corresponding to the request; and </claim-text>
<claim-text>modifying the identified standard component objects based on one or more specifications included in the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>generating a tag library definition file corresponding to one or more tag specifications received in the request; </claim-text>
<claim-text>generating a tag handler class file for one or more custom tags; </claim-text>
<claim-text>generating a tag extra info file for each of the custom tags; and </claim-text>
<claim-text>wherein the writing includes writing the tag library definition file, the tag handler class files, and the tag extra info files to the package file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein one of the objects includes a Java definition file and wherein the package file is a Java jar file. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>generating source code in response to the request; and </claim-text>
<claim-text>writing the generated source code to one of the objects. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. An information handling system comprising: 
<claim-text>one or more processors; </claim-text>
<claim-text>a memory accessible by the processors; </claim-text>
<claim-text>a network interface for connecting the information handling system to a computer network; </claim-text>
<claim-text>one or more nonvolatile storage devices accessible by the processors; and </claim-text>
<claim-text>a dynamic packaging tool to package a plurality of objects, the dynamic packaging tool including: </claim-text>
<claim-text>means for receiving a request from a client computer system through a computer network, the request corresponding a plurality of objects; </claim-text>
<claim-text>means for preparing the plurality of objects, the preparing including writing each of objects to a package file; and </claim-text>
<claim-text>means for downloading the package file to the client computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising: 
<claim-text>means for sending a package download dialog to the client computer system in response to the means for preparing; </claim-text>
<claim-text>means for receiving a download request from the client computer system in response to the package download dialog, wherein the means for downloading is performed in response to the download request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising: 
<claim-text>means for dynamically creating at least one of the objects based on the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the means for dynamically creating further includes: 
<claim-text>means for identifying one or more standard component objects corresponding to the request; and </claim-text>
<claim-text>means for modifying the identified standard component objects based on one or more specifications included in the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising: 
<claim-text>means for generating a tag library definition file corresponding to one or more tag specifications received in the request; </claim-text>
<claim-text>means for generating a tag handler class file for one or more custom tags; </claim-text>
<claim-text>means for generating a tag extra info file for each of the custom tags; and </claim-text>
<claim-text>wherein the means for writing includes means for writing the tag library definition file, the tag handler class files, and the tag extra info files to the package file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The information handling system as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising: 
<claim-text>means for generating source code in response to the request; and </claim-text>
<claim-text>means for writing the generated source code to one of the objects. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer program product stored in a computer operable media for dynamically packaging objects, said computer program product comprising: 
<claim-text>means for receiving a request from a client computer system through a computer network, the request corresponding a plurality of objects; </claim-text>
<claim-text>means for preparing the plurality of objects, the preparing including writing each of objects to a package file; and </claim-text>
<claim-text>means for downloading the package file to the client computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for sending a package download dialog to the client computer system in response to the means for preparing; </claim-text>
<claim-text>means for receiving a download request from the client computer system in response to the package download dialog, wherein the means for downloading is performed in response to the download request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for dynamically creating at least one of the objects based on the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the means for dynamically creating further includes: 
<claim-text>means for identifying one or more standard component objects corresponding to the request; and </claim-text>
<claim-text>means for modifying the identified standard component objects based on one or more specifications included in the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for generating a tag library definition file corresponding to one or more tag specifications received in the request; </claim-text>
<claim-text>means for generating a tag handler class file for one or more custom tags; </claim-text>
<claim-text>means for generating a tag extra info file for each of the custom tags; and </claim-text>
<claim-text>wherein the means for writing includes means for writing the tag library definition file, the tag handler class files, and the tag extra info files to the package file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein one of the objects includes a Java definition file and wherein the package file is a Java jar file. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product as described in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for generating source code in response to the request; and </claim-text>
<claim-text>means for writing the generated source code to one of the objects.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005411A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005411A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005411A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005411A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005411A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005411A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005411A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005411A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005411A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005411A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005411A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005411A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005411A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005411A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005411A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005411A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005411A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005411A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
