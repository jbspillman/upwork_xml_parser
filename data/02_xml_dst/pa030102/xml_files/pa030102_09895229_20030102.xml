<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005173A1-20030102-D00000.TIF SYSTEM "US20030005173A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00001.TIF SYSTEM "US20030005173A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00002.TIF SYSTEM "US20030005173A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00003.TIF SYSTEM "US20030005173A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00004.TIF SYSTEM "US20030005173A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00005.TIF SYSTEM "US20030005173A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00006.TIF SYSTEM "US20030005173A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00007.TIF SYSTEM "US20030005173A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005173A1-20030102-D00008.TIF SYSTEM "US20030005173A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005173</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895229</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/46</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>318000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>200000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Methods and apparatus in distributed remote logging system for remote adhoc data analysis customized with multilevel hierarchical logger tree</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Rajeeta</given-name>
<middle-name>Lalji</middle-name>
<family-name>Shah</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Lorin</given-name>
<middle-name>Evan</middle-name>
<family-name>Ullmann</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, program, and system for dynamically configuring logging elements in a computer system are provided. The invention comprises a logging subsystem within the computer system, wherein the subsystem contains a plurality of logging elements which record events within the computer system. Inheritance relationships are established for the logging elements, which allows the logging elements to be configured either individually or as a group. The logging elements are then configured to record specified types of events and send the logging data of the events to specified locations within the computer system. In one embodiment of the present invention, the computer system is one of a plurality of nodes in a distributed computer network, wherein logging elements within a one network node can be remotely configured from a another node in the network. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is related to co-pending U.S. patent application Ser. No. ______ (Client Docket No. AUS920010496US1) entitled &ldquo;METHOD AND APPARATUS IN INFORMATION MANAGEMENT SYSTEM PROVIDING ADDING DATA AND BOOKMARKS TO EXISTING INFORMATION LOGGED&rdquo;, to co-pending U.S. patent application Ser. No. ______ (Client Docket No. AUS920010501US1) entitled &ldquo;METHODS AND APPARATUS IN A LOGGING SYSTEM FOR THE TRACKING OF TASKS SOLELY BASED ON ON FUNCTION FOR DATA ANALYSIS&rdquo;, to co-pending U.S. patent application Ser. No. ______ (Client Docket No. AUS920010549US1) entitled &ldquo;METHODS AND APPARATUS IN A LOGGING SYSTEM FOR THE ADAPTIVE HANDLER REPLACEMENT IN ORDER TO RECEIVE PRE-BOOT INFORMATION&rdquo; filed even date herewith. The content of the above mentioned commonly assigned, co-pending U. S. patent applications are hereby incorporated herein by reference for all purposes. </paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates generally to computer network environments, and more specifically to logging services in distributed, multilevel architectures. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Logging is the process of recording system events so that those actions can be reviewed later. Handlers are software objects that direct messages recorded by a logger to a destination. Messages can be directed to a file, a database, a console screen, or to other destinations. Remote logging for distributed computer networks is available for large scale installations. However, current remote logging systems have several drawbacks. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Typically, software components running on remote machines cannot be reconfigured remotely by a system administrator. In addition, current remote logging approaches use a single level hierarchy of logging across multiple machines (i.e. Object Request Brokers (ORBs)). Therefore, all machines receive the same logging handlers and the same logging configuration. No inheritance exists between logging levels. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Current approaches also lack the ability to customize differently each component logging across ORBs. Messages are not in real time, but rather after-the-fact, since Operating System (OS) commands are used against OS specific resources. Methods to stop logging a file (backup) are done manually through a concatenate (Cat) command. Current systems also have inadequate security due to all the logging being sent, regardless of customer the customer viewing the log (multi-customer problems). </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Therefore it would be desirable to have a remote logging service that allows remote configuration of logging elements within ORBs and across multiple ORBs. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention provides a method, program, and system for dynamically configuring logging elements in a computer system. The invention comprises a logging subsystem within the computer system, wherein the subsystem contains a plurality of logging elements which record events within the computer system. Inheritance relationships are established for the logging elements, which allows the logging elements to be configured either individually or as a group. The logging elements are then configured to record specified types of events and send the logging data of the events to specified locations within the computer system. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In one embodiment of the present invention, the computer system is one of a plurality of nodes in a distributed computer network, wherein logging elements within a one network node can be remotely configured from a another node in the network. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram illustrating a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a schematic diagram illustrating a logging subsystem in accordance with the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a schematic diagram illustrating local logging architecture in accordance with the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a diagram illustrating the structure of logging configuration in accordance with the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a schematic diagram illustrating a remote handler in accordance with the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> depicts a schematic diagrams illustrating the use of multiple logging services in accordance with the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9B</cross-reference> depicts an exploded view of the ORB/Logging Service illustrated in <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts a flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference>; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> depicts a schematic diagram illustrating layered logging servers in accordance with the present invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> depicts an exploded view of the ORB/Logging Service illustrated in <cross-reference target="DRAWINGS">FIG. 11A</cross-reference>; and </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts a flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> in accordance with the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the depicted example, a server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> also are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an eServer pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) or Linux operating systems. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, CD-ROM drive <highlight><bold>330</bold></highlight>, and DVD drive <highlight><bold>332</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The present invention provides a logging system with distributed, multilevel architecture which allows remote control of logging elements. The present invention also allows the logging system to be used standalone or in a distributed environment. The logging system allows a system to produce large amounts of data for local consumption, as opposed to a small amount of data for storage in a central remote repository. Dual output is easily configured for an administrator wishing to see logs on the console, in multiple files and in a database for future queries. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Furthermore, the present invention provides for the creation and logging of a taskID. This allows a component that is logging to create a task identification (TaskID) which follows this logging task (which may flow across multiple components and ORBs) until completion. The TaskID is passed in the thread context in local methods and in the message context in remote method invocations. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> schematic diagram illustrating a logging subsystem is depicted in accordance with the present invention. The logging subsystem <highlight><bold>400</bold></highlight> uses several objects to record system events. These objects include loggers <highlight><bold>415</bold></highlight>, handlers <highlight><bold>424</bold></highlight>, filters <highlight><bold>420</bold></highlight> (also referred to as masks), and formatters <highlight><bold>418</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Loggers are software objects that record events that occur while a component is operating. The Logging subsystem supports two types of loggers: message loggers <highlight><bold>416</bold></highlight> and trace loggers <highlight><bold>417</bold></highlight>. Message loggers <highlight><bold>416</bold></highlight> are used to record textual messages from a component. These messages are internationalized for individual locales. Trace loggers <highlight><bold>417</bold></highlight> are used to capture information about the operating environment when component code fails to operate as intended. Support personnel use the information captured by trace loggers <highlight><bold>417</bold></highlight> to trace a problem to its source or to determine why an error occurred. Generally, this information is not enabled by default. Because trace messages are intended for support personnel, they are generally written to a file that can be viewed during a postmortem examination. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Handlers <highlight><bold>424</bold></highlight> are software objects that direct messages recorded by a logger to a destination. Messages can be directed to a file, a database, a console screen, or to other destinations. Handlers are associated with loggers to send information recorded by a logger to the desired destination. The present invention provides the configuration definitions for the following types of handlers: </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> Console Handler <highlight><bold>426</bold></highlight> writes log records to a console. </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> File Handler <highlight><bold>428</bold></highlight> writes log records to a file. </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> Multifile Handler <highlight><bold>430</bold></highlight> writes log records to a rotating set of log files. </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> Serial File Handler <highlight><bold>432</bold></highlight> writes log records to files as serialized objects. </paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> Database Handler <highlight><bold>434</bold></highlight> writes log records to a database. </paragraph>
<paragraph id="P-0049" lvl="2"><number>&lsqb;0049&rsqb;</number> Server Handler <highlight><bold>436</bold></highlight> sends log records in batch mode to a remote logging server for processing. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Filters <highlight><bold>420</bold></highlight> can be applied to loggers, to handlers, or to both loggers and handlers. When applied to a logger, the filter determines which types of message and trace records the logger processes. When applied to a handler, the filter determines which types of message and trace records the handler sends to a destination. Filter <highlight><bold>420</bold></highlight> works by comparing a log record type against a set of criteria, or a query, contained within the filter <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Formatters <highlight><bold>418</bold></highlight> are software objects used to format the output of information contained in log records. In general, formatters <highlight><bold>418</bold></highlight> can be used to tailor things like date and time stamps to local conventions. A single formatter can be used by multiple handlers. Having numerous loggers, handlers, filters, and formatters can cause an undue amount of logging administration to perform. To reduce the administration burden, one can create &ldquo;groups&rdquo;. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> A group contains loggers, handlers, filters, or formatters that have common properties. By creating groups, a newly created logger, handler, filter, or formatter with unset properties can inherit values for those properties from the group. If a logger, handler, filter, or formatter belongs to a group and its properties are updated, all other loggers, handlers, filters or formatters in that group will also have that property updated. This eliminates the need for manually updating individual logger, handler, filter, or formatter properties. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The Log Manager <highlight><bold>422</bold></highlight> is the heart of the logging system. It creates and configures all of the previously discussed logging objects. It responds to component and application requests to send log messages to handlers and formatters. Each ORB has a log manager associated with it. The handlers may be local or remote with respect to the originating application. It is useful at times to refer to loggers, handlers, filters, and formatters using a generic term that includes one or more of these software objects. The term &ldquo;logging element&rdquo; will be used when a reference to a particular kind of logging object, such as a formatter object, is not necessary. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> schematic diagram illustrating local logging architecture is depicted in accordance with the present invention. In a local logging environment, all components and logging elements are under the control of a single ORB <highlight><bold>500</bold></highlight>. It is recommended that filters be applied to loggers because this keeps the configuration simple and prevents unused data from being passed to handlers. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The present invention can be implemented in either standalone or distributed mode. When operating in standalone mode (or in small installations that do not require scaling), logging is run according to default configuration settings. When operating in distributed mode, the system requires ORB services to allow the distributed logging elements to communicate with each other. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> For standalone operations, properties files are created by a configuration utility that stores logging configuration information in a default directory. The default configuration creates handlers that direct message output to a local console and file. The default handlers direct trace output to the file. If the defaults are satisfactory, there is no need to create a handler. When running in standalone, the logging utility needs know two system properties: the location of the root directory for the configuration files, and where the logging output is to be written. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> All logging elements in every ORB, and the Logging Service component itself, can be configured dynamically using a logging command line interface (CLI) or a graphical user interface (GUI) console. The logging CLI allows the user to manipulate logging elements from the command line. A Log Manager responds to user requests for logging objects using the logging CLI. When users want to manipulate a logging object, they do so by specifying the name of the object they want to use. The logging subsystem provides handlers that allow one to direct logger output to any number of destinations. Handlers are provided to direct log reports to databases, consoles, log servers, and to a variety of different file types. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The GUI console allows the user to view messages in the desired locale, and find translatable messages based on the language of the user&apos;s locale. For example, a component in the New York region issues a log message destined for a file or console in the Paris region. The logger in the New York region logs a message and sends the message to the handler and formatter in Paris. The formatter in Paris looks for a property file (locale(fr)) with French messages. The message is then extracted from the French property file by the message formatter and displayed on the Paris console or written to the Paris log file. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> diagram illustrating the structure of logging configuration is depicted in accordance with the present invention. All the logging elements utilize coalescing (or inheritance) to set property values. This means that there is a parent and child relationship. If a property on a child is not set, then it inherits that property from the parent. For example, <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows that the trace node <highlight><bold>601</bold></highlight> has the property &ldquo;isLogging-false&rdquo;. Both of its children, the log <highlight><bold>602</bold></highlight> and directory <highlight><bold>603</bold></highlight>, inherit this property. However, this property in the log group is overridden by setting it to &ldquo;true&rdquo;. Therefore, the child log <highlight><bold>602</bold></highlight>, managerTrace <highlight><bold>604</bold></highlight>, has the property &ldquo;isLogging&equals;true&rdquo;. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The directory group does not override this property itself. This is because directory <highlight><bold>603</bold></highlight> has a number of trace loggers <highlight><bold>605</bold></highlight> and <highlight><bold>606</bold></highlight>, and they generate a large amount of trace data. Instead, the individual directory trace loggers, dirservice <highlight><bold>605</bold></highlight> and slashtrace <highlight><bold>606</bold></highlight>, have the property &ldquo;isLogging&equals;true&rdquo;. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> By using the coalescing relationship between logging elements, administrators can configure logging elements within an ORB individually or as a group. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In addition to the logging element coalescing, the present invention also provides ORB coalescing, which is used for remote configuration of ORBs during adhoc data analysis, as explained below. ORB coalescing allows administrators to remotely configure the logging elements of a single ORB or the logging elements of all ORB&apos;s in the network. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> schematic diagram illustrating a remote handler is depicted in accordance with the present invention. In a distributed logging environment, components can run in one ORB and the logging elements that process the messages from that component can reside in another ORB. How one distributes logging elements will depend on the complexity of one&apos;s installation and customer requirements. For example, loggers can run in the same ORB as the component that uses them and the handlers that deliver logged messages can reside in distant ORBs. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In the present example, the component <highlight><bold>701</bold></highlight> in the Austin ORB <highlight><bold>700</bold></highlight> can use local logger <highlight><bold>703</bold></highlight> for messages and local logger <highlight><bold>704</bold></highlight> for trace data. Component <highlight><bold>701</bold></highlight> can have the trace data recorded to a local file <highlight><bold>708</bold></highlight> as well as having it sent to the Raleigh ORB <highlight><bold>710</bold></highlight>, which serves as a central location in this example. For simplicity of illustration, filters are not shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is depicted in accordance with the present invention. Component <highlight><bold>701</bold></highlight> obtains a trace logger <highlight><bold>704</bold></highlight> from Log Manager Factory (step <highlight><bold>801</bold></highlight>). The Distributed Log Manager <highlight><bold>702</bold></highlight> configures the trace logger <highlight><bold>704</bold></highlight> by attaching a local file handler <highlight><bold>706</bold></highlight> on Austin ORB <highlight><bold>700</bold></highlight> and a proxy of the remote handler <highlight><bold>715</bold></highlight> on Raleigh ORB <highlight><bold>710</bold></highlight> (step <highlight><bold>802</bold></highlight>). Component <highlight><bold>701</bold></highlight> then logs a trace record/event using the trace logger <highlight><bold>704</bold></highlight> (step <highlight><bold>803</bold></highlight>). The local file handler <highlight><bold>706</bold></highlight> gets the log record and writes it out using the formatter <highlight><bold>707</bold></highlight> that is attached to it (step <highlight><bold>804</bold></highlight>). The remote handler <highlight><bold>715</bold></highlight> also gets the log record and writes it to the local file <highlight><bold>718</bold></highlight> in the Raleigh ORB <highlight><bold>720</bold></highlight> using the formatter <highlight><bold>717</bold></highlight> attached to it (step <highlight><bold>805</bold></highlight>). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Systems administrators can change the association between loggers and handlers and between formatters and handlers using a CLI or GUI console. For example, an administrator could attach a local console handler or file handler to the trace logger and also attach to handlers in a remote ORB to enable logging of trace data to two destinations. This process parallels the configuration tree depicted in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the trace logger <highlight><bold>606</bold></highlight>, for example, can be reconfigured without having to reconfigure the parent trace node <highlight><bold>601</bold></highlight>, which would reconfigure all of the other child nodes <highlight><bold>602</bold></highlight>-<highlight><bold>605</bold></highlight>. In this way, the log group property can be overridden directly at logger <highlight><bold>606</bold></highlight>, without affecting the property for the rest of the log group. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, an administrator at the Raleigh ORB <highlight><bold>710</bold></highlight> can use a similar process when performing adhoc analysis of trace data from the Austin ORB <highlight><bold>700</bold></highlight>. Using the remote handler <highlight><bold>715</bold></highlight>, the administrator can analyze trace data from Austin ORB <highlight><bold>700</bold></highlight> and then remotely reconfigure the Austin ORB <highlight><bold>700</bold></highlight> without having to reconfigure other child ORBs. In this way, the system administrator can debug remote ORBs as needed (adhoc) without having to reconfigure the entire ORB network. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> A message logger could also be similarly configured, but for simplicity of illustration, only the trace logger is depicted as logging trace data to two locations. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference>, schematic diagrams illustrating the use of multiple logging services are depicted in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 9B</cross-reference> is an exploded view of the ORB/Logging Service illustrated in <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. A single Logging Service could be sufficient for small installations with perhaps a hundred or so servers. However, it would not scale for a large system containing thousands of nodes. In this case, it would be better to deploy multiple instances of the Logging Service. The multiple Logging Services can send their output to a single logging database. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The term Logging Service refers to the environment in which server loggers and server handlers pass batched events to another log server for processing. One can centralize one&apos;s logging under a single operator, which allows system administrators to retrieve data from across a highly distributed network and view it in one place. Alternatively, if one&apos;s installation includes a remote branch location that is geographically separated from the installation depot, then having a local operator monitor logging information is probably advisable. As one&apos;s installation grows, the need for multiple Logging Services becomes more acute. One might want to deploy multiple instances of the Logging Service and the logServerHandler. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The Logging Service and the logServerHandler can be used to put messages from different ORBs into a single (remote) log. Trace data should not be put into this log since it will degrade the performance of the system. One should use local logs to collect trace data. Every ORB must use a local logServerHandler to send messages to a Logging Service. When a remote exception occurs, the logServerHandler will write to a local serialized file until it can write again to a Logging Service. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> One should use the Logging Service in these situations: </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> If it is desirable to have all of the log messages collected in a logging database. For instance, if one wants to keep a record of all the messages from all the ORBs across the system in a single place, then one should use the Logging Service. </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> Depending on the size of one&apos;s installation and how many messages are produced, one might need multiple instances of the Logging Service to be deployed. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> This approach may be useful in very large installations, for example, in an ISP environment or in a large corporation with central IT facilities. In such an environment, the customer may want to enable logging at the local level, yet forward message and trace data to a central storage repository for possible evaluation or trend analysis. The Logging Subsystem provides a server handlers to accomplish this function. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> is depicted in accordance with the present invention. Component <highlight><bold>901</bold></highlight> obtains a message logger <highlight><bold>903</bold></highlight> from Log Manager Factory (step <highlight><bold>1001</bold></highlight>). The Distributed Log Manager <highlight><bold>906</bold></highlight> configures the message logger <highlight><bold>903</bold></highlight> by attaching a local server handler <highlight><bold>905</bold></highlight> (step <highlight><bold>1002</bold></highlight>). The server handler <highlight><bold>905</bold></highlight> gets a proxy to a remote logging server <highlight><bold>920</bold></highlight> (step <highlight><bold>1003</bold></highlight>). Component <highlight><bold>901</bold></highlight> logs a message record/event using message logger <highlight><bold>903</bold></highlight> (step <highlight><bold>1004</bold></highlight>). The local server handler <highlight><bold>905</bold></highlight> buffers the log records, and after it has queued them, sends them in batch to the logging server <highlight><bold>920</bold></highlight> (step <highlight><bold>1005</bold></highlight>). Logging server <highlight><bold>920</bold></highlight> has a server logger <highlight><bold>921</bold></highlight> with three types of handlers attached to it: a database handler <highlight><bold>922</bold></highlight>, a console handler <highlight><bold>923</bold></highlight>, and a file handler <highlight><bold>924</bold></highlight>. The server logger <highlight><bold>921</bold></highlight> sends the log records to all three attached handlers <highlight><bold>922</bold></highlight>-<highlight><bold>924</bold></highlight> (step <highlight><bold>1006</bold></highlight>). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The server handlers perform error processing to accommodate things like timeouts and handle stale proxies. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, schematic diagrams illustrating layered logging servers are depicted in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> depicts an exploded view of the ORB/Logging Service illustrated in <cross-reference target="DRAWINGS">FIG. 11A</cross-reference>. <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> show how logging servers can be used in a layered fashion to forward events in bulk to a remote logging server for processing. Each level successively batches messages from subordinate levels to other machines. This reduces the incidence of bottlenecks at any one logging server. For example, assuming logging server <highlight><bold>1120</bold></highlight> is the only logging server for the network, as the number of ORB increases, logging server <highlight><bold>1120</bold></highlight> might easily become overloaded with message data from the ORBS, which would reduce system performance. By adding additional logging server <highlight><bold>1130</bold></highlight> to level <highlight><bold>1</bold></highlight>, the information traffic can be divided, thus reducing the processing load on any one logging server. The logging servers <highlight><bold>1120</bold></highlight> and <highlight><bold>1130</bold></highlight> on level 1 can then batch their respective log files and convey them to a level 2 logging server. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 12, a</cross-reference> flowchart illustrating the functional relationship between the components illustrated in <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> is depicted in accordance with the present invention. Component <highlight><bold>1101</bold></highlight> obtains a message logger <highlight><bold>1103</bold></highlight> from Log Manager Factory (step <highlight><bold>1201</bold></highlight>). The Distributed Log Manager <highlight><bold>1106</bold></highlight> configures the message logger <highlight><bold>1103</bold></highlight> by attaching a local server handler <highlight><bold>1105</bold></highlight> (step <highlight><bold>1202</bold></highlight>). The server handler <highlight><bold>1105</bold></highlight> gets a proxy to a level 1 remote logging server <highlight><bold>1120</bold></highlight> (step <highlight><bold>1203</bold></highlight>). Component <highlight><bold>1101</bold></highlight> logs a message record/event using the message logger <highlight><bold>1103</bold></highlight> (step <highlight><bold>1204</bold></highlight>). The local server handler <highlight><bold>1105</bold></highlight> buffers the log records and, after it has queued them, send them in batch to the logging server <highlight><bold>1120</bold></highlight> (step <highlight><bold>1205</bold></highlight>). </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The logging server <highlight><bold>1120</bold></highlight> has a server logger <highlight><bold>1121</bold></highlight> attached to a local server handler <highlight><bold>1122</bold></highlight>. The level 1 local server handler <highlight><bold>1122</bold></highlight> gets a proxy to a level 2 remote logging server <highlight><bold>1140</bold></highlight> (step <highlight><bold>1206</bold></highlight>), and then sends the log records to logging server <highlight><bold>1140</bold></highlight> (step <highlight><bold>1207</bold></highlight>). The level 2 logging server <highlight><bold>1140</bold></highlight> has its own local server logger <highlight><bold>1141</bold></highlight> which is attached to three handlers: a file handler <highlight><bold>1142</bold></highlight>, a console handler <highlight><bold>1143</bold></highlight>, and a database handler <highlight><bold>1144</bold></highlight>. The level 2 server logger <highlight><bold>1141</bold></highlight> sends the log records to all three handlers <highlight><bold>1142</bold></highlight>-<highlight><bold>1144</bold></highlight> (step <highlight><bold>1208</bold></highlight>). </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for dynamically configuring logging elements in a computer system, the method comprising: 
<claim-text>initializing a logging subsystem within the computer system, the logging subsystem comprising a plurality of logging elements which record events within the computer system; </claim-text>
<claim-text>establishing inheritance relationships for properties of the logging elements within the logging subsystem, wherein the inheritance relationships allow the logging elements to be configured both individually and as a group; and </claim-text>
<claim-text>configuring the logging elements to record specified types of events and send the logging data of the events to specified locations within the computer system; </claim-text>
<claim-text>wherein the computer system is one of a plurality of nodes in a distributed computer network, wherein logging elements within a first node in the computer network can be remotely configured from a second node in the computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the logging elements comprise at least one of the following: 
<claim-text>message logger; </claim-text>
<claim-text>trace logger; </claim-text>
<claim-text>logging handler; </claim-text>
<claim-text>logging formatter; </claim-text>
<claim-text>logging filter; and </claim-text>
<claim-text>log manager. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising reconfiguring an individual logging element to send logging data to a new location, in addition to the location specified in the original configuration of that logging element. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising creating a taskID which follows a logging task across multiple components until completion. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the logging elements are configured by means of a command line interface. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the logging elements are configured by means of a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising remotely reconfiguring a logging element to send logging data to at least one other node in the distributed computer network, in addition to the location specified in the original configuration of that logging element. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising a taskID which follows a logging task across multiple nodes until completion </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>establishing inheritance relationships between nodes in the distributed computer network, wherein the inheritance relationships allows logging elements to be remotely configured both within individual nodes and across multiple nodes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>configuring logging elements within a plurality of nodes to send logging data to a designated logging server which places the logging data into a single logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising: 
<claim-text>configuring a plurality of logging servers to send the data in their respective logging databases to a second tier logging server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A computer program product in a computer readable medium, for dynamically configuring logging elements in a computer system, the computer program product comprising: 
<claim-text>instructions for initializing a logging subsystem within the computer system, the logging subsystem comprising a plurality of logging elements which record events within the computer system; </claim-text>
<claim-text>instructions for establishing inheritance relationships for properties of the logging elements within the logging subsystem, wherein the inheritance relationships allow the logging elements to be configured both individually and as a group; and </claim-text>
<claim-text>instructions for configuring the logging elements to record specified types of events and send the logging data of the events to specified locations within the computer system; </claim-text>
<claim-text>wherein the computer system is one of a plurality of nodes in a distributed computer network, wherein logging elements within a first node in the computer network can be remotely configured from a second node in the computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the logging elements comprise at least one of the following: 
<claim-text>message logger; </claim-text>
<claim-text>trace logger; </claim-text>
<claim-text>logging handler; </claim-text>
<claim-text>logging formatter; </claim-text>
<claim-text>logging filter; and </claim-text>
<claim-text>log manager. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising instructions for reconfiguring an individual logging element to send logging data to a new location, in addition to the location specified in the original configuration of that logging element. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising instructions for creating a taskID which follows a logging task across multiple components until completion. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the logging elements are configured by means of a command line interface. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the logging elements are configured by means of a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising instructions for remotely reconfiguring a logging element to send logging data to at least one other node in the distributed computer network, in addition to the location specified in the original configuration of that logging element. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising a taskID which follows a logging task across multiple nodes until completion </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising: 
<claim-text>instructions for establishing inheritance relationships between nodes in the distributed computer network, wherein the inheritance relationships allows logging elements to be remotely configured both within individual nodes and across multiple nodes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising: 
<claim-text>instructions for configuring logging elements within a plurality of nodes to send logging data to a designated logging server which places the logging data into a single logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising: 
<claim-text>instructions for configuring a plurality of logging servers to send the data in their respective logging databases to a second tier logging server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A system for dynamically configuring logging elements in a computer system, the system comprising: 
<claim-text>a logging subsystem within the computer system, the logging subsystem comprising a plurality of logging elements which record events within the computer system; </claim-text>
<claim-text>a register which establishes inheritance relationships for properties of the logging elements within the logging subsystem, wherein the inheritance relationships allow the logging elements to be configured both individually and as a group; and </claim-text>
<claim-text>a configuring component which configures the logging elements to record specified types of events and send the logging data of the events to specified locations within the computer system; </claim-text>
<claim-text>wherein the computer system is one of a plurality of nodes in a distributed computer network, wherein logging elements within a first node in the computer network can be remotely configured from a second node in the computer network.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005173A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005173A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005173A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005173A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005173A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005173A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005173A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005173A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005173A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
