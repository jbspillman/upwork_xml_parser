<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005297A1-20030102-D00000.TIF SYSTEM "US20030005297A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00001.TIF SYSTEM "US20030005297A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00002.TIF SYSTEM "US20030005297A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00003.TIF SYSTEM "US20030005297A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00004.TIF SYSTEM "US20030005297A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00005.TIF SYSTEM "US20030005297A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00006.TIF SYSTEM "US20030005297A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00007.TIF SYSTEM "US20030005297A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005297A1-20030102-D00008.TIF SYSTEM "US20030005297A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005297</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895230</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>168000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and system to integrate existing user and group definitions in a database server with heterogeneous application servers</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Larry</given-name>
<middle-name>George</middle-name>
<family-name>Fichtner</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Dah-Haur</given-name>
<family-name>Lin</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and system for sharing existing user and group registry information between heterogeneous application servers is provided. The method and system make use of an adapter that communicates with each registry associated with each application server through a registry communication mechanism. In a preferred embodiment, the present invention provides an additional application-specific database to protect application-specific data that is required for each application server&apos;s operation but is not part of an existing database registry. Both the application-specific databases and existing user and group definitions in a user and group registry form a new registry abstraction which is required for each application server. As a result, each application server automatically shares user and group definitions with the existing database server. Furthermore, both the database server and each application server maintain a centralized user and group management model across different application domains. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is related to co-pending U.S. patent application Ser. No. ______ (Client Docket No. AUS920010373US1) entitled &ldquo;USER REGISTRY ADAPTER FRAMEWORK&rdquo; filed even date herewith. The content of the above mentioned commonly assigned, co-pending U.S. patent application is hereby incorporated herein by reference for all purposes.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention is directed to an improved data processing system. More specifically, the present invention is directed to a method and system to share existing user and group definitions in a registry between heterogeneous application servers and allowing heterogeneous applications to access the same user and group definitions amongst the heterogeneous application servers. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The Internet, also referred to as an &ldquo;internetwork&rdquo;, is a set of computer networks, possibly dissimilar, joined together by means of gateways that handle data transfer and the conversion of messages from a protocol of the sending network to a protocol used by the receiving network. When capitalized, the term &ldquo;Internet&rdquo; refers to the collection of networks and gateways that use the TCP/IP suite of protocols. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The Internet has become a cultural fixture as a source of both information and entertainment. Many businesses are creating Internet sites as an integral part of their marketing efforts, informing consumers of the products or services offered by the business or providing other information seeking to engender brand loyalty. Many federal, state, and local government agencies are also employing Internet sites for informational purposes, particularly agencies which must interact with virtually all segments of society such as the Internal Revenue Service and secretaries of state. Providing informational guides and/or searchable databases of online public records may reduce operating costs. Further, the Internet is becoming increasingly popular as a medium for commercial transactions. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Currently, the most commonly employed method of transferring data over the Internet is to employ the World Wide Web environment, also called simply &ldquo;the Web&rdquo;. Other Internet resources exist for transferring information, such as File Transfer Protocol (FTP) and Gopher, but have not achieved the popularity of the Web. In the Web environment, servers and clients effect data transaction using the Hypertext Transfer Protocol (HTTP), a known protocol for handling the transfer of various data files (e.g., text, still graphic images, audio, motion video, etc.). The information in various data files is formatted for presentation to a user by a standard page description language, the Hypertext Markup Language (HTML). In addition to basic presentation formatting, HTML allows developers to specify &ldquo;links&rdquo; to other Web resources identified by a Uniform Resource Locator (URL). A URL is a special syntax identifier defining a communications path to specific information. Each logical block of information accessible to a client, called a &ldquo;page&rdquo; or a &ldquo;Web page&rdquo;, is identified by a URL. The URL provides a universal, consistent method for finding and accessing this information, not necessarily for the user, but mostly for the user&apos;s Web &ldquo;browser&rdquo;. A browser is a program capable of submitting a request for information identified by an identifier, such as, for example, a URL. A user may enter a domain name through a graphical user interface (GUI) for the browser to access a source of content. The domain name is automatically converted to the Internet Protocol (IP) address by a domain name system (DNS), which is a service that translates the symbolic name entered by the user into an IP address by looking up the domain name in a database. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The Internet also is widely used to transfer applications to users using browsers. With respect to commerce on the Web, individual consumers and business use the Web to purchase various goods and services. In offering goods and services, some companies offer goods and services solely on the Web while others use the Web to extend their reach. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Some Internet-based security systems provide an authorization management solution for corporations to enforce end-to-end protection on web based resources. With end-to-end protection, each user&apos;s access to individual web resources can be controlled by a policy or an Access Control List (ACL) attached to those resources independently. These prior art systems enable a user to create a single-sign-on to heterogeneous backend servers, such as, for example, IBM HTTP server and Microsoft Internet Information Server (IIS), and access different web resources based on an individual user&apos;s privilege. On the other hand, other systems, such as, for example, a Domino database system provides a distributed client/server database application that enables users to organize, process, track and share information. With later enhancements, a Domino database server also provides an hypertext transfer protocol (HTTP) server, a lightweight directory access protocol (LDAP) server and a Java development environment, these systems have become a powerful and flexible application which advances web-based collaboration throughout a customer&apos;s organization. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> However, these prior art systems do not provide an integration mechanism between the two systems. While these systems are powerful in their own right, a means of integrating the two systems so that these systems share user and group registry information is desirable. In particular, by integrating these two separate systems, not only would this allow users to obtain features of each system, but would also allow users to benefit from features of both systems simultaneously that enables users to organize, process, track, and share information. Therefore, it would be beneficial to have a method and system for sharing user and group registry information between heterogeneous servers by integrating the heterogeneous servers so that each server can access the other server&apos;s registry information. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The present invention provides a method and system for sharing existing user and group registry information between heterogeneous application servers. The method and system make use of an adapter that communicates with each registry associated with each application server through a registry communication mechanism. In a preferred embodiment, the present invention provides an additional application-specific database to protect application-specific data that is required for each application server&apos;s operation but is not part of an existing database registry. Both the application-specific databases and existing user and group definitions in a user and group registry form a new registry abstraction which is required for each application server. As a result, each application server automatically shares user and group definitions with the existing database server. Furthermore, both the database server and each application server maintain a centralized user and group management model across different application domains. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an exemplary diagram of a distributed data processing system in accordance with the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an exemplary diagram of a server device in accordance with the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an exemplary diagram of a client device in accordance with the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example of an integration between servers in accordance with the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a graphical user interface illustrating a process of adding an application-specific attribute to existing user and group definitions of a database server in which the application is enabled to access both a registry of the database server and a application-specific database located within the database server in accordance with the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a graphical user interface for design of an application-specific meta-data database in accordance with the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a graphical user interface containing examples of field attributes contained in a URAF user object in accordance with the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an illustration of creating and enabling users and groups within a database server in accordance with the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an illustration of performing a single-sign-on in an integrated system in accordance with the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart illustrating a flow of a single-sign-on operation in an integrated system in accordance with the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart illustrating disabling of a user and a group from an integrated system in accordance with the present invention; and </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flowchart illustrating removal of a user and a group from an integrated system in accordance with the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The present invention provides a method and system of porting applications to a plurality of platforms. Such porting may be performed in a stand alone computer system or may be distributed across a number of different computing devices in a distributed data processing system. As such, a brief explanation of the distributed data processing system, server devices and client devices is provided to aid in understanding the environments in which the present invention may be implemented. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the depicted example, server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI local bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI local buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an IBM e-Server pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system or LINUX operating system. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, and CD-ROM drive <highlight><bold>330</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows <highlight><bold>2000</bold></highlight>, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide nonvolatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> As mentioned above, the present invention provides a method for sharing user and group registry information between heterogeneous application servers. When sharing user and group registry information on heterogeneous servers, it would be most efficient to be able to share the same user and group registry information across all applicable servers. By using the present invention, features of all the heterogeneous application servers are combined while allowing information specific to each server to be protected from users which are not authorized to access to the data amongst different application servers. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> One way in which to provide such ability is to have an adapter that can be used to integrate the heterogeneous application servers in a way in which each server sees the other server as part of an overall system. The present invention provides such an integration function and a method for using this integration function to facilitate the sharing of user and group registry information across the adapter. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example of an integration between servers in accordance with the present invention. A goal for integration is to allow a user of a first server to perform a Web single-sign-on to various backend HTTP servers through application <highlight><bold>401</bold></highlight>. By using this process, an administrator may be able to set access policy to resources in a common object name space for users of database server <highlight><bold>409</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> From a user registry management perspective, there may be two scenarios to create a new user and group in integrated environment <highlight><bold>400</bold></highlight>. The first scenario is to create a new user and group during the creation of application <highlight><bold>401</bold></highlight>. For newly created users and groups after configuration of application <highlight><bold>401</bold></highlight>, all user and group objects will be created directly into database registry <highlight><bold>410</bold></highlight>. For existing user and groups created in database registry <highlight><bold>410</bold></highlight> by database server <highlight><bold>409</bold></highlight>, these users and groups may be imported and thereby allowing these existing user and groups to become users and groups of application <highlight><bold>401</bold></highlight>. For either newly created users and groups and existing imported users and groups, application <highlight><bold>401</bold></highlight> and database server <highlight><bold>409</bold></highlight> may share the same user and group definition in database registry <highlight><bold>410</bold></highlight>. Secondly, through an &ldquo;import&rdquo; operation provided by a management utility program, for example, management server <highlight><bold>402</bold></highlight>, in application <highlight><bold>401</bold></highlight>, existing users and groups of database server <highlight><bold>409</bold></highlight> may become the users and groups of application <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> From a perspective of database server <highlight><bold>409</bold></highlight>, the existing users and groups of server <highlight><bold>409</bold></highlight> can be highlighted through a specific attribute of application <highlight><bold>401</bold></highlight> which may be defined in user and group definitions in database registry <highlight><bold>410</bold></highlight>. An example of a specific attribute of application <highlight><bold>401</bold></highlight> may be a hidden &ldquo;ApplicationEnabled&rdquo; field added in user and group documents in, for example, a &ldquo;Domino&rdquo; Public Address Book (PAB) database. In a &ldquo;Domino&rdquo; server, the Public Address Book database is the &ldquo;Domino&rdquo; server&apos;s user registry which is located within the &ldquo;Domino&rdquo; server. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In an alternate embodiment, an administrator of database server <highlight><bold>409</bold></highlight> may, based on a value within the &ldquo;ApplicationEnabled&rdquo; field, create an associated representation field in both the user and group form, which is the format of the user and group definition in database registry <highlight><bold>410</bold></highlight>. By adding this representation, the definition of users and groups will demonstrate an association between database server <highlight><bold>409</bold></highlight> and application <highlight><bold>401</bold></highlight> for each user and group though a graphical user interface (GUI) associated with database server <highlight><bold>409</bold></highlight>. This graphical user interface is shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. An example of this GUI shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> displays a &ldquo;Domino&rdquo; user being enabled to also become a &ldquo;Policy Director&rdquo; application user using a &ldquo;PDEnabled&rdquo; attribute field. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> For application <highlight><bold>401</bold></highlight>, both newly created users and groups and imported users and groups may appear on a management console for application <highlight><bold>401</bold></highlight> to allow the administrator to perform access policy administration tasks on the common object space for backend server resources in servers <highlight><bold>416</bold></highlight>, <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight>. Furthermore, the administrator may also set up a single-sign-on credential <highlight><bold>428</bold></highlight> for each user of application <highlight><bold>401</bold></highlight> to access various backend HTTP servers <highlight><bold>416</bold></highlight>, <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight>. All operations with a user registry will all be performed through adapter <highlight><bold>406</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Once the administrator has completed all management tasks within server <highlight><bold>409</bold></highlight>, user <highlight><bold>407</bold></highlight> of application <highlight><bold>401</bold></highlight> may then issue a request to access, for example, a Web resource through Web browser <highlight><bold>408</bold></highlight> in one of the resource object spaces of HTTP servers <highlight><bold>416</bold></highlight>, <highlight><bold>418</bold></highlight>, and <highlight><bold>420</bold></highlight>. Upon receiving the request, authentication server <highlight><bold>404</bold></highlight> may prompt a user of database server <highlight><bold>409</bold></highlight> for an Internet identification and password. The Internet identification and password of the user of database server <highlight><bold>409</bold></highlight> is used to authenticate the user to database registry <highlight><bold>410</bold></highlight> associated with database server <highlight><bold>409</bold></highlight> through a logical device address protocol (LDAP). If the authentication is successful, authentication server <highlight><bold>404</bold></highlight> will, based on the user&apos;s unique identity information and group membership identity information contained in the application-specific database <highlight><bold>414</bold></highlight>, form an application <highlight><bold>401</bold></highlight> internal credential for the user. The credential will then be used by application <highlight><bold>401</bold></highlight> to check authorization against the requested resource. In order to guarantee the security of the resource, the user and group data associated with application <highlight><bold>401</bold></highlight> in meta-data database <highlight><bold>414</bold></highlight> are protected against any unauthorized access by servers in application <highlight><bold>401</bold></highlight>. If access is allowed to application <highlight><bold>401</bold></highlight>, authentication server <highlight><bold>404</bold></highlight> will then use a programming interface provided by a URAF adapter to obtain a single-sign-on resource credential for the user and submit the single-sign-on resource credential to one or more backend HTTP servers <highlight><bold>416</bold></highlight>, <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight> for accessing a protected Web resource. Upon completion of the authorization to one or more HTTP backend server <highlight><bold>416</bold></highlight>, <highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight>, the requested Web resource will be transmitted to the user. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a graphical user interface illustrating a process of adding an application-specific attribute to existing user and group definitions of a database server in which the application is enabled to access both a registry of the database server and a application-specific database located within the database server in accordance with the present invention. To allow application <highlight><bold>409</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> to be able to demonstrate an association with database server <highlight><bold>401</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> in defined user and group documents in database registry <highlight><bold>410</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> mechanism is needed in order to indicate the association. This mechanism is supplied by adding a new field, such as, &ldquo;PDEnabled&rdquo; field <highlight><bold>504</bold></highlight> to existing group document <highlight><bold>502</bold></highlight> in database registry <highlight><bold>410</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. A value of &ldquo;PDEnabled&rdquo; field <highlight><bold>504</bold></highlight> may contain either a &ldquo;0&rdquo; value or a &ldquo;1&rdquo; value. A &ldquo;0&rdquo; value may indicate that the association is not enabled and a &ldquo;1&rdquo; value may indicate that the association is enabled. In this example, initial value <highlight><bold>506</bold></highlight> may be set to &ldquo;0&rdquo;. As a default, &ldquo;PDEnabled&rdquo; field <highlight><bold>504</bold></highlight> which is created in group document <highlight><bold>502</bold></highlight> may be only updated by an authorized identity in application <highlight><bold>401</bold></highlight> via a URAF adapter, such as, adapter <highlight><bold>406</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The association field will not be displayed via database server <highlight><bold>409</bold></highlight> native management GUI automatically. However, if an administrator associated with database server <highlight><bold>409</bold></highlight> decides to present this association through a native GUI of server <highlight><bold>409</bold></highlight>, the administrator may accomplish presentation based on &ldquo;PDEnabled&rdquo; field <highlight><bold>504</bold></highlight> to create a presentation field in group form <highlight><bold>502</bold></highlight> in database registry <highlight><bold>410</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an example of a field&apos;s presentation. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> When adding the presentation field, the presentation field will be added to a public access template in database registry <highlight><bold>410</bold></highlight> because most installations of database servers like server <highlight><bold>412</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may retain a public access template as the master design of group document <highlight><bold>502</bold></highlight>. However, if the database server installation no longer uses the public access template to define a design of group document <highlight><bold>502</bold></highlight>, the presentation field may be added directly to group form <highlight><bold>502</bold></highlight>. The presentation field may open, for example, a group&apos;s form definition document and add a new field to the document. The placement of the presentation field may vary depending on the layout of group form <highlight><bold>502</bold></highlight>. When adding the presentation field to, for example, a user form (not shown), the process may be the same as adding the presentation field to group form <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a graphical user interface for design of an application-specific meta-data database in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an example of defining URAF primary data objects using, for example, a &ldquo;Domino&rdquo; server database&apos;s form. In order to store and protect an individual application&apos;s private and critical data in one application, such as application <highlight><bold>401</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, database <highlight><bold>414</bold></highlight> is created within, for example, database server <highlight><bold>409</bold></highlight>. In addition, database <highlight><bold>414</bold></highlight> may be replicated to a client machine in order to take performance advantages. With the database replicated in the client machine locally, constructing an application internal credential will be fast and more efficient. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Database <highlight><bold>414</bold></highlight> may be designed to contain all primary data object definitions in an adapter, such as, adapter <highlight><bold>406</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The primary data objects, in this case, are application specific users, groups, policies, and the like. Some of these primary data objects may have reference fields pointing to user and group documents residing on a registry of the database server, such as, for example PAB database <highlight><bold>410</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In order to protect data within meta-data database <highlight><bold>414</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> from being read by unauthorized users (users not authenticated to access the integrated system), an access control list of meta-data database <highlight><bold>414</bold></highlight> may be set to allow authorized identities of servers in application <highlight><bold>401</bold></highlight> and the administrator of database server <highlight><bold>409</bold></highlight> to perform read/write/modify operations to data within meta-data database <highlight><bold>414</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In an integration environment between heterogeneous application servers, such as application <highlight><bold>401</bold></highlight> and database server <highlight><bold>409</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> URAF programming interface user may have no knowledge about which piece of data is stored in which database in database server <highlight><bold>409</bold></highlight>. All data operations will be shielded by the URAF adapter implementation. As a general rule, all the data that application <highlight><bold>401</bold></highlight> needs, which does not store in database registry <highlight><bold>410</bold></highlight>, will be stored in meta-data database <highlight><bold>414</bold></highlight>. Specifically, user data that is stored and used by application <highlight><bold>401</bold></highlight> in a user&apos;s document may include the user&apos;s first name, middle name, last name, &ldquo;PDEnabled&rdquo; value, application <highlight><bold>401</bold></highlight> user&apos;s sign on identification, and the user&apos;s Internet password. For a group form, such as, group form <highlight><bold>502</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, group data stored in registry database <highlight><bold>410</bold></highlight> may include the value in the &ldquo;PDEnabled&rdquo; field, group membership list and application <highlight><bold>401</bold></highlight>&apos;s group name. Any remaining data associated with a user or group form may be stored in application&apos;s meta-data database <highlight><bold>414</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a graphical user interface containing examples of field attributes contained in a URAF user object in accordance with the present invention. Each URAF primary object may be designed as a form in database registry <highlight><bold>410</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> where each data attribute defined in a primary data object is represented as a &ldquo;field&rdquo; in the form. Data context of each &ldquo;field&rdquo; may be assigned as either one of the default types, such as, text, number and the like, or an equivalent type in database server <highlight><bold>409</bold></highlight>, for example, UserData type to store binary contents), based on the definition of each data attribute. An example of field attributes contained in a URAF_User object is shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. These fields will be used to store real data values. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In a normal database server <highlight><bold>409</bold></highlight> environment, defined forms may be used as an input vehicle to provide data to individual URAF data objects through database server <highlight><bold>409</bold></highlight> native GUI or a Web-based GUI. In the integrated environment between heterogeneous servers, however, usage of a form document to perform data input to the URAF objects is prohibited. The reason that this is prohibited is because many attribute value in each URAF data objects are generated by internal processes in URAF implementation during application <highlight><bold>401</bold></highlight> registry related operations, such as create user and group objects. Therefore, once application <highlight><bold>401</bold></highlight> is being installed in the environment of database server <highlight><bold>409</bold></highlight>, management operations associated with application <highlight><bold>401</bold></highlight> may be required to be initiated from the management console provided by application <highlight><bold>401</bold></highlight> or a management utility. All management operations for application <highlight><bold>401</bold></highlight> are not recommended to be performed from database server <highlight><bold>409</bold></highlight>&apos;s GUI or server <highlight><bold>409</bold></highlight>&apos;s Web based GUI because it may create data inconsistency from a perspective of application <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an illustration of creating and enabling users and groups within a database server in accordance with the present invention. When a command is initiated from management console <highlight><bold>804</bold></highlight> to create a new user and group which does not exist in database registry <highlight><bold>410</bold></highlight>, management server <highlight><bold>402</bold></highlight> in application <highlight><bold>401</bold></highlight> may issue a URAF call, for example, uraf_create_user <highlight><bold>808</bold></highlight> or uraf_create_group <highlight><bold>810</bold></highlight>, to adapter <highlight><bold>406</bold></highlight>. Internally, URAF adapter under the covers will attempt to create a new user and group for database server <highlight><bold>409</bold></highlight> in database registry <highlight><bold>410</bold></highlight> using client <highlight><bold>802</bold></highlight>. For the new user creation, a last name, a middle name, and a first name will be input in a user document and a combination of a user identification and domain name will be added to a &ldquo;short name&rdquo; field, a &ldquo;ApplicationEnabled&rdquo; field of the user document will be updated with the appropriate value as explained in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> and an Internet password of the user will be created in the user document in registry database. The short name, in this case, may be used as the user&apos;s login name for application <highlight><bold>401</bold></highlight>, and the password is database server <highlight><bold>409</bold></highlight>&apos;s Internet password for the user. Similarly, a combination of application <highlight><bold>401</bold></highlight> group identification and domain name may be added to &ldquo;group name&rdquo; field in a newly created group document. With successful creation of database server <highlight><bold>409</bold></highlight> user and group, adapter <highlight><bold>406</bold></highlight> will then create an associated application <highlight><bold>401</bold></highlight> meta-data in database <highlight><bold>414</bold></highlight>. All user and group creation operations may be performed under application <highlight><bold>401</bold></highlight>&apos;s privilege user identity. By using supported commands in management utility <highlight><bold>806</bold></highlight> in application <highlight><bold>401</bold></highlight>, an &ldquo;import&rdquo; command allows an administrator to activate user and group objects created by database server <highlight><bold>409</bold></highlight> in the same registry and be able to become a user and group of application <highlight><bold>401</bold></highlight>. Following a similar concept as with adding new users and groups described above, management utility <highlight><bold>806</bold></highlight> allows an administrator to issue an &ldquo;import&rdquo; command through the utility to enable existing users and groups in database server <highlight><bold>409</bold></highlight> to become users and groups in application <highlight><bold>401</bold></highlight>. Management server <highlight><bold>402</bold></highlight> in application <highlight><bold>401</bold></highlight> will receive an &ldquo;import&rdquo; command issued from management utility <highlight><bold>806</bold></highlight> to call uraf_enable_user or uraf_enable_group applications program interfaces (APIs). During the &ldquo;import&rdquo; operation, adapter <highlight><bold>406</bold></highlight> may first associate the user and group to application <highlight><bold>401</bold></highlight> by setting an &ldquo;ApplicationEnabled&rdquo; field in that user or group document associated with the user or group attempting to be enabled. All application <highlight><bold>401</bold></highlight> meta-data that are associated with the newly enabled user or group will be stored in meta-data database <highlight><bold>414</bold></highlight>. After the user or group is either created or enabled, this user or group will be displayed on the management console of application <highlight><bold>401</bold></highlight> so that an administrator may perform tasks associated with application <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an illustration of performing a single-sign-on in an integrated system in accordance with the present invention. As stated previously, a main focus of the present invention is to provide a database server the capability of performing a Web single-sign-on to various backend HTTP servers via a second application. In order for this function to be enabled, resource credential mapping capability may be used to provide this goal. Essentially, a resource credential will be used to store the user&apos;s identity and password for signing on to a particular backend HTTP server. Resource, ResGroup and ResCredes data objects which are designed in the URAF architecture may allow an administrator to map a specific application&apos;s user identification and password to one or more multiple backend HTTP servers <highlight><bold>910</bold></highlight> that require basic authentication sign-on credentials. With an administrator&apos;s single-sign-on object settings, the Web single-sign-on operation may take place automatically through an authentication component when a user in database server <highlight><bold>409</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, requests access to a Web resource in the authentication server&apos;s, such as authentication server <highlight><bold>404</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, common object spaces. The administrator may set up one URAF_Resource object for each backend HTTP server. Then based on each HTTP backend server&apos;s sign-on credentials for each user or group, the administrator may create an associated URAF_ResCreds to map application <highlight><bold>401</bold></highlight> user identity to the backend HTTP server&apos;s user identity. User identity (UID) ID and authenticated data (AuthnData) attributes may be contained in the URAF_ResCreds object and used to sign on to backend HTTP server <highlight><bold>910</bold></highlight>. Authentication server <highlight><bold>404</bold></highlight> will be based on the location of the web resource requested to find the URAF_ResCreds associated with the user and provide the contents of UID and AuthnData to the backend HTTP server. As a result, the authentication server signs onto backend HTTP server on behalf of the user. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart illustrating a flow of a single-sign-on operation in an integrated system in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a further illustration of a single-sign-on process in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. In this example, the operation starts by a database server issuing a request to access a Web resource in the common resource object space that resides in the authentication server (step <highlight><bold>1002</bold></highlight>). The request to access the Web resource is received by the authentication server (step <highlight><bold>1004</bold></highlight>). The authentication server responds to the request with a HTTP challenge (step <highlight><bold>1006</bold></highlight>). A HTTP challenge is to ask for user&apos;s valid id and password to access to the protected resource. A web browser is triggered to prompt for a user for a userID and a password (step <highlight><bold>1008</bold></highlight>). The userID and the password are received (step <highlight><bold>1010</bold></highlight>). The authentication server then calls a uraf_authenticate_user API to authenticate the user to an application (step <highlight><bold>1012</bold></highlight>). The URAF adapter in the application uses a ldap_bind API to perform a user authentication operation (step <highlight><bold>1014</bold></highlight>). Then a determination is made as to whether or not the user&apos;s URAF_user exists in the application-specific meta-data database (step <highlight><bold>1016</bold></highlight>). If the user&apos;s URAF_user does not exist in the application-specific meta-data database (step <highlight><bold>1016</bold></highlight>:NO), the access request is rejected (step <highlight><bold>1018</bold></highlight>). Then a determination is made as to whether or not another request has been received (step <highlight><bold>1022</bold></highlight>). If another request has been received (step <highlight><bold>1022</bold></highlight>:YES), the operation returns to step <highlight><bold>1004</bold></highlight> in which the request to access a Web resource is received for accessing to a web resource in the common resource object space resided in the authentication server of the application. If another request has not been received (step <highlight><bold>1022</bold></highlight>:NO), the operation then terminates. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Returning to step <highlight><bold>1016</bold></highlight>, if a user&apos;s URAF_user does exist in the application-specific meta-data database (step <highlight><bold>1016</bold></highlight>:YES), an internal credential of the application is constructed using the data in the meta-data database (step <highlight><bold>1020</bold></highlight>). The authentication server of the application then checks the requested Web Resource&apos;s ACL policy against the internal credential of the user to verify if access is allowed for the user (step <highlight><bold>1022</bold></highlight>). The authentication server of the application then finds a location of the requested Web resource based on an object name in the common resource object space (step <highlight><bold>1024</bold></highlight>). The authentication server then calls a uraf_get_rescreds API in the URAF adapter (step <highlight><bold>1026</bold></highlight>). The authentication server retrieves the associated URAF_ResCreds objects for the user from the meta-data database (step <highlight><bold>1028</bold></highlight>). The user&apos;s credentials for the backend server is then forwarded to that backend HTTP server to perform a basic authentication sign-on operation on behalf of the user (step <highlight><bold>1030</bold></highlight>). Then a determination is made as to whether or not another request has been received (step <highlight><bold>1022</bold></highlight>). If another request has been received (step <highlight><bold>1022</bold></highlight>:YES), the operation returns to step <highlight><bold>1004</bold></highlight> in which a request to access a Web resource is received in the authentication server of the application. If another request has not been received (step <highlight><bold>1022</bold></highlight>:NO), the operation then terminates. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart illustrating disabling of a user and a group from an integrated system in accordance with the present invention. In performing the disable operation of a user and a group from the integrated system, this disable operation will clean up all URAF_User and URAF_group objects associated with the user and the group in the meta-data database <highlight><bold>414</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, however the definitions of the user and the group in the database registry <highlight><bold>410</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> will remain unaffected in the database server. After the uraf_disable_user or uraf_disable_group URAF API calls are successful, the users and groups that still exist in the database server will not be able to take advantage of the functions provided by application <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the operation begins by an application issuing a request to disable a user or a group from either a management console or a management utility (step <highlight><bold>1102</bold></highlight>). A user registry adapter framework (URAF) receives the disable request via a uraf_disable_user API for a user or a uraf_disable_group API for a group (step <highlight><bold>1104</bold></highlight>). Under a URAF adapter implementation, the URAF_User object or URAF_group object will be removed from the meta-data database (step <highlight><bold>1106</bold></highlight>). Then an &ldquo;ApplicationEnabled&rdquo; attribute in either a user or a group document in the database registry will be reset to &ldquo;0&rdquo; (step <highlight><bold>1108</bold></highlight>). By setting the attribute to &ldquo;0&rdquo; in the database registry, the user or the group will not be able to access the application. A determination is made as to whether or not another request has been made to disable a user or group (step <highlight><bold>1110</bold></highlight>). If another request has not been made to disable a user or group (step <highlight><bold>1110</bold></highlight>:NO), the operation terminates. If another request has been made to disable a user or group (step <highlight><bold>1110</bold></highlight>:YES), the operation returns to step <highlight><bold>1102</bold></highlight> in which an application issues a request to disable a user or a group from a management console or a management utility. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flowchart illustrating removal of a user and a group from an integrated system in accordance with the present invention. Removal of a user and a group from the integration system will delete both URAF_User and URAF_group objects in a meta-data database and user and group definitions in a database registry. As a result, user and group data will no longer exist in both the application and the database server <highlight><bold>409</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the operation begins by an application issuing a request to delete a user or a group fro a management console or a management utility (step <highlight><bold>1202</bold></highlight>). A user registry adapter framework (URAF) receives the delete request via a uraf_delete_user API for a user or a uraf_delete_group API for a group (step <highlight><bold>1204</bold></highlight>). A URAF_user or a URAF_group are deleted from a meta-data database (step <highlight><bold>1206</bold></highlight>). Data associated with the user or group is then deleted in a database registry (step <highlight><bold>1208</bold></highlight>). A determination is then made as to whether or not there is another request to delete another user or group (step <highlight><bold>1210</bold></highlight>). If there is not another request to delete a user or a group, (step <highlight><bold>1210</bold></highlight>:NO), the operation terminates. If there is another request to delete a user or a group (step <highlight><bold>1210</bold></highlight>:YES), the operation returns to step <highlight><bold>1202</bold></highlight> in which an application issues a request to delete a user or a group from a management console or a management utility. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Therefore, the present invention provides a method for sharing user and group registry information between heterogeneous servers by integrating the heterogeneous servers so that each server can access the other server&apos;s registry information. The present invention integrates multiple systems so that these systems share user and group registry information. By integrating these multiple separate systems, this allows users to obtain features of each system and also allows users to benefit from features of both systems simultaneously that enables users to organize, process, track, and share information. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for integrating a plurality of servers, comprising the steps of: 
<claim-text>transmitting, from a first server within the plurality of servers, an authentication request to authenticate a user in an existing database registry; </claim-text>
<claim-text>responsive to receiving the authentication request to authenticate the user in the existing database registry, constructing, by the first server, a credential of the user; and </claim-text>
<claim-text>accessing a resource from a second server within the plurality of servers based on the credential of the user and a protection policy applied to the resource in an object name space associated with the first server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first server is an authentication server. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second server is an application server. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the plurality of servers are heterogeneous servers. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the application constructs a credential of the user using a user identifier and a user password. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein registry information in the existing database registry includes at least one of user registry information and group registry information. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein integrating the plurality of servers is integrated with the use of an adapter. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the adapter is a user registry adapter. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>storing a definition of the user in a database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>creating an application specific database in the second server; and </claim-text>
<claim-text>protecting application specific data required for an operation of the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the application specific database is a meta-data database. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the resource is a Web resource. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>responsive to a request to disable a user from accessing a resource on the second server, receiving the disable request by an adapter integrating the plurality of servers; and </claim-text>
<claim-text>removing a definition associated with the user from a database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>responsive to a request to disqualify a user from accessing a resource on the second server, receiving the disqualification request by an adapter integrating the plurality of servers; </claim-text>
<claim-text>removing a definition associated with the user from a first database associated with the second server; and </claim-text>
<claim-text>removing a definition associated with the user from a second database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the first database is a registry database and the second database is a meta-data database. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A system, comprising: 
<claim-text>a bus system; </claim-text>
<claim-text>a memory, including a set of instructions, connected to the bus system; and </claim-text>
<claim-text>a processing unit, including at least one processor, wherein the processing unit executes the set of instructions to transmit, from a first server within a plurality of servers, an authentication request to authenticate a user in an existing database registry, responsive to receiving the authentication request to authenticate the user in the existing database registry, constructing, but the first server, a credential of the user, and accessing a resource from a second server within the plurality of servers based on the credential of the user and a protection policy applied to the resource in an object name space associated with the first server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A system for integrating a plurality of servers, comprising: 
<claim-text>transmitting means for transmitting, from a first server within the plurality of servers, an authentication request to authenticate a user in an existing database registry; </claim-text>
<claim-text>constructing means, responsive to receiving the authentication request to authenticate the user in the existing database registry, for constructing, by the first server, a credential of the user; and </claim-text>
<claim-text>accessing means for accessing a resource from a second server within the plurality of servers based on the credential of the user and a protection policy applied to the resource in an object name space associated with the first server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer program product in a computer-readable medium for integrating a plurality of servers, comprising: 
<claim-text>instructions for transmitting, from a first server within the plurality of servers, an authentication request to authenticate a user in an existing database registry; </claim-text>
<claim-text>instructions, responsive to receiving the authentication request to authenticate the user in the existing database registry, for constructing, by the first server, a credential of the user; and </claim-text>
<claim-text>instructions for accessing a resource from a second server within the plurality of servers based on the credential of the user and a protection policy applied to the resource in an object name space associated with the first server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the first server is an authentication server. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the second server is an application server. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the plurality of servers are heterogeneous servers. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the application constructs a credential of the user using a user identifier and a user password. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein registry information in the existing database registry includes at least one of user registry information and group registry information. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein integrating the plurality of servers is integrated with the use of an adapter. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the adapter is a user registry adapter. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising: 
<claim-text>instructions for storing a definition of the user in a database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising: 
<claim-text>instructions for creating an application specific database in the second server; and </claim-text>
<claim-text>instructions for protecting application specific data required for an operation of the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the application specific database is a meta-data database. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the resource is a Web resource. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising: 
<claim-text>instructions, responsive to a request to disable a user from accessing a resource on the second server, for receiving the disable request by an adapter integrating the plurality of servers; and </claim-text>
<claim-text>instructions for removing a definition associated with the user from a database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising: 
<claim-text>instructions, responsive to a request to disqualify a user from accessing a resource on the second server, for receiving the disqualification request by an adapter integrating the plurality of servers; </claim-text>
<claim-text>instructions for removing a definition associated with the user from a first database associated with the second server; and </claim-text>
<claim-text>instructions for removing a definition associated with the user from a second database associated with the second server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer program product as recited in claim <highlight><bold>31</bold></highlight>, wherein the first database is a registry database and the second database is a meta-data database.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005297A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005297A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005297A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005297A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005297A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005297A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005297A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005297A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005297A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
