<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005039A1-20030102-D00000.TIF SYSTEM "US20030005039A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00001.TIF SYSTEM "US20030005039A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00002.TIF SYSTEM "US20030005039A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00003.TIF SYSTEM "US20030005039A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00004.TIF SYSTEM "US20030005039A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00005.TIF SYSTEM "US20030005039A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005039A1-20030102-D00006.TIF SYSTEM "US20030005039A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005039</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895233</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>End node partitioning using local identifiers</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<middle-name>F.</middle-name>
<family-name>Craddock</family-name>
</name>
<residence>
<residence-us>
<city>New Paltz</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>Arlen</middle-name>
<family-name>Elko</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Thomas</given-name>
<middle-name>Anthony</middle-name>
<family-name>Gregg</family-name>
</name>
<residence>
<residence-us>
<city>Highland</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Gregory</given-name>
<middle-name>Francis</middle-name>
<family-name>Pfister</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Renato</given-name>
<middle-name>John</middle-name>
<family-name>Recio</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and system for a distributed computing system having components like end nodes, switches, routers and links interconnecting packets over the interconnecting links. The switches and routers interconnect the end nodes and route the packets to the appropriate end node. The end nodes reassemble the packets into a message at a destination. A mechanism is provided to allow a single physical component to appear as multiple components each with unique control levels. These components may be host channel adapters (HCAs), target channel adapters (TCAs) or switches. A method and system for end node partitioning for a physical element is provided. A configuration of the physical element is selected. A port associated with the physical element is probed, wherein the port is probed with a subnet management packet by a subnet manager. In response to detecting a switch associated with the port, a local identifier is assigned to the port resulting in a configuration change of the physical element. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to communications between computer systems and, more particularly, to a method and apparatus the present invention is directed to supporting end node partitioning by virtualizing an InfiniBand channel adapter and switch components. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In a System Area Network (SAN), the hardware provides a message passing mechanism which can be used for Input/Output devices (I/O) and interprocess communications between general computing nodes (IPC). Consumers access SAN message passing hardware by posting send/receive messages to send/receive work queues on a SAN channel adapter (CA). The send/receive work queues (WQ) are assigned to a consumer as a queue pair (QP). The messages can be sent over five different defined transport types: Reliable Connected (RC), Reliable datagram (RD), Unreliable Connected (UC), Unreliable Datagram (UD), and Raw Datagram (RawD). In addition there is a set of manufacturer definable operation codes that allow for different companies to define custom packets that still have the same routing header layouts. Consumers retrieve the results of the defined messages from a completion queue (CQ) through SAN send and receive work completions (WC). The manufacturer definable operations are not defined as to whether or not they use the same queuing structure as the defined packet types. Regardless of the packet type, the source channel adapter takes care of segmenting outbound messages and sending them to the destination. The destination channel adapter takes care of reassembling inbound messages and placing them in the memory space designated by the destination&apos;s consumer. Two channel adapter types are present, a host channel adapter (HCA) and a target channel adapter (TCA). The host channel adapter is used by general purpose computing nodes to access the SAN fabric. Consumers use SAN verbs to access host channel adapter functions. The software that interprets verbs and directly accesses the channel adapter is known as the channel interface (CI). </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> InfiniBand components are assigned a Local Identifier (LID) during initialization. The LID is used to address a component within a subnet. All InfiniBand packets contain a Source LID and a Destination LID defining the packet&apos;s Source and Destination address within the subnet. InfiniBand components are also assigned at least one Partition Key (P_Key). The P_Key is used to partition an InfiniBand fabric into one or more groups. InfiniBand components are then placed into one or more of the groups. All other communications are allowed. The end nodes are grouped into partitions and access is controlled through the P_Key. The InfiniBand partitioning mechanism essentially allows hosts to provide adapters and shared adapters in a controlled manner. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> However, InfiniBand does not provide a mechanism for partitioning an end node so that multiple operating system instances that share a single channel adapter port while at the same time gain controlled access to an InfiniBand subnet. Prior art systems typically add extra packet header or headers to identify the operating system instance. By adding packet header or headers this results in more complexity to data transmission. Therefore, this lack of a mechanism for partitioning an end node presents a problem for higher end servers which support partitioning in their processing and memory resources through logical or physical partitioning. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Therefore, a mechanism is needed to allow a single physical component to appear as multiple components with each single component having unique access control levels. The components may be host channel adapters (HCAs), target channel adapters (TCAs) or switches. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A method and system for end node partitioning for a physical element is provided. A configuration of the physical element is selected. A port associated with the physical element is probed, wherein the port is probed with a subnet management packet by a subnet manager. In response to detecting a switch associated with the port, a local identifier is assigned to the port resulting in a configuration change of the physical element. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a diagram of a network computing system in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a functional block diagram of a host processor node in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a diagram of a host channel adapter in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a diagram illustrating processing of work requests in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts an illustration of a data packet in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a diagram of a physical component with virtual channel adapters and virtual switches in accordance with an embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an exemplary flowchart illustrating an operation for a static selection system for a configuration of a physical element in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an exemplary flowchart illustrating reporting of host channel adapters and associated nodes as they become operational or are removed from operation in accordance with a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an exemplary flowchart illustrating an operation for a dynamic selection system for a configuration of a physical element in accordance with a preferred embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention provides a network computing system having end nodes, switches, routers, and links interconnecting these components. The end nodes segment the message into packets and transmit the packets over the links. The switches and routers interconnect the end nodes and route the packets to the appropriate end node. The end nodes reassemble the packets into a message at the destination. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> With reference now to the figures and in particular with reference to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> diagram of a network computing system is illustrated in accordance with a preferred embodiment of the present invention. The network computing system represented in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> takes the form of a system area network (SAN) <highlight><bold>100</bold></highlight> and is provided merely for illustrative purposes, and the embodiments of the present invention described below can be implemented on computer systems of numerous other types and configurations. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> SAN <highlight><bold>100</bold></highlight> is a high-bandwidth, low-latency network interconnecting nodes within the network computing system. A node is any component attached to one or more links of a network and forming the origin and/or destination of messages within the network. In the depicted example, SAN <highlight><bold>100</bold></highlight> includes nodes in the form of host processor node <highlight><bold>102</bold></highlight>, host processor node <highlight><bold>104</bold></highlight>, redundant array independent disk (RAID) subsystem node <highlight><bold>106</bold></highlight>, I/O chassis node <highlight><bold>108</bold></highlight>, and PCI I/O Chassis node <highlight><bold>184</bold></highlight>. The nodes illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> are for illustrative purposes only, as SAN <highlight><bold>100</bold></highlight> can connect any number and any type of independent processor nodes, I/O adapter nodes, and I/O device nodes. Any one of the nodes can function as an endnode, which is herein defined to be a device that originates or finally consumes messages or frames in SAN <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A message, as used herein, is an application-defined unit of data exchange, which is a primitive unit of communication between cooperating processes. A packet is one unit of data encapsulated by a networking protocol headers and/or trailer. The headers generally provide control and routing information for directing the frame through SAN. The trailer generally contains control and cyclic redundancy check (CRC) data for ensuring packets are not delivered with corrupted contents. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> SAN <highlight><bold>100</bold></highlight> contains the communications and management infrastructure supporting both I/O and interprocessor communications (IPC) within a network computing system. The SAN <highlight><bold>100</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes a switched communications fabric <highlight><bold>100</bold></highlight>, which allows many devices to concurrently transfer data with high-bandwidth and low latency in a secure, remotely managed environment. Endnodes can communicate over multiple ports and utilize multiple paths through the SAN fabric. The multiple ports and paths through the SAN shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> can be employed for fault tolerance and increased bandwidth data transfers. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The SAN <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes switch <highlight><bold>112</bold></highlight>, switch <highlight><bold>114</bold></highlight>, switch <highlight><bold>146</bold></highlight>, and router <highlight><bold>117</bold></highlight>. A switch is a device that connects multiple links together and allows routing of packets from one link to another link within a subnet using a small header Destination Local Identifier (DLID) field. A router is a device that connects multiple subnets together and is capable of routing frames from one link in a first subnet to another link in a second subnet using a large header Destination Globally Unique Identifier (DGUID). </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In one embodiment, a link is a full duplex channel between any two network fabric elements, such as endnodes, switches, or routers. Example suitable links include, but are not limited to, copper cables, optical cables, and printed circuit copper traces on backplanes and printed circuit boards. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> For reliable service types, endnodes, such as host processor endnodes and I/O adapter endnodes, generate request packets and return acknowledgment packets. Switches and routers pass packets along, from the source to the destination. Except for the variant CRC trailer field which is updated at each stage in the network, switches pass the packets along unmodified. Routers update the variant CRC trailer field and modify other fields in the header as the packet is routed. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In SAN <highlight><bold>100</bold></highlight> as illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, host processor node <highlight><bold>102</bold></highlight>, host processor node <highlight><bold>104</bold></highlight>, RAID I/O subsystem <highlight><bold>106</bold></highlight>, I/O chassis <highlight><bold>108</bold></highlight>, and PCI I/O Chassis <highlight><bold>184</bold></highlight> include at least one channel adapter (CA) to interface to SAN <highlight><bold>100</bold></highlight>. In one embodiment, each channel adapter is an endpoint that implements the channel adapter interface in sufficient detail to source or sink packets transmitted on SAN fabric <highlight><bold>100</bold></highlight>. Host processor node <highlight><bold>102</bold></highlight> contains channel adapters in the form of host channel adapter <highlight><bold>118</bold></highlight> and host channel adapter <highlight><bold>120</bold></highlight>. Host processor node <highlight><bold>104</bold></highlight> contains host channel adapter <highlight><bold>122</bold></highlight> and host channel adapter <highlight><bold>124</bold></highlight>. Host processor node <highlight><bold>102</bold></highlight> also includes central processing units <highlight><bold>126</bold></highlight>-<highlight><bold>130</bold></highlight> and a memory <highlight><bold>132</bold></highlight> interconnected by bus system <highlight><bold>134</bold></highlight>. Host processor node <highlight><bold>104</bold></highlight> similarly includes central processing units <highlight><bold>136</bold></highlight>-<highlight><bold>140</bold></highlight> and a memory <highlight><bold>142</bold></highlight> interconnected by a bus system <highlight><bold>144</bold></highlight>. Host channel adapter <highlight><bold>118</bold></highlight> provides a connection to switch <highlight><bold>112</bold></highlight>, host channel adapters <highlight><bold>120</bold></highlight> and <highlight><bold>122</bold></highlight> provide a connection to switches <highlight><bold>112</bold></highlight> and <highlight><bold>114</bold></highlight>, and host channel adapter <highlight><bold>124</bold></highlight> provides a connection to switch <highlight><bold>114</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In one embodiment, a host channel adapter is implemented in hardware. In this implementation, the host channel adapter hardware offloads much of central processing unit and I/O adapter communication overhead. This hardware implementation of the host channel adapter also permits multiple concurrent communications over a switched network without the traditional overhead associated with communicating protocols. In one embodiment, the host channel adapters and SAN <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> provide the I/O and interprocessor communications (IPC) consumers of the network computing system with zero processor-copy data transfers without involving the operating system kernel process, and employs hardware to provide reliable, fault tolerant communications. As indicated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, router <highlight><bold>117</bold></highlight> is coupled to wide area network (WAN) and/or local area network (LAN) connections to other hosts or other routers. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The I/O chassis <highlight><bold>108</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes a switch <highlight><bold>146</bold></highlight> and multiple I/O modules <highlight><bold>148</bold></highlight>-<highlight><bold>156</bold></highlight>. In these examples, the I/O modules take the form of adapter cards. Example adapter cards illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> include a SCSI adapter card for I/O module <highlight><bold>148</bold></highlight>; an adapter card to fiber channel hub and fiber channel-arbitrated loop (FC-AL) devices for I/O module <highlight><bold>152</bold></highlight>; an ethernet adapter card for I/O module <highlight><bold>150</bold></highlight>; a graphics adapter card for I/O module <highlight><bold>154</bold></highlight>; and a video adapter card for I/O module <highlight><bold>156</bold></highlight>. Any known type of adapter card can be implemented. I/O adapters also include a switch in the I/O adapter backplane to couple the adapter cards to the SAN fabric. These modules contain target channel adapters <highlight><bold>158</bold></highlight>-<highlight><bold>166</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In this example, RAID subsystem node <highlight><bold>106</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes a processor <highlight><bold>168</bold></highlight>, a memory <highlight><bold>170</bold></highlight>, a target channel adapter (TCA) <highlight><bold>172</bold></highlight>, and multiple redundant and/or striped storage disk unit <highlight><bold>174</bold></highlight>. Target channel adapter <highlight><bold>172</bold></highlight> can be a fully functional host channel adapter. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> PCI I/O Chassis node <highlight><bold>184</bold></highlight> includes a TCA <highlight><bold>186</bold></highlight> and multiple PCI Input/Output Adapters (IOA) <highlight><bold>190</bold></highlight>-<highlight><bold>192</bold></highlight> connected to TCA <highlight><bold>186</bold></highlight> via PCI bus <highlight><bold>188</bold></highlight>. In these examples, the IOAs take the form of adapter cards. Example adapter cards illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> include a modem adapter card <highlight><bold>190</bold></highlight> and serial adapter card <highlight><bold>192</bold></highlight>. TCA <highlight><bold>186</bold></highlight> encapsulates PCI transaction requests or responses received from PCI IOAs <highlight><bold>190</bold></highlight>-<highlight><bold>192</bold></highlight> into data packets for transmission across the SAN fabric <highlight><bold>100</bold></highlight> to an HCA, such as HCA <highlight><bold>118</bold></highlight>. HCA <highlight><bold>118</bold></highlight> determines whether received data packets contain PCI transmissions and, if so, decodes the data packet to retrieve the encapsulated PCI transaction request or response, such as a DMA write or read operation. HCA <highlight><bold>118</bold></highlight> sends it to the appropriate unit, such as memory <highlight><bold>132</bold></highlight>. If the PCI transaction was a DMA read request, the HCA then receives the response from the memory, such as memory <highlight><bold>132</bold></highlight>, encapsulates the PCI response into a data packet, and sends the data packet back to the requesting TCA <highlight><bold>186</bold></highlight> across the SAN fabric <highlight><bold>100</bold></highlight>. the TCA then decodes the PCI transaction from the data packet and sends the PCI transaction to PCI IOA <highlight><bold>190</bold></highlight> or <highlight><bold>192</bold></highlight> across PCI bus <highlight><bold>188</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Similarly, store and load requests from a processor, such as, for example, CPU <highlight><bold>126</bold></highlight>, to a PCI IOA, such as PCI IOA <highlight><bold>190</bold></highlight> or <highlight><bold>192</bold></highlight> are encapsulated into a data packet by the HCA <highlight><bold>118</bold></highlight> for transmission to the TCA <highlight><bold>186</bold></highlight> corresponding to the appropriate PCI IOA <highlight><bold>190</bold></highlight> or <highlight><bold>192</bold></highlight> across SAN fabric <highlight><bold>100</bold></highlight>. The TCA <highlight><bold>186</bold></highlight> decodes the data packet to retrieve the PCI transmission and transmits the PCI store or load request and data to PCI IOA <highlight><bold>190</bold></highlight> or <highlight><bold>192</bold></highlight> via PCI bus <highlight><bold>188</bold></highlight>. If the request is a load request, the TCA <highlight><bold>186</bold></highlight> then receives a response from the PCI IOA <highlight><bold>190</bold></highlight> or <highlight><bold>192</bold></highlight> which the TCA encapsulates into a data packet and transmits over the SAN fabric <highlight><bold>100</bold></highlight> to HCA <highlight><bold>118</bold></highlight> which decodes the data packet to retrieve the PCI data and commands and sends the PCI data and commands to the requesting CPU <highlight><bold>126</bold></highlight>. Thus, PCI adapters may be connected to the SAN fabric <highlight><bold>100</bold></highlight> of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> SAN <highlight><bold>100</bold></highlight> handles data communications for I/O and interprocessor communications. SAN <highlight><bold>100</bold></highlight> supports high-bandwidth and scalability required for I/O and also supports the extremely low latency and low CPU overhead required for interprocessor communications. User clients can bypass the operating system kernel process and directly access network communication hardware, such as host channel adapters, which enable efficient message passing protocols. SAN <highlight><bold>100</bold></highlight> is suited to current computing models and is a building block for new forms of I/O and computer cluster communication. Further, SAN <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> allows I/O adapter nodes to communicate among themselves or communicate with any or all of the processor nodes in network computing system. With an I/O adapter attached to the SAN <highlight><bold>100</bold></highlight>, the resulting I/O adapter node has substantially the same communication capability as any host processor node in SAN <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention and is provided merely for illustrative purposes. The embodiments of the present invention, as described below, may be implemented on computer systems of numerous types and configurations. For example, computer systems implementing the present invention may range from a small server with one processor and a limited number of input/output (I/O) adapters to a massive parallel supercomputer system or systems with, for example, hundreds of processor and thousands of I/O adapters. Furthermore, the present invention may be implemented in an infrastructure of remote computer systems connected by, for example, an internet or an intranet. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a functional block diagram of a host processor node in accordance with a preferred embodiment of the present invention. Host processor node <highlight><bold>200</bold></highlight> is an example of a host processor node, such as host processor node <highlight><bold>102</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In this example, host processor node <highlight><bold>200</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> includes a set of consumers <highlight><bold>202</bold></highlight>-<highlight><bold>208</bold></highlight> and one or more PCI/PCI-X device drivers <highlight><bold>230</bold></highlight>, which are processes executing on host processor node <highlight><bold>200</bold></highlight>. Host processor node <highlight><bold>200</bold></highlight> also includes channel adapter <highlight><bold>210</bold></highlight> and channel adapter <highlight><bold>212</bold></highlight>. Channel adapter <highlight><bold>210</bold></highlight> contains ports <highlight><bold>214</bold></highlight> and <highlight><bold>216</bold></highlight> while channel adapter <highlight><bold>212</bold></highlight> contains ports <highlight><bold>218</bold></highlight> and <highlight><bold>220</bold></highlight>. Each port connects to a link. The ports can connect to one SAN subnet or multiple SAN subnets, such as SAN <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In these examples, the channel adapters take the form of host channel adapters. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Consumers <highlight><bold>202</bold></highlight>-<highlight><bold>208</bold></highlight> transfer messages to the SAN via the verbs interface <highlight><bold>222</bold></highlight> and message and data service <highlight><bold>224</bold></highlight>. A verbs interface is essentially an abstract description of the functionality of a host channel adapter. An operating system may expose some or all of the verb functionality through its programming interface. Basically, this interface defines the behavior of the host. Additionally, host processor node <highlight><bold>200</bold></highlight> includes a message and data service <highlight><bold>224</bold></highlight>, which is a higher level interface than the verb layer and is used to process messages and data received through channel adapter <highlight><bold>210</bold></highlight> and channel adapter <highlight><bold>212</bold></highlight>. Message and data service <highlight><bold>224</bold></highlight> provides an interface to consumers <highlight><bold>202</bold></highlight>-<highlight><bold>208</bold></highlight> to process messages and other data. In addition, the channel adapter <highlight><bold>210</bold></highlight> and channel adapter <highlight><bold>212</bold></highlight> may receive load and store instructions from the processors which are targeted for PCI IOAs attached to the SAN. These bypass the verb layer, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a diagram of a host channel adapter in accordance with a preferred embodiment of the present invention. Host channel adapter <highlight><bold>300</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> includes a set of queue pairs (QPs) <highlight><bold>302</bold></highlight>-<highlight><bold>310</bold></highlight>, which are one means used to transfer messages to the host channel adapter ports <highlight><bold>312</bold></highlight>-<highlight><bold>316</bold></highlight>. Buffering of data to host channel adapter ports <highlight><bold>312</bold></highlight>-<highlight><bold>316</bold></highlight> is channeled through virtual lanes (VL) <highlight><bold>318</bold></highlight>-<highlight><bold>334</bold></highlight> where each VL has its own flow control. Subnet manager configures channel adapters with the local addresses for each physical port, i.e., the port&apos;s LID. Subnet manager agent (SMA) <highlight><bold>336</bold></highlight> is the entity that communicates with the subnet manager for the purpose of configuring the channel adapter. Memory translation and protection (MTP) <highlight><bold>338</bold></highlight> is a mechanism that translates virtual addresses to physical addresses and to validate access rights. Direct memory access (DMA) <highlight><bold>340</bold></highlight> provides for direct memory access operations using memory <highlight><bold>340</bold></highlight> with respect to queue pairs <highlight><bold>302</bold></highlight>-<highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A single channel adapter, such as the host channel adapter <highlight><bold>300</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, can support thousands of queue pairs. By contrast, a target channel adapter in an I/O adapter typically supports a much smaller number of queue pairs. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Each queue pair consists of a send work queue (SWQ) and a receive work queue. The send work queue is used to send channel and memory semantic messages. The receive work queue receives channel semantic messages. A consumer calls an operating-system specific programming interface, which is herein referred to as verbs, to place work requests (WRs) onto a work queue. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a diagram illustrating processing of work requests in accordance with a preferred embodiment of the present invention. In <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> receive work queue <highlight><bold>400</bold></highlight>, send work queue <highlight><bold>402</bold></highlight>, and completion queue <highlight><bold>404</bold></highlight> are present for processing requests from and for consumer <highlight><bold>406</bold></highlight>. These requests from consumer <highlight><bold>402</bold></highlight> are eventually sent to hardware <highlight><bold>408</bold></highlight>. In this example, consumer <highlight><bold>406</bold></highlight> generates work requests <highlight><bold>410</bold></highlight> and <highlight><bold>412</bold></highlight> and receives work completion <highlight><bold>414</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, work requests placed onto a work queue are referred to as work queue elements (WQEs). </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Send work queue <highlight><bold>402</bold></highlight> contains work queue elements (WQEs) <highlight><bold>422</bold></highlight>-<highlight><bold>428</bold></highlight>, describing data to be transmitted on the SAN fabric. Receive work queue <highlight><bold>400</bold></highlight> contains work queue elements (WQEs) <highlight><bold>416</bold></highlight>-<highlight><bold>420</bold></highlight>, describing where to place incoming channel semantic data from the SAN fabric. A work queue element is processed by hardware <highlight><bold>408</bold></highlight> in the host channel adapter. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The verbs also provide a mechanism for retrieving completed work from completion queue <highlight><bold>404</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, completion queue <highlight><bold>404</bold></highlight> contains completion queue elements (CQEs) <highlight><bold>430</bold></highlight>-<highlight><bold>436</bold></highlight>. Completion queue elements contain information about previously completed work queue elements. Completion queue <highlight><bold>404</bold></highlight> is used to create a single point of completion notification for multiple queue pairs. A completion queue element is a data structure on a completion queue. This element describes a completed work queue element. The completion queue element contains sufficient information to determine the queue pair and specific work queue element that completed. A completion queue context is a block of information that contains pointers to, length, and other information needed to manage the individual completion queues. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Example work requests supported for the send work queue <highlight><bold>402</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> are as follows. A send work request is a channel semantic operation to push a set of local data segments to the data segments referenced by a remote node&apos;s receive work queue element. For example, work queue element <highlight><bold>428</bold></highlight> contains references to data segment 4 <highlight><bold>438</bold></highlight>, data segment 5 <highlight><bold>440</bold></highlight>, and data segment 6 <highlight><bold>442</bold></highlight>. Each of the send work request&apos;s data segments contains a virtually contiguous memory region. The virtual addresses used to reference the local data segments are in the address context of the process that created the local queue pair. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> A remote direct memory access (RDMA) read work request provides a memory semantic operation to read a virtually contiguous memory space on a remote node. A memory space can either be a portion of a memory region or portion of a memory window. A memory region references a previously registered set of virtually contiguous memory addresses defined by a virtual address and length. A memory window references a set of virtually contiguous memory addresses which have been bound to a previously registered region. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The RDMA Read work request reads a virtually contiguous memory space on a remote endnode and writes the data to a virtually contiguous local memory space. Similar to the send work request, virtual addresses used by the RDMA Read work queue element to reference the local data segments are in the address context of the process that created the local queue pair. For example, work queue element <highlight><bold>416</bold></highlight> in receive work queue <highlight><bold>400</bold></highlight> references data segment 1 <highlight><bold>444</bold></highlight>, data segment 2 <highlight><bold>446</bold></highlight>, and data segment <highlight><bold>448</bold></highlight>. The remote virtual addresses are in the address context of the process owning the remote queue pair targeted by the RDMA Read work queue element. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A RDMA Write work queue element provides a memory semantic operation to write a virtually contiguous memory space on a remote node. The RDMA Write work queue element contains a scatter list of local virtually contiguous memory spaces and the virtual address of the remote memory space into which the local memory spaces are written. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> A RDMA FetchOp work queue element provides a memory semantic operation to perform an atomic operation on a remote word. The RDMA FetchOp work queue element is a combined RDMA Read, Modify, and RDMA Write operation. The RDMA FetchOp work queue element can support several read-modify-write operations, such as Compare and Swap if equal. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> A bind (unbind) remote access key (R_Key) work queue element provides a command to the host channel adapter hardware to modify (destroy) a memory window by associating (disassociating) the memory window to a memory region. The R_Key is part of each RDMA access and is used to validate that the remote process has permitted access to the buffer. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In one embodiment, receive work queue <highlight><bold>400</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> only supports one type of work queue element, which is referred to as a receive work queue element. The receive work queue element provides a channel semantic operation describing a local memory space into which incoming send messages are written. The receive work queue element includes a scatter list describing several virtually contiguous memory spaces. An incoming send message is written to these memory spaces. The virtual addresses are in the address context of the process that created the local queue pair. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> For interprocessor communications, a user-mode software process transfers data through queue pairs directly from where the buffer resides in memory. In one embodiment, the transfer through the queue pairs bypasses the operating system and consumes few host instruction cycles. Queue pairs permit zero processor-copy data transfer with no operating system kernel involvement. The zero processor-copy data transfer provides for efficient support of high-bandwidth and low-latency communication. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> When a queue pair is created, the queue pair is set to provide a selected type of transport service. In one embodiment, a network computing system implementing the present invention supports four types of transport services. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Reliable and Unreliable connected services associate a local queue pair with one and only one remote queue pair. Connected services require a process to create a queue pair for each process which is to communicate with over the SAN fabric. Thus, if each of N host processor nodes contain P processes, and all P processes on each node wish to communicate with all the processes on all the other nodes, each host processor node requires P<highlight><superscript>2</superscript></highlight>&times;(N&minus;1) queue pairs. Moreover, a process can connect a queue pair to another queue pair on the same host channel adapter. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Reliable datagram service associates a local end-end (EE) context with one and only one remote end-end context. The reliable datagram service permits a client process of one queue pair to communicate with any other queue pair on any other remote node. At a receive work queue, the reliable datagram service permits incoming messages from any send work queue on any other remote node. The reliable datagram service greatly improves scalability because the reliable datagram service is connectionless. Therefore, an endnode with a fixed number of queue pairs can communicate with far more processes and endnodes with a reliable datagram service than with a reliable connection transport service. For example, if each of N host processor nodes contain P processes, and all P processes on each node wish to communicate with all the processes on all the other nodes, the reliable connection service requires P<highlight><superscript>2</superscript></highlight>&times;(N&minus;1) queue pairs on each node. By comparison, the connectionless reliable datagram service only requires P queue pairs&plus;(N&minus;1) EE contexts on each node for exactly the same communications. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The unreliable datagram service is connectionless. The unreliable datagram service is employed by management applications to discover and integrate new switches, routers, and endnodes into a given network computing system. The unreliable datagram service does not provide the reliability guarantees of the reliable connection service and the reliable datagram service. The unreliable datagram service accordingly operates with less state information maintained at each endnode. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an illustration of a data packet in accordance with a preferred embodiment of the present invention. Message data <highlight><bold>500</bold></highlight> contains data segment 1 <highlight><bold>502</bold></highlight>, data segment 2 <highlight><bold>504</bold></highlight>, and data segment 3 <highlight><bold>506</bold></highlight>, which are similar to the data segments illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. In this example, these data segments form a packet <highlight><bold>508</bold></highlight>, which is placed into packet payload <highlight><bold>510</bold></highlight> within data packet <highlight><bold>512</bold></highlight>. Additionally, data packet <highlight><bold>512</bold></highlight> contains CRC <highlight><bold>514</bold></highlight>, which is used for error checking. Additionally, routing header <highlight><bold>516</bold></highlight> and transport <highlight><bold>518</bold></highlight> are present in data packet <highlight><bold>512</bold></highlight>. Routing header <highlight><bold>516</bold></highlight> is used to identify source and destination ports for data packet <highlight><bold>512</bold></highlight>. Transport header <highlight><bold>518</bold></highlight> in this example specifies the destination queue pair for data packet <highlight><bold>512</bold></highlight>. Additionally, transport header <highlight><bold>518</bold></highlight> also provides information such as the operation code, packet sequence number, and partition for data packet <highlight><bold>512</bold></highlight>. The operating code identifies whether the packet is the first, last, intermediate, or only packet of a message. The operation code also specifies whether the operation is a send RDMA write, read, or atomic. The packet sequence number is initialized when communications is established and increments each time a queue pair creates a new packet. Ports of an endnode may be configured to be members of one or more possibly overlapping sets called partitions. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a diagram of a physical component with virtual channel adapters and virtual switches in accordance with an embodiment of the present invention. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an internal structure of a multi-function chip containing one or more switches interconnecting one or more HCAs to one or more subnets. Physical element <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> includes virtual host processor node <highlight><bold>602</bold></highlight> and virtual host processor node <highlight><bold>604</bold></highlight>. Virtual host processor node <highlight><bold>602</bold></highlight> includes virtual host channel adapter (HCA) <highlight><bold>606</bold></highlight>. Virtual host processor node <highlight><bold>604</bold></highlight> includes host channel adapter (HCA) <highlight><bold>608</bold></highlight>. Virtual HCAs <highlight><bold>606</bold></highlight> and <highlight><bold>608</bold></highlight> may have the same attributes as a physical HCA. For example, virtual HCAs <highlight><bold>606</bold></highlight> and <highlight><bold>608</bold></highlight>, in this example, have mandatory queue pair numbers 0 and 1. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Physical element <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> includes SAN fabric <highlight><bold>610</bold></highlight> which includes switch <highlight><bold>612</bold></highlight>. SAN fabric <highlight><bold>610</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> includes a link coupling host channel adapter <highlight><bold>606</bold></highlight> to switch <highlight><bold>612</bold></highlight> and a link coupling switch <highlight><bold>612</bold></highlight> to TCA <highlight><bold>642</bold></highlight>. Network computing system <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> also includes a SAN fabric <highlight><bold>611</bold></highlight> which includes switch <highlight><bold>614</bold></highlight>. SAN fabric <highlight><bold>611</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> includes a link coupling host channel adapter <highlight><bold>608</bold></highlight> to switch <highlight><bold>614</bold></highlight> and a link coupling switch <highlight><bold>614</bold></highlight> to TCA <highlight><bold>644</bold></highlight>. Virtual HCA <highlight><bold>606</bold></highlight> includes port <highlight><bold>650</bold></highlight> and <highlight><bold>652</bold></highlight>. Port <highlight><bold>650</bold></highlight> connects to subnet <highlight><bold>646</bold></highlight> through port <highlight><bold>678</bold></highlight> of switch <highlight><bold>612</bold></highlight>. Port <highlight><bold>652</bold></highlight> attaches to subnet <highlight><bold>648</bold></highlight> through port <highlight><bold>682</bold></highlight> of switch <highlight><bold>614</bold></highlight>. A subnet manager associated with subnet <highlight><bold>646</bold></highlight> has assigned LID <highlight><bold>670</bold></highlight> to port <highlight><bold>650</bold></highlight> of HCA <highlight><bold>606</bold></highlight> and LID <highlight><bold>694</bold></highlight> to port <highlight><bold>686</bold></highlight> of switch <highlight><bold>612</bold></highlight>. Port <highlight><bold>686</bold></highlight> is the InfiniBand Subnet Management Port 0 for switch <highlight><bold>612</bold></highlight>. A subnet manager is associated with subnet <highlight><bold>648</bold></highlight> which has assigned LID <highlight><bold>672</bold></highlight> to port <highlight><bold>652</bold></highlight> of HCA <highlight><bold>606</bold></highlight> and LID <highlight><bold>696</bold></highlight> to port <highlight><bold>688</bold></highlight> of switch <highlight><bold>614</bold></highlight>. Port <highlight><bold>688</bold></highlight> is the InfiniBand Subnet Management Port 0 for switch <highlight><bold>614</bold></highlight>. Virtual HCA <highlight><bold>608</bold></highlight> includes ports <highlight><bold>654</bold></highlight> and <highlight><bold>656</bold></highlight>. Port <highlight><bold>654</bold></highlight> is connected to subnet <highlight><bold>646</bold></highlight> through port <highlight><bold>680</bold></highlight> of switch <highlight><bold>612</bold></highlight>. Port <highlight><bold>656</bold></highlight> attaches to subnet <highlight><bold>648</bold></highlight> through port <highlight><bold>684</bold></highlight> of switch <highlight><bold>614</bold></highlight>. A subnet manager associated with subnet <highlight><bold>646</bold></highlight> has assigned LID <highlight><bold>674</bold></highlight> to port <highlight><bold>654</bold></highlight> of HCA <highlight><bold>608</bold></highlight>. A subnet associated with subnet <highlight><bold>648</bold></highlight> has assigned LID <highlight><bold>676</bold></highlight> to port <highlight><bold>656</bold></highlight> of HCA <highlight><bold>608</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In the example transactions, host processor node <highlight><bold>602</bold></highlight> includes client process A <highlight><bold>616</bold></highlight>. Host processor node <highlight><bold>604</bold></highlight> includes a client process B <highlight><bold>618</bold></highlight>. Client process A <highlight><bold>616</bold></highlight> interacts with host channel adapter hardware <highlight><bold>606</bold></highlight> through queue pair <highlight><bold>620</bold></highlight>, completion queue <highlight><bold>632</bold></highlight> and Translation Protection Table (TPT) <highlight><bold>634</bold></highlight>. Client process B <highlight><bold>618</bold></highlight> interacts with host channel adapter <highlight><bold>608</bold></highlight> through queue pair <highlight><bold>622</bold></highlight>, completion queue <highlight><bold>636</bold></highlight> and TPT <highlight><bold>638</bold></highlight>. Queue pair <highlight><bold>620</bold></highlight> queue pair <highlight><bold>622</bold></highlight>, completion queue <highlight><bold>632</bold></highlight>, completion queue <highlight><bold>636</bold></highlight>, TPT <highlight><bold>634</bold></highlight> and TPT <highlight><bold>638</bold></highlight> are data structures. Queue pair <highlight><bold>620</bold></highlight> includes a send work queue <highlight><bold>624</bold></highlight> and a receive work queue <highlight><bold>626</bold></highlight>. Queue pair <highlight><bold>622</bold></highlight> includes a send work queue <highlight><bold>628</bold></highlight> and a receive work queue <highlight><bold>630</bold></highlight>. Completion queues <highlight><bold>632</bold></highlight> and <highlight><bold>636</bold></highlight> consist of a single completion queue. TPTs <highlight><bold>634</bold></highlight> and <highlight><bold>638</bold></highlight> consist of a memory consists of a memory address translation and protection table. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> A channel adapter, for example a TCA or a HCA, may provide a resource configuration and allocation interface to software, firmware or a hardware state machine which will execute as part of physical element <highlight><bold>600</bold></highlight>. The resource configuration and allocation interface allows software, firmware, or hardware state machines to set an operating policy for the virtual HCA, for example HCAs <highlight><bold>606</bold></highlight> and <highlight><bold>608</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The operating policy may include: </paragraph>
<paragraph id="P-0061" lvl="2"><number>&lsqb;0061&rsqb;</number> 1) number of switches used within a multi-function chip; </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> 2) number of ports per switch; </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> 3) number of switch resources allocated to each switch; </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> 4) number of HCAs used within the multi-function chip; </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> 5) number of ports per HCA; and </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> 6) number of HCA resources allocated to each HCA. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Software, firmware or a hardware state machine may select the actual configuration of physical element <highlight><bold>600</bold></highlight>. A physcial element may be, for example, an HCA. The selection may be static or dynamic. A static selection may require a HCA or a switch configuration to be changed through re-initialization of a fabric and/or a reboot of a node. A dynamic selection allows a HCA or switch configuration change to be made without fabric re-initialization, but may require a boot of the node. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Under a static selection mechanism, physical element <highlight><bold>600</bold></highlight> may have to report an exact number of virtual switches, HCAs, and host processor nodes that may be included as part of physical element <highlight><bold>600</bold></highlight> during fabric initialization. A static selection mechanism may provide information whether there are any ports available on the physical element but does not provide information regarding port status without a request for the information. Using a static selection mechanism, each virtual HCA may appear as a distinct, physical HCA. In <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> subnet manager associated with subnet <highlight><bold>646</bold></highlight> detects switch <highlight><bold>612</bold></highlight> as a result of probing port <highlight><bold>644</bold></highlight> with standard InfiniBand subnet management packets (SMPs). Switch <highlight><bold>612</bold></highlight> appears as a physical switch to the subnet manager associated with subnet <highlight><bold>646</bold></highlight> and is assigned LID <highlight><bold>694</bold></highlight> to its SMP port <highlight><bold>686</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> identifies that switch <highlight><bold>612</bold></highlight> has two additional ports, ports <highlight><bold>678</bold></highlight> and <highlight><bold>680</bold></highlight>, through InfiniBand SMPs. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> detects HCA <highlight><bold>606</bold></highlight> as a result of using InfiniBand SMPs to probe switch <highlight><bold>612</bold></highlight> port <highlight><bold>678</bold></highlight> and locating HCA <highlight><bold>606</bold></highlight> port <highlight><bold>650</bold></highlight>. HCA <highlight><bold>606</bold></highlight> appears as a physical HCA to the subnet manager associated with subnet <highlight><bold>646</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> assigns LID <highlight><bold>670</bold></highlight> to port <highlight><bold>650</bold></highlight> of HCA <highlight><bold>606</bold></highlight> using InfiniBand SMPs. Similarly, the subnet manager associated with subnet <highlight><bold>646</bold></highlight> detects HCA <highlight><bold>608</bold></highlight> as a result of using InfiniBand SMPs. HCA <highlight><bold>608</bold></highlight> appears as a physical HCA to the subnet manager associated with subnet <highlight><bold>646</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> assigns LID <highlight><bold>674</bold></highlight> to port <highlight><bold>654</bold></highlight> using InfiniBand SMPs. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Using a dynamic selection mechanism, physical element <highlight><bold>600</bold></highlight> may report to the largest configurable number of virtual switches and their corresponding topology, but may not report the exact number of HCAs and host processor nodes that may be included as part of physical element <highlight><bold>600</bold></highlight> during fabric initialization. A dynamic selection mechanism may provide information whether there are any ports available on the physical element and may provide information when a previously unavailable port becomes operational. Similarly, a dynamic selection mechanism may report removal of HCAs and their associated host nodes, as they are removed from operation. Using a dynamic selection mechanism, each virtual HCA may appear as a distinct, physical HCA. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, if HCA <highlight><bold>606</bold></highlight> becomes operational at a later point in time, then the following process may take place. A subnet manager associated with subnet <highlight><bold>646</bold></highlight> detects switch <highlight><bold>612</bold></highlight> as a result of probing port <highlight><bold>644</bold></highlight> with InfiniBand management packets (SMPs). Switch <highlight><bold>612</bold></highlight> appears as a physical switch to the subnet manager associated with subnet <highlight><bold>646</bold></highlight> and is assigned LID <highlight><bold>694</bold></highlight> to its SMP port <highlight><bold>686</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> identifies that switch <highlight><bold>612</bold></highlight> has two additional ports, ports <highlight><bold>678</bold></highlight> and <highlight><bold>680</bold></highlight>, through standard InfiniBand SMPs. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> detects HCA <highlight><bold>606</bold></highlight> as a result of using InfiniBand SMPs to probe switch <highlight><bold>612</bold></highlight>, port <highlight><bold>678</bold></highlight> and locating HCA <highlight><bold>606</bold></highlight> port <highlight><bold>650</bold></highlight>. HCA <highlight><bold>606</bold></highlight> appears as a physical HCA to the subnet manager associated with subnet <highlight><bold>646</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> assigns LID <highlight><bold>670</bold></highlight> to port <highlight><bold>650</bold></highlight> of HCA using InfiniBand SMPs. At a later point in time, the subnet manager associated with subnet <highlight><bold>646</bold></highlight> may detect HCA <highlight><bold>608</bold></highlight> as a result of a SMP sweep by a subnet manager associated with subnet <highlight><bold>646</bold></highlight> to probe switch <highlight><bold>612</bold></highlight>, port <highlight><bold>680</bold></highlight> and locating HCA <highlight><bold>608</bold></highlight> port <highlight><bold>654</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Alternatively, the subnet manager associated with subnet <highlight><bold>646</bold></highlight> may detect HCA <highlight><bold>608</bold></highlight> as a result of a trap from switch <highlight><bold>612</bold></highlight> indicating a state change. This would cause the subnet manager associated with subnet <highlight><bold>646</bold></highlight> to use InfiniBand SMPs to probe switch <highlight><bold>612</bold></highlight>, port <highlight><bold>680</bold></highlight> and locate HCA <highlight><bold>608</bold></highlight> port <highlight><bold>654</bold></highlight>. HCA <highlight><bold>608</bold></highlight> appears as a physical HCA to the subnet manager associated with subnet <highlight><bold>646</bold></highlight>. The subnet manager associated with subnet <highlight><bold>646</bold></highlight> assigns LID <highlight><bold>674</bold></highlight> to port <highlight><bold>654</bold></highlight> of HCA <highlight><bold>608</bold></highlight> using InfiniBand SMPs. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> As mentioned above, the present invention provides a method and system for end node partitioning for a physical element. Selection of a configuration of the physical element may be static or dynamic. With a static selection mechanism, a subnet manager may probe the physical element, such as, for example, a switch or HCA, to determine if the physical element is detected. If the physical element is detected then a LID is assigned to the physical element&apos;s SMP port. If additional ports are detected for the physical element a LID is assigned to the additional ports. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> With a dynamic selection mechanism, HCAs and the HCA&apos;s associated host nodes will be reported as they become operational. In addition, the dynamic selection mechanism reports removal of the HCAs and the HCA&apos;s associated host nodes as the HCA and the HCA&apos;s associated host nodes are removed from operation. When a HCA becomes operational a subnet manager assigns a LID to a port associated with the HCA. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an exemplary flowchart illustrating an operation for a static selection system for a configuration of a physical element in accordance with a preferred embodiment of the present invention. In this example the operation starts by probing a port with InfiniBand subnet management packets by a subnet manager (step <highlight><bold>702</bold></highlight>). A determination is made as to whether or not a switch is detected in response to the probing of the port with the InfiniBand subnet management packets by the subnet manager (step <highlight><bold>704</bold></highlight>). If a switch is not detected (step <highlight><bold>704</bold></highlight>: NO), the operation terminates. If a switch is detected (step <highlight><bold>704</bold></highlight>: YES), then a LID is assigned to the switch&apos;s SMP port (step <highlight><bold>706</bold></highlight>). </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> A determination is then made as to whether or not the subnet manager has detected additional ports for the switch (step <highlight><bold>708</bold></highlight>). If the subnet manager has detected additional port(s) for the switch (step <highlight><bold>708</bold></highlight>: YES), then an LID is assigned to the additional port(s) (step <highlight><bold>710</bold></highlight>) and the operation returns to step <highlight><bold>708</bold></highlight> in which a determination is made as to whether or not the subnet manager has detected additional ports for the switch. If the subnet manager has not detected additional ports for the switch (step <highlight><bold>708</bold></highlight>: NO), then a determination is made as to whether or not fabric is to be reinitialized (step <highlight><bold>712</bold></highlight>). If the fabric is not to be reinitialized (step <highlight><bold>712</bold></highlight>: NO), a node reboot is performed (step <highlight><bold>716</bold></highlight>). The exact number of virtual switches, HCAs and host processor nodes are then reported to a subnet manager (step <highlight><bold>720</bold></highlight>), and thereafter the operation terminates. If the fabric is to be reinitialized (step <highlight><bold>712</bold></highlight>: YES), the fabric reinitialization is performed (step <highlight><bold>714</bold></highlight>). A determination is then made as to whether or not a node reboot is to be performed (step <highlight><bold>718</bold></highlight>). If a node reboot is to be performed (step <highlight><bold>718</bold></highlight>: YES), the node reboot is performed (step <highlight><bold>716</bold></highlight>) and the exact number of virtual switches, HCAs and host processor nodes are reported (step <highlight><bold>720</bold></highlight>) and thereafter the operation terminates. If node reboot is not to be performed (step <highlight><bold>718</bold></highlight>: NO), the exact number of virtual switches, HCAs and host processor nodes are reported (step <highlight><bold>720</bold></highlight>) and thereafter the operation terminates. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an exemplary flowchart illustrating reporting of host channel adapters and associated nodes as they become operational or are removed from operation in accordance with a preferred embodiment of the present invention. In this example, the operation starts by determining whether or not a HCA and the HCA&apos;s associated host nodes are operational (step <highlight><bold>802</bold></highlight>). If the HCA and the HCA&apos;s associated host nodes are not operational (step <highlight><bold>802</bold></highlight>: NO), the operation terminates. If the HCA and the HCA&apos;s associated host nodes are operational (step <highlight><bold>802</bold></highlight>: YES), then the HCA and associated nodes are reported as they become operational to a subnet manager (step <highlight><bold>804</bold></highlight>). A determination is then made as to whether or not the HCA and the HCA&apos;s associated host nodes have been removed from operation (step <highlight><bold>806</bold></highlight>). If the HCA and the HCA&apos;s associated host nodes have not been removed from operation (step <highlight><bold>806</bold></highlight>: NO), the operation terminates. If the HCA and the HCA&apos;s associated host nodes have been removed from operation (step <highlight><bold>806</bold></highlight>: YES), the HCA and the HCA&apos;s ssociated nodes are reported to be removed from operation (step <highlight><bold>808</bold></highlight>), and thereafter the operation terminates. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an exemplary flowchart illustrating an operation for a dynamic selection system for a configuration of a physical element in accordance with a preferred embodiment of the present invention. In this example, the operation starts by a determination as to whether or not a HCA becomes operational at a power on condition (step <highlight><bold>902</bold></highlight>). If a HCA does not become operational at a power on condition (step <highlight><bold>902</bold></highlight>: NO), a determination is made as to whether or not a HCA becomes operational after a power on condition (step <highlight><bold>904</bold></highlight>). If a HCA does not become operational after a power on condition (step <highlight><bold>904</bold></highlight>: NO), the operation terminates. If a HCA does become operational after a power on condition (step <highlight><bold>904</bold></highlight>: YES), the operation continues to step <highlight><bold>906</bold></highlight> in which a port is probed with InfiniBand subnet management packets by a subnet manager. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Returning to step <highlight><bold>902</bold></highlight>, if an HCA does become operational at a power on condition (step <highlight><bold>902</bold></highlight>: YES), a port is probed with InfiniBand subnet management packets by a subnet manager (step <highlight><bold>906</bold></highlight>). A determination is made as to whether or not a switch is detected (step <highlight><bold>908</bold></highlight>). If a switch is not detected (step <highlight><bold>908</bold></highlight>: NO), the operation terminates. If a switch is detected (step <highlight><bold>908</bold></highlight>: YES), a LID is assigned to the switch&apos;s SMP port (step <highlight><bold>910</bold></highlight>). A determination is then made as to whether or not a subnet manager has detected additional ports for the switch using a SMP sweep (step <highlight><bold>912</bold></highlight>). If a subnet manager has detected additional ports for the switch using a SMP sweep (step <highlight><bold>912</bold></highlight>: YES), a LID is assigned to the additional port and the operation continues to step <highlight><bold>914</bold></highlight> in which a determination is made as to whether or not the subnet manager has detected additional ports for the switch using a trap from the switch indicating a state change. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> If the subnet manager has not detected additional ports for the switch using a SMP sweep (step <highlight><bold>912</bold></highlight>: NO), a determination is then made as to whether or not the subnet manager has detected additional ports for the switch using a trap from the switch indicating a state change (step <highlight><bold>914</bold></highlight>). If the subnet manager has detected additional ports for the switch using a trap from the switch indicating a state change (step <highlight><bold>914</bold></highlight>: YES), and LID is assigned to the additional port (step <highlight><bold>916</bold></highlight>) and the operation returns to step <highlight><bold>912</bold></highlight> in which a determination is made as to whether or not the subnet manager has detected additional ports for the switch using a SMP sweep. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> If the subnet manager has not detected additional ports for the switch using a trap from the switch indicating a state change (step <highlight><bold>914</bold></highlight>: NO), a determination is made as to whether or not fabric reinitialization is to be performed (step <highlight><bold>918</bold></highlight>). If fabric reinitialization is to be performed (step <highlight><bold>918</bold></highlight>: YES), the fabric initialization is performed and the operation continues to step <highlight><bold>920</bold></highlight> in which a node reboot is performed. If a fabric initialization is not to be performed (step <highlight><bold>918</bold></highlight>: NO), then a node reboot is performed (step <highlight><bold>920</bold></highlight>). HCAs and host processor nodes are reported as they become operational (step <highlight><bold>922</bold></highlight>) and thereafter the operation terminates. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Therefore, the present invention provides for a mechanism to allow a single physical component to appear as multiple components with each single component having unique access control levels. The components may be host channel adapters (HCAs), target channel adapters (TCAs) or switches. Resources used to create the host channel adapters and switches may be obtained by a static or dynamic selection of software, firmware and state machine from a common pool. Allocation of these resources may be performed through various mechanisms. For example, a simple 1/N mechanism may be used to assign resources across all virtual HCAs. Alternatively, a weighted average mechanism may be used to create virtual HCAs with differing abilities, The resources may consist of, but are not limited to, all HCA and QP selectable modifiers. For example, these HCA and QP selectable modifiers may be a number of QPs, number of CQs, TPT size, P-Key table sizes, number of outstanding read RDMAs, and the like. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for end node partitioning for a physical element, comprising the steps of: 
<claim-text>selecting a configuration of the physical element; </claim-text>
<claim-text>probing a port, wherein the port is probed with a subnet management packet by a subnet manager; </claim-text>
<claim-text>in response to detecting a switch associated with the port, assigning a local identifier to the port resulting in a configuration change of the physical element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein selecting the configuration of the physical element includes a static selection of the physical element and a dynamic selection of the physical element. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising: 
<claim-text>in response to a static selection of the physical element, modifying the configuration of the physical element through at least one of a fabric initialization and a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising: 
<claim-text>in response to a dynamic selection of the physical element, modifying the configuration of the physical element through a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>in response to determining an additional port associated with the switch, assigning a local identifier to the additional port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>in response to a host channel adapter and a host node becoming operational, reporting the host channel adapters and host processor node as they become operational. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>in response to removing a host channel adapter and a host node from operation, reporting the removal of the host channel adapter and the host node from operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>connecting one or more operating system images to at least one host channel adapter. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the host channel adapter is a virtual host channel adapter. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A physical element, comprising: 
<claim-text>at least one switch; and </claim-text>
<claim-text>at least one host channel adapter functionally connected to the at least one switch. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The physical element as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the at least one switch is at least one virtual switch. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The physical element as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the at least one host channel adapter is at least one virtual channel adapter. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system for end node partitioning for a physical element, comprising: 
<claim-text>a selection component for selecting a configuration of the physical element; </claim-text>
<claim-text>a probing component for probing a port, wherein the port is probed with a subnet management packet by a subnet manager; </claim-text>
<claim-text>an assignment component, in response to detecting a switch associated with the port, for assigning a local identifier to the port resulting in a configuration change of the physical element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein selecting the configuration of the physical element includes a static selection of the physical element and a dynamic selection of the physical element. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>a modification component, in response to a static selection of the physical element, for modifying the configuration of the physical element through at least one of a fabric initialization and a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>a modification component, in response to a static selection of the physical element, for modifying the configuration of the physical element through at least one of a fabric initialization and a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>the assignment component, in response to determining an additional port associated with the switch, assigns a local identifier to the additional port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>a reporting component, in response to a host channel adapter and a host node becoming operational, for reporting the host channel adapter and host processor node as they become operational. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>a reporting component, in response to removing a host channel adapter and a host node from operation, reporting the removal of the host channel adapter and the host node from operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>a connection component for connecting one or more operating system images to at least one host channel adapter. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the host channel adapter is a virtual host channel adapter. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A computer program product in a computer readable medium for end node partitioning for a physical element, comprising: 
<claim-text>instructions for selecting a configuration of the physical element; </claim-text>
<claim-text>instructions for probing a port, wherein the port is probed with a subnet management packet by a subnet manager; </claim-text>
<claim-text>instructions, in response to detecting a switch associated with the port, for assigning a local identifier to the port resulting in a configuration change of the physical element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein selecting the configuration of the physical element includes a static selection of the physical element and a dynamic selection of the physical element. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>instructions, in response to a static selection of the physical element, for modifying the configuration of the physical element through at least one of a fabric initialization and a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>instructions, in response to a dynamic selection of the physical element, for modifying the configuration of the physical element through a reboot of a node associated with the port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>instructions, in response to determining an additional port associated with the switch, for assigning a local identifier to the additional port. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>instructions, in response to a host channel adapter and a host node becoming operational, for eporting the host channel adapters and host processor node as they become operational. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>Instructions, in response to removing a host channel adapter and a host node from operation, for reporting removal of the host channel adapter and the host node from operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising: 
<claim-text>Instructions for connecting one or more operating system images to at least one host channel adapter. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the host channel adapter is a virtual host channel adapter.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005039A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005039A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005039A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005039A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005039A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005039A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005039A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
