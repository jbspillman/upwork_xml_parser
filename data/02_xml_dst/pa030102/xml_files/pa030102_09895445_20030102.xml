<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005421A1-20030102-D00000.TIF SYSTEM "US20030005421A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00001.TIF SYSTEM "US20030005421A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00002.TIF SYSTEM "US20030005421A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00003.TIF SYSTEM "US20030005421A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00004.TIF SYSTEM "US20030005421A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00005.TIF SYSTEM "US20030005421A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00006.TIF SYSTEM "US20030005421A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00007.TIF SYSTEM "US20030005421A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005421A1-20030102-D00008.TIF SYSTEM "US20030005421A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005421</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895445</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/45</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>717</class>
<subclass>152000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Interprocedural optimization framework</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Raj</given-name>
<family-name>Prakash</family-name>
</name>
<residence>
<residence-us>
<city>Saratoga</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Fu-Hwa</given-name>
<family-name>Wang</family-name>
</name>
<residence>
<residence-us>
<city>Saratoga</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Chandrashekhar</given-name>
<family-name>Garud</family-name>
</name>
<residence>
<residence-us>
<city>Mountain View</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>CAMPBELL STEPHENSON ASCOLESE, LLP</name-1>
<name-2></name-2>
<address>
<address-1>4807 SPICEWOOD SPRINGS RD.</address-1>
<address-2>BLDG. 4, SUITE 201</address-2>
<city>AUSTIN</city>
<state>TX</state>
<postalcode>78759</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">High level program files are compiled into an efficient machine readable output file by using an optimizer that processes program files into intermediate files and reprocesses the intermediate files extracting necessary information to maintain. Information is provided in intermediate files that relate to dependency and interrelationships between target files that are to be compiled. If program files are modified and the compilation process must be re-done, interrelationship content is maintained to allow files to be compiled with undue calculations. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to a method and a system for optimizing compilers in a computer system. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Programmers create pieces of software code in a high-level language such as C programming language. A computer (i.e., machine) does not understand the high-level language that is developed by the programmers. Therefore, high-level software programs have to be compiled down to machine-readable code, sometimes known as object code. There can be hundreds or thousands of programs that are developed by different programmers. These various high-level program files must be related to one another. Ultimately, the programs are linked to one another to create a single machine language file. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The various high-level program files can either pass through one or more compilers. Intermediate forms of the high-level language can be created. Files can be connected together by a linker. The final result is a single output file that is readable by the computer (i.e., machine). This compilation process can be lengthy. Oftentimes the high-level computer program files are modified, revised or changed necessitating the need to recompile, relink and to create a new output file, thus restarting the compilation process. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Part of the compilation process of getting program files into a machine-readable output file language includes the use of an optimizer. An optimizer provides efficiencies in generating object files. An optimizer is able to make use of certain heuristics. Heuristics are rules that relate to computation and processing of computer commands and instructions. Heuristics can be learned by the optimizer based on program files that the optimizer receives. Heuristics can also be programmed into the optimizer depending on the type of high-level program files to be compiled. The optimizer provides for more efficient output programs. An optimizer allows for efficiencies in calculation, including a reduction of computing steps. Output programs run faster and more efficiently. Typically, an optimizer looks at each of the individual files of the multiple program files. An optimizer looks individually at each program file and optimizes for that particular program file. In other words, the multiple files that exist will be compiled separately, one from the other. The numerous program files, however, eventually become one machine object file and, therefore an optimizer should look at the total set of program files when an optimization is performed. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> To get the full benefit of the optimizer the optimizer must be able to work on all program files together and not just individually. Typically, this is achieved by specifying all files on one command line. This process has several drawbacks. Makefiles are files typically written to a generate machine object file for each source file. Specifying all source files in one line requires reorganizing these makefiles in a significant manner. Users sometimes forego optimizations to avoid having to reorganize makefiles. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Another drawback of specifying all files in the same command line is that all options on the command line would apply to all files. Therefore, all files must be compiled with the same set of options. This behavior may not be desired. In other words, a single source file can be used to generate different object files to be linked to one another. The problem is that the different object files require different options. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Typically, implementations that support optimizations of multiple files together do not maintain any dependency information. Therefore, whenever there is a change in any source file, recompilation of all files is required. This complete recompilation is required even if the change has no impact on the optimizations that were performed. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Implementations also restrict the usage of machine object files that are prepared for whole program optimization. Typically, the machine object files that are compiled for the purpose of whole program optimization cannot be used to make any other executable program. This restriction also causes users to reorganize makefiles in order to separate the files that are to be optimized in the whole program optimization from the files that are not. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Therefore, there has been found a need for a method and a system that will make use of an optimizer that simultaneously interrelates and makes use of multiple program files in creating an efficient output file. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The aforementioned and other features are accomplished, by providing a method and system or framework that optimizes program files and creates objects files. The object files contain necessary information regarding their status as having gone through the optimization process. Additional information includes functional relationships that are maintained between program files or modules. The objects files are linked with one another to create an executable machine output file. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In certain embodiments of the invention, intermediate representation files are created prior to optimizing program files. The intermediate representation files provide for a simpler version of the program file that can be used in the compilation process. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In other embodiments of the invention information can be provided in the object files that includes code generator information describing specific code generator or generators that create(s) machine readable code. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The present invention may be better understood, and it&apos;s numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference number throughout the figures designates a like or similar element. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flow chart illustrating converting program files to object files. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing multiple target program files creating one single output file. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating a process that compiles target object files into an output file using an optimizer. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a compilation process using an interprocedural optimizer. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating the use of all pre-IPO files and an optimizer to create an output file. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram illustrating a network environment in which a system according to the present invention may be practiced </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a block diagram of a computer system suitable for implementing the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram depicting a network in which computer system is coupled to an internetwork, which is coupled, in turn, to client systems as well as a server.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail, it should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the scope of the present invention as defined by the appended claims. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> An interprocedural optimizer (IPO) framework uses a two-phase compilation system. The first phase creates object files with the extension &ldquo;.o&rdquo;. The second phase links these objects files to generate an executable output file. The IPO framework works within this process, which allows it to be seamlessly integrated in the user environment. The IPO framework can be invoked by an option -xipo. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A single invocation point in the compilation process is made available that will allow source files to be presented and to perform an interprocedural optimization. The invocation point can take place during link time when the objects files are made available for linking. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The IPO framework uses the IPO as a component in the compilation process. The IPO is invoked only within the compiler, not directly by users. IPO is invoked once each time a source file is compiled to an object file. IPO is further invoked when the object files are linked together. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flow chart illustrating converting program files to object files. A target program file t.c <highlight><bold>100</bold></highlight> is created by a programmer in a high-level language such as C. A number of these target program files can be created and compiled. A target program file and its derivatives can be called a module. Modules can be loaded, related, and or compiled with on another. The target program file t.c <highlight><bold>100</bold></highlight> is sent to a compiler <highlight><bold>110</bold></highlight>. Compiler <highlight><bold>110</bold></highlight> takes the target program file t.c <highlight><bold>100</bold></highlight> and converts it to a machine-readable object file. Target object file t.o <highlight><bold>120</bold></highlight> is the product of the compiler. Target object file t.o <highlight><bold>120</bold></highlight> is a machine-readable file. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing multiple target program files creating one single output file. A target program file t<highlight><bold>1</bold></highlight>.c <highlight><bold>200</bold></highlight> is created by a programmer. Other target program files can be created by the same programmer or various other programmers. The set of target program files can include a target program file t<highlight><bold>2</bold></highlight>.c <highlight><bold>205</bold></highlight> up to and including target program file tn.c <highlight><bold>210</bold></highlight>. Thousands of these program files can exist. Target program file t<highlight><bold>1</bold></highlight>.c <highlight><bold>200</bold></highlight> is passed through compiler <highlight><bold>215</bold></highlight>. Target program file t<highlight><bold>2</bold></highlight>.c <highlight><bold>205</bold></highlight> is passed through compiler <highlight><bold>220</bold></highlight>. Target program file tn.c <highlight><bold>210</bold></highlight> is passed through compiler <highlight><bold>225</bold></highlight>. Compiler <highlight><bold>215</bold></highlight>, compiler <highlight><bold>220</bold></highlight> and compiler <highlight><bold>225</bold></highlight> can be the same or different compilers. From a compiler, object files are created. In this particular example, target object file t<highlight><bold>1</bold></highlight>.o <highlight><bold>230</bold></highlight> is created from target program file t<highlight><bold>1</bold></highlight>.c <highlight><bold>200</bold></highlight>. A target object file t<highlight><bold>2</bold></highlight>.o <highlight><bold>235</bold></highlight> is created originating from target program file t<highlight><bold>2</bold></highlight>.c <highlight><bold>205</bold></highlight>. Multiple target object files are created up to and including target object file tn.o <highlight><bold>240</bold></highlight>, which originates from target program file tn.c <highlight><bold>210</bold></highlight>. Target object file t<highlight><bold>1</bold></highlight>.o <highlight><bold>230</bold></highlight>, target object file t<highlight><bold>2</bold></highlight>.o <highlight><bold>235</bold></highlight>, up to and including target object file tn.o <highlight><bold>240</bold></highlight>, are all linked to one another using a linker <highlight><bold>245</bold></highlight>. Once linked, these target object files are created to a single output file a.out <highlight><bold>250</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating a process that compiles target object files into an output file using an optimizer. A target program file t<highlight><bold>1</bold></highlight>.c <highlight><bold>300</bold></highlight> is created by a programmer in a high-level language such as C. The target object file <highlight><bold>300</bold></highlight> is passed through a front end <highlight><bold>305</bold></highlight>. The front end <highlight><bold>305</bold></highlight> is a process that generates a target intermediate representation file. A software driver can invoke the front end <highlight><bold>305</bold></highlight> for each target program file such as t<highlight><bold>1</bold></highlight>.c <highlight><bold>300</bold></highlight> to generate intermediate representation files. Front end <highlight><bold>305</bold></highlight> creates target intermediate representation file t<highlight><bold>1</bold></highlight>.ir <highlight><bold>310</bold></highlight>. Target intermediate representation file t<highlight><bold>1</bold></highlight>.ir <highlight><bold>310</bold></highlight> is passed on to an optimizer <highlight><bold>315</bold></highlight>. Optimizer <highlight><bold>315</bold></highlight> creates a streamline and simplistic optimized, optimize file t<highlight><bold>1</bold></highlight>.opt <highlight><bold>320</bold></highlight>. Optimized file t<highlight><bold>1</bold></highlight>.opt <highlight><bold>320</bold></highlight> is passed on to a code generator <highlight><bold>325</bold></highlight>. Code generator <highlight><bold>325</bold></highlight> creates a machine-readable file output file t<highlight><bold>1</bold></highlight>.o <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a compilation process using an interprocedural optimizer. A target program file t<highlight><bold>1</bold></highlight>.c is created <highlight><bold>400</bold></highlight>. Target program file <highlight><bold>400</bold></highlight> is passed on to compiler <highlight><bold>405</bold></highlight>. From compiler <highlight><bold>405</bold></highlight>, a target machine object file t<highlight><bold>1</bold></highlight>.o <highlight><bold>410</bold></highlight> is created. File t<highlight><bold>1</bold></highlight>.o <highlight><bold>410</bold></highlight> are passed on to an inteprocedural optimizer (IPO) <highlight><bold>415</bold></highlight>. IP<highlight><bold>0</bold></highlight> <highlight><bold>415</bold></highlight> augments file t<highlight><bold>1</bold></highlight>.o <highlight><bold>410</bold></highlight> with internal representation of the program and creates an enhanced machine object file, referred to as PreIPO object file <highlight><bold>420</bold></highlight>. The added information enables the downstream processes to optimize the whole program using this PreIPO object file <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating the use of all pre-IPO files and an optimizer to create an output file. A number of pre-IPO object files are made available. In this example there are pre-IPO files t<highlight><bold>1</bold></highlight>.o <highlight><bold>500</bold></highlight>, t<highlight><bold>2</bold></highlight>.o <highlight><bold>505</bold></highlight>, up to and including tn.o <highlight><bold>510</bold></highlight>. Pre-IPO object files t<highlight><bold>1</bold></highlight>.o <highlight><bold>500</bold></highlight>, t<highlight><bold>2</bold></highlight>.o <highlight><bold>505</bold></highlight>, up to an including tn.o <highlight><bold>510</bold></highlight> are processed by an optimizer. In this embodiment the optimizer is an IPO <highlight><bold>515</bold></highlight>. IPO <highlight><bold>515</bold></highlight> looks at all the individual files and optimizes for other files. IPO <highlight><bold>515</bold></highlight> using these individual files further provides specific options to be made available from IPO <highlight><bold>515</bold></highlight> to the optimizer and code generator(s). </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Intermediate representation files t<highlight><bold>1</bold></highlight>.<highlight><bold>1</bold></highlight>r <highlight><bold>520</bold></highlight>, t<highlight><bold>2</bold></highlight>.ir <highlight><bold>525</bold></highlight>, up to and including tn.ir <highlight><bold>530</bold></highlight> are created by IPO <highlight><bold>515</bold></highlight>. The intermediate representative files are reprocessed as a group by an optimizer <highlight><bold>535</bold></highlight>. Target optimized files are created by optimizer <highlight><bold>535</bold></highlight>. These target optimized files include files t<highlight><bold>1</bold></highlight>.opt <highlight><bold>540</bold></highlight>, t<highlight><bold>2</bold></highlight>.opt <highlight><bold>545</bold></highlight>, and tn.opt <highlight><bold>550</bold></highlight>. In this second process through an optimizer <highlight><bold>535</bold></highlight>, optimized files use specific optimizer options as given by the user. These specific options are extracted from the Pre-IPO object files t<highlight><bold>1</bold></highlight>.o <highlight><bold>500</bold></highlight>, t<highlight><bold>2</bold></highlight>.o <highlight><bold>505</bold></highlight>, up to and including, tn.o <highlight><bold>510</bold></highlight>. Code generators are then called on each of the optimizer intermediate files t<highlight><bold>1</bold></highlight>.opt <highlight><bold>540</bold></highlight>, t<highlight><bold>2</bold></highlight>.opt <highlight><bold>545</bold></highlight>, up to including tn.opt <highlight><bold>550</bold></highlight>. Code generator options specific to each intermediate file is extracted from the Pre-IPO object files t<highlight><bold>1</bold></highlight>.o <highlight><bold>500</bold></highlight>, t<highlight><bold>2</bold></highlight>.o <highlight><bold>505</bold></highlight>, up to and including, tn.o <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="7"><number>&lsqb;0035&rsqb;</number> Interprocedural Optimizer </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> IPO <highlight><bold>515</bold></highlight> is invoked twice during the compilation process. IPO <highlight><bold>515</bold></highlight> can be invoked by -xipo option. IPO augments in the first phase of the compilation process additional sections to object files to pass information to the second phase that the object files go through in the IPO process. Information that is passed includes intermediate representation (ir) information that is generated as an input to IPO <highlight><bold>515</bold></highlight>; options provided to the optimizer <highlight><bold>535</bold></highlight>; options passed to code generators such as code generators <highlight><bold>555</bold></highlight>, <highlight><bold>560</bold></highlight>, and <highlight><bold>565</bold></highlight>; and information required for consistency checks. In a second phase, IPO <highlight><bold>515</bold></highlight> is used to extract &ldquo;ir&rdquo; information from object files when the object files are ready for linking. In addition to the &ldquo;ir&rdquo; information the options to the optimizer <highlight><bold>535</bold></highlight> are also extracted. Optimizer <highlight><bold>535</bold></highlight> is then invoked with all the &ldquo;ir&rdquo; information allowing cross compilation of files. Additionally options passed to code generators such as code generators <highlight><bold>555</bold></highlight>, <highlight><bold>560</bold></highlight>, and <highlight><bold>565</bold></highlight> are extracted by IPO <highlight><bold>515</bold></highlight> to invoke code generators for each of the optimized &ldquo;ir&rdquo; files and produce Post-IPO object files. IPO <highlight><bold>515</bold></highlight> also serves the function of adding back all sections to the Post-IPO object files that were added in the first phase of Pre-IPO object files. IPO <highlight><bold>515</bold></highlight> also provides for the elimination of redundant re-optimizations by using dependency checks. </paragraph>
<paragraph id="P-0037" lvl="7"><number>&lsqb;0037&rsqb;</number> Two Phases of IPO Framework </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In the first phase the compilation process compiles source files with the &ldquo;.c&rdquo; extension to object files with the &ldquo;.o&rdquo; extension. Extra sections are added to the object files to hold original intermediate representation (ir) information generated by the compiler front end. These are Pre-IPO object files. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In the second phase, the IPO extracts the &ldquo;ir&rdquo; information as a file from each of the object files and passes &ldquo;ir&rdquo; information to the optimizer <highlight><bold>535</bold></highlight> in a single invocation step whereupon interprocedural optimization is performed. Optimized &ldquo;ir&rdquo; files are passed to a code generator to generate code. Optimized object files are processed by the IPO to generate Post-IPO object files. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The following is an example of the commands a user may invoke in the first and second phases of the IPO framework process. If three source files, t<highlight><bold>1</bold></highlight>.c, t<highlight><bold>2</bold></highlight>.c, and t<highlight><bold>3</bold></highlight>.c are to be compiled by a C language driver with IPO, typical compilation of these files will explicitly generate object files and then link the object files. In this particular editor screen, &ldquo;cc&rdquo; invokes the C language driver, and -xipo invokes the IPO framework. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> cc -xipo -xO<highlight><bold>4</bold></highlight> t<highlight><bold>1</bold></highlight>.c -c </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> cc -xipo -xO<highlight><bold>4</bold></highlight> t<highlight><bold>2</bold></highlight>.c -c </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> cc -xipo -xO<highlight><bold>4</bold></highlight> t.<highlight><bold>3</bold></highlight>.c -c </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> When the command is complete, t<highlight><bold>1</bold></highlight>.o, t<highlight><bold>2</bold></highlight>.o, and t<highlight><bold>3</bold></highlight>.o are created with additional sections containing &ldquo;ir&rdquo; information. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In the second phase the following command can be invoked. </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> cc -xipo -xO<highlight><bold>4</bold></highlight> t<highlight><bold>1</bold></highlight>.o t<highlight><bold>2</bold></highlight>.o t<highlight><bold>3</bold></highlight>.o </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Before the linker is invoked, the driver invokes IPO. IPO extracts &ldquo;ir&rdquo; information for each object file (t<highlight><bold>1</bold></highlight>.o, t<highlight><bold>2</bold></highlight>.o, and t<highlight><bold>3</bold></highlight>.o) and invokes the IPO optimizer. IPO passes the resulting optimized &ldquo;ir&rdquo; files to code generator(s) to generate optimized object files. </paragraph>
<paragraph id="P-0048" lvl="7"><number>&lsqb;0048&rsqb;</number> Dependency Information </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> File dependency information is maintained to avoid reoptimizing source files while performing the interprocedural optimizations after changes to one or more source files. The module dependency information is generated by the optimizer and added to the PostIPO object files by adding extra information to the machine object file. IPO later uses this information to decide which files to reoptimize after any source modification. A dependency is said to be created when a function is optimized based on the content of another function. For example, a dependency, &ldquo;func1&rdquo; depends on &ldquo;func2,&rdquo; is created when the function &ldquo;func1&rdquo; is optimized with an assumption of some of the characteristics of function &ldquo;func2.&rdquo; Some examples of characteristics of a function are, modification of a global variable, absence of any modification of a global variable, or simply the content of the whole function. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> If the function &ldquo;func2&rdquo; is modified by the user, there is a possibility that an assumption made earlier in optimizing the function &ldquo;func1&rdquo; is violated by the modification. The function &ldquo;func1&rdquo; then needs to be reoptimized to reflect the change. IPO carries the function dependency information to file level, so it can decipher that, for example, t<highlight><bold>1</bold></highlight>.c needs to be reoptimized if there exists a function in a source file which is dependent on a function in another source file and the second source file has been modified. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The following to decide which files must be reoptimized during the second pass on optimizer. An object file will be reoptimized by using the &ldquo;ir&rdquo; information in the object file if one of the following conditions holds: </paragraph>
<paragraph id="P-0052" lvl="2"><number>&lsqb;0052&rsqb;</number> 1. It is a PreIPO object file. </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> 2. The link line is changed from the previous compilation. </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> 3. It was dependent on another file which has been recompiled without passing through a second optimization (i.e. a file it was dependent on has since become a classic object file). </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> 4. It is dependent on other file which is being reoptimized during the current compilation. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Therefore all PreIPO object files must be optimized because the PreIPO object files do not include any crossfile optimizations. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> To make sure that a PostIPO object file generated for one executable (i.e., with one set of object files) does not get used for another executable (i.e., with another set of object files), the current link line is compared with the saved link line in the PostIPO object file, and the PostIPO object file is reoptimized if the link lines are not identical. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> All files that are dependent on the files being modified must be reoptimized to take advantage of new optimization opportunities and correct any assumptions that are no longer valid. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> PostIPO object files, due to cross module optimizations (i.e., cross target file optimization), have assumptions about other files. For example, if a PostIPO object file inlines a function &ldquo;foo&rdquo; from a first file, a second file assumes a certain definition of &ldquo;foo.&rdquo; A user can modify &ldquo;foo&rdquo; in the second file and the second file can inadvertently link with the first file without activating the PreIPO, IPO option. Since the first file had already inlined the previous version of the function &ldquo;foo,&rdquo; in a naive implementation of this feature the resulting executable file will be incorrect. Such errors are caught by generating an unresolved external error at link time. Whenever a file is made dependent on another, by way of cross module optimizations. An internal global variable is created is created which is an undefined external in the module making the assumption and defined in the module about which the assumption was made. </paragraph>
<paragraph id="P-0060" lvl="7"><number>&lsqb;0060&rsqb;</number> An Example Computing and Network Environment </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram illustrating a network environment in which a system according to the present invention may be practiced. As is illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, network <highlight><bold>600</bold></highlight>, such as a private wide area network (WAN) or the Internet, includes a number of networked servers <highlight><bold>610</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) that are accessible by client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N). Communication between client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) and servers <highlight><bold>610</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) typically occurs over a publicly accessible network, such as a public switched telephone network (PSTN), a DSL connection, a cable modem connection or large bandwidth trunks (e.g., communications channels providing T1 or OC3 service). Client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) access servers <highlight><bold>610</bold></highlight>(<highlight><bold>1</bold></highlight>)(N) through, for example, a service provider. This might be, for example, an Internet Service Provider (ISP) such as America On-Line&trade;, Prodigy&trade;, CompuServe&trade; or the like. Access is typically had by executing application specific software (e.g., network connection software and a browser) on the given one of client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> One or more of client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) and/or one or more of servers <highlight><bold>610</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non-volatile memory, one or more display monitors and keyboards, one or more diskette drives, one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems which are designed to provide computing power to one or more users, either locally or remotely. Such a computer system may also include one or a plurality of I/O devices (i.e., peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I/O devices include modems, sound and video devices and specialized communication devices. Mass storage devices such as hard disks, CD-ROM drives and magneto-optical drives may also be provided, either as an integrated or peripheral device. One such example computer system, discussed in terms of client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N) is shown in detail in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a block diagram of a computer system <highlight><bold>710</bold></highlight> suitable for implementing the present invention, and example of one or more of client computers <highlight><bold>620</bold></highlight>(<highlight><bold>1</bold></highlight>)-(N). Computer system <highlight><bold>710</bold></highlight> includes a bus <highlight><bold>712</bold></highlight> which interconnects major subsystems of computer system <highlight><bold>710</bold></highlight> such as a central processor <highlight><bold>714</bold></highlight>, a system memory <highlight><bold>716</bold></highlight> (typically RAM, but which may also include ROM, flash RAM, or the like), an input/output controller <highlight><bold>718</bold></highlight>, an external audio device such as a speaker system <highlight><bold>720</bold></highlight> via an audio output interface <highlight><bold>722</bold></highlight>, an external device such as a display screen <highlight><bold>724</bold></highlight> via display adapter <highlight><bold>726</bold></highlight>, serial ports <highlight><bold>728</bold></highlight> and <highlight><bold>730</bold></highlight>, a keyboard <highlight><bold>732</bold></highlight> (interfaced with a keyboard controller <highlight><bold>733</bold></highlight>), a storage interface <highlight><bold>734</bold></highlight>, a floppy disk drive <highlight><bold>736</bold></highlight> operative to receive a floppy disk <highlight><bold>738</bold></highlight>, and a CD-ROM drive <highlight><bold>740</bold></highlight> operative to receive a CD-ROM <highlight><bold>742</bold></highlight>. Also included are a mouse <highlight><bold>746</bold></highlight> (or other point-and-click device, coupled to bus <highlight><bold>712</bold></highlight> via serial port <highlight><bold>728</bold></highlight>), a modem <highlight><bold>747</bold></highlight> (coupled to bus <highlight><bold>712</bold></highlight> via serial port <highlight><bold>730</bold></highlight>) and a network interface <highlight><bold>748</bold></highlight> (coupled directly to bus <highlight><bold>712</bold></highlight>). </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Bus <highlight><bold>712</bold></highlight> allows data communication between central processor <highlight><bold>714</bold></highlight> and system memory <highlight><bold>716</bold></highlight>, which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least <highlight><bold>66</bold></highlight> megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system <highlight><bold>710</bold></highlight> are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk <highlight><bold>744</bold></highlight>), an optical drive (e.g., CD-ROM drive <highlight><bold>740</bold></highlight>), floppy disk unit <highlight><bold>736</bold></highlight> or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem <highlight><bold>747</bold></highlight> or interface <highlight><bold>748</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Storage interface <highlight><bold>734</bold></highlight>, as with the other storage interfaces of computer system <highlight><bold>710</bold></highlight>, may connect to a standard computer readable medium for storage and/or retrieval of information, such as a fixed disk drive <highlight><bold>744</bold></highlight>. Fixed disk drive <highlight><bold>744</bold></highlight> may be a part of computer system <highlight><bold>710</bold></highlight> or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse <highlight><bold>746</bold></highlight> connected to bus <highlight><bold>712</bold></highlight> via serial port <highlight><bold>728</bold></highlight>, a modem <highlight><bold>747</bold></highlight> connected to bus <highlight><bold>712</bold></highlight> via serial port <highlight><bold>730</bold></highlight> and a network interface <highlight><bold>748</bold></highlight> connected directly to bus <highlight><bold>712</bold></highlight>. Modem <highlight><bold>747</bold></highlight> may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface <highlight><bold>748</bold></highlight> may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface <highlight><bold>748</bold></highlight> may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The operation of a computer system such as that shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory <highlight><bold>716</bold></highlight>, fixed disk <highlight><bold>744</bold></highlight>, CD-ROM <highlight><bold>742</bold></highlight>, or floppy disk <highlight><bold>738</bold></highlight>. Additionally, computer system <highlight><bold>710</bold></highlight> may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. The operating system provided on computer system <highlight><bold>710</bold></highlight> may be MS-DOS&reg;, MS-WINDOWS&reg;, OS/2&reg;, UNIX&reg;, Linux&reg; or other known operating system. Computer system <highlight><bold>710</bold></highlight> also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter, such as Netscape Navigator&reg; 8.0, Microsoft Explorer&reg; 8.0 and the like. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and/or final functional aspect of the first signal. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The foregoing described embodiment wherein the different components are contained within different other components (e.g., the various elements shown as components of computer system <highlight><bold>710</bold></highlight>). It is to be understood that such depicted architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract, but still definite sense, any arrangement of components to achieve the same functionality is effectively &ldquo;associated&rdquo; such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as &ldquo;associated with&rdquo; each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being &ldquo;operably connected&rdquo;, or &ldquo;operably coupled&rdquo;, to each other to achieve the desired functionality. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram depicting a network <highlight><bold>800</bold></highlight> in which computer system <highlight><bold>810</bold></highlight> is coupled to an internetwork <highlight><bold>810</bold></highlight>, which is coupled, in turn, to client systems <highlight><bold>820</bold></highlight> and <highlight><bold>830</bold></highlight>, as well as a server <highlight><bold>840</bold></highlight>. Internetwork <highlight><bold>810</bold></highlight> (e.g., the Internet) is also capable of coupling client systems <highlight><bold>820</bold></highlight> and <highlight><bold>830</bold></highlight>, and server <highlight><bold>840</bold></highlight> to one another. With reference to computer system <highlight><bold>810</bold></highlight>, modem <highlight><bold>847</bold></highlight>, network interface <highlight><bold>848</bold></highlight> or some other method can be used to provide connectivity from computer system <highlight><bold>810</bold></highlight> to internetwork <highlight><bold>810</bold></highlight>. Computer system <highlight><bold>810</bold></highlight>, client system <highlight><bold>820</bold></highlight> and client system <highlight><bold>830</bold></highlight> are able to access information on server <highlight><bold>840</bold></highlight> using, for example, a web browser (not shown). Such a web browser allows computer system <highlight><bold>810</bold></highlight>, as well as client systems <highlight><bold>820</bold></highlight> and <highlight><bold>830</bold></highlight>, to access data on server <highlight><bold>840</bold></highlight> representing the pages of a website hosted on server <highlight><bold>840</bold></highlight>. Protocols for exchanging data via the Internet are well known to those skilled in the art. Although <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts the use of the Internet for exchanging data, the present invention is not limited to the Internet or any particular network-based environment. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 6, 7</cross-reference> and <highlight><bold>8</bold></highlight>, a browser running on computer system <highlight><bold>810</bold></highlight> employs a TCP/IP connection to pass a request to server <highlight><bold>840</bold></highlight>, which can run an HTTP &ldquo;service&rdquo; (e.g., under the WINDOWS&reg; operating system) or a &ldquo;daemon&rdquo; (e.g., under the UNIX&reg; operating system), for example. Such a request can be processed, for example, by contacting an HTTP server employing a protocol that can be used to communicate between the HTTP server and the client computer. The HTTP server then responds to the protocol, typically by sending a &ldquo;web page&rdquo; formatted as an HTML file. The browser interprets the HTML file and may form a visual representation of the same using local resources (e.g., fonts and colors). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Although the present invention has been described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for compiling program files comprising: 
<claim-text>optimizing the program files into object files, wherein the object files are comprised of information indicating optimization; </claim-text>
<claim-text>maintaining cross modular functional relationship between object files; </claim-text>
<claim-text>extracting the information indicating optimization; and </claim-text>
<claim-text>linking the object files to create an executable output file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method for compiling program files of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>creating intermediate representation files prior to optimizing the program files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method for compiling program files of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein information is extracted regarding the intermediate representation files. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method for compiling program files of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the object files are further comprised of: 
<claim-text>information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> of compiling program files further comprising: 
<claim-text>extracting the information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A framework for compiling program files comprising: 
<claim-text>an optimizer for optimizing program files into object files, wherein the object files are comprised of information indicating optimization; wherein the optimizer further extracts the information indicating optimization; and </claim-text>
<claim-text>a linker linking the object files to create an executable output file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The framework for compiling program files of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein: 
<claim-text>the optimizer creates intermediate representation files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The framework for compiling program files of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein the optimizer extracts information regarding the intermediate representation files. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The framework for compiling program files of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein: 
<claim-text>the object files are further comprised of: 
<claim-text>information related to code generators. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The framework for compiling program files of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein: 
<claim-text>the optimizer extracts the information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A computer system comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a computer readable medium coupled to the processor; and </claim-text>
<claim-text>computer code, encoded in the computer readable medium, configured to cause the processor to compile program files comprising of: 
<claim-text>optimizing the program files into object files, wherein the object files are comprised of information indicating optimization; </claim-text>
<claim-text>maintaining cross modular functional relationship between object files; </claim-text>
<claim-text>extracting the information indicating optimization; and </claim-text>
<claim-text>linking the object files to create an executable output file. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the processor is further configured to comprise of: 
<claim-text>creating intermediate representation files prior to optimizing the program files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein information is extracted regarding the intermediate representation files. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the object files are further comprised of: 
<claim-text>information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the processor is further configured to comprise of: 
<claim-text>extracting the information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An apparatus for compiling program files comprising: 
<claim-text>means for optimizing the program files into object files, wherein the object files are comprised of information indicating optimization; </claim-text>
<claim-text>means for maintaining cross modular functional relationship between object files; </claim-text>
<claim-text>means for extracting the information indicating optimization; and </claim-text>
<claim-text>means for linking the object files to create an executable output file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus for compiling program files of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising: 
<claim-text>means for creating intermediate representation files prior to optimizing the program files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus for compiling program files of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein information is extracted regarding the intermediate representation files. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus for compiling program files of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the object files are further comprised of: 
<claim-text>information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> of compiling program files further comprising: 
<claim-text>extracting the information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer program product, encoded in computer readable media, comprising: 
<claim-text>a first set of instructions, executable on a computer system, configured to optimize program files into object files, wherein the object files are comprised of information indicating optimization; </claim-text>
<claim-text>a second set of instructions, executable on the computer system, configured to maintaining cross modular functional relationship between object files; </claim-text>
<claim-text>a third set of instructions, executable on the computer system, configured to extract the information indicating optimization; and </claim-text>
<claim-text>a fourth set of instructions, executable on the computer system, configured to link the object files to create an executable output file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further comprising: 
<claim-text>a sixth set of instructions, executable on a computer system, configured to create intermediate representation files prior to optimizing the program files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein information is extracted regarding the intermediate representation files. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the object files are further comprised of: 
<claim-text>information related to code generators. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> further comprising 
<claim-text>a sixth set of instructions, executable on a computer system, configured to extract the information related to code generators.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005421A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005421A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005421A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005421A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005421A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005421A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005421A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005421A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005421A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
