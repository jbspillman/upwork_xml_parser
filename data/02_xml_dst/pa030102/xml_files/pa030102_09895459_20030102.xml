<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005183A1-20030102-D00000.TIF SYSTEM "US20030005183A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00001.TIF SYSTEM "US20030005183A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00002.TIF SYSTEM "US20030005183A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00003.TIF SYSTEM "US20030005183A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00004.TIF SYSTEM "US20030005183A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00005.TIF SYSTEM "US20030005183A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00006.TIF SYSTEM "US20030005183A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00007.TIF SYSTEM "US20030005183A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00008.TIF SYSTEM "US20030005183A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005183A1-20030102-D00009.TIF SYSTEM "US20030005183A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005183</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895459</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>001000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Methods and apparatus in a logging system for the adaptive logger replacement in order to receive pre-boot information</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Michael</given-name>
<middle-name>John</middle-name>
<family-name>Burr</family-name>
</name>
<residence>
<residence-us>
<city>Apex</city>
<state>NC</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Rajeeta</given-name>
<middle-name>Lalji</middle-name>
<family-name>Shah</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Lorin</given-name>
<middle-name>Evan</middle-name>
<family-name>Ullmann</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, system, and computer program product for logging events in a data processing system is provided. In one embodiment, responsive to a determination that a situation exists preventing a primary logger from executing a logging task, a swappable adaptive logger is created, which in turn is pointed to a boot logger created by a swappable adaptive log engine. Event information is then logged to the boot logger. For example, the boot logger may write event information to memory or to a file if the logging database is unavailable. When the primary logger becomes configured and functional, the swappable adaptive logger swaps the boot logger for the primary logger and begins writing event information to the primary logger. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to computer network environments, and more specifically to logging services in distributed, multilevel architectures. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computers have come to epitomize modern life. Today, computers are used for much more than simply computing. For example, banking transactions are often conducted through automated teller machines (ATMs) connected via networks to central processing centers that keep track of transactions while computerized telephone switching systems manage the millions of calls generated each day. Furthermore, computers are integral to both peoples personal life as well as to their business life. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> As computers became more widespread in the workplace, new ways to harness their potential developed. Thus, with increasing use of computers for tasks other than simple computing has come an increase in complexity. Furthermore, as computers are increasingly networked together to provide even more functionality, that complexity is increased exponentially. To keep these networked computers operating and, therefore, ensure that ATM transactions, telephone calls, and business continue to operate smoothly, requires the work of administrators to monitor the systems and correct errors as they occur. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One tool that aids administrators in keeping networks operational is logging. Logging is the process of recording system events so that those actions can be reviewed later. Thus, if an error occurs, that error may be logged with other information to allow an administrator to discover the source of the problem and correct it. However, currently, logging is not available during certain periods when the logging depends on a component that is not ready. This occurs during the time period prior to initialization of all the components needed, such as during hardware firmware BIOS boot, native OS boot, JVM boot, ORB boot, prior to initialization of components needed by the logging system, and during initialization of the logging system. This state also occurs during the time period for which the network has failed or some other failure event yields component dependencies. Another situation in which logging messages to a logging component cannot be accomplished is when the caller is not allowed to call the callee. This is to prevent the case where one component that is used by logging is not reentrant (config calls logger which calls config). Global locking approach until all dependencies are satisfied is not an option since messages are desired from all components in all stages of a distributed boot of kernel services. Therefore, it would be desirable to have a logging system that is capable of logging during initialization periods and situations in which the a component cannot be called by the logger. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention provides a method, system, and computer program product for logging events in a data processing system. In one embodiment, responsive to a determination that a situation exists preventing a primary logger from executing a logging task, a swappable adaptive logger is created, which in turn is pointed to a boot logger created by a swappable adaptive log engine. Event information is then logged to the boot logger. For example, the boot logger may write event information to memory or to a file if the logging database is unavailable. When the primary logger becomes configured and functional, the swappable adaptive logger swaps the boot logger for the primary logger and begins writing event information to the primary logger. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram illustrating a data processing system is depicted in which the present invention may be implemented; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a block diagram of a logging subsystem in accordance with the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a process flow and program function for determining when to use a boot logger in accordance with the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a process flow and program function in a SLE for determining whether a boot logger should be created in accordance with the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a process flow and program function for creating boot logger in accordance with the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts an exemplary process flow and program function illustrating when the swappable adaptive logger should switch to the fully configured and functional logger in accordance with the present invention; and </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> FIGS. <highlight><bold>9</bold></highlight>A-<highlight><bold>9</bold></highlight>C depict block diagrams illustrating three possible states of the data processing system for logging purposes in accordance with the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In the depicted example, a plurality of servers <highlight><bold>103</bold></highlight>-<highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to servers <highlight><bold>103</bold></highlight>-<highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as servers <highlight><bold>103</bold></highlight>-<highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI local bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI local buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an IBM e-Server pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system or LINUX operating system. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, and CD-ROM drive <highlight><bold>330</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a personal digital assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The present invention provides a logging system with distributed, multilevel architecture which allows remote control of logging elements. The present invention also allows the logging system to be used standalone or in a distributed environment. The logging system allows a system to produce large amounts of data for local consumption, as opposed to a small amount of data for storage in a central remote repository. Dual output is easily configured for an administrator wishing to see logs on the console, in multiple files and in a database for future queries. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> block diagram of a logging subsystem is depicted in accordance with the present invention. The logging subsystem <highlight><bold>400</bold></highlight> uses several objects to record system events. These objects include loggers <highlight><bold>415</bold></highlight>, logging handlers <highlight><bold>424</bold></highlight>, logging filters <highlight><bold>420</bold></highlight> (also referred to as masks), and logging formatters <highlight><bold>418</bold></highlight>. Log subsystem <highlight><bold>400</bold></highlight> also includes, a logging console administrator graphical user interface (GUI) <highlight><bold>414</bold></highlight>, a logging manager <highlight><bold>422</bold></highlight>, logging output <highlight><bold>438</bold></highlight>, a swappable adaptive logging engine (SLE) <highlight><bold>450</bold></highlight>, and swappable event policy (SEP) <highlight><bold>452</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The swappable adaptive logging engine <highlight><bold>450</bold></highlight> creates a swappable adaptive logger <highlight><bold>454</bold></highlight> which is accessed by an application program to perform logging functions during boot time and other times when a fully configured and functional logger is not available, such as, for example, due to the fact that the database <highlight><bold>442</bold></highlight> has not finished being configured during initialization. The swappable adaptive logger points to a boot logger <highlight><bold>411</bold></highlight>-<highlight><bold>412</bold></highlight> during these times when the fully configured and functional logger <highlight><bold>416</bold></highlight>-<highlight><bold>417</bold></highlight> is not available and when the fully configured and functional logger <highlight><bold>416</bold></highlight>-<highlight><bold>417</bold></highlight> becomes available, the swappable adaptive logger is switched to point at the fully configured and functional logger <highlight><bold>416</bold></highlight>-<highlight><bold>417</bold></highlight>. However, to the application program this switching between loggers is invisible. The application program continues to point to the swappable adaptive logger. SEP <highlight><bold>452</bold></highlight> determines when a swappable adaptive logger <highlight><bold>454</bold></highlight> should be created and when the swappable adaptive logger should switch between a boot logger <highlight><bold>411</bold></highlight>-<highlight><bold>412</bold></highlight> and a fully configured and functional logger <highlight><bold>416</bold></highlight>-<highlight><bold>417</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Loggers <highlight><bold>415</bold></highlight> are software objects that record events that occur while a component is operating. The Logging subsystem <highlight><bold>400</bold></highlight> supports two types of loggers <highlight><bold>415</bold></highlight>: message loggers <highlight><bold>416</bold></highlight> and trace Loggers <highlight><bold>417</bold></highlight>. Message loggers <highlight><bold>416</bold></highlight> are used to record textual messages from a component. These messages are internationalized for individual locales. Trace loggers <highlight><bold>417</bold></highlight> are used to capture information about the operating environment when component code fails to operate as intended. Support personnel use the information captured by trace loggers <highlight><bold>417</bold></highlight> to trace a problem to its source or to determine why an error occurred. Generally, this information is not enabled by default. Because trace messages are intended for support personnel, they are generally written to a file that can be viewed during a postmortem Examination. Additionally, logger <highlight><bold>415</bold></highlight> includes a boot message logger <highlight><bold>411</bold></highlight> and a boot trace logger <highlight><bold>412</bold></highlight> which are created and used by the swappable adaptive logger <highlight><bold>454</bold></highlight> when a fully configured and functional logger is not available. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Handlers <highlight><bold>424</bold></highlight> are software objects that direct messages recorded by a logger to a logging output <highlight><bold>438</bold></highlight> destination. Messages can be directed to a file <highlight><bold>444</bold></highlight>, a database <highlight><bold>442</bold></highlight>, a console screen <highlight><bold>440</bold></highlight>, or to other destinations. One associates handlers <highlight><bold>424</bold></highlight> with loggers <highlight><bold>415</bold></highlight> to send information recorded by a logger <highlight><bold>415</bold></highlight> to the desired destination. The present invention provides the configuration definitions for the following types of handlers: </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> Console Handler <highlight><bold>426</bold></highlight> writes log records to a console. </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> File Handler <highlight><bold>428</bold></highlight> writes log records to a file. </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> Multifile Handler <highlight><bold>430</bold></highlight> writes log records to a rotating set of log files. </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> Serial File Handler <highlight><bold>432</bold></highlight> writes log records to files as serialized objects. </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> Database Handler <highlight><bold>434</bold></highlight> writes log records to a database. </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> Server Handler <highlight><bold>436</bold></highlight> sends log records in batch mode to a remote logging server for processing. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Boot Handler <highlight><bold>437</bold></highlight> writes log records to a file or to memory. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Filters <highlight><bold>420</bold></highlight> can be applied to loggers, to handlers <highlight><bold>424</bold></highlight>, or to both loggers and handlers. When applied to a logger, the filter determines which types of message and trace records the logger <highlight><bold>415</bold></highlight> processes. When applied to a handler <highlight><bold>424</bold></highlight>, the filter <highlight><bold>420</bold></highlight> determines which types of message and trace records the handler <highlight><bold>424</bold></highlight> sends to a destination. Filters <highlight><bold>420</bold></highlight> work by comparing a log record type against a set of criteria, or a query, contained within the filter. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Formatters <highlight><bold>418</bold></highlight> are software objects used to format the output of information contained in log records. In general, formatters <highlight><bold>418</bold></highlight> can be used to tailor things like date and time stamps to local conventions. A single formatter <highlight><bold>418</bold></highlight> can be used by multiple handlers <highlight><bold>424</bold></highlight>. Having numerous loggers <highlight><bold>416</bold></highlight>, handlers <highlight><bold>424</bold></highlight>, filters <highlight><bold>420</bold></highlight>, and formatters <highlight><bold>418</bold></highlight> can cause an undue amount of logging administration to perform. To reduce the administration burden, one can create &ldquo;groups&rdquo;. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A group contains loggers, handlers, filters, or formatters that have common properties. By creating groups, a newly created logger, handler, filter, or formatter with unset properties can inherit values for those properties from the group. If a logger, handler, filter, or formatter belongs to a group and its properties are updated, all other loggers, handlers, filters or formatters in that group will also have that property updated. This eliminates the need for manually updating individual logger, handler, filter, or formatter properties. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The logging manager <highlight><bold>422</bold></highlight> provides an interface to Object Request Brokers (ORBs) as well as configuration and other DKS services. (An ORB is software that handles the communication of messages from a requesting program (client) to the object as well as any return values from the object back to the calling program.) The logging console Graphical User Interface (GUI) provides an interface to allow an administrator to provide configuration information as well as to output messages to the administrator. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> process flow and program function for determining when to use a swappable adaptive logger is depicted in accordance with the present invention. To begin, Distributed Kernel Services (DKS) begins distributed logging boot after the hardware, operating system (OS), and Java Virtual Machine (JVM) have booted (e.g. initialized) (step <highlight><bold>502</bold></highlight>). Next, if a configuration component in the initialization step desires to perform trace logging (step <highlight><bold>504</bold></highlight>), then the configuration component calls the log manager to obtain a trace logger (step <highlight><bold>506</bold></highlight>). The log manager calls the SLE to determine if a swappable adaptive logger is needed (step <highlight><bold>508</bold></highlight>). The SLE checks swappable event policy (SEP) for creating a swappable adaptable logger and evaluates each case (step <highlight><bold>510</bold></highlight>). Next, it determines whether a swappable adaptive logger needs to be created (step <highlight><bold>512</bold></highlight>). If a swappable adaptive logger is needed, create it, otherwise proceed with logging in a normal fashion (step <highlight><bold>520</bold></highlight>). If a boot logger and boot handler have been created and the handler attached to the boot logger, then the SLE starts the SEP which determines when the swappable adaptive logger should swap the boot logger for a fully functioning logger, such as, for example, message logger <highlight><bold>416</bold></highlight> or trace logger <highlight><bold>417</bold></highlight> (step <highlight><bold>514</bold></highlight>). The SLE then returns the swappable trace logger to the log manager (step <highlight><bold>516</bold></highlight>) and the log manager returns the trace logger to the configuration component (step <highlight><bold>518</bold></highlight>). </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> process flow and program function in a SLE for determining whether a boot logger should be created is depicted in accordance with the present invention. The processes and functions depicted in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> provide more details about steps <highlight><bold>510</bold></highlight>-<highlight><bold>512</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. To begin, the SLE checks the policy for creating a boot logger (step <highlight><bold>602</bold></highlight>). The SLE determines whether the logger will call the callee (step <highlight><bold>604</bold></highlight>). If yes, then the SLE creates a boot logger (step <highlight><bold>610</bold></highlight>). </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> If the SLE determines that the logger will not call the callee, then the SLE determines whether the logger is not fully initialized (step <highlight><bold>606</bold></highlight>). This may occur, for example, when the configuration is not available of it the database in not ready. For example, if the database is not ready, then a file or memory may be used instead. If the SLE determines that the logger is not fully initialized, then the SLE creates a boot logger (step <highlight><bold>610</bold></highlight>). If the SLE determines that the logger is fully initialized, then the SLE determines whether all components needed by the logger are functional (step <highlight><bold>608</bold></highlight>). If not all components needed by the logger are functional, then the SLE creates a boot logger (step <highlight><bold>610</bold></highlight>). If all components needed by the logger are functional, then a boot logger is not created. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> process flow and program function for creating a boot logger is depicted in accordance with the present invention. To begin, the SLE creates a boot logger without configuration (step <highlight><bold>720</bold></highlight>) and the creates a boot handler without configuration (step <highlight><bold>722</bold></highlight>). The boot handler is then attached to the boot logger (step <highlight><bold>724</bold></highlight>) and the boot logger assigned to be used by the swappable adaptive logger (step <highlight><bold>726</bold></highlight>). </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, an exemplary process flow and program function for changing from the swappable adaptive logger to the fully configured and functional logger is depicted in accordance with the present invention. To begin, the SLE receives an SEP event (step <highlight><bold>802</bold></highlight>). An SEP event is an event which indicates that the logger is fully configured. For example, an SEP event could be that the logging output database has been initialized. A message logger is then created from configuration data (step <highlight><bold>804</bold></highlight>). The swappable adaptive logger is then pointed (i.e. switched) from the boot logger to the message logger (step <highlight><bold>806</bold></highlight>). Thus, the boot logger has been replaced by the message logger. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Alternatively, the process can be implemented in reverse. In this case, an SEP event is an event that indicates that the logger is not fully configured. For example, an event indicating that a component requesting logging will itself be called by the logger. In that case the logger may not be used, but rather a swappable logger must be used instead that does not need to call the callee. Thus, if an SEP event indicating that the logger is no longer fully configured is received, then the swappable adaptive logger is then pointed from the message logger to the boot logger. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> With reference now to FIGS. <highlight><bold>9</bold></highlight>A-<highlight><bold>9</bold></highlight>C, block diagrams illustrating three possible states of the data processing system for logging purposes are depicted in accordance with the present invention. <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> depicts possible state <highlight><bold>0</bold></highlight> in which the logger is not fully configured and functional. The JVM is running <highlight><bold>900</bold></highlight> and an application <highlight><bold>902</bold></highlight> calls a log manager API <highlight><bold>904</bold></highlight> that creates a swappable adaptive logger <highlight><bold>906</bold></highlight> using the log SLE. The SLE creates boot logger <highlight><bold>908</bold></highlight>, a boot handler memory <highlight><bold>910</bold></highlight>, attaches boot logger <highlight><bold>908</bold></highlight> to boot memory handler <highlight><bold>910</bold></highlight>, and assigns the boot logger <highlight><bold>908</bold></highlight> to the swappable adaptive logger <highlight><bold>906</bold></highlight>. Boot memory handler <highlight><bold>910</bold></highlight> provides an interface to input/output. In possible state <highlight><bold>0</bold></highlight>, the logging database has not been configured nor has the file system, thus, boot memory handler <highlight><bold>910</bold></highlight> provides an interface to memory <highlight><bold>912</bold></highlight> and boot logger <highlight><bold>908</bold></highlight> writes trace or message logs, as the case may be, to memory <highlight><bold>912</bold></highlight>. Once the file system has been initialized, the contents of memory <highlight><bold>912</bold></highlight> may be copied into file <highlight><bold>914</bold></highlight>, or alternatively, once a fully configured and functional logger <highlight><bold>920</bold></highlight> is available, the contents of memory <highlight><bold>912</bold></highlight> may be copied into database <highlight><bold>928</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, possible state <highlight><bold>1</bold></highlight> shows an identical situation to possible state <highlight><bold>0</bold></highlight> except that in this case, the file system has been initialized. Thus, swappable adaptive logger <highlight><bold>906</bold></highlight> now points to boot logger <highlight><bold>909</bold></highlight> which includes a boot file handler <highlight><bold>911</bold></highlight>. Thus, boot file handler <highlight><bold>911</bold></highlight> provides an interface to file <highlight><bold>914</bold></highlight> and boot logger <highlight><bold>909</bold></highlight> writes logs to file <highlight><bold>914</bold></highlight>. Once the fully configured and functional logger <highlight><bold>920</bold></highlight> is available, the <highlight><bold>4</bold></highlight>: contents of file <highlight><bold>914</bold></highlight> may be copied into database <highlight><bold>928</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 9</cross-reference>C, possible state <highlight><bold>2</bold></highlight> is illustrated. In this situation, the logging system is fully configured and functional. The JVM <highlight><bold>900</bold></highlight> is running as are the ORB services <highlight><bold>930</bold></highlight> and the configuration services <highlight><bold>932</bold></highlight>. The swappable adaptive logger <highlight><bold>906</bold></highlight> now points to the fully configured functional logger <highlight><bold>920</bold></highlight> rather than the boot logger <highlight><bold>908</bold></highlight>. The fully configured functional logger <highlight><bold>920</bold></highlight> includes a server handler <highlight><bold>922</bold></highlight> that provides and interface between the fully configured functional logger <highlight><bold>920</bold></highlight> and a logging console GUI <highlight><bold>924</bold></highlight>. The fully configured functional logger <highlight><bold>920</bold></highlight> also includes a database handler <highlight><bold>926</bold></highlight> that provides an interface between the fully configured functional logger <highlight><bold>920</bold></highlight> and a logging database <highlight><bold>928</bold></highlight>. Thus, logging information may be written to database <highlight><bold>928</bold></highlight> and also may be presented to a user through logging console GUI <highlight><bold>924</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Therefore, the application always points to the swappable adaptive logger <highlight><bold>906</bold></highlight> and does not need to make any changes based on the status of the system. All changes to loggers are performed by the swappable adaptive logger <highlight><bold>906</bold></highlight>. The swappable adaptive logger <highlight><bold>906</bold></highlight> points to various loggers based on the status of the system. Thus, when the file system and database are not available, the swappable adaptive logger <highlight><bold>906</bold></highlight> points to a boot logger that is attached to a boot memory handler <highlight><bold>910</bold></highlight> for writing log information to memory <highlight><bold>912</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. When the file system becomes available, the swappable adaptive logger swaps boot logger <highlight><bold>908</bold></highlight> for boot logger <highlight><bold>909</bold></highlight> which is attached to boot file handler <highlight><bold>911</bold></highlight> for writing log information to file <highlight><bold>914</bold></highlight> as depicted in <cross-reference target="DRAWINGS">FIG. 9B</cross-reference>. When the logging system is completely configured and functional as depicted in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, the swappable adaptive logger switches from boot logger <highlight><bold>909</bold></highlight> to fully configured functional logger <highlight><bold>920</bold></highlight>, thus allowing use of the database <highlight><bold>928</bold></highlight> and logging console GUI <highlight><bold>924</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for logging events in a data processing system, the method comprising: 
<claim-text>responsive to a determination that a situation exists preventing a primary logging system from executing a logging task, creating a boot logger; </claim-text>
<claim-text>logging event information using the boot logger; and </claim-text>
<claim-text>responsive to a determination that a primary logger is capable of accepting the event information, swapping the boot logger for the primary logger </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the situation is one of the primary logger is not fully initialized, all components needed by the primary logger are not functional, and the primary logger is required to call a component that has requested the primary logger. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is available, creating a boot file handler, attaching the boot file handler to the boot logger, and writing logging information to a file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, further comprising: 
<claim-text>responsive to the logging database becoming available, transferring logging information from the file to the logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is unavailable, creating a boot memory handler, attaching the boot memory handler to the boot logger, and writing logging information to a memory unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising: 
<claim-text>responsive to the logging database becoming available, transferring logging information from the memory unit to the logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A computer program product in a computer readable media for use in a data processing system for logging events in a data processing system, the computer program product comprising: 
<claim-text>first instructions, responsive to a determination that a situation exists preventing a primary logging system from executing a logging task, for creating a boot logger; </claim-text>
<claim-text>second instructions for logging event information using the boot logger; and </claim-text>
<claim-text>third instructions, responsive to a determination that a primary logger is capable of accepting the event information, for swapping the boot logger for the primary logger </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the situation is one of the primary logger is not fully initialized, all components needed by the primary logger are not functional, and the primary logger is required to call a component that has requested the primary logger. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>fourth instructions, responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is available, for creating a boot file handler, attaching the boot file handler to the boot logger, and writing logging information to a file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, further comprising: 
<claim-text>fifth instructions, responsive to the logging database becoming available, for transferring logging information from the file to the logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>fourth instructions, responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is unavailable, for creating a boot memory handler, attaching the boot memory handler to the boot logger, and writing logging information to a memory unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer program product as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>fifth instructions, responsive to the logging database becoming available, for transferring logging information from the memory unit to the logging database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system for logging events in a data processing system, the system comprising: 
<claim-text>A swappable adaptive event logging engine which, responsive to a determination that a situation exists preventing a primary logging system from executing a logging task, creates a boot logger; and </claim-text>
<claim-text>a swappable adaptive logger which uses the boot logger to log event information; wherein </claim-text>
<claim-text>responsive to a determination that a primary logger is capable of accepting the event information, the swappable adaptive logger swaps the boot logger for the primary logger and uses the primary logger to log event information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the situation is one of the primary logger is not fully initialized, all components needed by the primary logger are not functional, and the primary logger is required to call a component that has requested the primary logger. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the swappable adaptive logger, responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is available, creates a boot file handler, attaches the boot file handler to the boot logger, and writes logging information to a file. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the swappable adaptive logger, responsive to the logging database becoming available, transfers logging information from the file to the logging database. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the swappable adaptable logger, responsive to a determination that a logging database is unavailable and responsive to a determination that a file system is unavailable, creates a boot memory handler, attaches the boot memory handler to the boot logger, and writes logging information to a memory unit. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the swappable adaptive logger, responsive to the logging database becoming available, transfers the logging information from the memory unit to the logging database.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005183A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005183A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005183A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005183A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005183A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005183A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005183A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005183A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005183A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005183A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
