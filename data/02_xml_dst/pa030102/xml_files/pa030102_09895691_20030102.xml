<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005231A1-20030102-P00001.TIF SYSTEM "US20030005231A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00000.TIF SYSTEM "US20030005231A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00001.TIF SYSTEM "US20030005231A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00002.TIF SYSTEM "US20030005231A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00003.TIF SYSTEM "US20030005231A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00004.TIF SYSTEM "US20030005231A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00005.TIF SYSTEM "US20030005231A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00006.TIF SYSTEM "US20030005231A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00007.TIF SYSTEM "US20030005231A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00008.TIF SYSTEM "US20030005231A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00009.TIF SYSTEM "US20030005231A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00010.TIF SYSTEM "US20030005231A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005231A1-20030102-D00011.TIF SYSTEM "US20030005231A1-20030102-D00011.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005231</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895691</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>131000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Hardware emulation of parallel ATA drives with serial ATA interface</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Eng</given-name>
<middle-name>Hun</middle-name>
<family-name>Ooi</family-name>
</name>
<residence>
<residence-non-us>
<city>Georgetown</city>
<country-code>MY</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Thien</given-name>
<middle-name>Ern</middle-name>
<family-name>Ooi</family-name>
</name>
<residence>
<residence-non-us>
<city>Bayan Baru</city>
<country-code>MY</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Chai</given-name>
<middle-name>Huat</middle-name>
<family-name>Gan</family-name>
</name>
<residence>
<residence-non-us>
<city>Bukit Mertajam</city>
<country-code>MY</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An access detector detects an access type of an access to one of a plurality of serial ports interfacing to serial storage devices. The access is intended to one of a plurality of parallel channels interfacing to parallel storage devices via task file registers of the parallel channels. A mapping circuit maps the serial ports to the parallel channels. A state machine emulates a response from the one of the parallel channels based on the access type and the mapped serial ports. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to storage interface. In particular, the invention relates to interface to Advanced Technology Attachment (ATA) drives. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The parallel ATA interface has existed in substantially the same form since 1989, and has become the highest volume disk drive interface in production. However, as demand for higher transfer and storage bandwidths increases, the parallel ATA is nearing its performance limit. Serial ATA interface is introduced to replace parallel ATA. The benefits of serial ATA include high data transfer rates up to 150 MB/s (compared to 100 MB/s for parallel ATA), low cost, easy installation and configuration, low pin count, etc. However, due the large amount of parallel ATA currently in existence, the transition from parallel ATA to serial ATA may be a problem. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Parallel ATA allows up to two devices to be connected to a single port using a master/slave communication technique. One ATA device is configured as a master and the other slave. Both devices are daisy-chained together via one ribbon cable that is an unterminated multidrop bus. This bus or connection is typically referred to as a parallel channel. In addition, a personal computer (PC) may have two parallel ATA channels: a primary channel and a secondary channel. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Serial ATA, on the other hand, connects each of the two drives with individual cables in a point-to-point fashion. Software drivers for parallel ATA have to be modified to accommodate serial ATA. In addition, new serial ATA interface is preferably backward compatible with parallel ATA device drivers to avoid transition costs and provide an easy migration path. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Therefore, there is a need to have an efficient technique to emulate parallel ATA interface in a serial ATA environment. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram illustrating a system in which one embodiment of the invention can be practiced. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram illustrating an ATA controller shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> according to one embodiment of the invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram illustrating an emulator in the ATA controller shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> according to one embodiment of the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart illustrating a process to emulate a response from a parallel channel based on access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating a process to emulate a response when the access type is the first access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating a process to emulate a response when the access type is the second access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart illustrating a process to emulate a response when the access type is the third access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating a process to emulate a response when the access type is the fourth access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart illustrating a process to emulate a response when the access type is the fifth access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart illustrating a process to emulate an interrupt according to one embodiment of the invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart illustrating a process to emulate other types according to one embodiment of the invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram illustrating a computer system <highlight><bold>100</bold></highlight> in which one embodiment of the invention can be practiced. The computer system <highlight><bold>100</bold></highlight> includes a processor <highlight><bold>110</bold></highlight>, a host bus <highlight><bold>120</bold></highlight>, a memory control hub (MCH) <highlight><bold>130</bold></highlight>, a Basic Input/Output System memory <highlight><bold>135</bold></highlight>, a system memory <highlight><bold>140</bold></highlight>, an input/output control hub (ICH) <highlight><bold>150</bold></highlight>, serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight>, a mass storage device <highlight><bold>170</bold></highlight>, and input/output devices <highlight><bold>180</bold></highlight><highlight><subscript>1 </subscript></highlight>to <highlight><bold>180</bold></highlight><highlight><subscript>K</subscript></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The processor <highlight><bold>110</bold></highlight> represents a central processing unit of any type of architecture, such as embedded processors, micro-controllers, digital signal processors, superscalar computers, vector processors, single instruction multiple data (SIMD) computers, complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor <highlight><bold>110</bold></highlight> is compatible with the Intel Architecture (IA) processor, such as the IA-32 and the IA-64. The processor <highlight><bold>110</bold></highlight> typical contains a number of control registers to support memory management tasks such as virtual memory and cache memory. These tasks may include paging and segmentation. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The host bus <highlight><bold>120</bold></highlight> provides interface signals to allow the processor <highlight><bold>110</bold></highlight> to communicate with other processors or devices, e.g., the MCH <highlight><bold>130</bold></highlight>. The host bus <highlight><bold>120</bold></highlight> may support a uni-processor or multiprocessor configuration. The host bus <highlight><bold>120</bold></highlight> may be parallel, sequential, pipelined, asynchronous, synchronous, or any combination thereof. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The MCH <highlight><bold>130</bold></highlight> provides control and configuration of memory and input/output devices such as the system memory <highlight><bold>140</bold></highlight> and the ICH <highlight><bold>150</bold></highlight>. The MCH <highlight><bold>130</bold></highlight> may be integrated into a chipset that integrates multiple functionalities such as the isolated execution mode, host-to-peripheral bus interface, memory control. For clarity, not all the peripheral buses are shown. It is contemplated that the system <highlight><bold>100</bold></highlight> may also include peripheral buses such as Peripheral Component Interconnect (PCI), accelerated graphics port (AGP), Industry Standard Architecture (ISA) bus, and Universal Serial Bus (USB), etc. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The BIOS memory <highlight><bold>135</bold></highlight> stores boot-up code and data. The BIOS memory <highlight><bold>135</bold></highlight> typically is implemented with non-volatile memory such as Read Only Memory (ROM), flash memory, and other similar memories. The BIOS memory <highlight><bold>135</bold></highlight> may also be stored inside the MCH <highlight><bold>130</bold></highlight>. The BIOS memory <highlight><bold>135</bold></highlight> may contain a parallel ATA driver <highlight><bold>138</bold></highlight> to control the serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> via the ICH <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The system memory <highlight><bold>140</bold></highlight> stores system code and data. The system memory <highlight><bold>140</bold></highlight> is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory may include program code or code segments implementing one embodiment of the invention. The system memory may also include a parallel ATA driver <highlight><bold>145</bold></highlight>. The parallel ATA driver <highlight><bold>145</bold></highlight> may be part of an Operating System (OS) or an application program. The parallel ATA driver <highlight><bold>145</bold></highlight> accesses the serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> via the ICH <highlight><bold>150</bold></highlight>. The parallel ATA driver <highlight><bold>138</bold></highlight> in the BIOS memory <highlight><bold>135</bold></highlight> and the parallel ATA driver <highlight><bold>145</bold></highlight> in the memory <highlight><bold>140</bold></highlight> may or may not co-exist. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The ICH <highlight><bold>150</bold></highlight> has a number of functionalities that are designed to support I/O functions. The ICH <highlight><bold>150</bold></highlight> may also be integrated into a chipset together or separate from the MCH <highlight><bold>130</bold></highlight> to perform I/O functions. The ICH <highlight><bold>150</bold></highlight> may include a number of interface and I/O functions such as PCI bus interface, processor interface, interrupt controller, direct memory access (DMA) controller, power management logic, timer, universal serial bus (USB) interface, mass storage interface, low pin count (LPC) interface, etc. In particular, the ICH <highlight><bold>150</bold></highlight> includes an ATA controller <highlight><bold>155</bold></highlight> to control serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight>. The ATA controller <highlight><bold>155</bold></highlight> has hardware emulator for backward compatibility with the parallel ATA device drivers. The ATA controller <highlight><bold>155</bold></highlight> provides a migration path for customers to take advantage of the serial ATA interface while using the existing parallel ATA drivers. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> are mass storage devices or hard disk to store archive information such as code, programs, files, data, application, operating systems, etc. The serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> are connected to the hard drive controller <highlight><bold>155</bold></highlight> via serial ATA interface signals. The serial ATA interface, protocols, and standards follow the proposed draft entitled &ldquo;Serial ATA/High Speed Serialized AT Attachment&rdquo; by the Serial ATA Workgroup, Revision 1.0.0.1, published Apr. 9, 2001. The mass storage device <highlight><bold>170</bold></highlight> stores other archive information. The mass storage device <highlight><bold>170</bold></highlight> may include compact disk (CD) ROM <highlight><bold>172</bold></highlight>, floppy diskettes <highlight><bold>174</bold></highlight>, and hard drive <highlight><bold>176</bold></highlight>, and any other magnetic or optic storage devices. The mass storage device <highlight><bold>170</bold></highlight> provides a mechanism to read machine-readable media. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The I/O devices <highlight><bold>180</bold></highlight><highlight><subscript>1 </subscript></highlight>to <highlight><bold>180</bold></highlight><highlight><subscript>K </subscript></highlight>may include any I/O devices to perform I/O functions. Examples of I/O devices <highlight><bold>180</bold></highlight><highlight><subscript>1 </subscript></highlight>to <highlight><bold>180</bold></highlight><highlight><subscript>K </subscript></highlight>include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), network card, and any other peripheral controllers. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The present invention may be implemented by hardware, software, firmware, microcode, or any combination thereof. When implemented in software, firmware, or microcode, the elements of the present invention are the program code or code segments to perform the necessary tasks. A code segment may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a class, or any combination of instructions, data structures, or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and/or receiving information, data, arguments, parameters, or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted via any suitable means including memory sharing, message passing, token passing, network transmission, etc. The program or code segments may be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The &ldquo;processor readable medium&rdquo; may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable ROM (EROM), a floppy diskette, a compact disk (CD-ROM), an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> It is noted that the invention may be described as a process which is usually depicted as a flowchart, a flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed. A process may correspond to a method, a function, a procedure, a subroutine, a subprogram, etc. When a process corresponds to a function, its termination corresponds to a return of the function to the calling function or the main function. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> On a parallel ATA interface, after power-on, a hardware or software reset, or after execution of an Executive Device Diagnostic command, the slave device presents the diagnostic status to the master device via a PDIAG-wire in the ATA ribbon cable. Upon observing the status on the PDIAG-signal, the master device updates the status and error registers accordingly. For serial ATA interface, such direct communication between the two serial ATA devices does not exist. In addition, on a parallel ATA interface, both ATA devices on the same channel observe the signal activity on the cable. For example, the write access to the ATA Command Block registers (except the Data and Command registers) is seen and accepted by both devices. On the other hand, in serial ATA interface, each serial ATA device is independent of the other. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Another difference is the interrupt generation. On parallel ATA interface, the interrupt output pin of the ATA device(s) on the primary channel is routed to the Interrupt Request (IRQ) number 14 (IRQ 14) and the interrupt output pin of the ATA device(s) on the secondary channel is routed to the IRQ 15. On the serial ATA interface, a serial ATA device generates an interrupt by sending a Device-to-Host register Frame Information Structure (FIS) or a PIO Setup Frame Information Structure with the I bit set to &ldquo;1&rdquo;. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In order to mimic the interaction visible to the parallel ATA driver <highlight><bold>138</bold></highlight>, the emulator in the ATA controller <highlight><bold>155</bold></highlight> forwards and manipulates software accesses to both serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> which are mapped as ATA devices on virtual ATA channel. In addition, the emulator also routes the serial ATA devices&apos; interrupt to either IRQ 14 or IRQ 15. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram illustrating the ATA controller <highlight><bold>155</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> according to one embodiment of the invention. The ATA controller <highlight><bold>155</bold></highlight> includes an emulator <highlight><bold>210</bold></highlight> and serial ATA host controllers (1 and 2) <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The emulator <highlight><bold>210</bold></highlight> emulates a response of a parallel ATA device when interacting with the parallel ATA driver <highlight><bold>138</bold></highlight>. The emulator <highlight><bold>210</bold></highlight> is a hardware circuit that operates transparently to the parallel ATA driver <highlight><bold>138</bold></highlight> so that the parallel ATA driver <highlight><bold>138</bold></highlight> can still control the serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight> as if they were parallel ATA devices. The emulator <highlight><bold>210</bold></highlight> may be disabled when the ATA driver is written directly for the serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The serial ATA host controllers <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> contain registers, control circuits, and interface circuits to the serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight>, respectively. In particular, the serial ATA host controllers <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> contain the serial port task files <highlight><bold>225</bold></highlight> and <highlight><bold>235</bold></highlight>, respectively, which contain the operational registers that control and configure the corresponding serial ATA devices <highlight><bold>176</bold></highlight> and <highlight><bold>178</bold></highlight>. The serial ATA host controller <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> may be referred to as serial ports. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The emulator <highlight><bold>210</bold></highlight> selects a serial port as mapped to the parallel channel via the port 1 select or port 2 select signals. The emulator <highlight><bold>210</bold></highlight> writes data to the selected serial port via the write data signal path and reads data from the selected serial port via the corresponding read data signal paths. The serial ATA host controllers <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> provide the status and error conditions to the emulator <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram illustrating the emulator <highlight><bold>210</bold></highlight> in the ATA controller shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> according to one embodiment of the invention. The emulator <highlight><bold>210</bold></highlight> includes an access detector <highlight><bold>310</bold></highlight>, a mapping circuit <highlight><bold>320</bold></highlight>, an emulation state machine <highlight><bold>330</bold></highlight>, an emulated task file register set <highlight><bold>340</bold></highlight>, and a serial port selector <highlight><bold>350</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The access detector <highlight><bold>310</bold></highlight> detects an access type of an access to one of the serial ports <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> interfacing to the serial storage devices <highlight><bold>176</bold></highlight> ad <highlight><bold>178</bold></highlight>. The access is provided by the parallel ATA driver <highlight><bold>138</bold></highlight> and is intended to one of the parallel channels interfacing to parallel storage devices via the task file registers of the parallel channels. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The mapping circuit <highlight><bold>320</bold></highlight> maps the serial ports to the parallel channels. The mapping may be done by an address translation. A serial port may be mapped to a master or slave parallel channel according to a device (DEV) bit in the device/head register. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The emulation state machine <highlight><bold>330</bold></highlight> emulates a response from one of the parallel channels based on the access type as detected by the access detector <highlight><bold>310</bold></highlight> and the mapped serial ports as provided by the mapping circuit <highlight><bold>320</bold></highlight>. The state machine <highlight><bold>330</bold></highlight> includes a number of states to perform a sequence of operations according to the access type. As will be explained later, there are five states that correspond to emulation of the response according to five different access types and an interrupt state that corresponds to emulation of interrupt generation. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The emulated task file register set <highlight><bold>340</bold></highlight> emulates the task file registers of the parallel channels. These registers may include information about the device (DEV), busy (BSY) bits and the error register. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The serial port selector <highlight><bold>350</bold></highlight> selects one of the serial ports <highlight><bold>220</bold></highlight> and <highlight><bold>230</bold></highlight> based on the mapped serial ports provided by the mapping circuit <highlight><bold>320</bold></highlight>. For example, when the parallel ATA driver <highlight><bold>138</bold></highlight> generates an access to a parallel channel, the mapping circuit <highlight><bold>320</bold></highlight> translates the address of the parallel channel into a serial port. This mapping information is passed to the serial port selector <highlight><bold>350</bold></highlight> directly or via the state machine <highlight><bold>330</bold></highlight> to select the corresponding serial port. The selection may be performed by enabling the selected serial ATA host controller. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart illustrating a process <highlight><bold>400</bold></highlight> to emulate a response from a parallel channel based on access type according to one embodiment of the invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Upon START, the process <highlight><bold>400</bold></highlight> detects an access to the serial ATA port which is mapped to a parallel channel, either as a master or slave channel (Block <highlight><bold>410</bold></highlight>). The access is made by the parallel ATA driver. Then, the process <highlight><bold>400</bold></highlight> determines the type of access (Block <highlight><bold>420</bold></highlight>). This can be done by decoding the access information such as addresses and read/write information. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The process <highlight><bold>400</bold></highlight> determines if the access is to a bus master register except setting the START bit of Bus Master Command Register to &lsquo;1&rsquo;, a non-data command register, or a device control register (Block <highlight><bold>430</bold></highlight>). If so, the process <highlight><bold>400</bold></highlight> emulates a first type access (Block <highlight><bold>435</bold></highlight>) and is then terminated. The first type access emulation is explained in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Otherwise, the process <highlight><bold>400</bold></highlight> determines if the access is to a device/head register (Block <highlight><bold>440</bold></highlight>). If so, the process <highlight><bold>400</bold></highlight> emulates a second type access (Block <highlight><bold>445</bold></highlight>) and is then terminated. The second type access emulation is explained in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Otherwise, the process <highlight><bold>400</bold></highlight> determines if the access is a read access to a status register, an alternate register, or an error register of a selected serial port mapped to a slave parallel channel after a power-on, hardware or software reset, or an execution of the device diagnostics command (Block <highlight><bold>450</bold></highlight>). If so, the process <highlight><bold>400</bold></highlight> emulates the third type access (Block <highlight><bold>455</bold></highlight>) and is then terminated. The third type access emulation is explained in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Otherwise, the process <highlight><bold>400</bold></highlight> determines if the access is a read access to a status register or an alternate register of a serial port mapped to a master parallel channel after a power-on, hardware or software reset, or an execution of the device diagnostics command (Block <highlight><bold>460</bold></highlight>). If so, the process <highlight><bold>400</bold></highlight> emulates the fourth type access (Block <highlight><bold>465</bold></highlight>) and is then terminated. The fourth type emulation is explained in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. Otherwise, the process <highlight><bold>400</bold></highlight> determines if the access is a read access to an error register of a serial port mapped to a master parallel channel after a power-on, hardware or software reset, or an execution of the device diagnostics command (Block <highlight><bold>470</bold></highlight>). If so, the process <highlight><bold>400</bold></highlight> emulates the fifth type access (Block <highlight><bold>475</bold></highlight>) and is then terminated. Otherwise, the process <highlight><bold>400</bold></highlight> emulates other types (Block <highlight><bold>485</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating the process <highlight><bold>435</bold></highlight> to emulate a response when the access type is the first access type according to one embodiment of the invention. The process <highlight><bold>435</bold></highlight> is performed by the first state in the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Upon START, the process <highlight><bold>435</bold></highlight> determines if the access is a write access (Block <highlight><bold>510</bold></highlight>). If so, the process <highlight><bold>435</bold></highlight> writes the data to the selected serial port that is mapped to the parallel channel (Block <highlight><bold>515</bold></highlight>) and is then terminated. Otherwise, the access is a read access and the process <highlight><bold>435</bold></highlight> reads the data from the selected serial port that is mapped to the parallel channel according to the device (DEV) bit (Block <highlight><bold>520</bold></highlight>). Then, the process <highlight><bold>435</bold></highlight> returns the read data to the access requester and is then terminated. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating the process <highlight><bold>445</bold></highlight> to emulate a response when the access type is the second access type according to one embodiment of the invention. The process <highlight><bold>445</bold></highlight> is performed by the second state in the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Upon START, the process <highlight><bold>445</bold></highlight> determines if the access is a write access (Block <highlight><bold>610</bold></highlight>). If so, the process <highlight><bold>445</bold></highlight> writes the data to the selected serial port which is mapped to a master parallel channel (Block <highlight><bold>620</bold></highlight>). Then, the process <highlight><bold>445</bold></highlight> inverts the device (DEV) bit to the serial port mapped to a slave parallel channel (Block <highlight><bold>630</bold></highlight>). Next, the process <highlight><bold>445</bold></highlight> saves the DEV value internally (Block <highlight><bold>640</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> If the access is a read access, the process <highlight><bold>445</bold></highlight> determines if the access is a special case which accesses to a slave parallel channel without a serial port mapped to it in a single master configuration (Block <highlight><bold>650</bold></highlight>). If so, the process <highlight><bold>445</bold></highlight> reads the data from the selected serial port mapped to a master parallel channel (Block <highlight><bold>670</bold></highlight>). Then, the process <highlight><bold>445</bold></highlight> returns the DEV bit with a logical one (Block <highlight><bold>680</bold></highlight>). Next, the process <highlight><bold>445</bold></highlight> returns the read data (Block <highlight><bold>690</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> If the access is not a special case, the process <highlight><bold>445</bold></highlight> reads the data from the serial port mapped to the parallel channel according to the DEV bit and returns the internally saved DEV bit (Block <highlight><bold>660</bold></highlight>). Then, the process <highlight><bold>445</bold></highlight> returns the read data (Block <highlight><bold>690</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart illustrating the process <highlight><bold>455</bold></highlight> to emulate a response when the access type is the third access type according to one embodiment of the invention. The process <highlight><bold>455</bold></highlight> is performed by the third state in the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Upon START, the process <highlight><bold>455</bold></highlight> reads the data from the selected serial port mapped to a parallel channel according to the DEV bit (Block <highlight><bold>710</bold></highlight>). Then, the process <highlight><bold>455</bold></highlight> returns the read data (Block <highlight><bold>720</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating the process <highlight><bold>465</bold></highlight> to emulate a response when the access type is the fourth access type according to one embodiment of the invention. The process <highlight><bold>465</bold></highlight> is performed by the fourth state in the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Upon START, the process <highlight><bold>465</bold></highlight> determines if the access is to a non-existent slave device in a single master configuration (Block <highlight><bold>810</bold></highlight>). If so, the process <highlight><bold>465</bold></highlight> returns the first status (e.g., &ldquo;00&rdquo;) (Block <highlight><bold>820</bold></highlight>) and is then terminated. Otherwise, the process <highlight><bold>465</bold></highlight> determines if there is absence of both master and slave devices and thus the access is to a non-existent device (Block <highlight><bold>830</bold></highlight>). If so, the process <highlight><bold>465</bold></highlight> returns the second status (e.g., &ldquo;7F&rdquo; in hexadecimal) (Block <highlight><bold>840</bold></highlight>) and is then terminated. Otherwise, the process <highlight><bold>465</bold></highlight> reads the data from the serial port mapped to the parallel channel (Block <highlight><bold>850</bold></highlight>). Then, the process <highlight><bold>465</bold></highlight> merges the read data (Block <highlight><bold>860</bold></highlight>). Next, the process <highlight><bold>465</bold></highlight> performs a logical OR operation on the busy (BSY) bits of the read data (Block <highlight><bold>870</bold></highlight>). Then, the process <highlight><bold>465</bold></highlight> returns the result of the OR operation and the read data (Block <highlight><bold>880</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart illustrating the process <highlight><bold>475</bold></highlight> to emulate a response when the access type is the fifth access type according to one embodiment of the invention. The process <highlight><bold>475</bold></highlight> is performed by the fifth state in the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Upon START, the process <highlight><bold>475</bold></highlight> reads the first error indication from the selected serial port mapped to a master parallel channel (Block <highlight><bold>910</bold></highlight>). Next, the process <highlight><bold>475</bold></highlight> examines the second error indication of the serial port mapped to a slave parallel channel (Block <highlight><bold>920</bold></highlight>). Then, the process <highlight><bold>475</bold></highlight> determines if the first error indication indicates a passing status (Block <highlight><bold>930</bold></highlight>). If not, the process <highlight><bold>475</bold></highlight> goes to Block <highlight><bold>970</bold></highlight>. If so, the process <highlight><bold>475</bold></highlight> determines if the second error indication indicates a passing or a device-not-present status (Block <highlight><bold>940</bold></highlight>). If so, the process <highlight><bold>475</bold></highlight> returns a first error code (e.g., &ldquo;01&rdquo;) (Block <highlight><bold>950</bold></highlight>) and is then terminated. Otherwise, the process <highlight><bold>475</bold></highlight> returns a second error code (e.g., &ldquo;81&rdquo; in hexadecimal) (Block <highlight><bold>460</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> At block <highlight><bold>970</bold></highlight>, the process <highlight><bold>475</bold></highlight> determines if the second error indication indicates a passing status. If so, the process <highlight><bold>475</bold></highlight> returns a third error code (e.g., &ldquo;00&rdquo; or &ldquo;02&rdquo; to &ldquo;7F&rdquo; in hexadecimal) (Block <highlight><bold>980</bold></highlight>) and is then terminated. Otherwise, the process <highlight><bold>475</bold></highlight> returns a fourth error code (e.g., &ldquo;80&rdquo; or &ldquo;82&rdquo; to &ldquo;FF&rdquo; in hexadecimal) and is then terminated. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart illustrating a process <highlight><bold>1000</bold></highlight> to emulate an interrupt according to one embodiment of the invention. The process <highlight><bold>1000</bold></highlight> is perform by an interrupt state of the state machine <highlight><bold>330</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Upon START, the process <highlight><bold>1000</bold></highlight> determines if the serial ATA device generate an interrupt (Block <highlight><bold>1010</bold></highlight>). This is indicated by the setting of the I bit in the Device-to-Host register FIS or PIO Setup FIS. If not, the process <highlight><bold>1000</bold></highlight> is terminated. Otherwise, the process <highlight><bold>1000</bold></highlight> determines if the serial port is mapped to a primary parallel channel (Block <highlight><bold>1020</bold></highlight>). If so, the process <highlight><bold>1000</bold></highlight> generates an interrupt corresponding to the interrupt request (IRQ) 14 (Block <highlight><bold>1030</bold></highlight>). Otherwise, the serial port is mapped to a secondary parallel channel and the process <highlight><bold>1000</bold></highlight> generates an interrupt corresponding to the IRQ 15 (Block <highlight><bold>1040</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart illustrating the process <highlight><bold>485</bold></highlight> to emulate other types according to one embodiment of the invention. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Upon START, the process <highlight><bold>485</bold></highlight> determines if the access is a write access (Block <highlight><bold>1110</bold></highlight>). If so, the process <highlight><bold>485</bold></highlight> writes the data to the selected serial port that is mapped to the parallel channel according to the device (DEV) bit (Block <highlight><bold>1120</bold></highlight>) and is then terminated. Otherwise, the access is a read access and the process <highlight><bold>485</bold></highlight> reads the data from the selected serial port that is mapped to the parallel channel according to the device (DEV) bit (Block <highlight><bold>1130</bold></highlight>). Then, the process <highlight><bold>485</bold></highlight> returns the read data to the access requester (Block <highlight><bold>1140</bold></highlight>) and is then terminated. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention. For example, although the above description refers to serial and parallel ATA interfaces, the technique can be applied to any point-to-point interface. 
<image file="US20030005231A1-20030102-P00001.TIF" id="EMI-00001"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus comprising: 
<claim-text>an access detector to detect an access type of an access to one of a plurality of serial ports interfacing to serial storage devices, the access being intended to one of a plurality of parallel channels interfacing to parallel storage devices via task file registers of the parallel channels; </claim-text>
<claim-text>a mapping circuit to map the serial ports to the parallel channels; and </claim-text>
<claim-text>a state machine coupled to the access detector and the mapping circuit to emulate a response from the one of the parallel channels based on the access type and the mapped serial ports. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>a plurality of registers coupled to the state machine and the access detector to emulate the task file registers of the parallel channels; and </claim-text>
<claim-text>a serial port selector coupled to the state machine and the serial ports to select the one of the serial ports based on the mapped serial ports. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the access type is one of first, second, third, fourth, and fifth access types. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the first access type includes a first read to one of a bus master register, a non-data command register, and a device control register, and a first write to one of a bus master register except setting a START bit of bus master command register to a logical one, a non-data command register, and a device control register. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a first write state to write data to the selected serial port mapped to the one of the parallel channels when the access type is the first write; and </claim-text>
<claim-text>a first read state to read data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the first read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the second access type includes one of a second read from and a second write to a device/head register. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a second write state to write data to the selected serial port mapped to a master parallel channel when the access type is the second write, the second write state inverting a device bit to the selected serial port mapped to a slave parallel channel when the access type is the second write; </claim-text>
<claim-text>a device state to save internally the device bit when the access type is the second write; and </claim-text>
<claim-text>a second read state to read data from the selected serial port mapped to the one of the parallel channel and to return the internally saved device bit when the access type is the second read in a master-slave configuration, the second read state reading from the selected serial port mapped to a master parallel channel and returning the device bit with a logical one when the access type is the second read to a slave parallel channel in a single master configuration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the third access type includes a third read to one of a status register, an alternate status register, and an error register of the selected serial port mapped to a slave parallel channel after a power-on or a reset and execution of a device diagnostics command. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a third read state to read data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the third read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the fourth access type includes a fourth read to one of a status register and an alternate status register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a fourth read state to read data from the selected serial ports mapped to the one of the parallel channels and merge the read data when the access type is the fourth read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the fourth read state performs a logical OR operation on the busy (BSY) bits from the read data. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the fourth read state provides one of first and second codes according to device existence. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the fifth access type includes a fifth read to an error register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a fifth read state to read a first error indication from the selected serial port mapped to the master parallel channel and to examine a second error indication of a serial port mapped to a slave parallel channel when the access type is the fifth read, the fifth read state returning an error code according to the first and second error indications of the serial ports mapped to the master and slave parallel channels. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the fifth read state saves an error indication of the serial port mapped to the slave parallel channel when a device bit is changed to a logical one, the first error indication and the saved error indication being returned as the error code for the serial port mapped to the master parallel channel. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>an interrupt state to generate first and second interrupt signals according to an interrupt bit provided by one of the serial storage devices when the selected serial port is mapped to master and slave parallel channels, respectively. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method comprising: 
<claim-text>detecting an access type of an access to one of a plurality of serial ports interfacing to serial storage devices, the access being intended to one of a plurality of parallel channels interfacing to parallel storage devices via task file registers of the parallel channels; </claim-text>
<claim-text>mapping the serial ports to the parallel channels; and </claim-text>
<claim-text>emulating a response from the one of the parallel channels based on the access type and the mapped serial ports by a state machine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> further comprising: 
<claim-text>emulating the task file registers of the parallel channels; and </claim-text>
<claim-text>selecting the one of the serial ports based on the mapped serial ports. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the access type is one of first, second, third, fourth, and fifth access types. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the first access type includes a first read to one of a bus master register, a non-data command register, and a device control register, and a first write to one of a bus master register except setting a START bit of bus master command register to a logical one, a non-data command register, and a device control register. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>writing data to the selected serial port mapped to the one of the parallel channels when the access type is the first write; and </claim-text>
<claim-text>reading data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the first read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the second access type includes one of a second read from and a second write to a device/head register. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>writing data to the selected serial port mapped to a master parallel channel when the access type is the second write; </claim-text>
<claim-text>inverting a device bit to the selected serial port mapped to a slave parallel channel when the access type is the second write; </claim-text>
<claim-text>saving internally the device bit when the access type is the second write; and </claim-text>
<claim-text>reading data from the selected serial port mapped to the one of the parallel channel; </claim-text>
<claim-text>returning the internally saved device bit when the access type is the second read in a master-slave configuration; and </claim-text>
<claim-text>reading from the selected serial port mapped to a master parallel channel and returning the device bit with a logical one when the access type is the second read to a slave parallel channel in a single master configuration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the third access type includes a third read to one of a status register, an alternate status register, and an error register of the selected serial port mapped to a slave parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>reading data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the third read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the fourth access type includes a fourth read to one of a status register and an alternate status register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>reading data from the selected serial ports mapped to the one of the parallel channels and merging the read data when the access type is the fourth read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein reading data when the access type is the fourth read comprises performing a logical OR operation on the busy (BSY) bits from the read data. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein reading data when the access type is the fourth read comprises providing one of first and second codes according to device existence. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein the fifth access type includes a fifth read to an error register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>reading a first error indication from the selected serial port mapped to the master parallel channel when the access type is the fifth read; </claim-text>
<claim-text>examining a second error indication of a serial port mapped to a slave parallel channel when the access type is the fifth read; </claim-text>
<claim-text>returning an error code according to the first and second error indications of the serial ports mapped to the master and slave parallel channels. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference> wherein emulating the response further comprises: 
<claim-text>saving an error indication of the serial port mapped to the slave parallel channel when a device bit is changed to a logical one and the access type is the fifth read; and </claim-text>
<claim-text>returning the error code according to the first and the saved error indications to the serial port mapped to the master parallel channel when the access type is the fifth read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein emulating the response comprises: 
<claim-text>generating first and second interrupt signals according to an interrupt bit provided by one of the serial storage devices when the selected serial port is mapped to master and slave parallel channels, respectively. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A system comprising: 
<claim-text>a plurality of serial storage devices; and </claim-text>
<claim-text>a chipset coupled to the serial storage devices, the chipset having a serial storage controller, the serial storage controller comprising: 
<claim-text>an access detector to detect an access type of an access to one of a plurality of serial ports interfacing to the serial storage devices, the access being intended to one of a plurality of parallel channels interfacing to parallel storage devices via task file registers of the parallel channels, </claim-text>
<claim-text>a mapping circuit to map the serial ports to the parallel channels, and </claim-text>
<claim-text>a state machine coupled to the access detector and the mapping circuit to emulate a response from the one of the parallel channels based on the access type and the mapped serial ports. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein the serial storage controller further comprises: 
<claim-text>a plurality of registers coupled to the state machine and the access detector to emulate the task file registers of the parallel channels; and </claim-text>
<claim-text>a serial port selector coupled to the state machine and the serial ports to select the one of the serial ports based on the mapped serial ports. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein the access type is one of first, second, third, fourth, and fifth access types. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the first access type includes a first read to one of a bus master register, a non-data command register, and a device control register, and a first write to one of a bus master register except setting a START bit of bus master command register to a logical one, a non-data command register, and a device control register. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a first write state to write data to the selected serial port mapped to the one of the parallel channels when the access type is the first write; and </claim-text>
<claim-text>a first read state to read data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the first read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the second access type includes one of a second read from and a second write to a device/head register. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a second write state to write data to the selected serial port mapped to a master parallel channel when the access type is the second write, the second write state inverting a device bit to the selected serial port mapped to a slave parallel channel when the access type is the second write; </claim-text>
<claim-text>a device state to save internally the device bit when the access type is the second write; and </claim-text>
<claim-text>a second read state to read data from the selected serial port mapped to the one of the parallel channel and to return the internally saved device bit when the access type is the second read in a master-slave configuration, the second read state reading from the selected serial port mapped to a master parallel channel and returning the device bit with a logical one when the access type is the second read to a slave parallel channel in a single master configuration. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the third access type includes a third read to one of a status register, an alternate status register, and an error register of the selected serial port mapped to a slave parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a third read state to read data from the selected serial port mapped to the one of the parallel channels according to a device bit when the access type is the third read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the fourth access type includes a fourth read to one of a status register and an alternate status register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a fourth read state to read data from the selected serial ports mapped to the one of the parallel channels and merge the read data when the access type is the fourth read. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference> wherein the fourth read state performs a logical OR operation on the busy (BSY) bits from the read data. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference> wherein the fourth read state provides one of first and second codes according to device existence. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the fifth access type includes a fifth read to an error register of the selected serial port mapped to a master parallel channel after a power-on or a reset and execution of an Execute Device Diagnostics command. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>a fifth read state to read a first error indication from the selected serial port mapped to the master parallel channel and to examine a second error indication of a serial port mapped to a slave parallel channel when the access type is the fifth read, the fifth read state returning an error code according to the first and second error indications of the serial ports mapped to the master and slave parallel channels. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 49</dependent-claim-reference> wherein the fifth read state saves an error indication of the serial port mapped to the slave parallel channel when a device bit is changed to a logical one, the first error indication and the saved error indication being returned as the error code for the serial port mapped to the master parallel channel. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein the state machine comprises: 
<claim-text>an interrupt state to generate first and second interrupt signals according to an interrupt bit provided by one of the serial storage devices when the selected serial port is mapped to master and slave parallel channels, respectively.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005231A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005231A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005231A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005231A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005231A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005231A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005231A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005231A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005231A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005231A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005231A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005231A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
