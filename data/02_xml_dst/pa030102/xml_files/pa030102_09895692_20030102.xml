<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005200A1-20030102-D00000.TIF SYSTEM "US20030005200A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00001.TIF SYSTEM "US20030005200A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00002.TIF SYSTEM "US20030005200A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00003.TIF SYSTEM "US20030005200A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00004.TIF SYSTEM "US20030005200A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00005.TIF SYSTEM "US20030005200A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005200A1-20030102-D00006.TIF SYSTEM "US20030005200A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005200</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895692</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>302000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Platform and method for representing and supporting hot-plugged nodes</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Mohan</given-name>
<middle-name>J.</middle-name>
<family-name>Kumar</family-name>
</name>
<residence>
<residence-us>
<city>Aloha</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Shivnandan</given-name>
<middle-name>D.</middle-name>
<family-name>Kaushik</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>James</given-name>
<middle-name>B.</middle-name>
<family-name>Crossland</family-name>
</name>
<residence>
<residence-us>
<city>Banks</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Linda</given-name>
<middle-name>J.</middle-name>
<family-name>Rankin</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>J.</middle-name>
<family-name>O&apos;Shea</family-name>
</name>
<residence>
<residence-us>
<city>Costa Mesa</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">One aspect of the invention relates to creation of a container object being part of software that is stored in platform readable medium and executed by a processor within a platform. The container comprises (i) a hardware identification object to identify to an operating system of the platform that a type of device represented by the container object is a node and (ii) a plurality of component objects to identify constituent components of the node. Another aspect of the invention is the distribution of BIOS to handle initiation of components of a substrate in response to hot-plug addition of that substrate. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to the field of computers. In particular, the invention relates to a platform employing a mechanism for representing and supporting a hot-plugged node and its constituent components as a collective unit to its operating system. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Advances in technology have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce over the Internet has become widely accepted, requiring many companies to either install one or more servers to host a web site and maintain accessible databases or to contract with data centers to provide such services. In addition to performance, important functional characteristics for these servers include reliability, availability and serviceability. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Normally, conventional server architectures feature both processors and memory coupled to a front-side bus. This conventional server architecture greatly hinders server performance due to a number of factors. For instance, one factor is that the front-side bus is non-scalable. Thus, as more processors and memory have access to the front-side bus, bandwidth constraints associated with that bus adversely effect overall server performance. Multi-node architectures where processors, memory and input/output (I/O) components are distributed across multiple interconnected nodes overcomes the limitations of front-side bus and enables building larger systems with scalable server performance. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Another factor is that any node, namely a primary component interconnected to a group of components (referred to as &ldquo;constituent components&rdquo;), may be hot-plugged to allow its addition or removal while the operating system (OS) of the server continues to operate. In order to provide a hot-plug solution, however, the constituent components must be represented and visible to the OS of the server. One option is to represent the constituent components, such as one or more processors and memories for example, separately in accordance with a platform firmware interface such as the Advanced Configuration and Power Interface (ACPI) Specification (Version 2.0) published Jul. 27, 2000. However, for those platforms supporting non-uniform memory access (NUMA) architectures, this separate representation poses a number of disadvantages. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> For instance, one disadvantage is that the OS would not able to determine proximity relationships between nodes. In other words, the OS would not be able to determine which processor(s) and which memory are interconnected to the same node and adjacent to each other. Such proximity data, if available, would allow the OS to attempt to allocate memory for a processor from the same node in order to avoid time latency penalties caused by accessing memory that is remotely located from that processor. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Another disadvantage is that, during removal of a hot-plugged node, the OS is unable to simultaneously determine which components were removed with the node. Also, during addition of a hot-plugged node inclusive of a processor and memory, the OS of the server may initialize the processor prior to activation of the memory. Hence, the processor specific memory allocation may be inefficient because remotely located memory would be allocated to the processor before local memory is available. This would adversely impact overall server performance and further complicate removal of hot-plugged nodes. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Also, it is contemplated that processor(s) and memory of a node must be initialized to a known state before the OS is made aware of them. When the node is hot-plugged and separate from the substrate maintaining the Basic Input/Output System (BIOS), the BIOS cannot be used for initialization of the processor(s) and memory. One reason is that when the platform under control of the OS, the OS only allows nodes to initiate non-coherent transactions until recognized by the OS. However, the hot-plugged node need to initiate coherent (memory) transactions to reprogram registers to enable various communication ports and links. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a first exemplary embodiment of a substrate layout for a platform utilizing the invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a second exemplary embodiment of a substrate layout of a platform utilizing the invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an exemplary embodiment of a scalability node controller implemented within the platforms of FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an exemplary embodiment of a scalability port switch implemented within the platforms of FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an exemplary embodiment of the platform of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> prior to undergoing dynamic partitioning. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an exemplary embodiment of the platform of FIGS. <highlight><bold>2</bold></highlight> after undergoing dynamic partitioning to produce two 4-way platforms. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an exemplary embodiment of representation of a container object that is representative of a node and generally consistent with ACPI standards. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The invention relates to a platform and method for supporting and representing a hot-plugged node and its constituent components as a collective unit to its operating system (OS). The constituent components are initialized to a known state through a distributed BIOS mechanism before the OS is made aware of their presence. For this embodiment, the platform is configured with OS-directed device configuration and power management of both the node/components and the platform itself. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Herein, certain details are set forth in order to provide a thorough understanding of the invention. It is apparent to a person of ordinary skill in the art, however, that the invention may be practiced through many embodiments other that those illustrated. Well-known circuits and ACPI parameters are not set forth in detail in order to avoid unnecessarily obscuring the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In the following description, terminology is used to discuss certain features of the present invention. For example, a &ldquo;platform&rdquo; includes hardware equipment and/or software that process data. One type of platform is a computer such as a server, although other types of hardware equipment may employ aspects of the invention. A &ldquo;code segment&rdquo; is a piece of software (e.g., code or instructions) that, when executed, performs a certain function. Software code is stored in platform readable medium, which may include any medium that can store or transfer information. Examples of the platform readable medium include an electronic circuit, a semiconductor memory device, a volatile memory (e.g., random access memory &ldquo;RAM&rdquo;), a non-volatile memory (e.g., read-only memory, a flash memory, etc.), a floppy diskette, a compact disk, an optical disk, a hard drive disk, a fiber optic medium, and the like. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In addition, a &ldquo;device&rdquo; is a single component or a collection of interconnected components that is also referred to as a &ldquo;node&rdquo;. Herein, a node may be referenced and identified by its primary component. Each component may be an active device (e.g., integrated circuit, timing or clocking components, etc.), but it is contemplated that the invention may be applicable for use with passive components (e.g., resistors, capacitors, inductors, etc.). A &ldquo;link&rdquo; is broadly defined as any type of information-carrying medium such as electrical wire, optical fiber, cable, trace bus or even wireless signaling technology. In addition, the term &ldquo;hot-plug&rdquo; or any tense thereof indicates a characteristic where a device may be added, removed or replaced while the OS of the platform continues to operate. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> I. Platform Hardware Architecture Overview with Distributed BIOS </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> first exemplary embodiment of a platform utilizing the invention is shown. The platform <highlight><bold>100</bold></highlight> comprises a processor substrate <highlight><bold>110</bold></highlight>, an input/output (I/O) substrate <highlight><bold>170</bold></highlight> and an interconnection substrate <highlight><bold>150</bold></highlight> that couples devices mounted on the processor substrate <highlight><bold>110</bold></highlight> with those on the I/O substrate <highlight><bold>170</bold></highlight>. Each &ldquo;substrate&rdquo; is formed from any type of material or combination of materials upon which integrated circuits as well as a wide variety of other types of devices (e.g., passive, sockets, timing, etc.) can be attached. Each substrate may be produced in a number of form factors such as, for example, a circuit board acting as a motherboard or a removable daughter card. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As shown, the processor substrate <highlight><bold>110</bold></highlight> comprises a first scalable node controller (SNC<highlight><bold>0</bold></highlight>) <highlight><bold>120</bold></highlight> that is configured with hot-plug capability as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> is coupled to a connector <highlight><bold>115</bold></highlight> placed at an edge of the substrate <highlight><bold>110</bold></highlight>. This connector <highlight><bold>115</bold></highlight> is adapted for coupling with a mating connector <highlight><bold>155</bold></highlight> placed on the interconnection substrate <highlight><bold>150</bold></highlight>. SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> is further coupled to a processor cluster <highlight><bold>125</bold></highlight> supporting one or more processors <highlight><bold>127</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>127</bold></highlight><highlight><subscript>M </subscript></highlight>(&ldquo;M&rdquo; being a positive integer), a local memory cluster <highlight><bold>130</bold></highlight> having one or more banks of memory <highlight><bold>133</bold></highlight> and a firmware hub <highlight><bold>140</bold></highlight>. The firmware hub <highlight><bold>140</bold></highlight> is configured to store Basic Input/Output System (BIOS) <highlight><bold>141</bold></highlight> configured for partial initialization of components and enablement of links therefrom as described in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (hereinafter referred to as &ldquo;INIT BIOS&rdquo;). </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> features two scalability port interfaces <highlight><bold>124</bold></highlight> (see also <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) that are both coupled to connector <highlight><bold>115</bold></highlight> via links <highlight><bold>160</bold></highlight> and <highlight><bold>165</bold></highlight>. This enables data to be routed from SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> to a Server Input/Output Hub (SIOH) <highlight><bold>180</bold></highlight> via connectors <highlight><bold>115</bold></highlight> and <highlight><bold>155</bold></highlight> as well as connector <highlight><bold>175</bold></highlight> of I/O substrate <highlight><bold>170</bold></highlight>. SIOH<highlight><bold>0</bold></highlight> <highlight><bold>180</bold></highlight> provides communications with high-speed links. For example, SIOH<highlight><bold>0</bold></highlight> <highlight><bold>180</bold></highlight> provides coupling to one or more bridges <highlight><bold>185</bold></highlight> (e.g., P64H2 devices) that support communications with one or more I/O buses such as a Peripheral Component Interconnect &ldquo;PCI&rdquo; bus and/or a higher speed PCI bus which is referred to as the &ldquo;PCI-X bus&rdquo; for example. SIOH<highlight><bold>0</bold></highlight> <highlight><bold>180</bold></highlight> further provides coupling to a virtual interface bridge (VXB) <highlight><bold>190</bold></highlight> (also referred to as &ldquo;host channel adapter&rdquo;) and an I/O Riser substrate <highlight><bold>195</bold></highlight> having an input/output control hub (ICH<highlight><bold>2</bold></highlight>) <highlight><bold>196</bold></highlight> mounted thereon. The VXB <highlight><bold>190</bold></highlight> provides a four 10-bit system I/O full-duplex channels. ICH<highlight><bold>2</bold></highlight> <highlight><bold>196</bold></highlight> supports a number of functions that are designed to support platform security in addition to traditional I/O and platform boot functions. ICH<highlight><bold>2</bold></highlight> <highlight><bold>196</bold></highlight> enables communications with a boot flash containing a system BIOS for booting the platform (not shown), networking ports as well as various I/O peripherals such as a mouse, alphanumeric keyboard, and the like (not shown). </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> second exemplary embodiment of a multi-node platform utilizing the invention is shown. Platform <highlight><bold>200</bold></highlight> is configured to support multiple processor substrates that enable the M-way processor-based platform <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> to be converted to the M&plus;N-way platform <highlight><bold>200</bold></highlight> as shown. For this embodiment, as shown, platform <highlight><bold>200</bold></highlight> comprises first processor substrate <highlight><bold>110</bold></highlight> and a second processor substrate <highlight><bold>210</bold></highlight>, both coupled to a multi-substrate interconnection substrate <highlight><bold>250</bold></highlight>. The dual-substrate interconnection substrate <highlight><bold>250</bold></highlight> is coupled to an I/O substrate <highlight><bold>270</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> More specifically, as shown in both <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, first processor substrate <highlight><bold>110</bold></highlight> comprises SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> coupled to processor cluster <highlight><bold>125</bold></highlight>, local memory cluster <highlight><bold>130</bold></highlight>, firmware hub <highlight><bold>140</bold></highlight> and connector. SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> comprises a plurality of port interface that, when activated, enable communications over different links. For example, a processor port interface <highlight><bold>121</bold></highlight> of SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> provides a communication path to processors <highlight><bold>127</bold></highlight><highlight><subscript>l</subscript></highlight>-<highlight><bold>127</bold></highlight><highlight><subscript>M </subscript></highlight>of processor cluster <highlight><bold>125</bold></highlight> via processor link <highlight><bold>126</bold></highlight>. Memory port interface <highlight><bold>122</bold></highlight> of SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> provides a communication path to local memory cluster <highlight><bold>130</bold></highlight> via a memory link <highlight><bold>131</bold></highlight>. In one embodiment, memory link <highlight><bold>131</bold></highlight> provides four communication sub-links <highlight><bold>132</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>132</bold></highlight><highlight><subscript>4 </subscript></highlight>supporting a total data throughput of approximately 6.4 Gigabytes per second (GB/s). Each of the sub-links <highlight><bold>132</bold></highlight><highlight><subscript>1</subscript></highlight>, . . . , <highlight><bold>132</bold></highlight><highlight><subscript>4 </subscript></highlight>may be coupled to a bank of local memory devices <highlight><bold>133</bold></highlight> (e.g., RDRAM) or a memory repeater hub <highlight><bold>134</bold></highlight><highlight><subscript>1</subscript></highlight>, . . . , <highlight><bold>134</bold></highlight><highlight><subscript>4 </subscript></highlight>that operates as an RDRAM-to-SDRAM translation bridge. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> further includes a first scalability port interface <highlight><bold>124</bold></highlight><highlight><subscript>1 </subscript></highlight>that enables a communication path over link <highlight><bold>260</bold></highlight> to a first scalability port switch (SPS<highlight><bold>0</bold></highlight>) <highlight><bold>275</bold></highlight> via connector <highlight><bold>115</bold></highlight> and mating connector <highlight><bold>255</bold></highlight>. SNC<highlight><bold>0</bold></highlight> also includes a second scalability port interface <highlight><bold>124</bold></highlight><highlight><subscript>2 </subscript></highlight>that enables a communication path over link <highlight><bold>261</bold></highlight> to a second scalability port switch (SPS<highlight><bold>1</bold></highlight>) <highlight><bold>276</bold></highlight> via connectors <highlight><bold>115</bold></highlight> and <highlight><bold>255</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As further shown in <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> comprises a port interface <highlight><bold>123</bold></highlight> that enables a communication path to firmware hub <highlight><bold>140</bold></highlight> via link <highlight><bold>142</bold></highlight>. Firmware hub <highlight><bold>140</bold></highlight> comprises INIT BIOS <highlight><bold>141</bold></highlight> that is configured to initialize processors <highlight><bold>127</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>127</bold></highlight><highlight><subscript>M</subscript></highlight>, local memory <highlight><bold>133</bold></highlight>, and scalability port interfaces <highlight><bold>124</bold></highlight><highlight><subscript>1 </subscript></highlight>and <highlight><bold>124</bold></highlight><highlight><subscript>2 </subscript></highlight>to communicate with the OS. As a result, the distributed INIT BIOS <highlight><bold>141</bold></highlight> enables hot-plug addition of a boot node, namely first processor substrate <highlight><bold>110</bold></highlight>, and supports dynamic partitioning of platform <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Similar in architecture to first processor substrate <highlight><bold>110</bold></highlight>, second processor substrate <highlight><bold>210</bold></highlight> comprises a second scalable node controller (SNC<highlight><bold>1</bold></highlight>) <highlight><bold>220</bold></highlight> that is mounted on a substrate and coupled to a processor cluster <highlight><bold>211</bold></highlight>, a local memory cluster <highlight><bold>216</bold></highlight>, a firmware hub <highlight><bold>240</bold></highlight> as well as a connector <highlight><bold>215</bold></highlight>. Connector <highlight><bold>215</bold></highlight> is adapted to couple with a second mating connector <highlight><bold>256</bold></highlight> of interconnection substrate <highlight><bold>250</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, processor cluster <highlight><bold>211</bold></highlight> comprises a processor link <highlight><bold>212</bold></highlight> interconnecting one or more processors <highlight><bold>213</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>213</bold></highlight><highlight><subscript>N </subscript></highlight>(&ldquo;N&rdquo; being a positive integer). It is contemplated that these N processors may equal in number to the M processors provided by first processor substrate <highlight><bold>110</bold></highlight>, although such a 1:1 correlation is not necessary. Processor cluster <highlight><bold>211</bold></highlight> is coupled to a processor port interface of SNC<highlight><bold>1</bold></highlight> <highlight><bold>220</bold></highlight> via processor link <highlight><bold>212</bold></highlight>. Local memory cluster <highlight><bold>216</bold></highlight> is coupled to a memory port interface of SNC<highlight><bold>1</bold></highlight> <highlight><bold>220</bold></highlight> through a memory link <highlight><bold>217</bold></highlight>. SNC<highlight><bold>1</bold></highlight> <highlight><bold>220</bold></highlight> features two scalability port interfaces <highlight><bold>221</bold></highlight> that are both coupled to connector <highlight><bold>215</bold></highlight> via links <highlight><bold>222</bold></highlight> and <highlight><bold>223</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As further shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, SNC<highlight><bold>1</bold></highlight> <highlight><bold>220</bold></highlight> comprises a port interface <highlight><bold>224</bold></highlight> that enables a communication path to firmware hub <highlight><bold>240</bold></highlight> via link <highlight><bold>242</bold></highlight>. Firmware hub <highlight><bold>240</bold></highlight> comprises INIT BIOS <highlight><bold>241</bold></highlight> that is configured to initialize processors <highlight><bold>213</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>213</bold></highlight><highlight><subscript>N</subscript></highlight>, local memory <highlight><bold>218</bold></highlight>, and scalability port interfaces <highlight><bold>222</bold></highlight> and <highlight><bold>223</bold></highlight> to support communications with the OS when a hot-plugged operation occurs involving second processor substrate <highlight><bold>110</bold></highlight>. The portion of INIT BIOS <highlight><bold>241</bold></highlight> enables hot-plug addition of another boot node (e.g., second processor substrate <highlight><bold>210</bold></highlight>) and also supports dynamic partitioning of platform <highlight><bold>200</bold></highlight> as described in connection with <cross-reference target="DRAWINGS">FIGS. 5 and 6</cross-reference>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, interconnection substrate <highlight><bold>250</bold></highlight> enables data to be propagated from SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> to both SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>. In particular, first mating connector <highlight><bold>255</bold></highlight> receives data transferred through connector <highlight><bold>115</bold></highlight> and propagates that data over links <highlight><bold>260</bold></highlight> and <highlight><bold>261</bold></highlight>. Links <highlight><bold>260</bold></highlight> and <highlight><bold>261</bold></highlight> are coupled to a connector <highlight><bold>265</bold></highlight> of interconnection substrate <highlight><bold>250</bold></highlight>. Connector <highlight><bold>265</bold></highlight> may be coupled to a mating connector <highlight><bold>271</bold></highlight> of I/O substrate <highlight><bold>270</bold></highlight>, which propagates the data from links <highlight><bold>260</bold></highlight> and <highlight><bold>261</bold></highlight> to SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>, respectively. Similarly, in a redundant fashion, interconnection substrate <highlight><bold>250</bold></highlight> enables data to be propagates from SNC<highlight><bold>1</bold></highlight> <highlight><bold>220</bold></highlight> to SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight> over links <highlight><bold>262</bold></highlight> and <highlight><bold>263</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, in one embodiment, SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and/or SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight> is a crossbar switch (e.g., integrated 6&times;6 crossbar) that enables communication with components over six port interfaces <highlight><bold>300</bold></highlight>-<highlight><bold>305</bold></highlight>. For example, with this embodiment, each scalability port switch would enable communications between four SNCs and two SIOHs. Both SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight> are programmed by accessing internal control and status registers via PCI configuration interface, System Management Bus (SMBus) interface, or Joint Test Action Group (JTAG) interface. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, I/O substrate <highlight><bold>270</bold></highlight> comprises SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>, each coupled to a first Server Input/Output Hub (SIOH<highlight><bold>0</bold></highlight>) <highlight><bold>280</bold></highlight> and a second Server Input/Output Hub (SIOH<highlight><bold>1</bold></highlight>) <highlight><bold>285</bold></highlight>. As previously described, both SIOH<highlight><bold>0</bold></highlight> <highlight><bold>280</bold></highlight> and SIOH<highlight><bold>1</bold></highlight> <highlight><bold>285</bold></highlight> provide communications with high-speed links. For example, SIOH<highlight><bold>1</bold></highlight> <highlight><bold>285</bold></highlight> provides coupling to one of more of the following: (1) one or more bridges <highlight><bold>290</bold></highlight> (e.g., P64H2 devices) that support communications with one or more I/O buses; (2) a virtual interface bridge (VXB) <highlight><bold>291</bold></highlight> that provides system I/O full-duplex channels; and/or (3) an I/O Riser substrate <highlight><bold>292</bold></highlight> having an input/output control hub (ICH<highlight><bold>2</bold></highlight>) <highlight><bold>293</bold></highlight> mounted thereon. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Besides system BIOS software retrieved via ICH<highlight><bold>2</bold></highlight>, various portions of INIT BIOS <highlight><bold>141</bold></highlight> are configured to reside in firmware hub <highlight><bold>140</bold></highlight> being coupled to SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight>. Likewise, various portions of the INIT BIOS <highlight><bold>241</bold></highlight> reside in firmware hub <highlight><bold>240</bold></highlight>. As shown herein, both INIT BIOS <highlight><bold>141</bold></highlight> and/or <highlight><bold>241</bold></highlight> are implemented in a distributed fashion to assist in initialization without leaving such responsibility to the OS. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Herein, both INIT BIOS <highlight><bold>141</bold></highlight> and <highlight><bold>241</bold></highlight> may be responsible for electing their respective node boot strap processor to handle initial BIOS boot sequence operations for its specific substrate and enable communication path(s) to SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and/or SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>. For instance, INIT BIOS <highlight><bold>141</bold></highlight> enables the scalability port interfaces <highlight><bold>124</bold></highlight> and waits for Idle Flits from SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and/or SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>. Likewise, INIT BIOS <highlight><bold>241</bold></highlight> enables the scalability port interfaces <highlight><bold>221</bold></highlight> and waits for Idle Flits from SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and/or SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> During a normal boot of the platform <highlight><bold>200</bold></highlight>, the node boot strap processors in turn elect the system boot strap processor which runs the system BIOS located in its respective FWH attached to ICH<highlight><bold>2</bold></highlight> in order to complete the boot of the platform. Both INIT BIOS <highlight><bold>141</bold></highlight> and/or <highlight><bold>241</bold></highlight> is further configured to initialize the processors and memory on a hot-plugged node. For instance, INIT BIOS <highlight><bold>141</bold></highlight> is configured to initialize processors and memory associated with SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight>, which requires SNC<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> to read the configuration state information from SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight> using non-coherent accesses. Additionally, both INIT BIOS <highlight><bold>141</bold></highlight> and <highlight><bold>241</bold></highlight> program registers to indicate resources of the hot-plugged node (e.g., memory interleave registers to indicate memory of the new node) and to notify the OS of the presence of a fully initialized hot-plugged node. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> For an 8-way platform featuring processor substrates <highlight><bold>110</bold></highlight> and <highlight><bold>210</bold></highlight> as shown, after successful boot of platform <highlight><bold>200</bold></highlight>, the user may decide to remove various resources. For instance, platform <highlight><bold>200</bold></highlight> may undergo a hot-plug removal of a node featuring SCN<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> mounted on first processor substrate <highlight><bold>110</bold></highlight>. This may be accomplished by the OS transmitting an ejection notice for a container object that identifies SCN<highlight><bold>0</bold></highlight> as well as its constituent components coupled thereto (see <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). Likewise, when undergoing a hot-plug addition of a node (e.g., SCN<highlight><bold>0</bold></highlight> <highlight><bold>120</bold></highlight> being the primary component), after initialization of its constituent components by the distributed INIT BIOS <highlight><bold>141</bold></highlight>, the OS would bring local memory <highlight><bold>133</bold></highlight> online prior to processors <highlight><bold>127</bold></highlight><highlight><subscript>1</subscript></highlight>-<highlight><bold>127</bold></highlight><highlight><subscript>M </subscript></highlight>so that such memory may be allocated to processors <highlight><bold>127</bold></highlight><highlight><subscript>l</subscript></highlight>-<highlight><bold>127</bold></highlight><highlight><subscript>M </subscript></highlight>before selecting remotely located memory. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Dynamic partitioning can be defined as an ability to either split one R-way platform (&ldquo;R&rdquo; being a positive integer) into multiple smaller systems while the original OS continues to run without shutdown or merge multiple partitions into one larger partition while the original OS continues to run without shutdown. For example, using 8-way platform <highlight><bold>200</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> for illustrative purposes, dynamic partitioning allows 8-way platform <highlight><bold>200</bold></highlight> to be split into two 4-way platforms <highlight><bold>400</bold></highlight> and <highlight><bold>500</bold></highlight> or an ability to merge two 4-way platforms <highlight><bold>400</bold></highlight> and <highlight><bold>500</bold></highlight> to form single 8-way platform <highlight><bold>200</bold></highlight>. The dynamic partitioning operation occurs without requiring the OS to shutdown, namely reboot. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Dynamic partitioning is accomplished by using the hot-plug capability. As shown in <cross-reference target="DRAWINGS">FIGS. 5 and 6</cross-reference>, for this embodiment, in order to split 8-way platform <highlight><bold>200</bold></highlight> into 4-way platforms <highlight><bold>400</bold></highlight> and <highlight><bold>500</bold></highlight>, the following sequence of operations are performed: </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> 1. Indicate a hot-plug removal event to the OS for SIOH<highlight><bold>1</bold></highlight> <highlight><bold>285</bold></highlight>; </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> 2. Indicate a hot-plug removal event to the OS for CPU/Memory nodel (e.g., second processor substrate <highlight><bold>210</bold></highlight>); </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> 3. When both hot-plug removal operations are complete, the original OS is running on 4-way platform <highlight><bold>400</bold></highlight> comprising CPU/Memory node<highlight><bold>0</bold></highlight> (first processor substrate <highlight><bold>110</bold></highlight>) and SIOH<highlight><bold>0</bold></highlight> <highlight><bold>280</bold></highlight>; </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> 4. Program registers associated with SPS<highlight><bold>0</bold></highlight> <highlight><bold>275</bold></highlight> and SPS<highlight><bold>1</bold></highlight> <highlight><bold>276</bold></highlight> to indicate that the platform is partitioned into two; </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> 5. Initialize the new platform <highlight><bold>500</bold></highlight> comprising CPU/Memory nodel (second processor substrate <highlight><bold>210</bold></highlight>) and SIOH<highlight><bold>1</bold></highlight> <highlight><bold>285</bold></highlight>. This platform <highlight><bold>500</bold></highlight> is able to run its own copy of OS and applications independent of platform <highlight><bold>400</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Similarly, for merging of two 4-way platforms <highlight><bold>400</bold></highlight> and <highlight><bold>500</bold></highlight> into 8-way platform <highlight><bold>200</bold></highlight>, the new nodes are announced to the running OS as hot-plug events. As a result, OS is able to add the hot-plugged CPU/Memory node and an I/O node (e.g., SIOH and constituent components) to the running platform <highlight><bold>200</bold></highlight> without any interruption to its service. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> One usage of a dynamic partitioning is for rolling upgrades. Applications, other software services and even the OS require updates from time to time to either enhance functionality or to fix existing problem. Typically, in high reliability mission critical environments, the software updates should not be applied directly to the targeted platform in the field. However, testing the software update on a different server may not accurately test the real world environment in which it is deployed. Hence, the running platform is split into two using dynamic domain partitioning and the software update is applied to the newly formed partition while the original OS and software continues to run on the other partition. After sufficient testing, the partition running the old software is merged into the partition running the updated software thus accomplishing the update in an efficient and reliable manner. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> II. Container Object Representation </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Referring not to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, an exemplary embodiment of representation of a container object that is representative of a node (e.g., SNC<highlight><bold>0</bold></highlight> being interconnected to constituent components such as processors and memory) and generally consistent with ACPI standards is shown. Herein, container object <highlight><bold>600</bold></highlight> provides a mechanism for handling an ejection notice for hot-plug removal of SNC<highlight><bold>0</bold></highlight> from the platform. This container object <highlight><bold>600</bold></highlight> provides at least information as to those devices that are constituent components of SNC<highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Herein, container object <highlight><bold>600</bold></highlight> of the first scalability node controller identifies its constituent components. For example, container object <highlight><bold>600</bold></highlight> represents SNC<highlight><bold>0</bold></highlight> as a node including processors and memory devices as constituent components of that node. The eject (_EJ<highlight><bold>0</bold></highlight>) method <highlight><bold>610</bold></highlight> is invoked to eject, during a hot-plug removal of the first processor substrate or perhaps SNC<highlight><bold>0</bold></highlight>, those constituent components of SNC<highlight><bold>0</bold></highlight>. This occurs before SNC<highlight><bold>0</bold></highlight> is ejected. For this embodiment, since SNC<highlight><bold>0</bold></highlight> is coupled to processors and memory, container object <highlight><bold>600</bold></highlight> comprises a hardware identification (_HID) object <highlight><bold>620</bold></highlight>, a proximity (_PXM) object <highlight><bold>630</bold></highlight>, a processor object <highlight><bold>640</bold></highlight>, and a device object <highlight><bold>650</bold></highlight>. Each processor or device object <highlight><bold>640</bold></highlight> and <highlight><bold>650</bold></highlight> may be generally referred to as a &ldquo;component object.&rdquo;</paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the _HID object <highlight><bold>620</bold></highlight> contains a string for identifying the device type associated with the container object to the OS for power management and configuration. As an example, for this embodiment, the _HID object <highlight><bold>610</bold></highlight> would return the value of&ldquo;ACPI0004&rdquo; to identify SCN<highlight><bold>0</bold></highlight> as a node. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The _PXM object <highlight><bold>630</bold></highlight> is used to describe proximity domains (i.e., groupings of devices) within the platform. In other words, the _PXM object <highlight><bold>630</bold></highlight> provides an integer that identifies a device as belonging to a specific proximity domain. The OS assumes that two devices in the same proximity domain are coupled and tends to allocate memory to those processors within the same proximity domain as the memory. For instance, SNC<highlight><bold>0</bold></highlight> may be assigned &ldquo;0&rdquo; to denote that it is in a first domain while SNC<highlight><bold>1</bold></highlight> would be assigned &ldquo;1&rdquo; to denote that it is in a secondary domain. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The processor object <highlight><bold>640</bold></highlight> is used to identify which processor(s) constitute components associated with SNC<highlight><bold>0</bold></highlight>. Similarly, device object <highlight><bold>650</bold></highlight> is used to identify other devices (e.g., memory) that constitute components associated with SNC<highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> By using the container object representation, the OS can easily determine the components that belong together and thereafter is able to optimize memory allocations and other operations. Moreover, in the case of a hot-plug removal, the ejection notice is just sent to the node, which in turn propagates down to the constituent components. For example, in case of a SNC, the alternative would be to notify each processor and memory component individually each of which would be interpreted by the OS as an individual hot-plug removal operation thereby making the hot-plug removal operation inefficient. Also, during a hot-plug addition of a node, the OS brings the associated memory online before the processors are brought in attempts to allocate memory that is local to the processors. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention. </paragraph>
</section>
<section>
<heading lvl="1">Appendix A </heading>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> I hereby appoint BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP, a firm including: William E. Alford, Reg. No. 37,764; Farzad E. Amini, Reg. No. 42,261; William Thomas Babbitt, Reg. No. 39,591; Carol F. Barry, Reg. No. 41,600; Jordan Michael Becker, Reg. No. 39,602; Lisa N. Benado, Reg. No. 39,995; Bradley J. Bereznak, Reg. No. 33,474; Michael A. Bemadicou, Reg. No. 35,934; Roger W. Blakely, Jr., Reg. No. 25,831; R. Alan Burnett, Reg. No. 46,149; Gregory D. Caldwell, Reg. No. 39,926; Andrew C. Chen, Reg. No. 43,544; Jae-Hee Choi, Reg. No. 45,288; Thomas M. Coester, Reg. No. 39,637; Donna Jo Coningsby, Reg. No. 41,684; Dennis M. deGuzman, Reg. No. 41,702; Justin Dillon, Reg. No. 42,486; Stephen M. De Klerk, Reg. No. P46,503; Michael Anthony DeSanctis, Reg. No. 39,957; Daniel M. De Vos, Reg. No. 37,813; Sanjeet Dutta, Reg. No. P46,145; Matthew C. Fagan, Reg. No. 37,542; Tarek N. Fahmi, Reg. No. 41,402; George Fountain, Reg. No. 36,374; Paramita Ghosh, Reg. No. 42,806; James Y. Go, Reg. No. 40,621; James A. Henry, Reg. No. 41,064; Willmore F. Holbrow III, Reg. No. P41,845; Sheryl Sue Holloway, Reg. No. 37,850; George W Hoover II, Reg. No. 32,992; Eric S. Hyman, Reg. No. 30,139; William W. Kidd, Reg. No. 31,772; Sang Hui Kim, Reg. No. 40,450; Walter T. Kim, Reg. No. 42,731; Eric T. King, Reg. No. 44,188; Erica W. Kuo, Reg. No. 42,775; Steven Laut, Reg.No. 47,736; George B. Leavell, Reg. No. 45,436; Gordon R. Lindeen III, Reg. No. 33,192; Jan Carol Little, Reg. No. 41,181; Robert G. Litts, Reg. No. 46,876; Kurt P. Leyendecker, Reg. No. 42,799; Julio Loza, Reg. No. 47,758; Joseph Lutz, Reg. No. 43,765; Michael J. Mallie, Reg. No. 36,591; Andre L. Marais, under 37 C.F.R. &sect; 10.9(b); Paul A. Mendonsa, Reg. No. 42,879; Clive D. Menezes, Reg. No. 45,493; Chun M. Ng, Reg. No. 36,878; Thien T. Nguyen, Reg. No. 43,835; Thinh V. Nguyen, Reg. No. 42,034; Dennis A. Nicholls, Reg. No. 42,036; Daniel E. Ovanezian, Reg. No. 41,236; Kenneth B. Paley, Reg. No. 38,989; Marina Portnova, Reg. No. P45,750; Michael A. Proksch, Reg. No. 43,021; William F. Ryann, Reg. 44,313; James H. Salter, Reg. No. 35,668; William W. Schaal, Reg. No. 39,018; James C. Scheller, Reg. No. 31,195; Jeffrey S. Schubert, Reg. No. 43,098; George Simion, Reg. No. P-<highlight><bold>47</bold></highlight>,<highlight><bold>08</bold></highlight>9; Jeffrey Sam Smith, Reg. No. 39,377; Maria McCormack Sobrino, Reg. No. 31,639; Stanley W. Sokoloff, Reg. No. 25,128; Judith A. Szepesi, Reg. No. 39,393; Ronald S. Tamura, Reg.No. 43,179; Vincent P. Tassinari, Reg. No. 42,179; Edwin H. Taylor, Reg. No. 25,129; John F. Travis, Reg. No. 43,203; Joseph A. Twarowski, Reg. No. 42,191; Kerry D. Tweet, Reg. No. 45,959; Mark C. Van Ness, Reg. No. 39,865; Thomas A. Van Zandt, Reg. No. 43,219; Lester J. Vincent, Reg. No. 31,460; Glenn E. Von Tersch, Reg. No. 41,364; John Patrick Ward, Reg. No. 40,216; Mark L. Watson, Reg. No. P46,322; Thomas C. Webster, Reg. No. P46,154; and Norman Zafman, Reg. No. 26,250; my patent attorneys, and Firasat Ali, Reg. No. 45,715; and Justin M. Dillon, Reg. No. 42,486; Raul Martinez, Reg. No. 46,904; my patent agents, with offices located at 12400 Wilshire Boulevard, 7th Floor, Los Angeles, Calif. 90025, telephone (714) 557-3800, and Holmes W. Anderson, Reg. No. 37,272; Christopher J. Cianciolo, Reg. No. 42,417; John D. Crane, Reg. No. 25,231; John C. Gorecki, Reg. No. 38,471; Howard R. Greenberg, Reg. No. 26,171; W. Glen Johnson, Reg. No. 39,525; Lindsay G. McGuinness, Reg. No. 38,549; Jeffrey M. Measures, Reg. No. 40,272; Randall Mishler, Reg. No. 42,006; Kevin L. Smith, Reg. No. 38,620; Mary M. Steubing, Reg. No. 37,946; and Vernon E. Williams, Reg. No. 38,713 of NORTEL NETWORKS LIMITED with full power of substitution and revocation, to prosecute this application and to transact all business in the Patent and Trademark Office connected herewith. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A container object stored in platform readable medium executed by a processor within a platform, the container object comprising: 
<claim-text>a hardware identification object to identify to an operating system of the platform that a type of device represented by the container object is a node; and </claim-text>
<claim-text>a plurality of component objects to identify constituent components of the node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the node is a scalability node controller. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the container object handles an ejection notice for a hot-plug removal of the scalability node controller and at least one component coupled the scalability node controller from the platform. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the at least one component includes a processor. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the at least one component includes a memory. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the ejection notice is provided by an operating system of the platform. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein one of the plurality of component objects includes a processor object to identify one or more processors coupled to the node. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein one of the plurality of component objects includes a device object to identify one or more memory devices coupled to the node. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein any hotplug operation is applied as a single operation to the container object and its constituent objects. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein hotplug addition of the one or more processors and the one or more memory devices belonging to the container object is notified to the operating system simultaneously in a single operation. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the hotplug removal of the processors and the memory devices belonging to the container object is notified to the operating system simultaneously in a single operation. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the container object handles a hot-plug addition by activating the memory devices associated with the device object online prior to activating the processors associated with the processor object. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising a proximity object to describe a proximity domain within the platform that the node belongs to. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The container object of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the proximity object is an assigned integer value to represent the proximity domain that the node belongs to. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A platform comprising: 
<claim-text>a memory device to store a system Basic Input/Output System (BIOS); and </claim-text>
<claim-text>a plurality of processor substrates in communication with the memory device, the plurality of processor substrates including 
<claim-text>a first processor substrate including a first plurality of components and a first storage device to contain a first initialization BIOS to initialize the first plurality of components in response to hot-plug addition of the first processor substrate to the platform, and </claim-text>
<claim-text>a second processor substrate including a second plurality of components and a second storage device to contain a second initialization BIOS to initialize the second plurality of components in response to hot-plug addition of the second processor substrate to the platform. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the first plurality of components of the first processor substrate include a processor cluster and a memory cluster. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the first plurality of components of the first processor substrate further include a scalability node controller coupled to the processor cluster and the memory cluster. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the scalability node controller of the first plurality of components is coupled to local memory of the memory cluster through a plurality of communication sub-links supporting a total data throughput of at least one Gigabyte per second. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the scalability node controller of the first plurality of components includes a plurality of scalability port interfaces coupled to a first connector of the first processor substrate. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the second plurality of components of the second processor substrate further include a secondary scalability node controller including a plurality of scalability port interfaces coupled to a second connector of the second processor substrate. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising: 
<claim-text>an interconnect substrate including a third connector, a fourth connector and a fifth connector, the third connector adapted to mate with the first connector of the first processor substrate and coupled to the fifth connector via a first link and a second link, the fourth connector adapted to mate with the second connector of the second processor substrate and coupled to the fifth connector via a third link and a fourth link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> further comprising: 
<claim-text>an input/output (I/O) substrate including a sixth connector coupled to the fifth connector, the I/O substrate further includes (1) a first scalability port switch coupled to the first link and the third link, (2) a second scalability port switch coupled to the second link and the fourth link, (3) a first Server Input/Output Hub coupled to the first and second scalability port switches, and (4) a second Server Input/Output Hub coupled to the first and second scalability port switches. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the first initialization BIOS contained in the first storage device, when executed, also establishes a communication path between the scalability node controller and at least one of the first scalability port switch and the second scalability port switch. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the second initialization BIOS contained in the second storage device, when executed, also establishes a communication path between the secondary scalability node controller and at least one of the first scalability port switch and the second scalability port switch. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the first initialization BIOS contained in the first storage device elects a processor from a plurality of processors associated with the processor cluster to act as a node boot strap processor for the first processor substrate. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the second initialization BIOS contained in the second storage device elects a processor from a plurality of processors implemented on the second processor substrate to act as a node boot strap processor for the second processor substrate. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the first initialization BIOS contained in the first storage device initializing the first plurality of components prior to notification of an operating system running on the platform of the initialized hot-plugged first processor substrate. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A platform comprising: 
<claim-text>a first processor substrate including a first plurality of components and a first storage device to contain a first code segment of Basic Input/Output System (BIOS) that, when executed, initializing the first plurality of components in response to hot-plug addition of the first processor substrate to the platform; and </claim-text>
<claim-text>a second processor substrate including a second plurality of components and a second storage device to contain a second code segment of BIOS that, when executed, initializing the second plurality of components in response to hot-plug addition of the second processor substrate to the platform. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> further comprising: 
<claim-text>an interconnect substrate including a first connector, a second connector and a third connector, the first connector being adapted to mate with a connector of the first processor substrate that is coupled to a plurality of scalability port interfaces of a first scalability node controller of the first plurality of components, the second connector being adapted to mate with a connector of the second processor substrate that is coupled to a plurality of scalability port interfaces of a second scalability node controller of the second plurality of components, and a third connector coupled to both the first connector via a first link and a second link and the second connector via a third link and a fourth link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference> further comprising: 
<claim-text>an input/output (I/O) substrate including a fourth connector coupled to the third connector, the I/O substrate further includes (1) a first scalability port switch coupled to the first link and the third link, and (2) a second scalability port switch coupled to the second link and the fourth link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the first code segment of BIOS, when executed, also establishes a communication path between the first scalability node controller and at least one of the first scalability port switch and the second scalability port switch. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein the second code segment of BIOS, when executed, also establishes a communication path between the second scalability node controller and at least one of the first scalability port switch and the second scalability port switch. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the first code segment of BIOS initializing the first plurality of components prior to notification of an operating system running on the platform of the first plurality of components upon hot-plug addition of the first processor substrate. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A platform comprising: an operating system; 
<claim-text>an input/output (I/O) substrate including (i) a first scalability port switch, (ii) a second scalability port switch, (iii) a first server VO hub and (iv) a second server I/O hub; </claim-text>
<claim-text>a first processor substrate including a first plurality of components in communication with the first and second scalability port switches; and </claim-text>
<claim-text>a second processor substrate including a second plurality of components and circuitry to support dynamic partitioning of the platform by signaling the operating system of a hotplug removal of the second server I/O hub and the second plurality of components to cause the operating system to configure the first scalability port switch and the second scalability port switch so as to partition the platform into a first platform including the first plurality of components and the first server I/O hub and a second platform including the second plurality of components and the second server I/O hub. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein the second platform is able to run an updated software application independent of and without interrupting operations of the first platform. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The platform of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, wherein the updated software application is an updated operating system. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A method comprising: 
<claim-text>providing a multi-node platform under control of an operating system, the multi-node platform including a first processor substrate and a second processor substrate in communication with an input/output (I/O) substrate; and </claim-text>
<claim-text>implementing a portion of a Basic Input/Output Subsystem (BIOS) on the first processor substrate to initialize components on the first processor substrate in response to hot-plug addition of the first processor substrate before joining the running operating system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> further comprising: 
<claim-text>implementing a portion of the BIOS on the second processor substrate to initialize components on the second processor substrate in response to hot-plug addition of the second processor substrate before joining the running operating system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the components on the first processor substrate include at least two processors.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005200A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005200A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005200A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005200A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005200A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005200A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005200A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
