<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005380A1-20030102-D00000.TIF SYSTEM "US20030005380A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005380A1-20030102-D00001.TIF SYSTEM "US20030005380A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005380A1-20030102-D00002.TIF SYSTEM "US20030005380A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005380A1-20030102-D00003.TIF SYSTEM "US20030005380A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005380A1-20030102-D00004.TIF SYSTEM "US20030005380A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005380</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895695</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L001/22</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>H04B001/74</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>H02H003/05</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>714</class>
<subclass>736000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus for testing multi-core processors</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Hang</given-name>
<middle-name>T.</middle-name>
<family-name>Nguyen</family-name>
</name>
<residence>
<residence-us>
<city>Tempe</city>
<state>AZ</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>E.</middle-name>
<family-name>Miner</family-name>
</name>
<residence>
<residence-us>
<city>Chandler</city>
<state>AZ</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>KENYON &amp; KENYON (SAN JOSE)</name-1>
<name-2></name-2>
<address>
<address-1>333 WEST SAN CARLOS ST.</address-1>
<address-2>SUITE 600</address-2>
<city>SAN JOSE</city>
<state>CA</state>
<postalcode>95110</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus and method for testing multi-core processors by simultaneously testing each of the multiple cores. The full vector of test results for a master core is sent to the test equipment for evaluation while the test results for the slave(s) are logically compared to those of the master, with the result of the comparison reduced to one or more bits. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention is related to testing processor chips. More particularly, this invention relates to efficiently performing functional testing on multi-core processors in about the same amount of time required to test single core processors, and permitting use of the same test equipment. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Microprocessors have been shrinking in both size and cost, while simultaneously getting more powerful, for many years. Few expect this trend to significantly change anytime soon. Traditionally, many microprocessors have been fabricated on a single wafer. After fabrication, and some testing, the wafer is sliced yielding the many individual microprocessors. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Various computer architectures have used multiple processors within single computers since at least the 1970&apos;s and perhaps earlier. Such multiple processor computers could, for example, improve the availability of functioning hardware through redundancy or provide parallel data processing. A more recent trend, which somewhat parallels improvements in microprocessors, is toward fabrication with multiple microprocessors on a single die, typically for use in applications that require multiple processors. Such devices will be referred to as multi-core processors in the present specification, which will be distinguished from a single core processor. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The functional testing of processors is common industry practice because virtually no fabrication process yields 100%. Many test procedures and much test equipment have been developed for the functional testing of single core processors. In the context of this specification, the terms test and testing will refer to functional testing. It would be desirable to be able to utilize much of this existing stock of legacy test procedures, and test equipment, for testing multi-core processors. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> One approach to test multi-core processors would be to test each of the cores individually, while the other cores on the die are temporarily &ldquo;shut down.&rdquo; This procedure could then be repeated until each core is tested. Even if there were no overhead cost, in either time or equipment, of sequentially testing each core of the multi-core processor, the time required for the testing would likely increase approximately linearly with the number of cores on the die. With the cost of testing already being a significant portion of the total cost to produce a single core microprocessor, any increase in the test time for each processor would likely be costly. For example, additional testing equipment, personnel, and floor space might be required in order to maintain the same level of production when the test time per processor increases. It would be desirable to minimize the extra time required to test multi-core processors. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A further complication of such sequential testing are the limits of existing equipment designed for testing a single core processors. During a typical test the processor is supplied a stream of code designed to test the many registers, logic units, and data paths of the processor. The processor&apos;s response, or the test output, takes the form of a series of electrical signals output to a bus or the processor pinout. The test equipment typically records the response in the form of vectors, which can be analyzed to determine whether or not the processor performance falls within the acceptable test performance criteria. However, existing (legacy) test equipment has a finite capacity, or vector memory depth, which may often roughly correspond to the capacity needed to test a single core processor. Thus, sequential testing of multi-core processors using test equipment with a limited vector memory depth may not proceed immediately without either evaluating the test results for the first core, or transferring the test results to another storage device, before proceeding to the subsequent test. In some situations it might be possible to upgrade the test equipment with additional memory, thus increasing the vector memory depth. However, this option could be expensive, and might even not be possible in all situations. It would be advantageous to avoid the memory constraints of legacy test equipment when testing multi-core processors. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The problems encountered testing multi-core processors compared to single core processors become apparent when only two cores are present on a single die. However, it is likely that the rapid advances in the field of microprocessors will soon lead to dies with more than two cores. It would be desirable to have a systematic approach to efficiently testing multi-core processors with any number of cores. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a dual-core processor, tested by an embodiment of the present invention. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of another disclosure processor, tested by an embodiment of the present invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a flow chart of a procedure for testing dual-core processors in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of an N-core processor, tested by an embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Embodiments of the present invention may be used to test multi-core processors utilizing the test equipment and test procedures developed for testing single core processors, and do so in approximately the same amount of time required to test a single processor. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, which shows one layout for a multi-core (dual-core) processor <highlight><bold>2</bold></highlight>, with two cores, <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight>. Also shown are a set of shared resources <highlight><bold>8</bold></highlight> which may be associated with the multi-core processor. The shared resources may include one or more caches <highlight><bold>10</bold></highlight>, a set of buses/core checking/arbitration (BCA) resources <highlight><bold>12</bold></highlight>, and an I/O path <highlight><bold>14</bold></highlight>, such as traces or a front side bus (FSB). Those of ordinary skill in the art will recognize that not all of these features are present, or necessary, on every multi-core processor. BCA <highlight><bold>12</bold></highlight> may include one or more buses between core <highlight><bold>4</bold></highlight>, core <highlight><bold>6</bold></highlight>, cache <highlight><bold>10</bold></highlight>, core checking logic, and arbitration logic. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The core checking logic resources, if present, are typically used to compare the output from the multiple cores. For example, some multi-core processors used in error intolerant environments might operate in a redundant manner where both processors execute the same instruction set, and the core checking resources verify whether or not the two processors produce identical results. The present invention, as will be explained more fully below, compares the output from multiple cores. Some embodiments of the present invention may take advantage of core check functionality present within a multi-core processor, other embodiments may perform the comparison external to the processor. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Similarly, multi-core processors may have arbitration resources for some tasks, such as determining which of the processors may write to cache <highlight><bold>10</bold></highlight> or I/O path <highlight><bold>14</bold></highlight> at a particular point. For the purposes of the present disclosure, the cache(s) <highlight><bold>10</bold></highlight> and BCA resources <highlight><bold>12</bold></highlight> are effectively a black box which may be coupled to the multiple cores, and are located on the die with the cores, and with which the present invention may, or may not, need to interact. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> One major concept of the present invention is allowing the testing of multiple cores simultaneously. The same test instruction set is supplied to all of the processor cores, with this full set of instructions processed by each core, while only a single test vector result, from a single &ldquo;master&rdquo; core, is output to the test equipment. To confirm the proper functional operation of the &ldquo;slave&rdquo; cores, a comparison is made between the master and the slave(s) to determine that the output of processing the test instruction set by each core is identical. As will be recognized by those of ordinary skill in the art, the terms &ldquo;simultaneous&rdquo; and &ldquo;simultaneously&rdquo; are used in the present disclosure in a broader sense than each core receiving a processing instructions in perfect logic-step. Rather, the present invention is intended to encompass embodiments in which an instruction might be processed by the multiple individual processors within a few clock cycles of each other, and the set of instructions is processed in essentially the same order by each individual processor. Similarly, the processing of instructions in parallel is intended to allow for deviation from lock-step synchronization of processing. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Using multi-core processor <highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> as an example, the test instruction set is supplied to multi-core processor <highlight><bold>2</bold></highlight> along I/O path <highlight><bold>14</bold></highlight> in much the same way as would be done while testing a single processor core. The test instructions would then be routed to both cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight>, with one chosen as the master and the other as the slave. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The particular details of how the test instruction set is sent to both cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight> in parallel, and the selection of the master and slave processors, are not within the scope of the present invention, and would likely vary with the particular multi-core processor architecture. Some embodiments of the present invention may be configured to work in conjunction with a particular BCA <highlight><bold>12</bold></highlight> so that some tasks, such as core checking, may be efficiently performed within the processor. Other embodiments of the present invention may include an external (to the processor) core checking module in which the output from the master core and from each of the slaves is fed into a logical XOR to detect any data discrepancy between the pair of cores for that particular step in processing the test instruction set. The use of XOR logic to compare two data streams is known to those of ordinary skill in the art. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> If core <highlight><bold>4</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> was selected as the master, and core <highlight><bold>6</bold></highlight> the slave, the test instructions would be processed by each simultaneously, with the results combined using a logical XOR, or similar technique, either within BCA <highlight><bold>12</bold></highlight> or within the test equipment <highlight><bold>16</bold></highlight>. In order to reduce the memory required from that needed to store two full sets of test results, only the full set of test results for the master is stored in test equipment <highlight><bold>16</bold></highlight>. Test results for core <highlight><bold>6</bold></highlight>, the slave, are preferably represented by a single bit. That is, the logical XOR compared each of the individual test results of the two processors and flagged any discrepancies. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The results of the many XOR operations can be consolidated further in &ldquo;sticky bit,&rdquo; or single bit accumulate register, which is set to indicate any discrepancies between the master, core <highlight><bold>4</bold></highlight>, and the slave, core <highlight><bold>6</bold></highlight>. The resulting data from the simultaneous testing of cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight> is a complete vector of test results for the master core, and a single bit indicating whether or not the slave produced identical test results. For the ideal case, in which both cores pass the functional test, examining the vector of test results (for the master) will confirm that the master tested successfully, and examining the sticky bit will confirm that the slave responded exactly like the master. This testing technique allows both cores to be functionally tested in about the same amount of time as a single core processor, and only requires the examination of one additional data bit when the test results are positive. Note that in addition to cutting the additional testing time to approximately zero, legacy test equipment and test procedures may easily be used with multi-core processors. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> When the present invention is used to test multi-core processors with a relatively powerful BCA <highlight><bold>12</bold></highlight> system on the die, the test results for the slave core may not need to be transferred off the die via I/O path <highlight><bold>14</bold></highlight>. Instead, the test results for each core could be fed into a logical XOR within multi-core processor <highlight><bold>2</bold></highlight>, which might be further processed to create the sticky bit in an accumulate register on the die. In such an embodiment, multi-core processor <highlight><bold>2</bold></highlight> takes on much of the overhead of testing the additional core(s) so that from the frame of reference of test equipment <highlight><bold>16</bold></highlight>, the testing procedure is virtually the same as testing a single processor. While the benefit of utilizing multi-core processor <highlight><bold>2</bold></highlight> for its own testing has benefits, it is also possible, to perform these same tasks, or some of these same tasks, off of multi-core processor <highlight><bold>2</bold></highlight> and external to test equipment <highlight><bold>16</bold></highlight>. That is, I/O path <highlight><bold>14</bold></highlight> could be used to transfer the output from each of cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight> off of multi-core processor <highlight><bold>2</bold></highlight> to a logical XOR processor, and the accumulate register. Creating this stand-alone checking functionality, in either hardware or software, is within the skill of those of ordinary skill in the art. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In order to perform the core checking and storage of the sticky bit within multi-core processor <highlight><bold>2</bold></highlight>, the specific processor architecture would need to be considered. In particular, the details of shared resources <highlight><bold>8</bold></highlight> would typically vary widely among different multi-core processor designs. The present invention, however, is intended to work with virtually any multi-core processor architecture so that aspects of the testing such as core checking may be performed either on the die or in stand-alone test equipment. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> An embodiment of the present invention is adapted for testing multi-core processor <highlight><bold>18</bold></highlight>, a specialized design shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Multi-core processor <highlight><bold>18</bold></highlight> is designed to run in one of two modes, either as a high performance dual-core processor or as a pair of identical cores in which each simultaneously performs operations on identical data streams. The latter mode enables processor <highlight><bold>18</bold></highlight> to provide a redundant processor core for tasks requiring a very high level of quality assurance, while the former allows using both processor cores independently for high data throughput. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Multi-core processor <highlight><bold>18</bold></highlight> has two cores, <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight>, two bus clusters, <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight>, each associated with one of the cores, two arbitration/FRC units, <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight>, interacting with either bus cluster, a cache <highlight><bold>10</bold></highlight>, and a front side bus (FSB) <highlight><bold>28</bold></highlight>. FSB <highlight><bold>28</bold></highlight> is functionally similar to I/O path <highlight><bold>14</bold></highlight>, it provides an external link for multi-core processor <highlight><bold>18</bold></highlight>. However, multi-core processor <highlight><bold>18</bold></highlight> only allows core <highlight><bold>1</bold></highlight>, the master, to propagate data through to FSB <highlight><bold>28</bold></highlight> when it is performing in the redundant mode. Arbitration/FRC units <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> arbitrate the data transfers between bus clusters <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight>, cache <highlight><bold>10</bold></highlight>, FSB <highlight><bold>28</bold></highlight>, and they perform functional redundancy checks (FRC) duties for multi-core processor <highlight><bold>18</bold></highlight>. Arbitration/FRC units <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> are capable of comparing the results of cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight>, as on-die core checking units, as well as performing much more sophisticated data checking, and may send data comparison results to an accumulate register in cache <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Thus, multi-core processor <highlight><bold>18</bold></highlight> differs somewhat from the architecture of multi-core processor <highlight><bold>2</bold></highlight>, but both may be tested with the present invention so long as the data transfer onto the die and among the components on the die is carefully taken into account. In one embodiment, core <highlight><bold>6</bold></highlight> is used as a master, with core <highlight><bold>4</bold></highlight> the slave, the test instruction set is input through FSB <highlight><bold>28</bold></highlight>, and provided to both cores <highlight><bold>4</bold></highlight> and <highlight><bold>6</bold></highlight> via arbitration/FRC unit <highlight><bold>26</bold></highlight> and bus clusters <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight>. The test results for core <highlight><bold>6</bold></highlight>, the master, are returned to FSB and eventually to test equipment <highlight><bold>16</bold></highlight>. The test results for core <highlight><bold>4</bold></highlight>, the slave, are compared to those of core <highlight><bold>6</bold></highlight> within arbitration/FRC unit <highlight><bold>24</bold></highlight> with the comparison results saved as a single bit within cache <highlight><bold>10</bold></highlight>. As was the case for testing multi-core processor <highlight><bold>2</bold></highlight>, testing multi-core processor <highlight><bold>18</bold></highlight> does not take significantly longer than testing a single core processor, and the test data supplied to test equipment <highlight><bold>16</bold></highlight> does not significantly exceed that generated while testing a single core processor. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Functionally testing a dual-core processor results in one of four possible situations: </paragraph>
<paragraph id="P-0027" lvl="2"><number>&lsqb;0027&rsqb;</number> 1. Both cores pass. </paragraph>
<paragraph id="P-0028" lvl="2"><number>&lsqb;0028&rsqb;</number> 2. Master passes, slave fails. </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> 3. Slave passes, master fails. </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> 4. Both fail. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The first case should be the most common, and with the present invention this requires examining the resulting (positive) test vector within test equipment <highlight><bold>16</bold></highlight>, just as would be the case of testing a single core processor, and confirming that the sticky bit shows the same vector was obtained for the slave. In this first case situation, the present invention allows for testing in about the same amount of time as when testing a single-core processor, on test equipment that might be used for testing a single-core processor, and examination of the same test vector. Examining the sticky bit, to effectively test the slave, would typically require very little time. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart showing the testing possibilities for a dual-core processor for each of the above four possible situations. Although having two properly functioning cores is the ideal result, there may still be value in multi-core processors with only a single (identified) properly functioning core. The present invention may be used to efficiently sort the multi-core processors into bins which each contain processors in one of the four above classifications. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In addition to testing dual-core processors, the present invention may also be used to efficiently test processors containing three or more cores. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of an &ldquo;N-core&rdquo; processor <highlight><bold>30</bold></highlight>. Like the above-described dual-core processor testing, the present invention sends the test instruction set through I/O path <highlight><bold>14</bold></highlight> to each of the individual-cores for parallel execution. The embodiment of the present invention in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a set of comparators <highlight><bold>32</bold></highlight>, and sticky bit <highlight><bold>34</bold></highlight> registers, which are external to multi-core processor <highlight><bold>30</bold></highlight>. Comparators <highlight><bold>32</bold></highlight> preferably each compare the test results of the master core with an individual slave core, producing a sticky bit representing whether or not the particular slave core matched the master core in the functional test. Such an embodiment obviously requires a large enough data capacity along I/O path <highlight><bold>14</bold></highlight> for transferring the test results from each of the processors. Another embodiment of the present invention would read the test vector results as they are output by each core, before these signals leave multi-core processor <highlight><bold>30</bold></highlight>, in order to minimize the amount of data along I/O path <highlight><bold>14</bold></highlight>. For example, if multi-core processor <highlight><bold>30</bold></highlight> were designed with output pads at each core, comparators <highlight><bold>32</bold></highlight> and sticky bit <highlight><bold>34</bold></highlight> registers could be connected to such pads and the amount of data that needed to be transferred through I/O path <highlight><bold>14</bold></highlight> would be reduced greatly. Other embodiments of the present invention might utilize shared resources <highlight><bold>8</bold></highlight> instead of requiring an external set of comparators <highlight><bold>32</bold></highlight>, and sticky bits <highlight><bold>34</bold></highlight>, thus requiring less data to be transferred off the die through I/O path <highlight><bold>14</bold></highlight>. Sticky bits <highlight><bold>34</bold></highlight> may also be combined into an array representing a compare result for each core identified by the bit location within the array. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Those of ordinary skill in the art will be able, with the benefit of the present disclosure, to see how the process shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> would need to be modified to categorize the test results for a group of N-core processors. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Other embodiments of the present invention would include additional sets of comparators <highlight><bold>32</bold></highlight> so that a particular core could be compared to multiple other cores, instead of a single master core. Such an embodiment would permit the quicker determination of which core(s) are good and which are bad than would be the case of requiring N different tests with N different master cores. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> While embodiments and applications of this invention have been shown and described, it would be apparent to those skilled in the art, after a review of this disclosure, that many more modifications than mentioned above are possible without departing from the inventive concepts herein. The invention, therefore, is not to be restricted except in the spirit of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus for testing multi-core processors, comprising: 
<claim-text>a test input connector electrically coupled to a master processor and a slave processor for simultaneously providing a test signal to said master and said slave processors; </claim-text>
<claim-text>a test output connector electrically coupled to said master processor for monitoring a master processor test result; and </claim-text>
<claim-text>a comparator electrically coupled to said master processor and said slave processor for comparing said master processor test result and a slave processor test result and storing a match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said comparator uses a single bit for comparing said master processor test result and said slave processor test result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a multi-core test reporter coupled to said test output connector and coupled to said comparator for reporting a result of said master processor test result and said match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said master processor and said slave processor are present on a single die. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. An apparatus for testing multi-core processors, comprising: 
<claim-text>a test input connector electrically coupled to a master processor and a plurality of slave processors simultaneously providing a test signal to said master and said slave processors; </claim-text>
<claim-text>a test output connector electrically coupled to said master processor for monitoring a master processor test result; </claim-text>
<claim-text>a comparator electrically coupled to said master processor and said plurality of slave processors for comparing said master processor test result and a plurality of slave processor test result and storing a match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said comparator uses one bit for comparing each of said plurality of slave processors to said master processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said master processor and said plurality of slave processors are present on a single die. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a multi-core test reporter coupled to said test output connector and coupled to said comparator for reporting a result of said master test result and said match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An apparatus for testing multi-core processors with internal core checking logic, comprising: 
<claim-text>a test input connector electrically coupled to a master processor and a slave processor for simultaneously providing a test signal to said master and said slave processors; </claim-text>
<claim-text>a test output connector electrically coupled to said master processor for monitoring a master test result; </claim-text>
<claim-text>a core checking logic driver for controlling the internal core checking logic and reporting a deviation between said master and said slave in response to said test signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein: 
<claim-text>said master processor and said slave processor are present on a single die. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An apparatus in accordance with <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, further comprising: 
<claim-text>a multi-core test reporter coupled to said test output connector and coupled to said core checking logic driver for reporting a result of said master test result and said deviation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method for testing multi-core processors, comprising: 
<claim-text>running a functional test on each of a plurality of processors simultaneously; </claim-text>
<claim-text>monitoring said functional test results on a first processor; </claim-text>
<claim-text>comparing said functional test results on said first processor with said functional test results on a second processor and creating a first match result and; </claim-text>
<claim-text>reporting said functional test results on said first processor and said first match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising: 
<claim-text>repeating said functional test on said second processor when said first processor fails said functional test. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein: 
<claim-text>creating said first match result uses a single bit accumulate register. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method of testing in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein: 
<claim-text>said comparing of functional test results is performed on the multi-core processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method of testing in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein: 
<claim-text>said comparing of functional test results is performed externally to the multi-core processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method of testing in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein: 
<claim-text>creating said first match result is performed on the multi-core processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method of testing in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein: 
<claim-text>creating said first match result is performed externally to the multi-core processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method of testing in accordance with <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising: 
<claim-text>comparing said functional test results on said first processor with said functional test results on a third processor; </claim-text>
<claim-text>creating a second match result and; </claim-text>
<claim-text>reporting said second match result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A multi-core processor testing system, comprising: 
<claim-text>supplying a test instruction set to the multi-core processor for execution on a plurality of cores; </claim-text>
<claim-text>receiving a test vector representing the execution of said test instructions by a first core; </claim-text>
<claim-text>comparing the execution of said test instruction by a second core with said test vector; </claim-text>
<claim-text>creating a slave condition bit from said comparing step. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A system in accordance with claim <highlight><bold>20</bold></highlight>, further comprising: 
<claim-text>reporting a quality condition status for the multi-core processor.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005380A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005380A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005380A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005380A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005380A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
