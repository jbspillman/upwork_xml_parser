<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005109A1-20030102-D00000.TIF SYSTEM "US20030005109A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00001.TIF SYSTEM "US20030005109A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00002.TIF SYSTEM "US20030005109A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00003.TIF SYSTEM "US20030005109A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00004.TIF SYSTEM "US20030005109A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00005.TIF SYSTEM "US20030005109A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00006.TIF SYSTEM "US20030005109A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00007.TIF SYSTEM "US20030005109A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005109A1-20030102-D00008.TIF SYSTEM "US20030005109A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005109</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895716</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/173</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/16</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>224000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>202000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Managed hosting server auditing and change tracking</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Venkatesh</given-name>
<family-name>Kambhammettu</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>J.</middle-name>
<family-name>Theisen</family-name>
</name>
<residence>
<residence-us>
<city>Beaverton</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ryan</given-name>
<middle-name>C.</middle-name>
<family-name>Faris</family-name>
</name>
<residence>
<residence-us>
<city>Rancho Cordova</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP</name-1>
<name-2>Seventh Floor</name-2>
<address>
<address-1>12400 Wilshire Boulevard</address-1>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1026</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and apparatus are described for auditing and tracking changes in a managed hosting server. Embodiments of the present invention track changes made to systems in a server farm or data center. More specifically, embodiments of the present invention track changes to the operating system, file system, registry, application software files, and other important files and maintain the changes in a database. This database of changes can then be queried to identify the root cause of problems and aid in systems and applications management in the data center. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates generally to the field of computer network management. More particularly, the invention relates to auditing and tracking changes in a managed hosting server. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Changes to the software of a computer system are a risk to system security, stability and performance. By tracking changes, a system administrator can measure the risk impact to a system and predict the problems changes can cause before they occur and can take actions to prevent failure. Change tracking is particularly important in a managed hosting environment where a service provider supplies equipment such as servers for a customer to use for purposes such as web page hosting. Normally, these service providers allow customers access to their servers for the customers&apos; use and guarantee the availability or uptime of the server. Therefore, the service provider has an interest in preventing problems that could lead to the servers being unavailable. For this reason, service providers may wish to track changes made to the server&apos;s software in an effort to analyze the risk of such changes, avoid problems caused by changes, and aid in problem resolution and recovery. Additionally, change tracking can aid in intrusion detection, infrastructure control and configuration management, and system management, such as backups and rollbacks. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> However, the joint-ownership model complicates tracking of changes in such a managed hosting environment. That is, both the customer and the provider &ldquo;own&rdquo; and have access to the servers in use by the customer. Both parties also have tasks, such as maintenance, that must be performed on the servers. Because of this joint-ownership, it is not always possible to determine who is responsible for changes that may create problems for the system. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Since both the customer and the service provider may make changes to the system, both parties could be made responsible for tracking their own changes. However, such division of responsibilities could lead only to finger pointing in the event of problems. Additionally, most service providers would not want to rely on customers in such a manner since it is the service provider that is responsible for the availability of the servers, not customers. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The appended claims set forth the features of the invention with particularity. The invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which: </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram illustrating a typical computer system upon which embodiments of the present invention may be implemented; </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating a computer network or data center upon which embodiments of the present invention may be implemented; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a timing diagram illustrating change tracking events according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a system for change tracking according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating a high-level view of a change tracking process according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating an audit process according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart illustrating a change of control process according to one embodiment of the present invention; and </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating a change monitoring process according to one embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> A method and apparatus are described for auditing and tracking changes in a managed hosting server. Embodiments of the present invention track changes made to systems in a server farm or data center. More specifically, embodiments of the present invention track changes to the operating system, file system, registry, application software files, and/or other important files and maintains the changes in a database. This database of changes can then be queried to identify the root cause of problems and aid in systems and applications management in the data center. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The present invention includes various processes, which will be described below. The processes of the present invention may be performed by hardware components or may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor or logic circuits programmed with the instructions to perform the processes. Alternatively, the processes may be performed by a combination of hardware and software. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The present invention may be provided as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic devices) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, flash memory, or other type of media/machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection). </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram illustrating a typical computer system upon which embodiments of the present invention may be implemented. Computer system <highlight><bold>100</bold></highlight> comprises a bus or other communication means <highlight><bold>101</bold></highlight> for communicating information, and a processing means such as processor <highlight><bold>102</bold></highlight> coupled with bus <highlight><bold>101</bold></highlight> for processing information. Computer system <highlight><bold>100</bold></highlight> further comprises a random access memory (RAM) or other dynamic storage device <highlight><bold>104</bold></highlight> (referred to as main memory), coupled to bus <highlight><bold>101</bold></highlight> for storing information and instructions to be executed by processor <highlight><bold>102</bold></highlight>. Main memory <highlight><bold>104</bold></highlight> also may be used for storing temporary variables or other intermediate information during execution of instructions by processor <highlight><bold>102</bold></highlight>. Computer system <highlight><bold>100</bold></highlight> also comprises a read only memory (ROM) and/or other static storage device <highlight><bold>106</bold></highlight> coupled to bus <highlight><bold>101</bold></highlight> for storing static information and instructions for processor <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A data storage device <highlight><bold>107</bold></highlight> such as a magnetic disk or optical disc and its corresponding drive may also be coupled to computer system <highlight><bold>100</bold></highlight> for storing information and instructions. Computer system <highlight><bold>100</bold></highlight> can also be coupled via bus <highlight><bold>101</bold></highlight> to a display device <highlight><bold>121</bold></highlight>, such as a cathode ray tube (CRT) or Liquid Crystal Display (LCD), for displaying information to an end user. Typically, an alphanumeric input device <highlight><bold>122</bold></highlight>, including alphanumeric and other keys, may be coupled to bus <highlight><bold>101</bold></highlight> for communicating information and/or command selections to processor <highlight><bold>102</bold></highlight>. Another type of user input device is cursor control <highlight><bold>123</bold></highlight>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <highlight><bold>102</bold></highlight> and for controlling cursor movement on display <highlight><bold>121</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A communication device <highlight><bold>125</bold></highlight> is also coupled to bus <highlight><bold>101</bold></highlight>. The communication device <highlight><bold>125</bold></highlight> may include a modem, a network interface card, or other well known interface devices, such as those used for coupling to Ethernet, token ring, or other types of physical attachment for purposes of providing a communication link to support a local or wide area network, for example. In this manner, the computer system <highlight><bold>100</bold></highlight> may be coupled to a number of clients and/or servers via a conventional network infrastructure, such as a company&apos;s Intranet and/or the Internet, for example. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> It is appreciated that a lesser or more equipped computer system than the example described above may be desirable for certain implementations. Therefore, the configuration of computer system <highlight><bold>100</bold></highlight> will vary from implementation to implementation depending upon numerous factors, such as price constraints, performance requirements, technological improvements, and/or other circumstances. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> It should be noted that, while the steps described herein may be performed under the control of a programmed processor, such as processor <highlight><bold>102</bold></highlight>, in alternative embodiments, the steps may be fully or partially implemented by any programmable or hardcoded logic, such as Field Programmable Gate Arrays (FPGAs), TTL logic, or Application Specific Integrated Circuits (ASICs), for example. Additionally, the method of the present invention may be performed by any combination of programmed general purpose computer components and/or custom hardware components. Therefore, nothing disclosed herein should be construed as limiting the present invention to a particular embodiment wherein the recited steps are performed by a specific combination of hardware components. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Conceptually, the present invention tracks changes made to systems in a server farm or data center. More specifically, the present invention tracks changes to the operating system, file system, registry, application software files, and/or other important files and maintains the changes in a database. This database of changes can then be queried to identify the root cause of problems and aid in systems and applications management in the data center. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating a computer network or data center upon which embodiments of the present invention may be implemented. The system <highlight><bold>200</bold></highlight> illustrated in this example includes customer server pods <highlight><bold>205</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>215</bold></highlight>, and <highlight><bold>220</bold></highlight>. These pods include servers <highlight><bold>206</bold></highlight>, <highlight><bold>207</bold></highlight>, <highlight><bold>211</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight>, <highlight><bold>221</bold></highlight>, and <highlight><bold>222</bold></highlight>. This example shows four customer server pods <highlight><bold>205</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>215</bold></highlight>, and <highlight><bold>220</bold></highlight> each containing two servers. Depending on the particular application, there may be more or fewer customer server pods, or more or fewer servers per customer server pod. According to one embodiment of the present invention, each customer server pod <highlight><bold>205</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>215</bold></highlight>, and <highlight><bold>220</bold></highlight> is connected with an infrastructure pod <highlight><bold>225</bold></highlight> via a network connection <highlight><bold>235</bold></highlight>, <highlight><bold>240</bold></highlight>, <highlight><bold>245</bold></highlight>, and <highlight><bold>250</bold></highlight>. These network connections may employ various topologies and standard communications protocols as are well known in the art. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> According to one embodiment of the present invention, the infrastructure pod <highlight><bold>225</bold></highlight> contains three servers <highlight><bold>226</bold></highlight>-<highlight><bold>228</bold></highlight>. These are the application server <highlight><bold>226</bold></highlight>, the database server <highlight><bold>227</bold></highlight>, and the report server <highlight><bold>228</bold></highlight>. The individual functions of each of these servers <highlight><bold>226</bold></highlight>-<highlight><bold>228</bold></highlight> will be described below with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Generally, the purpose of the infrastructure pod <highlight><bold>225</bold></highlight> is to track changes such as additions, deletions, and updates to the file system and registry as well as changes to file permissions, accounts, passwords and text file contents and to allow for management of the entire system <highlight><bold>200</bold></highlight> via a command center <highlight><bold>230</bold></highlight>. The infrastructure pod <highlight><bold>225</bold></highlight> is connected to the command center <highlight><bold>230</bold></highlight> via a network connection <highlight><bold>255</bold></highlight>. The command center <highlight><bold>230</bold></highlight> contains a workstation <highlight><bold>231</bold></highlight> that can be used by a human operator to administer and maintain the servers <highlight><bold>226</bold></highlight>-<highlight><bold>228</bold></highlight> of the infrastructure pod <highlight><bold>225</bold></highlight>. In alternative embodiments of the present invention, the function of the three servers <highlight><bold>226</bold></highlight>-<highlight><bold>228</bold></highlight> in the infrastructure pod may be distributed over more or less servers. For example, the tracking and management functions of the infrastructure pod <highlight><bold>225</bold></highlight> may be performed by a single machine. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a timing diagram illustrating change tracking events according to one embodiment of the present invention. According to one embodiment of the present invention, a check-out and check-in process is used for resolving responsibility for changes made to the system. This check-out and check-in process takes a snapshot of a collection of particular data described further below before and after major changes are applied to the system by a customer. The customer checking out the system is then associated with the changes made between the check-out and checkin. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the example illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, control of a particular server can belong to either the customer or the service provider. Generally, the customer will have control of the server as is the case at point <highlight><bold>305</bold></highlight>. Also at this point <highlight><bold>305</bold></highlight>, an audit is performed. This audit is used to establish a baseline for the condition of the server. That is, the system creates a base snapshot for future comparison by collecting particular data from the server. Details of this data will be discussed below with reference to FIGS. <highlight><bold>4</bold></highlight>-<highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Audits are then scheduled to be performed periodically at points <highlight><bold>310</bold></highlight>, <highlight><bold>315</bold></highlight>, <highlight><bold>325</bold></highlight>, <highlight><bold>330</bold></highlight>, <highlight><bold>340</bold></highlight>, and <highlight><bold>345</bold></highlight>. At each audit, the data collected from the system is compared to the data of the previous audit to determine what changes have been made to the system. The exception to these periodic audits is when the system has been checked out by the service provider as demonstrated at point <highlight><bold>320</bold></highlight>. At this point <highlight><bold>320</bold></highlight>, control of the system passes to the service provider who may then make changes to the system. Also, at this point <highlight><bold>320</bold></highlight>, a snapshot of the system similar to the periodic audits is taken. Later, at point <highlight><bold>335</bold></highlight>, the service provider checks in the system. At this point, another snapshot of the system is taken for comparison to the snapshot taken at check out <highlight><bold>320</bold></highlight>. This comparison is used to determine what changes were made to the system by the service provider. Additionally, between check out <highlight><bold>320</bold></highlight> and check in <highlight><bold>335</bold></highlight>, the periodic audits are suspended and no audits are performed at points <highlight><bold>325</bold></highlight> and <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Using the check out and check in system, control of the server and responsibility for changes can be determined. While control belongs to the customer, all changes, detected by comparing data from the periodic audits, are the responsibility of the customer. While control belongs to the service provider, all changes, detected by comparing the snapshots made at check out and check in, are the responsibility of the service provider. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a system for change tracking according to one embodiment of the present invention. In this example, there are five key components for the system: a data collector or agent <highlight><bold>421</bold></highlight> on the customer server <highlight><bold>420</bold></highlight>; an application server <highlight><bold>405</bold></highlight> functioning as a change detector; a report server <highlight><bold>425</bold></highlight>; a database server <highlight><bold>415</bold></highlight> containing a rule engine <highlight><bold>418</bold></highlight>; and a command center <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The data collector or agent <highlight><bold>421</bold></highlight> is resident on the customer server <highlight><bold>420</bold></highlight>. The agent <highlight><bold>421</bold></highlight> responds to a snapshot request <highlight><bold>440</bold></highlight> from the application server <highlight><bold>405</bold></highlight> directing the agent to capture a snapshot of the customer server <highlight><bold>420</bold></highlight>. The snapshot request <highlight><bold>440</bold></highlight> is typically made when the customer server <highlight><bold>420</bold></highlight> is to be checked out by the service provider. The customer server transmits <highlight><bold>445</bold></highlight> the snapshot back to the application server. Additionally, the agent <highlight><bold>421</bold></highlight> performs the periodic audits on the customer server <highlight><bold>420</bold></highlight> and sends <highlight><bold>450</bold></highlight> the audit data to the application server <highlight><bold>405</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> According to one embodiment, the agent can be loaded <highlight><bold>455</bold></highlight> onto the customer server <highlight><bold>420</bold></highlight> from the application server <highlight><bold>405</bold></highlight>. According to one embodiment, agents are operating system specific. Therefore, the agent <highlight><bold>421</bold></highlight> can be tailored to whatever operating system the customer server <highlight><bold>420</bold></highlight> is running. The agent <highlight><bold>421</bold></highlight> should be small to minimize its demands on the resources of the customer server <highlight><bold>421</bold></highlight>. Additionally, the agent <highlight><bold>421</bold></highlight> should be designed to allow for easy expandability by allowing plugins to be dynamically added to the agent. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The application server <highlight><bold>405</bold></highlight> requests snapshots <highlight><bold>440</bold></highlight> from the customer server <highlight><bold>420</bold></highlight> and at regular intervals accepts audit data <highlight><bold>450</bold></highlight>. The application server <highlight><bold>405</bold></highlight> then detects changes made to the customer server <highlight><bold>420</bold></highlight> by comparing the audit data and stores the change data <highlight><bold>485</bold></highlight> in a database server <highlight><bold>415</bold></highlight>. The application server <highlight><bold>405</bold></highlight> determines changes by comparing the previous audit data with the current audit data. Changes made between snapshots when the system is checked out and checked in are determined in the same manner by comparing snapshots. Audit data and snapshot data may be stored compressed and encrypted to be secure, use less memory, and provide faster access. According to one embodiment of the present invention, this data is stored in a text file and compressed using a common compression tool such as gzip. These files contain headers that include a time stamp indicating when the data was collected. The data can then be sorted to make useful comparisons. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The application server <highlight><bold>405</bold></highlight> may also allow baselining. That is, the application server <highlight><bold>405</bold></highlight> may create a base snapshot for future comparison. This baseline can then be used for comparison to future snapshots or audit data or to aid in troubleshooting or system recovery of the customer server <highlight><bold>420</bold></highlight>. This baseline data may also be stored compressed and/or encrypted. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The report server <highlight><bold>425</bold></highlight> provides a graphical user interface to the command center <highlight><bold>410</bold></highlight> for viewing analyzed results or reports <highlight><bold>460</bold></highlight>. The report server <highlight><bold>425</bold></highlight> queries <highlight><bold>469</bold></highlight> the database server <highlight><bold>415</bold></highlight> and, in response, receives report data <highlight><bold>470</bold></highlight>. Report data <highlight><bold>470</bold></highlight> can include summaries of changes, when they were made, and/or who the responsible party was. This data is then presented as reports <highlight><bold>460</bold></highlight> to the command center <highlight><bold>410</bold></highlight>. The queries can be made by date/time, by application categories, or by alerts. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The database server <highlight><bold>415</bold></highlight> is comprised of a schema that enables storing system information <highlight><bold>417</bold></highlight> related to changes such as additions, deletions, or updates and the responsible party as entities and attributes in relational tables. The schema can also store rules <highlight><bold>416</bold></highlight> and policies related to system changes in relational tables. It can also have a compilation of change rules that are applicable to system security, performance and stability. The database server <highlight><bold>415</bold></highlight> also contains a rule engine <highlight><bold>418</bold></highlight> for comparing and correlating present data with last known data and reacting appropriately with alerts <highlight><bold>485</bold></highlight>, emails, etc. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The rule engine <highlight><bold>418</bold></highlight> contains rule sets for the registry, various databases etc. These rules help specify policies related to an application and represent conditions to search for in the data <highlight><bold>417</bold></highlight>. For example, a rule can require a check for the existence of a specific registry key with a specific value and return a true/false value accordingly. Therefore, rules provide a systematic way for specifying and managing change policies for a system. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> According to one embodiment of the present invention, the audit data and rules are correlated to failures, security attacks, and violations of usage policies. This correlation allows for the development of change patterns that can be matched against future changes to predict impending failure, violations, or threats. The rules are algorithmically applied to changes as and when they are detected and appropriate action is taken based on the &ldquo;alert&rdquo; specified with the rule. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> An alert is a notification or action that needs to be taken when a rule is met or violated. For example, an alert can be created to notify the administrator or human operator if a registry entry has been changed. The rule engine <highlight><bold>418</bold></highlight> of the database server <highlight><bold>415</bold></highlight> generates the alert after applying the rules <highlight><bold>416</bold></highlight> to the collected data <highlight><bold>417</bold></highlight>. Any alerts generated are passed <highlight><bold>485</bold></highlight> to the application server <highlight><bold>405</bold></highlight> and then passed on <highlight><bold>435</bold></highlight> to the command center <highlight><bold>410</bold></highlight>. All alerts will also be logged in the database server <highlight><bold>415</bold></highlight> for reporting later. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> As indicated above, the command center <highlight><bold>410</bold></highlight> is configured to notify a human operator of any alerts generated. Additionally, the command center <highlight><bold>410</bold></highlight> is used for system administration <highlight><bold>430</bold></highlight>. That is, by using a graphical user interface an administrator can configure customer server data, perform rule and alert maintenance, and perform automatic snapshot configuration. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating a high-level view of a change tracking process according to one embodiment of the present invention. Initially, at processing block <highlight><bold>505</bold></highlight>, audit processing is performed. Details of audit processing are described below with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Next, at decision block <highlight><bold>510</bold></highlight>, a determination of whether the system has been checked out is made. If the system has been checked out, the change of control process is executed at processing block <highlight><bold>515</bold></highlight>. Details of this process are described below with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Finally, at processing block <highlight><bold>520</bold></highlight>, any changes detected in the audit data are checked against the rules. Details of this process will be discussed below with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating an audit process according to one embodiment of the present invention. If, at decision block <highlight><bold>605</bold></highlight>, the predetermined interval between audits (the audit interval) has passed, the monitored data is recorded at processing block <highlight><bold>610</bold></highlight>. The monitored data can include file system and registry data such as additions, deletions, or modifications to the file system or registry or changes in file permissions, user accounts or passwords. From this monitored data, change data is generated and recorded at processing block <highlight><bold>615</bold></highlight> by comparing the last known condition with the present condition. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart illustrating a change of control process according to one embodiment of the present invention. First, at processing block <highlight><bold>705</bold></highlight>, the periodic auditing of the customer server is suspended. Next, at processing block <highlight><bold>710</bold></highlight> a snapshot of the customer server is taken. This snapshot should include all data monitored by the periodic auditing. If, at decision block <highlight><bold>715</bold></highlight>, control is changed back, that is, the customer server is checked in, processing continues with taking another snapshot of the customer server at processing block <highlight><bold>720</bold></highlight>. Change data is generated and recorded at processing block <highlight><bold>725</bold></highlight> by comparing the snapshots taken at check out and check in. Finally, periodic auditing is resumed at processing block <highlight><bold>730</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating a change monitoring process according to one embodiment of the present invention. Initially, at processing block <highlight><bold>805</bold></highlight>, the rule set is read. The rules are then applied to the change data at processing block <highlight><bold>810</bold></highlight>. That is, the change data is read and the limits and requirements of the rules are checked to against the change data to determine whether these limits and requirements are satisfied. If, at decision block <highlight><bold>815</bold></highlight>, the rules are found to be violated, the corresponding alert is issued at processing block <highlight><bold>820</bold></highlight>. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of tracking changes to a customer system in a managed hosting environment comprising: 
<claim-text>performing periodic audits of the customer system by executing an agent program that is resident on the customer system and that collects information to be transferred to an application server connected with the customer system via a network; and </claim-text>
<claim-text>determining whether changes have been made to the software of the customer system by monitoring said information on the application server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said performing periodic audits comprises: 
<claim-text>reading a predetermined set of information from the customer system; </claim-text>
<claim-text>generating a set of change data on the application server indicating changes that have been made to the customer system since the last periodic audit by comparing the predetermined set of information to a predetermined set of information recorded during a previous audit; and </claim-text>
<claim-text>storing said change data on a database server connected with the application server via a network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said predetermined set of information comprises operating system files, file system, registry, and application software files of the customer system. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said change data is compressed and encrypted prior to being stored. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>checking out the customer system from the application server, thereby allowing the application server to make changes to the software of the customer system; </claim-text>
<claim-text>suspending periodic auditing; </claim-text>
<claim-text>taking a first snapshot of the customer system; </claim-text>
<claim-text>checking in the customer system when changes to the software of the customer system have been completed; </claim-text>
<claim-text>taking a second snapshot of the customer system; </claim-text>
<claim-text>generating change data on the application server by comparing the first snapshot and the second snapshot; </claim-text>
<claim-text>storing said change data on a database server connected with the application server via a network; and </claim-text>
<claim-text>resuming periodic auditing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said first and second snapshots comprise operating system files, file system, registry, and application software files of the customer system. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said change data is compressed and encrypted prior to being stored. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising: 
<claim-text>reading a set of rules from a database server connected with the application server via a network; </claim-text>
<claim-text>applying the set of rules to the change data to determine whether any of said set of rules has been violated; and </claim-text>
<claim-text>responsive to a violation of any of said set of rules, taking an action associated with a rule violated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said rules are stored on the database server. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system comprising: 
<claim-text>a customer system available to a customer in a managed hosting server; </claim-text>
<claim-text>an application server connected with said customer system via a network to generate change data based on audit data or snapshot data read from the customer system; </claim-text>
<claim-text>a database server connected with said application server via a network to maintain a database of change data generated by the application server; </claim-text>
<claim-text>a report server connected with said database server via a network to generate reports based on the changed data stored on the database server; </claim-text>
<claim-text>a command center connected with said application server and said report server via a network to retrieve reports from the report server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said customer system executes an agent application that periodically collects audit data and collects snapshot data responsive to a request from the application server. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said application sever is further configured to: 
<claim-text>read a predetermined set of information from the customer system; </claim-text>
<claim-text>generate a set of change data indicating changes that have been made to the customer system since the last periodic audit by comparing the predetermined set of information to a predetermined set of information recorded during a previous audit; and </claim-text>
<claim-text>store said change data on the database server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said application server compresses and encrypts said change data before storing the change data on the database server. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said application server is further configured to: 
<claim-text>check out the customer system, thereby allowing the application server to make changes to the software of the customer system; </claim-text>
<claim-text>suspend periodic auditing; </claim-text>
<claim-text>take a first snapshot of the customer system; </claim-text>
<claim-text>check in the customer system when changes to the software of the customer system have been completed; </claim-text>
<claim-text>take a second snapshot of the customer system; </claim-text>
<claim-text>generate change data by comparing the first snapshot and the second snapshot; </claim-text>
<claim-text>store said change data on the database server; and </claim-text>
<claim-text>resume periodic auditing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A machine-readable medium having stored thereon data representing sequences of instructions, said sequences of instructions which, when executed by a processor, cause said processor to: 
<claim-text>perform periodic audits of the customer system by executing an agent program that is resident on the customer system and that collects information to be transferred to an application server connected with the customer server via a network; and </claim-text>
<claim-text>determine whether changes have been made to the software of the customer system by monitoring said information on the application server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said performing periodic audits comprises: 
<claim-text>reading a predetermined set of information from the customer system; </claim-text>
<claim-text>generating a set of change data on the application server indicating changes that have been made to the customer system since the last periodic audit by comparing the predetermined set of information to a predetermined set of information recorded during a previous audit; and </claim-text>
<claim-text>storing said change data on a database server connected with the application server via a network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said predetermined set of information comprises operating system files, file system, registry, and application software files of the customer system. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said change data is compressed and encrypted prior to being stored. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising: 
<claim-text>checking out the customer system from the application server, thereby allowing the application server to make changes to the software of the customer system; </claim-text>
<claim-text>suspending periodic auditing; </claim-text>
<claim-text>taking a first snapshot of the customer system; </claim-text>
<claim-text>checking in the customer system when changes to the software of the customer system have been completed; </claim-text>
<claim-text>taking a second snapshot of the customer system; </claim-text>
<claim-text>generating change data on the application server by comparing the first snapshot and the second snapshot; </claim-text>
<claim-text>storing said change data on a database server connected with the application server via a network; and </claim-text>
<claim-text>resuming periodic auditing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said first and second snapshots comprise operating system files, file system, registry, and application software files of the customer system. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said change data is compressed and encrypted prior to being stored. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising: 
<claim-text>reading a set of rules from a database server connected with the application server via a network; </claim-text>
<claim-text>applying the set of rules to the change data to determine whether any of said set of rules has been violated; and </claim-text>
<claim-text>responsive to a violation of any of said set of rules, taking an action associated with a rule violated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said rules are stored on the database server.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005109A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005109A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005109A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005109A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005109A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005109A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005109A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005109A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005109A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
