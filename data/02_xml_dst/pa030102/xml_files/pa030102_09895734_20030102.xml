<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001901A1-20030102-D00000.TIF SYSTEM "US20030001901A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00001.TIF SYSTEM "US20030001901A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00002.TIF SYSTEM "US20030001901A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00003.TIF SYSTEM "US20030001901A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00004.TIF SYSTEM "US20030001901A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00005.TIF SYSTEM "US20030001901A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00006.TIF SYSTEM "US20030001901A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00007.TIF SYSTEM "US20030001901A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00008.TIF SYSTEM "US20030001901A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00009.TIF SYSTEM "US20030001901A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00010.TIF SYSTEM "US20030001901A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00011.TIF SYSTEM "US20030001901A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001901A1-20030102-D00012.TIF SYSTEM "US20030001901A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001901</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895734</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>810000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus for generating carousels</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Regis</given-name>
<middle-name>J.</middle-name>
<family-name>Crinon</family-name>
</name>
<residence>
<residence-us>
<city>Camas</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>James</given-name>
<middle-name>C.</middle-name>
<family-name>Stanley</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus for generating one or more carousels. A carousel includes a plurality of modules, at least one of which exhibits multiple instances, that are arranged in a module schedule. The apparatus may create, through multiple iterations, two or more module schedules for a carousel, and the optimum module schedule may then be selected and implemented on the carousel. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to application No. ______, entitled &ldquo;Carousel Exhibiting Multiple Occurrences of a Module&rdquo;, filed concurrently herewith; application No. ______, entitled &ldquo;Method of MeaLsuring Goodness of a Module Schedule for a Carousel&rdquo;, filed concurrently herewith; and application No. ______, entitled &ldquo;Method of Scheduling Modules on a Carousel&rdquo;, also filed concurrently herewith.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates generally to digital communications and, more particularly, to the transmission of information using data or object carousels. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In recent years, there has been widespread growth in the development and use of digital communication methods and systems, such growth being exemplified by the advent of digital television broadcasting, the proliferation of wireless telephones, and the prevalence of electronic mail and computer networking, especially the Internet. Moving in step with this expansion of digital communication, has been the demand for increased bandwidth to accommodate the transmission of digitized multimedia information (e.g., images, audio, video). The available bandwidth provided by conventional transmission systems is, however, limited. Accordingly, compression techniques are commonly employed to reduce the bandwidth necessary to transmit multimedia content. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> One of the most common and widely adopted family of standards for compression of video signals is known as MPEG-2, developed by the Motion Pictures Expert Group. See, e.g., International Organization for Standardization/International Electrotechnical Commission (ISO/IEC) 13818-1, <highlight><italic>Information Technology&mdash;Generic Coding of Moving Pictures and Associated Audio Information: Systems</italic></highlight>; and ISO/IEC 13818-2, <highlight><italic>Information Technology&mdash;Generic Coding of Moving Pictures and Associated Audio: Video</italic></highlight>. The MPEG-2 standards have received widespread acceptance in the digital television industry. For example, MPEG-2 had been adopted by the Advanced Television System Committee, or ATSC (United States), by Digital Video Broadcasting, or DVB (Europe), by the Association of Radio Industries and Business, or ARIB (Japan), and by the Society of Cable Telecommunications Engineers (SCTE). </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Of particular interest in the digital multimedia environment is the transmission of data that has been multiplexed into an MPEG-2 transport stream that already includes the packets of video and audio elementary streams pertaining to, for example, a digital television programming event. The MPEG-2 standards also define a set of tools, known as Digital Storage Media&mdash;Command and Control (E)SM-CC), for performing such data transmission, as well as other functions. See ISO/IEC 13818-6, <highlight><italic>Information Technology&mdash;Generic Coding of Moving Pictures and Associated Audio Information</italic></highlight>-<highlight><italic>Part </italic></highlight>6<highlight><italic>: Extensions for DSM</italic></highlight>-<highlight><italic>CC. </italic></highlight></paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The DSM-CC specification defines protocols for both data and object carousels. A data carousel comprises a series of data modules that are transmitted in an MPEG-2 transport stream in a periodic manner. Similarly, an object carousel includes a set of object modules that are transmitted periodically, an object module comprising data exhibiting a hierarchical structure (e.g., directories and files) that can be reconstructed at the receiving end of the MPEG-2 transmission. More specifically, an object module is a data module conveying one or several individual objects referred to as BIOP (Broadcast Inter-ORB Protocol) objects, as defined in the DSM-CC specification. An individual BIOP object may represent a file, a directory, a service gateway, or a stream object. As used herein, the term &ldquo;object module&rdquo; refers to a data module including one or more such BIOP objects, or an equivalent thereof. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> There are a number of potential uses for data and object carousels. By way of example, a data or object carousel may be used for the transmission of electronic program guide information&mdash;including title, channel, time, as well as show information&mdash;within an MPEG-2 digital television signal. Similarly, data and object carousels may be used to transmit advertising or product information to television viewers. Other potential applications include the transmission of emergency information, books, movies, weather forecasts, news, and music. Data and object carousels; may be used in both simplex transmission systems and duplex transmission systems (i.e., having a return channel for interactivity). Further, data and object carousels may be applied to unicast transmissions (i.e., point-to-point), multicast transmissions (i.e., one to a specified group), and broadcast transmissions (i.e., one to all or an unspecified number). </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Despite the utility of data and object carousels and their potential for use in the expanding digital television market, as well as in other multimedia applications, conventional implementations of data and object carousels have proven unsatisfactory for a number of reasons. For example, conventional data and object carousels do not provide adequate tuneability, do not provide prioritization for modules containing critical information, and provide minimal compensation for data corruption or transmission errors. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> A broadcaster does not know when any particular subscriber or viewer will tune to a particular channel and, therefore, can not tailor a carousel to any specific viewer or group of viewers. Thus, a broadcaster can not commence transmission of a carousel in response to any particular viewer tuning to a channel. Further, the broadcaster can not transmit to a first viewer tuning to a channel a carousel having a set of data or object modules arranged in a particular order and then transmit to a second viewer tuning to the channel at some later point in time a carousel having a different arrangement of the data or object modules. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In sum, the broadcaster simply has no knowledge of viewer behavior and can not insure that a high priority data or object module will be available immediately after a viewer tunes into a particular channel. As a result, a viewer tuning to a channel mid-way through the transmission period of a carousel will not be able to receive those data or object modules transmitted prior to tuning into that channel, and the viewer must wait at least the remainder of the carousel period to receive any missed module. Conventional data and object carousels do not, therefore, provide those receiving the carousel with the ability to tune to the channel on which the carousel is being transmitted and, with minimal or no delay, receive a desired or critical module within the carousel. Thus, conventional data and object carousel do not provide efficiency of acquisition or, in other words, these carousels lack tuneability. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Within a data or object carousel, certain of the modules making up that carousel may contain critical information, and it may be desirable to insure that one or more of these critical modules is received immediately upon tuning to the channel on which the carousel is being transmitted, or shortly thereafter. A critical data or object module may, by way of example, comprise a module including files or instructions necessary for rendering data contained in other modules within the carousel (e.g., a media plug-in). However, conventional data and object carousels are not susceptible to prioritization. Although it is possible to arrange the modules within a data or object carousel such that any high priority modules are, for example, placed at or near the beginning of the carousel&apos;s period, it is not possible to insure the high priority modules are received first because, as noted above, a broadcaster does not know a priori when a viewer will tune to a particular channel. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Conventional data and object carousels also fail to provide adequate compensation for data corruption or transmission error. If a data or object module becomes corrupted during transmission, that module is not available to the receiving entity for at least the period of the carousel (i.e., the time required for that module to be repeated during the subsequent transmission of the carousel). Loss of a module due to transmission errors or data corruption can be especially problematic for high priority modules, as loss of the critical data or object module may impede use of other modules on the carousel.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a schematic diagram of a conventional data or object carousel. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a schematic diagram of a communications apparatus incorporating an embodiment of a data carousel generator. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a schematic diagram of an exemplary embodiment of a data or object carousel having multiple occurrences of a data cr object module. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a schematic diagram of another exemplary embodiment of a data or object carousel having multiple occurrences of a data or object module. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a schematic diagram of a further exemplary embodiment of a data or object carousel having multiple occurrences of a data or object module. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow chart depicting an embodiment of a method of creating a data or object carousel having multiple occurrences of a data or object module. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> FIGS. <highlight><bold>7</bold></highlight>A-I show schematically an exemplary embodiment of the method of creating a data or object carousel illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows a schematic diagram of another exemplary embodiment of a data or object carousel created according to the method of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flow chart depicting an embodiment of a method of determining the &ldquo;goodness&rdquo; of a data or object carousel. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a table depicting the method of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, as applied to the data or object carousel of <cross-reference target="DRAWINGS">FIG. 7I</cross-reference>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a table depicting the method of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, as applied to the data or object carousel of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows a hypothetical data or object carousel exhibiting successive occurrences of the same data or object module. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a table depicting the method of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, as applied to the data or object carousel of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows a schematic diagram of one embodiment of a data carousel generator. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows an exemplary embodiment of a graphical user interface of the data carousel generator of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> conventional data or object carousel <highlight><bold>100</bold></highlight> includes a plurality of data or object modules <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>104</bold></highlight>,<highlight><bold>105</bold></highlight>. Each of the data or object modules <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>105</bold></highlight> contains module content <highlight><bold>190</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>190</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>190</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>190</bold></highlight><highlight><italic>d</italic></highlight>, <highlight><bold>190</bold></highlight><highlight><italic>e</italic></highlight>, respectively. The module content <highlight><bold>190</bold></highlight><highlight><italic>a</italic></highlight>, -<highlight><italic>e </italic></highlight>of each module <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>105</bold></highlight> may comprise one or more data files or a combination of data files and one or more directory files. Each data or object module <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>105</bold></highlight> has only one occurrence, or instance, within the data or object carousel <highlight><bold>100</bold></highlight>. As noted above, such a data or object carousel <highlight><bold>100</bold></highlight>&mdash;exhibiting only a single instance of each data or object module <highlight><bold>101</bold></highlight>, <highlight><bold>102</bold></highlight>, <highlight><bold>103</bold></highlight>, <highlight><bold>104</bold></highlight>, <highlight><bold>105</bold></highlight> on the carousel&mdash;does not provide tuneability, prioritization of modules containing critical information, or compensation for data corruption and/or transmission errors. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Shown in <cross-reference target="DRAWINGS">FIGS. 2 through 15</cross-reference> are embodiments of a data or object carousel exhibiting multiple occurrences of one or more data or object modules. Also illustrated in <cross-reference target="DRAWINGS">FIGS. 2 through 15</cross-reference> are embodiments of a method and apparatus for creating such data or object carousels, as well as for measuring the &ldquo;goodness&rdquo; of these data or object carousels with respect to one or more pre-defined metrics. For convenience and ease of understanding, the following detailed description is presented in the context of a data carousel and associated data modules. However, it should be understood by those of ordinary skill in the art that the present invention is not so limited and, further, that the present invention is equally applicable to an object carousel and associated object modules, as well as to a carousel having a combination of both data and object modules. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> communications apparatus <highlight><bold>200</bold></highlight> includes a carousel generator <highlight><bold>210</bold></highlight> for generating one or more data carousels <highlight><bold>300</bold></highlight>, each data carousel <highlight><bold>300</bold></highlight> containing, if necessary, multiple instances of at least one data module. The carousel generator <highlight><bold>210</bold></highlight> is coupled to an insertion device <highlight><bold>220</bold></highlight>. Insertion device <highlight><bold>220</bold></highlight> receives a data carousel <highlight><bold>300</bold></highlight>&mdash;or, alternatively, two or more different data carousels <highlight><bold>300</bold></highlight>&mdash;from the carousel generator <highlight><bold>210</bold></highlight> and encapsulates, packetizes, and multiplexes the data carousel(s) <highlight><bold>300</bold></highlight> within a communications signal, such as the MPIEG-2 transport stream <highlight><bold>205</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Generally, the data carousel <highlight><bold>300</bold></highlight> (or each of multiple different data carousels) is encapsulated into the transport stream <highlight><bold>205</bold></highlight> in a cyclical manner, such that a data carousel <highlight><bold>300</bold></highlight> is transmitted and received periodically. For example, a data carousel <highlight><bold>300</bold></highlight> may be repeatedly transmitted throughout the duration of a television program or event with which that carousel <highlight><bold>300</bold></highlight> is associated. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The MPEG-2 transport stream <highlight><bold>205</bold></highlight> comprises one or more streams of MPEG-2 transport packets (e.g., video and/or audio packets) that have been multiplexed to form an MPEG-2 transport stream. The MPEG-2 transport stream <highlight><bold>205</bold></highlight> may represent, for example, a digital television broadcast signal or an encoded transmission propagating over a computer network. An MPEG-2 television signal may include a plurality of channels, each channel represented by streams of audio and video packets multiplexed into the MPEG-2 transport stream <highlight><bold>205</bold></highlight>. A data carousel <highlight><bold>300</bold></highlight> may be associated with one, all, or a selected portion of the television channels carried on MPEG-2 transport stream <highlight><bold>205</bold></highlight>. Further, two or more different data carousels <highlight><bold>30</bold></highlight>C may be associated with a single television channel (or a plurality of channels). It should also be understood that a television channel carried in MPEG-2 transport stream <highlight><bold>205</bold></highlight> may represent only the information carried in a data carousel <highlight><bold>300</bold></highlight> or a plurality of different data carousels <highlight><bold>300</bold></highlight>. In other words, one or more data carousels <highlight><bold>300</bold></highlight> may comprise a stand-alone television channel. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The MPEG-2 transport stream <highlight><bold>205</bold></highlight> is fed to a transmission system <highlight><bold>230</bold></highlight>, which receives the MPEG-2 transport stream <highlight><bold>205</bold></highlight>, performs any necessary processing or signal conditioning (e.g., adding parity bits representing Forward Error Correction information), and then transmits the resulting MPEG-2 transport stream <highlight><bold>205</bold></highlight> including encapsulated data carousel <highlight><bold>300</bold></highlight> over transmission media <highlight><bold>240</bold></highlight> to a receiving system <highlight><bold>250</bold></highlight>. The transmission system <highlight><bold>230</bold></highlight> may perform analog-to-digital conversion, modulation, and/or encryption. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The transmission media <highlight><bold>240</bold></highlight> may comprise electrical cables (e.g., coaxial cable), fiber optics, or electromagnetic waves (e.g., for radio, line-of-sight microwave, and satellite transmissions). Alternatively, the transmission media <highlight><bold>240</bold></highlight> may comprise a combination of two or more of the above-referenced transmission media. For example, transmission media <highlight><bold>240</bold></highlight> may comprise a combination of fiber optic cable and coaxial cable&mdash;i.e., Hybrid Fiber-Coax (HFC). The receiving system <highlight><bold>250</bold></highlight> receives the MPEG-2 transport stream <highlight><bold>205</bold></highlight> and performs any necessary processing or signal conditioning. For example, the receiving system <highlight><bold>250</bold></highlight> may perform demodulation, demultiplexing, decryption, and/or channel tuning. The receiving system <highlight><bold>250</bold></highlight> outputs the MPEG-2 transport stream <highlight><bold>205</bold></highlight> (or, more generally, the transport steam associated with a selected channel) to an extraction device <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The extraction device <highlight><bold>260</bold></highlight> includes circuit and/or logic adapted to demultiplex the module content <highlight><bold>390</bold></highlight> (e.g., data files) carried in data carousel <highlight><bold>300</bold></highlight> from MPEG-2 transport stream <highlight><bold>205</bold></highlight> and to reconstruct the module content <highlight><bold>390</bold></highlight>. The extraction device <highlight><bold>260</bold></highlight> outputs MPEG-2 elementary streams&mdash;e.g., video elementary stream <highlight><bold>261</bold></highlight><highlight><italic>a </italic></highlight>and audio elementary stream <highlight><bold>261</bold></highlight><highlight><italic>b</italic></highlight>&mdash;and module content <highlight><bold>390</bold></highlight> to an output device <highlight><bold>280</bold></highlight> or, alternatively, to separate output devices. The MPEG-2 elementary streams <highlight><bold>261</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>261</bold></highlight><highlight><italic>b </italic></highlight>are routed to a decoder <highlight><bold>270</bold></highlight><highlight><italic>a </italic></highlight>for decoding and/or decompression prior to being received at the output device <highlight><bold>280</bold></highlight>. Herein, the decoder <highlight><bold>270</bold></highlight><highlight><italic>a </italic></highlight>is a combined representation of a video decoder and an audio decoder; this is done for the sake of clarity, although these decoders are typically very different in how they operate. Also, the MPEG-2 elementary streams <highlight><bold>261</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>261</bold></highlight><highlight><italic>b </italic></highlight>may undergo digital-to-analog conversion prior to entering, or within, the output device <highlight><bold>280</bold></highlight>. Similarly, the module content <highlight><bold>390</bold></highlight> may also be routed to a data decoder <highlight><bold>270</bold></highlight><highlight><italic>b </italic></highlight>for decoding and/or decompression and may also undergo digital-to-analog conversion. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Output device <highlight><bold>280</bold></highlight> allows for a user to access both the module content <highlight><bold>390</bold></highlight> and the information (e.g., video and audio packets) carried within MPEG-2 transport stream <highlight><bold>205</bold></highlight>. For example, the output device <highlight><bold>280</bold></highlight> may comprise a television, or a portion thereof (e.g., the view screen), in which case the MPEG-2 transport stream <highlight><bold>205</bold></highlight> represents a digital television signal including one or more channels. A viewer can tune to a selected channel carried by MPEG-2 transport stream <highlight><bold>205</bold></highlight> to watch a television program while also accessing&mdash;either simultaneously with the television program (e.g., picture-in-picture) or in lieu thereof&mdash;the module content <highlight><bold>390</bold></highlight>. The module content, which may be displayed automatically or only at request of the viewer, may represent program information, advertising, news, or other desired information. Also, the module content <highlight><bold>390</bold></highlight> may be associated with a stand-alone television channel, as noted above. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Data and object carousels may also be applied to interactive environments, such as, by way of example, interactive television. Interactivity may be facilitated by, for example, an interactive session server <highlight><bold>235</bold></highlight> located at the head end (see <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) coupled via a return path or channel <highlight><bold>245</bold></highlight> to a run-time processing environment <highlight><bold>255</bold></highlight> located at the receiving end. The run-time processing environment <highlight><bold>255</bold></highlight>, in conjunction with the interactive session server <highlight><bold>255</bold></highlight>, enables a viewer or user to respond to data received from a data carousel <highlight><bold>300</bold></highlight> and to send requests and/or commands back to the session server. Such an interactive environment may be useful for advertising and/or home shopping applications, as well as others. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The insertion device <highlight><bold>220</bold></highlight>, transmission system <highlight><bold>230</bold></highlight>, transmission media <highlight><bold>240</bold></highlight>, receiving system <highlight><bold>250</bold></highlight>, extraction device <highlight><bold>260</bold></highlight>, decoders; <highlight><bold>270</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><italic>b, </italic></highlight>and output device <highlight><bold>280</bold></highlight> are intended to represent exemplary embodiments of these devices or systems, respectively, such components being well known in the art. Accordingly, the present invention should not be limited by reference to the specific embodiments of the insertion device <highlight><bold>220</bold></highlight>, transmission system <highlight><bold>230</bold></highlight>, transmission media <highlight><bold>240</bold></highlight>, receiving system <highlight><bold>250</bold></highlight>, extraction device <highlight><bold>260</bold></highlight>, decoders <highlight><bold>270</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><italic>b</italic></highlight>, and output device <highlight><bold>280</bold></highlight> described herein, as those of ordinary skill in the art will understand that each of these components may comprise any suitable one of such component known in the art. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Also, it should be understood that some of the devices and systems of the communications apparatus <highlight><bold>200</bold></highlight> may, in practice, comprise a single apparatus. By way of example, the receiving system <highlight><bold>250</bold></highlight>, extraction device <highlight><bold>260</bold></highlight>, and decoders <highlight><bold>270</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><italic>b </italic></highlight>may comprise part of a &ldquo;cable box&rdquo; or part of a satellite receiver, the output device <highlight><bold>280</bold></highlight> comprising a television coupled thereto. Similarly, the receiving system <highlight><bold>250</bold></highlight>, extraction device <highlight><bold>260</bold></highlight>, decoders <highlight><bold>270</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><italic>b </italic></highlight>(which may comprise a single decoder), and output device <highlight><bold>280</bold></highlight> may all comprise part of a television, whether digital or analog, or part of a computer system. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, data carousel <highlight><bold>300</bold></highlight> includes a plurality of data modules <highlight><bold>301</bold></highlight>, <highlight><bold>302</bold></highlight>, and <highlight><bold>303</bold></highlight>, the data module <highlight><bold>301</bold></highlight> having three occurrences or instances, the data module <highlight><bold>302</bold></highlight> having two instances, and the data module <highlight><bold>303</bold></highlight> having one instance. Each of the data modules <highlight><bold>301</bold></highlight>, <highlight><bold>302</bold></highlight>, <highlight><bold>303</bold></highlight> includes module content <highlight><bold>390</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>390</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>390</bold></highlight><highlight><italic>c</italic></highlight>, respectively, such as data files (or data files and directory files). As noted above, a data or object carousel is generally transmitted periodically. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the subsequent periodic transmission of the data carousel <highlight><bold>300</bold></highlight> is denoted as <highlight><bold>300</bold></highlight>&prime; (shown in dashed line). The horizontal axis <highlight><bold>3</bold></highlight> denotes time, indicating that carousel period <highlight><bold>300</bold></highlight>&prime; is transmitted after carousel period <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The data carousel <highlight><bold>300</bold></highlight>&mdash;having multiple instances of a data module (e.g., <highlight><bold>301</bold></highlight>, <highlight><bold>302</bold></highlight>)&mdash;provides a number of advantages. Data carousel <highlight><bold>300</bold></highlight> allows for prioritization of data modules within the carousel. For example, a critical data module may be assigned the greatest number of occurrences (e.g., data module <highlight><bold>301</bold></highlight>) and a low priority data modules assigned a low number of occurrences (e.g., data module <highlight><bold>303</bold></highlight>, which has only one instance). Prioritization of modules within a carousel provides enhanced access to critical data. Also, multiple instances of one or more data modules within a data carousel provides improved tuneability. A television viewer tuning into a channel on which the data carousel <highlight><bold>300</bold></highlight> is being periodically transmitted will have an increased likelihood of receiving the data module <highlight><bold>301</bold></highlight>, as that data module has three instances within the carousel <highlight><bold>300</bold></highlight>. Thus, if the viewer tunes to the channel carrying the data carousel <highlight><bold>300</bold></highlight> after the second instance of the data module <highlight><bold>301</bold></highlight>, the viewer will still capture data module <highlight><bold>301</bold></highlight> during that module&apos;s third occurrence. Compensation for transmission errors and/or data corruption is an additional feature of the data carousel <highlight><bold>300</bold></highlight>. If, for example, the first two instances of data module <highlight><bold>301</bold></highlight> are corrupted during transmission, a viewer may capture the third instance of data module <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Although the data carousel <highlight><bold>300</bold></highlight> having multiple instances of a data module provides the above-noted advantages, the data carousel <highlight><bold>300</bold></highlight> is not optimal in its design. The data modules <highlight><bold>301</bold></highlight>, as well as data modules <highlight><bold>302</bold></highlight>, are arranged successively within the period of the carousel (i.e., they are grouped together). If a television viewer, for example, tunes to the channel carrying data carousel <highlight><bold>300</bold></highlight> at some point after transmission of the third instance of data module <highlight><bold>301</bold></highlight>, the viewer must wait the remainder of the carousel period to capture the module content <highlight><bold>390</bold></highlight>a of data module <highlight><bold>301</bold></highlight>. Such a delay in receiving the data module <highlight><bold>301</bold></highlight> may be especially problematic if the data module <highlight><bold>301</bold></highlight> contains critical data. Thus, an arrangement of the data carousel <highlight><bold>300</bold></highlight> in which the multiple occurrences of a data module are spaced apart would provide even greater tuneability. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Not only may data modules be grouped together within a single period of a data carousel, as illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the instances of a data module may also be grouped together across successive periods of a data carousel. For example, referring to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> data carousel <highlight><bold>400</bold></highlight> includes data modules <highlight><bold>401</bold></highlight>, <highlight><bold>402</bold></highlight>, <highlight><bold>403</bold></highlight>, each having module content <highlight><bold>490</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>490</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>490</bold></highlight><highlight><italic>c</italic></highlight>, respectively. Data module <highlight><bold>401</bold></highlight> has three instances, data module <highlight><bold>402</bold></highlight> has two instances, while data module <highlight><bold>403</bold></highlight> has only a single instance. A subsequent period of the data carousel <highlight><bold>400</bold></highlight> is shown in dashed line and is denoted as <highlight><bold>400</bold></highlight>&prime; . The horizontal axis <highlight><bold>4</bold></highlight>, which denotes time, indicates that the carousel period <highlight><bold>400</bold></highlight>&prime; is transmitted after carousel period <highlight><bold>400</bold></highlight>. Within a period of the data carousel <highlight><bold>400</bold></highlight>, none of the data modules <highlight><bold>401</bold></highlight>, <highlight><bold>402</bold></highlight>, <highlight><bold>403</bold></highlight> exhibit successive occurrences (i.e., no instance of a data module is placed adjacent an instance of a like data module). However, observing the data carousel <highlight><bold>400</bold></highlight> across multiple periods (e.g., <highlight><bold>400</bold></highlight> and <highlight><bold>400</bold></highlight>&prime;), the data carousel <highlight><bold>400</bold></highlight> exhibits successive occurrences of the data module <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a data carousel <highlight><bold>500</bold></highlight> having a plurality of data modules <highlight><bold>501</bold></highlight>, <highlight><bold>502</bold></highlight>, <highlight><bold>503</bold></highlight> arranged, or scheduled, uniformly within the period of the data carousel <highlight><bold>500</bold></highlight> and across multiple periods&mdash;note subsequent period <highlight><bold>500</bold></highlight>&prime; shown in dashed line (and horizontal axis <highlight><bold>5</bold></highlight>, which denotes time)&mdash;of the data carousel <highlight><bold>500</bold></highlight>. The data module <highlight><bold>501</bold></highlight> (having module content <highlight><bold>590</bold></highlight><highlight><italic>a</italic></highlight>) has three instances and may be the highest priority module, the data module <highlight><bold>502</bold></highlight> (having module content <highlight><bold>590</bold></highlight><highlight><italic>b</italic></highlight>) may be a lower priority module, while the data module <highlight><bold>503</bold></highlight> (having module content <highlight><bold>590</bold></highlight><highlight><italic>c</italic></highlight>) may be the lowest priority module within carousel <highlight><bold>500</bold></highlight>. By spreading out the occurrences of the higher priority data modules (e.g., <highlight><bold>501</bold></highlight>, <highlight><bold>502</bold></highlight>), these more frequently occurring data modules are more readily available to a receiver coming online or tuning into the proper channel at some intermediate point during the carousel&apos;s period of transmission. Therefore, as illustrated in <cross-reference target="DRAWINGS">FIGS. 3 through 5</cross-reference>, the efficiency of acquisition of module content (i.e., tuneability) can be maximized not only through multiple instances of higher priority modules, but also through proper scheduling of the modules within al carousel. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> That the tuneability of a data carousel having multiple occurrences of a data module is dependent upon the sequence of modules within the carousel period leads to the notion that a module schedule may be created that provides optimum accessibility of high priority modules. There are a number of criterion that may suggest the most efficient sequence of modules within a carousel period. As noted above, simply increasing the instances of high priority data modules will provide more efficient and robust transmission of critical module content. Also, the instances of a data module should be spread&mdash;as uniformly and as far apart as possible&mdash;within a carousel&apos;s period and across successive repetitions of carousel periods. A further criterion follows from the preceding: transmitting two like data modules in succession, without a different intervening data module, should be avoided. These criterion, however, point to yet another concern in determining the most efficient sequence of data modules within a carousel. All data modules on a carousel must be scheduled according to the same criterion; thus, scheduling conflicts will occur as data modules &ldquo;compete&rdquo; for positions, or slots, within the carousel period. This scheduling conflict may be most acute when there are two or more data modules with the same number of instances&mdash;i.e., having the same, or nearly the same, priority. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, an embodiment of a method <highlight><bold>600</bold></highlight> of scheduling data modules within a data carousel is shown in flow chart format. The following description of the scheduling method <highlight><bold>600</bold></highlight> is further illustrated in the context of an exemplary implementation of the scheduling method <highlight><bold>600</bold></highlight> shown in FIGS. <highlight><bold>7</bold></highlight>A-I, which should be referenced in conjunction with <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The method <highlight><bold>600</bold></highlight> of scheduling data modules will generate a sequence&mdash;or a number of sequences from which the most desirable may be selected&mdash;of data modules providing efficient acquisition and robust data transmission (e.g., compensating for transmission errors and/or data corruption). </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The method <highlight><bold>600</bold></highlight> may begin with determining the carousel period <highlight><bold>610</bold></highlight>. The carousel period is the sum of all module instances. Referring to <cross-reference target="DRAWINGS">FIG. 7A, a</cross-reference> set of data modules includes six instances of a data module <highlight><bold>701</bold></highlight>, three instances of a data module <highlight><bold>702</bold></highlight>, one instance of a data module <highlight><bold>703</bold></highlight>, and three instances of a data module <highlight><bold>704</bold></highlight>. The sum of all the instances of data modules <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>, <highlight><bold>704</bold></highlight> is thirteen; therefore, as illustrated in <cross-reference target="DRAWINGS">FIG. 7B, a</cross-reference> data carousel <highlight><bold>700</bold></highlight> for transmitting the data modules <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>, <highlight><bold>704</bold></highlight> has a period <highlight><bold>715</bold></highlight> of thirteen. Accordingly, there are thirteen &ldquo;empty&rdquo; slots into which the data modules <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>, <highlight><bold>704</bold></highlight> are to be scheduled. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A data module having the greatest number of instances is then selected for scheduling <highlight><bold>620</bold></highlight>. If there are two or more data modules with the same number of occurrences, any of these data modules may be selected at random. Alternatively, rather than making a random selection, criterion may be employed. For example, if one of the two or more data modules having the same number of instances is believed to have a higher priority, that higher priority data module may be selected first for scheduling. Referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, the data module <highlight><bold>701</bold></highlight> has the greatest number of instances. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> For the selected data module <highlight><bold>701</bold></highlight>, the desired interval of that module must be determined <highlight><bold>630</bold></highlight>. The desired interval is the ideal distance between instances of a data module within a carousel&apos;s period. The desired interval of a data module is determined by dividing the carousel period by the number of instances of that data module. If the calculated interval is not a whole number, the desired interval is taken as the largest integer that is less than or equal to the calculated interval. Alternatively, the calculated interval may simply be rounded to the nearest whole number to determine the desired interval. The data module <highlight><bold>701</bold></highlight>, therefore, has a desired interval of two. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Select, at random, an empty or unassigned slot within the carousel period, and assign that slot to an instance of the selected module, as denoted at <highlight><bold>640</bold></highlight>. Referring to <cross-reference target="DRAWINGS">FIG. 7C, a</cross-reference> random slot (marked by an arrow) is selected and assigned to one instance of data module <highlight><bold>701</bold></highlight>. There will always be an available slot within the period, as the period corresponds to the sum of the instances of all modules, It should be understood that the first instance of a module to be scheduled need not necessarily be assigned to a slot at random. For example, the first instance of the first scheduled module may always be assigned to the slot at the beginning of a period, the first instance of the second scheduled module always assigned to the available slot nearest the beginning of the period, the first instance of the third scheduled module always assigned to the next available slot nearest the beginning of the period, and so on. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> From the previously assigned slot, move through the carousel period to the slot corresponding to the selected module&apos;s desired interval (i.e., two for data module <highlight><bold>701</bold></highlight>), which is denoted at <highlight><bold>650</bold></highlight>. If the desired interval extends past the end of the carousel period, wrap around to the start of the carousel period, maintaining the module&apos;s desired interval (see <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, items <highlight><bold>652</bold></highlight>, <highlight><bold>653</bold></highlight>). Assign the slot corresponding to the module&apos;s desired interval to an instance of the selected module, as denoted at <highlight><bold>660</bold></highlight>. If, however, the slot corresponding to the desired interval is already assigned to a data module, move through the carousel period to the first unassigned slot (see <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, items <highlight><bold>654</bold></highlight>, <highlight><bold>655</bold></highlight>), and assign that slot to an instance of the selected module. Referring to <cross-reference target="DRAWINGS">FIG. 7D, a</cross-reference> data module <highlight><bold>701</bold></highlight> is assigned to a slot (marked with an arrow) corresponding to the desired interval of module <highlight><bold>701</bold></highlight>, the desired interval denoted by numeral <highlight><bold>751</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> If there is a remaining instance of the selected module, assign that instance to a slot within the carousel using the same procedure (i.e., steps <highlight><bold>650</bold></highlight>, <highlight><bold>652</bold></highlight>, <highlight><bold>653</bold></highlight>, <highlight><bold>654</bold></highlight>, <highlight><bold>655</bold></highlight>, <highlight><bold>660</bold></highlight>), which is denoted at <highlight><bold>670</bold></highlight>. Referring again to FIG, <highlight><bold>7</bold></highlight>D, the remaining instances of data module <highlight><bold>701</bold></highlight> are each assigned to a slot (marked with arrows). </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> If there is a remaining module that has not been scheduled, the scheduling process is repeated (see <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, item <highlight><bold>680</bold></highlight>). Another module&mdash;having the next greatest number of instances&mdash;is selected. Referring back to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, data modules <highlight><bold>702</bold></highlight> and <highlight><bold>704</bold></highlight> each have three instances; therefore, one of these data modules <highlight><bold>702</bold></highlight>, <highlight><bold>704</bold></highlight> must selected for scheduling. For the example of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, the data module <highlight><bold>704</bold></highlight> was randomly selected for scheduling. As noted above, if there are two or more modules exhibiting the greatest number of instances, a module may be selected for scheduling based on a set of criteria. For example, although they have the same number of instances, data module <highlight><bold>704</bold></highlight> may have a higher priority than data module <highlight><bold>702</bold></highlight>. The desired interval for the data module <highlight><bold>704</bold></highlight>&mdash;i.e., carousel period/number of instances of data module <highlight><bold>704</bold></highlight>&mdash;is four. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> An unassigned slot within the carousel period is then randomly selected and assigned to an instance of the selected module. Referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>E, an unassigned slot (marked with an arrow) is selected and assigned to an instance of data module <highlight><bold>704</bold></highlight>. From this assigned slot, move through the carousel period to the slot corresponding to the module&apos;s desired interval and, if the desired interval extends past the end of the carousel period, wrap around to the start of the period while maintaining the module&apos;s desired interval. If the slot corresponding to the desired interval is assigned to a module, move through the carousel period to the first available slot. Referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>F, the remaining two instances of the data module <highlight><bold>704</bold></highlight> are each assigned to a slot (marked with arrows) in this manner. Note that a slot assignment for the third instance of data module <highlight><bold>704</bold></highlight> is determined by wrapping around to the start of the carousel&apos;s period. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The above-described procedure is then performed for all remaining data modules (i.e., modules <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>). Referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>G, an instance of data module <highlight><bold>702</bold></highlight> (the remaining module having the greatest number of instances) is assigned, at random, to an unassigned slot (marked by arrow) on data carousel <highlight><bold>700</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>H, each of the remaining two instances of data module <highlight><bold>702</bold></highlight> are then assigned to a slot by moving through the carousel <highlight><bold>700</bold></highlight> to the slot corresponding to the module&apos;s desired interval (i.e., four). Note that, for the second instance of data module <highlight><bold>702</bold></highlight>, the slot corresponding to the desired interval (denoted by reference numeral <highlight><bold>752</bold></highlight><highlight><italic>d</italic></highlight>) was previously assigned (to a module <highlight><bold>704</bold></highlight>), requiring that the second instance of data module <highlight><bold>702</bold></highlight> be positioned in the first available slot. The slot assignment for the final instance of data module <highlight><bold>702</bold></highlight> does, however, correspond to the desired interval <highlight><bold>752</bold></highlight><highlight><italic>d. </italic></highlight></paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The only remaining data module&mdash;module <highlight><bold>703</bold></highlight> having one instance&mdash;is then assigned to a slot. As noted above, there should always be an open slot within the carousel period, as the carousel period is equal to the sum of all instances of data modules to be scheduled on the carousel. Thus, in this example, there is only one unassigned slot remaining (marked by an arrow), and this slot is assigned to data module <highlight><bold>703</bold></highlight>, as illustrated in <cross-reference target="DRAWINGS">FIG. 7I</cross-reference>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>I, it can be observed that the instances of each data module having multiple instances (i.e., <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>704</bold></highlight>) are distributed uniformly, or nearly uniformly, throughout the period of data carousel <highlight><bold>700</bold></highlight>. This uniform distribution is maintained not only within the period of carousel <highlight><bold>700</bold></highlight>, but also across successive repetitions of the data carousel <highlight><bold>700</bold></highlight>, the subsequent period of carousel <highlight><bold>700</bold></highlight> being denoted as <highlight><bold>700</bold></highlight>&prime; (a portion of which is shown in dashed line). A horizontal axis <highlight><bold>7</bold></highlight> denotes time and indicates that the carousel period <highlight><bold>700</bold></highlight>&prime; is transmitted after the carousel period <highlight><bold>700</bold></highlight>. No data module on data carousel <highlight><bold>700</bold></highlight>&mdash;within a single period, or across successive periods <highlight><bold>700</bold></highlight>, <highlight><bold>700</bold></highlight>&prime;&mdash;is positioned within carousel <highlight><bold>700</bold></highlight> next to another like data module without at least one different intervening data module. The data carousel <highlight><bold>700</bold></highlight>, as illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>I, presents one example of an optimized schedule for the data modules <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>, <highlight><bold>704</bold></highlight>, such an optimized schedule providing module prioritization, efficient data acquisition, and robust transmission. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, some of the scheduling decisions may be made at random. Specifically, the slot to be assigned the first instance of a module may be selected at random and, if there are two or more modules exhibiting the same number of occurrences, the first to be scheduled may be selected at random. Thus, the choices made during these random decisions will affect the outcome of module scheduling method <highlight><bold>600</bold></highlight> and, accordingly, multiple outcomes exist for application of the scheduling method <highlight><bold>600</bold></highlight> to a set of modules. This characteristic of the scheduling method <highlight><bold>600</bold></highlight> can be illustrated by reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, which shows a data carousel <highlight><bold>800</bold></highlight> having an alternative schedule for the data modules <highlight><bold>701</bold></highlight>, <highlight><bold>702</bold></highlight>, <highlight><bold>703</bold></highlight>, <highlight><bold>704</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7A</cross-reference>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The schedule for data carousel <highlight><bold>800</bold></highlight> was determined using the method <highlight><bold>600</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, with the slot randomly selected for the first instance of each data module marked by an arrow. Also, data module <highlight><bold>702</bold></highlight> was scheduled prior to data module <highlight><bold>704</bold></highlight>. The data carousel <highlight><bold>800</bold></highlight> also exhibits an optimized module schedule within its period, as well as across successive repetitions of the period, the subsequent period of data carousel <highlight><bold>800</bold></highlight> being denoted as <highlight><bold>800</bold></highlight>&prime;, a portion of which is shown in dashed line (horizontal axis <highlight><bold>8</bold></highlight> denoting time, thereby indicating that carousel period <highlight><bold>800</bold></highlight>&prime; is transmitted after carousel period <highlight><bold>800</bold></highlight>). It can be observed, however, that the data carousels <highlight><bold>700</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 7I</cross-reference>) and <highlight><bold>800</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 8</cross-reference>) exhibit significantly different module schedules, raising the question of which of the data carousels <highlight><bold>700</bold></highlight>, <highlight><bold>800</bold></highlight> possesses the most efficient and robust schedule. Thus, in assessing which among many different module schedules&mdash;resulting from numerous iterations of scheduling method <highlight><bold>600</bold></highlight>&mdash;is the most efficient and robust, it would be useful to obtain a measurement of these properties for each schedule or, in other words, a measurement of the &ldquo;goodness&rdquo; of each schedule. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> An embodiment of a method <highlight><bold>900</bold></highlight> of measuring the goodness of a module schedule is illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> in flow chart format. The method <highlight><bold>900</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is based on the premise that an ideal module schedule is one in which the actual intervals&mdash;i.e., the actual number of slots between an instance of a module and that modules prior instance (see <cross-reference target="DRAWINGS">FIGS. 7H and 8</cross-reference>, item <highlight><bold>752</bold></highlight><highlight><italic>a</italic></highlight>)&mdash;of a module are all equal to the desired interval (see <cross-reference target="DRAWINGS">FIGS. 7H and 8</cross-reference>, item <highlight><bold>752</bold></highlight><highlight><italic>d</italic></highlight>), as defined above. Scheduling instances of a module close to one another, as well as scheduling instances of the module too far apart, are both undesirable characteristics of a module schedule. Further, as previously suggested, a particularly poor schedule will result if instances of a module are placed adjacent one another within a carousel. Thus, for the method <highlight><bold>900</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the metric used to quantify the goodness of a module schedule is the difference between the actual interval for an instance of a module and that module&apos;s desired interval&mdash;or the &ldquo;interval difference&rdquo;&mdash;wherein particular scrutiny (e.g., a penalty) is accorded to like modules positioned directly adjacent one another. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> variable&mdash;referred to herein simply as &ldquo;SUM&rdquo;&mdash;is set or cleared to zero <highlight><bold>905</bold></highlight>. A module is selected <highlight><bold>910</bold></highlight> and the desired interval of the selected module is determined <highlight><bold>915</bold></highlight>. An instance of this module is then selected, as denoted at <highlight><bold>920</bold></highlight>, and the actual interval of the selected instance is determined <highlight><bold>925</bold></highlight>. The difference between the desired interval and the actual interval, or interval difference (INTDIFF), is determined for the selected instance, as denoted at <highlight><bold>930</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> A function is then applied to the INTDIFF to determine a RESULT, and the RESULT is added to the SUM, as denoted at reference numerals <highlight><bold>940</bold></highlight> and <highlight><bold>950</bold></highlight>, respectively. Any suitable function may be employed in the method <highlight><bold>900</bold></highlight> of measuring the goodness of a schedule. The function that is applied may, for example, accentuate small values of INTDIFF while downplaying larger values of INTDIFF, such that smaller values of INTDIFF are not obscured in the final metric, or SUM. Exemplary functions that are believed suitable include:</paragraph>
<paragraph lvl="0"><in-line-formula>RESULT&equals;(INTDIFF)<highlight><superscript>2</superscript></highlight></in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula>RESULT&equals;Log&lsqb;(INTDIFF)<highlight><superscript>2</superscript></highlight>&plus;1&rsqb;, or simply</in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula>RESULT&equals;Abs(INTDIFF).</in-line-formula></paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As noted above, the successive occurrence of two instances of the same module is an undesirable characteristic of a carousel, as the placement of like modules next to one another within a carousel provides minimal contribution to the overall tuneability and robustness of a module schedule. In order to emphasize the existence of adjacent like modules in a schedule and, further, to clearly distinguish those schedules exhibiting adjacent like modules from those schedules, that do not, a penalty term may be added to the SUM for each pair of adjacent like modules. The penalty term may comprise a constant that is large in comparison with other values contributing to the SUM, such that a schedule exhibiting adjacent like modules is clearly differentiated from other module schedules or is disqualified. Alternatively, the penalty term may be non-constant. For example, the penalty term may be a function of the number of adjacent like pairs of modules (e.g., the penalty term increases in magnitude for each additional pair of adjacent like modules). Thus, referring to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, if the actual interval for a module instance is equal to 1 (or &minus;1), as denoted at <highlight><bold>960</bold></highlight>, a penalty term is added to the SUM (see reference numeral <highlight><bold>965</bold></highlight>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> If there is a remaining instance of the selected module (<cross-reference target="DRAWINGS">FIG. 9</cross-reference>, item <highlight><bold>970</bold></highlight>), the above-described procedures for determining the INTDIFF, calculating a RESULT and adding the RESULT to the SUM, as well as assessing a penalty, if necessary, are repeated (see <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, items <highlight><bold>920</bold></highlight>, <highlight><bold>925</bold></highlight>, <highlight><bold>930</bold></highlight>, <highlight><bold>940</bold></highlight>, <highlight><bold>950</bold></highlight>, <highlight><bold>960</bold></highlight>, <highlight><bold>965</bold></highlight>). Once all instances of the selected module have been processed, the method <highlight><bold>900</bold></highlight> must be applied to all remaining modules, if any (see <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, item <highlight><bold>980</bold></highlight>), until the impact of all modules on the metric, or SUM, has been assessed. The final SUM that results after considering all modules in the carousel provides a measure of the goodness of the module schedule. The goodness metric for each of a plurality of different module schedules can then be compared to determine which schedule, or schedules, is optimum and will provide the greatest efficiency of acquisition and the most effective compensation for transmission errors and/or data corruption. Generally, the module schedule having the lowest goodness metric will be the optimum module schedule; however, it should be understood that, depending on the metric(s) employed in the method <highlight><bold>900</bold></highlight> of measuring goodness, the most optimum module schedule may not correspond to the lowest goodness measurement. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> An exemplary implementation of the method <highlight><bold>900</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> can be observed with reference to <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference>. <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows a table <highlight><bold>1000</bold></highlight> summarizing the method <highlight><bold>900</bold></highlight> of measuring goodness as applied to the data carousel of <cross-reference target="DRAWINGS">FIG. 7I</cross-reference>. For every instance of each module (columns <highlight><bold>1010</bold></highlight>, <highlight><bold>1020</bold></highlight>), the desired interval and actual interval are determined (columns <highlight><bold>1030</bold></highlight>, <highlight><bold>1040</bold></highlight>). Based on the desired and actual intervals, the INTDIFF is determined (column <highlight><bold>1050</bold></highlight>) and a function is applied to the INTDIFF to determine a RESULT (column <highlight><bold>1060</bold></highlight>). For the implementation of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, as well as <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the function is: RESULT&equals;Log&lsqb;(INTDIFF)<highlight><superscript>2</superscript></highlight>&plus;1&rsqb;. If necessary, a penalty term is also assessed, as shown in column <highlight><bold>1070</bold></highlight>. A SUM is maintained, as shown in column <highlight><bold>1080</bold></highlight>, with the final total of SUM or measure of goodness <highlight><bold>1085</bold></highlight> shown at the bottom of column <highlight><bold>1080</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Similarly, <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a table <highlight><bold>1100</bold></highlight> summarizing the method <highlight><bold>900</bold></highlight> of measuring goodness as applied to the data carousel of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. Again, the desired and actual intervals are determined for each instance of a module (see columns <highlight><bold>1110</bold></highlight>, <highlight><bold>1120</bold></highlight>, <highlight><bold>1130</bold></highlight>, <highlight><bold>1140</bold></highlight>). As shown in columns <highlight><bold>1150</bold></highlight> and <highlight><bold>1160</bold></highlight>, the INTDIFF is then determined and the function&mdash;i.e., RESULT&equals;Log&lsqb;(INTDIFF)<highlight><superscript>2</superscript></highlight>&plus;1&rsqb; applied to the INTDIFF. Any penalty term is assessed (column <highlight><bold>1170</bold></highlight>) and the RESULT and penalty added to the SUM (column <highlight><bold>1180</bold></highlight>). All modules instances are considered to determine the measure of goodness <highlight><bold>1185</bold></highlight>. With reference to <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference>, it can be observed that the data carousel <highlight><bold>700</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7I</cross-reference> exhibits a goodness measurement of 1.6, whereas the data carousel <highlight><bold>800</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> exhibits a goodness metric of 0.9. Therefore, the module schedule of data carousel <highlight><bold>800</bold></highlight> will generally provide greater tuneability and more robust transmission in comparison to the module schedule of data carousel <highlight><bold>700</bold></highlight>. It should be noted that, in <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> (as well as in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>), the desired interval used in the method <highlight><bold>900</bold></highlight> could be a decimal number as opposed to an integer number to reflect the true periodicity of the data module in the carousel period (e.g., the true desired interval for data module <highlight><bold>701</bold></highlight> is 13/6&equals;2.1666 . . . ). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a hypothetical embodiment of a data carousel <highlight><bold>1200</bold></highlight> that exhibits a pair of adjacent like modules&mdash;i.e., the first instance of module <highlight><bold>701</bold></highlight> (marked by arrow) and the subsequent instance of module <highlight><bold>701</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a table <highlight><bold>1300</bold></highlight> summarizing the method <highlight><bold>900</bold></highlight> of measuring goodness as applied to the data carousel <highlight><bold>1200</bold></highlight>. The function applied in the implementations of <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> was also utilized in the implementation of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> and, further, a penalty of 5.0 was assessed for any adjacent like pairs of data modules. Data carousel <highlight><bold>1200</bold></highlight> exhibits a goodness metric of 7.1 (see <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, item <highlight><bold>1385</bold></highlight>). Thus, the data carousel <highlight><bold>1200</bold></highlight> is clearly set apart from the data carousel <highlight><bold>700</bold></highlight> (goodness metric of 1.6) and the data carousel <highlight><bold>800</bold></highlight> (goodness metric of 0.9), enabling the module schedule of data carousel <highlight><bold>1200</bold></highlight> to be easily identified as exhibiting a poorer module schedule relative to other data carousels (e.g., <highlight><bold>700</bold></highlight>, <highlight><bold>800</bold></highlight>) and discarded. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> From the foregoing discussion of <cross-reference target="DRAWINGS">FIGS. 9 through 13</cross-reference>, it should be understood than any suitable combination of a function and penalty term may be utilized in the method <highlight><bold>900</bold></highlight> of measuring the goodness of a module schedule, so long as the selected function and penalty term provide a metric that differentiates between poor schedules and those schedules providing as least some tuneability and robustness of transmission. It should be further understood that, in addition to the exemplary functions disclosed herein&mdash;i.e., RESULT&equals;(INTDIFF)<highlight><superscript>2</superscript></highlight>; RESULT&equals;Log&lsqb;(INTDIFF)<highlight><superscript>2</superscript></highlight>&plus;1&rsqb;; and RESULT&equals;Abs(INTDIFF)&mdash;any other suitable function known in the art may be employed in the method <highlight><bold>900</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> An exemplary embodiment of carousel generator <highlight><bold>210</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) is shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. The carousel generator <highlight><bold>210</bold></highlight> is capable of generating a module schedule having multiple instances of a data module and, optionally, determining the goodness of a module schedule. Carousel generator <highlight><bold>210</bold></highlight> includes a processing unit <highlight><bold>211</bold></highlight> coupled to a bus <highlight><bold>212</bold></highlight>. Processing unit <highlight><bold>211</bold></highlight> may comprise one or more processors, one or more Application Specific Integrated Circuits (ASICs), or any other suitable circuitry or integrated circuit device(s). A memory <highlight><bold>214</bold></highlight> is coupled to the processing unit <highlight><bold>211</bold></highlight> via bus <highlight><bold>212</bold></highlight>, the memory <highlight><bold>214</bold></highlight> comprising non-volatile memory (e.g., ROM), volatile memory (e.g., DRAM), or any suitable combination thereof. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Resident in memory <highlight><bold>214</bold></highlight> is application program or code <highlight><bold>215</bold></highlight>. Application program <highlight><bold>215</bold></highlight> comprises a set of instructions that, when executed in processing unit <highlight><bold>211</bold></highlight>, will schedule a plurality of data modules&mdash;at least one of which may include multiple instances&mdash;within a carousel period to create one or more data carousels <highlight><bold>300</bold></highlight>. For example, application program <highlight><bold>215</bold></highlight> may include instructions to implement the method <highlight><bold>600</bold></highlight> of scheduling modules shown and described with respect to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. In a further embodiment, application program <highlight><bold>215</bold></highlight> also includes instructions to implement the method <highlight><bold>900</bold></highlight> of measuring the goodness of a module schedule, as shown and described with respect to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. It should be understood that all or a portion of the instructions comprising application program <highlight><bold>215</bold></highlight> may be resident on, or implemented within, processing unit <highlight><bold>211</bold></highlight> or other suitable circuitry. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> As set forth above, during execution of the method <highlight><bold>600</bold></highlight> of scheduling modules on a carousel, one or more random decisions (e.g., slot assignment for first instance of a module; which of multiple modules exhibiting the same number of instances to schedule first) may be made. Accordingly, the carousel generator <highlight><bold>210</bold></highlight> may include a pseudo random generator for executing this random decision ranking process. The pseudo random generator may be implemented in software (e.g. application program <highlight><bold>215</bold></highlight>) or, alternatively, in hardware (e.g., processing unit <highlight><bold>211</bold></highlight> or other circuitry). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The data (or data files and directory files) to be downloaded into a module for scheduling onto a data carousel <highlight><bold>300</bold></highlight> are downloaded from a data source <highlight><bold>218</bold></highlight>. In an alternative embodiment, at least some (or all) of the data is obtained from an internal (or removable) data source or memory device <highlight><bold>217</bold></highlight>. The internal (or removable) memory source may comprise any suitable memory device, such as a hard disk drive, CD ROM drive, or floppy disk drive. An assembled data carousel (or carousels) <highlight><bold>300</bold></highlight> may, in a further embodiment, be stored in a buffer memory device <highlight><bold>219</bold></highlight> for transmission to, or access by, the insertion device <highlight><bold>220</bold></highlight>. The buffer memory device <highlight><bold>219</bold></highlight> may comprise any suitable memory device, including both volatile and non-volatile memory, as well as a hard disk drive. As noted above, the insertion device <highlight><bold>220</bold></highlight> then encapsulates the data carousel (or carousels) <highlight><bold>300</bold></highlight> into, for example, an MPEG-2 transport stream <highlight><bold>205</bold></highlight> for periodic transmission. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Carousel generator <highlight><bold>210</bold></highlight> may also include a user interface <highlight><bold>216</bold></highlight>. User interface <highlight><bold>216</bold></highlight> comprises any suitable device and/or instructions enabling an operator to interact with the carousel generator <highlight><bold>210</bold></highlight>. An input device <highlight><bold>213</bold></highlight> for receiving commands from an operator may be coupled to the user interface <highlight><bold>216</bold></highlight>, the input device <highlight><bold>213</bold></highlight> comprising a mouse, keyboard, touch screen, or other suitable device. User interface <highlight><bold>216</bold></highlight> may be used to select data files (or data files and directory files) to be placed in a module and, further, to select which modules will be placed on a carousel. Also, user interface <highlight><bold>216</bold></highlight> may enable the operator to prioritize a set of modules&mdash;i.e., select the number of instances for each module. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In another embodiment, the user interface <highlight><bold>216</bold></highlight> allows an operator to select the function and penalty term to be used in assessing the goodness of a module schedule. Thus, the operator can create a plurality of schedules or the same set of modules and subsequently select the most efficient and robust carousel based on a comparison of the goodness metric for each schedule. In addition, the user interface <highlight><bold>216</bold></highlight> may be employed to optimize the performance of the carousel generator <highlight><bold>210</bold></highlight> by varying the function and/or penalty term used in determining the goodness measurement and assessing the effect of the selected function and penalty term, respectively, on the outcome of the goodness metric. It should be understood that information such as module priority, the number of instances of a module, and the function and penalty to be used in the goodness metric, or a portion of such information, may be downloaded from data source <highlight><bold>218</bold></highlight> (or data source <highlight><bold>217</bold></highlight>). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In yet a further embodiment, the user interface <highlight><bold>216</bold></highlight> may include a graphical user interface (GUI) <highlight><bold>216</bold></highlight><highlight><italic>a</italic></highlight>. An exemplary embodiment of a GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>is shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. The GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>may present the user with a list <highlight><bold>1501</bold></highlight> of all modules to be placed on a carousel, including each module&apos;s number <highlight><bold>1511</bold></highlight>, number of instances <highlight><bold>1512</bold></highlight> in a carousel period, and name or description <highlight><bold>1513</bold></highlight>. The GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>may also show or report the current (or a selected) module schedule <highlight><bold>1502</bold></highlight> for the carousel, as well as that schedule&apos;s measure of goodness <highlight><bold>1503</bold></highlight>. GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>may also display or report a plurality of module schedules <highlight><bold>1502</bold></highlight> and their associated goodness metric <highlight><bold>1503</bold></highlight> for comparison. In addition, GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>may display to the operator the function and penalty term used in assessing the goodness of one or more schedules. Further, the GUI <highlight><bold>216</bold></highlight><highlight><italic>a </italic></highlight>may be used to input the operator&apos;s selection of a module schedule for a carousel and to commence transmission of the carousel to the buffer <highlight><bold>219</bold></highlight> and/or insertion device <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Embodiments of a carousel having multiple instances of a module, embodiments of a method <highlight><bold>600</bold></highlight> of scheduling modules onto a carousel, embodiments of a method <highlight><bold>900</bold></highlight> of measuring the goodness of a modules schedule, and embodiments of a carousel generator <highlight><bold>210</bold></highlight> having been herein described, those of ordinary skill in the art will appreciate the many advantages thereof, respectively. A data or object carousel having multiple instances of a data or object module provides enhanced tuneability, prioritization, and compensation for transmission errors and/or data corruption. Such a data or object carousel enables the receiving entity to quickly acquire all modules upon tuning to the signal conveying the carousel. The method <highlight><bold>600</bold></highlight> of scheduling modules in a carousel may provide&mdash;by performing multiple iterations&mdash;any desired number of module schedules, each module schedule exhibiting efficiency of acquisition and robust transmission. These schedules may then be compared using the method <highlight><bold>900</bold></highlight> of measuring goodness to determine which of the plurality of proposed schedules is the most efficient and robust. The carousel generator <highlight><bold>210</bold></highlight> may implement the method <highlight><bold>600</bold></highlight> of scheduling modules, as well as the method <highlight><bold>900</bold></highlight> of measuring the goodness of a module schedule, and may also include a user interface <highlight><bold>216</bold></highlight> enabling an operator to easily create and select a data or object carousel. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> A data or object carousel having multiple instances of a data or object module, or multiple instances of two or more modules, as well as the above-described apparatus and methods for scheduling modules on a carousel and measuring the goodness of a module schedule, are generally applicable to all types of communication systems. For example, a carousel having multiple instances of a module may find utility in digital television broadcasting&mdash;whether standard definition or high definition&mdash;computer networking, and wireless communications, including cellular technologies, Personal Communications Services (PCS) technologies, and Code Division Multiple Access (CDMA) technologies. See, e.g., Telecommunication Industry Association (TIA) IS-136, Rev. B, <highlight><italic>Time Division Multiple Access </italic></highlight>(TDMA) <highlight><italic>Cellular </italic></highlight>PCS; and American National Standards Institute (ANSI) J-STD-018, <highlight><italic>Recommended Minimum Performance Requirements for </italic></highlight>1.8 to 2.0 GHz Code <highlight><italic>Division Multiple Access </italic></highlight>(CDMA) <highlight><italic>Personal Stations</italic></highlight>. Further, although described herein in the context of encapsulating a data or object carousel into an MPEG-2 transport stream, the present invention is applicable to any communication signal and/or system, irrespective of the particular standards or architecture employed. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The foregoing detailed description and accompanying drawings are only illustrative and not restrictive. They have been provided primarily for a clear and comprehensive understanding of the present invention and no unnecessary limitations are to be understood therefrom. Numerous additions, deletions, and modifications to the embodiments described herein, as well as alternative arrangements, may be devised by those skilled in the art without departing from the spirit of the present invention and the scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus comprising: 
<claim-text>a data source to provide a plurality of modules for a carousel, at least one module of the plurality of modules comprising one of a data module and an object module; and </claim-text>
<claim-text>a processing unit coupled with the data source to generate a module schedule including at least two instances of said at least one of module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a user interface coupled with the processing unit. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a memory coupled with the processing unit. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a buffer memory device coupled with the processing unit to store the carousel. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising an insertion device coupled with the processing unit to encapsulate the carousel into a transmission. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising a transmission system coupled with the insertion device to transmit the encapsulated carousel to a receiving system. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, the data source comprising one of an external data source, an internal data source, and a removable data source. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, the processing unit including a pseudo random generator. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a pseudo random generator coupled with the processing unit. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An apparatus comprising: 
<claim-text>a memory; </claim-text>
<claim-text>a set of instructions resident on the memory, the set of instructions, when executed, generating a module schedule including a plurality of modules, at least one module of the plurality of modules comprising one of a data module and an object module, said at least one module exhibiting a first instance and at least a second instance; and </claim-text>
<claim-text>a processing unit coupled with the memory to execute the set of instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, the set of instructions, when executed, determining a goodness metric of the module schedule. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, the set of instructions, when executed, making at least one random scheduling decision. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, the set of instructions, when executed, generating at least one other module schedule including the plurality of modules. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising a user interface coupled with the processing unit, wherein the set of instructions, when executed, output the module schedule to the user interface. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising a data source to provide the plurality of modules. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An apparatus comprising: 
<claim-text>a processing unit to generate a carousel, the carousel including a plurality of modules; and </claim-text>
<claim-text>a graphical user interface coupled with the processing unit to display a list of the plurality of modules, display a number of instances for each of the plurality of modules, and display a module schedule for the plurality of modules. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, the graphical user interface to display a goodness metric for the module schedule. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, the graphical user interface to display a penalty term and a function. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, the graphical user interface to display at least a second module schedule for the plurality of modules. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, the graphical user interface to display a description for each of the plurality of modules. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising an input device coupled with the graphical user interface to receive commands, from a user. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. An apparatus comprising: 
<claim-text>a carousel generator to generate a carousel having a plurality of modules, at least one module of the plurality of modules comprising one of a data module and an object module, said at least one module exhibiting a first instance and at least a second instance; </claim-text>
<claim-text>an insertion device coupled with the carousel generator to encapsulate the carousel into a transmission; and </claim-text>
<claim-text>a transmission system coupled with the insertion device to transmit the encapsulated carousel to a receiving system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, the carousel generator to determine a goodness metric for the carousel. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising: 
<claim-text>a session server disposed at the transmission system; and </claim-text>
<claim-text>a return channel to couple the session server with a run-time processing environment at the receiving system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A method comprising: 
<claim-text>receiving a plurality of modules, at least one module of the plurality of modules comprising one of a data module and an object module; </claim-text>
<claim-text>receiving a designated number of instances for said at least one module, the designated number of instances being at least two; and </claim-text>
<claim-text>generating a carousel including the plurality of modules. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, further comprising: 
<claim-text>receiving a function and a penalty term; and </claim-text>
<claim-text>determining a goodness metric for the carousel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, further comprising receiving from a data source the designated number of instances, the function, and the penalty term. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, further comprising receiving from a user interface the designated number of instances, the function, and the penalty term. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, further comprising providing the carousel to a user interface. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, further comprising providing the carousel to an insertion device for encapsulation into a transmission. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A method comprising: 
<claim-text>displaying to a user a list of a plurality of modules on a carousel; </claim-text>
<claim-text>displaying to the user a number of instances of each module of the plurality of modules; and </claim-text>
<claim-text>reporting to the user a first module schedule for the carousel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, further comprising reporting to the user a first goodness metric associated with the first module schedule. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, further comprising displaying to the user a penalty term and a function. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, further comprising: 
<claim-text>reporting to the user a second module schedule for the carousel; and </claim-text>
<claim-text>reporting to the user a second goodness metric associated with the second module schedule. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, further comprising receiving a module schedule selection from the user, the module schedule selection designating one of the first module schedule and the second module schedule for encapsulation into a transmission. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A method comprising: 
<claim-text>receiving a plurality of modules for a carousel, at least one module of the plurality of modules comprising one of a data module and am object module; </claim-text>
<claim-text>receiving at least two instances of said at least one module; </claim-text>
<claim-text>generating a first module schedule for the plurality of modules; and </claim-text>
<claim-text>outputting the first module schedule to a user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>determining a goodness metric for the first module schedule; and </claim-text>
<claim-text>outputting the goodness metric to the user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>receiving a function and a penalty term; and </claim-text>
<claim-text>outputting the function and the penalty term to the usei-interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>generating a second module schedule for the plurality of modules; and </claim-text>
<claim-text>outputting the second module schedule to the user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising providing one of the first module schedule and the second module schedule to an insertion device for encapsulation into a transmission. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. An article of manufacture comprising: 
<claim-text>a machine accessible medium, the machine accessible medium providing instructions that, when executed by a machine, cause the machine to 
<claim-text>receive a plurality of modules, at least one module of the plurality of modules comprising one of a data module and an object module; </claim-text>
<claim-text>receive a designated number of instances for said at least one module, the designated number of instances being at least two; and </claim-text>
<claim-text>generate a carousel including the plurality of modules. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to: 
<claim-text>receive a function and a penalty term; and </claim-text>
<claim-text>determine a goodness metric for the carousel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to receive from a data source the designated number of instances, the function, and the penalty term. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to receive from a laser interface the designated number of instances, the function, and the penalty term. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to provide the carousel to a user interface. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to provide the carousel to an insertion device for encapsulation into a transmission. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. An article of manufacture comprising: 
<claim-text>a machine accessible medium, the machine accessible medium providing instructions that, when executed by a machine, cause the machine to 
<claim-text>display to a user a list of a plurality of modules on a carousel; </claim-text>
<claim-text>display to the user a number of instances of each module of the plurality of modules; and </claim-text>
<claim-text>report to the user a first module schedule for the carousel. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to report to the user a first goodness metric associated with the first module schedule. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to display to the user a penalty term and a function. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to: 
<claim-text>report to the user a second module schedule for the carousel; and </claim-text>
<claim-text>report to the user a second goodness metric associated with the second module schedule. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to receive a module schedule selection from the user, the module schedule selection designating one of the first module schedule and the second module schedule for encapsulation into a transmission. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. An article of manufacture comprising: 
<claim-text>a machine accessible medium, the machine accessible medium providing instructions that, when executed by a machine, cause the machine to 
<claim-text>receive a plurality of modules for a carousel, at least one module of the plurality of modules comprising one of a data module and an object module; </claim-text>
<claim-text>receive at least two instances of said at least one module; </claim-text>
<claim-text>generate a first module schedule for the plurality of modules; and </claim-text>
<claim-text>output the first module schedule to a user interlace. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to: 
<claim-text>determine a goodness metric for the first module schedule; and </claim-text>
<claim-text>output the goodness metric to the user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to: 
<claim-text>receive a function and a penalty term; and </claim-text>
<claim-text>output the function and the penalty term to the user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to: 
<claim-text>generate a second module schedule for the plurality of modules; and </claim-text>
<claim-text>output the second module schedule to the user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The article of manufacture of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein the instructions, when executed, further cause the machine to provide one of the first module schedule and the second module schedule to an insertion device for encapsulation into a transmission.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001901A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001901A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001901A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001901A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001901A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001901A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001901A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001901A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001901A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001901A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001901A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001901A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001901A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
