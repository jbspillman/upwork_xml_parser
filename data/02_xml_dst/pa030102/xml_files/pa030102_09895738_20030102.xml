<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005295A1-20030102-D00000.TIF SYSTEM "US20030005295A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005295A1-20030102-D00001.TIF SYSTEM "US20030005295A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005295A1-20030102-D00002.TIF SYSTEM "US20030005295A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005295A1-20030102-D00003.TIF SYSTEM "US20030005295A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005295A1-20030102-D00004.TIF SYSTEM "US20030005295A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005295</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895738</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>167000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and apparatus to improve the protection of information presented by a computer</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Luke</given-name>
<middle-name>E.</middle-name>
<family-name>Girard</family-name>
</name>
<residence>
<residence-us>
<city>Santa Clara</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Mark L. Watson</name-1>
<name-2>BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP</name-2>
<address>
<address-1>Seventh Floor</address-1>
<address-2>12400 Wilshire Boulevard</address-2>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1026</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">According to one embodiment a method is disclosed. The method includes receiving encrypted video data at a graphics controller from a microprocessor, decrypting the data at the graphics controller and rendering the data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">COPYRIGHT NOTICE </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> Contained herein is material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent disclosure by any person as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all rights to the copyright whatsoever. </paragraph>
</section>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention pertains generally to personal computer security. In particular, the invention pertains to protecting electronic documents on a personal computer from unauthorized copying or other harmful intervention. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Widespread use of the Internet and electronic mail (e-mail) has left millions of personal computers (PCs) vulnerable to downloaded viruses and other types of malicious software that can destroy programs, copy and upload private documents, and perform other harmful acts, frequently without the PC operator&apos;s knowledge. The increasing popularity of downloaded programs has multiplied the problem significantly, since such programs create so many more opportunities to unknowingly download the malicious software. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Due to their open architecture, most PCs provide very little protection against such destructive software. It is this very openness that has made the PC platform the general-purpose solution provider that it is. Other types of computers are also vulnerable to such attacks in varying degrees, but the pervasive use of PCs has drawn much attention to the problem as it applies to PCs. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In the past, owners of copyrighted information or other intellectual property have been reluctant to allow their property to be viewed on the PC platform (books, movies, sensitive corporate documents, etc.) as the nature of the open PC platform makes the property vulnerable to mischievous software that may run in the background. Although self-replicating destructive software (viruses) attracts the most attention, copyright owners are more concerned with the illegal copying and distribution of any document that they permit to be downloaded to a computer. This is particularly true of e-books, or books that are available electronically by downloading the text of those books over a network such as the Internet. The ease of copying documents downloaded into a PC makes it easy to illicitly reproduce and forward copyrighted materials without detection of this activity by the copyright owner. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Typically, protected content in the form of encrypted data is provided (e.g., via the Internet) to a storage subsystem (e.g., main memory, hard disk, etc.), where it is stored for subsequent use. When the data is ready for presentation, it is retrieved from storage and presented to a player for processing. The player is generally software running in the PC. Decryption of the encrypted data can take place in the player, which can also reformat the data. The processed data is then passed to a graphics sub-system, where it is formatted for presentation at a display device, such as a video monitor. Note: although the terms &ldquo;document&rdquo; and &ldquo;display&rdquo; are used here, this scenario applies equally well to graphics video data and to audio data, such as music, that is played through speakers. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Previous attempts to protect downloaded data have focused primarily on encrypting the data for delivery and storage. However, once the data is decrypted, formatted, and sent to the graphics controller, the bit-image of that data is generally placed in a video memory where the data is repeatedly read out and transmitted to the display device. For reasons of flexibility and usability, the contents of the video memory can generally be read by the PC that implements the player, and by other devices as well. Many graphics controllers also have a secondary interface that also permits both read and write capability of the video memory by other devices, as well as permitting direct transmission of video data. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> However, data in the video memory can be captured, and subsequently saved and/or transmitted, for later display in an unauthorized manner. For efficiency of transmission, the offending software that captures the bit-image from video memory may also use the text font maps stored in the PC to interpret the bit image and convert any displayable text back to a standard word processing format. Thus, by using resources freely available in the PC, the supposedly protected data in the graphics controller may be retrieved and stored and/or transmitted to another device, and the retrieved data can be reverse-engineered into a much more compact and usable form before such storage/transmission. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Since many players are in the form of a PC that is vulnerable to modification by maliciously loaded software, this exposure of the graphics subsystem creates a security problem that discourages the use of PCs for any displayable data that needs to be protected, such as copyrighted video material. Once the data is placed in the graphics subsystem, that data is vulnerable to unauthorized monitoring and capture by software that has been illicitly placed in the computer. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention. The drawings, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of one embodiment of a computer system; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of one embodiment of a chipset; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of one embodiment of a graphics controller; and </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram for one embodiment of protecting video data transmitted from a player application to a graphics controller. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> A mechanism for protecting rendering and the display of content in a computer system is described. According to one embodiment, electronic documents are protected during transmission between a microprocessor and a graphics subsystem. Further, data is protected from harmful effects during the delivery of electronic documents that are downloaded from a publisher/owner to a computer for display. As a result, unauthorized copying, diversion, modification, destruction, or other harmful effects to the received content can be prevented upon delivery. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Reference in the specification to &ldquo;one embodiment&rdquo; or &ldquo;an embodiment&rdquo; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase &ldquo;in one embodiment&rdquo; in various places in the specification are not necessarily all referring to the same embodiment. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &ldquo;processing&rdquo; or &ldquo;computing&rdquo; or &ldquo;calculating&rdquo; or &ldquo;determining&rdquo; or &ldquo;displaying&rdquo; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system&apos;s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The instructions of the programming language(s) may be executed by one or more processing devices (e.g., processors, controllers, control processing units (CPUs), execution cores, etc.). </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of one embodiment of a computer system <highlight><bold>100</bold></highlight>. Computer system <highlight><bold>100</bold></highlight> includes a processor <highlight><bold>101</bold></highlight> that processes data signals. Processor <highlight><bold>101</bold></highlight> may be a complex instruction set computer (CISC) microprocessor, a reduced instruction set computing (RISC) microprocessor, a very long instruction word (VISW) microprocessor, a processor implementing a combination of instruction sets, or other processor device. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In one embodiment, processor <highlight><bold>101</bold></highlight> is a processor in the Pentium(&reg; family of processors including the Pentium&reg; II family and mobile Pentium&reg; and Pentium&reg; II processors available from Intel Corporation of Santa Clara, Calif. Alternatively, other processors may be used. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of a computer system <highlight><bold>100</bold></highlight> employing a single processor computer. However, one of ordinary skill in the art will appreciate that computer system <highlight><bold>100</bold></highlight> may be implemented using having multiple processors. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Processor <highlight><bold>101</bold></highlight> is coupled to a processor bus <highlight><bold>110</bold></highlight>. Processor bus <highlight><bold>210</bold></highlight> transmits data signals between processor <highlight><bold>201</bold></highlight> and other components in computer system <highlight><bold>100</bold></highlight>. Computer system <highlight><bold>100</bold></highlight> also includes a memory <highlight><bold>113</bold></highlight>. In one embodiment, memory <highlight><bold>113</bold></highlight> is a dynamic random access memory (DRAM) device. However, in other embodiments, memory <highlight><bold>113</bold></highlight> may be a static random access memory (SRAM) device, or other memory device. Memory <highlight><bold>113</bold></highlight> may store instructions and code represented by data signals that may be executed by processor <highlight><bold>101</bold></highlight>. According to one embodiment, a cache memory <highlight><bold>102</bold></highlight> resides within processor <highlight><bold>101</bold></highlight> and stores data signals that are also stored in memory <highlight><bold>213</bold></highlight>. Cache <highlight><bold>102</bold></highlight> speeds up memory accesses by processor <highlight><bold>101</bold></highlight> by taking advantage of its locality of access. In another embodiment, cache <highlight><bold>102</bold></highlight> resides external to processor <highlight><bold>101</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Computer system <highlight><bold>100</bold></highlight> further includes a chipset <highlight><bold>111</bold></highlight> coupled to processor bus <highlight><bold>110</bold></highlight> and memory <highlight><bold>113</bold></highlight>. In one embodiment, chip set <highlight><bold>220</bold></highlight> is the <highlight><bold>810</bold></highlight> chipset available from Intel Corporation; however, other chip sets can also be used. Chipset <highlight><bold>111</bold></highlight> directs data signals between processor <highlight><bold>101</bold></highlight>, memory <highlight><bold>113</bold></highlight>, and other components in computer system <highlight><bold>100</bold></highlight>. In addition, chipset <highlight><bold>111</bold></highlight> provides graphics control functions. Chipset <highlight><bold>111</bold></highlight> is coupled to a display device <highlight><bold>122</bold></highlight>. Display device <highlight><bold>122</bold></highlight> may be a television set, a computer monitor, a flat panel display or other display device. Display device <highlight><bold>122</bold></highlight> receives data signals from processor <highlight><bold>101</bold></highlight> through chipset <highlight><bold>111</bold></highlight> and displays the information and data signals to the user of computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Further, chipset <highlight><bold>111</bold></highlight> bridges the data signals between processor bus <highlight><bold>110</bold></highlight>, memory <highlight><bold>113</bold></highlight>, and a first input/output (I/O) bus <highlight><bold>120</bold></highlight>. In one embodiment, I/O bus <highlight><bold>120</bold></highlight> may be a single bus or a combination of multiple buses. In a further embodiment, I/O bus <highlight><bold>120</bold></highlight> may be a Peripheral Component Interconnect adhering to a Specification Revision 2.1 bus developed by the PCI Special Interest Group of Portland, Oreg. In another embodiment, I/O bus <highlight><bold>120</bold></highlight> may be a Personal Computer Memory Card International Association (PCMCIA) bus developed by the PCMCIA of San Jose, Calif. Alternatively, other busses may be used to implement I/O bus. I/O bus <highlight><bold>120</bold></highlight> provides communication links between components in computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A network controller <highlight><bold>121</bold></highlight> is coupled I/O bus <highlight><bold>120</bold></highlight>. Network controller <highlight><bold>121</bold></highlight> links computer system <highlight><bold>100</bold></highlight> to a network of computers (not shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) and supports communication among the machines. A video camera <highlight><bold>123</bold></highlight> is also coupled to I/O bus <highlight><bold>120</bold></highlight>. Computer system <highlight><bold>100</bold></highlight> includes a second I/O bus <highlight><bold>130</bold></highlight> coupled to I/O bus <highlight><bold>120</bold></highlight> via a bus bridge <highlight><bold>124</bold></highlight>. Bus bridge <highlight><bold>124</bold></highlight> operates to buffer and bridge data signals between I/O bus <highlight><bold>120</bold></highlight> and I/O bus <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> I/O bus <highlight><bold>130</bold></highlight> may be a single bus or a combination of multiple buses. In one embodiment, I/O bus <highlight><bold>130</bold></highlight> is an Industry Standard Architecture (ISA) Specification Revision 1.0a bus developed by International Business Machines of Armonk, N.Y. However, other bus standards may also be used, for example Extended Industry Standard Architecture (EISA) Specification Revision 3.12 developed by Compaq Computer, et al. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> I/O bus <highlight><bold>130</bold></highlight> provides communication links between components in computer system <highlight><bold>100</bold></highlight>. A data storage device <highlight><bold>131</bold></highlight> is coupled to I/O bus <highlight><bold>130</bold></highlight>. I/O device <highlight><bold>131</bold></highlight> may be a hard disk drive, a floppy disk drive, a CD-ROM device, a flash memory device or other mass storage device. A keyboard interface <highlight><bold>132</bold></highlight> is also coupled to I/O bus <highlight><bold>130</bold></highlight>. Keyboard interface <highlight><bold>132</bold></highlight> may be a keyboard controller or other keyboard interface. In addition, keyboard interface <highlight><bold>132</bold></highlight> may be a dedicated device or can reside in another device such as a bus controller or other controller. Keyboard interface <highlight><bold>132</bold></highlight> allows coupling of a keyboard to computer system <highlight><bold>100</bold></highlight> and transmits data signals from the keyboard to computer system <highlight><bold>100</bold></highlight>. An audio controller is also coupled to I/O bus <highlight><bold>130</bold></highlight>. Audio controller <highlight><bold>133</bold></highlight> operates to coordinate the recording and playing of sounds. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to one embodiment, computer system <highlight><bold>100</bold></highlight> enables encrypted graphics data to be transmitted to chipset <highlight><bold>111</bold></highlight> where the data is decrypted and rendered for display. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of one embodiment of chipset <highlight><bold>111</bold></highlight>. Chipset <highlight><bold>111</bold></highlight> includes a graphics interface <highlight><bold>210</bold></highlight>, a memory controller <highlight><bold>220</bold></highlight> and a graphics controller <highlight><bold>230</bold></highlight>. Memory controller <highlight><bold>220</bold></highlight> accesses main memory <highlight><bold>113</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) based upon commands received from processor <highlight><bold>101</bold></highlight>, graphics controller <highlight><bold>230</bold></highlight> and one or more peripheral devices within computer system <highlight><bold>100</bold></highlight>. Memory controller <highlight><bold>300</bold></highlight> may read data from, and write data to, memory <highlight><bold>113</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Graphics controller <highlight><bold>230</bold></highlight> allows coupling of display device <highlight><bold>122</bold></highlight> to computer system <highlight><bold>100</bold></highlight>, and acts as an interface between display device <highlight><bold>122</bold></highlight> and computer system <highlight><bold>100</bold></highlight>. In one embodiment, graphics controller <highlight><bold>230</bold></highlight> is coupled to display device <highlight><bold>122</bold></highlight>. However, in other embodiments, graphics controller <highlight><bold>230</bold></highlight> may a monochrome display adapter (MDA) card a color graphics adapter (CGA) card, an enhanced graphics adapter (EGA) card, an extended graphics array (XGA) card or other graphics controllers. In such embodiments, graphics controller <highlight><bold>230</bold></highlight> may be coupled to bus <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of one embodiment of graphics controller <highlight><bold>230</bold></highlight>. Graphics controller <highlight><bold>230</bold></highlight> includes interfaces <highlight><bold>310</bold></highlight>, <highlight><bold>330</bold></highlight> and <highlight><bold>340</bold></highlight>. In addition, graphics controller <highlight><bold>230</bold></highlight> includes a memory <highlight><bold>320</bold></highlight>, a control circuit <highlight><bold>350</bold></highlight>, a decryption module <highlight><bold>360</bold></highlight> and a rendering engine <highlight><bold>370</bold></highlight>. According to one embodiment, video data transmitted from processor <highlight><bold>101</bold></highlight> to graphics controller <highlight><bold>230</bold></highlight> is protected against software running in the background that may have unauthorized access to the data. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In conventional computer systems, video data that is to be displayed at display device <highlight><bold>122</bold></highlight> is rendered at processor <highlight><bold>101</bold></highlight> and transmitted to graphics controller <highlight><bold>230</bold></highlight> where it is stored in memory <highlight><bold>320</bold></highlight>. However, the data may be pirated by external devices during transmission from processor <highlight><bold>101</bold></highlight> and graphics controller <highlight><bold>230</bold></highlight> and while stored within memory <highlight><bold>320</bold></highlight>. In one embodiment, video data that is to be rendered is received from a player application (not shown) executed by processor <highlight><bold>101</bold></highlight> through interface <highlight><bold>310</bold></highlight> in an encrypted format. For example, when the data is ready for presentation, it is retrieved from storage and presented to a player application for processing. The player is generally software running in the PC. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Decryption module <highlight><bold>360</bold></highlight> receives encrypted video data from the player application, decrypts the data and transmits the data to rendering engine <highlight><bold>370</bold></highlight>. According to one embodiment, rendering engine <highlight><bold>370</bold></highlight> calculates the layout of pages that are to be displayed. In a further embodiment, rendering engine <highlight><bold>370</bold></highlight> is an extensible markup language (XML) and hypertext markup language (HTML) renderer that allows easy integration of textual and non-textual data. Further, rendering engine <highlight><bold>370</bold></highlight> provides typographical as well as graphical support for all kinds of data that can be expressed in XML or properly extending HTML. Nevertheless, one of ordinary skill in the art will appreciate that other types of renderers may be implemented. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram for one embodiment of protecting video data transmitted from a player application to graphics controller <highlight><bold>230</bold></highlight>. At process block <highlight><bold>410</bold></highlight>, encrypted video data is received at graphics controller <highlight><bold>230</bold></highlight> from a player application operating at processor <highlight><bold>101</bold></highlight>. At process block <highlight><bold>420</bold></highlight>, the video data is decrypted at decryption module <highlight><bold>360</bold></highlight>. At process block <highlight><bold>430</bold></highlight>, the video data is rendered at rendering engine <highlight><bold>360</bold></highlight>. At process block <highlight><bold>440</bold></highlight>, the rendered video data is stored in memory <highlight><bold>320</bold></highlight>. By rendering the video data in graphics controller <highlight><bold>370</bold></highlight>, the data may be decrypted in a secure environment that is protected against software programs that may pirate the data. In addition, graphics controller <highlight><bold>370</bold></highlight> protects against the unauthorized access of data transmitted from either of interfaces <highlight><bold>310</bold></highlight> or <highlight><bold>340</bold></highlight> memory <highlight><bold>320</bold></highlight> by pirating software. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, memory <highlight><bold>320</bold></highlight> includes a frame buffer for storing the portion of the stored image that is actually displayed. Data from the frame buffer can then be sent to output interface <highlight><bold>330</bold></highlight>, which sends a properly formatted signal to the display device. In one embodiment, output interface <highlight><bold>330</bold></highlight> includes a random access memory digital-to-analog converter (RAMDAC), which converts the digitized data into one or more properly formatted analog signals with the specified color rendition. Other types of display devices might require a different output interface to format the data in a different manner, but the overall process within graphics controller <highlight><bold>230</bold></highlight> is basically the same. A secondary interface <highlight><bold>340</bold></highlight> can also provide a secondary port to a data channel for data destined for video memory <highlight><bold>320</bold></highlight>, or provide video data directly to output interface <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> According to a further embodiment graphics controller <highlight><bold>230</bold></highlight> includes a control circuit <highlight><bold>350</bold></highlight> to monitor and/or control data flowing between video memory <highlight><bold>320</bold></highlight> and either of interfaces <highlight><bold>310</bold></highlight> or <highlight><bold>340</bold></highlight>, and to control video memory <highlight><bold>320</bold></highlight> in a manner that protects secure data stored therein from being illicitly read by devices external to graphics controller <highlight><bold>230</bold></highlight>. Thus, control circuit <highlight><bold>350</bold></highlight> operates as a gatekeeper between video memory <highlight><bold>320</bold></highlight> and devices external to graphics controller <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In one embodiment, the operation of control circuit <highlight><bold>350</bold></highlight> is broken down into several functional areas: mode control, security setup, security violation detection, response to violation, and termination. These functional areas are described in more detail below: </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Mode Control </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In one embodiment, control circuit <highlight><bold>350</bold></highlight> (and therefore graphics controller <highlight><bold>230</bold></highlight>) has two modes: a security mode and a by-pass mode. In the by-pass mode, the security features of control circuit <highlight><bold>350</bold></highlight> are by-passed, and graphics controller <highlight><bold>230</bold></highlight> effectively performs as a conventional graphics controller. In the security mode, control circuit <highlight><bold>350</bold></highlight> can perform security functions to prevent all or a portion of the contents of video memory <highlight><bold>320</bold></highlight> from being read through interface <highlight><bold>310</bold></highlight>. If interface <highlight><bold>340</bold></highlight> has a read capability, control circuit <highlight><bold>350</bold></highlight> may also be coupled to interface <highlight><bold>340</bold></highlight> in order to prevent video memory <highlight><bold>320</bold></highlight> from being read through interface <highlight><bold>340</bold></highlight>. The mode can be established by one or more commands from the control circuit <highlight><bold>350</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In one embodiment, mode commands, other commands, associated addresses and video data can all be input through interface <highlight><bold>310</bold></highlight> along with other commands and data to be written to video memory. In another embodiment, commands and addresses can be input through one or more separate interfaces (not shown). In one embodiment, the security mode can be entered simply with an external command, but the security mode can be exited only if the secure data is deleted first. This prevents illicit software from simply turning off the security mode so that the protected data can be read with impunity. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Security Setup </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Display device <highlight><bold>122</bold></highlight> in a conventional system frequently shows multiple windows at the same time, some of them overlapping others. Thus, the frame buffer may contain multiple windows, or portions of windows, at any given time. Since all the displayed windows are in the frame buffer, and the frame buffer can be read by external devices in a conventional system, the displayed contents of any window are freely accessible to external devices in a conventional system. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> When a copyrighted document or other secure data is being displayed, the window containing that secure data may be only one of several windows that are being simultaneously shown on various parts of the display device. Several of those windows may contain non-secure data that the operator wishes to handle in a standard manner. For example, while viewing portions of a secure copyrighted e-book in one window, the operator may wish to read e-mail or look up an appointment notebook in another window, without having to exit from the e-book application. Therefore the protected portion of the data may be only a subset of the frame buffer, and the secure portion of the data should be defined separately from the remaining displayed data. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In one embodiment, the coordinates of a secure window within the frame buffer are defined. These coordinates can be contained in a set of registers that define opposite corners of a rectangular displayed window, such as the upper left and lower right comers of that window. Any data that is located within this window is considered secure, and can be protected. In one embodiment, one or more sets of registers are dedicated to defining secure windows in this manner. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In another embodiment, existing registers that define a window are temporarily designated as secure registers as long as the defined window contains secure data, but those registers can return to non-secure status once the secure data is automatically deleted and/or the window is closed. In both embodiments, multiple sets of registers can be used to define multiple secure windows, so that the security function can be performed simultaneously on different windows. Note: although the term &lsquo;registers&rsquo; is used here, the invention can also use other forms of data storage to hold the coordinates of the secure windows, such a block of memory containing multiple memory locations. Such obvious design tradeoffs are within the capability of an average circuit designer. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Security registers can be loaded with the coordinates of the secure window by appropriate setup commands passed through interface <highlight><bold>310</bold></highlight>. This assumes interface <highlight><bold>310</bold></highlight> supports conveyance of a combination of commands and data. Alternately, setup commands can be passed to control circuit <highlight><bold>350</bold></highlight> through another interface (not shown) specially designated for this purpose. In one embodiment, once these setup commands are entered, the designated security coordinates cannot be altered without deleting the protected data defined by these coordinates. This protects against malicious software that accesses the secure data simply by changing the coordinates of the protected area to another location. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Security Violation Detection </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> According to one embodiment, the data within the secure window can be treated as write-only data for all devices other than output interface <highlight><bold>330</bold></highlight> that reads the contents of video memory <highlight><bold>320</bold></highlight>, regardless of the register configuration used. All other devices (e.g., devices that can read video memory <highlight><bold>320</bold></highlight> through interfaces <highlight><bold>31</bold></highlight>, <highlight><bold>34</bold></highlight>, or any other accessory ports) are prevented from reading any data in the window defined by the contents of the secure registers. Data in the frame buffer that is outside this defined security window can be read in the normal manner. This effectively prevents the pre-defined secure data in the frame buffer from being illicitly read, copied, or transmitted by malicious software, while not interfering with normal operations for the rest of the data in the frame buffer. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In a further embodiment, detection of an attempted security violation can be accomplished by monitoring the addresses of any requests to read data from video memory <highlight><bold>320</bold></highlight>. If the requested address falls between the two stored addresses that define the opposite comers of a protected window, then a violation has occurred. When multiple security windows are defined at the same time, a separate comparison can be made for each secure window. A violation of any secure window can trigger a response. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Response to Violation </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The no-read function can be enforced in various ways. In one embodiment, when a device attempts to read data from the secure area defined by the security registers, a data protector in graphics controller <highlight><bold>230</bold></highlight> will return video data, but not the requested video data. The controller might return a solid color for all of the locations in the protected area (such as blue, black, white, etc.). The controller might also return random data, resulting in an image of static. Another option is to return a window with an warning message, alerting the operator to the fact that protected data has been requested. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> A second embodiment provides greater protection. In this embodiment, any attempt to read data from the protected portion of video memory can result in purging the protected portion of the data by the data protector. This can be done by overwriting the protected data with other data, such as the solid color, random data, or error message described above. This step can be followed by exiting the secure mode, so that the requested window is available for reading, but the secure data is no longer in it. These actions can also trigger other defensive mechanisms, such alerting the operator, deleting the other secure data that is still stored in encrypted form on disk, or severing the connection to the remote source of the secure data. Such drastic actions can prevent alternate, repeated attacks on the secure data by removing the secure data from the system altogether. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Some computer systems, such as laptop PCs, provide an external connector on the graphics controller so that other display devices can be attached. Besides the previously described features, additional protection can be provided by disabling the external graphics connector when secure data is being displayed so that external equipment can&apos;t just record the signal. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Termination </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> When the need to display protected data is over, commands can be issued to control circuit <highlight><bold>350</bold></highlight> to delete the secure window and/or to change the mode of the affected window from security to by-pass. In either case, the protected data within that window can be purged from video memory first so that it cannot be subsequently read by external devices. One or more commands can be implemented that terminate the secure mode in this manner. Alternately, termination can be triggered by simply attempting a read of the protected data, thereby artificially forcing a termination in the manner described above under &lsquo;Response to Violation&rsquo;. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Video data that is to be displayed is protected against unauthorized access by external devices by protecting rendering and the display of content. The invention has been described in terms of a frame buffer in a video controller. However, it may be applied to other forms of data presentation. The video controller may be generalized as a presentation controller, which can also take the form of an audio controller that presents downloaded audio information such as music or spoken words. The frame buffer may be generalized as a presentation buffer, which can also take the form of an audio buffer that temporarily stores the audio data to be played, including a combination of protected and non-protected audio data. An embodiment of the invention using audio data can be used to play music or to present an audible e-book for the vision-impaired. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>receiving encrypted video data at a graphics controller from a microprocessor; and </claim-text>
<claim-text>decrypting the data at the graphics controller; </claim-text>
<claim-text>rendering the data at the graphics controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising storing the data in a frame buffer after the data has been rendered. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising decrypting the data at the graphics controller prior to rendering the data. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A computer system comprising: 
<claim-text>a microprocessor; and </claim-text>
<claim-text>a chipset coupled to the microprocessor, wherein the chipset includes a graphics controller comprising a rendering engine that renders video data received from the microprocessor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the rendering engine is an extensible markup language (XML) renderer. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the graphics controller further comprises: 
<claim-text>a decryption module that decrypts the video data received from the microprocessor; and </claim-text>
<claim-text>a frame buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the chipset further comprises a memory controller. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> further comprising a display device coupled to the graphics controller. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A computer system comprising: 
<claim-text>a microprocessor; </claim-text>
<claim-text>an input/output (I/O) bus coupled to the microprocessor; and </claim-text>
<claim-text>a graphics controller coupled to the system bus, wherein the graphics controller includes a rendering engine that renders video data received from the microprocessor: </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the rendering engine is an extensible markup language (XML) renderer. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the graphics controller further comprises: 
<claim-text>a decryption module that decrypts the video data received from the microprocessor; and </claim-text>
<claim-text>a frame buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the I/O bus is a Peripheral Component Interconnect (PCI) bus. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the I/O bus is an accelerated graphics port (AGP). </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising a display device coupled to the graphics controller. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising: 
<claim-text>a chipset coupled to the I/O bus; and </claim-text>
<claim-text>a processor bus coupled to the chipset and the microprocessor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A graphics controller comprising a rendering engine that renders video data received from a microprocessor: </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The graphics controller of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the rendering engine is an extensible markup language (XML) renderer. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The graphics controller of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising: 
<claim-text>a decryption module that decrypts the video data received from the microprocessor; and </claim-text>
<claim-text>a frame buffer.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005295A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005295A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005295A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005295A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005295A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
