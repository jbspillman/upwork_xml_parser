<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002676A1-20030102-D00000.TIF SYSTEM "US20030002676A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00001.TIF SYSTEM "US20030002676A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00002.TIF SYSTEM "US20030002676A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00003.TIF SYSTEM "US20030002676A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00004.TIF SYSTEM "US20030002676A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00005.TIF SYSTEM "US20030002676A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00006.TIF SYSTEM "US20030002676A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00007.TIF SYSTEM "US20030002676A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002676A1-20030102-D00008.TIF SYSTEM "US20030002676A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002676</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895788</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>380</class>
<subclass>260000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>201000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>229000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus to secure network communications</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Thomas</given-name>
<middle-name>L.</middle-name>
<family-name>Stachura</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Nicholas</given-name>
<middle-name>A.</middle-name>
<family-name>Colman</family-name>
</name>
<residence>
<residence-us>
<city>Hillsboro</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Anil</given-name>
<family-name>Vasudevan</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and apparatus for reestablishing secured communication after a desynchronization event. Secured communication is established between a first device and a second device using synchronized device dependent sequence values. A security sequence value from the first device is stored, preferably on a nonvolatile medium. After a desynchronization event, the first device sends the stored security sequence value to the second device as a resynchronization request. The second device returns the stored security sequence value as security assurance, preferably with a security sequence value from the second device for resynchronization. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention generally relates to the field of network communication systems and, more particularly, to a method and apparatus to synchronize network security sequence values. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Network security schemes are not new. Indeed, a number of alternative schemes have been developed to improve the security of information for confidential communication over an otherwise public network, e.g., the Internet. Network security schemes may be used to secure a single communication path between two users, but may also be used to configure virtual private networks (VPNs). VPNs run over public facilities, but are effectively private because they use security techniques such as data scrambling that allow only secured members to access the data. VPNs avoid the cost of building a physical network or leasing private telecommunication lines. VPNs also allow members of a large organization to work as if onsite even though they may be at great distances from a work location. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> An example of a network security scheme is the IP (Internet Protocol) security standardization effort, often referred to as IPsec, within the Internet Engineering Task Force (IETF). A general overview of IPsec is given in RFC 2401, &ldquo;Security Architecture for the Internet Protocol,&rdquo; November 1998. In general, IPsec provides authenticity/confidentiality guarantees for each data packet sent between network nodes that communicate using an implementation that conforms to an IPsec protocol. The data paths protected by IPsec security protocols may be those between hosts and security gateways on one or more network(s). A host may be a computing device, such as a server, client, base-station, or terminal. A security gateway is an intermediate system, such as a router or firewall. Collectively, network elements including computing devices, network servers, network routers, additional networks, base stations, user terminals, firewalls, routers, and/or security gateways may be referred to as nodes (&ldquo;network nodes&rdquo;). </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> IPsec offers protocols for security schemes such as anti-replay logic using security sequence values, and cryptographic key management. Anti-replay logic uses security sequence values to allow communicating devices to ignore data packets that have been previously received. This prevents computing devices that are outside a security connection from stealing confidential data by faking the IP address of another legitimate user on the secure connection (&ldquo;spoofing&rdquo;) and using exact duplicates of wiretapped data packets to fraudulently engage in the secured communication. Various other security implementations that conform to IPsec may also utilize security sequence values to prevent spoofing or to simply filter out expired data packets through a windowing scheme. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> IPsec also mandates support for cryptographic key management and authentication algorithms. The authentication of the origin of a data packet is generally limited to the extent that secrets used with an authentication algorithm or key management protocol are shared among hosts that could each be the origin of the data packet. The secret authentication key(s) shared between communicating parties is typically a cryptographically strong random number. Lengths up to 128 bits must be supported by an implementation conforming to IPsec, but shorter and longer length keys are allowed. The key(s) are usually stored on a nonvolatile medium such as a hard drive or random access memory (RAM) that is nonvolatile. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> When there is a break in secured communication, keys and other secret authentication information typically remain intact for the two or more parties that were securely communicating. Current sequence values used for anti-replay filtering and/or other security measures are typically lost, at least for the user having a power outage or other event that caused the break in secured communication. Even if recently used security sequence values are saved, a nondisrupted party may have sent additional data packets during the breakdown. This causes the disrupted party to lose track of current security sequence values being used by a nondisrupted party. Secured communication can be restarted through IPsec protocols that allow the regeneration and reauthentication of keys. However, this typically requires an active operating system (OS) and many microprocessor cycles. Thus, using a secured connection to troubleshoot the cause of a communication breakdown cannot easily be accomplished by known means since the breakdown must be repaired before secured communication can be reestablished.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements and in which: </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary data network; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary client computing device incorporating an innovative security interface and showing a graphical representation of a machine accessible storage medium comprising a plurality of executable instructions including instructions which, when executed, implement one or more of the innovative security interface(s) and/or security agent(s). </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of a first embodiment of a an innovative security interface; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of an exemplary server computing device incorporating a first embodiment of an innovative security agent; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a second embodiment; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a graphical illustration of an exemplary data structure comprising communication session security information and transmit sequence value information. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram of exemplary datagrams representing a synchronization message pair; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart of an exemplary method for securely synchronizing sequence values after a de-synchronizing event; and </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a set of two communication flow diagrams illustrating an exemplary method for securing network communication between network elements.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In a typical prior art data network, a server maintains a nonvolatile cache of security channel parameters, usually on a hard disk. The cached parameters may include security keys, such as those generated and authenticated by IPsec. Cached parameters may also include transmit and receive security sequence values for synchronizing the secured communication and performing anti-replay filtering. A client on the network may also cache security keys and transmit and receive security sequence values. When a power loss, low-power state, or other communication severing event occurs (&ldquo;desynchronization event&rdquo;), prior art networks running security protocols conforming to IPsec and other security protocols must rely on an active operating system and/or many cycles of an active microprocessor to regenerate and reauthenticate security keys and security sequence values. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The claimed invention is a simple and inexpensive method and apparatus to facilitate secure network communications, even at a low-power state or after a desynchronization event. In one embodiment, practiced in the context of an exemplary client-server network paradigm, an innovative network interface (&ldquo;security interface&rdquo;) is introduced into the client, while the server utilizes an innovative network agent (&ldquo;security agent&rdquo;) to facilitate the secured communications. The security interface is preferably rendered in hardware coupled to the low-power bus of the client to facilitate secure network communications for the host client when the client is in a low-power state. The security interface may maintain a sequence value that is utilized to authenticate secure communications between the client and another computing device (e.g., the server). A security sequence value is periodically stored by the security interface to a nonvolatile memory space or other low-power storage medium to enable a client to resynchronize a security sequence and reestablish the secured communication afforded by the use of sequence values after a desynchronizing event. Thus, a hardware implementation of a security interface may be capable of operating in the absence of an operating system and an active processor. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A security interface may optionally assume functions that are usually a part of security schemes conforming to IPsec. Specifically, a security interface may store security key(s) in addition to client security sequence values, preferably in a nonvolatile cache or medium. A security interface may increment client security sequence values and use the security sequence values for transmission of data packets to a server. Embodiments of the security interface may also perform anti-reply logic on data packets received from a server, however, the security sequence values received from the server need not be cached or stored in nonvolatile memory by the client. This is advantageous because it allows a client to request a secure connection using only its own resources. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary data network. The computing network <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a client computing device <highlight><bold>102</bold></highlight> and a server computing device <highlight><bold>104</bold></highlight>, although a security interface and/or a security agent may be used between any two or more network nodes. The shown client computing device <highlight><bold>102</bold></highlight> is coupled to a network interface <highlight><bold>108</bold></highlight> and the shown server computing device <highlight><bold>104</bold></highlight> is coupled to a network agent <highlight><bold>110</bold></highlight>. A network interface <highlight><bold>108</bold></highlight> and a network agent <highlight><bold>110</bold></highlight>, however, may be coupled to any network node. At least one network interface <highlight><bold>108</bold></highlight> and at least one network agent <highlight><bold>110</bold></highlight> preferably communicate over a network <highlight><bold>106</bold></highlight> such as an internet, extranet, wide area network (WAN), or local area network (LAN). </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows one exemplary embodiment of a network node, shown as a client computing device <highlight><bold>200</bold></highlight>, incorporating an innovative security interface <highlight><bold>202</bold></highlight> coupled to a bus. Although the shown exemplary security interface <highlight><bold>202</bold></highlight> is coupled to a low-power bus <highlight><bold>204</bold></highlight>, other embodiments may be coupled to a main bus and still provide security features. A security interface <highlight><bold>202</bold></highlight> may reside as a substantially self-contained module, as discrete parts on a network interface module <highlight><bold>206</bold></highlight> (NIM), or as submodules disseminated at various useful locations in a network node. Alternate security interface <highlight><bold>202</bold></highlight> embodiments may optionally be implemented as at least one software security interface <highlight><bold>203</bold></highlight>, or combinations of hardware and software. The shown modular security interface <highlight><bold>202</bold></highlight> may interact with many other components of the client computing device <highlight><bold>200</bold></highlight> including, but not limited to, NIM memory and/or network interface elements, and system memory <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Coupling a security interface <highlight><bold>202</bold></highlight> to a low-power bus <highlight><bold>204</bold></highlight> may allow wake-on LAN capability and other types of remote-control access to client network nodes. Security interfaces <highlight><bold>202</bold></highlight>, <highlight><bold>203</bold></highlight> enhance manageability of a network by allowing a centralized service such as an information technology (IT) team to establish secured communication with distant network nodes even when the distant network nodes are in a low-power state. Secure access allows tasks such as rebooting, troubleshooting, updating of software, and debugging to be managed remotely even if the client is in a low-power state and lacking an OS and active processor <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In accordance with one example implementation, a machine accessible storage medium, shown graphically as an exemplary RAM <highlight><bold>208</bold></highlight> may comprise a plurality of executable instructions including instructions which, when executed, implement one or more of the innovative security interfaces <highlight><bold>203</bold></highlight>, security agents <highlight><bold>402</bold></highlight>, and/or methods of the present invention. Although pictured as integrated with a client, security interfaces <highlight><bold>203</bold></highlight> and security agents <highlight><bold>402</bold></highlight> may reside elsewhere as hardware or software, and no RAM may be required. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an exemplary first embodiment of a security interface <highlight><bold>302</bold></highlight> incorporated into a NIM <highlight><bold>300</bold></highlight>. Modules of the first embodiment include a recorder <highlight><bold>304</bold></highlight>, a desynchronization detector <highlight><bold>306</bold></highlight>, a resynchronization requester <highlight><bold>308</bold></highlight>, and a secured connection verifier <highlight><bold>310</bold></highlight>. Although the term &ldquo;modules&rdquo; is used to describe the elements of a security interface <highlight><bold>302</bold></highlight>, the elements may be implemented as any combination of circuits, hardware units, programs, and/or software subroutines. A network interface <highlight><bold>312</bold></highlight> is used to engage in unsecured communication and in secured communication with at least one network. While described in terms of a network conforming to IPsec standards and synchronized security sequence values at least in part to authenticate secured communication, other security protocols and transfer protocols can be supported. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The control logic <highlight><bold>301</bold></highlight> of the NIM <highlight><bold>300</bold></highlight> incorporates the shown modules of the exemplary security interface <highlight><bold>302</bold></highlight>. A recorder <highlight><bold>304</bold></highlight> preferably stores at least one client security sequence value as a client resynchronization value <highlight><bold>324</bold></highlight> in at least one machine-readable medium such as nonvolatile RAM <highlight><bold>314</bold></highlight>, volatile RAM having power backup, flash memory having power backup, a magnetic disk storage medium, and/or an optical storage medium. Use in low-power states may require a machine-readable medium that is serviceable at low-power. Since embodiments of the security interface <highlight><bold>302</bold></highlight> are coupled to a low-power bus, the resynchronization value <highlight><bold>324</bold></highlight> stored in nonvolatile RAM <highlight><bold>314</bold></highlight> is retrievable in a low-power state. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A desynchronization detector <highlight><bold>306</bold></highlight> senses a desynchronization event, including but not limited to a low-power state, a no power state in some sectors of a network node, a halted microprocessor affecting communications, a fatal hardware error; a fatal software error, and/or a suspended network connection. The desychronization detector <highlight><bold>306</bold></highlight> preferably enables at least one other module of the security interface <highlight><bold>302</bold></highlight> to begin a resynchronization action after a desynchronization event. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> A resynchronization requester <highlight><bold>308</bold></highlight> may be one module enabled by the desynchronization detector <highlight><bold>306</bold></highlight> to transfer a stored client resynchronization value <highlight><bold>324</bold></highlight> to a server or at least one other network node. In an embodiment adhering to IPsec standards, the resynchronization requester <highlight><bold>308</bold></highlight> may transfer the stored client resynchronization value <highlight><bold>324</bold></highlight> along with authentication keys mandated by IPsec. It should be noted that although keys are stored, the resynchronization requester <highlight><bold>308</bold></highlight> is not required to save security sequence values received from a server or other network node external to the client computing device. This provides simple and self-reliant recovery of secured communication without the need to track current security sequence values of external devices. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> A security interface <highlight><bold>302</bold></highlight> may also have a secured connection verifier <highlight><bold>310</bold></highlight> to receive feedback from a server or other network node. Exemplary feedback preferably consists of the client resynchronization value <highlight><bold>324</bold></highlight> returned as security assurance and a server security sequence value from the server or network node. The feedback may also consist of public and private authentication keys if the communication adheres to IPsec. The returned client resynchronization value <highlight><bold>324</bold></highlight> and the server security sequence value provide resynchronization values for a client and server to each begin a new synchronized security sequences and resume bidirectional secured communication. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The client resynchronization value <highlight><bold>324</bold></highlight> sent by the security interface <highlight><bold>302</bold></highlight> to a server may function like a packet Internet groper (&ldquo;ping&rdquo;), but is sent to test the accessibility of a particular device on an IP network. The security interface <highlight><bold>302</bold></highlight> pings a server using a secured data packet containing previously established authentication keys and a client resynchronization value and waits for the server to echo a data packet containing the keys and the same client resynchronization value as security assurance. The echo preferably includes the received security information plus a new security sequence value from the server. Since the ping and echo preferably have new sequence values included when sent in each direction, identical data packets never appear on the network twice. The resulting data packet uniqueness afforded by the present invention prevents spoofing. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an exemplary server <highlight><bold>400</bold></highlight> incorporating a first embodiment of a security agent <highlight><bold>402</bold></highlight>. Although a security agent <highlight><bold>402</bold></highlight> may reside in a server <highlight><bold>400</bold></highlight> and return feedback to a client, a security agent <highlight><bold>402</bold></highlight> may also reside on any network node. A request receiver <highlight><bold>404</bold></highlight> module and an acknowledger <highlight><bold>406</bold></highlight> module may be included in a security agent <highlight><bold>402</bold></highlight>. Although the term &ldquo;module&rdquo; is used to describe the elements of a security agent <highlight><bold>402</bold></highlight>, the elements may be implemented as any combination of circuits, hardware units, programs, and/or software subroutines. A request receiver <highlight><bold>404</bold></highlight> recognizes a request for resynchronization from a security interface <highlight><bold>302</bold></highlight> of a client, and notifies an acknowledger <highlight><bold>406</bold></highlight> module to send feedback to the security interface <highlight><bold>302</bold></highlight>. As discussed above, the feedback preferably includes a return of the client resynchronization value <highlight><bold>324</bold></highlight> sent by the security interface <highlight><bold>302</bold></highlight> along with a server security sequence value for reinitiating bidirectional secured communication. Authentication keys may be included in the feedback. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a second embodiment of the claimed invention. A security sequence value resynchronizer <highlight><bold>500</bold></highlight> has a sender <highlight><bold>502</bold></highlight> having at least access to a nonvolatile random access memory <highlight><bold>504</bold></highlight>. The sender <highlight><bold>502</bold></highlight> may possess or may at least have access to networking elements to transmit a first data packet <highlight><bold>506</bold></highlight> containing at least in part a stored sender resynchronization value <highlight><bold>508</bold></highlight> from the nonvolatile random access memory <highlight><bold>504</bold></highlight> over the computer network <highlight><bold>509</bold></highlight>. An acknowledger <highlight><bold>510</bold></highlight> is preferably connected to the computer network <highlight><bold>509</bold></highlight> to receive the sender resynchronization value <highlight><bold>508</bold></highlight> from the sender <highlight><bold>502</bold></highlight>. The acknowledger <highlight><bold>510</bold></highlight> has networking elements to return the sender resynchronization value <highlight><bold>508</bold></highlight> to the sender <highlight><bold>502</bold></highlight> as security assurance. The sender resynchronization value <highlight><bold>508</bold></highlight> is returned within the secured payload data of a second data packet <highlight><bold>511</bold></highlight>. In one variation of the resynchronizer <highlight><bold>500</bold></highlight>, the acknowledger <highlight><bold>510</bold></highlight> may return an acknowledger resynchronization value <highlight><bold>512</bold></highlight> to the sender <highlight><bold>502</bold></highlight> in addition to the sender resynchronization value <highlight><bold>508</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Senders <highlight><bold>502</bold></highlight> may be installed as hardware and/or software on client computing devices, server computing devices, or any network node(s). Likewise, acknowledgers <highlight><bold>510</bold></highlight> may be installed as hardware and/or software on client computing devices, server computing devices, or any network node(s). In one embodiment, servers use software and clients use hardware embodiments capable of operation in a low-power state. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows example communication session information <highlight><bold>600</bold></highlight> residing in the RAMs of server and client devices. The shown RAMs are used to illustrate one preferred embodiment of the invention. The invention may also be practiced with registers or other variations that do not use RAM. Before secure communication is established <highlight><bold>602</bold></highlight>, security secrets such as keys may not yet be shared, and security sequence values for secured communication may not yet be synchronized. An innovative security interface and/or method of the present invention stores a client security sequence value in nonvolatile RAM using an exemplary formula such as (current client security sequence value&plus;10&equals;50) as a resynchronization value should a desynchronization event occur. Secured communication may be initiated <highlight><bold>604</bold></highlight> using protocols such as IPsec by generating and sharing authentication keys <highlight><bold>604</bold></highlight>. The server sends a request <highlight><bold>606</bold></highlight> using an exemplary server security sequence value of 10. The client replies <highlight><bold>608</bold></highlight> using a client security sequence value of 40. The server sends a second request <highlight><bold>610</bold></highlight> using an exemplary server security sequence value of 11, but the client has a power loss and is unable to receive the request. Security sequence values are desynchronized as the client loses track of incoming server requests. The server sends a third request using an exemplary security sequence value of 12, but the request is ignored because there is no secure connection. The innovative security interface, which may remain in a low-power state, restores the client resynchronization value and secrets such as security key(s) from nonvolatile RAM to volatile RAM <highlight><bold>614</bold></highlight> and updates the stored resynchronization value in nonvolatile RAM. The client resynchronization value restored to volatile RAM is sent as part of a synchronization request to the server. The server recognizes the client&apos;s authentication key(s) and acknowledges the client&apos;s synchronization request <highlight><bold>616</bold></highlight> by returning the client resynchronization value, preferably as part of a data payload, for security assurance. The server may also include a current server security sequence number in the acknowledgement. Server and client now possess all shared key(s) and security sequence numbers <highlight><bold>618</bold></highlight>, and secured communication may resume. The server sends a request using an exemplary security sequence value of 14. The server replies <highlight><bold>620</bold></highlight> using an exemplary security sequence value of 51. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows exemplary data packets <highlight><bold>700</bold></highlight> representing a synchronous message pair. The SYNC_REQ packet <highlight><bold>702</bold></highlight> pings a server or other network node and a SYNC_ACK packet <highlight><bold>704</bold></highlight> is echoed by the server or other network node. A SYNC_REQ packet <highlight><bold>702</bold></highlight> may incorporate a link header <highlight><bold>706</bold></highlight>, a transport header <highlight><bold>708</bold></highlight>, a security header <highlight><bold>710</bold></highlight>, and a data payload <highlight><bold>712</bold></highlight> in accordance with various IP protocols. A SYNC_ACK packet <highlight><bold>704</bold></highlight> may also incorporate a link header <highlight><bold>714</bold></highlight>, a transport header <highlight><bold>716</bold></highlight>, a security header <highlight><bold>718</bold></highlight>, and a data payload <highlight><bold>720</bold></highlight> in accordance with IP protocol. In the SYNC_REQ packet <highlight><bold>702</bold></highlight>, a client resynchronization value <highlight><bold>324</bold></highlight> is incorporated into the security header <highlight><bold>710</bold></highlight> and in the data payload <highlight><bold>712</bold></highlight>. The data payload <highlight><bold>720</bold></highlight> of a corresponding SYNC_ACK packet <highlight><bold>704</bold></highlight> preferably incorporates the same client resynchronization value <highlight><bold>324</bold></highlight> sent by the security interface <highlight><bold>302</bold></highlight> of a client, but also preferably incorporates a server security sequence value <highlight><bold>722</bold></highlight> in the security header <highlight><bold>718</bold></highlight>. Since the SYNC_REQ packet <highlight><bold>702</bold></highlight> and the SYNC_ACK packet <highlight><bold>704</bold></highlight> are unique, the same data packet does not appear on the Internet twice, preventing spoofing. The client resynchronization value <highlight><bold>324</bold></highlight> is preferably used to reinitiate a security sequence for the client, and the node security sequence value <highlight><bold>722</bold></highlight> is used to reinitiate or continue a security sequence for the server <highlight><bold>400</bold></highlight> or other network node. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows an exemplary method of synchronizing security sequence values. Secured communication is established between a client computing device and a server computing device <highlight><bold>800</bold></highlight>. The communication is secured using, at least in part, synchronized computing device dependent sequence values <highlight><bold>802</bold></highlight>, <highlight><bold>803</bold></highlight>. A security sequence value for the first computing device is stored <highlight><bold>804</bold></highlight> as a client resynchronization value <highlight><bold>806</bold></highlight>. The resynchronization value <highlight><bold>806</bold></highlight> is preferably stored in a nonvolatile storage space, such as nonvolatile RAM. A desynchronizing event is detected <highlight><bold>808</bold></highlight>. Resynchronization is requested <highlight><bold>809</bold></highlight> by sending the stored first resynchronization value <highlight><bold>806</bold></highlight> from the client computing device to the server computing device. The server computing device acknowledges <highlight><bold>812</bold></highlight> the request by sending the client resynchronization value <highlight><bold>806</bold></highlight> back to the client computing device as security assurance together with a server resynchronization value <highlight><bold>814</bold></highlight>. When the client receives the acknowledgement, the client computing device and the server computing device both possess a client resynchronization value <highlight><bold>806</bold></highlight> and a server resynchronization value <highlight><bold>814</bold></highlight> and may reestablish secured communication <highlight><bold>816</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Exemplary method embodiments of synchronizing security sequence values may be performed by hardware components, such as those shown in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight>, or a method may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor or logic circuits programmed with the instructions to perform the steps. Alternatively, the steps may be performed by a combination of hardware and software. Thus, in one variation of a method embodiment, hardware and/or software may be installed in network nodes to perform the method. In another variation, security interface(s) and security agent(s) may be installed in both client and server computing devices to reestablish communication if both experience one or more desynchronization events. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> compares a routine communication flow <highlight><bold>900</bold></highlight> between an exemplary server <highlight><bold>904</bold></highlight> and an exemplary client <highlight><bold>906</bold></highlight> with a disrupted communication flow <highlight><bold>902</bold></highlight> between the same server <highlight><bold>904</bold></highlight> and the same client <highlight><bold>906</bold></highlight>, wherein the disrupted communication flow <highlight><bold>902</bold></highlight> is resynchronized by the present invention, such as the method shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 9</cross-reference> the server <highlight><bold>904</bold></highlight> and client <highlight><bold>906</bold></highlight> may engage in secured communication even when the client lacks an active operating system and/or processor. The server <highlight><bold>904</bold></highlight> sends requests to the client <highlight><bold>906</bold></highlight>, incorporating a server security sequence value that is incremented with each request. The client <highlight><bold>906</bold></highlight> replies, incorporating a client security sequence value that is incremented with each reply. The client <highlight><bold>906</bold></highlight> may use anti-replay logic to reject requests that have already appeared on the network <highlight><bold>908</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> A desynchronization event such as a client power loss <highlight><bold>910</bold></highlight> may occur, disrupting secured communication and preventing the client <highlight><bold>906</bold></highlight> from receiving a request <highlight><bold>912</bold></highlight> from the server <highlight><bold>904</bold></highlight>. Because the secured connection is lost, the client <highlight><bold>906</bold></highlight> ignores unsecured request(s) <highlight><bold>914</bold></highlight>. The client is safe from attacks through the channel of secure communication because the channel is inactive. The client <highlight><bold>906</bold></highlight> sends a synchronization request <highlight><bold>916</bold></highlight> incorporating a previously stored client resynchronization value. The server <highlight><bold>904</bold></highlight> acknowledges the request by returning the client resynchronization value <highlight><bold>918</bold></highlight> and by sending a current server security sequence value <highlight><bold>918</bold></highlight>. The resynchronization method of the present invention cannot be spoofed because the request resynchronization data packet and the acknowledge data packet are unique. The secured connection may now be reestablished <highlight><bold>920</bold></highlight>. Secured communication may now resume using the security sequence values exchanged by the server <highlight><bold>904</bold></highlight> and client <highlight><bold>906</bold></highlight> to resume security sequencing of data packets. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Optionally, client resynchronization values that are greater by a fixed interval than values recently used for real communication may be stored. In the shown example, the number 40 is the most recent real-time client security sequence value sent to the server <highlight><bold>904</bold></highlight> before a desynchronization event <highlight><bold>910</bold></highlight> occurred. The stored value to be used for resynchronization at the time of the desynchronization event <highlight><bold>910</bold></highlight> was the number 50. By storing resynchronization values incrementally higher than values at play in real time, servers may use dynamic windowing schemes to eliminate old or fraudulent data packets having security sequence values lower than a present window of values. Windowing schemes to destroy expired data packets that traverse the Internet seeking unattainable IP addresses are well known to persons having ordinary skill in the art. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> A security sequence value resynchronizing method or apparatus may be provided partially or entirely as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic device(s)) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, flash memory, or other type of media machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection). </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Importantly, while the security sequence value resynchronizing method and apparatus have been described in the context of a computer network system, they can be applied to a wide variety of different systems in which data are exchanged. Such systems include voice, video, music, broadcast and other types of data systems. The method and apparatus can be applied to fixed remote terminals as well as to low and high mobility terminals. The method is described in its most basic form but additions and deletions could be made without departing from the basic scope. It will be apparent to those skilled in the art that many further modifications and adaptations can be made. The particular embodiments are not provided to limit the invention but to illustrate it. The scope of the present invention is not to be determined by the specific examples provided above but only by the claims below. </paragraph>
</section>
<section>
<heading lvl="1">Appendix A </heading>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> William E. Alford, Reg. No. 37,764; Farzad E. Amini, Reg. No. 42,261; William Thomas Babbitt, Reg. No. 39,591; Carol F. Barry, Reg. No. 41,600; Jordan Michael Becker, Reg. No. 39,602; Lisa N. Benado, Reg. No. 39,995; Bradley J. Bereznak, Reg. No. 33,474; Michael A. Bernadicou, Reg. No. 35,934; Roger W. Blakely, Jr., Reg. No. 25,831; R. Alan Burnett, Reg. No. 46,149; Gregory D. Caldwell, Reg. No. 39,926; Andrew C. Chen, Reg. No. 43,544; Thomas M. Coester, Reg. No. 39,637; Donna Jo Coningsby, Reg. No. 41,684; Florin Corie, Reg. No. 46,244; Dennis M. deGuzman, Reg. No. 41,702; Stephen M. De Klerk, Reg. No. P46,503; Michael Anthony DeSanctis, Reg. No. 39,957; Daniel M. De Vos, Reg. No. 37,813; Justin M. Dillon, Reg. No. 42,486 ; Sanjeet Dutta, Reg. No. P46,145; Matthew C. Fagan, Reg. No. 37,542; Tarek N. Fahmi, Reg. No. 41,402; Mark W. Farrell, Reg. No. 45,988; George Fountain, Reg. No. 37,374; James Y. Go, Reg. No. 40,621; James A. Henry, Reg. No. 41,064; Willmore F. Holbrow III, Reg. No. P41,845; Sheryl Sue Holloway, Reg. No. 37,850; George W Hoover II, Reg. No. 32,992; Eric S. Hyman, Reg. No. 30,139; William W. Kidd, Reg. No. 31,772; Sang Hui Kim, Reg. No. 40,450; Walter T. Kim, Reg. No. 42,731; Eric T. King, Reg. No. 44,188; George B. Leavell, Reg. No. 45,436; Kurt P. Leyendecker, Reg. No. 42,799; Gordon R. Lindeen III, Reg. No. 33,192; Jan Carol Little, Reg. No. 41,181; Robert G. Litts, Reg. No. 46,876; Julio Loza, Reg. No. 47,758; Joseph Lutz, Reg. No. 43,765; Michael J. Mallie, Reg. No. 36,591; Andre L. Marais, under 37 C.F.R. &sect;10.9(b); Paul A. Mendonsa, Reg. No. 42,879; Clive D. Menezes, Reg. No. 45,493; Chun M. Ng, Reg. No. 36,878; Thien T. Nguyen, Reg. No. 43,835; Thinh V. Nguyen, Reg. No. 42,034; Dennis A. Nicholls, Reg. No. 42,036; Daniel E. Ovanezian, Reg. No. 41,236; Kenneth B. Paley, Reg. No. 38,989; Gregg A. Peacock, Reg. No. 45,001; Marina Portnova, Reg. No. P45,750; Michael A. Proksch, Reg. No. 43,021; William F. Ryann, Reg. 44,313; James H. Salter, Reg. No. 35,668; William W. Schaal, Reg. No. 39,018; James C. Scheller, Reg. No. 31,195; Jeffrey S. Schubert, Reg. No. 43,098; George Simion, Reg. No. P47,089; Maria McCormack Sobrino, Reg. No. 31,639; Stanley W. Sokoloff, Reg. No. 25,128; Edwin H. Taylor, Reg. No. 25,129; Lance A. Termes, Reg. No. 43,184; John F. Travis, Reg. No. 43,203; Joseph A. Twarowski, Reg No. 42,191; Kerry D. Tweet, Reg. No. 45,959; Mark C. Van Ness, Reg. No. 39,865; Thomas A. Van Zandt, Reg. No. 43,219; Lester J. Vincent, Reg. No. 31,460; Glenn E. Von Tersch, Reg. No. 41,364; John Patrick Ward, Reg. No. 40,216; Mark L. Watson, Reg. No. P46,322; Thomas C. Webster, Reg. No. P46,154; and Norman Zafman, Reg. No. 26,250; my patent attorneys, and Firasat Ali, Reg. No. 45,715; Richard Nakashima, Reg. No. 42,023, my patent agents of BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP, with offices located at 12400 Wilshire Boulevard, 7th Floor, Los Angeles, Cali. 90025, telephone (310) 207-3800, and and Alan K. Aldous, Reg. No. 31,905; Robert D. Anderson, Reg. No. 33,826; Joseph R. Bond, Reg. No. 36,458; Richard C. Calderwood, Reg. No. 35,468; Jeffrey S. Draeger, Reg. No. 41,000; Cynthia Thomas Faatz, Reg No. 39,973; Sean Fitzgerald, Reg. No. 32,027; John F. Kacvinsky, Reg No. 40,040; Seth Z. Kalson, Reg. No. 40,670; David J. Kaplan, Reg. No. 41,105; Charles A. Mirho, Reg. No. 41,199; Leo V. Novakoski, Reg. No. 37,198; Naomi Obinata, Reg. No. 39,320; Thomas C. Reynolds, Reg. No. 32,488; Kenneth M. Seddon, Reg. No. 43,105; Mark Seeley, Reg. No. 32,299; Steven P. Skabrat, Reg. No. 36,279; Howard A. Skaist, Reg. No. 36,008; Steven C. Stewart, Reg. No. 33,555; Robert G. Winkle, Reg. No. 37,474; Steven D. Yates, Reg. No. 42,242, and Charles K. Young, Reg. No. 39,435; my patent attorneys, Thomas Raleigh Lane, Reg. No. 42,781; Calvin E. Wells; Reg. No. P43,256, Peter Lam, Reg. No. 44,855; Michael J. Nesheiwat, Reg. No. P47,819; and Gene I. Su, Reg. No. 45,140; my patent agents, of INTEL CORPORATION; and James R. Thein, Reg. No. 31,710, my patent attorney; with full power of substitution and revocation, to prosecute this application and to transact all business in the Patent and Trademark Office connected herewith. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>establishing secured communication between a client device and server device; </claim-text>
<claim-text>wherein communication is secured using, at least in part, synchronized security sequence value(s); </claim-text>
<claim-text>storing a security sequence value as a resynchronization value; </claim-text>
<claim-text>detecting at least one event desynchronizing said secured communication; and requesting resynchronization of security sequence values, comprising sending at least a representation of said resynchronization value from said client device to said server device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising performing anti-replay filtering using said security sequence values. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein sending at least a representation of said resynchronization value includes embedding said resynchronization value in at least one header and/or at least one payload of a data packet. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said storing a client resynchronization value includes periodically refreshing a stored value with a new value at a selected interval from security sequence values already used in a secured communication session. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method comprising: 
<claim-text>establishing secured communication between a client device and server device; </claim-text>
<claim-text>wherein communication is secured using, at least in part, synchronized security sequence value(s); </claim-text>
<claim-text>acknowledging a client request for resynchronization, comprising sending at least a representation of said request for resynchronization and a server resynchronization value from said server device to said client device; and </claim-text>
<claim-text>reestablishing secured communication using said server resynchronization value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said client request for resynchronization is a client resynchronization value and said secured communication is reestablished using said client resynchronization value and said server resynchronization value. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein sending at least a representation of said client and said server resynchronization values includes embedding said client and said server resynchronization values in at least one header and/or at least one payload of a data packet that conforms to IPsec standards. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising performing said method using a state machine in network circuitry. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising using software to perform said method. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising performing anti-replay filtering using said synchronized security sequence values. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising reestablishing secured communication during a low-power state. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising reestablishing secured communication while said first device lacks an active operating system and/or lacks an active microprocessor. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising a machine-readable medium that provides instructions, which when executed by at least one electronic circuit, cause said at least one electronic circuit to perform operations comprising said method. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An apparatus, comprising; 
<claim-text>(a) a security interface to engage in secured communication with at least one network node, wherein said security interface and said at least one network node use synchronized security sequence values at least in part to authenticate said secured communication; 
<claim-text>(i) a recorder to store at least one security sequence value; </claim-text>
<claim-text>(ii) a desynchronization detector coupled to said security interface; </claim-text>
<claim-text>(iii) a resynchronization requester to send the stored security sequence value to at least one network node after a desynchronization; and </claim-text>
<claim-text>(iv) a verifier to receive feedback from said at least one network node; </claim-text>
</claim-text>
<claim-text>(b) a security agent coupled to said at least one network node, comprising: 
<claim-text>(i) a request receiver to recognize said stored security sequence value; and </claim-text>
<claim-text>(ii) an acknowledger to send said feedback from said security agent to said security interface; said feedback comprising said stored security sequence value and a node security sequence value from said network node. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein stored security sequence values and node security sequence values are embedded in at least one header and/or at least one payload of a data packet that conforms to IPsec standards. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said stored security sequence value is periodically refreshed with a value at a selected interval from security sequence values already used in a secured communication session. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer network security sequence value resynchronizer, comprising: 
<claim-text>(a) a sender having at least access to a nonvolatile random access memory; </claim-text>
<claim-text>(b) said sender to transmit a data packet containing at least in part a stored sender resynchronization value from said nonvolatile random access memory over said computer network; and </claim-text>
<claim-text>(c) an acknowledger connected to said computer network to receive said sender resynchronization value from said sender; said acknowledger returning said sender resynchronization value to said sender as security assurance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The resynchronizer of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, said acknowledger returning an acknowledger resynchronization value to said sender in addition to said sender resynchronization value. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The resynchronizer of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein at least one sender and at least one acknowledger are installed on any combination of server and client devices. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method comprising: 
<claim-text>establishing secured communication between a security interface and a network node, said security interface to resynchronize security sequence values between said security interface and said network node; </claim-text>
<claim-text>storing a first resynchronization value selected by said security interface; and resynchronizing said security sequence values after a break in said secured communication, said resynchronizing further comprising: 
<claim-text>sending said first resynchronization value from said security interface to said network node; </claim-text>
<claim-text>sending said first resynchronization value and a second resynchronization value from said network node to said security interface; and </claim-text>
<claim-text>reestablishing said secured communication using said first resynchronization value and said second resynchronization value. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising using a security interface as a state machine in network circuitry. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising using a security interface as a software program. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising storing said first resynchronization value in a nonvolatile storage medium. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising establishing secured communication using IPsec security standards. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising resynchronizing said secured communication using said first resynchronization value to resynchronize secured data sent from said security interface and using said second resynchronization value to resychronize secured data sent from said network node. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising resynchronizing secured communication during a low-power state. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising resynchronizing secured communication while said network node lacks an active operating system and/or lacks an active microprocessor. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A method, comprising: 
<claim-text>establishing secured communication between a server device and a client device, said secured communication using server security sequence values synchronized with client security sequence values; </claim-text>
<claim-text>storing at least one client security sequence value in nonvolatile memory as a saved client security sequence value; and </claim-text>
<claim-text>resynchronizing server and client security sequence values after a desynchronization event by sending said saved client security sequence value from said nonvolatile memory to said server device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, said resynchronizing further comprising returning said saved client security sequence value from said server device to said client device in a data packet with a server security sequence value. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, said storing further comprising periodically refreshing said saved client security sequence value with a number that is greater in value than client security sequence values that have already been sent to said server device in a communication session.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002676A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002676A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002676A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002676A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002676A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002676A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002676A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002676A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002676A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
