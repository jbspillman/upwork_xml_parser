<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005139A1-20030102-D00000.TIF SYSTEM "US20030005139A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005139A1-20030102-D00001.TIF SYSTEM "US20030005139A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005139A1-20030102-D00002.TIF SYSTEM "US20030005139A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005139A1-20030102-D00003.TIF SYSTEM "US20030005139A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005139A1-20030102-D00004.TIF SYSTEM "US20030005139A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005139A1-20030102-D00005.TIF SYSTEM "US20030005139A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005139</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895872</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>231000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>233000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Startup methods and apparatuses for use in streaming content</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Scott</given-name>
<middle-name>E.</middle-name>
<family-name>Colville</family-name>
</name>
<residence>
<residence-us>
<city>Kirkland</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Sanjay</given-name>
<family-name>Bhatt</family-name>
</name>
<residence>
<residence-us>
<city>Redmond</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Anders</given-name>
<middle-name>E.</middle-name>
<family-name>Klemets</family-name>
</name>
<residence>
<residence-us>
<city>Seattle</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Troy</given-name>
<family-name>Batterberry</family-name>
</name>
<residence>
<residence-us>
<city>Kirkland</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>LEE &amp; HAYES PLLC</name-1>
<name-2></name-2>
<address>
<address-1>421 W RIVERSIDE AVENUE SUITE 500</address-1>
<city>SPOKANE</city>
<state>WA</state>
<postalcode>99201</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Methods and apparatuses are provided for use with a client and server device connected through a communication link. The client device sends a startup request to the server device. The startup request identifies a streamable media content that is to be provided to the client device, a communication link bandwidth associated with the communication link, and an amount of the desired streamable media content that is to be provided at a bitrate greater than the encoded bitrate but no greater than about the communication link bandwidth. The server device buffers at least the amount of the streamable media content, and transmits the amount of the buffered streamable media content at the higher bitrate. The server device locates a discrete rendering point in the amount of the buffered streamable media content and initiates transmission beginning with the discrete rendering point. After transmitting the amount of the buffered streamable media content, the server device transmits subsequent portions of the streamable media content to the client device at a bitrate about equal to the encoded bitrate. The client device buffers received streamable media content, and subsequently renders the buffered streamed media content. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is related to co-pending U.S. patent application Ser. No. 09/636,004, filed Aug. 9, 2000, and titled &ldquo;Fast Dynamic Measurement of Connection Bandwidth&rdquo;, which is incorporated by reference herein.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to streaming media devices, and more particularly to methods and apparatuses that provide improved end-user startup times when streaming content. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Today, nearly every computer user is well accustomed to the broadcast television medium. When a new television channel is requested, the new channel is generally displayed (rendered) very quickly. The same can be said for conventional broadcast radio stations. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Unfortunately, the same cannot be said for conventional Internet streamed content. Streaming media is typically provided from a server device to a client device over the Internet or other like network. For a variety of technical reasons, the end-user experience can be degraded, for example, by pauses experienced in the rendering due to late-arriving/resent data. Such pauses, however, tend to occur randomly and in certain configurations occur very rarely. However, there is one pause that most end-users experience every time they select a streaming media program, namely, a slow startup time. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> This poor startup experience tends to inhibit the adoption of streaming media in many markets. It is also tends to reduce the amount of time end-users are willing to use the technology. Thus, channel &ldquo;surfing&rdquo; is largely unacceptable with conventional streaming techniques. Hence, there is a need for improved streaming media methods and apparatuses that can significantly reduce the startup time that the end-user experiences. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In accordance with certain aspects of the present invention, improved streaming media methods and apparatuses are provided that significantly reduce the startup time that the end-user experiences. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> By way of example, the above stated needs and others are met by a system in accordance with certain implementations of the present invention. The system includes a client device and a server device, which are operatively connected through a communication link. The client device is configured to send at least one startup request to the server device over the communication link. The startup request identifies a streamable media content that is to be provided to the client device, a communication link bandwidth associated with the communication link, and an amount of the desired streamable media content that is to be provided at a bitrate greater than the encoded bitrate, but no greater than about the communication link bandwidth. The server device is configured to buffer at least the amount of the streamable media content and transmit the amount of the buffered streamable media content at the higher bitrate. After transmitting the amount of the buffered streamable media content, the server device transmits subsequent portions of the streamable media content to the client device at a bitrate about equal to the encoded bitrate. The client device is configured to buffer received streamable media content, and subsequently render the buffered streamed media content. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In accordance with certain implementations, the server device locates a discrete rendering point in the amount of the buffered streamable media content and initiates transmission beginning with the discrete rendering point. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In accordance with certain further implementations, the client device determines the communication link bandwidth.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> A more complete understanding of the various methods and apparatuses of the present invention may be had by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein: </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram depicting an exemplary device, in the form of a computer, which is suitable for use in providing, receiving, and/or otherwise communicating streamed media, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram depicting an exemplary streaming media system having a server device and a client device, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an illustrative diagram depicting an exemplary content stream, suitable for streaming in the streaming media system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram depicting an exemplary client-centric media streaming process suitable for use in the client device of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram depicting an exemplary fast startup media streaming process suitable for use in the server device of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a time line diagram depicting the transmission data bitrate for an exemplary fast startup streaming media transmission associated with the streaming media system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with certain implementations of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, portions of the invention are described in the general context of computer-executable instructions, such as program modules, being executed by a computer or like device, which, for example, may take the form of a personal computer (PC), a workstation, a portable computer, a server, a plurality of processors, a mainframe computer, a wireless communications base station, a hand-held communications device, a streamed media player, a set-top box, etc. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The various exemplary implementations of the present invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> As provided herein, the term &ldquo;logic&rdquo; is meant to apply to any form of logic and requisite supporting elements, including, e.g., software, firmware, hardware, and/or any combination thereof. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example of a suitable computing environment <highlight><bold>120</bold></highlight> on which portions of the subsequently described methods and apparatuses may be implemented. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Exemplary computing environment <highlight><bold>120</bold></highlight> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the improved methods and apparatuses described herein. Neither should computing environment <highlight><bold>120</bold></highlight> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in computing environment <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The improved methods and apparatuses herein are operational with numerous other general purpose and/or special purpose computing system environments or configurations. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, computing environment <highlight><bold>120</bold></highlight> includes a general-purpose computing device in the form of a computer <highlight><bold>130</bold></highlight>. The components of computer <highlight><bold>130</bold></highlight> may include one or more processors or processing units <highlight><bold>132</bold></highlight>, a system memory <highlight><bold>134</bold></highlight>, and a bus <highlight><bold>136</bold></highlight> that couples various system components including system memory <highlight><bold>134</bold></highlight> to processor <highlight><bold>132</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Bus <highlight><bold>136</bold></highlight> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus also known as Mezzanine bus. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Computer <highlight><bold>130</bold></highlight> typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer <highlight><bold>130</bold></highlight>, and it includes both volatile and non-volatile media, removable and non-removable media. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, system memory <highlight><bold>134</bold></highlight> includes computer readable media in the form of volatile memory, such as random access memory (RAM) <highlight><bold>140</bold></highlight>, and/or nonvolatile memory, such as read only memory (ROM) <highlight><bold>138</bold></highlight>. A basic input/output system (BIOS) <highlight><bold>142</bold></highlight>, containing the basic routines that help to transfer information between elements within computer <highlight><bold>130</bold></highlight>, such as during start-up, is stored in ROM <highlight><bold>138</bold></highlight>. RAM <highlight><bold>140</bold></highlight> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processor <highlight><bold>132</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Computer <highlight><bold>130</bold></highlight> may further include other removable/non-removable, volatile/non-volatile computer storage media. For example, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hard disk drive <highlight><bold>144</bold></highlight> for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &ldquo;hard drive&rdquo;), a magnetic disk drive <highlight><bold>146</bold></highlight> for reading from and writing to a removable, non-volatile magnetic disk <highlight><bold>148</bold></highlight> (e.g., a &ldquo;floppy disk&rdquo;), and an optical disk drive <highlight><bold>150</bold></highlight> for reading from or writing to a removable, non-volatile optical disk <highlight><bold>152</bold></highlight> such as a CD-ROM, CD-R, CD-RW, DVD-ROM, DVD-RAM or other optical media. Hard disk drive <highlight><bold>144</bold></highlight>, magnetic disk drive <highlight><bold>146</bold></highlight> and optical disk drive <highlight><bold>150</bold></highlight> are each connected to bus <highlight><bold>136</bold></highlight> by one or more interfaces <highlight><bold>154</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The drives and associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules, and other data for computer <highlight><bold>130</bold></highlight>. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk <highlight><bold>148</bold></highlight> and a removable optical disk <highlight><bold>152</bold></highlight>, it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> A number of program modules may be stored on the hard disk, magnetic disk <highlight><bold>148</bold></highlight>, optical disk <highlight><bold>152</bold></highlight>, ROM <highlight><bold>138</bold></highlight>, or RAM <highlight><bold>140</bold></highlight>, including, e.g., an operating system <highlight><bold>158</bold></highlight>, one or more application programs <highlight><bold>160</bold></highlight>, other program modules <highlight><bold>162</bold></highlight>, and program data <highlight><bold>164</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The improved methods and apparatuses described herein may be implemented within operating system <highlight><bold>158</bold></highlight>, one or more application programs <highlight><bold>160</bold></highlight>, other program modules <highlight><bold>162</bold></highlight>, and/or program data <highlight><bold>164</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> A user may provide commands and information into computer <highlight><bold>130</bold></highlight> through input devices such as keyboard <highlight><bold>166</bold></highlight> and pointing device <highlight><bold>168</bold></highlight> (such as a &ldquo;mouse&rdquo;). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, camera, etc. These and other input devices are connected to the processing unit <highlight><bold>132</bold></highlight> through a user input interface <highlight><bold>170</bold></highlight> that is coupled to bus <highlight><bold>136</bold></highlight>, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A monitor <highlight><bold>172</bold></highlight> or other type of display device is also connected to bus <highlight><bold>136</bold></highlight> via an interface, such as a video adapter <highlight><bold>174</bold></highlight>. In addition to monitor <highlight><bold>172</bold></highlight>, personal computers typically include other peripheral output devices (not shown), such as speakers and printers, which may be connected through output peripheral interface <highlight><bold>175</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Computer <highlight><bold>130</bold></highlight> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <highlight><bold>182</bold></highlight>. Remote computer <highlight><bold>182</bold></highlight> may include many or all of the elements and features described herein relative to computer <highlight><bold>130</bold></highlight>. Logical connections shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> are a local area network (LAN) <highlight><bold>177</bold></highlight> and a general wide area network (WAN) <highlight><bold>179</bold></highlight>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> When used in a LAN networking environment, computer <highlight><bold>130</bold></highlight> is connected to LAN <highlight><bold>177</bold></highlight> via network interface or adapter <highlight><bold>186</bold></highlight>. When used in a WAN networking environment, the computer typically includes a modem <highlight><bold>178</bold></highlight> or other means for establishing communications over WAN <highlight><bold>179</bold></highlight>. Modem <highlight><bold>178</bold></highlight>, which may be internal or external, may be connected to system bus <highlight><bold>136</bold></highlight> via the user input interface <highlight><bold>170</bold></highlight> or other appropriate mechanism. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is a specific implementation of a WAN via the Internet. Here, computer <highlight><bold>130</bold></highlight> employs modem <highlight><bold>178</bold></highlight> to establish communications with at least one remote computer <highlight><bold>182</bold></highlight> via the Internet <highlight><bold>180</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In a networked environment, program modules depicted relative to computer <highlight><bold>130</bold></highlight>, or portions thereof, may be stored in a remote memory storage device. Thus, e.g., as depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, remote application programs <highlight><bold>189</bold></highlight> may reside on a memory device of remote computer <highlight><bold>182</bold></highlight>. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, which depicts an exemplary streaming media system <highlight><bold>200</bold></highlight> having a server device <highlight><bold>202</bold></highlight> operatively coupled to a network <highlight><bold>204</bold></highlight> and configured to stream media there over to a client device <highlight><bold>206</bold></highlight> that is also operatively coupled to network <highlight><bold>204</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Streaming media system <highlight><bold>200</bold></highlight> is arranged in a client-centric configuration in which client device <highlight><bold>204</bold></highlight> selects a streaming media program on server device <highlight><bold>202</bold></highlight>, specifies that a particular fast startup is desired, and provides information to server device <highlight><bold>202</bold></highlight> about the communication link over which the streaming media will be carried. In this manner, client device <highlight><bold>204</bold></highlight> is able to control the streaming media process and server device <highlight><bold>202</bold></highlight>. As described in greater detail below, in controlling the streaming media the client device <highlight><bold>204</bold></highlight> causes server device <highlight><bold>202</bold></highlight> to stream media during an initial period of time at data bitrate that is greater than the media&apos;s encoded bitrate. This allows client device <highlight><bold>204</bold></highlight> to quickly receive data and begin the rendering process sooner. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> This is unlike previous server-centric solutions used to provide video on-demand, such as, for example, the system and method presented in U.S. Pat. No. 5,963,202, issued to Nathaniel Polish. In such server-centric systems, the server device, rather than the client device, has control over a video data transfer. Thus, for example, a server needs to determine how much video data can be transferred over the communication link and when to transfer it during the progressive download. One of the drawbacks to a server-centric system is that the server is required to monitor, for every client device, the status of the communications link and data buffers in the client device. While a progressive video download technique may be efficient for an in-home or hotel video-on-demand system, it would likely prove inefficient in a larger network environment, such as, for example, the Internet, a corporate intranet, a wide area network, a wireless network, etc. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, as depicted, server <highlight><bold>202</bold></highlight> includes a media server <highlight><bold>208</bold></highlight>. Media server <highlight><bold>208</bold></highlight> includes fast startup logic <highlight><bold>210</bold></highlight> and is operatively coupled to a buffer <highlight><bold>212</bold></highlight>. As shown, in this example, media server is operatively coupled to a first interface <highlight><bold>214</bold></highlight> that provides access to a media storage device <highlight><bold>216</bold></highlight>. Media sever <highlight><bold>208</bold></highlight> is further operatively coupled to a second interface <highlight><bold>218</bold></highlight> that provides access to a broadcast media device <highlight><bold>220</bold></highlight> (represented by a video camera). Media server <highlight><bold>208</bold></highlight> is operatively coupled to network <highlight><bold>204</bold></highlight> through a third interface <highlight><bold>222</bold></highlight>. It is recognized that in other implementations interfaces <highlight><bold>214</bold></highlight>, <highlight><bold>218</bold></highlight> and/or <highlight><bold>222</bold></highlight> may be combined in some manner. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> As its name suggests, media server <highlight><bold>208</bold></highlight> is configured to serve or otherwise provide streaming media to client device <highlight><bold>206</bold></highlight>. To accomplish this task, media server <highlight><bold>208</bold></highlight> exchanges information with client device <highlight><bold>206</bold></highlight> through interface <highlight><bold>222</bold></highlight> and network <highlight><bold>204</bold></highlight>. The techniques and protocols used to provide communications between server device <highlight><bold>202</bold></highlight> and client device <highlight><bold>206</bold></highlight> are well known and therefore will not be described in to great of detail. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Media server <highlight><bold>208</bold></highlight> identifies the availability of streaming media programs to client device <highlight><bold>206</bold></highlight>. In this example, media server <highlight><bold>208</bold></highlight> accesses/receives streaming media programs from two sources, namely media storage device <highlight><bold>216</bold></highlight> and broadcast media device <highlight><bold>220</bold></highlight>. Media storage device <highlight><bold>216</bold></highlight> is representative of a data storage device, such as, for example, one or more magnetic disk drives, one or more optical disc drives, and the like. Here, media storage device <highlight><bold>216</bold></highlight> is configured to allow media server <highlight><bold>208</bold></highlight> to stream media &ldquo;on-demand&rdquo; to client device <highlight><bold>206</bold></highlight>. As used herein, &ldquo;on-demand&rdquo; means that the media is stored in media storage device <highlight><bold>216</bold></highlight>, and has since then been made available for streaming and replay at subsequent times. Thus, for example, an earlier news program may be recorded and stored in its entirety on media storage device <highlight><bold>216</bold></highlight> and subsequently made available on-demand. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> To the contrary, broadcast media device <highlight><bold>220</bold></highlight> is representative of media that has not been significantly stored, and certainly not in its entirety. An example would be a news program that is being aired in real-time or near real-time. Such a media program would not, therefore, be available on-demand. When client device <highlight><bold>206</bold></highlight> selects this broadcast media stream, the streaming media will &ldquo;jump&rdquo; into the news program at about the point where it is being aired. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Buffer <highlight><bold>212</bold></highlight> is used by media server <highlight><bold>208</bold></highlight> to temporarily store media data in support of the streaming process. Buffer <highlight><bold>208</bold></highlight> would typically include random access memory. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> As shown, client device <highlight><bold>206</bold></highlight> includes a media client <highlight><bold>224</bold></highlight>. Media client <highlight><bold>224</bold></highlight> is configured to support the selection, receipt and rendering of streaming media from server device <highlight><bold>202</bold></highlight> via interface <highlight><bold>232</bold></highlight> and network <highlight><bold>204</bold></highlight>. To further accomplish its tasks, media client <highlight><bold>224</bold></highlight> includes fast startup logic <highlight><bold>226</bold></highlight> and renderer <highlight><bold>228</bold></highlight>. Media client <highlight><bold>224</bold></highlight> is also operatively coupled to a buffer <highlight><bold>230</bold></highlight>. Buffer <highlight><bold>230</bold></highlight> typically includes random access memory. Renderer <highlight><bold>228</bold></highlight> is configured to process the streamed media data and render the data as applicable for client device <highlight><bold>206</bold></highlight> and the received media. Rendering processes are well known, and the details of such are beyond the scope of the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> With this exemplary streaming media system in mind, this detailed description will now focus on the functionality of media client <highlight><bold>224</bold></highlight> and fast startup logic <highlight><bold>210</bold></highlight> in server device <highlight><bold>202</bold></highlight> and corresponding fast start logic <highlight><bold>226</bold></highlight> in client device <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Media client <highlight><bold>224</bold></highlight> requires buffering of the streaming data for a variety of reasons. For example, buffering allows client device <highlight><bold>206</bold></highlight> to request and successfully obtain retransmissions when content packets are lost without impacting continuous playback. Buffering also allows playback to be smooth on networks that have jitter or inconsistent bandwidth response. Highly efficient compression technology often requires a significant duration of content (e.g., an entire frame or more) to be present on the client before decompression can begin. All of these issues contribute to the necessity of buffering content by media client <highlight><bold>224</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Depending on the compression technology and the content type, buffering can vary anywhere from less than 1 second to many seconds. Certain conventional media players, for example, buffer roughly five seconds worth of content before allowing any rendering to begin. Because conventional streaming media servers are designed to deliver the content at the encoded bitrate, the end-user will have to wait at least five seconds for the buffers to fill and rendering to begin. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Since broadcast media is typically already running when most client devices connect, a client device may be required to wait before even beginning the buffering process. With typical compression technologies in use today, for example, buffering needs to start at certain discrete points in the stream. When an individual client device subscribes to a conventional broadcast stream, it will need to wait for one of these discrete points to appear in the stream before even starting the buffering process. The frequency of the discrete points can vary dramatically depending on the compression technology used, the content type, and even the content characteristics. These discrete buffering points can vary in frequency from several times a second to as little as once every sixteen seconds or less. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Given that a conventional streaming media client must first wait to find a discrete entry point and then wait for the buffers to fill, the user often experiences significant delay when attempting to start rendering a streaming media broadcast. In accordance with certain aspects of the present invention, methods and apparatuses are provided that tend to significantly reduce the time required to fill the client device&apos;s buffer(s) and ultimately allow rendering to begin faster for both broadcast and on-demand content. Thus, for example, in certain exemplary implementations, additional available network bandwidth is utilized to accelerate the streaming of content and as such fill the client device&apos;s buffer(s) faster. Hence, the term fast startup. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In accordance with certain aspects of the present invention, the various fast startup methods and apparatuses can be implemented by extending the usage/syntax of conventional streaming protocols, such as, for example, Microsoft Media Server (MMS), Real Time Streaming Protocol (RTSP), HyperText Transfer Protocol (HTTP), and the like. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Co-pending U.S. patent application Ser. No. 09/636,004, filed Aug. 9, 2000, and titled &ldquo;Fast Dynamic Measurement of Connection Bandwidth&rdquo;, which is incorporated by reference herein, describes, in greater detail, techniques by which media client <highlight><bold>224</bold></highlight> can determine the bandwidth present between client device <highlight><bold>206</bold></highlight> and server device <highlight><bold>202</bold></highlight>, prior to requesting the actual delivery of the streaming media. This bandwidth is known as the link bandwidth. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Basically, the fast dynamic measurement of connection bandwidth utilizes a single pair of packets to calculate bandwidth between client device <highlight><bold>206</bold></highlight> and server device <highlight><bold>202</bold></highlight>. This calculation is based upon a packet-pair technique. This bandwidth measurement is extremely quick. On its journey across network <highlight><bold>204</bold></highlight>, communication equipment and modems may compress a packet. This compression shrinks the size of the packet; thus, it can distort the bandwidth calculation using such a shrunken packet. To avoid this distortion, the fast dynamic measurement of connection bandwidth employs non-compressible packets. More specifically, it employs highly entropic packets. Therefore, a packet cannot be compressed during its journey. In addition, on its journey across network <highlight><bold>204</bold></highlight>, packets may be rerouted, delayed, misrouted, and the like. These momentary delays may result in a momentary bad bandwidth calculation. This problem is ameliorated by using a history list (not shown) at media client <highlight><bold>224</bold></highlight> that keeps track of recent measurements. Media client <highlight><bold>224</bold></highlight> can then determine the median value from the history list. That median value is representative of the link bandwidth. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> This represents one exemplary technique for determining the link bandwidth. Those skilled in the art will recognize that other techniques may be employed to determine to some degree of certainty the link bandwidth. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Media client <highlight><bold>224</bold></highlight> can use conventional protocol, such as, e.g., a session description protocol (SDP) to communicate with media server <highlight><bold>208</bold></highlight> and identify the location and characteristics of the available streaming media. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In this manner, media client <highlight><bold>224</bold></highlight> is therefore able to determine both the link bandwidth and also the bandwidth of the individual stream(s) in the streaming media program. As such, fast startup logic <highlight><bold>226</bold></highlight> in media client <highlight><bold>224</bold></highlight> can request that the content be initially streamed at a rate faster than the encoded bitrate of the content. This request for fast startup is handled by fast startup logic <highlight><bold>210</bold></highlight> in media server <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Assuming normal playback speed, streaming the content at a rate greater than the encoded bitrate implies that the amount of data in client buffer <highlight><bold>230</bold></highlight> will increase in size over time. It is undesirable to continue to stream the content at a rate faster than the encoded bitrate of the content indefinitely, given the limited amount of memory in buffer <highlight><bold>230</bold></highlight>. Instead, client buffer <highlight><bold>230</bold></highlight> is sufficiently filled at the fast rate at the beginning of the streaming process, and subsequently the streaming rate changes to roughly match the encoded bitrate of the media program (file). This design has the benefit of using the additional link bandwidth to quickly fill client buffer <highlight><bold>230</bold></highlight> without requiring additional memory in buffer <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Fast startup logic <highlight><bold>210</bold></highlight>, within media server <highlight><bold>208</bold></highlight>, is configured to respond to the fast startup request by streaming the content at the faster rate. In the case of broadcast media, such as a live video feed, fast startup logic <highlight><bold>210</bold></highlight> temporarily stores a portion of the streaming broadcast media to server buffer <highlight><bold>212</bold></highlight>. In this manner, new client devices connecting to server device <highlight><bold>202</bold></highlight> can be sent content packets at a rate greater than the encoded bitrate of the broadcast stream. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Thus, for example, in certain implementations if the content is encoded at 16 kbps, then fast startup logic <highlight><bold>210</bold></highlight> will store the previous 10 seconds of the broadcast media in buffer <highlight><bold>212</bold></highlight>. This exemplary buffering process therefore requires 20 Kbytes of memory. As a result, client devices that connect after the broadcast has started are able to request approximately up to about 10 seconds of content at a rate much faster than 16 kbps. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> This is just one example; in other implementations, the buffering process may store a longer or shorter amount of the broadcast media in buffer <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Startup logic <highlight><bold>210</bold></highlight> is further configured to intelligently decide where to start sending content packets from buffer <highlight><bold>212</bold></highlight> as new clients connect to the broadcast. For example, assume that a broadcast program is running and a new client connects to server <highlight><bold>202</bold></highlight>. If startup logic <highlight><bold>210</bold></highlight> has buffered the previous 10 seconds of content in buffer <highlight><bold>212</bold></highlight>, then theoretically fast startup logic <highlight><bold>210</bold></highlight> can start sending content at roughly any point from time ConnectTime<highlight><subscript>clientX</subscript></highlight>-10 to ConnectTime<highlight><subscript>clientX</subscript></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> However, starting the streaming of content at the beginning of the 10 second buffer can be problematic because the content residing at ConnectTime<highlight><subscript>clientX</subscript></highlight>-10 may not contain a discrete starting point as required by media client <highlight><bold>224</bold></highlight>. Typically, for certain types of streamed content, media client <highlight><bold>224</bold></highlight> can only start rendering the content at discrete points within the streamed data, such as, for example, certain frame boundaries or &ldquo;key frames&rdquo;. By way of example, in MPEG streams, I frames are key frames, P frames are not. See, for further example, <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, which illustratively depicts a portion <highlight><bold>300</bold></highlight> of a media stream that includes two key frames <highlight><bold>302</bold></highlight> and a plurality of other frames <highlight><bold>304</bold></highlight>. As shown, there can be a long rendering time period <highlight><bold>306</bold></highlight> between key frames <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Consequently, startup logic <highlight><bold>210</bold></highlight> is advantageously configured to selectively scan through the buffered content to locate, and/or otherwise identify/keep track of, a discrete point at which to start the streaming process for a new client device. Preferably, the discrete point will be the earliest one in buffer <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Propagation latency is another factor for determining where to start sending content from the buffered list. Since essentially old (i.e., buffered) content is sent to new client devices, and the event may be a live broadcast, a time shift is introduced. The magnitude of the time shift resulting from fast startup logic <highlight><bold>210</bold></highlight> (and media server <highlight><bold>208</bold></highlight>) is related to the amount of buffering done as well as the starting point chosen for content sent to new client devices. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Clients can randomly connect at any point during a broadcast, and the 10 second buffer list used in this example is constantly changing similar to a &ldquo;waterfall&rdquo; or &ldquo;sliding window&rdquo;. Therefore, the amount of content sent at a rate greater than the encoded bitrate and the starting point for transmission of content will vary over time. Furthermore, since each client device may have a different link bandwidth, the rate of the accelerated transmission may vary too. Each client device may even have different client-side buffer settings. All of these factors imply that client devices will not be synchronized during the rendering process. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> If a client device connecting to server <highlight><bold>202</bold></highlight> does not have considerable additional network bandwidth available, sending the earliest usable point in the content buffer list may unnecessarily increase the propagation latency for that specific client device. Thus, server device <highlight><bold>202</bold></highlight>, and more particularly fast startup logic <highlight><bold>210</bold></highlight>, is configured to &ldquo;balance&rdquo; the need for minimizing the startup time with the need for minimizing the propagation time. For example, to help balance the conflicting requirements of minimizing propagation latency and startup latency, logic similar to the following can be employed: </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>AccelDuration&equals;RequestedAccelDuration&minus;</italic></highlight>(<highlight><italic>AccelRate*RequestedAccelDuration</italic></highlight>); </in-line-formula></paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> RequestedAccelDuration: The requested duration of the acceleration. </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> AccelRate: The ratio of the (encoded bitrate of the content)/(link bandwidth). </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> AccelDuration: The amount of content sent from the server buffers. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The above exemplary logic essentially reduces the amount of &ldquo;time-shifted&rdquo; content sent from server buffer <highlight><bold>212</bold></highlight> as the encoded bitrate of the content approaches the available link bandwidth. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> For on-demand content, fast startup logic <highlight><bold>210</bold></highlight> is configured similar to the broadcast scenario except that there is no existing buffer when client device <highlight><bold>206</bold></highlight> connects. Therefore, fast startup logic <highlight><bold>210</bold></highlight> builds a buffer list quickly to satisfy the fast startup request. This is possible because a typical media storage device <highlight><bold>216</bold></highlight> is capable of delivering the on-demand content at a rate that is much faster than what client device <highlight><bold>206</bold></highlight> is requesting. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In certain exemplary implementations, the actual protocol mechanism used by client device <highlight><bold>206</bold></highlight> to request the accelerated buffering involves the use of headers. By way of example, for the RTSP protocol, a header &ldquo;X-Accelerate-Streaming&rdquo; is defined, which is used with the PLAY command. This header includes information regarding the client request for the duration of the acceleration and also the bandwidth to use for the acceleration. For example, &ldquo;AccelDuration&equals;10000;AccelBandwidth&equals;1048576&rdquo; might be included in a typical &ldquo;X-Accelerate-Streaming&rdquo; header by the client. This would inform the server that the client wishes to have 10,000 ms worth of content accelerated at a rate of 1,048,576 bits/s. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> With the HTTP protocol, for example, client fast startup logic <highlight><bold>226</bold></highlight> can use directives in the commonly used PRAGMA header in the GET command to specify the fast startup parameters. The text below shows the contents of a sample PRAGMA header in a GET request asking for fast startup. </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> &ldquo;LinkBW&equals;2147483647, AccelBW&equals;1048576, AccelDuration&equals;10000&rdquo;</paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> In this exemplary request, the client fast startup logic <highlight><bold>226</bold></highlight> is informing server fast startup logic <highlight><bold>210</bold></highlight> that the link bandwidth is 2,147,483,647 bits/s, but it only wants the content accelerated at a rate of 1,048,576 bits/s for a duration of 10,000 ms. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which is a flow diagram depicting a process <highlight><bold>400</bold></highlight> suitable for use in client device <highlight><bold>206</bold></highlight>. In step <highlight><bold>402</bold></highlight>, media client <highlight><bold>224</bold></highlight> connects to media server <highlight><bold>208</bold></highlight>. In step <highlight><bold>404</bold></highlight>, fast startup logic <highlight><bold>226</bold></highlight> determines the link bandwidth, for example as described above. In step <highlight><bold>406</bold></highlight>, media client <highlight><bold>224</bold></highlight> asks the media server <highlight><bold>210</bold></highlight> for information about the available streamable content, including the bandwidth of individual content streams. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In step <highlight><bold>410</bold></highlight>, fast startup logic <highlight><bold>226</bold></highlight> requests streamable content from fast startup logic <highlight><bold>210</bold></highlight>. In step <highlight><bold>410</bold></highlight>, fast startup logic <highlight><bold>226</bold></highlight> selects the initial fast streaming bitrate and the subsequent slower streaming bitrate. Fast startup logic <highlight><bold>226</bold></highlight> also determines an amount of streamed media that is to be sent at the initial fast streaming bitrate. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> For example, based on buffer <highlight><bold>230</bold></highlight> settings, the link bandwidth, and the encoded bitrate of the content, fast startup logic <highlight><bold>226</bold></highlight> can decide whether to submit a request to accelerate the transmission of content in order to fill buffer <highlight><bold>230</bold></highlight> quickly. If client device <highlight><bold>206</bold></highlight> decides to request fast startup, custom header syntax can be added to the final command that initiates the delivery of content from server device <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Thereafter, in step <highlight><bold>410</bold></highlight>, media client <highlight><bold>224</bold></highlight> begins receiving streamed content from media server <highlight><bold>208</bold></highlight>. In step <highlight><bold>412</bold></highlight>, a beginning portion of the content is received at the initial faster streaming bitrate, which is greater than the encoded bitrate. Subsequently, in step <highlight><bold>414</bold></highlight>, further portions of the streamed content are received at the slower streaming bitrate, which is about equal to the encoded bitrate. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, which is a flow diagram depicting a process <highlight><bold>500</bold></highlight> suitable for use in server device <highlight><bold>202</bold></highlight>. In step <highlight><bold>502</bold></highlight>, media server <highlight><bold>208</bold></highlight> processes a client connect request, and responds to client requests for information about the streamable content. In step <highlight><bold>504</bold></highlight>, fast startup logic <highlight><bold>210</bold></highlight> responds to a received request from client device <highlight><bold>206</bold></highlight> for streaming media with fast startup. In step <highlight><bold>506</bold></highlight>, if the requested streamable content is on-demand content, then fast startup logic <highlight><bold>210</bold></highlight> attempts to satisfy the fast startup request by fetching the necessary content from media storage device <highlight><bold>216</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Alternatively, if the requested streamable content includes broadcast content, then, in step <highlight><bold>508</bold></highlight>, fast startup logic <highlight><bold>210</bold></highlight> uses the fast startup parameters received from fast startup logic <highlight><bold>226</bold></highlight> to determine at what point in the broadcast content the content can begin streaming from buffer <highlight><bold>212</bold></highlight>. When possible, fast startup logic <highlight><bold>210</bold></highlight> will preferably start the streaming at discrete starting points in the buffer list so that media client <highlight><bold>224</bold></highlight> can immediately begin buffering useful content packets. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Next, in step <highlight><bold>510</bold></highlight>, fast startup logic <highlight><bold>210</bold></highlight> initially streams the applicable content at the faster streaming bitrate, and subsequently, in step <highlight><bold>512</bold></highlight>, at the lower streaming bitrate. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, which is a time line graph <highlight><bold>600</bold></highlight> illustrating an exemplary transmission bitrate value <highlight><bold>602</bold></highlight> associated with a requested streaming media program with fast startup. At time to, client device <highlight><bold>206</bold></highlight> requests the streaming media program. In response server device <highlight><bold>202</bold></highlight> begins accessing buffered content. At time t<highlight><subscript>1</subscript></highlight>, server device <highlight><bold>202</bold></highlight> begins transmitting the content at a fast streaming bitrate. In this example, at about time t<highlight><subscript>2</subscript></highlight>, client device <highlight><bold>206</bold></highlight> has received and buffered enough streamed media to begin rendering the content. At time t<highlight><subscript>3</subscript></highlight>, server device <highlight><bold>202</bold></highlight> has delivered the requested amount of fast startup data requested by client device <highlight><bold>206</bold></highlight>. As such, the streaming bitrate is reduced to about the encoded bitrate. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> For example, assume that content packets would normally be streamed at a fixed rate of about 56 kbps, even though the link bandwidth for the client device is about 700 kbps. In the fast startup scenario illustrated above, as requested, the content packets that comprise about the first 10 seconds of the media can be streamed at about the link bandwidth rate. Here, this would take roughly 0.8 seconds. Thereafter, the remaining content packets are streamed at the lower encoded bitrate. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In this example, if the round trip time is reasonably short in duration, then media server <highlight><bold>208</bold></highlight> will begin the fast startup stream about 0.1 seconds after the request is made. Media client <highlight><bold>224</bold></highlight> will have received about 5 seconds of the streaming media program at about 0.5 seconds following the initial request, and can begin rendering at about that time. The requested 10 seconds of fast startup streamed media will have been received at about 0.9 seconds following the initial request. At that time, renderer <highlight><bold>228</bold></highlight> will have rendered about 0.4 seconds of content, and about 9.6 seconds of content will be stored in buffer <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Thus, in this example, the startup time was reduced from over 5 seconds to less than about 1 second. Furthermore, client device <highlight><bold>206</bold></highlight> will be able to maintain about 10 seconds of buffered content. This additional buffering allows client device <highlight><bold>206</bold></highlight> to avoid short pauses due for example to jitter and other potentially longer network brownouts, etc. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Although some preferred implementations of the various methods and apparatuses of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the exemplary implementations disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for use in a client device, the method comprising: 
<claim-text>identifying streamable media content available from a server device over a communication link, said streamable media content having associated with it an encoded bitrate; </claim-text>
<claim-text>providing a startup request to said server device over said communication link, said startup request identifying said streamable media content, a communication link bandwidth, and an amount of said streamable media content to be transmitted at a bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>while receiving said amount of said streamable media content from said server device over said communication link: </claim-text>
<claim-text>buffering said received streamable media, and </claim-text>
<claim-text>subsequently rendering said buffered streamed media. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein receiving said amount of said streamable media content from said server device over said communication link further includes: 
<claim-text>initially receiving streamed media content associated with a discrete rendering point. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said communication link bandwidth is actively determined by said client device. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein identifying said streamable media content available from said server device includes transmitting at least one session description protocol (SDP) message to said server device. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein providing said startup request to said server device includes transmitting at least one message formatted according to at least one streaming media protocol selected from a group of protocols comprising MMS, Real Time Streaming Protocol (RTSP), and HyperText Transfer Protocol (HTTP). </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An apparatus for use in a client device, the apparatus comprising: 
<claim-text>memory suitable for buffering streamable media content having associated with it an encoded bitrate; and </claim-text>
<claim-text>logic operatively coupled to said memory and configured to generate at least one startup request that identifies a desired streamable media content, a communication link bandwidth, and an amount of said desired streamable media content that is to be provided at a bitrate greater than said encoded bitrate but no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising: 
<claim-text>a communication interface operatively coupled to said logic and configurable connect to a server device through a communication link, said communication interface being further configurable to transmit said at least one startup message to said server device and receive said amount of said streamable media content from said server device over said communication link; and </claim-text>
<claim-text>wherein said logic is further configured to buffer said received streamable media in said memory, and subsequently render said buffered streamed media. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said communication interface is configurable receive initially streamed media content associated with a discrete rendering point. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said logic is further configurable to identify said streamable media content available from said server device </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said logic is configured to actively determine said communication link bandwidth. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer-readable medium comprising computer-executable instructions for: 
<claim-text>identifying streamable media content available from a server device over a communication link, said streamable media content having associated with it an encoded bitrate; </claim-text>
<claim-text>providing a startup request to said server device over said communication link, said startup request identifying said streamable media content, a communication link bandwidth, and an amount of said streamable media content to be transmitted at a bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>receiving said amount of said streamable media content from said server device over said communication link; </claim-text>
<claim-text>buffering said received streamable media; and </claim-text>
<claim-text>subsequently rendering said buffered streamed media. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein receiving said amount of said streamable media content from said server device over said communication link further includes: 
<claim-text>initially receiving streamed media content associated with a discrete rendering point. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>actively determining said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method for use in a server device, the method comprising: 
<claim-text>identifying streamable media content available to a client device over a communication link, said streamable media content having associated with it an encoded bitrate; </claim-text>
<claim-text>receiving a startup request from said client device over said communication link, said startup request specifying said streamable media content to be transmitted to said client, a communication link bandwidth, and an amount of said streamable media content to be transmitted at a bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising: 
<claim-text>buffering at least said amount of said streamable media content; and </claim-text>
<claim-text>transmitting said amount of said buffered streamable media content to said client device at said bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, further comprising: 
<claim-text>after transmitting said amount of said buffered streamable media content, transmitting subsequent portions of said streamable media content to said client device at a bitrate about equal to said encoded bitrate. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein transmitting said amount of said buffered streamable media content to said client device further includes: 
<claim-text>locating a discrete rendering point in said amount of said buffered streamable media content; and </claim-text>
<claim-text>initiating transmission of said amount of said buffered streamable media content beginning with said discrete rendering point. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. An apparatus for use in a server device, the apparatus comprising: 
<claim-text>memory suitable for buffering streamable media content having associated with it an encoded bitrate; and </claim-text>
<claim-text>logic operatively coupled to said memory and configurable to respond in accord with to a startup request, said startup request specifying streamable media content to be provided to said client, a communication link bandwidth associated with a communications link established between said server device and said logic, and an amount of said streamable media content to be transmitted at a bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said logic is configured to buffer at least said amount of said streamable media content in said memory, and transmit said amount of said buffered streamable media content to said client device at said bitrate greater than said encoded bitrate but no greater than about said communication link bandwidth. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein said logic is further configured to, after transmitting said amount of said buffered streamable media content, transmit subsequent portions of said streamable media content to said client device at a bitrate about equal to said encoded bitrate. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein, in transmitting said amount of said buffered streamable media content to said client device said logic locates a discrete rendering point in said amount of said buffered streamable media content and initiates transmission of said amount of said buffered streamable media content beginning with said discrete rendering point . </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. A computer-readable medium comprising computer-executable instructions for: 
<claim-text>identifying streamable media content available to a client device over a communication link, said streamable media content having associated with it an encoded bitrate; </claim-text>
<claim-text>receiving a startup request from said client device over said communication link, said startup request specifying said streamable media content to be transmitted to said client, a communication link bandwidth, and an amount of said streamable media content to be transmitted at a bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>buffering at least said amount of said streamable media content; and </claim-text>
<claim-text>transmitting said amount of said buffered streamable media content to said client device at said bitrate greater than said encoded bitrate and no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>after transmitting said amount of said buffered streamable media content, transmitting subsequent portions of said streamable media content to said client device at a bitrate about equal to said encoded bitrate. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein transmitting said amount of said buffered streamable media content to said client device further includes: 
<claim-text>locating a discrete rendering point in said amount of said buffered streamable media content; and </claim-text>
<claim-text>initiating transmission of said amount of said buffered streamable media content beginning with said discrete rendering point. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A system comprising: 
<claim-text>a network configured to provide a communication link; </claim-text>
<claim-text>a server device operatively coupled to said network; and </claim-text>
<claim-text>a client device operatively coupled to said network, and configured to send at least one startup request to said server device over said communication link, said startup request identifying a streamable media content to be provided to said client device over said communication link, a client determined communication link bandwidth associated with said communication link, and an amount of said desired streamable media content that is to be provided at a bitrate greater than said encoded bitrate but no greater than about said communication link bandwidth. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein said server device is configured to buffer at least said amount of said streamable media content, and transmit said amount of said buffered streamable media content to said client device at said bitrate greater than said encoded bitrate but no greater than about said communication link bandwidth. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference>, wherein said server device is further configured to, after transmitting said amount of said buffered streamable media content, transmit subsequent portions of said streamable media content to said client device at a bitrate about equal to said encoded bitrate. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference>, wherein, in transmitting said amount of said buffered streamable media content to said client device said server device locates a discrete rendering point in said amount of said buffered streamable media content and initiates transmission of said amount of said buffered streamable media content beginning with said discrete rendering point. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein said discrete rendering point includes a key frame. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein said amount of said streamable media content identifies an initial period of playback time. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein said streamable media is selected from a group of streamable media comprising on-demand media and broadcast media. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein said client device is further configured to buffer received streamable media content, and subsequently render said buffered streamed media content.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005139A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005139A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005139A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005139A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005139A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005139A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
