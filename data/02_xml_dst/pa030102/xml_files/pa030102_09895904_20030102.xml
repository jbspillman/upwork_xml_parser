<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004585A1-20030102-D00000.TIF SYSTEM "US20030004585A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00001.TIF SYSTEM "US20030004585A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00002.TIF SYSTEM "US20030004585A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00003.TIF SYSTEM "US20030004585A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00004.TIF SYSTEM "US20030004585A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00005.TIF SYSTEM "US20030004585A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00006.TIF SYSTEM "US20030004585A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00007.TIF SYSTEM "US20030004585A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00008.TIF SYSTEM "US20030004585A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00009.TIF SYSTEM "US20030004585A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004585A1-20030102-D00010.TIF SYSTEM "US20030004585A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004585</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895904</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G05B011/01</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G05B013/02</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>700</class>
<subclass>018000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>700</class>
<subclass>019000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>700</class>
<subclass>020000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>700</class>
<subclass>047000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Industrial controller based on technology objects</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wolfgang</given-name>
<family-name>Horn</family-name>
</name>
<residence>
<residence-non-us>
<city>Hohenstein-Ernstthal</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Johannes</given-name>
<family-name>Birzer</family-name>
</name>
<residence>
<residence-non-us>
<city>Stulln</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Tino</given-name>
<family-name>Heber</family-name>
</name>
<residence>
<residence-non-us>
<city>Freiberg</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Raimund</given-name>
<family-name>Kram</family-name>
</name>
<residence>
<residence-non-us>
<city>Erlangen</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Martin</given-name>
<family-name>Kiesel</family-name>
</name>
<residence>
<residence-non-us>
<city>Poxdorf</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Siemens Corporation</name-1>
<name-2>Intellectual Property Department</name-2>
<address>
<address-1>186 Wood Avenue South</address-1>
<city>Iselin</city>
<state>NJ</state>
<postalcode>08830</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and system for controlling an industrial controller based on technology objects are disclosed. Technology object types may be loaded and instantiated into the run time system of a controller, thereby increasing the functionality and providing technological scaling of the controller. Technology object types may be loaded in the form of technology packages and a user may use the functionality of the invention directly in a user program. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to an industrial controller for technical processes, in particular for production machines. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Specifically, this invention also relates to a method of creating an industrial controller, in particular for a certain area of application, e.g., for use in packaging machines. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> An industrial controller may be a separate device or it may be integrated into a computer, a PC, a stand-alone unit or a drive. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Prior industrial controllers known previously for automation of technical processes have been based essentially either on a &ldquo;programmable controller functionality&rdquo;, a &ldquo;motion control (MC) functionality&rdquo; or a technological functionality. Since a certain scope of function is specified with respect to such functionalities, optimal adaptation to the requirements of a specific process is limited; an entire group of functions is often superfluous in a specific application (e.g., any functionality for packaging machines might be superfluous when using an MC controller for machine tools). </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> German Patent 197 40 550 describes a device that executes a control program for controlling a technical process and/or controlling the motion of a processing machine. This control program comprises a plurality of software modules. Process control functionalities of known programmable controllers and motion functionalities of known MC controllers are implemented in a uniform configurable control system. However, individual software modules here are executed by a partial subgroup control, so that a central processing unit is to be provided for each software module. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In addition, German Patent 198 53 205 describes a method of controlling technical processes, where the method is based on instantiability and on-demand interleaving of software components with a preselectable, at least parameterizable, functionality. The interleaving and design of the software components are not optimized, however. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Therefore, an object of this invention is to create optimal features of an industrial controller with regard to its control structure, as well as its functionality, for different control tasks and different boundary conditions and requirements of the basic technical processes in a simple manner. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The inventors have based this finding on the discovery that the run time system and/or engineering system of the industrial controller operates both a programmable controller functionality and a motion functionality and/or a technological functionality. The possibility of dynamic loading of function code into the run time system and/or engineering system of the industrial controller permits an optimal sizing of the controller, i.e., scaling, must be possible. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> An object of the present invention, defined above, is achieved for an industrial controller in that: </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> a) the controller has a generally usable basic system, preferably technology-neutral, for the basic functionality of the controller, </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> b) the technological functionality of the controller is made available via technology object types, </paragraph>
<paragraph id="P-0012" lvl="2"><number>&lsqb;0012&rsqb;</number> c) there is technological scaling with regard to the functionality of the controller through additionally loadable technology object types, and </paragraph>
<paragraph id="P-0013" lvl="2"><number>&lsqb;0013&rsqb;</number> d) the object types are instantiated and selected by the user specifically for the corresponding application. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> A technology object preferably represents a component of the real world. In the context of industrial controllers, these may be, for example, components of machine tools or production machines. Technology objects provide a defined, closed technological functionality. They may be interleaved with one another to implement complicated technological tasks. Because the technological functionality of the controller is formed by technology objects, which are preferably real components, the technology capability (i.e., the capability of the controller) is immediately transparent to a user of the controller. A technology object may also very easily be reused by a user as a technological software unit in different applications and controllers. A user can abstract objects from their implementation when using technology objects. Technology objects that can be used directly by the user in his user programs are obtained by instantiation from technology object types. Any desired number of instances of technology objects can be obtained from a technology object type once it has been defined. Because instantiation can take place in the engineering system or in the run time system, it is convenient and easy for the user to use the technology objects in his applications. The functional capability of a controller can thus be expanded very easily. This expandability is limited only by hardware restrictions (e.g., CPU, power or memory restrictions). </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In addition, the user has the option of expanding the existing basic system for the basic functionality of the controller by adding only those functionalities actually needed by the user for his applications. This is because the user explicitly loads certain required technology objects into the basic system of the controller. A user can thus acquire individually a controller with a certain functionality. Unneeded functionalities usually present in controllers are, thus, avoided, and do not cause any overhead. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Another advantage consists of the development and production of such scalable controllers. Controllers which are supplied with a necessary basic functionality (a basic system) can be produced in large numbers very easily (yielding of scale). </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In a first advantageous embodiment of the invention, loading and distribution of the technology objects takes place on run time systems and/or hardware systems with the same or different performance. Technology objects are independent of platform and hardware. They do not include any platform-specific or hardware-specific properties and, thus, they can be loaded and distributed very easily on different hardware systems and/or run time systems. The possibility for loadability and distributability of the technology objects on hardware systems of the same or different performance level permits a user to use technology objects very flexibly and not be concerned with restrictions on the basic performance of the hardware systems and/or run time systems in the loadability and distributability of the technology objects. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In another advantageous embodiment of the invention, technology objects are loaded and distributed on hardware and/or run time systems of the same or different performance level within a project, with a project being based on data and/or programs from one or more control units. A user therefore has the option of using devices having different hardware within a project. These devices may also have differing performance levels, and the technology objects can be distributed easily and flexibly to these hardware devices without having to take into account performance differences between the devices. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In another embodiment of the invention, functionality of the technology objects is distributed among control units by synchronized, equidistant communication with one another in real time. The technology objects can therefore be distributed to devices and control units, which are connected by a communications medium that allows a synchronized, equidistant communication. The technology objects can thus communicate with one another in real time. Thus, in one project the instances of technology object types can be referenced unambiguously and can be used independently of the (hardware) platform. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In another embodiment of the claimed invention, functionality of the controller can be expanded through additional loadability of technology object types. The user thus can achieve a functional scaling of his controller. Therefore, a user can very easily adapt the functionality of a controller to the given basic needs and boundary conditions. Expandability is based on both device functionality and technological functionality. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In another embodiment of the invention, technology objects may contain program interfaces and/or system variables and/or alarms. With these program interfaces, the technology objects can be called up in a user program and used. Through the system variables, status information on technology objects is made available to the user program through the system variables: these system variables contain parameterizable settings for programming which can be altered in the user program. The values of system variables can be read out consistently through structures. System variables may be updated by the user program if they reflect the status. Technological alarms are defined and generated on the technology object. Their response to the program execution (global reaction) can be adjustable in an instance-specific response for each error in the engineering system at the time of start-up. The alarms together with the technical objects instance have an unambiguous identifier. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In another embodiment of the claimed invention, technology objects may be integrated into a programming environment. It is thus very easy and convenient for a user to use the technology objects in his user programs. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In another embodiment of the invention, a standard programming environment may be used. Standard programming environments include, for example, IEC 1131, C&plus;&plus; or Java. By tying the technology objects into IEC 1131, the user has the option of using technology objects directly in a programming environment that has been standardized for industrial requirements. The integration of the technology objects into C&plus;&plus; or Java gives a user the option of using the technology objects directly in an object-oriented programming environment. The integration of the technology objects into these programming environments expands the scope of the language and the function of these programming environments with regard to their technological functionality, as needed by the industrial controllers. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In another embodiment of the claimed invention, feedback-free programming of a technology object is provided with respect to other technology objects present and with respect to the basic system of the controller, unless feedback is explicitly programmed or designed. A user can thus program the behavior of a technology object independently of feedback from other technology objects or the basic system of the controller. If necessary or desired, however, a user may explicitly program or design a feedback procedure. The flexibility of the user in programming technology objects is thus increased. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In another embodiment of the present invention technology objects may be used in a manner that is neutral with regard to hardware and platform. The user can therefore abstract objects completely from the underlying hardware or platform in using the technology objects, and can concentrate completely on the technological functionality of technology objects when using them in his user programs. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In another embodiment of the present invention, technology objects may have hierarchical relationships and/or data flow relationships with other technology objects with regard to their functionality. Thus, structures and relationships of real environments can be imaged directly on technology objects. For example, the technology object &ldquo;synchronous axis&rdquo; may contain the functionality of the technology object &ldquo;positioning axis,&rdquo; which in turn contains the functionality of the technology object &ldquo;rpm axis.&rdquo;</paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In another embodiment of the present invention, elements such as axes, sensors, cams, probes, synchronism and cam plates may be present as technology objects, especially for motion controllers. These technology objects represent typical elements in the context of motion controllers. A user can use their representation as technology objects directly in applications. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In another embodiment of the present invention, technology object types can be combined into technology packages. By clustering and allocation of technology object types to technology packages, structuring and classification are achieved. Technology packages are a suitable means for loading technology object types into the run time system of a controller. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In another advantageous embodiment of the present invention, a program may be created before allocating the hardware platform. Technology objects can thus be used in programs independently of the target hardware. This facilitates and increases the reuse of software. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In another embodiment of the present invention the number of instantiations of technology object types can readily be adjusted. A user is only restricted in to the number of instances his user program by hardware limitations (e.g., CPU power or memory capacity). </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In another embodiment of the present invention, instances of technology object types can be distributed for storage on one or more control units. This feature allows a flexible distribution and balancing of the load in a system. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In another embodiment of the present invention, commands of technology objects may be used in a synchronous and/or asynchronous manner. This feature supports a cyclic programming option favoring a programmable control system and a sequence-oriented programming option (as is customary with motion controllers). The user can indicate whether a command is to be executed synchronously or asynchronously. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> According to this invention, the object defined above is achieved for an industrial control process through the following sequential steps: </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> a) providing a basic system having a basic functionality, preferably neutral as to technology, </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> b) selecting and instantiating technology object types relevant for the application and configuring the resulting technology objects in the engineering system, </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> c) loading the selected technology object types into the run time system, </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> d) loading and utilizing the instantiated technology objects and the instantiation information in the run time system, </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> e) creating user programs by utilizing the instantiated technology objects, and </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> f) loading the user programs into the run time system. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Therefore, the user has an opportunity to achieve the functionality of a desired controller in a systematic and consistent manner, ensuring that the resulting controller does not involve any functional overhead. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The essential advantages achieved with this invention consist in particular of the fact that a user can directly use in his applications a technological functionality that is made available to him through technology objects. These technology objects correspond to elements of the real world, in a manner that is adequate for the user&apos;s requirements. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Another advantage of the claimed invention is that the functionality of industrial controllers can be expanded in a dedicated manner by the so-called &ldquo;plug-and-play&rdquo; system. Technological scaling of the controller can be achieved in this way.</paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> An example of this invention is illustrated in the drawings and explained in greater detail below. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a block diagram illustrating an engineering system, the respective run time system and the technical process to be controlled; </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows in a survey diagram how a user program accesses a technological functionality in the run time system; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows in an abstract schematic diagram a technology object having a user interface; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows in the form of a so-called interleaving diagram technology objects representing a synchronous interconnection; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a synchronous interconnection with switching options between different leading value sources and synchronism laws, in an interleaving diagram; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows interleaving of a probe as a technology object in an interleaving diagram; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows interleaving of a cam as a technology object in an interleaving diagram; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows interleaving of synchronous technology objects in an interleaving diagram; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows the allocation of a cam plate as a technology object to multiple synchronous objects, likewise in an interleaving diagram; and </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows the clustering of technology object types into a technology package in a survey diagram.</paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In the form of a block diagram, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows that a technical process P may be controlled over at least one run time system RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>3</bold></highlight> of an industrial controller. The connection between the run time systems RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>3</bold></highlight> of the controller and the technical process P is bidirectional over inputs/outputs IO<highlight><bold>1</bold></highlight>-IO<highlight><bold>3</bold></highlight>. The controller is programmed and the definition of the performance of run time systems RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>3</bold></highlight> defined, using engineering system ES. Engineering system ES contains tools for configuring, designing and programming for machines and the controllers of technical processes. Programs generated in engineering system ES are transmitted over information paths I<highlight><bold>1</bold></highlight>-I<highlight><bold>3</bold></highlight> to run time systems RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>3</bold></highlight> of the controllers. The three dots between RTS<highlight><bold>2</bold></highlight> and RTS<highlight><bold>3</bold></highlight> indicate that additional controllers and run time systems may be present. With regard to its hardware, an engineering system ES may comprise a computer system with a graphic display screen (e.g., a display), input means (e.g., keyboard and mouse), a processor, a working memory and a secondary memory, a device for reading and recording computer-readable media (e.g., diskettes, CDs) and terminal units for data exchange with other systems (e.g., other computer systems, other controllers for technical processes) or media (e.g., Internet). A controller usually comprises input or output units, a processor and a program memory. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows two run time systems RTS<highlight><bold>4</bold></highlight> and RTS<highlight><bold>5</bold></highlight> of industrial controllers, illustrated as rectangles. Run time systems RTS<highlight><bold>4</bold></highlight> and RTS<highlight><bold>5</bold></highlight> each contain a universal motion control (UMC) kernel UMC-K and technology objects TO<highlight><bold>1</bold></highlight> through TOn. The respective UMC kernels as well as the technology objects may be different; technology objects may also differ in number. UMC kernel UMC-K is the basic system of the controller; this system contains the basic functionality of the controller. UMC kernel UMC-K is shown in a rectangular stair-step form. Technology objects TO<highlight><bold>1</bold></highlight> through TOn can be loaded into said UMC kernel. Through this additional installation, the scope of function of the basic system may be expanded. Technology objects TO<highlight><bold>1</bold></highlight> through TOn are illustrated as rectangles. Their arrangement in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> indicates that they expand the UMC kernel UMC-K. The three dots between TO<highlight><bold>1</bold></highlight> and TOn indicate that one or more technology objects TO<highlight><bold>1</bold></highlight> through TOn may be loaded into this kernel. This arrangement results in technological scaling of the entire controller. At the top center of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, user program PRG is shown in the of a schematic paper flag. Access arrows ACA<highlight><bold>1</bold></highlight> through ACA<highlight><bold>4</bold></highlight> indicate that a user can access functionalities of the UMC kernel UMC-K directly in his user program AP and can also access functionalities of technology objects TO<highlight><bold>1</bold></highlight> through TOn, from RTS<highlight><bold>4</bold></highlight> or RTS<highlight><bold>5</bold></highlight>, or from another run time system (also indicated by three dots). A user can use these functionalities of run time systems RTS<highlight><bold>4</bold></highlight> and RTS<highlight><bold>5</bold></highlight> (or of some other run time systems) directly in an application program PRG. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> More precisely, to expand the basic system of a run time system, technology objects are usually loaded in the form of technology object types. Such technology object types include, for example, axes, cams, cam plates and the like. Technology object types are instantiable. A user can use instances of technology object types for concrete applications in his application programs PRG. Such instances are then defined unambiguously and are identifiable throughout the project. Direct use of technology objects loaded additionally in user program PRG as independent program objects would also be possible in principle, but such direct use would not be flexible for a user generating a program. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows in an abstract schematic diagram a user&apos;s view of a technology object, i.e., an instance of a technology object type. This specification of a technology object TOS is shown as a rectangle composed of five parts. The first part at the top, which is separated from the following parts by a solid line, contains the type of the underlying technology object (TO type) and the TO identifier, i.e., the unique designation of the instantiation within the project. The next part which follows contains the configuration data with the configuration variables &lt;configuration variable<highlight><subscript>&mdash;</subscript></highlight>1 &gt;through &lt;configuration variable_n&gt;. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Through the configuration data, the technology object is set in its basic mode of operation. The configuration data is set through the engineering system (ES, <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) and may optionally be read or written from the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) through access functions. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, configuration data is separated from system variables (system data) by a dotted line. The system variables &lt;system variable<highlight><subscript>&mdash;</subscript></highlight>1&gt;through &lt;system variable_m&gt;can be altered from the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) and can be used as program variables. System variables may be readable or read-/writable. In addition, the states of technology objects are represented by system variables. Transitions of state can be triggered by events and/or commands. Technology objects are parameterized through configuration data and system variables. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In the next section of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the commands are also separated from the system variables by a dotted line. Commands &lt;command<highlight><subscript>&mdash;</subscript></highlight>1&gt;through &lt;command_xy&gt; represent functions that can be called up and represent the functionality of a technology object. These functions have defined identifiers, function parameters and local values. These functions may have parameters. When functions are called up, optional parameters may be omitted and default values used instead. In addition to the technological functionality, however, a technology object also has commands that determine the basic behavior of the technology object, e.g., </paragraph>
<paragraph id="P-0061" lvl="2"><number>&lsqb;0061&rsqb;</number> commands to reset in a defined starting state; </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> commands to reset a pending error specifically; </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> commands to set and reset in simulation mode (in simulation mode, the program is run through without concrete output to actuators or input from the sensors); </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> commands to make the technology object active/inactive; and </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> information functions. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The alarms are the next section of the specification of a technology object TOS. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, alarms are separated from commands by a dotted line. The diagram in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> contains the alarms &lt;alarm<highlight><subscript>&mdash;</subscript></highlight>1 &gt;through &lt;alarm_k&gt;. A technology object has monitoring abilities and can set defined alarms, optionally with alarm information and predefined reactions, in the event of an error. Technology alarms are set or generated on the technology object. Technology alarms have a set technology object type-specific response, e.g., motion stop. Possible responses are specific for a technology object type and, therefore, are described explicitly for individual technology object types. Furthermore, the technology alarms have a technology object type-specific identifier (e.g., an alarm number) and parameter. Thus, they have an adjustable response to program processing (global response) and also allow error-instance-specific settings and responses which are performed on the engineering system (ES, <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) at start-up. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> A user can use commands of technology objects synchronously or asynchronously, depending on settings. Therefore, a command can be written cyclically (customary with a programmable memory) or programmed in an event-controlled manner customary with synchronous controllers. In synchronous mode, a technology object, (for example executing a positioning command), remains in its state until reaching the positioning goal. In asynchronous mode, however, the technology object continues to run in its program flow simultaneously with execution of the positioning command, and it may assume other states in doing so. The technology object may then be checked, for example, by polling whether the positioning goal has been reached. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates interleaving of the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> with other technology objects. The technology objects are shown as double-bordered rectangles, where corners belonging together are connected by a line. A synchronous interconnection is established by interleaving the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> with the technology objects &ldquo;leading axis&rdquo; LA<highlight><bold>1</bold></highlight>, &ldquo;following axis&rdquo; FA<highlight><bold>1</bold></highlight> and &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight>. Interleaving of the technology objects is accomplished over data flows DF<highlight><bold>1</bold></highlight> through DF<highlight><bold>3</bold></highlight> and DF<highlight><bold>3</bold></highlight>&prime;. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows the basic technology arrangement for implementation of a synchronous interconnection: leading value&mdash;technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight>&mdash;technology object &ldquo;following axis&rdquo; FA<highlight><bold>1</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the leading value is represented by the technology object &ldquo;leading axis&rdquo; LA<highlight><bold>1</bold></highlight>. In addition, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows that the technology object &ldquo;leading axis&rdquo; LA<highlight><bold>1</bold></highlight> specifies the leading value for the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> over data flow arrow DF<highlight><bold>1</bold></highlight>. The technology object &ldquo;leading axis&rdquo; LA<highlight><bold>1</bold></highlight> may, for example, represent a positioning axis. However, the leading value may also be specified by a virtual axis, i.e., a calculated (not real) axis, or by using external sensors for the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight>. The technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> makes available gear synchronism or cam synchronism as the technological functionality, so that increasing synchronization and decreasing synchronization as well as master switching can be performed. A gear or cam may optionally be selected as the law of synchronism on the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight>. The right part of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows these selection options. Allocation arrow ALA<highlight><bold>1</bold></highlight> shows that switch S<highlight><bold>1</bold></highlight> may optionally be connected to a gear, represented by gear factor GF<highlight><bold>1</bold></highlight>, or to technology object &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight>. In the case of a connection to the technology object &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight>, the data flow is from this technology object to the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> over data flow arrow DF<highlight><bold>3</bold></highlight>, switch S<highlight><bold>1</bold></highlight> and data flow arrow DF<highlight><bold>3</bold></highlight>&prime;. In the case of a connection to gear factor GF<highlight><bold>1</bold></highlight>, the data flow is to the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> over switch S<highlight><bold>1</bold></highlight> and data flow arrow DF<highlight><bold>3</bold></highlight>&prime;. Linear gear transmission ratios cannot be set on the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> over technology object &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight>, but linear gear transmission ratios can be set over gear factor GF<highlight><bold>1</bold></highlight>. The technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight> is interleaved with the technology object &ldquo;following axis&rdquo; FA<highlight><bold>1</bold></highlight> by data flow arrow DF<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> thus shows the basic configuration of technology objects for implementation of a synchronous functionality which may in turn be regarded and used as a (complex) technology object. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Interleaving of technology objects is specified in the configuration (design) phase. In the case of selection options, they are activated via the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) in run time, i.e., switching can be programmed in run time. In principle more than one &ldquo;synchronous object&rdquo; SY<highlight><bold>1</bold></highlight> can be connected to a &ldquo;following axis&rdquo; FA<highlight><bold>1</bold></highlight> by interleaving, thereby implementing superimposition of synchronous functions. The leading value for the &ldquo;synchronous object&rdquo; SY<highlight><bold>1</bold></highlight> may also be specified directly from the user program (FRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Furthermore, more than one technology object may be configured to supply this leading value. The current interleaving is in turn selected and activated in run time by commands in the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Moreover, it is possible to switch online between different technology objects &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight> and/or between different gear factors GF<highlight><bold>1</bold></highlight> by programming for the definition of the law of synchronism. A technology object &ldquo;cam plate&rdquo; CP<highlight><bold>1</bold></highlight> may be allocated to one or more technology objects &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight>. In addition, one or more synchronous connections can be configured from one technology object &ldquo;leading axis&rdquo; LA<highlight><bold>1</bold></highlight> via technology object &ldquo;synchronism&rdquo; SY<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a synchronous interconnection with switching options between different leading value sources and laws of synchronism in the form of an interleaving diagram. The technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> may receive leading values from the technology objects &ldquo;time&rdquo; T, &ldquo;virtual axis&rdquo; VA<highlight><bold>1</bold></highlight>, &ldquo;leading axis&rdquo; LA<highlight><bold>2</bold></highlight>, &ldquo;leading axis&rdquo; LA<highlight><bold>3</bold></highlight>, &ldquo;external sensor&rdquo; ES<highlight><bold>1</bold></highlight> and from a program value TV of the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Allocation arrow ALA<highlight><bold>2</bold></highlight> indicates that switch S<highlight><bold>2</bold></highlight> can establish different leading value connections for the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight>. &ldquo;Leading value interleaving&rdquo; with the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight> is achieved over one of data flows DF<highlight><bold>4</bold></highlight> through DF<highlight><bold>8</bold></highlight> and over switch S<highlight><bold>2</bold></highlight> and data flow DF<highlight><bold>12</bold></highlight>. The technology objects &ldquo;time&rdquo; T, &ldquo;virtual axis&rdquo; VA<highlight><bold>1</bold></highlight>, &ldquo;leading axis&rdquo; LA<highlight><bold>2</bold></highlight> and LA<highlight><bold>3</bold></highlight>, &ldquo;external sensor&rdquo; ES<highlight><bold>1</bold></highlight> and program value TV are potential masters for technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight>. Possible interleaving is designed, and a designed master can be selected in run time from the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Master switching is hereby possible. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The technology object &ldquo;virtual axis&rdquo; VA<highlight><bold>1</bold></highlight> does not represent a real axis but instead is a calculated axis. &ldquo;Virtual axes&rdquo; are characterized in that they can be commanded by commands and have a motion guide or interpretation, but do not have a control or a drive. The technology objects &ldquo;leading axis&rdquo; LA<highlight><bold>2</bold></highlight> and LA<highlight><bold>3</bold></highlight>, on the other hand, represent real axes. Real axes represent standard axes with drive, motor, sensor, and therefore they have a real actuator. The technology object &ldquo;external sensor&rdquo; ES<highlight><bold>1</bold></highlight> may also supply a leading value for the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight>. An &ldquo;external sensor&rdquo; ES<highlight><bold>1</bold></highlight> typically does not have an axis, and supplies information in a designable format. &ldquo;External sensors&rdquo; may be, for example, angle sensors on a press. Leading values for the technology object SY<highlight><bold>2</bold></highlight> can also be supplied by the technology object &ldquo;time&rdquo; T and by the program value TV. A technology object &ldquo;time&rdquo; supplies a leading value in the form of a time value or time factor, and a program value DV is designed as the leading value in the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Technology objects here are shown in the usual notation. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows that optionally a gear factor GF<highlight><bold>2</bold></highlight> or the technology objects &ldquo;cam plate&rdquo; CP<highlight><bold>2</bold></highlight> and CP<highlight><bold>3</bold></highlight> may be selected as the law of synchronism for the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight>. Allocation arrow ALA<highlight><bold>3</bold></highlight> shows that switch S<highlight><bold>3</bold></highlight> can be set optionally between technology objects CP<highlight><bold>2</bold></highlight>, CP<highlight><bold>3</bold></highlight> and gear factor GF<highlight><bold>1</bold></highlight>. &ldquo;Gear interleaving&rdquo; with the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>12</bold></highlight> then takes place over data flow arrows DF<highlight><bold>9</bold></highlight>, DF<highlight><bold>10</bold></highlight>, set switch S<highlight><bold>3</bold></highlight> and data flow arrow DF<highlight><bold>11</bold></highlight>. Switch connections S<highlight><bold>2</bold></highlight> and S<highlight><bold>3</bold></highlight> can be programmed in the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). The technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight> is connected to the technology object &ldquo;following axis&rdquo; FA<highlight><bold>2</bold></highlight> over data flow arrow DF<highlight><bold>13</bold></highlight>. The technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight> is thus designed to interleave at the slave end with technology object &ldquo;following axis&rdquo; FA<highlight><bold>2</bold></highlight>, which may represent a synchronous axis, for example. At the master end, the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>2</bold></highlight> is interleaved with a technology object so that a leading value is supplied. This leading value may also be specified directly from the user program (PRG, <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Thus, more than one technology object can be configured for supplying a leading value; the current interleaving is selected in run time over commands in the user program. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates interleaving of the technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight>. Technology objects are shown here in the usual notation. The technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight> supplies the functionality for performing a measurement task. Measurement tasks can be activated and parameterized for functions on the technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight>. The measured value is sent to technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight> over measurement input ME and data flow arrow DF<highlight><bold>14</bold></highlight>. Measurement input ME is shown as an ellipse. One measurement input ME can be interleaved with multiple technology objects &ldquo;probes.&rdquo; These technology objects &ldquo;probes&rdquo; can also be activated simultaneously. A measurement input ME usually corresponds to a hardware measurement input assigned by configuration to technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight>. In addition, technology object &ldquo;probe&rdquo; PR<highlight><bold>1</bold></highlight> is interleaved with at least one technology object that supplies a measured value (e.g., a position). <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows the technology object &ldquo;probe&rdquo; MT <highlight><bold>1</bold></highlight> interleaved with the technology objects &ldquo;axis&rdquo; A<highlight><bold>1</bold></highlight> and &ldquo;external sensor&rdquo; ES<highlight><bold>2</bold></highlight> over data flow arrows DF<highlight><bold>15</bold></highlight> and DF<highlight><bold>16</bold></highlight>. The technology object &ldquo;axis&rdquo; A<highlight><bold>1</bold></highlight> may be, for example, a positioning axis or a synchronous axis. A technology object which supplies a measured value can be interleaved with multiple technology objects &ldquo;probes.&rdquo;</paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an interleaving diagram wherein the technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> is interleaved with technology objects &ldquo;axis&rdquo; A<highlight><bold>2</bold></highlight> and &ldquo;external sensor&rdquo; ES<highlight><bold>3</bold></highlight>. Technology object &ldquo;axis&rdquo; A<highlight><bold>2</bold></highlight> is interleaved with technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> over data flow arrow DF<highlight><bold>17</bold></highlight>, and technology object &ldquo;external sensor&rdquo; ES<highlight><bold>3</bold></highlight> is interleaved with technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> over data flow arrow DF<highlight><bold>18</bold></highlight>. Technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> is interleaved with the output Out over data flow arrow DF<highlight><bold>19</bold></highlight>, and output Out is shown as an ellipse. Technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> supplies the functionality for calculation of cam switching values. Cam functions can be activated and parameterized via the functions on the technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight>. Technology objects &ldquo;axis&rdquo; A<highlight><bold>2</bold></highlight> and &ldquo;external sensor&rdquo; ES<highlight><bold>3</bold></highlight> supply reference values for technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight>. The user designs the allocation of these technology objects to technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight>. The user also designs the allocation of technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> to an output Out, and allocation to internal variables is also possible. For a current application, technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> is interleaved with precisely one technology object supplying the reference value. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> A reference value may be an axial position, for example. Technology object &ldquo;axis&rdquo; A<highlight><bold>2</bold></highlight> here may represent a positioning axis or a synchronous axis, for example. This makes it possible to omit an allocation of technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> to an output Out; then the technology object &ldquo;cam&rdquo; C<highlight><bold>1</bold></highlight> acts only on system variables on the technology object (e.g., for use of the technology object as an internal cam). The technology object supplying the reference value may also be interleaved with multiple, including different, technology objects cams at the same time. Technology objects are shown here in the usual notation. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows that a technology object &ldquo;following axis&rdquo; FA<highlight><bold>3</bold></highlight> may be interleaved with multiple technology objects &ldquo;synchronism&rdquo; SY<highlight><bold>3</bold></highlight> and SY<highlight><bold>4</bold></highlight>. Technology object &ldquo;following axis&rdquo; FA<highlight><bold>3</bold></highlight> is interleaved with technology object &ldquo;synchronism&rdquo; SY<highlight><bold>3</bold></highlight> by data flow arrow DF<highlight><bold>22</bold></highlight> and with the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>4</bold></highlight> over data flow arrow DF<highlight><bold>23</bold></highlight>. Technology objects &ldquo;synchronism&rdquo; SY<highlight><bold>3</bold></highlight> and SY<highlight><bold>4</bold></highlight> receive leading value inputs over data flow arrows DF<highlight><bold>20</bold></highlight> and DF<highlight><bold>21</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows that leading values for the respective synchronous interconnection may be supplied by different technology objects. For example, technology object &ldquo;axis&rdquo; A<highlight><bold>3</bold></highlight>, technology object &ldquo;virtual axis&rdquo; VA<highlight><bold>2</bold></highlight> or technology object &ldquo;external sensor&rdquo; ES<highlight><bold>4</bold></highlight> can supply the leading value for synchronous object SY<highlight><bold>3</bold></highlight>. Accordingly, the leading value for &ldquo;synchronous object&rdquo; SY<highlight><bold>4</bold></highlight> can be supplied by technology objects &ldquo;axis&rdquo; A<highlight><bold>4</bold></highlight>, &ldquo;virtual axis&rdquo; VA<highlight><bold>3</bold></highlight> or &ldquo;external sensor&rdquo; ES<highlight><bold>5</bold></highlight>. Thereafter, the technology objects &ldquo;axis&rdquo; A<highlight><bold>4</bold></highlight>, &ldquo;synchronism&rdquo; SY<highlight><bold>4</bold></highlight> and &ldquo;following axis&rdquo; FA<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, for example, form a synchronous interconnection. The user designs the desired interleaving in each case. A designed master (the master makes available the leading value for the synchronous interconnection) can be selected in run time from the user program, so that master switching is possible. The technology object &ldquo;following axis&rdquo; FA<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is the slave in synchronous interconnection. Technology objects are shown here in the usual notation. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows an interleaving diagram where the technology object &ldquo;cam plate&rdquo; CP<highlight><bold>3</bold></highlight> supplies the gear law for two &ldquo;synchronous objects&rdquo; SY<highlight><bold>5</bold></highlight> and SY<highlight><bold>6</bold></highlight> over data flow arrows DF<highlight><bold>26</bold></highlight> and DF<highlight><bold>27</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> thus shows two synchronous interconnections, each supplied with a common gear law by the same technology object &ldquo;cam plate&rdquo; CP<highlight><bold>3</bold></highlight>. Two synchronous interconnections are arranged at the right and left of the technology object &ldquo;cam plate&rdquo; CP<highlight><bold>3</bold></highlight>. The synchronous interconnection on the left is formed by technology object &ldquo;axis&rdquo; A<highlight><bold>5</bold></highlight>, which supplies the leading value and thus functions as the leading axis. This axis may be a positioning axis or a synchronous axis, for example. Technology object &ldquo;axis&rdquo; A<highlight><bold>5</bold></highlight> is connected to &ldquo;synchronous object&rdquo; SY<highlight><bold>5</bold></highlight> by data flow arrow DF<highlight><bold>24</bold></highlight>. The leading value is supplied over this data flow arrow DF<highlight><bold>24</bold></highlight>. On the slave side, the technology object &ldquo;synchronism&rdquo; SY<highlight><bold>5</bold></highlight> is connected to the technology object &ldquo;following axis&rdquo; FA<highlight><bold>4</bold></highlight> by data flow arrow DF<highlight><bold>25</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The synchronous interconnection on the right is formed by the technology objects &ldquo;axis&rdquo; A<highlight><bold>6</bold></highlight>, &ldquo;synchronism&rdquo; SY<highlight><bold>6</bold></highlight> and &ldquo;following axis&rdquo; FA<highlight><bold>5</bold></highlight>. &ldquo;Axis&rdquo; A<highlight><bold>6</bold></highlight> here corresponds to the leading axis and &ldquo;following axis&rdquo; FA<highlight><bold>5</bold></highlight> here represents a slave axis. Interleaving here takes place over data flow arrows DF<highlight><bold>28</bold></highlight> and DF<highlight><bold>29</bold></highlight>. Furthermore, configuration of one or more synchronous connections over synchronous objects is possible from a leading axis. Technology objects &ldquo;cam plates&rdquo; may be allocated to one or more synchronous objects. Assembly of the synchronous interconnection is designed by the user. Designed synchronous interconnections may in turn be represented as technology objects, and their functionality may be used again in other applications. Technology objects are shown here in the usual notation. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates the clustering of several technology objects into one technology package TP. Technology package TP is shown as a rectangle with the upper left corner clipped. The technology package TP contains technology objects &ldquo;cam&rdquo; C<highlight><bold>2</bold></highlight>, &ldquo;external sensor&rdquo; ES<highlight><bold>6</bold></highlight>, &ldquo;rpm axis&rdquo; RpmA, &ldquo;probe&rdquo; PR<highlight><bold>2</bold></highlight> and &ldquo;positioning axis&rdquo; PosA. Technology objects are shown here in the usual notation. Technology objects here do not represent instances, but instead they are technology object types. A technology package TP thus contains a collection of technology object types representing certain functionalities. Loading of the technology objects into the run time system of the controller, and thus the functional expansion of the controller, takes place through technology packages. A user can load certain technology packages TP, which in turn contain technology object types, into the run time system (RTS<highlight><bold>4</bold></highlight>, RTS<highlight><bold>5</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>) and thus can achieve technological scaling of the functionality of the controller. Furthermore, with appropriate allocation of technology object types, a functional structuring can be achieved through technology packages TP. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An industrial controller for technical processes (P), in particular for production machines, characterized in that 
<claim-text>a) the controller has a generally usable basic system, preferably neutral as to technology, for the basic functionality of the controller, </claim-text>
<claim-text>b) the technological functionality of the controller is made available via technology object types, </claim-text>
<claim-text>c) technological scaling is achieved with regard to the functionality of the controller through additionally loadable technology object types (TO<highlight><bold>1</bold></highlight>-TOn), and </claim-text>
<claim-text>d) object types are instantiated and selected by the user for the respective application in a customized manner. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. An industrial controller according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, characterized in that loading and distribution of the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) take place on hardware systems and/or run time systems of the same or different performance levels. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. An industrial controller according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, characterized in that loading and distribution of the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) take place on hardware systems and/or run time systems of the same or different performance levels within a project, where one project is based on data and/or programs of one or more control units. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the functionality of the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) is distributed to control units in equidistant communication in real time with clock synchronization. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the functionality of the controller can be expanded in a flexible manner through the loadability of any technology objects (TO<highlight><bold>1</bold></highlight>-TOn). </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) contain program interfaces and/or system variables and/or alarms. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) are integrated into a programming environment. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. An industrial controller according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, characterized in that a standard programming environment is used. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that feedback-free programming of one technology object (TO<highlight><bold>1</bold></highlight>-TOn) with respect to the other technology objects and with respect to the basic system of the controller is provided, unless feedback is explicitly programmed or designed. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that use of the technology objects (TO<highlight><bold>1</bold></highlight>-TOn) is neutral as to platform and hardware. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that technology objects (TO<highlight><bold>1</bold></highlight>-TOn) have hierarchical relationships and/or data flow relationships (DF<highlight><bold>1</bold></highlight>-DF<highlight><bold>29</bold></highlight>, DF<highlight><bold>3</bold></highlight>&prime;) with other technology objects (TO<highlight><bold>1</bold></highlight>-TOn) with regard to their functionality. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that elements such as axes (A<highlight><bold>1</bold></highlight>-A<highlight><bold>6</bold></highlight>), sensors (ES<highlight><bold>1</bold></highlight>-ES<highlight><bold>6</bold></highlight>), cams (C<highlight><bold>1</bold></highlight>, C<highlight><bold>2</bold></highlight>), probes (PR<highlight><bold>1</bold></highlight>, PR<highlight><bold>2</bold></highlight>), synchronism (SY<highlight><bold>1</bold></highlight>-SY<highlight><bold>6</bold></highlight>) and cam plates (CP<highlight><bold>1</bold></highlight>-CP<highlight><bold>3</bold></highlight>) are present as technology objects (TO<highlight><bold>1</bold></highlight>-TOn) for motion controllers in particular. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the technology object types can be clustered into technology packages (TP). </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the program is generated before the hardware platform is allocated. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the number of instantiations of technology object types can be adjusted flexibly. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the instances of technology object types are stored in a distributed manner on one or more control units. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. An industrial controller according to one of the preceding claims, characterized in that the commands of technology objects (TO<highlight><bold>1</bold></highlight>-TOn) are used synchronously or asynchronously. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method of creating an industrial controller, in particular for a certain application, characterized by the following successive steps: 
<claim-text>a) using a basic system (UMC-K) with a basic functionality which is preferably neutral as to technology, </claim-text>
<claim-text>b) selection and instantiation of the technology object types (TO<highlight><bold>1</bold></highlight>-TOn) relevant for the application and configuration of the resulting technology objects (TO<highlight><bold>1</bold></highlight>-TOn) in the engineering system ES, </claim-text>
<claim-text>c) loading the selected technology object types (TO<highlight><bold>1</bold></highlight>-TOn) into the run time system (RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>5</bold></highlight>), </claim-text>
<claim-text>d) loading and using the instantiated technology objects and the instantiation information in the run time system (RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>5</bold></highlight>), </claim-text>
<claim-text>e) creating the user programs (PRG) using instantiated technology objects (TO<highlight><bold>1</bold></highlight>-TOn), and </claim-text>
<claim-text>f) loading the user programs (PRG) into the run time system (RTS<highlight><bold>1</bold></highlight>-RTS<highlight><bold>5</bold></highlight>).</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004585A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004585A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004585A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004585A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004585A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004585A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004585A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004585A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004585A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004585A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004585A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
