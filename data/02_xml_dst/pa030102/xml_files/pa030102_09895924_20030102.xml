<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005403A1-20030102-D00000.TIF SYSTEM "US20030005403A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00001.TIF SYSTEM "US20030005403A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00002.TIF SYSTEM "US20030005403A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00003.TIF SYSTEM "US20030005403A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00004.TIF SYSTEM "US20030005403A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00005.TIF SYSTEM "US20030005403A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00006.TIF SYSTEM "US20030005403A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00007.TIF SYSTEM "US20030005403A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00008.TIF SYSTEM "US20030005403A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005403A1-20030102-D00009.TIF SYSTEM "US20030005403A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005403</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895924</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>716</class>
<subclass>018000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>716</class>
<subclass>002000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method for prototyping asynchronous circuits using synchronous devices</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ian</given-name>
<middle-name>W.</middle-name>
<family-name>Jones</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>PARK, VAUGHAN &amp; FLEMING LLP</name-1>
<name-2></name-2>
<address>
<address-1>508 SECOND STREET</address-1>
<address-2>SUITE 201</address-2>
<city>DAVIS</city>
<state>CA</state>
<postalcode>95616</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">One embodiment of the present invention provides a system that facilitates prototyping asynchronous circuits. The system first receives a design of an asynchronous circuit, which includes asynchronous cells. The system maps the asynchronous cells of the asynchronous circuit onto clocked synchronous cells within a logic array or programmable logic array device such as standard-cell gate-arrays and field-programmable gate-arrays. The mapping delays the generation of the asynchronous clock events until the next clock event, thus preserving the full functionality of the asynchronous circuit. The system then implements the mapped circuit on the synchronous device to perform the functions that are mapped from the asynchronous circuit. Finally, the system operates the synchronous device, and the results of operating the synchronous device are used to verify the design of the asynchronous circuit. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to prototyping electronic circuits. More particularly, the present invention relates to a method for prototyping asynchronous circuits using synchronous devices. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Digital circuit designers use a wide variety of tools and techniques to prototype circuits so that the circuit design can be evaluated prior to committing the circuits to a custom integrated circuit device. Among the prototyping devices used by digital circuit designers are field-programmable gate-arrays and standard cell gate-array devices. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Both field-programmable gate-arrays and standard cell gate-array devices are optimized for prototyping synchronous, or clocked, digital circuits. A typical logic element of these devices is a master-slave D-type flip-flop, which is clocked by a globally distributed clock signal. In use, the digital circuit designer couples these logic elements together through primitive logic elements such as and-gates and or-gates to implement a desired circuit configuration. Manufacturers of these prototyping devices provide tools for the digital designer that simplify the task of mapping the designed circuit into the prototyping device. These tools assist the circuit designer in mapping a circuit configuration onto the prototype device. The tools also have internal processes, which aid in minimizing delays on interconnecting wiring and for checking for timing constraint violations. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> There are, however, no equivalent devices and tools optimized for prototyping asynchronous, or unclocked, digital circuits. This leads designers of these asynchronous digital circuits to create a complete custom integrated circuit device, fabricate the device, and test the resulting device during the prototyping phase. The process of designing a custom integrated circuit device is a time-consuming manual process because of the lack of tools to aid this process. In addition, creating a custom integrated circuit device is a lengthy and expensive process leading to long delays for the designer trying to create a working asynchronous circuit. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In an attempt to overcome the drawbacks in prototyping asynchronous circuits, designers have attempted to map the circuits onto field-programmable gate-arrays using the available primitive logic elements to create the desired asynchronous circuit cells, such as set-reset (SR) flip-flops. Many asynchronous circuit cells rely on carefully managed delay constraints within the cells, while using more robust delay-tolerant or delay-insensitive communication techniques between the cells. Mapping such asynchronous cells onto standard cell gate-arrays and field-programmable gate-arrays has met with little success because the associated design tools expect the use of a clock signal that is not used in the asynchronous circuits. Furthermore, these design tools do not provide the designer with enough control over delays within the cell to ensure correct operation. These design tools often have sophisticated features that optimize logic between clocked storage elements, that because of the lack of the clock, asynchronous designs cannot take advantage of these features. When presented with an asynchronous design, these optimization tools usually make the circuit performance worse rather than better. Additionally, the resulting circuits do not use the resources of the field-programmable gate-array very efficiently because the primary storage elements available, such as master-slave D-type flip-flops that are normally operated by the globally distributed clock, cannot be used in the asynchronous cells. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Other techniques for prototyping asynchronous circuits using gate-arrays and/or field-programmable gate-arrays use completely different signaling protocols and circuit implementations in the clocked semi-custom gate-array technology than are used in the asynchronous full-custom design. The two designs are equivalent in function only and so an important feature of prototyping is lost, namely that the prototype circuit, built in some rapid turn-around technology, should resemble as much as possible the final circuit design to be implemented in full-custom technology. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> What is needed is a method of mapping an asynchronous circuit design onto a field-programmable gate-array or a standard cell device, which eliminates the problems described above. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> One embodiment of the present invention provides a system that facilitates prototyping asynchronous circuits where only a minimum of modifications are made to the circuit. The system first receives a design of an asynchronous circuit, which includes asynchronous cells. The system maps the asynchronous cells of the asynchronous circuit onto clocked synchronous cells within a logic array or programmable logic array device such as standard-cell gate-arrays and field-programmable gate-arrays. The mapping delays the generation of all asynchronous control events until the next clock event, thus preserving the full functionality of the asynchronous circuit. The system then programs the programmable synchronous device to perform the functions that are mapped from the asynchronous circuit. Finally, the system operates the programmable synchronous device, and the results of operating the programmable synchronous device are used to verify the design of the asynchronous circuit. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In one embodiment of the present invention, the programmable synchronous device includes a field-programmable gate-array. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In one embodiment of the present invention, the synchronous cell is taken from a standard cell library. A standard cell library is typically available in all forms of clocked semi-custom and custom integrated circuit design methods. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one embodiment of the present invention, the system maps an asynchronous cell to a synchronous cell by first mapping an SR flip-flop in a control path of the asynchronous cell to a clocked D-type master-slave flip-flop in the synchronous device. Next, the system maps a latch, a pass-gate, and a sticky-buffer combination in a data path of the asynchronous cell to another clocked D-type master-slave flip-flop in the synchronous device. The clocked D-type master-slave flip-flop in the control path indicates whether the clocked D-type master-slave flip-flop in the data path is empty or full, i.e., whether the data stored in the D-type master-slave flip-flop in the data path is non-valid or valid. The system maps a gated clock to the clocked D-type master-slave flip-flop in the control path. The system also maps a gated clock to the clocked D-type master-slave flip-flop in the data path. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In one embodiment of the present invention, the system passes the gated clock to the clocked D-type master-slave flip-flop in the control path when the clocked D-type master-slave flip-flop in the control path is set to empty and an input signal indicates that incoming data are valid, thereby changing the state of the clocked D-type master-slave flip-flop in the control path to full. The system also passes this gated clock to the clocked D-type master-slave flip-flop in the control path when the clocked D-type master-slave flip-flop in the control path is set to full and an input signal from the next synchronous cell indicates that a next synchronous cell is empty, thereby setting clocked D-type master-slave flip-flop in the control path to empty. The system passes the gated clock to the clocked D-type master-slave flip-flop in the data path when the clocked D-type master-slave flip-flop in the control path is set to empty and the input signal indicates that incoming data are valid, thereby latching the incoming data in the clocked D-type master-slave flip-flop in the data path. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In one embodiment of the present invention, the system maps an SR flip-flop in a control path of the asynchronous cell to a data recirculation flip-flop in the control path of the synchronous cell. The system also maps a latch, a pass-gate, and a sticky-buffer combination in a data path of the asynchronous cell to another data recirculation flip-flop in the data path of the synchronous cell. The state of the data recirculation flip-flop in the control path indicates whether the data recirculation flip-flop in the data path is empty or full. The system maps a recirculation control signal to the data recirculation flip-flop in the control path. The system also maps a recirculation control signal to the data recirculation flip-flop in the data path. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In one embodiment of the present invention, the system sets the recirculation control signal applied to the data recirculation flip-flop in the control path to change a state of this data recirculation flip-flop when the data recirculation flip-flop is set to empty and the input signal indicates that incoming data are valid. The system also sets the recirculation control signal applied to the data recirculation flip-flop in the control path to change the state of this data recirculation flip-flop when the data recirculation flip-flop is set to full and an input signal indicates that a next synchronous cell is empty. The system sets the recirculation control signal applied to the data recirculation flip-flop in the data path to allow the incoming data value to set the state of the data recirculation flip-flop in the data path when the data recirculation flip-flop in the control path is set to empty and the input signal indicates that incoming data are valid. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In one embodiment of the present invention, the system maps an SR flip-flop in a control path of the asynchronous cell to a data recirculation cell in the control path of the synchronous cell. In this embodiment, the data recirculation cell in the control path includes an additional clocked D-type master-slave flip-flop to extend the data recirculation control signal. The system maps a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a data recirculation flip-flop in the data path of the synchronous cell. The data recirculation cell in the control path indicates whether the data recirculation flip-flop in the data path is empty or full. The system maps a recirculation control signal to the data recirculation cell in the control path. The system also maps a recirculation control signal to the data recirculation flip-flop in the data path. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In one embodiment of the present invention, the system sets the recirculation control signal applied to the data recirculation cell in the control path to change a state of this data recirculation cell when the data recirculation cell is set to empty and an input signal indicates that incoming data are valid. The system also sets this recirculation control signal to change the state of the data recirculation cell when the data recirculation cell is set to full and another input signal indicates that a next synchronous cell is empty. The system sets the recirculation control signal applied to the data recirculation flip-flop in the data path to allow the incoming data value to set the state of the data recirculation flip-flop.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE FIGURES </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an asynchronous circuit to be prototyped in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> illustrates sticky buffer <highlight><bold>112</bold></highlight> in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated clocks in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using data recirculation flip-flops in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using data recirculation flip-flops with the control state change after the falling edge of the clock signal in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated clocks with the control state change after the falling edge of the gated clock signal in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated-inverted clocks in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> illustrates an alternate implementation of a clocked SR flip-flop in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> illustrates a GasP asynchronous control circuit to be prototyped in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0028" lvl="7"><number>&lsqb;0028&rsqb;</number> A Clocked Version of a GasP Control Circuit </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> illustrates a clocked version of a GasP asynchronous control circuit in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating the process of mapping an asynchronous circuit to a clocked synchronous device to verify the design of the asynchronous circuit in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates adding D-type flip-flops to delay move events in accordance with an embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The data structures and code described in this detailed description are typically stored on a computer readable storage medium, which may be any device or medium that can store code and/or data for use by a computer system. This includes, but is not limited to, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs) and DVDs (digital versatile discs or digital video discs), and computer instruction signals embodied in a transmission medium (with or without a carrier wave upon which the signals are modulated). For example, the transmission medium may include a communications network, such as the Internet. </paragraph>
<paragraph id="P-0034" lvl="7"><number>&lsqb;0034&rsqb;</number> An Asynchronous FIFO Example Circuit </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an asynchronous circuit to be prototyped in accordance with an embodiment of the present invention. This example asynchronous circuit implements a first-in, first-out (FIFO) data buffer. The asynchronous circuit includes two stages of pipelined asynchronous cells. SR flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> are the control elements for stage one and stage two respectively. Normally-opaque pass-gates <highlight><bold>108</bold></highlight> and <highlight><bold>120</bold></highlight> control propagation of data into sticky-buffers <highlight><bold>112</bold></highlight> and <highlight><bold>124</bold></highlight> respectively, while normally-opaque pass-gate <highlight><bold>134</bold></highlight> controls propagation of data out of sticky-buffer <highlight><bold>124</bold></highlight>. The combination of pass-gate <highlight><bold>108</bold></highlight> and sticky-buffer <highlight><bold>112</bold></highlight> forms a latch. A sticky buffer is a buffer circuit with weak feedback so that is has storage. <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> illustrates a typical sticky buffer <highlight><bold>112</bold></highlight> implementation. Inverters <highlight><bold>150</bold></highlight> and <highlight><bold>154</bold></highlight> form the normal path through the sticky buffer, while small inverter <highlight><bold>152</bold></highlight> provides weak feedback to inverter <highlight><bold>150</bold></highlight>. And-gates <highlight><bold>106</bold></highlight>, <highlight><bold>118</bold></highlight>, and <highlight><bold>132</bold></highlight> provide move signals <highlight><bold>117</bold></highlight>, <highlight><bold>130</bold></highlight>, and <highlight><bold>138</bold></highlight> respectively, which move data through stage one and stage two. There is nothing inherent that limits this invention to a single data path associated with the control path or to only two stages. A person of ordinary skill in the art can readily add additional data paths and additional stages. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to SR flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> setting flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> to empty. In this state, empty signals <highlight><bold>114</bold></highlight> and <highlight><bold>126</bold></highlight> are set to true, while full signals <highlight><bold>116</bold></highlight> and <highlight><bold>128</bold></highlight> are set to false. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In operation the system applies incoming data <highlight><bold>102</bold></highlight> to normally-opaque pass-gate <highlight><bold>108</bold></highlight>. Normally-opaque pass-gate <highlight><bold>108</bold></highlight> blocks incoming data <highlight><bold>102</bold></highlight> until move signal <highlight><bold>117</bold></highlight> is applied to normally-opaque pass-gate <highlight><bold>108</bold></highlight>. Next, the system applies data valid <highlight><bold>104</bold></highlight> to and-gate <highlight><bold>106</bold></highlight>. Incoming data <highlight><bold>102</bold></highlight> and data valid <highlight><bold>104</bold></highlight> are bundled such that data valid <highlight><bold>104</bold></highlight> is not applied until incoming data <highlight><bold>102</bold></highlight> is valid. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> And-gate <highlight><bold>106</bold></highlight> sets move signal <highlight><bold>117</bold></highlight> to true in response to both data valid <highlight><bold>104</bold></highlight> and empty signal <highlight><bold>114</bold></highlight> from SR flip-flop <highlight><bold>110</bold></highlight> being true. Move signal <highlight><bold>117</bold></highlight> has three functions. First, move signal <highlight><bold>117</bold></highlight> causes normally-opaque pass-gate <highlight><bold>108</bold></highlight> to become transparent, thereby passing incoming data <highlight><bold>102</bold></highlight> to sticky-buffer <highlight><bold>112</bold></highlight>. Second, move signal <highlight><bold>117</bold></highlight> causes SR flip-flop <highlight><bold>110</bold></highlight> to change state to full. Changing the state of SR flip-flop <highlight><bold>110</bold></highlight> to full causes empty signal <highlight><bold>114</bold></highlight> to go to false while full signal <highlight><bold>116</bold></highlight> goes to true. Additionally, move signal <highlight><bold>117</bold></highlight> is passed to the system to inform the system that incoming data <highlight><bold>102</bold></highlight> has been latched into sticky-buffer <highlight><bold>112</bold></highlight>. And-gate <highlight><bold>106</bold></highlight> sets move signal <highlight><bold>117</bold></highlight> to false in response to empty signal <highlight><bold>114</bold></highlight> being set to false. Setting move signal <highlight><bold>117</bold></highlight> to false returns pass-gate <highlight><bold>108</bold></highlight> to its normally-opaque state. Sticky-buffer <highlight><bold>112</bold></highlight> now holds the state of incoming data <highlight><bold>102</bold></highlight> and SR flip-flop <highlight><bold>110</bold></highlight> indicates that sticky-buffer <highlight><bold>112</bold></highlight> is full. Normally-opaque pass-gate <highlight><bold>120</bold></highlight> prevents output <highlight><bold>129</bold></highlight> of sticky-buffer <highlight><bold>112</bold></highlight> from being applied to sticky-buffer <highlight><bold>124</bold></highlight> in stage two. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> And-gate <highlight><bold>118</bold></highlight> sets move signal <highlight><bold>130</bold></highlight> to true in response to both full signal <highlight><bold>116</bold></highlight> from SR flip-flop <highlight><bold>110</bold></highlight> and empty signal <highlight><bold>126</bold></highlight> from SR flip-flop <highlight><bold>122</bold></highlight> being true. Move signal <highlight><bold>130</bold></highlight> has three functions. First, move signal <highlight><bold>130</bold></highlight> causes normally-opaque pass-gate <highlight><bold>120</bold></highlight> to become transparent, thereby passing output <highlight><bold>129</bold></highlight> from sticky-buffer <highlight><bold>112</bold></highlight> to sticky-buffer <highlight><bold>124</bold></highlight>. Second, move signal <highlight><bold>130</bold></highlight> causes SR flip-flop <highlight><bold>122</bold></highlight> to change state to full. Changing the state of SR flip-flop <highlight><bold>122</bold></highlight> to full causes empty signal <highlight><bold>126</bold></highlight> to go to false while full signal <highlight><bold>128</bold></highlight> goes to true. Additionally, move signal <highlight><bold>130</bold></highlight> causes SR flip-flop <highlight><bold>110</bold></highlight> to change state to empty. And-gate <highlight><bold>118</bold></highlight> sets move signal <highlight><bold>130</bold></highlight> to false in response to empty signal <highlight><bold>126</bold></highlight> being set to false or full signal <highlight><bold>116</bold></highlight> being set to false. Setting move signal <highlight><bold>130</bold></highlight> to false returns pass-gate <highlight><bold>120</bold></highlight> to its normally-opaque state. Sticky-buffer <highlight><bold>124</bold></highlight> now holds the state of output <highlight><bold>129</bold></highlight> from sticky-buffer <highlight><bold>112</bold></highlight> and SR flip-flop <highlight><bold>122</bold></highlight> indicates that sticky-buffer <highlight><bold>124</bold></highlight> is full. SR flip-flop <highlight><bold>110</bold></highlight> sets empty signal <highlight><bold>114</bold></highlight> to true thereby enabling stage one to accept new data. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Full signal <highlight><bold>128</bold></highlight>, empty signal <highlight><bold>136</bold></highlight>, and-gate <highlight><bold>132</bold></highlight>, move signal <highlight><bold>138</bold></highlight> and pass-gate <highlight><bold>134</bold></highlight> operate in a similar manner to move output <highlight><bold>140</bold></highlight> to an additional pipeline stage of the pipelined asynchronous circuit. </paragraph>
<paragraph id="P-0041" lvl="7"><number>&lsqb;0041&rsqb;</number> A Clocked Implementation of this Asynchronous FIFO Example Circuit </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated clocks in accordance with an embodiment of the present invention. In this embodiment, clocked D-type master-slave flip-flops <highlight><bold>208</bold></highlight> and <highlight><bold>230</bold></highlight> perform the control functions of SR flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively, while clocked D-type master-slave flip-flops <highlight><bold>216</bold></highlight> and <highlight><bold>238</bold></highlight> perform the functions of pass-gate <highlight><bold>108</bold></highlight> paired with sticky-buffer <highlight><bold>112</bold></highlight>, and pass-gate <highlight><bold>120</bold></highlight> paired with sticky-buffer <highlight><bold>124</bold></highlight> respectively. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to clocked D-type master-slave flip-flops <highlight><bold>208</bold></highlight> and <highlight><bold>230</bold></highlight> to set full signals <highlight><bold>226</bold></highlight> and <highlight><bold>246</bold></highlight> respectively to false. The global reset signal may also be applied to clocked D-type master-slave flip-flops <highlight><bold>216</bold></highlight> and <highlight><bold>238</bold></highlight>. Inverters <highlight><bold>218</bold></highlight> and <highlight><bold>240</bold></highlight> invert full signals <highlight><bold>226</bold></highlight> and <highlight><bold>246</bold></highlight> to create empty signals <highlight><bold>220</bold></highlight> and <highlight><bold>242</bold></highlight> respectively. At reset, empty signals <highlight><bold>220</bold></highlight> and <highlight><bold>242</bold></highlight> are both set to true. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In operation, the system applies incoming data <highlight><bold>202</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> in the data path. Next, the system applies data valid <highlight><bold>204</bold></highlight> to and-gate <highlight><bold>206</bold></highlight>. Incoming data <highlight><bold>202</bold></highlight> and data valid <highlight><bold>204</bold></highlight> are bundled such that data valid <highlight><bold>204</bold></highlight> is not applied until incoming data <highlight><bold>202</bold></highlight> is valid. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> And-gate <highlight><bold>206</bold></highlight> sets move signal <highlight><bold>222</bold></highlight> to true in response to both data valid <highlight><bold>204</bold></highlight> and empty signal <highlight><bold>220</bold></highlight> from inverter <highlight><bold>218</bold></highlight> being true. Move signal <highlight><bold>222</bold></highlight> has three functions. First, move signal <highlight><bold>222</bold></highlight> is applied to and-gate <highlight><bold>214</bold></highlight> to control the clock signal applied to clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight>. Second, move signal <highlight><bold>222</bold></highlight> is applied to or-gate <highlight><bold>212</bold></highlight>. Or-gate <highlight><bold>212</bold></highlight> sets signal <highlight><bold>213</bold></highlight> to true in response to move signal <highlight><bold>222</bold></highlight> being true. Signal <highlight><bold>213</bold></highlight> from or-gate <highlight><bold>212</bold></highlight> is, in turn, applied to and-gate <highlight><bold>210</bold></highlight> to control the clock signal applied to clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight>. Additionally, move signal <highlight><bold>222</bold></highlight> is passed to the system to inform the system that incoming data <highlight><bold>202</bold></highlight> will be latched into clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> on the next clock signal <highlight><bold>224</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Upon application of the next clock signal <highlight><bold>224</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> changes state to full and clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> changes data signal <highlight><bold>243</bold></highlight> to reflect the state of incoming data <highlight><bold>202</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> to full causes full signal <highlight><bold>226</bold></highlight> to go to true while inverter <highlight><bold>218</bold></highlight> causes empty signal <highlight><bold>220</bold></highlight> to go to false. And-gate <highlight><bold>206</bold></highlight> sets move signal <highlight><bold>222</bold></highlight> to false in response to empty signal <highlight><bold>220</bold></highlight> being set to false. Setting move signal <highlight><bold>222</bold></highlight> to false causes and-gates <highlight><bold>214</bold></highlight> and <highlight><bold>210</bold></highlight> to block clock signal <highlight><bold>224</bold></highlight>, thereby preventing further changes to clocked D-type master-slave flip-flops <highlight><bold>208</bold></highlight> and <highlight><bold>216</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> now holds the state of incoming data <highlight><bold>202</bold></highlight> and clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> indicates that clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> is full. Data signal <highlight><bold>243</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>216</bold></highlight> is applied to clocked D-type master-slave flip-flop <highlight><bold>238</bold></highlight> in stage two. Note that the operation of this circuit is almost identical to the operation of the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> with the difference being that the state of the flip-flops does not change until the next clock signal in this embodiment. This allows the control to operate asynchronously but with the granularity of the global clock. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> And-gate <highlight><bold>228</bold></highlight> causes move signal <highlight><bold>244</bold></highlight> to be set to true in response to full signal <highlight><bold>226</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> and empty signal <highlight><bold>242</bold></highlight> from inverter <highlight><bold>240</bold></highlight> being true. Move signal <highlight><bold>244</bold></highlight> has three functions. First, move signal <highlight><bold>244</bold></highlight> is applied to and-gate <highlight><bold>236</bold></highlight> to control the application of clock signal <highlight><bold>224</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>238</bold></highlight>. Second, move signal <highlight><bold>244</bold></highlight> is applied to or-gate <highlight><bold>234</bold></highlight>, which sets signal <highlight><bold>235</bold></highlight> to true. Signal <highlight><bold>235</bold></highlight> controls the application of clock signal <highlight><bold>224</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>230</bold></highlight>. Additionally, move signal <highlight><bold>244</bold></highlight> is applied to or-gate <highlight><bold>212</bold></highlight>, which sets signal <highlight><bold>213</bold></highlight> to true which, in turn, is applied to and-gate <highlight><bold>210</bold></highlight> to control clock signal <highlight><bold>224</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Upon application of the next clock signal <highlight><bold>224</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> changes state to empty, clocked D-type master-slave flip-flop <highlight><bold>230</bold></highlight> changes state to full, and clocked D-type master-slave flip-flop <highlight><bold>238</bold></highlight> latches the state of data signal <highlight><bold>243</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>208</bold></highlight> to empty causes full signal <highlight><bold>226</bold></highlight> to be set to false. Inverter <highlight><bold>218</bold></highlight> sets empty signal <highlight><bold>220</bold></highlight> to true, which will allow new data to be entered into stage one. The state of clocked D-type master-slave flip-flop <highlight><bold>230</bold></highlight> changes the state of full signal <highlight><bold>246</bold></highlight> to true. Inverter <highlight><bold>240</bold></highlight> sets empty signal <highlight><bold>242</bold></highlight> to false in response to full signal <highlight><bold>246</bold></highlight> being set to true. And-gate <highlight><bold>228</bold></highlight> sets move signal <highlight><bold>244</bold></highlight> to false, thereby blocking clock signal <highlight><bold>224</bold></highlight> from reaching clocked D-type master-slave flip-flops <highlight><bold>208</bold></highlight>, <highlight><bold>230</bold></highlight>, and <highlight><bold>238</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Empty signal <highlight><bold>252</bold></highlight>, move signal <highlight><bold>250</bold></highlight>, and signal <highlight><bold>235</bold></highlight> operate in a similar manner to move data <highlight><bold>254</bold></highlight> to the next pipelined stage in the synchronous circuit. </paragraph>
<paragraph id="P-0050" lvl="7"><number>&lsqb;0050&rsqb;</number> A Second Clocked Implementation of this Asynchronous FIFO Circuit </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using data recirculation flip-flops in accordance with an embodiment of the present invention. In this embodiment, clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight> and <highlight><bold>338</bold></highlight> perform the control functions of SR flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively, while clocked D-type master-slave flip-flops <highlight><bold>318</bold></highlight> and <highlight><bold>342</bold></highlight> perform the functions of pass-gate <highlight><bold>108</bold></highlight> paired with sticky-buffer <highlight><bold>112</bold></highlight>, and pass-gate <highlight><bold>120</bold></highlight> paired with sticky-buffer <highlight><bold>124</bold></highlight> respectively. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight> and <highlight><bold>338</bold></highlight> to set full signals <highlight><bold>320</bold></highlight> and <highlight><bold>344</bold></highlight> respectively to false. The global reset signal may also be applied to clocked D-type master-slave flip-flops <highlight><bold>318</bold></highlight> and <highlight><bold>342</bold></highlight>. Inverters <highlight><bold>308</bold></highlight> and <highlight><bold>332</bold></highlight> invert full signals <highlight><bold>320</bold></highlight> and <highlight><bold>344</bold></highlight> to create empty signals <highlight><bold>322</bold></highlight> and <highlight><bold>346</bold></highlight> respectively. At reset, empty signals <highlight><bold>322</bold></highlight> and <highlight><bold>346</bold></highlight> are both set to true. Prior to data valid <highlight><bold>304</bold></highlight> being applied, multiplexers <highlight><bold>310</bold></highlight>, <highlight><bold>316</bold></highlight>, <highlight><bold>334</bold></highlight>, and <highlight><bold>340</bold></highlight> are set to recirculate the values stored in clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight>, <highlight><bold>318</bold></highlight>, <highlight><bold>338</bold></highlight>, and <highlight><bold>342</bold></highlight> respectively in response to clock signal <highlight><bold>328</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In operation, the system applies incoming data <highlight><bold>302</bold></highlight> to an input of multiplexer <highlight><bold>316</bold></highlight> in the data path. Next, the system applies data valid <highlight><bold>304</bold></highlight> to and-gate <highlight><bold>306</bold></highlight>. Incoming data <highlight><bold>302</bold></highlight> and data valid <highlight><bold>304</bold></highlight> are bundled such that data valid <highlight><bold>304</bold></highlight> is not applied until incoming data <highlight><bold>302</bold></highlight> is valid. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> And-gate <highlight><bold>306</bold></highlight> sets move signal <highlight><bold>324</bold></highlight> to true in response to both data valid <highlight><bold>304</bold></highlight> and empty signal <highlight><bold>322</bold></highlight> being true. Move signal <highlight><bold>324</bold></highlight> has three functions. First, move signal <highlight><bold>324</bold></highlight> is applied to multiplexer <highlight><bold>316</bold></highlight>, which applies incoming data <highlight><bold>302</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight>. Second, move signal <highlight><bold>324</bold></highlight> is applied to or-gate <highlight><bold>312</bold></highlight>. Or-gate <highlight><bold>312</bold></highlight> sets signal <highlight><bold>313</bold></highlight> to true in response to move signal <highlight><bold>324</bold></highlight>. Signal <highlight><bold>313</bold></highlight> is applied to multiplexer <highlight><bold>310</bold></highlight>, which applies empty signal <highlight><bold>322</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight>. Additionally, move signal <highlight><bold>324</bold></highlight> is sent to the system to inform the system that incoming data <highlight><bold>302</bold></highlight> will be latched in clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight> at the next clock signal <highlight><bold>328</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Upon application of the next clock signal <highlight><bold>328</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> changes state to full and clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight> changes data signal <highlight><bold>326</bold></highlight> to reflect incoming data <highlight><bold>302</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> to full causes full signal <highlight><bold>320</bold></highlight> to go to true while inverter <highlight><bold>308</bold></highlight> causes empty signal <highlight><bold>322</bold></highlight> to go to false. And-gate <highlight><bold>306</bold></highlight> sets move signal <highlight><bold>324</bold></highlight> to false in response to empty signal <highlight><bold>322</bold></highlight> being set to false. Setting move signal <highlight><bold>324</bold></highlight> to false causes multiplexers <highlight><bold>310</bold></highlight> and <highlight><bold>316</bold></highlight> to select recirculation for clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight> and <highlight><bold>318</bold></highlight>, thereby preventing further changes to clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight> and <highlight><bold>318</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight> now holds the state of incoming data <highlight><bold>302</bold></highlight> and clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> indicates that clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight> is full. Data signal <highlight><bold>326</bold></highlight> of clocked D-type master-slave flip-flop <highlight><bold>318</bold></highlight> is applied to multiplexer <highlight><bold>340</bold></highlight> in stage two. Note that the operation of this circuit is almost identical to the operation of the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> with the difference being that the state of the flip-flops does not change until the next clock signal in this embodiment. This allows the control to operate asynchronously but with the granularity of the global clock. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> And-gate <highlight><bold>330</bold></highlight> causes move signal <highlight><bold>348</bold></highlight> to be set to true in response to full signal <highlight><bold>320</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> and empty signal <highlight><bold>346</bold></highlight> from inverter <highlight><bold>332</bold></highlight> being true. Move signal <highlight><bold>348</bold></highlight> has three functions. First, move signal <highlight><bold>348</bold></highlight> is applied to multiplexer <highlight><bold>340</bold></highlight> to select data signal <highlight><bold>326</bold></highlight> to apply to the D input of clocked D-type master-slave flip-flop <highlight><bold>342</bold></highlight>. Second, move signal <highlight><bold>348</bold></highlight> is applied to or-gate <highlight><bold>336</bold></highlight>, which sets signal <highlight><bold>337</bold></highlight> to true in response. Control signal <highlight><bold>337</bold></highlight>, in turn, is applied to multiplexer <highlight><bold>334</bold></highlight> to pass empty signal <highlight><bold>346</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>338</bold></highlight>. Additionally, move signal <highlight><bold>348</bold></highlight> is applied to or-gate <highlight><bold>312</bold></highlight>. The output of or-gate <highlight><bold>312</bold></highlight>, signal <highlight><bold>313</bold></highlight>, is applied to multiplexer <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Upon application of the next clock signal <highlight><bold>328</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> changes state to empty, clocked D-type master-slave flip-flop <highlight><bold>338</bold></highlight> changes state to full, and clocked D-type master-slave flip-flop <highlight><bold>342</bold></highlight> latches the state of data signal <highlight><bold>326</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>314</bold></highlight> to empty causes full signal <highlight><bold>320</bold></highlight> to be set to false. Inverter <highlight><bold>308</bold></highlight> sets empty signal <highlight><bold>322</bold></highlight> to true, which will allow new data to be entered into stage one. The state of clocked D-type master-slave flip-flop <highlight><bold>338</bold></highlight> changes the state of full signal <highlight><bold>344</bold></highlight> to true. Inverter <highlight><bold>332</bold></highlight> sets empty signal <highlight><bold>346</bold></highlight> to false in response to full signal <highlight><bold>344</bold></highlight> being set to true. And-gate <highlight><bold>330</bold></highlight> sets move signal <highlight><bold>348</bold></highlight> to false, thereby setting multiplexers <highlight><bold>310</bold></highlight>, <highlight><bold>334</bold></highlight>, and <highlight><bold>340</bold></highlight> to recirculate the values stored in clocked D-type master-slave flip-flops <highlight><bold>314</bold></highlight>, <highlight><bold>338</bold></highlight>, and <highlight><bold>342</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Empty signal <highlight><bold>356</bold></highlight>, move signal <highlight><bold>354</bold></highlight>, and signal <highlight><bold>337</bold></highlight> operate in a similar manner to move data <highlight><bold>350</bold></highlight> to the next pipelined stage in the synchronous circuit. </paragraph>
<paragraph id="P-0059" lvl="7"><number>&lsqb;0059&rsqb;</number> A Third Clocked Implementation of this Asynchronous FIFO Circuit </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using data recirculation flip-flops with the control state change after the falling edge of the clock signal in accordance with an embodiment of the present invention. In this embodiment, clocked D-type master-slave flip-flop pair <highlight><bold>412</bold></highlight> and <highlight><bold>414</bold></highlight> perform the control functions of SR flip-flop <highlight><bold>110</bold></highlight> while clocked D-type master-slave flip-flop pair <highlight><bold>444</bold></highlight> and <highlight><bold>446</bold></highlight> perform the control functions of SR flip-flop <highlight><bold>122</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively. Clocked D-type master-slave flip-flops <highlight><bold>420</bold></highlight> and <highlight><bold>452</bold></highlight> perform the functions of pass-gate <highlight><bold>108</bold></highlight> paired with sticky-buffer <highlight><bold>112</bold></highlight>, and pass-gate <highlight><bold>120</bold></highlight> paired with sticky-buffer <highlight><bold>124</bold></highlight> respectively. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight>, <highlight><bold>444</bold></highlight>, and <highlight><bold>446</bold></highlight> to set full signal <highlight><bold>422</bold></highlight>, delayed full signal <highlight><bold>426</bold></highlight>, full signal <highlight><bold>454</bold></highlight> and delayed full signal <highlight><bold>458</bold></highlight> respectively to false. The global reset signal may also be applied to clocked D-type master-slave flip-flops <highlight><bold>420</bold></highlight> and <highlight><bold>452</bold></highlight>. Inverters <highlight><bold>416</bold></highlight> and <highlight><bold>448</bold></highlight> invert delayed full signals <highlight><bold>426</bold></highlight> and <highlight><bold>458</bold></highlight> to create empty signals <highlight><bold>424</bold></highlight> and <highlight><bold>456</bold></highlight> respectively. At reset, empty signals <highlight><bold>424</bold></highlight> and <highlight><bold>456</bold></highlight> are both set to true. Prior to data valid <highlight><bold>404</bold></highlight> being applied, multiplexers <highlight><bold>408</bold></highlight>, <highlight><bold>418</bold></highlight>, <highlight><bold>440</bold></highlight>, and <highlight><bold>450</bold></highlight> are set to recirculate the values stored in clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight>, <highlight><bold>420</bold></highlight>, <highlight><bold>444</bold></highlight>, and <highlight><bold>452</bold></highlight> respectively in response to clock signal <highlight><bold>434</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In operation, the system applies incoming data <highlight><bold>402</bold></highlight> to an input of multiplexer <highlight><bold>418</bold></highlight> in the data path. Next, the system applies data valid <highlight><bold>404</bold></highlight> to and-gate <highlight><bold>406</bold></highlight>. Incoming data <highlight><bold>402</bold></highlight> and data valid <highlight><bold>404</bold></highlight> are bundled such that data valid <highlight><bold>404</bold></highlight> is not applied until incoming data <highlight><bold>402</bold></highlight> is valid. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> And-gate <highlight><bold>406</bold></highlight> sets move signal <highlight><bold>428</bold></highlight> to true in response to both data valid <highlight><bold>404</bold></highlight> and empty signal <highlight><bold>424</bold></highlight> being true. Move signal <highlight><bold>428</bold></highlight> has three functions. First, move signal <highlight><bold>428</bold></highlight> is applied to multiplexer <highlight><bold>418</bold></highlight>, which applies incoming data <highlight><bold>402</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight>. Second, move signal <highlight><bold>428</bold></highlight> is applied to or-gate <highlight><bold>410</bold></highlight>. Or-gate <highlight><bold>410</bold></highlight> sets signal <highlight><bold>430</bold></highlight> to true in response to move signal <highlight><bold>428</bold></highlight>. Signal <highlight><bold>430</bold></highlight> is applied to multiplexer <highlight><bold>408</bold></highlight>, which applies empty signal <highlight><bold>424</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>412</bold></highlight>. Additionally, move signal <highlight><bold>428</bold></highlight> is sent to the system to inform the system that incoming data <highlight><bold>402</bold></highlight> will be latched in clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> at the next clock signal <highlight><bold>434</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Upon application of the next clock signal <highlight><bold>434</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>412</bold></highlight> changes state to full and clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> changes data signal <highlight><bold>432</bold></highlight> to reflect incoming data <highlight><bold>402</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>412</bold></highlight> to full causes full signal <highlight><bold>422</bold></highlight> to go to true. The alternate edge of clock signal <highlight><bold>434</bold></highlight> changes the state of clocked D-type master-slave flip-flop <highlight><bold>414</bold></highlight> to match the state of clocked D-type master-slave flip-flop <highlight><bold>412</bold></highlight>. This sets delayed full signal <highlight><bold>426</bold></highlight> to true. Inverter <highlight><bold>416</bold></highlight> causes empty signal <highlight><bold>424</bold></highlight> to go to false in response to delayed full signal <highlight><bold>426</bold></highlight>. And-gate <highlight><bold>406</bold></highlight> sets move signal <highlight><bold>428</bold></highlight> to false in response to empty signal <highlight><bold>424</bold></highlight> being set to false. Setting move signal <highlight><bold>428</bold></highlight> to false causes multiplexers <highlight><bold>408</bold></highlight> and <highlight><bold>418</bold></highlight> to select recirculation for clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight> and <highlight><bold>420</bold></highlight>, thereby preventing further changes to clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight> and <highlight><bold>420</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> now holds the state of incoming data <highlight><bold>402</bold></highlight> and clocked D-type master-slave flip-flop pair <highlight><bold>412</bold></highlight> and <highlight><bold>414</bold></highlight> indicate that clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> is full. Data signal <highlight><bold>432</bold></highlight> of clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> is applied to multiplexer <highlight><bold>450</bold></highlight> in stage two. Note that the operation of this circuit is almost identical to the operation of the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> with the difference being that the state of the flip-flops does not change until the next clock pulse in this embodiment. Additionally, the circuit is not set to accept new data until the opposite edge of clock signal <highlight><bold>434</bold></highlight>. This allows the control to operate asynchronously but with the granularity of the global clock while ensuring sufficient time for the data to be latched in clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> And-gate <highlight><bold>438</bold></highlight> causes move signal <highlight><bold>436</bold></highlight> to be set to true in response to delayed full signal <highlight><bold>426</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>414</bold></highlight> and empty signal <highlight><bold>456</bold></highlight> from inverter <highlight><bold>448</bold></highlight> being true. Move signal <highlight><bold>436</bold></highlight> has three functions. First, move signal <highlight><bold>436</bold></highlight> is applied to multiplexer <highlight><bold>450</bold></highlight> to select data signal <highlight><bold>432</bold></highlight> to apply to the D input of clocked D-type master-slave flip-flop <highlight><bold>452</bold></highlight>. Second, move signal <highlight><bold>436</bold></highlight> is applied to or-gate <highlight><bold>442</bold></highlight>, which sets signal <highlight><bold>462</bold></highlight> to true in response. Control signal <highlight><bold>462</bold></highlight>, in turn, is applied to multiplexer <highlight><bold>440</bold></highlight> to pass empty signal <highlight><bold>456</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>444</bold></highlight>. Additionally, move signal <highlight><bold>436</bold></highlight> is applied to or-gate <highlight><bold>410</bold></highlight>. The output of or-gate <highlight><bold>410</bold></highlight>, signal <highlight><bold>430</bold></highlight>, is applied to multiplexer <highlight><bold>408</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Upon application of the next clock signal <highlight><bold>434</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>412</bold></highlight> changes state to empty, clocked D-type master-slave flip-flop <highlight><bold>444</bold></highlight> changes state to full, and clocked D-type master-slave flip-flop <highlight><bold>420</bold></highlight> latches the state of data signal <highlight><bold>326</bold></highlight>. On the alternate edge of clock signal <highlight><bold>434</bold></highlight>, delayed clocked D-type master-slave flip-flops <highlight><bold>414</bold></highlight> and <highlight><bold>446</bold></highlight> change state to reflect the state of clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight> and <highlight><bold>444</bold></highlight> respectively. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>414</bold></highlight> to empty causes delayed full signal <highlight><bold>426</bold></highlight> to be set to false. Inverter <highlight><bold>416</bold></highlight> sets empty signal <highlight><bold>424</bold></highlight> to true, which will allow new data to be entered into stage one. The state of clocked D-type master-slave flip-flop <highlight><bold>446</bold></highlight> changes the state of delayed full signal <highlight><bold>458</bold></highlight> to true. Inverter <highlight><bold>448</bold></highlight> sets empty signal <highlight><bold>456</bold></highlight> to false in response to delayed full signal <highlight><bold>458</bold></highlight> being set to true. And-gate <highlight><bold>438</bold></highlight> sets move signal <highlight><bold>436</bold></highlight> to false, thereby causing clocked D-type master-slave flip-flops <highlight><bold>412</bold></highlight>, <highlight><bold>444</bold></highlight>, and <highlight><bold>452</bold></highlight> to recirculate their current state. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Empty signal <highlight><bold>470</bold></highlight>, move signal <highlight><bold>466</bold></highlight>, and signal <highlight><bold>462</bold></highlight> operate in a similar manner to move data <highlight><bold>464</bold></highlight> to the next pipelined stage in the synchronous circuit. </paragraph>
<paragraph id="P-0068" lvl="7"><number>&lsqb;0068&rsqb;</number> A Fourth Clocked Implementation of this Asynchronous FIFO Circuit </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated clocks with the control state change after the falling edge of the gated clock signal in accordance with an embodiment of the present invention. In this embodiment, clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight> and <highlight><bold>514</bold></highlight> perform the control functions of SR flip-flop <highlight><bold>110</bold></highlight> and clocked D-type master-slave flip-flops <highlight><bold>536</bold></highlight> and <highlight><bold>542</bold></highlight> perform the control functions of SR flip-flop <highlight><bold>122</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively. Clocked D-type master-slave flip-flops <highlight><bold>518</bold></highlight> and <highlight><bold>546</bold></highlight> perform the functions of pass-gate <highlight><bold>108</bold></highlight> paired with sticky-buffer <highlight><bold>112</bold></highlight>, and pass-gate <highlight><bold>120</bold></highlight> paired with sticky-buffer <highlight><bold>124</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight>, <highlight><bold>514</bold></highlight>, <highlight><bold>536</bold></highlight>, and <highlight><bold>542</bold></highlight> to set full signals <highlight><bold>526</bold></highlight> and <highlight><bold>552</bold></highlight> respectively to false. The global reset signal may also be applied to clocked D-type master-slave flip-flops <highlight><bold>518</bold></highlight> and <highlight><bold>546</bold></highlight>. Inverters <highlight><bold>516</bold></highlight> and <highlight><bold>544</bold></highlight> invert full signals <highlight><bold>526</bold></highlight> and <highlight><bold>552</bold></highlight> to create empty signals <highlight><bold>522</bold></highlight> and <highlight><bold>550</bold></highlight> respectively. At reset, empty signals <highlight><bold>522</bold></highlight> and <highlight><bold>550</bold></highlight> are both set to true. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In operation, the system applies incoming data <highlight><bold>502</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight> in the data path. Next, the system applies data valid <highlight><bold>504</bold></highlight> to and-gate <highlight><bold>506</bold></highlight>. Incoming data <highlight><bold>502</bold></highlight> and data valid <highlight><bold>504</bold></highlight> are bundled such that data valid <highlight><bold>504</bold></highlight> is not applied until incoming data <highlight><bold>502</bold></highlight> is valid. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> And-gate <highlight><bold>506</bold></highlight> sets move signal <highlight><bold>524</bold></highlight> to true in response to both data valid <highlight><bold>504</bold></highlight> and empty signal <highlight><bold>522</bold></highlight> from inverter <highlight><bold>516</bold></highlight> being true. Move signal <highlight><bold>524</bold></highlight> has three functions. First, move signal <highlight><bold>524</bold></highlight> is applied to and-gate <highlight><bold>520</bold></highlight> to control clock signal <highlight><bold>532</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight>. Second, move signal <highlight><bold>524</bold></highlight> is applied to or-gate <highlight><bold>512</bold></highlight>. The output from or-gate <highlight><bold>512</bold></highlight> is, in turn, applied to and-gate <highlight><bold>510</bold></highlight> to control clock signal <highlight><bold>532</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>508</bold></highlight>. Additionally, move signal <highlight><bold>524</bold></highlight> is passed to the system to inform the system that incoming data <highlight><bold>502</bold></highlight> will be latched into clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight> on the next clock signal <highlight><bold>532</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Upon application of the next clock signal <highlight><bold>532</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>508</bold></highlight> changes state to full and clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight> changes data signal <highlight><bold>530</bold></highlight> to reflect incoming data <highlight><bold>502</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>514</bold></highlight> changes state to full on the opposite edge of clock signal <highlight><bold>532</bold></highlight>, thereby providing a delay in removing empty signal <highlight><bold>522</bold></highlight> from and-gate <highlight><bold>506</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>514</bold></highlight> to full causes full signal <highlight><bold>526</bold></highlight> to go to true while inverter <highlight><bold>516</bold></highlight> causes empty signal <highlight><bold>522</bold></highlight> to go to false. And-gate <highlight><bold>506</bold></highlight> sets move signal <highlight><bold>524</bold></highlight> to false in response to empty signal <highlight><bold>522</bold></highlight> being set to false. Setting move signal <highlight><bold>524</bold></highlight> to false causes and-gates <highlight><bold>520</bold></highlight> and <highlight><bold>510</bold></highlight> to block clock signal <highlight><bold>532</bold></highlight>, thereby preventing further changes to clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight>, <highlight><bold>514</bold></highlight>, and <highlight><bold>518</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>51</bold></highlight> <highlight><bold>8</bold></highlight> now holds the state of incoming data <highlight><bold>502</bold></highlight> and clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight> and <highlight><bold>514</bold></highlight> indicates that clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight> is full. Data signal <highlight><bold>530</bold></highlight> of clocked D-type master-slave flip-flop <highlight><bold>518</bold></highlight> is applied to clocked D-type master-slave flip-flop <highlight><bold>546</bold></highlight> in stage two. Note that the operation of this circuit is almost identical to the operation of the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> with the difference being that the state of the flip-flops does not change until the next clock pulse in this embodiment. This allows the control to operate asynchronously but with the granularity of the global clock. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> And-gate <highlight><bold>534</bold></highlight> causes move signal <highlight><bold>528</bold></highlight> to be set to true in response to full signal <highlight><bold>526</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>514</bold></highlight> and empty signal <highlight><bold>550</bold></highlight> from inverter <highlight><bold>544</bold></highlight> being set to true. Move signal <highlight><bold>528</bold></highlight> has three functions. First, move signal <highlight><bold>528</bold></highlight> is applied to and-gate <highlight><bold>548</bold></highlight> to control the application of clock signal <highlight><bold>532</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>546</bold></highlight>. Second, move signal <highlight><bold>528</bold></highlight> is applied to or-gate <highlight><bold>540</bold></highlight>. The output of or-gate <highlight><bold>540</bold></highlight> is applied to and-gate <highlight><bold>538</bold></highlight>, which controls the application of clock signal <highlight><bold>532</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>536</bold></highlight>. Additionally, move signal <highlight><bold>528</bold></highlight> is applied to or-gate <highlight><bold>512</bold></highlight> and, in turn, is applied to and-gate <highlight><bold>510</bold></highlight> to control clock signal <highlight><bold>532</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>508</bold></highlight>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Upon application of the next clock signal <highlight><bold>532</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>508</bold></highlight> changes state to empty, clocked D-type master-slave flip-flop <highlight><bold>536</bold></highlight> changes state to full, and clocked D-type master-slave flip-flop <highlight><bold>546</bold></highlight> latches the state of data signal <highlight><bold>530</bold></highlight>. Clocked D-type master-slave flip-flops <highlight><bold>514</bold></highlight> and <highlight><bold>542</bold></highlight> change state to reflect the state of clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight> and <highlight><bold>536</bold></highlight> respectively on the opposite edge of clock signal <highlight><bold>532</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>514</bold></highlight> to empty causes full signal <highlight><bold>526</bold></highlight> to be set to false. Inverter <highlight><bold>516</bold></highlight> sets empty signal <highlight><bold>522</bold></highlight> to true, which will allow new data to be entered into stage one. The state of clocked D-type master-slave flip-flop <highlight><bold>542</bold></highlight> changes the state of full signal <highlight><bold>552</bold></highlight> to true. Inverter <highlight><bold>544</bold></highlight> sets empty signal <highlight><bold>550</bold></highlight> to false in response to full signal <highlight><bold>552</bold></highlight> being set to true. And-gate <highlight><bold>534</bold></highlight> sets move signal <highlight><bold>528</bold></highlight> to false, thereby blocking clock signal <highlight><bold>532</bold></highlight> from reaching clocked D-type master-slave flip-flops <highlight><bold>508</bold></highlight>, <highlight><bold>536</bold></highlight>, and <highlight><bold>546</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Empty signal <highlight><bold>556</bold></highlight> and move signal <highlight><bold>560</bold></highlight> operate in a similar manner to move data <highlight><bold>558</bold></highlight> to the next pipelined stage in the synchronous circuit. </paragraph>
<paragraph id="P-0077" lvl="7"><number>&lsqb;0077&rsqb;</number> A Synchronous Circuit Using Gate-Inverted Clock Signals </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an asynchronous circuit mapped to a synchronous circuit using gated-inverted clocks in accordance with an embodiment of the present invention. The use of inverted clocks and nand-gates in this embodiment eases timing constraints on the gating signals applied to the clock gate circuits. In this embodiment, clocked D-type master-slave flip-flops <highlight><bold>610</bold></highlight> and <highlight><bold>634</bold></highlight> perform the control functions of SR flip-flops <highlight><bold>110</bold></highlight> and <highlight><bold>122</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 1</cross-reference> respectively, while clocked D-type master-slave flip-flops <highlight><bold>616</bold></highlight> and <highlight><bold>640</bold></highlight> perform the functions of pass-gate <highlight><bold>108</bold></highlight> paired with sticky-buffer <highlight><bold>112</bold></highlight>, and pass-gate <highlight><bold>120</bold></highlight> paired with sticky-buffer <highlight><bold>124</bold></highlight> respectively. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> During initialization, the system applies a global reset signal (not shown) to clocked D-type master-slave flip-flops <highlight><bold>610</bold></highlight> and <highlight><bold>634</bold></highlight> to set full signals <highlight><bold>622</bold></highlight> and <highlight><bold>646</bold></highlight> respectively to false. The global reset signal may also be applied to clocked D-type master-slave flip-flops <highlight><bold>616</bold></highlight> and <highlight><bold>640</bold></highlight>. Inverters <highlight><bold>612</bold></highlight> and <highlight><bold>636</bold></highlight> invert full signals <highlight><bold>622</bold></highlight> and <highlight><bold>646</bold></highlight> to create empty signals <highlight><bold>620</bold></highlight> and <highlight><bold>644</bold></highlight> respectively. At reset, empty signals <highlight><bold>620</bold></highlight> and <highlight><bold>644</bold></highlight> are both set to true. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> In operation, the system applies incoming data <highlight><bold>602</bold></highlight> to the D input of clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> in the data path. Next, the system applies data valid <highlight><bold>604</bold></highlight> to and-gate <highlight><bold>606</bold></highlight>. Incoming data <highlight><bold>602</bold></highlight> and data valid <highlight><bold>604</bold></highlight> are bundled such that data valid <highlight><bold>604</bold></highlight> is not applied until incoming data <highlight><bold>602</bold></highlight> is valid. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> And-gate <highlight><bold>606</bold></highlight> sets move signal <highlight><bold>626</bold></highlight> to true in response to both data valid <highlight><bold>604</bold></highlight> and empty signal <highlight><bold>620</bold></highlight> from inverter <highlight><bold>612</bold></highlight> being true. Move signal <highlight><bold>626</bold></highlight> has three functions. First, move signal <highlight><bold>626</bold></highlight> is applied to nand-gate <highlight><bold>614</bold></highlight> to control clock signal <highlight><bold>617</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight>. Second, move signal <highlight><bold>626</bold></highlight> is applied to or-gate <highlight><bold>618</bold></highlight>. Signal <highlight><bold>624</bold></highlight> from or-gate <highlight><bold>618</bold></highlight> is, in turn, applied to nand-gate <highlight><bold>608</bold></highlight> to control clock signal <highlight><bold>617</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight>. Additionally, move signal <highlight><bold>626</bold></highlight> is passed to the system to inform the system that incoming data <highlight><bold>602</bold></highlight> will be latched into clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> on the next clock signal <highlight><bold>617</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Upon application of the next clock signal <highlight><bold>617</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> changes state to full and clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> changes data signal <highlight><bold>628</bold></highlight> to reflect incoming data <highlight><bold>602</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> to full causes full signal <highlight><bold>622</bold></highlight> to go to true while inverter <highlight><bold>612</bold></highlight> causes empty signal <highlight><bold>620</bold></highlight> to go to false. And-gate <highlight><bold>606</bold></highlight> sets move signal <highlight><bold>626</bold></highlight> to false in response to empty signal <highlight><bold>620</bold></highlight> being set to false. Setting move signal <highlight><bold>626</bold></highlight> to false causes nand-gates <highlight><bold>614</bold></highlight> and <highlight><bold>608</bold></highlight> to block clock signal <highlight><bold>617</bold></highlight>, thereby preventing further changes to clocked D-type master-slave flip-flops <highlight><bold>610</bold></highlight> and <highlight><bold>616</bold></highlight>. Clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> now holds the state of incoming data <highlight><bold>602</bold></highlight> and clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> indicates that clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> is full. Data signal <highlight><bold>628</bold></highlight> of clocked D-type master-slave flip-flop <highlight><bold>616</bold></highlight> is applied to clocked D-type master-slave flip-flop <highlight><bold>640</bold></highlight> in stage two. Note that the operation of this circuit is almost identical to the operation of the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> with the difference being that the state of the flip-flops does not change until the next clock pulse in this embodiment. This allows the control to operate asynchronously but with the granularity of the global clock. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> And-gate <highlight><bold>630</bold></highlight> causes move signal <highlight><bold>650</bold></highlight> to be set to true in response to full signal <highlight><bold>622</bold></highlight> from clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> and empty signal <highlight><bold>644</bold></highlight> from inverter <highlight><bold>636</bold></highlight> being true. Move signal <highlight><bold>650</bold></highlight> has three functions. First, move signal <highlight><bold>650</bold></highlight> is applied to nand-gate <highlight><bold>638</bold></highlight> to control the application of clock signal <highlight><bold>617</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>640</bold></highlight>. Second, move signal <highlight><bold>650</bold></highlight> is applied to or-gate <highlight><bold>642</bold></highlight> to create signal <highlight><bold>648</bold></highlight>. Signal <highlight><bold>648</bold></highlight> controls the application of clock signal <highlight><bold>617</bold></highlight> to clocked D-type master-slave flip-flop <highlight><bold>634</bold></highlight>. Additionally, move signal <highlight><bold>650</bold></highlight> is applied to or-gate <highlight><bold>618</bold></highlight> to create signal <highlight><bold>624</bold></highlight> which, in turn, is applied to nand-gate <highlight><bold>608</bold></highlight> to control clock signal <highlight><bold>617</bold></highlight> applied to clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Upon application of the next clock signal <highlight><bold>617</bold></highlight>, clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> changes state to empty, clocked D-type master-slave flip-flop <highlight><bold>634</bold></highlight> changes state to full, and clocked D-type master-slave flip-flop <highlight><bold>640</bold></highlight> latches the state of data signal <highlight><bold>628</bold></highlight>. Changing the state of clocked D-type master-slave flip-flop <highlight><bold>610</bold></highlight> to empty causes full signal <highlight><bold>622</bold></highlight> to be set to false. Inverter <highlight><bold>612</bold></highlight> sets empty signal <highlight><bold>620</bold></highlight> to true, which will allow new data to be entered into stage one. The state of clocked D-type master-slave flip-flop <highlight><bold>634</bold></highlight> changes the state of full signal <highlight><bold>646</bold></highlight> to true. Inverter <highlight><bold>636</bold></highlight> sets empty signal <highlight><bold>644</bold></highlight> to false in response to full signal <highlight><bold>646</bold></highlight> being set to true. And-gate <highlight><bold>630</bold></highlight> sets move signal <highlight><bold>650</bold></highlight> to false, thereby blocking clock signal <highlight><bold>617</bold></highlight> from reaching clocked D-type master-slave flip-flops <highlight><bold>610</bold></highlight>, <highlight><bold>634</bold></highlight>, and <highlight><bold>640</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Empty signal <highlight><bold>656</bold></highlight>, move signal <highlight><bold>658</bold></highlight>, and signal <highlight><bold>648</bold></highlight> operate in a similar manner to move data <highlight><bold>652</bold></highlight> to the next pipelined stage in the synchronous circuit. </paragraph>
<paragraph id="P-0086" lvl="7"><number>&lsqb;0086&rsqb;</number> Alternate Clocked SR Flip-Flop </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> illustrates an alternate implementation of a clocked SR flip-flop in accordance with an embodiment of the present invention. In this implementation, the Q output of D-type master-slave flip-flop <highlight><bold>660</bold></highlight> indicates the state of the clocked SR flip-flop. When the Q output is low, D-type master-slave flip-flop <highlight><bold>660</bold></highlight> is indicating empty. When the Q output is high, D-type master-slave flip-flop <highlight><bold>660</bold></highlight> is indicating full. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Inverter <highlight><bold>662</bold></highlight> inverts the state of the full signal to create the empty signal. Clk <highlight><bold>667</bold></highlight> causes the Q output of D-type master-slave flip-flop <highlight><bold>660</bold></highlight> to change state to the state being applied to the D input of D-type master-slave flip-flop <highlight><bold>660</bold></highlight>. The output of or-gate <highlight><bold>666</bold></highlight> is applied to the D input of D-type master-slave flip-flop <highlight><bold>660</bold></highlight>. Or-gate <highlight><bold>666</bold></highlight> receives the S input for the clocked SR flip-flop and the output of and-gate <highlight><bold>664</bold></highlight>. If either input to or-gate <highlight><bold>666</bold></highlight> is high, the D input to D-type master-slave flip-flop <highlight><bold>660</bold></highlight> is high. If both inputs to or-gate <highlight><bold>666</bold></highlight> are low, the D input to D-type master-slave flip-flop <highlight><bold>660</bold></highlight> is low. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> And-gate <highlight><bold>664</bold></highlight> receives the Q output of D-type master-slave flip-flop <highlight><bold>660</bold></highlight> and the output of inverter <highlight><bold>668</bold></highlight>. If both inputs to and-gate <highlight><bold>664</bold></highlight> are high, the output of and-gate <highlight><bold>664</bold></highlight> is high, otherwise, the output of and-gate <highlight><bold>664</bold></highlight> is low. Inverter <highlight><bold>668</bold></highlight> receives the R input of the SR flip-flop. Thus if the S input is high, then the Q output of D-type master-slave flip-flop <highlight><bold>660</bold></highlight> will go high after the next clock signal. While if the R input is high and the S input is low, then the Q output of D-type master-slave flip-flop <highlight><bold>660</bold></highlight> will go low after the next clock signal. Note that other implementations of the clocked SR flip-flop are possible. </paragraph>
<paragraph id="P-0090" lvl="7"><number>&lsqb;0090&rsqb;</number> A GasP Asynchronous Control Circuit </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> illustrates a GasP asynchronous control circuit to be prototyped in accordance with an embodiment of the present invention. In this implementation of a GasP asynchronous control circuit, keeper <highlight><bold>710</bold></highlight> holds state conductor wire <highlight><bold>709</bold></highlight> to indicate the state of sticky-buffer <highlight><bold>722</bold></highlight>. Keeper <highlight><bold>710</bold></highlight> is implemented as two small inverters coupled back-to-back. The size of the two small inverters is such that keeper <highlight><bold>710</bold></highlight> can maintain the state of state conductor wire <highlight><bold>709</bold></highlight>, but cannot prevent the state from being changed by gates <highlight><bold>706</bold></highlight> and <highlight><bold>708</bold></highlight>. State conductor wire <highlight><bold>709</bold></highlight> is low when sticky-buffer <highlight><bold>722</bold></highlight> is full and high when sticky-buffer <highlight><bold>722</bold></highlight> is empty. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Nand-gate <highlight><bold>702</bold></highlight> receives the state of state conductor wire <highlight><bold>709</bold></highlight> and the data available from the preceding stage as inputs. When both inputs of nand-gate <highlight><bold>702</bold></highlight> are high, the output of nand-gate <highlight><bold>702</bold></highlight> goes low. This low is applied to inverters <highlight><bold>714</bold></highlight> and <highlight><bold>716</bold></highlight>. The high output of inverter <highlight><bold>716</bold></highlight> is applied to normally-opaque pass-gate <highlight><bold>720</bold></highlight> allowing sticky-buffer <highlight><bold>722</bold></highlight> to change to the state of the input data. The high output of inverter <highlight><bold>714</bold></highlight> is applied to gate <highlight><bold>708</bold></highlight> which drains the charge on state conductor wire <highlight><bold>709</bold></highlight> causing state conductor wire <highlight><bold>709</bold></highlight> to go low indicating that sticky-buffer <highlight><bold>722</bold></highlight> has data, and that this stage is full. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Nand-gate <highlight><bold>704</bold></highlight> receives the output of inverter <highlight><bold>712</bold></highlight>. A high output from inverter <highlight><bold>712</bold></highlight> indicates sticky-buffer <highlight><bold>722</bold></highlight> is full. Nand-gate <highlight><bold>704</bold></highlight> also receives the empty signal from the next stage. When both inputs to nand-gate <highlight><bold>704</bold></highlight> are high, the output of nand-gate <highlight><bold>704</bold></highlight> goes low. The output of nand-gate <highlight><bold>704</bold></highlight> is applied to inverter <highlight><bold>718</bold></highlight>. The high output from inverter <highlight><bold>718</bold></highlight> is applied to normally-opaque pass-gate <highlight><bold>724</bold></highlight> to allow the state of sticky-buffer <highlight><bold>722</bold></highlight> to be passed to the next stage. The output of nand-gate <highlight><bold>704</bold></highlight> is also applied to pmos gate <highlight><bold>706</bold></highlight>. Gate <highlight><bold>706</bold></highlight> applies charge to state conductor wire <highlight><bold>709</bold></highlight> making its state high to indicate that sticky-buffer <highlight><bold>722</bold></highlight> is empty. </paragraph>
<paragraph id="P-0094" lvl="7"><number>&lsqb;0094&rsqb;</number> A Clocked Version of a GasP Control Circuit </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> illustrates a clocked version of a GasP asynchronous control circuit in accordance with an embodiment of the present invention. In this implementation, nand-gates <highlight><bold>732</bold></highlight> and <highlight><bold>734</bold></highlight>, inverters <highlight><bold>746</bold></highlight>, <highlight><bold>736</bold></highlight>, and <highlight><bold>738</bold></highlight>, normally-opaque pass-gates <highlight><bold>740</bold></highlight> and <highlight><bold>744</bold></highlight>, and sticky buffer <highlight><bold>742</bold></highlight> perform the same functions as nand-gates <highlight><bold>702</bold></highlight> and <highlight><bold>704</bold></highlight>, inverters <highlight><bold>714</bold></highlight>, <highlight><bold>716</bold></highlight>, and <highlight><bold>718</bold></highlight>, normally-opaque pass-gates <highlight><bold>720</bold></highlight> and <highlight><bold>724</bold></highlight>, and sticky buffer <highlight><bold>722</bold></highlight> and will not be described further. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In this implementation, state is saved in clocked SR flip-flop <highlight><bold>748</bold></highlight>. Clocked SR flip-flop responds to clk <highlight><bold>749</bold></highlight> and sets the state to empty or full depending on the inputs applied to SE and SF respectively. Inverter <highlight><bold>747</bold></highlight> inverts the output of nand-gate <highlight><bold>734</bold></highlight> to supply the correct logic signal to clocked SR flip-flop <highlight><bold>748</bold></highlight>. </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> Design Verification Process </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating the process of mapping an asynchronous circuit to a clocked synchronous device to verify the design of the asynchronous circuit in accordance with an embodiment of the present invention. The system starts when a design is received for an asynchronous circuit (step <highlight><bold>802</bold></highlight>). Next, the system maps the asynchronous circuit onto cells of a clocked synchronous device (step <highlight><bold>804</bold></highlight>). </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> After the asynchronous circuit is mapped onto the synchronous device, the synchronous device is implemented on the mapped circuit (step <highlight><bold>806</bold></highlight>). The system then operates the synchronous device to simulate the operation of the asynchronous circuit (step <highlight><bold>808</bold></highlight>). Next, the results of operating the synchronous device are used to verify the design of the asynchronous circuit (step <highlight><bold>810</bold></highlight>). After verifying the design of the asynchronous circuit, the asynchronous circuit is fabricated (step <highlight><bold>811</bold></highlight>). Finally, the behavior of the mapped asynchronous circuit is verified (step <highlight><bold>812</bold></highlight>). </paragraph>
<paragraph id="P-0100" lvl="7"><number>&lsqb;0100&rsqb;</number> Clocked Asynchronous Circuits Facilitates Testing </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Clocked asynchronous circuits can be functionally tested using a conventional clocked chip tester in the same manner as all other clocked circuit designs. With the gated clock versions of clocked asynchronous circuits, such as the mapping shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the circuit can be operated either fully clocked as described earlier or, if the clock signal is held high, then the circuit will operate fully asynchronously. Thus a conventional clocked chip tester can be used to verify correct functional behavior of this circuit when operated in its fully clocked mode. This facilitates greatly the testing of the circuit design. Further testing of the circuit deign when operating fully asynchronously is still required, but using a conventional tester to carry out the bulk of the functional testing greatly simplifies the testing task. Thus there is an advantage to incorporating gated clocks into the final asynchronous design in step <highlight><bold>810</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> because this facilitates the use of conventional chip testing techniques and methods in step <highlight><bold>812</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. For example, the D-type master slave flip-flops in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> can incorporate a small amount of extra circuit components that will enable their state to be scanned out serially to pins on the chip as is common practice in conventional clocked circuit designs. This makes the state of the flip-flops available to the tester thus enabling greater verification of the functional behavior of the design. </paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> Delaying The Asynchronous Events </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates adding D-type flip-flops to delay move events in accordance with an embodiment of the present invention. Adding clocked D-type flip-flops is another way to facilitate functional testing of asynchronous circuit designs by delaying the move events of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The circuit in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> operates much like the circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. When SR flip-flop <highlight><bold>908</bold></highlight> is set to empty, empty signal <highlight><bold>932</bold></highlight> is set to high and applied to and-gate <highlight><bold>902</bold></highlight>. Data valid signal <highlight><bold>918</bold></highlight> is also applied to and-gate <highlight><bold>902</bold></highlight> from a previous stage or a signal source. In response to both signals being set to high, signal <highlight><bold>940</bold></highlight> is set to high. Signal <highlight><bold>940</bold></highlight> is applied to the D input of D-type flip-flop <highlight><bold>904</bold></highlight>. The state of signal <highlight><bold>940</bold></highlight> is passed to the Q output of D-type flip-flop <highlight><bold>904</bold></highlight> on the next clock signal <highlight><bold>926</bold></highlight>. The Q output of D-type flip-flop <highlight><bold>904</bold></highlight> is move signal <highlight><bold>920</bold></highlight>. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> When move signal <highlight><bold>920</bold></highlight> is set to high, SR flip-flop <highlight><bold>908</bold></highlight> is set which sets the empty signal <highlight><bold>932</bold></highlight> low and the full signal <highlight><bold>934</bold></highlight> to high. Signal <highlight><bold>940</bold></highlight> also goes low in response to empty signal <highlight><bold>932</bold></highlight> going low. Move signal <highlight><bold>920</bold></highlight> is also applied to normally-opaque pass-gate <highlight><bold>906</bold></highlight>. When move signal <highlight><bold>920</bold></highlight> is high, normally-opaque pass gate <highlight><bold>906</bold></highlight> allows incoming data <highlight><bold>920</bold></highlight> to pass as signal <highlight><bold>936</bold></highlight> to sticky-buffer <highlight><bold>910</bold></highlight>. Sticky-buffer <highlight><bold>910</bold></highlight> retains the state of incoming data <highlight><bold>922</bold></highlight> after move signal <highlight><bold>920</bold></highlight> goes low. Move signal <highlight><bold>920</bold></highlight> goes low after the next clock signal <highlight><bold>926</bold></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Full signal <highlight><bold>934</bold></highlight> and empty signal <highlight><bold>924</bold></highlight> from the next stage are applied to and-gate <highlight><bold>912</bold></highlight>. Signal <highlight><bold>942</bold></highlight> goes high in response to both full signal <highlight><bold>934</bold></highlight> and empty signal <highlight><bold>924</bold></highlight> being high. On the next clock signal <highlight><bold>926</bold></highlight>, D-type flip-flop <highlight><bold>914</bold></highlight> sets its Q output high causing move signal <highlight><bold>928</bold></highlight> to be high. Move signal <highlight><bold>928</bold></highlight> is coupled to normally-opaque pass gate <highlight><bold>916</bold></highlight>, which sets outgoing data <highlight><bold>930</bold></highlight> to reflect the signal stored in sticky-buffer <highlight><bold>910</bold></highlight>. Move signal <highlight><bold>928</bold></highlight> is also applied to the SE input of SR flip-flop <highlight><bold>908</bold></highlight>, which resets the flip-flop causing empty signal <highlight><bold>932</bold></highlight> to go high and full signal <highlight><bold>934</bold></highlight> to go low. Signal <highlight><bold>942</bold></highlight> goes low in response to full signal <highlight><bold>934</bold></highlight> going low. On the next clock signal <highlight><bold>926</bold></highlight>, move signal <highlight><bold>928</bold></highlight> is set to low. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for prototyping an asynchronous circuit, comprising: 
<claim-text>receiving a design of the asynchronous circuit, the design including asynchronous cells; </claim-text>
<claim-text>mapping an asynchronous cell of the asynchronous circuit onto a synchronous cell within a clocked synchronous device thereby creating a mapped circuit, wherein the synchronous cell simulates an operation of the asynchronous cell; </claim-text>
<claim-text>implementing the mapped circuit on the clocked synchronous device to perform functions mapped from the asynchronous circuit; </claim-text>
<claim-text>operating the clocked synchronous device; and </claim-text>
<claim-text>using a result of operating the clocked synchronous device to verify the design of the asynchronous circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the clocked synchronous device is a field-programmable gate-array. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the clocked synchronous device is a standard cell gate-array. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a first clocked D-type master-slave flip-flop in the synchronous cell; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a second clocked D-type master-slave flip-flop in the synchronous cell, wherein the first clocked D-type master-slave flip-flop indicates that the second clocked D-type master-slave flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first gated clock to the first clocked D-type master-slave flip-flop; and </claim-text>
<claim-text>mapping a second gated clock to the second clocked D-type master-slave flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising: 
<claim-text>passing the first gated clock to the first clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>passing the first gated clock to the first clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>passing the second gated clock to the second clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to empty and the first input signal indicates that incoming data are valid. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a first data recirculation flip-flop in the synchronous cell; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a second data recirculation flip-flop in the synchronous cell, wherein the first data recirculation flip-flop indicates that the second data recirculation flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first recirculation control signal to the first data recirculation flip-flop; and </claim-text>
<claim-text>mapping a second recirculation control signal to the second data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>setting the first recirculation control signal to change a state of the first data recirculation flip-flop when the first data recirculation flip-flop is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>setting the first recirculation control signal to change the state of the first data recirculation flip-flop when the first data recirculation flip-flop is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>setting the second recirculation control signal to allow an incoming data value to set the state of the second data recirculation flip-flop when the first data recirculation flip-flop is set to empty and the first input signal indicates that incoming data are valid. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a data recirculation cell in the synchronous cell, wherein the data recirculation cell includes an additional clocked D-type master-slave flip-flop; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a data recirculation flip-flop in the synchronous cell, wherein the data recirculation cell indicates that the data recirculation flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first recirculation control signal to the data recirculation cell; and </claim-text>
<claim-text>mapping a second recirculation control signal to the data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>setting the first recirculation control signal to change a state of the data recirculation cell when the data recirculation cell is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>setting the first recirculation control signal to change the state of the data recirculation cell when the data recirculation cell is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>setting the second recirculation control signal to allow an incoming data value to set the state of the data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer-readable storage medium storing instructions that when executed by a computer cause the computer to perform a method for prototyping an asynchronous circuit, comprising: 
<claim-text>receiving a design of the asynchronous circuit, the design including asynchronous cells; </claim-text>
<claim-text>mapping an asynchronous cell of the asynchronous circuit onto a synchronous cell within a clocked synchronous device thereby creating a mapped circuit, wherein the synchronous cell simulates an operation of the asynchronous cell; </claim-text>
<claim-text>implementing the mapped circuit on the clocked synchronous device to perform functions mapped from the asynchronous circuit; </claim-text>
<claim-text>operating the clocked synchronous device; and </claim-text>
<claim-text>using a result of operating the clocked synchronous device to verify the design of the asynchronous circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the clocked synchronous device is a field-programmable gate-array. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the clocked synchronous device is a standard cell gate-array. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a first clocked D-type master-slave flip-flop in the synchronous cell; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a second clocked D-type master-slave flip-flop in the synchronous cell, wherein the first clocked D-type master-slave flip-flop indicates that the second clocked D-type master-slave flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first gated clock to the first clocked D-type master-slave flip-flop; and </claim-text>
<claim-text>mapping a second gated clock to the second clocked D-type master-slave flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, the method further comprising: 
<claim-text>passing the first gated clock to the first clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>passing the first gated clock to the first clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>passing the second gated clock to the second clocked D-type master-slave flip-flop when the first clocked D-type master-slave flip-flop is set to empty and the first input signal indicates that incoming data are valid. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a first data recirculation flip-flop in the synchronous cell; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a second data recirculation flip-flop in the synchronous cell, wherein the first data recirculation flip-flop indicates that the second data recirculation flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first recirculation control signal to the first data recirculation flip-flop; and </claim-text>
<claim-text>mapping a second recirculation control signal to the second data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, the method further comprising: 
<claim-text>setting the first recirculation control signal to change a state of the first data recirculation flip-flop when the first data recirculation flip-flop is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>setting the first recirculation control signal to change the state of the first data recirculation flip-flop when the first data recirculation flip-flop is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>setting the second recirculation control signal to allow an incoming data value to set the state of the second data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein mapping the asynchronous cell includes: 
<claim-text>mapping an SR flip-flop in a control path of the asynchronous cell to a data recirculation cell in the synchronous cell, wherein the data recirculation cell includes an additional clocked D-type master-slave flip-flop; </claim-text>
<claim-text>mapping a pass-gate and a sticky-buffer in a data path of the asynchronous cell to a data recirculation flip-flop in the synchronous cell, wherein the data recirculation cell indicates that the data recirculation flip-flop is one of empty and full; </claim-text>
<claim-text>mapping a first recirculation control signal to the data recirculation cell; and </claim-text>
<claim-text>mapping a second recirculation control signal to the data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer-readable storage medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, the method further comprising: 
<claim-text>setting the first recirculation control signal to change a state of the data recirculation cell when the data recirculation cell is set to empty and a first input signal indicates that incoming data are valid; </claim-text>
<claim-text>setting the first recirculation control signal to change the state of the data recirculation cell when the data recirculation cell is set to full and a second input signal indicates that a next synchronous cell is empty; and </claim-text>
<claim-text>setting the second recirculation control signal to allow an incoming data value to set the state of the data recirculation flip-flop. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method for prototyping an asynchronous circuit, comprising: 
<claim-text>receiving a design of the asynchronous circuit, the design including asynchronous cells; </claim-text>
<claim-text>mapping the asynchronous circuit onto a globally clocked programmable synchronous device, wherein the globally clocked programmable synchronous device simulates an operation of the asynchronous circuit; </claim-text>
<claim-text>programming the globally clocked programmable synchronous device to perform functions mapped from the asynchronous circuit; </claim-text>
<claim-text>operating the globally clocked programmable synchronous device; and </claim-text>
<claim-text>using a result of operating the globally clocked programmable synchronous device to verify the design of the asynchronous circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the globally clocked programmable synchronous device includes a field-programmable gate-array, the method further comprising mapping the asynchronous circuit onto the field-programmable gate-array using a system supplied by a manufacturer of the field-programmable gate-array. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein a synchronous cell is taken from a standard cell library, the method further comprising mapping the asynchronous circuit onto cells within the standard cell library using a system supplied by a supplier of the standard cell library. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A method to facilitate mapping an asynchronous circuit onto a clocked circuit, wherein the clocked circuit can be operated in one of a fully clocked mode and a fully asynchronous mode, comprising: 
<claim-text>delaying an asynchronous signal event using a gated-clock D-type flip-flop; </claim-text>
<claim-text>wherein the clocked circuit operates in the fully clocked mode when the gated-clock D-type flip-flop is supplied with a clock signal, whereby the asynchronous signal event is delayed until a next clock signal event; and </claim-text>
<claim-text>wherein the clocked circuit operates in the fully asynchronous mode when the gated-clock D-type flip-flop is supplied with a constant logic level, whereby the asynchronous signal event is delayed by only the inherent delay within the gated-clock D-type flip-flop.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005403A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005403A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005403A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005403A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005403A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005403A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005403A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005403A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005403A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005403A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
