<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005242A1-20030102-D00000.TIF SYSTEM "US20030005242A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005242A1-20030102-D00001.TIF SYSTEM "US20030005242A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005242A1-20030102-D00002.TIF SYSTEM "US20030005242A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005242A1-20030102-D00003.TIF SYSTEM "US20030005242A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005242A1-20030102-D00004.TIF SYSTEM "US20030005242A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005242</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895928</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>158000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>119000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Memory control for multiple read requests</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Lance</given-name>
<middle-name>W.</middle-name>
<family-name>Dover</family-name>
</name>
<residence>
<residence-us>
<city>Fair Oaks</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Multiple read requests are prioritized. A first one of the prioritized read requests is issued to a memory device. Bits from the memory device are received for the first read request. After issuing the first read request, a second one of the prioritized read requests is issued to the memory device prior to or while receiving bits from the memory device for the first read request. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to the field of computer systems. More particularly, the present invention relates to the field of memory control for computer systems. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Synchronous flash memory devices have been designed to respond to an external read request from a processor, for example, with a data burst. When the flash memory device receives the read request, the flash memory device senses a portion of a flash memory containing the requested data. Following this initial lookup latency time, the flash memory device outputs not only the requested data but also any additionally sensed data in anticipation the processor may request this other data in the future. This data burst continues each clock cycle until all of the sensed data has been output to the processor. The flash memory device may then accept another read request. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> By sensing more data than was requested, that is by sensing wide, the flash memory device more fully uses available bus bandwidth and provides a prediction mechanism to help reduce latency for future read requests. As one example, a processor may request a single data word 16 bits in length. If the requested data word is not stored in a cache memory for the processor, the processor will issue a read request for the data word from the flash memory device. The flash memory device may then sense four consecutive data words, one of which is the requested data word, and output all four data words, sixteen bits at a time over four clock cycles for example, to the processor. The processor may then store all four data words in its cache memory. If the processor later requests any one of the three non-requested data words, the processor can obtain the requested data from its cache memory without incurring another lookup by the flash memory device. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> If the non-requested data is not later requested or used, however, the flash memory device has wasted energy in sensing and outputting the additional data. Also, the flash memory device may have unnecessarily delayed the performance of other read requests due to the additional time required to output the non-requested data. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which: </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates, for one embodiment, a flow diagram for memory control for multiple read requests; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an exemplary computer system having a memory controller to control the performance of multiple read requests by a memory device for multiple hosts; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates, for one embodiment, a timing diagram for pipelining multiple read requests; and </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates another exemplary computer system having a memory controller to control the performance of multiple read requests by a memory device for multiple hosts. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The following detailed description sets forth an embodiment or embodiments in accordance with the present invention for memory control for multiple read requests. In the following description, details are set forth such as an exemplary timing diagram, data sizes, computer systems, etc. in order to provide a thorough understanding of the present invention. It will be evident, however, that the present invention may be practiced without these details. In other instances, well-known computer components, etc. have not been described in particular detail so as not to obscure the present invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates, for one embodiment, a flow diagram <highlight><bold>100</bold></highlight> for memory control for multiple read requests. Any suitable computer system may be used to perform memory control for multiple read requests in accordance with flow diagram <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Exemplary Computer System </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates one exemplary computer system <highlight><bold>200</bold></highlight> to perform memory control for multiple read requests in accordance with flow diagram <highlight><bold>100</bold></highlight> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> for one embodiment comprises a plurality of processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight>, a memory controller <highlight><bold>220</bold></highlight>, and a memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Each processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight> for one embodiment comprises a cache memory <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, and <highlight><bold>207</bold></highlight>, respectively, to store program code and/or data, for example, that has been or may be used by processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight>, respectively. Although illustrated as having their own respective cache memory <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, and <highlight><bold>207</bold></highlight> on-chip, each processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight> may have one or more corresponding cache memories each of which may be on-chip or externally coupled to its corresponding processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>. One or more such cache memories may be optionally shared by more than one processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> and therefore have more than one corresponding processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>. Computer system <highlight><bold>200</bold></highlight> for other embodiments may comprise one, two, or four or more processors. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Each processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight> is coupled to memory controller <highlight><bold>220</bold></highlight> by a processor bus <highlight><bold>210</bold></highlight>. Processor bus <highlight><bold>210</bold></highlight> may have any suitable number of bus lines. For other embodiments, each processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight> may be coupled to memory controller <highlight><bold>220</bold></highlight> by a separate, respective bus. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, memory controller <highlight><bold>220</bold></highlight> for one embodiment comprises request control circuitry <highlight><bold>222</bold></highlight> and response control circuitry <highlight><bold>226</bold></highlight>. Request control circuitry <highlight><bold>222</bold></highlight> comprises a request queue <highlight><bold>224</bold></highlight>, and response control circuitry <highlight><bold>226</bold></highlight> comprises a response queue <highlight><bold>228</bold></highlight>. Request control circuitry <highlight><bold>222</bold></highlight>, request queue <highlight><bold>224</bold></highlight>, response control circuitry <highlight><bold>226</bold></highlight>, and response queue <highlight><bold>228</bold></highlight> may each comprise any suitable circuitry. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Memory controller <highlight><bold>220</bold></highlight> is coupled to memory device <highlight><bold>240</bold></highlight> by a control bus <highlight><bold>232</bold></highlight>, an address bus <highlight><bold>234</bold></highlight>, and a data bus <highlight><bold>236</bold></highlight>. Control bus <highlight><bold>232</bold></highlight>, address bus <highlight><bold>234</bold></highlight>, and data bus <highlight><bold>236</bold></highlight> may each comprise any suitable number of bus lines. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, memory device <highlight><bold>240</bold></highlight> for one embodiment comprises access circuitry <highlight><bold>242</bold></highlight>, a memory <highlight><bold>246</bold></highlight>, and output circuitry <highlight><bold>248</bold></highlight>. Access circuitry <highlight><bold>242</bold></highlight> and output circuitry <highlight><bold>248</bold></highlight> are each coupled to memory <highlight><bold>246</bold></highlight>. Access circuitry <highlight><bold>242</bold></highlight>, memory <highlight><bold>246</bold></highlight>, and output circuitry <highlight><bold>248</bold></highlight> may each comprise any suitable circuitry. Access circuitry <highlight><bold>242</bold></highlight> for one embodiment comprises an address buffer <highlight><bold>243</bold></highlight>. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment comprises an output buffer <highlight><bold>249</bold></highlight>. Memory <highlight><bold>246</bold></highlight> may comprise any suitable type of memory of any suitable size to store any suitable program code and/or data, for example, for processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight>. Memory <highlight><bold>246</bold></highlight> may be used, for example, to store any suitable firmware, such as operating system software for example, for execution by processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight>. For one embodiment, memory <highlight><bold>246</bold></highlight> comprises flash memory. For other embodiments, memory <highlight><bold>246</bold></highlight> may comprise read only memory (ROM), static random access memory (SRAM), or pseudostatic random access memory (PSRAM), for example. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Memory controller <highlight><bold>220</bold></highlight> and memory device <highlight><bold>240</bold></highlight> for one embodiment are each fabricated on separate chips. Memory controller <highlight><bold>220</bold></highlight> for another embodiment is integrated with memory device <highlight><bold>240</bold></highlight> on the same chip. For one embodiment where computer system <highlight><bold>200</bold></highlight> comprises only one processor, such as processor <highlight><bold>202</bold></highlight> for example, memory controller <highlight><bold>220</bold></highlight> may be integrated with processor <highlight><bold>202</bold></highlight> on the same chip. Memory device <highlight><bold>240</bold></highlight> may then either be integrated with processor <highlight><bold>202</bold></highlight> and memory controller <highlight><bold>220</bold></highlight> or be fabricated on a separate chip. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> for other embodiments may comprise any other suitable combination of any suitable components. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Memory Control for Multiple Read Requests </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> For block <highlight><bold>102</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight> issue one or more read requests to memory controller <highlight><bold>220</bold></highlight> to request program code and/or data, for example, from memory device <highlight><bold>240</bold></highlight>. For one embodiment, one or more read requests are each a cache line fill request for processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> to obtain program code and/or data, for example, that is not presently stored in cache memory <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, or <highlight><bold>207</bold></highlight>, respectively. Processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight> for one embodiment may each have prefetching and/or branch prediction capability and therefore issue multiple read requests to request program code, for example, that the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> anticipates it will use. Processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight> may issue read requests to memory controller <highlight><bold>220</bold></highlight> in any suitable order and in accordance with any suitable communications protocol. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Each read request may have any suitable format. Each read request for one embodiment specifies a virtual or real address at which the requested program code and/or data is to be read from memory device <highlight><bold>240</bold></highlight>. Each read request for one embodiment may also identify the processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> originating the read request. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> For block <highlight><bold>104</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> receives the multiple read requests. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> receives each read request. Although illustrated as receiving multiple read requests from processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> may be coupled to receive multiple read requests from any suitable one or more hosts. As one example, memory controller <highlight><bold>220</bold></highlight> for one embodiment may be coupled to one or more binding or interfacing units that have a prediction mechanism to prefetch program code, for example. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> For block <highlight><bold>106</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> prioritizes the received read requests in an order for issuance to memory device <highlight><bold>240</bold></highlight>. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> prioritizes received read requests and stores them in request queue <highlight><bold>224</bold></highlight> in prioritized order. Request control circuitry <highlight><bold>222</bold></highlight> may prioritize each received read request in accordance with any suitable prioritization scheme. Request control circuitry <highlight><bold>222</bold></highlight> may, for example, prioritize each received read request based on which processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> issued the read request. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> may reprioritize read requests stored in request queue <highlight><bold>224</bold></highlight> when request control circuitry <highlight><bold>222</bold></highlight> receives any new read requests. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> For block <highlight><bold>108</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> issues one of the prioritized read requests to memory device <highlight><bold>240</bold></highlight>. Memory controller <highlight><bold>220</bold></highlight> may issue each prioritized read request to memory device <highlight><bold>240</bold></highlight> in accordance with any suitable communications protocol. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> issues each prioritized read request in request queue <highlight><bold>224</bold></highlight> to memory device <highlight><bold>240</bold></highlight>. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> issues each read request by issuing one or more control signals over control bus <highlight><bold>232</bold></highlight> and by issuing address signals for the read request over address bus <highlight><bold>234</bold></highlight>. Request control circuitry <highlight><bold>222</bold></highlight> for one embodiment may issue a REQUEST signal over control bus <highlight><bold>232</bold></highlight> to issue each read request to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> For one embodiment where read requests are issued by processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> with a virtual address, request control circuitry <highlight><bold>222</bold></highlight> of memory controller <highlight><bold>220</bold></highlight> may convert any virtual address to a real address prior to or in issuing each prioritized read request to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> For block <highlight><bold>110</bold></highlight>, memory device <highlight><bold>240</bold></highlight> receives the issued read request. For one embodiment, access circuitry <highlight><bold>242</bold></highlight> receives each issued read request and stores the address for the read request in address buffer <highlight><bold>243</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Address buffer <highlight><bold>243</bold></highlight> may have any suitable size. Address buffer <highlight><bold>243</bold></highlight> for one embodiment is sized to store only one address. For another embodiment, address buffer <highlight><bold>243</bold></highlight> is sized to store more than one address. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> For block <highlight><bold>112</bold></highlight>, memory device <highlight><bold>240</bold></highlight> accesses the bits of the program code and/or data requested by the received read request. For one embodiment, access circuitry <highlight><bold>242</bold></highlight> accesses in memory <highlight><bold>246</bold></highlight> the requested bits at the address stored in address buffer <highlight><bold>243</bold></highlight> for the received read request. For one embodiment where memory <highlight><bold>246</bold></highlight> comprises flash memory, for example, access circuitry <highlight><bold>242</bold></highlight> senses the requested bits to access them. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses a predetermined number of bits in memory <highlight><bold>246</bold></highlight> at the address stored in address buffer <highlight><bold>243</bold></highlight> for the received read request. For one embodiment, the predetermined number of bits is equal in number to that for a cache line in cache memory <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, and <highlight><bold>207</bold></highlight>. For one embodiment, a cache line is 256 bits in size. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> For block <highlight><bold>114</bold></highlight>, memory device <highlight><bold>240</bold></highlight> outputs the accessed bits for the received read request to memory controller <highlight><bold>220</bold></highlight>. Memory device <highlight><bold>240</bold></highlight> may output accessed bits to memory controller <highlight><bold>220</bold></highlight> in accordance with any suitable communications protocol. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> For one embodiment, output circuitry <highlight><bold>248</bold></highlight> stores the accessed bits for the received read request in output buffer <highlight><bold>249</bold></highlight>. Output buffer <highlight><bold>249</bold></highlight> may have any suitable size. For one embodiment, output buffer <highlight><bold>249</bold></highlight> is sized to store a cache line. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs the bits stored in output buffer <highlight><bold>249</bold></highlight> over data bus <highlight><bold>236</bold></highlight> to memory controller <highlight><bold>220</bold></highlight>. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs the stored bits over multiple clock cycles by outputting only a portion of the stored bits for each clock cycle. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs a predetermined number of the stored bits for each clock cycle. Any suitable predetermined number may be used. For one embodiment, the predetermined number is equal to the width of data bus <highlight><bold>236</bold></highlight>. For one embodiment where 256 bits are accessed for the received read request, output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs 32-bit portions of the requested program code and/or data over eight clock cycles. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses and outputs only the program code and/or data that is requested by each read request and not any non-requested program code and/or data under any prediction mechanism. Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses and outputs only a cache line requested by each cache fill line read request. By accessing and outputting only what is requested, memory device <highlight><bold>240</bold></highlight> helps use energy in a relatively more efficient manner as no energy is wasted on accessing and outputting non-requested program code and/or data that will not later be requested or used. Also, the performance of read requests will not become unnecessarily delayed due to the additional time required to output the non-requested program code and/or data. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> For block <highlight><bold>116</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> receives bits output from memory device <highlight><bold>240</bold></highlight> for the read request and issues another prioritized read request to memory device <highlight><bold>240</bold></highlight> prior to or while receiving the output bits. Memory controller <highlight><bold>220</bold></highlight> may issue the other prioritized read request to memory device <highlight><bold>240</bold></highlight> in accordance with any suitable communications protocol. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> For one embodiment, response control circuitry <highlight><bold>226</bold></highlight> receives bits output from memory device <highlight><bold>240</bold></highlight> for each read request and stores the received bits in response queue <highlight><bold>228</bold></highlight>. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> issues the next prioritized read request in request queue <highlight><bold>224</bold></highlight> to memory device <highlight><bold>240</bold></highlight>. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> issues the other prioritized read request by issuing one or more control signals over control bus <highlight><bold>232</bold></highlight> and by issuing address signals for the other prioritized read request over address bus <highlight><bold>234</bold></highlight>. Request control circuitry <highlight><bold>222</bold></highlight> for one embodiment may issue a REQUEST signal over control bus <highlight><bold>232</bold></highlight> to issue the other prioritized read request to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Memory controller <highlight><bold>220</bold></highlight> for one embodiment may issue the other prioritized read request at a predetermined time relative to receiving output bits from memory device <highlight><bold>240</bold></highlight>. For one embodiment, response control circuitry <highlight><bold>226</bold></highlight> may signal request control circuitry <highlight><bold>222</bold></highlight> when the output bits for a prior read request are first received. Request control circuitry <highlight><bold>222</bold></highlight> may then issue the other prioritized read request upon receipt of such a signal or relative to receipt of such a signal. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Memory controller <highlight><bold>220</bold></highlight> for another embodiment may issue the other prioritized read request after a predetermined number of clock cycles following the issuance of the just prior read request in anticipation that memory device <highlight><bold>240</bold></highlight> will access and start outputting bits for the just prior read request after a predetermined number of clock cycles following issuance of each read request. Memory controller <highlight><bold>220</bold></highlight> may issue the other prioritized read request after any suitable predetermined number of clock cycles following the issuance of the just prior read request. For one embodiment, memory controller <highlight><bold>220</bold></highlight> issues the other prioritized read request following the same number of clock cycles as used to output the requested program code and/or data for the just prior read request. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> For one embodiment where the other read request was issued by processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> with a virtual address, request control circuitry <highlight><bold>222</bold></highlight> of memory controller <highlight><bold>220</bold></highlight> may convert the virtual address to a real address prior to or in issuing the other read request to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> For block <highlight><bold>118</bold></highlight>, memory device <highlight><bold>240</bold></highlight> receives the other read request. For one embodiment, access circuitry <highlight><bold>242</bold></highlight> receives the other read request and stores the address for the other read request in address buffer <highlight><bold>243</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> For one embodiment where address buffer <highlight><bold>243</bold></highlight> is sized to store more than one address, access circuitry <highlight><bold>242</bold></highlight> may receive the other read request and store the address for the other read request in address buffer <highlight><bold>243</bold></highlight> while accessing the bits of the program code and/or data requested at an address currently stored in address buffer <highlight><bold>243</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> For block <highlight><bold>120</bold></highlight>, memory device <highlight><bold>240</bold></highlight> accesses the bits of the program code and/or data requested by the other read request while outputting bits for the prior read request. For one embodiment, access circuitry <highlight><bold>242</bold></highlight> accesses in memory <highlight><bold>246</bold></highlight> the requested bits at the address stored in address buffer <highlight><bold>243</bold></highlight> for the other read request. For one embodiment where memory <highlight><bold>246</bold></highlight> comprises flash memory, for example, access circuitry <highlight><bold>242</bold></highlight> senses the requested bits to access them. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> For one embodiment where address buffer <highlight><bold>243</bold></highlight> is sized to store more than one address, access circuitry <highlight><bold>242</bold></highlight> may access the bits of the program code and/or data requested by the other read request after the bits for the prior read request have been accessed. Access circuitry <highlight><bold>242</bold></highlight> for one embodiment queues read request addresses in address buffer <highlight><bold>242</bold></highlight> in their order of receipt and controls access to the bits of the program code and/or data at each address in accordance with their queued order. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses a predetermined number of bits in memory <highlight><bold>246</bold></highlight> at the address stored in address buffer <highlight><bold>243</bold></highlight> for the other read request. For one embodiment, the predetermined number of bits is equal in number to that for a cache line in cache memory <highlight><bold>203</bold></highlight>, <highlight><bold>205</bold></highlight>, and <highlight><bold>207</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> For block <highlight><bold>122</bold></highlight>, memory device <highlight><bold>240</bold></highlight> outputs the accessed bits for the other read request to memory controller <highlight><bold>220</bold></highlight>. Memory device <highlight><bold>240</bold></highlight> may output the accessed bits to memory controller <highlight><bold>220</bold></highlight> in accordance with any suitable communications protocol. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> For one embodiment, output circuitry <highlight><bold>248</bold></highlight> stores the accessed bits for the other read request in output buffer <highlight><bold>249</bold></highlight>. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment stores the accessed bits for the other read request in output buffer <highlight><bold>249</bold></highlight> after all bits for the prior read request have been output. For another embodiment, output circuitry <highlight><bold>248</bold></highlight> may store accessed bits for the other read request in output buffer <highlight><bold>249</bold></highlight> while output buffer <highlight><bold>249</bold></highlight> outputs bits for the prior read request. Output circuitry <highlight><bold>248</bold></highlight> may, for example, store such accessed bits in output buffer <highlight><bold>249</bold></highlight> over bits already output for the prior read request. For one embodiment where output buffer <highlight><bold>249</bold></highlight> is sized to store accessed bits for multiple read requests, output circuitry <highlight><bold>248</bold></highlight> may store the accessed bits for the other read request in output buffer <highlight><bold>249</bold></highlight> in locations distinct from those for the bits for the prior read request. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs the bits stored in output buffer <highlight><bold>249</bold></highlight> over data bus <highlight><bold>236</bold></highlight> to memory controller <highlight><bold>220</bold></highlight>. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs the stored bits over multiple clock cycles by outputting only a portion of the stored bits for each clock cycle. Output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs a predetermined number of the stored bits for each clock cycle. Any suitable predetermined number may be used. For one embodiment, the predetermined number is equal to the width of data bus <highlight><bold>236</bold></highlight>. For one embodiment where 256 bits are accessed for the other read request, output circuitry <highlight><bold>248</bold></highlight> for one embodiment outputs 32-bit portions of the requested program code and/or data over eight clock cycles. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses and outputs only the program code and/or data that is requested by each read request and not any non-requested program code and/or data under any prediction mechanism. Memory device <highlight><bold>240</bold></highlight> for one embodiment accesses and outputs only a cache line requested by each cache fill line read request. By accessing and outputting only what is requested, memory device <highlight><bold>240</bold></highlight> helps use energy in a relatively more efficient manner as no energy is wasted on accessing and outputting non-requested program code and/or data that will not later be requested or used. Also, the performance of read requests will not become unnecessarily delayed due to the additional time required to output the non-requested program code and/or data. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> By issuing the other read request to memory device <highlight><bold>240</bold></highlight> prior to or while memory device <highlight><bold>240</bold></highlight> outputs bits for the prior read request and by accessing the bits of the program code and/or data requested by the other read request while outputting bits for the prior read request, the performance of multiple read requests is pipelined. The access latency for each read request subsequent to the first read request may be partially or wholly hidden as memory device <highlight><bold>240</bold></highlight> may output requested bits for each read request relatively sooner following the output of requested bits for a prior read request. Memory device <highlight><bold>240</bold></highlight> may therefore perform multiple read requests with relatively increased data throughput. Memory device <highlight><bold>240</bold></highlight> for one embodiment may output the requested program code and/or data for multiple random read requests as an uninterrupted output stream as long as the time to access the bits for each read request is shorter than the time to output the bits for a just prior read request and as long as each read request is issued such that the bits for the read request may be accessed prior to the output of all of the bits for a just prior read request. This is so regardless of whether the requested program code and/or data for the multiple read requests are stored sequentially in memory <highlight><bold>246</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates, for one embodiment, a timing diagram <highlight><bold>300</bold></highlight> for pipelining multiple read requests. Timing diagram <highlight><bold>300</bold></highlight> comprises timelines for a CLOCK signal, a REQUEST signal, ADDRESS signals, and DATA signals. For one embodiment, memory controller <highlight><bold>220</bold></highlight> issues the CLOCK and REQUEST signals over control bus <highlight><bold>232</bold></highlight>. The ADDRESS signals correspond to signals transmitted by memory controller <highlight><bold>220</bold></highlight> to memory device <highlight><bold>240</bold></highlight> over address bus <highlight><bold>234</bold></highlight>. The DATA signals correspond to signals transmitted by memory device <highlight><bold>240</bold></highlight> to memory controller <highlight><bold>220</bold></highlight> over data bus <highlight><bold>236</bold></highlight>. The REQUEST, ADDRESS, and DATA signals may each be generated on the rising or falling edge of a CLOCK signal. The REQUEST signal for one embodiment, as illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, is an active low signal. For another embodiment, the REQUEST signal may be an active high signal. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, memory controller <highlight><bold>220</bold></highlight> outputs an active REQUEST signal <highlight><bold>302</bold></highlight> and address signals <highlight><bold>304</bold></highlight> for a first read request to memory device <highlight><bold>240</bold></highlight> at a clock cycle <highlight><bold>0</bold></highlight>. Memory device <highlight><bold>240</bold></highlight> accesses a predetermined number of bits at the address designated by address signals <highlight><bold>304</bold></highlight> during clock cycles <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> and outputs the accessed bits as data signal sets <highlight><bold>306</bold></highlight>, <highlight><bold>307</bold></highlight>, <highlight><bold>308</bold></highlight>, <highlight><bold>309</bold></highlight>, <highlight><bold>310</bold></highlight>, <highlight><bold>311</bold></highlight>, <highlight><bold>312</bold></highlight>, and <highlight><bold>313</bold></highlight> at respective clock cycles <highlight><bold>6</bold></highlight>-<highlight><bold>13</bold></highlight>. For one embodiment, data signal sets <highlight><bold>306</bold></highlight>-<highlight><bold>313</bold></highlight> for each respective clock cycle <highlight><bold>6</bold></highlight>-<highlight><bold>13</bold></highlight> are each 32 bits in size. The requested program code and/or data is therefore 256 bits in size. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> At clock cycle <highlight><bold>8</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> outputs to memory device <highlight><bold>240</bold></highlight> another active REQUEST signal <highlight><bold>322</bold></highlight> and address signals <highlight><bold>324</bold></highlight> for another read request while memory device <highlight><bold>240</bold></highlight> is outputting data signal sets <highlight><bold>306</bold></highlight>-<highlight><bold>313</bold></highlight> for the first read request. Memory device <highlight><bold>240</bold></highlight> accesses a predetermined number of bits at the address designated by address signals <highlight><bold>324</bold></highlight> during clock cycles <highlight><bold>9</bold></highlight>-<highlight><bold>13</bold></highlight> and outputs the accessed bits as data signal sets <highlight><bold>326</bold></highlight>, <highlight><bold>327</bold></highlight>, <highlight><bold>328</bold></highlight>, <highlight><bold>329</bold></highlight>, <highlight><bold>330</bold></highlight>, <highlight><bold>331</bold></highlight>, <highlight><bold>332</bold></highlight>, and <highlight><bold>333</bold></highlight> at respective clock cycles <highlight><bold>14</bold></highlight>-<highlight><bold>21</bold></highlight>. Because the other read request was issued six cycles prior to the first clock cycle following the output of data signal sets <highlight><bold>306</bold></highlight>-<highlight><bold>313</bold></highlight> and because the access latency for the other read request is six clock cycles, the access latency for the other read request is hidden as memory device <highlight><bold>240</bold></highlight> outputs data signal sets <highlight><bold>326</bold></highlight>-<highlight><bold>333</bold></highlight> immediately following the output of data signal sets <highlight><bold>306</bold></highlight>-<highlight><bold>313</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Memory controller <highlight><bold>220</bold></highlight> and memory device <highlight><bold>240</bold></highlight> for one embodiment may be optimized to perform read requests at relatively higher clock frequencies, for example, by restricting read requests to program code and/or data of only one predetermined size, such as for a cache line fill for example, and by restricting control over how and when requested program code and/or data is output from memory device <highlight><bold>240</bold></highlight> to memory controller <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> For block <highlight><bold>124</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, memory controller <highlight><bold>220</bold></highlight> outputs the bits received from memory device <highlight><bold>240</bold></highlight> for any prior read requests to the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>. Memory controller <highlight><bold>220</bold></highlight> for one embodiment identifies the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> based on the identity of the originating processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> as specified in each read request. Memory controller <highlight><bold>220</bold></highlight> may output the requested bits for each read request to the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> in any suitable order and in accordance with any suitable communications protocol. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> For one embodiment, response control circuitry <highlight><bold>226</bold></highlight> outputs the requested bits for each read request from response queue <highlight><bold>228</bold></highlight>. Response control circuitry <highlight><bold>226</bold></highlight> for one embodiment may communicate with request control circuitry <highlight><bold>222</bold></highlight> to identify the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> for any requested program code and/or data received from memory device <highlight><bold>240</bold></highlight>. Response control circuitry <highlight><bold>226</bold></highlight> for one embodiment attempts to output the requested bits for read requests in the same order in which each read request was issued to memory device <highlight><bold>240</bold></highlight>. If memory controller <highlight><bold>220</bold></highlight> is unable to output the bits requested by a processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>, for example, because the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> is busy, memory controller <highlight><bold>220</bold></highlight> for one embodiment may attempt to output the bits requested by another processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> and later again attempt to output the bits requested by the busy processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> For block <highlight><bold>126</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> determines whether any more read requests are to be issued to memory device <highlight><bold>240</bold></highlight>. For one embodiment, request control circuitry <highlight><bold>222</bold></highlight> determines whether request queue <highlight><bold>224</bold></highlight> is storing any read requests to be issued to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> If memory controller <highlight><bold>220</bold></highlight> determines another read request is to be issued to memory device <highlight><bold>240</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> for block <highlight><bold>116</bold></highlight> issues another prioritized read request to memory device <highlight><bold>240</bold></highlight> prior to or while receiving the bits output from memory device <highlight><bold>240</bold></highlight> for block <highlight><bold>122</bold></highlight>. With reference to timing diagram <highlight><bold>300</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, memory controller <highlight><bold>220</bold></highlight> for one embodiment outputs an active REQUEST signal <highlight><bold>342</bold></highlight> and address signals <highlight><bold>344</bold></highlight> for the other read request to memory device <highlight><bold>240</bold></highlight> at clock cycle <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Memory device <highlight><bold>240</bold></highlight> for block <highlight><bold>118</bold></highlight> receives the currently issued read request, for block <highlight><bold>120</bold></highlight> accesses the requested bits for the current read request while outputting bits for the just prior read request, and for block <highlight><bold>122</bold></highlight> outputs the accessed bits for the current read request. Memory controller <highlight><bold>220</bold></highlight> for block <highlight><bold>124</bold></highlight> outputs the bits received from memory device <highlight><bold>240</bold></highlight> for any prior read requests to the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> and for block <highlight><bold>126</bold></highlight> determines whether any more read requests are to be issued to memory device <highlight><bold>240</bold></highlight>. Memory controller <highlight><bold>220</bold></highlight> and memory device <highlight><bold>240</bold></highlight> continue to function in accordance with blocks <highlight><bold>116</bold></highlight>, <highlight><bold>118</bold></highlight>, <highlight><bold>120</bold></highlight>, <highlight><bold>122</bold></highlight>, <highlight><bold>124</bold></highlight>, and <highlight><bold>126</bold></highlight> until memory controller <highlight><bold>220</bold></highlight> determines for block <highlight><bold>126</bold></highlight> that no other read request is to be issued to memory device <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> If memory controller <highlight><bold>220</bold></highlight> determines for block <highlight><bold>126</bold></highlight> that no other read request is to be issued to memory device <highlight><bold>240</bold></highlight>, memory controller <highlight><bold>220</bold></highlight> for block <highlight><bold>128</bold></highlight> receives the bits output from memory device <highlight><bold>240</bold></highlight> for block <highlight><bold>122</bold></highlight> and outputs the received output bits for the current read request to the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight>, memory controller <highlight><bold>220</bold></highlight>, and/or memory device <highlight><bold>240</bold></highlight> may function in accordance with any block <highlight><bold>102</bold></highlight>-<highlight><bold>128</bold></highlight> at any suitable time relative to the functioning of processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight>, memory controller <highlight><bold>220</bold></highlight>, and/or memory device <highlight><bold>240</bold></highlight> for any other block <highlight><bold>102</bold></highlight>-<highlight><bold>128</bold></highlight>. As one example, processors <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and/or <highlight><bold>206</bold></highlight> may issue read requests to memory controller <highlight><bold>220</bold></highlight>, and memory controller <highlight><bold>220</bold></highlight> may receive any issued read requests at any suitable time. As another example, memory controller <highlight><bold>220</bold></highlight> may output the bits for any read request to the requesting processor <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, or <highlight><bold>206</bold></highlight> at any suitable time. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Other Exemplary Computer Systems </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an exemplary computer system <highlight><bold>400</bold></highlight> comprising a control processor <highlight><bold>402</bold></highlight>, a digital signal processor (DSP) <highlight><bold>404</bold></highlight>, a memory controller <highlight><bold>420</bold></highlight>, a memory device <highlight><bold>440</bold></highlight> comprising flash memory <highlight><bold>446</bold></highlight>, an input device <highlight><bold>452</bold></highlight>, a display <highlight><bold>454</bold></highlight>, an audio coder/decoder (codec) <highlight><bold>456</bold></highlight>, a volatile memory device <highlight><bold>458</bold></highlight>, and a radio frequency (RF) interface <highlight><bold>460</bold></highlight>. Computer system <highlight><bold>400</bold></highlight> may be used for any suitable handheld and/or wireless device such as, for example, a cellular telephone or a personal digital assistant (PDA). Computer system <highlight><bold>400</bold></highlight> for other embodiments may comprise any other suitable combination of any suitable components. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Input device <highlight><bold>452</bold></highlight>, display <highlight><bold>454</bold></highlight>, and audio codec <highlight><bold>456</bold></highlight> are each coupled to control processor <highlight><bold>402</bold></highlight>. Input device <highlight><bold>452</bold></highlight> may comprise any suitable input device such as, for example, a keyboard, a voice recognition device, and/or a pen tablet for example. Audio codec <highlight><bold>456</bold></highlight> may be used, for example, to couple a microphone, speakers, and/or headphones, for example, to control processor <highlight><bold>402</bold></highlight>. Volatile memory device <highlight><bold>458</bold></highlight> is coupled to control processor <highlight><bold>402</bold></highlight> and to DSP <highlight><bold>404</bold></highlight> by a bus <highlight><bold>410</bold></highlight> and serves as a working memory for control processor <highlight><bold>402</bold></highlight> and/or DSP <highlight><bold>404</bold></highlight>. DSP <highlight><bold>404</bold></highlight> is coupled to control processor <highlight><bold>402</bold></highlight> by bus <highlight><bold>410</bold></highlight> and to RF interface <highlight><bold>460</bold></highlight>. RF interface <highlight><bold>460</bold></highlight> transmits and receives RF signals for computer system <highlight><bold>400</bold></highlight>. DSP <highlight><bold>404</bold></highlight> performs suitable digital signal processing techniques for signals received by RF interface <highlight><bold>460</bold></highlight> and for signals to be transmitted through RF interface <highlight><bold>460</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Memory controller <highlight><bold>420</bold></highlight> is coupled to control processor <highlight><bold>402</bold></highlight> and to DSP <highlight><bold>404</bold></highlight> by bus <highlight><bold>410</bold></highlight>. Control processor <highlight><bold>402</bold></highlight> and DSP <highlight><bold>404</bold></highlight> may each issue read requests to memory controller <highlight><bold>420</bold></highlight> over bus <highlight><bold>410</bold></highlight> to retrieve program code and/or data, for example, stored in flash memory <highlight><bold>446</bold></highlight> of memory device <highlight><bold>440</bold></highlight>. Flash memory <highlight><bold>446</bold></highlight> may be used to store any suitable program code and/or data, for example, for computer system <highlight><bold>400</bold></highlight>. Flash memory <highlight><bold>446</bold></highlight> may be used, for example, to store any suitable firmware, such as operating system software for example, for execution by control processor <highlight><bold>402</bold></highlight> and/or DSP <highlight><bold>404</bold></highlight>. Flash memory <highlight><bold>446</bold></highlight> may also be used, for example, to store data, such as phone directory information for example, for computer system <highlight><bold>400</bold></highlight>. Although illustrated as comprising flash memory <highlight><bold>446</bold></highlight>, memory device <highlight><bold>440</bold></highlight> may comprise any suitable type of memory. Memory controller <highlight><bold>420</bold></highlight> controls the performance of read requests by memory device <highlight><bold>440</bold></highlight> similarly as memory controller <highlight><bold>220</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> controls the performance of read requests by memory device <highlight><bold>240</bold></highlight>. Memory device <highlight><bold>440</bold></highlight> accesses and outputs bits for read requests similarly as memory device <highlight><bold>240</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. For one embodiment where computer system <highlight><bold>400</bold></highlight> is powered using a battery, for example, the use of memory controller <highlight><bold>420</bold></highlight> and memory device <highlight><bold>440</bold></highlight> helps prolong battery life as memory controller <highlight><bold>420</bold></highlight> and memory device <highlight><bold>440</bold></highlight> use energy in a relatively more efficient manner in accessing and outputting requested program code and/or data for multiple read requests. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In the foregoing description, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit or scope of the present invention as defined in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>prioritizing multiple read requests; </claim-text>
<claim-text>issuing a first one of the prioritized read requests to a memory device; </claim-text>
<claim-text>receiving bits from the memory device for the first read request; and </claim-text>
<claim-text>after issuing the first read request, issuing a second one of the prioritized read requests to the memory device prior to or while receiving bits from the memory device for the first read request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each read request requests a predetermined number of bits. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein one of the multiple read requests is a cache line fill read request. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, comprising accessing bits in a memory for the second read request while outputting bits from the memory device for the first read request. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, comprising sensing bits in a flash memory for the second read request while outputting bits from the memory device for the first read request. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, comprising issuing the multiple read requests from one or more hosts to a memory controller for prioritization. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, comprising outputting the bits received from the memory device for the first read request to the host that issued the first read request. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, comprising accessing in a memory for each read request only bits that are requested by the read request. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An apparatus comprising: 
<claim-text>(a) a memory controller to prioritize multiple read requests in an order for issuance, to issue each prioritized read request, and to receive bits for each issued read request, the memory controller to issue a first one of the prioritized read requests prior to or while receiving bits for a second one of the prioritized read requests; and </claim-text>
<claim-text>(b) a memory device to receive read requests issued by the memory controller, to access bits for each received read request, and to output accessed bits to the memory controller for each received read request, the memory device to access bits for the first read request while outputting accessed bits to the memory controller for the second read request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein each read request requests a predetermined number of bits. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein one of the multiple read requests is a cache line fill read request. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the memory controller comprises request control circuitry comprising a request queue, the request control circuitry to prioritize the multiple read requests, to store each prioritized read request in the request queue, and to issue each prioritized read request. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the memory controller outputs bits received from the memory device for each issued read request to a host that originated the read request. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the memory controller comprises response control circuitry comprising a response queue, the response control circuitry to store bits received from the memory device for the read requests in the response queue and to output the stored bits for each read request to a host that originated the read request. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the memory device comprises: 
<claim-text>(i) memory, </claim-text>
<claim-text>(ii) access circuitry to receive read requests issued by the memory controller and to access bits in the memory for each received read request, and </claim-text>
<claim-text>(iii) output circuitry to output accessed bits for each received read request to the memory controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the memory device comprises a flash memory to store bits to be accessed for read requests. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, the memory device to access for each received read request only bits that are requested by the received read request. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer system comprising: 
<claim-text>(a) one or more processors to issue multiple read requests; </claim-text>
<claim-text>(b) a memory controller to receive the multiple read requests, to prioritize the multiple read requests in an order for issuance, to issue each prioritized read request, to receive bits for each issued read request, and to output received bits for each issued read request to a host that originated the read request, the memory controller to issue a first one of the prioritized read requests prior to or while receiving bits for a second one of the prioritized read requests; and </claim-text>
<claim-text>(c) a memory device to receive read requests issued by the memory controller, to access bits for each such received read request, and to output accessed bits to the memory controller for each such received read request, the memory device to access bits for the first read request while outputting accessed bits to the memory controller for the second read request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein each read request requests a predetermined number of bits. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein each processor has a cache memory and one of the multiple read requests is a cache line fill read request. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the memory controller comprises request control circuitry comprising a request queue, the request control circuitry to prioritize the multiple read requests, to store each prioritized read request in the request queue, and to issue each prioritized read request. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the memory controller comprises response control circuitry comprising a response queue, the response control circuitry to store bits received from the memory device for the read requests in the response queue and to output the stored bits for each read request to a host that originated the read request. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the memory device comprises: 
<claim-text>(i) memory, </claim-text>
<claim-text>(ii) access circuitry to receive read requests issued by the memory controller and to access bits in the memory for each such received read request, and </claim-text>
<claim-text>(iii) output circuitry to output accessed bits for each such received read request to the memory controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the memory device comprises a flash memory to store bits to be accessed for read requests. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the one or more processors comprise a control processor and/or a digital signal processor. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, the memory device to access for each read request only bits that are requested by the read request.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005242A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005242A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005242A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005242A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005242A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
