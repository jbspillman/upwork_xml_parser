<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005130A1-20030102-D00000.TIF SYSTEM "US20030005130A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005130A1-20030102-D00001.TIF SYSTEM "US20030005130A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005130A1-20030102-D00002.TIF SYSTEM "US20030005130A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005130A1-20030102-D00003.TIF SYSTEM "US20030005130A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005130A1-20030102-D00004.TIF SYSTEM "US20030005130A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005130</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895964</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>228000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>710</class>
<subclass>038000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Audio-video management in UPnP</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Doreen</given-name>
<middle-name>Yining</middle-name>
<family-name>Cheng</family-name>
</name>
<residence>
<residence-us>
<city>Los Altos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Corporate Patent Counsel</name-1>
<name-2>U.S. Philips Corporation</name-2>
<address>
<address-1>580 White Plains Road</address-1>
<city>Tarrytown</city>
<state>NY</state>
<postalcode>10591</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">To support the communication of audio-video information, and other time-sensitive information, via UPnP networks, the UPnP architecture is augmented to include: a resource management module that supports multiple contenders for a single device or its sub-units without races or hazards, a path manager that provides source-to-sink path management, and an action manager that enables A/V applications to schedule activities. Together, the resource manager and path manager ensure path validity, integrity, and quality of service. The resource manager is configured to manage device resources that are distributed in heterogeneous networks, such as resources distributed in networks using mixed Ethernet, 1394, 802.11, USB, HPNA. The path manager is configured to manage network resources that are distributed in heterogeneous networks. The resource manager and the path manager are also configured to ensure that a path across network boundaries is valid. Scheduling actions are the responsibility of each action manager, which acts as an agent of the application, and is a client of the resource manager and the path manager. The resource manager and the path manager are configured as an integral part of a UPnP framework, and as such, communicates with applications via HTTP messages. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to the field of consumer products and home networking, and in particular to providing audio-video management capabilities to UPnP 1.0. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> &ldquo;Universal Plug and Play (UPnP) is an architecture for pervasive peer-to-peer network connectivity of intelligent appliances, wireless devices, and PCs of all form factors. It is designed to bring easy-to-use, flexible, standards-based connectivity to ad-hoc or unmanaged networks whether in the home, in a small business, public spaces, or attached to the Internet. Universal Plug and Play is a distributed, open networking architecture that leverages TCP/IP and the Web technologies to enable seamless proximity networking in addition to control and data transfer among networked devices in the home, office, and public spaces.&rdquo;<highlight><superscript>1 </superscript></highlight><footnote id="FOO-00001">1 &ldquo;Universal Plug and Play Device Architecture&rdquo;, Version 1.0, Jun. 8, 2000, &copy; 1999-2000 Microsoft Corporation, incorporated by reference herein. </footnote></paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Although UPnP provides for connectivity among a variety of devices in a home network, it is not well suited for the communication of audio-video information in a multiple application environment. Audio-video (AV) information transfer, for example from a VCR or DVD player to a television screen, typically requires a dedicated point-to-point communications channel with at least a given level of Quality-of-Service (QoS). With regard to the transfer of AV information, or other time-sensitive communications, UPnP1.0 has three main weaknesses. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The first weakness of UPnP is that it does not support multiple applications that may contend for control of the same device or its sub-units. As a result, when multiple applications try to change the state of a single device or its sub-units, race conditions can occur and the effect seen by the applications may be non-deterministic. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The second weakness is that UPnP leaves the burden of ensuring quality of service (QoS), which includes stream management, to the applications. As a result, an application with real time requirements must directly manage network resources. For example, a UPnP application must setup the connections, and must allocate channels and bandwidth to support the given QoS. As is known in the art, this task is quite burdensome, particularly if the application needs to deal with devices on different networks, such as streaming a video from a 1394 device to wireless screens that belong to different wireless networks. The application is typically required to use different interfaces provided by different networks to perform the streaming task. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The third weakness is that a UPnP application must be resident to execute any activities, and cannot merely schedule activities to start automatically. This lack of scheduling results in many applications being resident at the same time, and is less efficient than leaving the system to take care of requests for future activities, or requests for repetitive tasks. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> It is an object of this invention to provide a system, method, and architecture to support the transfer of audio-video information via a UPnP network. It is a further object of this invention to provide a UPnP network management system that controls multiple-contender access to devices and sub-units of devices. It is a further object of this invention to provide a UPnP network management system that provides reliable communications at a given quality-of-service level. It is a further object of this invention to provide a UPnP network management system that provides for the scheduling of activities. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> These objects and others are achieved by adding the following modules and systems to the UPnP architecture: </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> a resource management module that supports multiple contenders for a single device or its sub-units without races or hazards, and works with path managers to ensure path validity and integrity; </paragraph>
<paragraph id="P-0012" lvl="2"><number>&lsqb;0012&rsqb;</number> a path manager that provides source-to-sink path management, including ensuring path validity, integrity, and quality of service; and </paragraph>
<paragraph id="P-0013" lvl="2"><number>&lsqb;0013&rsqb;</number> an action manager that enables A/V applications to schedule activities. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The resource manager and the path manager are configured to manage device and network resources that are distributed in heterogeneous networks, such as resources distributed in networks using mixed Ethernet, 1394, 802.11, HyperLAN2, USB, HPNA, and are configured to ensure that a path across network boundaries will provide effective communications. Scheduling actions are the responsibility of the action manager. The action manager is a client of the resource manager and the path manager, and acts as an agent of the application. The resource manager and the path manager are configured as an integral part of UPnP framework, and as such, communicate with applications via HTTP messages. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The invention is explained in further detail, and by way of example, with reference to the accompanying drawings wherein: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example block diagram of a system comprising UPnP user control points (UCPs) that interact with multiple heterogeneous networks. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example block diagram of a system for bridging a non-IP network with UPnP user control points. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an example block diagram of a UPnP architecture that supports the communication of time-sensitive information across multiple heterogeneous networks in accordance with this invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example flow diagram of a process for reserving device resources along a communication path in accordance with this invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an example flow diagram of a process for setting up network segments along a communication path in accordance with this invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Throughout the drawings, the same reference numerals indicate similar or corresponding features or functions. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Copending U.S. patent application &ldquo;UPnP ARCHITECTURE FOR HETEROGENEOUS NETWORK OF SLAVE DEVICES&rdquo;, U.S. Ser. No. 09/736,999, filed Dec. 13, 2000 for Doreen Yining Cheng, Attorney Docket US008063, teaches a modification to the conventional UPnP architecture to facilitate UPnP device control and network management of non-UPnP-compatible devices on non-IP (Internet Protocol) networks, and is incorporated by reference herein. Each non-IP network is provided with UPnP proxy enabling and interfacing logic that effects the UPnP addressing, discovery, and description processes for each of the devices on one or more non-IP networks. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example block diagram of a system <highlight><bold>100</bold></highlight> as taught in this copending application, comprising UPnP controllers <highlight><bold>161</bold></highlight> on an IP network <highlight><bold>160</bold></highlight> that interact with devices <highlight><bold>171</bold></highlight>, <highlight><bold>181</bold></highlight> on multiple heterogeneous networks <highlight><bold>170</bold></highlight>, <highlight><bold>180</bold></highlight>. For ease of reference, the UPnP controllers <highlight><bold>161</bold></highlight> are hereinafter referred to as user control points (UCPs), consistent with the commonly used term for such controllers, although the invention is applicable to any form of UPnP-compatible control entities. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The UPnP enabling logic <highlight><bold>120</bold></highlight> in a host system <highlight><bold>110</bold></highlight> interacts with the controlled, or slave, devices <highlight><bold>171</bold></highlight>, <highlight><bold>181</bold></highlight> via slave network interfaces <highlight><bold>140</bold></highlight>, <highlight><bold>150</bold></highlight>, respectively. Although a single host system <highlight><bold>110</bold></highlight> is illustrated, one of ordinary skill in the art will recognize that the host system <highlight><bold>110</bold></highlight> may be distributed among a variety of devices. An example USB network <highlight><bold>170</bold></highlight> and a Bluetooth RF network <highlight><bold>180</bold></highlight> are illustrated, although the principles of this invention are applicable to virtually any network that facilitates control of devices on the network, including a HAVi-compatible network, such as an IEEE 1394 network, an 802.11 network, a HomeRF network, a Firefly network, a power line network, such as an X-10 network, and a Jini-compatible network. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The UPnP enabling logic <highlight><bold>120</bold></highlight> in the host system <highlight><bold>110</bold></highlight> effects the transformation and coordination of commands and messages between the UPnP user control points <highlight><bold>161</bold></highlight> and the slave devices <highlight><bold>171</bold></highlight>, <highlight><bold>181</bold></highlight>. For ease of reference, UPnP-compliant objects on the IP network <highlight><bold>160</bold></highlight> are referred to as UPnP objects, and device on the non-IP networks <highlight><bold>170</bold></highlight>, <highlight><bold>180</bold></highlight> are referred to as non-UPnP devices. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example block diagram of a host system <highlight><bold>110</bold></highlight> for bridging a non-IP network <highlight><bold>170</bold></highlight>, such as a USB network, with UPnP user control points <highlight><bold>161</bold></highlight>. As illustrated, the UPnP enabling logic <highlight><bold>120</bold></highlight> interacts with the UCPs <highlight><bold>161</bold></highlight> on the IP network <highlight><bold>160</bold></highlight> through a UPnP stack <highlight><bold>130</bold></highlight> that includes HTTP <highlight><bold>231</bold></highlight> on top of TCP/IP and UDP/IP <highlight><bold>232</bold></highlight>, discussed further below. The UPnP enabling logic <highlight><bold>120</bold></highlight> also interacts with the slave network interface <highlight><bold>140</bold></highlight> to effect control and messaging with the slave devices <highlight><bold>171</bold></highlight>. In this example, the USB network interface <highlight><bold>140</bold></highlight> includes device drivers <highlight><bold>241</bold></highlight>, class drivers <highlight><bold>242</bold></highlight>, a USB stack <highlight><bold>243</bold></highlight>, and a USB Host controller <highlight><bold>244</bold></highlight>, consistent with existing USB standards. As discussed further below, the slave network interface <highlight><bold>140</bold></highlight> provides the UPnP enabling logic <highlight><bold>120</bold></highlight> with information about each device <highlight><bold>171</bold></highlight> on the network <highlight><bold>170</bold></highlight>, the current status (connected/disconnected/standby/etc.) of each device <highlight><bold>171</bold></highlight>, current capabilities of each device <highlight><bold>171</bold></highlight>, and so on. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an example block diagram of a UPnP architecture in accordance with this invention. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is derived from the aforementioned copending U.S. patent application. This invention provides the necessary features and functions to the enabling logic <highlight><bold>120</bold></highlight> to facilitate efficient and effective transfer of audio-video information, or other time-sensitive information among devices on heterogeneous networks. Specifically, the action management module <highlight><bold>310</bold></highlight>, the resource management module <highlight><bold>320</bold></highlight>, and the path management module <highlight><bold>330</bold></highlight>, and their associated databases <highlight><bold>315</bold></highlight>, <highlight><bold>325</bold></highlight>, <highlight><bold>335</bold></highlight>, respectively, are provided to support the communication of A/V and other time-sensitive information via a UPnP-enabled heterogeneous network. The UPnP network management system of this invention comprises one or more UPnP proxy enabling logic blocks <highlight><bold>120</bold></highlight> that are configured to to control multiple-contender access to devices and sub-units of devices; to provide reliable communications at a given quality-of-service level, as required; and to provide for the scheduling of activities, as detailed below. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> For ease of understanding, only those functions of the UPnP proxy enabling logic <highlight><bold>120</bold></highlight> that are affected by the features or functions of this invention are discussed herein. Also for ease of understanding, the following definitions are provided. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Device Resources, or simply Resources: Device resources include devices and their subunits. For example, a VCR device and its sub-units such as tuner, clock, timer, and tape transport are device resources. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Network Resources. Network resources include channels and bandwidth. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Path: A path is a sequence of ordered, network-connected device resources starting from a source resource and ending at a sink resource. An A/V stream can flow through a path following the order of the sequence. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A/V action, or simply Action: An A/V action corresponds to a specific type of A/V stream, or other time-sensitive stream, flowing through a path, starting at a specific time, ending at another specific time, and possibly occurring periodically. For example, a recording action provides an MPEG2 video stream from the VCR tuner to the PC disk starting at 3:30 pm, ending at 5:00 pm every day. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In accordance with this invention, the scheduling of an A/V action is effected in the following sequence: </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> 1. Reserve all the resources along the path of the action. The reservation takes effect starting at the time when the action is to be executed, and lasts for the time duration of the action; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> 2. Set up the connections and allocate network resources along the path of the action according to its QoS requirements; and </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> 3. Schedule the action at the specified time. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In a preferred embodiment, an application is provided the option of managing resource reservation, path setting, and scheduling activities directly, or it can request the action manager <highlight><bold>310</bold></highlight> to manage these activities. By providing an action manager <highlight><bold>310</bold></highlight>, the application can be free from the concerns of detailed resource management and path management. Preferably, network resources are allocated and the path is set up immediately prior to the time that an action is to take place, to maximize the use of network resources, although device resources can be reserved well before the effective time by the action manager <highlight><bold>310</bold></highlight>, or the application. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In a preferred embodiment, each path manager has a corresponding peer resource manager. Together, the resource and path managers manage the device resources and network resources in a particular network, and ensure path validity and integrity. For example, a resource manager of a 1394 network manages the device resources in the network, and the peer path manager manages the network resources that connect the device resources. Resource managers ensure that device resources along an entire path are either all reserved, or all released, by communicating with each other. Similarly, path managers ensure that the entire path is setup, also by communicating with each other. The path managers also inform their corresponding peer resource managers to release network resources in case of tear-down. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In a preferred embodiment of this invention, the conventional UPnP specification is amended to include HTTP request and response commands to support resource management, path management, and scheduling. The resource management commands include RESERVE and RELEASE, with a message body that identifies the path whose resources are to be reserved, and the starting time and the ending time for the reservation. The path management commands include SETUP and TEARDOWN, with a message body that includes the path, the type and characteristics of the data stream, the quality-of-service (QoS) requirements of the stream, and the starting time and the ending time for the path setup. The scheduling commands include SCHEDULE and UNSCHEDULE, with a message body that includes the path, the starting time (including &lsquo;now&rsquo;), the ending time of the action, the type and characteristics of the data stream, and the quality-of-service QoS requirements of the stream. The scheduling commands allow an application to exit the network once the scheduling command is submitted. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> To communicate the availability of the facilities of this invention, the device description database <highlight><bold>305</bold></highlight> contains the location (as a Universal Resource Locator (URL)) of the action manager <highlight><bold>310</bold></highlight>, the resource manager <highlight><bold>320</bold></highlight>, and the path manager <highlight><bold>330</bold></highlight> associated with each device or service. In a preferred embodiment, the Device Manager Module <highlight><bold>340</bold></highlight> automatically adds these URLs to the device description database <highlight><bold>305</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="7"><number>&lsqb;0041&rsqb;</number> The HTTP Server <highlight><bold>231</bold></highlight> </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> At initialization time, the HTTP server <highlight><bold>231</bold></highlight> creates one thread for every resource manager <highlight><bold>320</bold></highlight>, path manager <highlight><bold>330</bold></highlight>, and action manager <highlight><bold>310</bold></highlight>. Preferably, one manager of each type is set for every network, and a configuration file (not illustrated) is used to indicate that a particular network will use none or one or more managers of a particular type. The HTTP server <highlight><bold>231</bold></highlight> also recognizes and dispatches requests, discussed further below, that are directed to the resource managers <highlight><bold>320</bold></highlight>, path managers <highlight><bold>330</bold></highlight>, and action managers <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="7"><number>&lsqb;0043&rsqb;</number> The Resource Manager Module <highlight><bold>320</bold></highlight> </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A primary function of the resource manager module <highlight><bold>320</bold></highlight> is to avoid race conditions when multiple applications try to use the same device or sub-unit. Preferably, the resource manager <highlight><bold>320</bold></highlight> is network specific, and is responsible for managing the resources, or a subset of the resources, in the corresponding network. For example, in a UPnP environment composed of 1394 devices and 802.11 devices, at least two resource manager modules <highlight><bold>320</bold></highlight> are provided, one for 1394 devices and one for 802.11 devices. The 1394 resource manager is responsible for managing 1394 devices and their sub-units, and the 802.11 manager is responsible for 802.11 devices and their sub-units. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Because the resource managers <highlight><bold>320</bold></highlight> manage resources that are distributed in heterogeneous networks, such as resources distributed in networks using mixed Ethernet, 1394, 802.11, USB, HPNA, and so on, each resource manager <highlight><bold>320</bold></highlight> is configured to ensure that a path across network boundaries will operate properly. The resource manager <highlight><bold>320</bold></highlight> ensures an all-or-none reservation, such that a reservation is established if and only if all of the entities along the path, from source to sink, can be suitably configured and reserved for the intended transaction. The resource manager <highlight><bold>320</bold></highlight> is an integral part of the UPnP framework and communicates with an application via HTTP messages that are communicated via the HTTP server <highlight><bold>231</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In operation, an application or a UPnP system component, such as an action manager <highlight><bold>310</bold></highlight>, issues a resource reservation request. By doing so, it becomes a requester. Every resource manager who receives a reservation request (referred to as an &ldquo;active manager&rdquo; below) must ensure the validity of a path, and must participate in the all-or-none reservation process. For this reason, all requests such as RESERVE, RELEASE, SETUP, and TEARDOWN indicate the entire path along which the device and network resources are to be managed. A path is valid only if all the device resources along the path are reachable. A device resource is reachable if it is under the responsibility of the active manager, or if it has a resource manager and the resource manager is reachable. A resource manager is reachable only if it responds to a request from the active manager before a defined time deadline elapses, via, for example, an acknowledgment message. The above definition of reachability and path validity also applies to network resources and path managers. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> To avoid dead lock, a requester reserves all resources along the path of an action. If any resource is not available, the reservation fails. As an example, before trying to stream video from a VCR to a TV display, the application first reserves the VCR tuner and the TV display. If it cannot reserve both, it does not start the streaming. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example flow diagram of the primary logic of a reservation process, suitable for use by the example resource manager <highlight><bold>320</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. A requester sends a request, which may be either a &ldquo;RESERVE&rdquo; message or a &ldquo;RELEASE&rdquo; message, to any known resource manager. Each resource manager executes a continuous loop, waiting to receive the message, at <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> If, at <highlight><bold>415</bold></highlight>, the message is a RESERVE request, the manager attempts to reserve all the resources along the path and under its responsibility, via the loop <highlight><bold>420</bold></highlight>-<highlight><bold>435</bold></highlight>. At <highlight><bold>425</bold></highlight>, the receiving resource manager first tries to find a resource yet to be reserved. If found and the resource is under the responsibility of the receiving resource manager, it tries to reserve the resource. If the reservation is successful, at <highlight><bold>430</bold></highlight>, it modifies the reservation request to indicate that this resource has been reserved, and proceeds to find the next yet-to-be-reserved resource. The process <highlight><bold>420</bold></highlight>-<highlight><bold>435</bold></highlight> is repeated until the resource manager has either successfully reserved all the resources in the path and under its responsibility or it has failed to reserve one such resource. In the case of a failed reservation, at <highlight><bold>430</bold></highlight>, the resource manager sends a FAILED message to the requester, at <highlight><bold>480</bold></highlight>. The resource manager then releases all the resources that it has reserved for this task, and sends a RELEASE message to all prior resource managers, terminates the reservation for this path, at <highlight><bold>485</bold></highlight>, and updates the resource management database <highlight><bold>325</bold></highlight>, at <highlight><bold>490</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> If, via the loop <highlight><bold>420</bold></highlight>-<highlight><bold>435</bold></highlight>, the resource manager has successfully reserved all the resources under its responsibility, it will check, at <highlight><bold>440</bold></highlight>, whether there are still more resources to be reserved. If not, the resource manager sends a SUCCESS message to the requester, at <highlight><bold>445</bold></highlight>, updates its corresponding resource management database <highlight><bold>325</bold></highlight>, at <highlight><bold>490</bold></highlight>, and terminates the reservation for this path. If, at <highlight><bold>440</bold></highlight>, there are more yet-to-be-reserved resources in the path, it marks the resources that it just reserved as &ldquo;reserved&rdquo;, forwards the request to the next resource manager, at <highlight><bold>450</bold></highlight>, and waits for an acknowledgement message from the next resource manager. If, at <highlight><bold>455</bold></highlight>, it does not receive an acknowledgement message before a timeout, it sends a FAILED message to the requester, at <highlight><bold>480</bold></highlight>, releases all the resources it has reserved for the request, sends a RELEASE message to all the prior resource managers, updates its corresponding resource management database <highlight><bold>325</bold></highlight>, at <highlight><bold>490</bold></highlight>, and terminates the reservation for this path. If, at <highlight><bold>455</bold></highlight>, the resource manager receives an acknowledgement message before a time out, the resource manager updates its corresponding resource management database <highlight><bold>325</bold></highlight>, at <highlight><bold>490</bold></highlight>, loops back to <highlight><bold>410</bold></highlight>, and repeats the above process for each subsequent request. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> If, at <highlight><bold>415</bold></highlight>, the message is RELEASE, the resource manager first checks whether the requester is qualified to release the resources listed, at <highlight><bold>460</bold></highlight>. A requester is qualified to release a resource if the requester is another resource manager <highlight><bold>320</bold></highlight>, a path manager <highlight><bold>330</bold></highlight>, an action manager <highlight><bold>310</bold></highlight>, or the owner (the application for which the resources are reserved) of the resources. If, at <highlight><bold>460</bold></highlight>, the requester is not qualified to release the resources, the request is ignored. Optionally, a FAILED message can be sent to the unqualified requester. If, at <highlight><bold>460</bold></highlight>, the requester is qualified, the resource manager releases the resources under its responsibility that have been reserved for the path, at <highlight><bold>465</bold></highlight>, and updates its corresponding resource management database <highlight><bold>325</bold></highlight>, at <highlight><bold>490</bold></highlight>. The resource manger then goes back to <highlight><bold>410</bold></highlight> to serve a new request. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Additionally (not illustrated), to assure that resources are released, even if a requester does not explicitly release the resource, the resource manager <highlight><bold>320</bold></highlight> is configured to release all resources at the expiration of the reservation time period, or soon thereafter. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In addition to, and/or in conjunction with, the above described reservation activities of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the resource manager <highlight><bold>320</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> in a preferred embodiment of this invention also performs the following functions. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The resource manager <highlight><bold>320</bold></highlight> creates and maintains the resource management database <highlight><bold>325</bold></highlight>, which is preferably implemented as an in-core data structure such as a table. For each resource, the database keeps information about whether the resource is reserved or not, the owner of the resource, the starting and ending time of the reservation, periodicity of the reservation, and the resource management related control functions. If a reservation is made by a UPnP system component on behalf of an application, the information related to the component is also recorded. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> When the resource manager <highlight><bold>320</bold></highlight> receives a RESERVE request, it attempts to reserve the requested resources, while checking path validity and enforcing the all-or-none reservation as described in the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. If its portion of the reservation succeeds, the resource manager <highlight><bold>320</bold></highlight> records the reservation in the database <highlight><bold>325</bold></highlight>. If the resource provides resource management control functions, the resource manager also forms an XML/SOAP message and sends it to the corresponding Service Control Module <highlight><bold>370</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The resource manager <highlight><bold>320</bold></highlight> also provides an interface for receiving notification about the arrival or departure of a resource. When it receives an arrival notification, it creates an entry in the database <highlight><bold>325</bold></highlight>, fetches the description of the resource, extracts the information about the resource management related control functions for the resource, and enters the information into the database <highlight><bold>325</bold></highlight>. When the resource manager <highlight><bold>320</bold></highlight> receives a departure notification, it can either delete the entry, or mark the entry to indicate the departure of the resource. By marking the entry, the processing required to recreate the entry when the resource returns is avoided. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Additionally, the resource manager <highlight><bold>320</bold></highlight> provides an interface for a UPnP system component, such as the action manager <highlight><bold>310</bold></highlight> or path manager <highlight><bold>330</bold></highlight>, to reserve or release resources without going through HTTP messaging. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The resource manager <highlight><bold>320</bold></highlight> also provides administrative and notification functions. The resource manager <highlight><bold>320</bold></highlight> provides an interface for queries into its database <highlight><bold>325</bold></highlight>, for example, a query regarding whether a requester is the owner of a particular resource. It also subscribes to the events that are relevant to resource management for all resources under its responsibility, via the event subscription module <highlight><bold>360</bold></highlight>. When it receives notification of an event, the resource manager <highlight><bold>320</bold></highlight> updates the database <highlight><bold>325</bold></highlight>, and informs the owner, if appropriate. </paragraph>
<paragraph id="P-0059" lvl="7"><number>&lsqb;0059&rsqb;</number> The Path Manager Module <highlight><bold>330</bold></highlight> </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The path manager <highlight><bold>330</bold></highlight> is responsible for managing network resources and device connection objects. Device connection objects include, for example in IEC61883, device plugs and sub-unit plugs. It connects the device resources along the path, and allocates network resources to ensure source-to-sink setup and quality of service. As a result, in a preferred embodiment of this invention, an application only needs to specify the needs and characteristics of an A/V stream to the path manager <highlight><bold>330</bold></highlight>, without any knowledge of the characteristics of the resources needed. An application, or a UPnP system component, such as an action manager <highlight><bold>310</bold></highlight>, can issue a path setup request. By doing so, the application or the component becomes a requester. A path setup request includes the path to be setup, the starting and ending time when the path is needed, the type and characteristics of the stream, and QoS requirements of the stream. As in the case of the device resource manager <highlight><bold>320</bold></highlight>, the path manager <highlight><bold>330</bold></highlight> is configured to assure an all-or-none path integrity. If any connection cannot be made, or any network resources cannot be allocated, the states of all the objects related to the path are reset and all device resources and network resources are released. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In a preferred embodiment, a path manager <highlight><bold>330</bold></highlight> executes a continuous loop as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Since the logic of the loop is similar to the logic of the loop in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, details common to both are not repeated here. A requester sends the request to any known path manager <highlight><bold>330</bold></highlight>. If the request is SETUP, the receiving path manager <highlight><bold>330</bold></highlight> attempts to setup all the segments in the path that are under its responsibility, via the loop <highlight><bold>520</bold></highlight>-<highlight><bold>535</bold></highlight>. If all these segments can be successfully set, the path manager marks the segments it just set up as &ldquo;Set&rdquo;, forwards the message to the path manager of the next as-yet-unset segment and waits for the next path manager to respond, at <highlight><bold>550</bold></highlight>. If no response is received before a time out, at <highlight><bold>555</bold></highlight>, the path manager sends a failure message to the requester, at <highlight><bold>580</bold></highlight>, tears down all the network segments under its responsibility, and sends a TEAR DOWN message to all prior path managers who have set up the segments for this path, at <highlight><bold>585</bold></highlight>. It updates the corresponding path management database at <highlight><bold>595</bold></highlight> before looping back to <highlight><bold>510</bold></highlight>. Tearing down a path includes resetting all device-related objects in the path and releasing all network resources for the path. The process continues until the entire path is set without a failure. The path manager <highlight><bold>330</bold></highlight> that detects the end after its own successful setup, at <highlight><bold>540</bold></highlight>, sends a success response back to the requester, at <highlight><bold>545</bold></highlight>, updates the corresponding path management database at <highlight><bold>595</bold></highlight>, and goes back to <highlight><bold>510</bold></highlight> to serve a new request. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> If, in the process, a path manager <highlight><bold>330</bold></highlight> cannot set all the segments under its responsibility, at <highlight><bold>530</bold></highlight>, it sends a Failure notice to the requestor at <highlight><bold>580</bold></highlight>, releases all the network resources under its responsibility, and sends a TEAR DOWN message to all prior path managers who have set up the segments for this path, at <highlight><bold>585</bold></highlight>. It also informs the peer resource manager <highlight><bold>320</bold></highlight> about the tear down, via the aforementioned release request, at <highlight><bold>590</bold></highlight>, updates the corresponding path management database at <highlight><bold>595</bold></highlight>, and terminates the setup process by going back to the beginning of the loop to serve a new request. Failure of allocation can occur when a path manager cannot satisfy the lower limit of the network resource requirements of the request, that is, when the total bandwidth available is less than the minimum bandwidth required. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> If, at <highlight><bold>515</bold></highlight>, the request is a TEAR DOWN request, the path manager <highlight><bold>330</bold></highlight> first checks whether the requester is qualified to tear down the path. A requester is qualified to tear down a path if it is a resource manager <highlight><bold>320</bold></highlight>, another path manager <highlight><bold>330</bold></highlight>, an action manager <highlight><bold>310</bold></highlight>, or the owner of the path. An owner of a path owns all the resources in the path at the time of the request, and for the time duration indicated in the request. If the requester is qualified, the path manager <highlight><bold>330</bold></highlight> tears down the segment under its responsibility, at <highlight><bold>565</bold></highlight>, informs its peer resource manger to release resources already reserved for this path, at <highlight><bold>570</bold></highlight>, and updates the corresponding path management database, at <highlight><bold>595</bold></highlight>, before looping back to <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In addition to, and/or in conjunction with, the above described path creation process, the path manager <highlight><bold>330</bold></highlight> in a preferred embodiment of this invention performs the following functions. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The path manager <highlight><bold>330</bold></highlight> creates and maintains the path database <highlight><bold>335</bold></highlight>. The path database <highlight><bold>335</bold></highlight> contains the information needed for setting up a path and satisfying the QoS requirements. For each path, the path manager <highlight><bold>330</bold></highlight> records the state and the capability of the resources, the network resources allocated, the owner requester, the owner action, and so on. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Upon receipt of a SETUP request, the path manager <highlight><bold>330</bold></highlight> attempts to setup the segments of the path under its responsibility and ensures path setup integrity, as detailed above. The path manager <highlight><bold>330</bold></highlight> records the information about the path in the database <highlight><bold>335</bold></highlight> if it is successful in its portion of setup. A path manager <highlight><bold>330</bold></highlight> of a particular network understands how to setup a path in this network. For example, a path manager of a 1394 network will use &ldquo;plugs&rdquo;, and follow the rules associated with the 1394 standards and protocols, such as IEC61883, regarding the connection of devices and/or their sub-units via these plugs. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> For networks that can guarantee QoS, such as 1394 networks, the path manager <highlight><bold>330</bold></highlight> allocates network resources to satisfy the QoS requirements from the requester. For networks that cannot guarantee QoS requirements, such as IP/Ethernet, the path manager <highlight><bold>330</bold></highlight> allocates the best facility available. For example, the path manager <highlight><bold>330</bold></highlight> tries to use DifServe-like facilities in an Ethernet network. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The path manager <highlight><bold>330</bold></highlight> provides an interface for a UPnP system component, such as a resource manager <highlight><bold>320</bold></highlight>, to pass a list of resources that have been released. When the path manager <highlight><bold>330</bold></highlight> receives such a list, it tears down the path that contains these resources and updates the database <highlight><bold>335</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The path manager <highlight><bold>330</bold></highlight> also provides an interface for receiving notification about the arrival or departure of a resource. When it receives an arrival notification, the path manager <highlight><bold>330</bold></highlight> creates an entry in the database, fetches the description of the device resources, extracts the information about the path management related control functions, and enters the information into the database <highlight><bold>335</bold></highlight>. When it receives a departure notification, the path manager <highlight><bold>330</bold></highlight> either deletes the entry, or marks the entry to indicate the departure of the resource. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The path manager <highlight><bold>330</bold></highlight> also provides an interface for querying the path database <highlight><bold>335</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="7"><number>&lsqb;0071&rsqb;</number> The Action Manager Module <highlight><bold>310</bold></highlight> </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The action manager module <highlight><bold>310</bold></highlight> enables an application to schedule actions, leaving the action manager <highlight><bold>310</bold></highlight> to take care of the action requests. The action manager <highlight><bold>310</bold></highlight> also frees an application from details of resource management, path setup, and action management. In a preferred embodiment, a scheduling request includes the path, the starting and ending time of the action, the type and characteristics of the A/V streams, and QoS requirements of the stream. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The action manager <highlight><bold>310</bold></highlight> performs the following actions. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The action manager <highlight><bold>310</bold></highlight> creates and maintains the action database <highlight><bold>315</bold></highlight>. The database <highlight><bold>315</bold></highlight> records the information regarding how to manage an action. The information includes the path, the starting and ending time, and the application that scheduled the action, the type and characteristics of the A/V streams, and QoS requirements of the stream. For efficiency, the database <highlight><bold>315</bold></highlight> preferably organizes the actions in a time queue. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> When the action manager <highlight><bold>310</bold></highlight> receives a SCHEDULE request, it sends a RESERVE request to the resource manager <highlight><bold>320</bold></highlight> of a resource in the path. When it receives a success response, if the action starting time is &ldquo;now&rdquo;, the action manager <highlight><bold>310</bold></highlight> sends a SETUP request to a path manager in the path. If it receives a success response, it starts the requested action. If the action starting time is in the future, the action manager <highlight><bold>310</bold></highlight> enters the action into the database <highlight><bold>315</bold></highlight> to wait for the execution time to arrive. Because resource managers and path managers properly release all device and network resources upon a failure, action managers do not need to initiate the release. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The action manager <highlight><bold>310</bold></highlight> gives itself sufficient length of time to setup the path required by an action before the action is to be scheduled. When it is the time to set up a path, as indicated by a periodic check of the database <highlight><bold>315</bold></highlight> or as a response to a timer event, the action manager <highlight><bold>310</bold></highlight> checks whether the requesting application still owns all the resources needed at this time. The execution fails if the owner (the reserver of the resource) has been changed, via, for example, a preemption. If the application still owns all needed resources, the action manager <highlight><bold>310</bold></highlight> instructs the path manager <highlight><bold>330</bold></highlight> to setup the path of the action. After the path is successfully set, the action manager <highlight><bold>310</bold></highlight> starts the action. If path setting fails, the execution fails. Since the path managers <highlight><bold>330</bold></highlight> inform the resource managers <highlight><bold>320</bold></highlight> in case of failure, the action managers <highlight><bold>310</bold></highlight> do not need to do so. The action manager <highlight><bold>310</bold></highlight> either informs the application about the execution result, if the application still exists, or logs the result for future inspection. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Optionally, preemption may be implemented, wherein an application may preempt scheduled actions. If chosen by an application, the action manager <highlight><bold>310</bold></highlight> participates in preemption negotiation in behalf of the application that scheduled the action. If the negotiation results in giving up some resources, the action manager informs the application, if the application still exists, or logs the case for future inspection. Meanwhile, if the preemption happens before starting the path set up, the action manager <highlight><bold>310</bold></highlight> sends a RELEASE request to all resource managers <highlight><bold>320</bold></highlight> that have reserved resources for the preempted action. Otherwise, the action manager <highlight><bold>310</bold></highlight> sends a TEAR DOWN request to all path mangers that have set up for the path. The path managers in turn inform their corresponding peer resource managers to release reserved resources. In the case where a resource is preempted by an external event, for example, where a tuner is manually changed to receive a channel that is different than the one in a reservation, the corresponding resource manager receives a notification about the event. The resource manager notifies the owner of the resource about the event. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In a preferred embodiment, the action manager <highlight><bold>310</bold></highlight> is implemented in two threads: the producer thread and the consumer thread. The producer thread responds to the SCHEDULE and UNSCHEDULE requests. Upon receiving a SCHEDULE request, the producer thread of the action manager <highlight><bold>310</bold></highlight> tries to reserve the required resources. If an action is to be executed at the current moment and all resources are successfully reserved, the producer thread also starts to set up the path, and to schedule the action immediately. If the request is for a future time, the producer thread puts the activity into the database <highlight><bold>315</bold></highlight> upon successful reservation. When the scheduled time of path setup for an action arrives, the consumer thread pulls all the activities that should be executed at this time out of the database <highlight><bold>315</bold></highlight>, and effects their execution. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> In a preferred embodiment of the Device Connect/Disconnect Handler <highlight><bold>380</bold></highlight>, the handler <highlight><bold>380</bold></highlight> inserts an entry to the description of a device and/or service in the description database <highlight><bold>305</bold></highlight>. This entry preferably indicates the URL of the resource manager <highlight><bold>320</bold></highlight>, path manager <highlight><bold>330</bold></highlight>, and action manager <highlight><bold>310</bold></highlight> that are responsible for the device/service. </paragraph>
<paragraph id="P-0080" lvl="7"><number>&lsqb;0080&rsqb;</number> The Device Manager <highlight><bold>340</bold></highlight> </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> When the information transfer corresponding to the reserved path, above, commences, the device manager <highlight><bold>340</bold></highlight> is configured to enforce rules regarding the right to execute state-changing requests, in order to prevent race conditions that may occur when multiple applications try to change the state of the same resource. The right to execute is enforced in two steps: reservation and gate keeping: </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Reservation, an application has the right to execute a state-changing command if and only if it has already obtained the ownership of the resource for the time of the command execution. To become the owner of a resource, the application must successfully reserve the resource through the resource manager <highlight><bold>320</bold></highlight>. After an action manager <highlight><bold>310</bold></highlight> receives a schedule command, it will first reserve the resources needed by the action to ensure that the requesting application owns the resources along the path of the action at the time of action execution. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Gate Keeping: Commands that access resources are executed through the device manager module <highlight><bold>340</bold></highlight>. Before the device manager <highlight><bold>340</bold></highlight> passes a state-changing command to the resource, the device manager <highlight><bold>340</bold></highlight> checks whether the requester has the right to do so. Each device, and consequently all the associated device resources and network resources, has one resource manager and one path manager responsible for managing its device resources, network resources, and network connection objects. In a preferred embodiment, only the responsible resource manager has the right to reserve any device resources and only the responsible path manager has the right to allocate network resources and manipulate the connection objects. In addition, only the owner application or the action manager representing the application can execute an action. This will cause an application that has not reserved all the resources to get a failure response when it tries to execute the action, even if a device does not provide reservation capabilities of its own. In a preferred embodiment, any requester has the right to change a state of a device during periods in which the resource is not reserved. The resultant state, however, will be preempted as required when the time for a pre-scheduled state-change for a reserved resource arrives. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In a preferred embodiment, the device manager <highlight><bold>340</bold></highlight> provides the following functions. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The device manager <highlight><bold>340</bold></highlight> creates/deletes the threads for a service due to arrival/departure of a device, and notifies the resource manager <highlight><bold>320</bold></highlight> and the path manager <highlight><bold>330</bold></highlight> regarding the change. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> When the device manager <highlight><bold>340</bold></highlight> receives a control command that will change the state of a target service, the device manager <highlight><bold>340</bold></highlight> first checks whether the requester has the right to do so. It will pass the command to the service only if the requester is qualified. In a preferred embodiment, the device manager <highlight><bold>340</bold></highlight> first queries the reservation state of a device or network resource. If the request cannot be satisfied, the device manager <highlight><bold>340</bold></highlight> sends a &ldquo;failed&rdquo; response to the requester. A request fails if the state is not changeable, or if the relevant state value equals to the requested value, for example, if the resource is already in a reserved state, or if the request amount exceeds the supply, for example, if there is insufficient bandwidth remaining. Otherwise, the device manager <highlight><bold>340</bold></highlight> sets the value of the state to the requested value and sends a &ldquo;success&rdquo; response to the requester. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The foregoing merely illustrates the principles of the invention. It will thus be appreciated that those skilled in the art will be able to devise various arrangements which, although not explicitly described or shown herein, embody the principles of the invention and are thus within the spirit and scope of the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">I claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for facilitating communication of time-sensitive information via a UPnP network, comprising: 
<claim-text>a management system that is configured to reserve a plurality of resources to form a plurality of reserved resources along a path between a source of the time-sensitive information and a sink of the time-sensitive information before initiating the communication of the time-sensitive information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the path between the source and the sink extends across a plurality of networks, the source being on a first network of the plurality of networks, and the sink being on a second network of the plurality of networks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein 
<claim-text>the management system includes a plurality of resource management modules, 
<claim-text>each resource management module being associated with a corresponding network of the plurality of networks, and being configured to reserve one or more device resources of the plurality of reserved resources on the corresponding network, </claim-text>
</claim-text>
<claim-text>the resource management module that is associated with the first network is configured to communicate a reservation request to another resource management module to reserve one or more device resources of the plurality of reserved resources on another network of the plurality of networks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>each resource management module is configured as an integral part of a UPnP framework, and communicates with applications via HTTP messages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the another resource management module in the another network is configured to reserve the one or more device resources only if a subsequent resource manager, along the path from the first network to the second network, is reachable by the another resource management module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>each resource management module is configured to communicate a release message to a prior resource management module along the path when a requested reservation cannot be effected, and </claim-text>
<claim-text>the prior resource management module releases associated device resources of the plurality of reserved resources upon receipt of the release message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the management system further includes a plurality of path management modules, 
<claim-text>each path management module being associated with a corresponding network of the plurality of networks, and being configured to reserve one or more network resources on the corresponding network, </claim-text>
</claim-text>
<claim-text>the path management module that is associated with the first network is configured to communicate a reservation request to another path management module to reserve one or more network resources on another network of the plurality of networks, and </claim-text>
<claim-text>each resource management module and path management module is configured as an integral part of a UPnP framework, and communicates with applications via HTTP messages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein 
<claim-text>the management system includes a plurality of path management modules, 
<claim-text>each path management module being associated with a corresponding network of the plurality of networks, and being configured to reserve one or more network resources on the corresponding network, </claim-text>
</claim-text>
<claim-text>the path management module that is associated with the first network is configured to communicate a reservation request to another path management module to reserve one or more network resources on another network of the plurality of networks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein 
<claim-text>at least one of the path management modules is configured to reserve a network resource having a specified quality-of-service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further including 
<claim-text>a device manager module that is configured to prevent state-changing commands being communicated to a device resource of the plurality of reserved resources, except by a requester that reserved the plurality of reserved resources. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further including 
<claim-text>an action manager module that is configured to communicate a reservation request to the management system, based on a schedule request from an application program, and to communicate a path setup request to the management system at a time corresponding to a scheduled time contained in the schedule request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method for facilitating communication of time-sensitive information via a UPnP network, comprising: 
<claim-text>defining a path between a source of the time-sensitive information and a sink of the time-sensitive information, </claim-text>
<claim-text>reserving a plurality of resources to form a plurality of reserved resources along the path. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein 
<claim-text>the path between the source and the sink extends across a plurality of networks, the source being on a first network of the plurality of networks, and the sink being on a second network of the plurality of networks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein 
<claim-text>reserving the plurality of resources includes: 
<claim-text>reserving resources of the plurality of resources that are associated with a network along the path, </claim-text>
<claim-text>communicating a reservation request to an other network along the path, </claim-text>
<claim-text>reserving the resources associated with the other network, and </claim-text>
<claim-text>repeating the communicating of the reservation request to each other network along the path and reserving the resources associated with each other network until each resource of the plurality of resources is reserved along the path. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein 
<claim-text>the resources are reserved at each other network only if receipt of the reservation request is acknowledged by a subsequent other network along the path. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further including 
<claim-text>communicating a release message to a prior network along the path when a requested reservation cannot be effected, and </claim-text>
<claim-text>releasing associated device resources of the plurality of reserved resources at the prior network upon receipt of the release message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further including: 
<claim-text>reserving one or more network resources on the first network, </claim-text>
<claim-text>communicating a reservation request to an other network, and </claim-text>
<claim-text>reserving one or more network resources on the other network of the plurality of networks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein 
<claim-text>the reservation request includes a specified quality-of-service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further including 
<claim-text>preventing state-changing commands being communicated to a device resource of the plurality of reserved resources, except by a requester that reserved the plurality of reserved resources. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further including: 
<claim-text>communicating a reservation request to a management system, based on a schedule request from an application program, and </claim-text>
<claim-text>communicating a path setup request to the management system at a time corresponding to a scheduled time contained in the schedule request.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005130A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005130A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005130A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005130A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005130A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
