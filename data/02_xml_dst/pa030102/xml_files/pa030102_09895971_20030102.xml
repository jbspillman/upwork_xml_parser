<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005111A1-20030102-D00000.TIF SYSTEM "US20030005111A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00001.TIF SYSTEM "US20030005111A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00002.TIF SYSTEM "US20030005111A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00003.TIF SYSTEM "US20030005111A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00004.TIF SYSTEM "US20030005111A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00005.TIF SYSTEM "US20030005111A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005111A1-20030102-D00006.TIF SYSTEM "US20030005111A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005111</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895971</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/173</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>224000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Service time analysis methods for the WSM QOS monitor</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ronald</given-name>
<middle-name>Campbell</middle-name>
<family-name>Allan</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Duke W. Yee,</name-1>
<name-2>Carstens, Yee &amp; Cahoon, LLP</name-2>
<address>
<address-1>P.O. Box 802334</address-1>
<city>Dallas</city>
<state>TX</state>
<postalcode>75380</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, program and system for service time analysis in a computer network are provided. The invention comprises receiving a request from a network client machine and recording the initial time value for the request. The request is forwarded to an origin server. The response stream from the origin server is instrumented with the initial time value (plus the service time taken for the origin server to respond) and sent back to the client machine. A uniform resource identifier (URI) request (e.g. images) is received from the client machine, and the service time for completing the URI is recorded. The URI request is forwarded to the origin server, and the service time value for the URI is updated to reflect the origin server response. The URI response from the origin server is then sent to the client machine. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to computer network environments. More specifically, the invention relates to quality control and monitoring the time required to service requests. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Current quality-of-service monitors used in web server management applications collect metrics on the end user experience, the page display, and the service times. The metrics collected for the service time are focused on the service time needed to retrieve the container page only. The container page is the initially requested resource. However, this page may contain other resources that need to be retrieved in order to fulfill the request. Examples of other resources include images and embedded applications (i.e. anything embedded in the container page that needs to be retrieved with a separate request). Current quality control monitors do not track the service time taken to retrieve these other resources. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In prior art QoS, there is no timing mechanism for any of the inline content that makes up a complete web page. When a page is requested using Hypertext Transport Protocol (HTTP), the container page is delivered to the web browser. At that point, the web browser parses the page and makes separate requests for each of the inline elements contained in that web page. Each of these requests is stateless, by the very nature of HTTP 1.0, and potentially stateless in HTTP 1.1. Stateless, means that the software does not keep track of configuration settings, transaction information, or any other data for the next session. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In a distributed environment, it is not reasonable to assume that the web server that responded to the request for the container page is the same web server that will be asked to deliver all, or even any, of the inline elements of the page. Even if the QoS that serviced the original request (container page) received a new request for one of the inline members of the container page, it has no mechanism for recognizing the new request as a member of the original request. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Therefore, it would be desirable to have a method for monitoring the service time needed to retrieve a web page, including the container page and all inline elements. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention provides a method, program and system for service time analysis in a computer network. The invention comprises receiving a request from a network client machine and recording the initial time value for the request. The request is forwarded to an origin server. The response stream from the origin server is instrumented with the initial time value (plus the service time taken for the origin server to respond) and sent back to the client machine. A uniform resource identifier (URI) request (e.g. images) is received from the client machine, and the service time for completing the URI is recorded. The URI request is forwarded to the origin server, and the service time value for the URI is updated to reflect the origin server response. The URI response from the origin server is then sent to the client machine. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram illustrating a data processing system in which the present invention may be implemented; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a flowchart illustrating a general transaction association mechanism in accordance with the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a flowchart illustrating transaction association using multiple servers in accordance with the present invention; and </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a flowchart illustrating transaction management using a hybrid of QoS reverse proxy and multiple servers, in accordance with the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> With reference now to the figures, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> is a network of computers in which the present invention may be implemented. Network data processing system <highlight><bold>100</bold></highlight> contains a network <highlight><bold>102</bold></highlight>, which is the medium used to provide communications links between various devices and computers connected together within network data processing system <highlight><bold>100</bold></highlight>. Network <highlight><bold>102</bold></highlight> may include connections, such as wire, wireless communication links, or fiber optic cables. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In the depicted example, a server <highlight><bold>104</bold></highlight> is connected to network <highlight><bold>102</bold></highlight> along with storage unit <highlight><bold>106</bold></highlight>. In addition, clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> also are connected to network <highlight><bold>102</bold></highlight>. These clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> may be, for example, personal computers or network computers. In the depicted example, server <highlight><bold>104</bold></highlight> provides data, such as boot files, operating system images, and applications to clients <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight>. Clients <highlight><bold>108</bold></highlight>, <highlight><bold>110</bold></highlight>, and <highlight><bold>112</bold></highlight> are clients to server <highlight><bold>104</bold></highlight>. Network data processing system <highlight><bold>100</bold></highlight> may include additional servers, clients, and other devices not shown. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In the depicted example, network data processing system <highlight><bold>100</bold></highlight> is the Internet with network <highlight><bold>102</bold></highlight> representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system <highlight><bold>100</bold></highlight> also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN). <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is intended as an example, and not as an architectural limitation for the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram of a data processing system that may be implemented as a server, such as server <highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is depicted in accordance with a preferred embodiment of the present invention. Data processing system <highlight><bold>200</bold></highlight> may be a symmetric multiprocessor (SMP) system including a plurality of processors <highlight><bold>202</bold></highlight> and <highlight><bold>204</bold></highlight> connected to system bus <highlight><bold>206</bold></highlight>. Alternatively, a single processor system may be employed. Also connected to system bus <highlight><bold>206</bold></highlight> is memory controller/cache <highlight><bold>208</bold></highlight>, which provides an interface to local memory <highlight><bold>209</bold></highlight>. I/O bus bridge <highlight><bold>210</bold></highlight> is connected to system bus <highlight><bold>206</bold></highlight> and provides an interface to I/O bus <highlight><bold>212</bold></highlight>. Memory controller/cache <highlight><bold>208</bold></highlight> and I/O bus bridge <highlight><bold>210</bold></highlight> may be integrated as depicted. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Peripheral component interconnect (PCI) bus bridge <highlight><bold>214</bold></highlight> connected to I/O bus <highlight><bold>212</bold></highlight> provides an interface to PCI local bus <highlight><bold>216</bold></highlight>. A number of modems may be connected to PCI bus <highlight><bold>216</bold></highlight>. Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers <highlight><bold>108</bold></highlight>-<highlight><bold>112</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be provided through modem <highlight><bold>218</bold></highlight> and network adapter <highlight><bold>220</bold></highlight> connected to PCI local bus <highlight><bold>216</bold></highlight> through add-in boards. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Additional PCI bus bridges <highlight><bold>222</bold></highlight> and <highlight><bold>224</bold></highlight> provide interfaces for additional PCI buses <highlight><bold>226</bold></highlight> and <highlight><bold>228</bold></highlight>, from which additional modems or network adapters may be supported. In this manner, data processing system <highlight><bold>200</bold></highlight> allows connections to multiple network computers. A memory-mapped graphics adapter <highlight><bold>230</bold></highlight> and hard disk <highlight><bold>232</bold></highlight> may also be connected to I/O bus <highlight><bold>212</bold></highlight> as depicted, either directly or indirectly. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The data processing system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be, for example, an eServer pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) or Linux operating systems. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system <highlight><bold>300</bold></highlight> is an example of a client computer. Data processing system <highlight><bold>300</bold></highlight> employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor <highlight><bold>302</bold></highlight> and main memory <highlight><bold>304</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> through PCI bridge <highlight><bold>308</bold></highlight>. PCI bridge <highlight><bold>308</bold></highlight> also may include an integrated memory controller and cache memory for processor <highlight><bold>302</bold></highlight>. Additional connections to PCI local bus <highlight><bold>306</bold></highlight> may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter <highlight><bold>310</bold></highlight>, SCSI host bus adapter <highlight><bold>312</bold></highlight>, and expansion bus interface <highlight><bold>314</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by direct component connection. In contrast, audio adapter <highlight><bold>316</bold></highlight>, graphics adapter <highlight><bold>318</bold></highlight>, and audio/video adapter <highlight><bold>319</bold></highlight> are connected to PCI local bus <highlight><bold>306</bold></highlight> by add-in boards inserted into expansion slots. Expansion bus interface <highlight><bold>314</bold></highlight> provides a connection for a keyboard and mouse adapter <highlight><bold>320</bold></highlight>, modem <highlight><bold>322</bold></highlight>, and additional memory <highlight><bold>324</bold></highlight>. Small computer system interface (SCSI) host bus adapter <highlight><bold>312</bold></highlight> provides a connection for hard disk drive <highlight><bold>326</bold></highlight>, tape drive <highlight><bold>328</bold></highlight>, CD-ROM drive <highlight><bold>330</bold></highlight>, and DVD drive <highlight><bold>332</bold></highlight>. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> An operating system runs on processor <highlight><bold>302</bold></highlight> and is used to coordinate and provide control of various components within data processing system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system <highlight><bold>300</bold></highlight>. &ldquo;Java&rdquo; is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive <highlight><bold>326</bold></highlight>, and may be loaded into main memory <highlight><bold>304</bold></highlight> for execution by processor <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Those of ordinary skill in the art will appreciate that the hardware in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Also, the processes of the present invention may be applied to a multiprocessor data processing system. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As another example, data processing system <highlight><bold>300</bold></highlight> may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system <highlight><bold>300</bold></highlight> comprises some type of network communication interface. As a further example, data processing system <highlight><bold>300</bold></highlight> may be a Personal Digital Assistant (PDA) device, which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The depicted example in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and above-described examples are not meant to imply architectural limitations. For example, data processing system <highlight><bold>300</bold></highlight> also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system <highlight><bold>300</bold></highlight> also may be a kiosk or a Web appliance. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The present invention involves Quality of Service (QoS), which is the ability to define and measure a level of performance in a data communication system; in the present context, the time taken to fulfill requests for data. The present invention can be implemented using three separate methods for solving the service time problem. However, these methods have significant overlap in how they work, and more than one method might be needed to accommodate various customer scenarios. The three methods have the following configurations: </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> 1. QoS monitoring is handled by a single QoS reverse proxy. </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> 2. QoS monitoring is handled by several &ldquo;transaction agents&rdquo; and redirected through the QoS reverse proxy. </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> 3. QoS monitoring is handled by several &ldquo;transaction agents&rdquo; and collected by the QoS controller. </paragraph>
<paragraph id="P-0033" lvl="7"><number>&lsqb;0033&rsqb;</number> All three of these methods take advantage of the cookie present in each request originating from an instrumented container page; that is, a page containing the QoS JavaScript agent. The cookie is data stored on a client computer and used by web sites to keep track of a user&apos;s patterns and preferences. The cookie is a key that can be used to impose the notion of a session on a series of otherwise disparate requests. Each method creates a table of key/value pairs, where the key is the cookie inserted into the Hypertext Transport Protocol (HTTP) request header and the value is the time stamp signifying when the service time for a given Uniform Resource Identifier (URI) is complete. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The prior art QoS technology can provide individual times on each element as long as all of the requests are obtained from the same web server. However, this is not the typical case for retrieving a web page. In a distributed environment, it is not reasonable to assume that the web server that responded to the request for the container page is the same web server that will be asked to deliver all, or even any, of the inline elements of the page. Even if the QoS that serviced the original request (container page) received a new request for one of the inline members of the container page, it has no mechanism for recognizing the new request as a member of the original request. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The present invention produces a relationship between the original page and its inline elements through session IDs, sampling periods, and/or deployment strategies. The mathematical algorithm for the present invention is as follows: </paragraph>
<paragraph id="P-0036" lvl="1"><number>&lsqb;0036&rsqb;</number> For each request with ID &lt;id num&gt;</paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> start time&equals;min(all request times) </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> stop time&equals;max(all response times) </paragraph>
<paragraph id="P-0039" lvl="7"><number>&lsqb;0039&rsqb;</number> (Note: the start time will be the container page.) </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The goal is for QoS to be able to recognize all of the members of the request and produce a metric that states &ldquo;the total time for the parent request and all of its inline content to be save was &lsquo;x&rsquo;&rdquo;. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> flowchart illustrating a general transaction association mechanism is depicted in accordance with the present invention. When the request for the container page is received, the QoS reverse proxy will mark the T1 value for the request (step <highlight><bold>401</bold></highlight>) and forward the request to the origin server for processing (step <highlight><bold>402</bold></highlight>). The T1 value is inserted as part of the Javascript agent that gets sent in the container page stream. This keeps the system stateless. The present invention does not depend on the same QoS that instrumented the response page being the QoS that receives the Javascript agent request from the client. Upon receiving the response stream from the origin server (step <highlight><bold>403</bold></highlight>), the reverse proxy will instrument a valid response stream with the JavaScript agent and respond to the original client request with this instrumented response stream (step <highlight><bold>404</bold></highlight>). The instrumentation contains the original T1 value as well as the service time taken for the container page. As the page is received at the client, the browser parses the page and issues a request for each of the URIs that make up the presentation of the page, which are generally the images contained on the page (step <highlight><bold>405</bold></highlight>). As each request is received by the QoS agent, i.e. either the reverse proxy or some other agent (such as a web server plug-in), the agent searches for the JavaScript-inserted cookie in the request headers and creates a new table entry using the value of this cookie as the key in the table, if the key does not already exist (step <highlight><bold>406</bold></highlight>). The QoS agent then forwards the request to the origin server (step <highlight><bold>407</bold></highlight>). When the origin server responds with the resource (step <highlight><bold>408</bold></highlight>), the QoS agent marks the time of the response T2, updates the table entry value with this time stamp, and responds to the requesting client (step <highlight><bold>409</bold></highlight>). This is possible because the child process, or thread, that received the client request will also receive the origin server response. The web browser on the client will run the Javascript agent which will make the request. When the QoS agent receives the JavaScript-generated request that contains the transaction record, the agent retrieves the cookie from the request headers, searches the table for this key, and retrieves the time value from the entry. The difference between this value and the T1 value of the transaction record is the service time for the transaction. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> None of the methods of the present invention require the current data upload or event semantics to change. The records produced by the QoS monitor are uploaded after processing, and any events that occur are forwarded using the event notification system. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Collecting service times on all transactions may incur an unacceptable overhead. Therefore, all of the methods in the present invention will support the notion of service time sampling. In order to support sampling, two new commands will need to be added to the QoS controller. These are the &ldquo;sample_on&rdquo; and &ldquo;sample_off&rdquo; commands. When the sample_on command is issued, the QoS monitor will begin to collect service time metrics on all of the URIs that pass through the QoS agent. When the controller issues the sample_off command, the QoS agent will cease collecting service time metrics and make the collected data available for processing. Like other QoS commands, these commands will be issued using HyperText Transport Protocol Secure (HTTPS). However, HTTP may be used as well. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> When the data is sampled, a unique identifier will be added to the service time key/value pair in the transaction record, to differentiate it from the container-page-only service time metric. In this embodiment, the sampling rate is configured during task creation. The configuration may include a URI specification stage so that only certain URIs will be sampled. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The first method addresses the customer scenario for QoS where the QoS reverse proxy handles all of the requests that make up a transaction. This includes the container page and all of the referenced resources in the container page. This is the simplest scenario. The service time metrics are collected according to the heuristic described above, and the data ends up as the Service Time (ST) value in the transaction record produced by the QoS reverse proxy. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> has described a situation in which only one element within a container page is being retrieved. However, in actual application, the process flow in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> can be used to retrieve multiple inline elements. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> flowchart illustrating transaction association using multiple servers is depicted in accordance with the present invention. This represents the second method for implementing the present invention and involves reassembling the transaction from multiple sources. Once again, the cookies generated by the JavaScript agent are used to group the transaction components. As in the first method, a table of service times is created for each transaction component, with the cookie as the key. However, unlike the first method, a communication method is also needed between the QoS monitor and either other monitors or the web servers themselves. In addition, each web server of interest needs to have either a QoS reverse proxy working on its behalf or a plug-in that will recognize the commands, time stamp the service time requests, and make the results available to the controlling agent (a QoS monitor piece). It should be noted that creating a plug-in for the three major web servers (Apache, iplanet, and IIS) is not a significant obstacle. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Whether the second method is performed using a series of QoS reverse proxies deployed in front of the machines of interest, or as a set of plug-ins integrated into the web servers, the method is similar. At &ldquo;sample on&rdquo; time, the QoS controller sends a command to each of the participating &ldquo;listeners&rdquo; (step <highlight><bold>501</bold></highlight>). A listener is any QoS agent such as a reverse proxy or a web server plug-in. During the sampling period, the QoS reverse proxies create table entries for all key/value pairs and collect service time metrics (as in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) for the transactions (step <highlight><bold>502</bold></highlight>). In the preferred embodiment, the table is a shared memory table. Therefore, each child thread or process in a QoS agent can access and add new entries to the table. Those skilled in the art will appreciate that other methods of assembling the QoS data are possible. When the controller sends the sample_off command to end the sample period (step <highlight><bold>503</bold></highlight>), each listener responds to the controller with the contents of the table created during this period (step <highlight><bold>504</bold></highlight>). This is possible through the HTTP request/response mechanism. In this method, the controller is responsible for creating the association between the records and the service time. This requires that the records maintained by the QoS agents (for controller retrieval) contain the cookie value so that the service time analysis can take place at the controller. The records are analyzed and reformed by the controller prior to uploading the data to the management server (step <highlight><bold>505</bold></highlight>). If there are no service time metrics available from the sampling period for a record, that record is unaltered and the service time it contains represents the service time of the container page only. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> flowchart illustrating QoS management using the third method, which is a hybrid of the first and second methods, is depicted in accordance with the present invention. At &ldquo;sample on&rdquo; time, the QoS controller sends a command to each of the participating listeners (step <highlight><bold>601</bold></highlight>). Once the sampling has begun, all requests during the sampling period are redirected to the QoS reverse proxy (step <highlight><bold>602</bold></highlight>). The redirected requests are then sent by the QoS reverse proxy to their intended destination (step <highlight><bold>603</bold></highlight>). There is no time stamping of redirects because they do not explicitly return a container page. Therefore, they are left out of the timing. A header is added to this redirection to inform the recipient to process the request, thereby preventing an infinite loop. As the reverse proxy receives each response, it updates the table with the service time metrics (as in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) (step <highlight><bold>604</bold></highlight>). When the sample_off command is issued by the QoS controller (step <highlight><bold>605</bold></highlight>), the QoS reverse proxy creates the transaction records with the service time data (step <highlight><bold>606</bold></highlight>). </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The QoS reverse proxies are typically deployed on the same machine as the actual web server on which behalf they work. However, they can also sit on their own machine and work on behalf of one or more web servers. The QoS boxes are deployed inside the same firewall parameters as the web server(s) for which they act as reverse proxies. In geographical terms, they are very close to the actual web server. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for service time analysis in a computer network, comprising: 
<claim-text>receiving a request from a network client machine for an electronic document and recording an initial time value for the request; </claim-text>
<claim-text>forwarding the request to an origin server and receiving a response stream containing the electronic document from the origin server; </claim-text>
<claim-text>sending the response stream to the client machine, wherein the response stream is instrumented; </claim-text>
<claim-text>receiving a uniform resource identifier (URI) request from the client machine, wherein the request is for a resource embedded within the electronic document, and recording a service time value for completing the request for the electronic document; </claim-text>
<claim-text>forwarding the URI request to the origin server and receiving a URI response from the origin server; </claim-text>
<claim-text>updating the service time value; and </claim-text>
<claim-text>sending the URI response to the client machine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a key/value table, wherein the key is a cookie in a request header and the value is a time stamp signifying the service time for a request. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the instrumented response stream further comprises: 
<claim-text>the initial time value of the request; and </claim-text>
<claim-text>service time taken for the origin server to respond. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein all steps are performed by a single reverse proxy server. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the steps are performed by multiple reverse proxy servers, wherein one server acts as the controlling quality-of-service monitor and the other servers are subordinate to the controlling monitor. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein: 
<claim-text>the controlling monitor sends a sample-on command to the subordinate servers; </claim-text>
<claim-text>in response to the sample-on command, the subordinate servers record service time metrics for request transactions; </claim-text>
<claim-text>the controlling monitor sends a sample-off command to the subordinate servers; </claim-text>
<claim-text>in response to the sample-off command, the subordinate servers send their respective service time records to the controlling monitor; and </claim-text>
<claim-text>the controlling monitor analyzes and reorganizes the service time records from the subordinate servers into a single record. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A computer program product in a computer readable medium for use in a data processing system, for service time analysis in a computer network, the computer program product comprising: 
<claim-text>instructions for receiving a request from a network client machine for an electronic document and recording an initial time value for the request; </claim-text>
<claim-text>instructions for forwarding the request to an origin server and receiving a response stream containing the electronic document from the origin server; </claim-text>
<claim-text>instructions for sending the response stream to the client machine, wherein the response stream is instrumented; </claim-text>
<claim-text>instructions for receiving a uniform resource identifier (URI) request from the client machine, wherein the request is for a resource embedded within the electronic document, and recording a service time value for completing the request for the electronic document; </claim-text>
<claim-text>instructions for forwarding the URI request to the origin server and receiving a URI response from the origin server; </claim-text>
<claim-text>instructions for updating the service time value; and </claim-text>
<claim-text>instructions for sending the URI response to the client machine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising a key/value table, wherein the key is a cookie in a request header and the value is a time stamp signifying the service time for a request. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the instrumented response stream further comprises: 
<claim-text>the initial time value of the request; and </claim-text>
<claim-text>service time taken for the origin server to respond. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein all instructions are performed by a single reverse proxy server. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the instructions are performed by multiple reverse proxy servers, wherein one server acts as the controlling quality-of-service monitor and the other servers are subordinate to the controlling monitor. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer program product according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>instructions for sending a sample-on command from the controlling monitor to the subordinate servers; </claim-text>
<claim-text>in response to the sample-on command, instructions for the subordinate servers to record service time metrics for request transactions; </claim-text>
<claim-text>instructions for sending a sample-off command from the controlling monitor to the subordinate servers; </claim-text>
<claim-text>in response to the sample-off command, instructions for the subordinate servers to send their respective service time records to the controlling monitor; and </claim-text>
<claim-text>instructions for the controlling monitor to analyze and reorganize the service time records from the subordinate servers into a single record. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system for service time analysis in a computer network, comprising: 
<claim-text>a first receiving component which receives a request from a network client machine for an electronic document and records an initial time value for the request; </claim-text>
<claim-text>a first communication component which forwards the request to an origin server and receives a response stream containing the electronic document from the origin server; </claim-text>
<claim-text>a second communication component which sends the response stream to the client machine, wherein the response stream is instrumented; </claim-text>
<claim-text>a second receiving component which receives a uniform resource identifier (URI) request from the client machine, wherein the request is for a resource embedded in the electronic document, and records a service time value for completing the request for the electronic document; </claim-text>
<claim-text>a third communication component which forwards the URI request to the origin server and receives a URI response from the origin server; </claim-text>
<claim-text>an updating component which updates the service time value; and </claim-text>
<claim-text>a fourth communication component which sends the URI response to the client machine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising a register which maintains a key/value table, wherein the key is a cookie in a request header and the value is a time stamp signifying the service time for a request. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the instrumented response stream further comprises: 
<claim-text>the initial time value of the request; and </claim-text>
<claim-text>service time taken for the origin server to respond. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein all components are contained in a single reverse proxy server. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the components are contained in multiple reverse proxy servers, wherein one server acts as the controlling quality-of-service monitor and the other servers are subordinate to the controlling monitor. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising: 
<claim-text>a first communication component which sends a sample-on command from the controlling monitor to the subordinate servers; </claim-text>
<claim-text>a plurality of recording components in the subordinate servers which, in response to the sample-on command, record service time metrics for request transactions; </claim-text>
<claim-text>a second communication component which sends a sample-off command from the controlling monitor to the subordinate servers; </claim-text>
<claim-text>a plurality of response components in the subordinate servers which, in response to the sample-off command, send their respective service time records to the controlling monitor; and </claim-text>
<claim-text>a processor in the controlling monitor which analyzes and reorganizes the service time records from the subordinate servers into a single record.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005111A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005111A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005111A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005111A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005111A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005111A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005111A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
