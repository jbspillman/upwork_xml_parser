<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005277A1-20030102-D00000.TIF SYSTEM "US20030005277A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00001.TIF SYSTEM "US20030005277A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00002.TIF SYSTEM "US20030005277A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00003.TIF SYSTEM "US20030005277A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00004.TIF SYSTEM "US20030005277A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00005.TIF SYSTEM "US20030005277A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005277A1-20030102-D00006.TIF SYSTEM "US20030005277A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005277</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895981</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/177</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>002000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Automatic replacement of corrupted BIOS image</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Matthew</given-name>
<middle-name>C.</middle-name>
<family-name>Harding</family-name>
</name>
<residence>
<residence-us>
<city>San Luis Obispo</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Peter</given-name>
<middle-name>A.</middle-name>
<family-name>Hawkins</family-name>
</name>
<residence>
<residence-us>
<city>San Luis Obispo</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A primary BIOS may be used to boot a system after the primary BIOS has been validated. If the primary BIOS fails the validation test, a backup BIOS may automatically be used to boot the system. If the primary BIOS passes the validation test, but fails to complete execution in a predetermined period of time, the backup BIOS may automatically be used to boot the system. Code for validating the primary BIOS may be contained in the backup BIOS. The primary BIOS may be revised during system operation, but the backup BIOS may be write-protected during system operation to prevent the backup BIOS from being corrupted. A plug-in module may be used to revise the backup BIOS by booting from the plug-in module rather than the primary or secondary BIOS, and copying a BIOS program from the plug-in module to the backup BIOS. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention pertains generally to computers. In particular, it pertains to management of the BIOS image in computers. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computers are usually initialized by executing a Basic Input/Output System (BIOS). The BIOS is non-volatile code that determines what the computer can do without accessing programs from a disk. On personal computers (PCs), the BIOS contains all the code required to perform a self-test and to control the keyboard, display screen, disk drives, serial communications, and a number of miscellaneous functions. The BIOS then loads the operating system from disk. Originally, the BIOS was placed in a read-only memory (ROM) and could not be modified without physically replacing the ROM. As the functions performed by the BIOS became more complex, and computers became easier to reconfigure after manufacture, the BIOS was placed on rewritable programmable ROMs, such as flash memory. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Since the BIOS can now be rewritten in the field after the computer becomes operational, and a computer cannot be booted without a valid BIOS, this raises reliability and security issues. A computer can be disabled if the BIOS is corrupted by being rewritten incorrectly, such as by user error, power interruption, or software malfunction. To help prevent an unrecoverable condition, many systems contain a backup copy of the system BIOS that can be relied upon if the primary BIOS is faulty. However, these generally require physical intervention by the user to activate the backup BIOS. For example, the backup BIOS may be enabled by a mechanical switch or jumper on the motherboard. Those systems that have some sort of automatic recovery still require the physical presence and intervention of an operator&mdash;to choose boot options or to insert a recovery disk, for example. If the faulty BIOS was caused by a download to a remote system with no operator present, the corrective action (dispatching a technician to the site) can be very expensive in terms of both money and downtime. An additional disadvantage of the convention BIOS redundancy approach is that the two BIOS copies are usually stored in two separate memory devices, which increases manufacturing costs. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a block diagram of a dual-BIOS system. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2A, 2B</cross-reference>, <highlight><bold>2</bold></highlight>C show a flow chart of a method embodiment. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A, 3B</cross-reference>, <highlight><bold>3</bold></highlight>C show a more detailed flow chart of a method embodiment. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a block diagram of a dual-BIOS system with a module for programming the BIOS contents.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Various embodiments allow a backup BIOS image to automatically be enabled whenever the primary BIOS image is faulty, without any intervention by an operator. It may also allow both BIOS images to be stored in one physical device, decreasing board area and cost. In operation, execution may begin in the backup BIOS, which may validate the primary BIOS. If the primary BIOS passes the validation test, control may then be transferred to the primary BIOS to perform the boot sequence. If the primary BIOS fails the validation test, indicating it has been corrupted, the backup BIOS may generate a warning indicator and perform the boot sequence. If the primary BIOS passes the validation test but does not complete the boot sequence correctly, indicating it is faulty in a way that eluded the validation test, the backup BIOS may be used to boot the system. The boot sequence for the primary and backup BIOS images do not have to be identical. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows functional components of an embodiment of a dual-BIOS system <highlight><bold>10</bold></highlight>. Memory device <highlight><bold>112</bold></highlight> may be used to hold the code for both the backup BIOS <highlight><bold>113</bold></highlight> and the primary BIOS <highlight><bold>114</bold></highlight>. In one embodiment, memory device <highlight><bold>112</bold></highlight> may be a programmable read-only memory (PROM) such as a flash memory device. In one embodiment, memory device <highlight><bold>112</bold></highlight> may be a single integrated circuit. Control logic <highlight><bold>111</bold></highlight> may be used to control the operation of memory device <highlight><bold>112</bold></highlight> to enable the features of the dual-BIOS system <highlight><bold>10</bold></highlight>. In operation, the address lines ADR of a bus may be used to read the contents of the memory device <highlight><bold>112</bold></highlight> over data lines DATA to retrieve instructions for initializing the system. In one embodiment, address lines ADR include all 32 bits of a 32-bit address bus. To permit easy switching between backup BIOS <highlight><bold>113</bold></highlight> and primary BIOS <highlight><bold>114</bold></highlight>, the least significant address bits (LSAB) may be routed directly to memory device <highlight><bold>112</bold></highlight>, while the most significant address bits (MSAB) may be routed to control logic <highlight><bold>111</bold></highlight>. Control logic <highlight><bold>111</bold></highlight> may then issue selected ones of the most significant bits (SELECTION MSB) to select either backup BIOS <highlight><bold>113</bold></highlight> or primary BIOS <highlight><bold>114</bold></highlight>. The number of bits in LSAB may be designed to accommodate the maximum size of each BIOS. In one embodiment, LSAB consists of 16 address lines to permit directly addressing a BIOS address space of 64k. In a 32-bit address environment, this may leave 16 bits for MSAB. However, the number of bits in SELECTION MSB may be reduced to only those that will change state during BIOS operations, while the remaining high-order address bit inputs to memory device <highlight><bold>112</bold></highlight> may be ignored. The number of bits required for SELECTION MSB depends on the specific address ranges selected for backup BIOS <highlight><bold>113</bold></highlight> and primary BIOS <highlight><bold>114</bold></highlight>. In one embodiment, SELECTION MSB includes only one bit, to permit switching between the two address ranges. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Control logic <highlight><bold>111</bold></highlight> may also have several control inputs from the bus. In one embodiment, these may include Write Enable, Chip Select to the BIOS device, and CPU-INIT. Control logic <highlight><bold>111</bold></highlight> may output multiple control signals to memory device <highlight><bold>112</bold></highlight>. In one embodiment, these may include Write Enable (WE) and Chip Select (CS). However, these two signals being output from control logic <highlight><bold>111</bold></highlight> may not track the equivalent signals being input to control logic <highlight><bold>111</bold></highlight> because control logic <highlight><bold>111</bold></highlight> may manipulate them to control the automatic dual-BIOS function. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Backup BIOS <highlight><bold>113</bold></highlight> may be located in an address space of memory device <highlight><bold>112</bold></highlight> that will be decoded as read-only by control logic <highlight><bold>111</bold></highlight>, while primary BIOS <highlight><bold>114</bold></highlight> may be located in an address space of memory device <highlight><bold>112</bold></highlight> that will be decoded as read/write by control logic <highlight><bold>111</bold></highlight>. The read-only state may be enforced by write-protecting the backup BIOS. This may be accomplished by deasserting the Write Enable line to memory device <highlight><bold>112</bold></highlight> whenever any portion of backup BIOS <highlight><bold>113</bold></highlight> is being addressed, thus preventing the possibility of corrupting backup BIOS <highlight><bold>113</bold></highlight> with a write operation. In this embodiment, primary BIOS <highlight><bold>114</bold></highlight> may be revised by reprogramming it, but backup BIOS <highlight><bold>113</bold></highlight> may remain unchanged so that any detected problem with primary BIOS <highlight><bold>114</bold></highlight> may be avoided by booting the system with the older, proven, backup BIOS <highlight><bold>113</bold></highlight>. Validator <highlight><bold>115</bold></highlight> may be used to validate primary BIOS <highlight><bold>114</bold></highlight> to determine if primary BIOS <highlight><bold>114</bold></highlight> has been corrupted; i.e., if portions of it did not program correctly. In one embodiment, validator <highlight><bold>115</bold></highlight> includes code located in backup BIOS <highlight><bold>113</bold></highlight> to perform a checksum process on primary BIOS <highlight><bold>114</bold></highlight>. Control logic <highlight><bold>111</bold></highlight> may assert the Chip Select line to memory device <highlight><bold>112</bold></highlight> whenever memory device <highlight><bold>112</bold></highlight> is being addressed, regardless of which BIOS is being addressed. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>A-C show a flow chart of a method embodiment <highlight><bold>20</bold></highlight>. The BIOS entry point is shown at block <highlight><bold>221</bold></highlight>. This point may be entered as the result of, for example, a system reset, a CPU initialization signal, or a jump to the boot vector. In one embodiment, the BIOS entry point is at the top of addressable memory space. Block <highlight><bold>222</bold></highlight> determines whether the backup BIOS or the primary BIOS is being executed. In one embodiment, this may be determined by examining a bit that is set to control which BIOS is to be executed. In another embodiment, this may be determined by examining one or more high-order address bits. If the backup BIOS is executing, the backup BIOS may validate the primary BIOS at block <highlight><bold>224</bold></highlight> to determine if the primary BIOS is corrupted, and may also check a retry counter that tracks the number of times the primary BIOS has unsuccessfully tried to execute. Corruption of the primary BIOS may be due to various causes, such as errors in writing the code into the portion of the memory device containing the primary BIOS code. Another cause may be failure of at least one memory cell in the portion of the memory device containing the primary BIOS code. In one embodiment, validation may be done by executing a checksum on the code of at least a portion of the primary BIOS. In another embodiment, the backup BIOS may perform a more extensive validation test on the primary BIOS. If the primary BIOS is found to be corrupted, or if the retry counter has reached a predetermined value designated here as &lsquo;X&rsquo;, the backup BIOS may set an error indicator, such as an &lsquo;Invalid&rsquo; flag, at block <highlight><bold>225</bold></highlight> to indicate that the primary BIOS is unreliable and that the backup BIOS will be used to boot the system. Block <highlight><bold>226</bold></highlight> may be used to make adjustments for the fact that the primary and backup BIOS images may be different. If the primary BIOS has previously been revised, it may have changed other parameters that make it incompatible with the unchanged backup BIOS. For example, if the primary BIOS requires different CMOS settings than the backup BIOS, these settings may need to be modified at block <highlight><bold>226</bold></highlight> to be compatible with the backup BIOS. After making these adjustments, if they are necessary, the boot sequence can continue at block <highlight><bold>223</bold></highlight> in the backup BIOS and move to point &lsquo;A&rsquo; that continues in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Returning to block <highlight><bold>224</bold></highlight>, if the primary BIOS is found to be valid and the retry counter has not reached the predetermined value, a watchdog timer may be started at block <highlight><bold>227</bold></highlight> that may be used later to detect a fault in the BIOS that was not detected by the validation test. The retry counter that was tested in block <highlight><bold>224</bold></highlight> may also be incremented. A &lsquo;primary BIOS&rsquo; indicator may be set at block <highlight><bold>228</bold></highlight> to switch control to the primary BIOS. In one embodiment, this may consist of setting a hardware bit. At block <highlight><bold>229</bold></highlight>, a CPU initialization signal may be generated to force execution back to the BIOS entry point at block <highlight><bold>221</bold></highlight>. In one embodiment, this initialization signal may be generated under control of the BIOS code. In another embodiment, it may be generated in hardware as a result of setting the select bit in block <highlight><bold>228</bold></highlight>. After execution moves to the BIOS entry point, block <highlight><bold>222</bold></highlight> may once again determine whether the primary or backup BIOS is being executed. Since the &lsquo;primary BIOS&rsquo; indicator was set at block <highlight><bold>228</bold></highlight>, the primary BIOS is now executing and the boot sequence may continue at block <highlight><bold>223</bold></highlight>. From there, execution may continue at point &lsquo;A&rsquo; in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> At block <highlight><bold>230</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>B, the selected boot sequence executes. If the boot sequence executes properly, it will complete before the watchdog timer times out, and it will clear the retry counter and disarm the watchdog timer at block <highlight><bold>231</bold></highlight> before passing control to the operating system at block <highlight><bold>232</bold></highlight>. If the boot sequence is expected to take longer than the longest period the watchdog timer can be set to, the boot sequence may be programmed to periodically restart the watchdog timer. Otherwise, the watchdog timer may be set to a single value that allows time for the boot sequence to run to completion. <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> shows the sequence that occurs if the watchdog timer times out as indicated at block <highlight><bold>240</bold></highlight>. A timeout of the watchdog timer may indicate that execution of the BIOS is not going as planned and that something is wrong with that execution. This may be used to detect some faults in the BIOS that escaped detection in the validation test. A timeout may reselect the backup BIOS at block <highlight><bold>241</bold></highlight> and return control to the BIOS entry point from block <highlight><bold>241</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2C</cross-reference> to block <highlight><bold>221</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2A</cross-reference>. This may restart the validation and timeout sequences previously described. If the watchdog timer times out, indicating an execution failure of the primary BIOS, the primary BIOS may be retried a predetermined number of times by use of the retry counter which is tested at block <highlight><bold>224</bold></highlight> and incremented at block <highlight><bold>227</bold></highlight>. When the designated number of retries occurs, the retry counter will reach a value of &lsquo;X&rsquo;, which causes execution of the backup BIOS in blocks <highlight><bold>225</bold></highlight>-<highlight><bold>226</bold></highlight>, <highlight><bold>223</bold></highlight>, and <highlight><bold>230</bold></highlight>-<highlight><bold>232</bold></highlight>. The retry counter may be initialized (not shown) before the first boot sequence with the primary BIOS is attempted. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> FIGS. <highlight><bold>3</bold></highlight>A-C show a flow chart <highlight><bold>30</bold></highlight> of an embodiment that distributes the BIOS code between high and low memory. Many processors are designed to automatically jump to a location at the top of addressable memory space whenever the system is reset. In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the determination of which BIOS image to execute is made in blocks <highlight><bold>331</bold></highlight>-<highlight><bold>339</bold></highlight> while still in upper memory, but most of the primary and secondary BIOS code is located in the lower one megabyte of addressable memory space and execution of the boot sequence is performed in blocks <highlight><bold>340</bold></highlight>-<highlight><bold>342</bold></highlight>. In the illustrated embodiment, the primary and backup boot sequences can be considered to be in low memory in the lower <highlight><bold>1</bold></highlight> megabyte of addressable memory space, while the validation and BIOS-selection code may be considered to be in high memory at the upper end of addressable memory space. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Block <highlight><bold>331</bold></highlight> represents an action that triggers entry into the BIOS code. In one embodiment, this may be a system restart, a reset, or a CPU initialization signal. The exact address of the entry point may be determined by the design of the processor, regardless of the BIOS code that is being implemented. In block <highlight><bold>332</bold></highlight>, execution may jump from this predetermined address to the BIOS image near the top of the 32-bit address space. In one embodiment, the contents of the BIOS are copied from programmable read-only memory (PROM) into main memory and execution then continues in main memory. This may speed up execution if the PROM memory containing the BIOS image has a slower access speed than main memory. This portion of main memory may be called shadow memory, since its contents now shadow those of the PROM containing the BIOS image. Block <highlight><bold>333</bold></highlight> may be a decision point to determine if the BIOS image is located in the lower one megabyte of address space in shadow memory. If it is, execution may jump at block <highlight><bold>339</bold></highlight> to the BIOS entry point in that shadow memory in the lower 1 megabyte. If the BIOS image is not in shadow memory in the lower one megabyte, the code may enable the &ldquo;big real mode&rdquo; to allow access to a BIOS image in the upper address range. Big real mode is a well-known operating mode that is hybrid between real mode and protected mode. Real mode, a legacy from the days when computer address space was more limited, only permits one megabyte of address space, while protected mode permits access to the full 4 gigabytes of address space permitted by a 32-bit address. Big real mode has some of the simplicity of real mode, but still allows access to the 4 gigabyte address range. In the embodiment of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, big real mode is enabled at block <highlight><bold>334</bold></highlight>. Then the primary BIOS image is validated. In one embodiment, validation consists of performing a checksum on the code and comparing it to a predetermined checksum for that code. The retry counter may also be checked at block <highlight><bold>335</bold></highlight> to see if it has reached a predetermined value shown as &lsquo;X&rsquo;. If the primary BIOS code is validated at block <highlight><bold>335</bold></highlight>, indicating the code has passed the validation test, and the retry counter has not reached the predetermined value, block <highlight><bold>336</bold></highlight> may increment the reset counter and start the watchdog timer and then prepare the hardware to decode the primary BIOS in the lower one megabyte range. Block <highlight><bold>339</bold></highlight> then jumps to the BIOS entry point in that lower range. In one embodiment, preparing the hardware to decode the primary BIOS includes setting bits in control logic <highlight><bold>111</bold></highlight> to select the primary BIOS <highlight><bold>114</bold></highlight> in memory device <highlight><bold>112</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). If the primary BIOS code is not validated at block <highlight><bold>335</bold></highlight>, i.e., if it fails the validation test, indicating the code has been corrupted, or if the retry counter indicates the primary BIOS has been retried a specified number of times, block <highlight><bold>337</bold></highlight> may set an &lsquo;invalid&rsquo; flag to warn the user that the primary BIOS image is invalid and that the backup image is being used. In one embodiment, this warning may take the form of a message to the user. Block <highlight><bold>338</bold></highlight> may then prepare the hardware to decode the backup BIOS in the lower one megabyte range and then block <highlight><bold>339</bold></highlight> jumps to the BIOS entry point in that lower range. In one embodiment, preparing the hardware to decode the backup BIOS includes setting bits in control logic <highlight><bold>111</bold></highlight> to select the backup BIOS <highlight><bold>113</bold></highlight> in memory device <highlight><bold>112</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> After jumping to lower memory in block <highlight><bold>339</bold></highlight>, block <highlight><bold>340</bold></highlight> may determine if the &lsquo;invalid&rsquo; flag has been set. If it has not, the selected boot sequence may then be continued at block <highlight><bold>342</bold></highlight>. If it has been set, block <highlight><bold>341</bold></highlight> may make any necessary adjustments to accommodate the differences between the primary BIOS and the backup BIOS, such as clearing and rewriting the CMOS settings. In one embodiment, all BIOS-related settings may initially be set for the primary BIOS, and will need to be changed only if a defective primary BIOS image causes a switch to the backup BIOS. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Once the selected boot sequence is started at block <highlight><bold>342</bold></highlight>, it may continue though point &lsquo;B&rsquo; to block <highlight><bold>343</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. If the boot sequence executes properly, it will complete before the watchdog timer times out, and it will clear the retry counter and disarm the watchdog timer at block <highlight><bold>344</bold></highlight> before passing control to the operating system at block <highlight><bold>345</bold></highlight>. If the boot sequence is expected to take longer than the longest period the watchdog timer can be set to, the boot sequence may be programmed to periodically restart the watchdog timer. Otherwise, the watchdog timer may be set to a single value that allows time for the boot sequence to run to completion. <cross-reference target="DRAWINGS">FIG. 3C</cross-reference> shows the sequence that occurs if the watchdog timer times out as indicated at block <highlight><bold>350</bold></highlight>. A timeout of the watchdog timer may indicate that execution of the BIOS is not going as planned and that something is wrong with that execution. This may be used to detect some faults in the BIOS that escaped detection in the validation test. A timeout may reselect the backup BIOS at block <highlight><bold>351</bold></highlight> and return control to the BIOS entry point from block <highlight><bold>352</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3C</cross-reference> to block <highlight><bold>331</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. This may restart the validation and timeout sequences previously described. If the watchdog timer times out, indicating an execution failure of the primary BIOS, the primary BIOS may be retried a predetermined number of times by use of the retry counter which is tested at block <highlight><bold>335</bold></highlight> and incremented at block <highlight><bold>336</bold></highlight>. When the designated number of retries occurs, the retry counter will reach a value of &lsquo;X&rsquo;, which causes execution of the backup BIOS in blocks <highlight><bold>339</bold></highlight>-<highlight><bold>345</bold></highlight>. The retry counter may be initialized (not shown) before the first boot sequence with the primary BIOS is attempted. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a system <highlight><bold>40</bold></highlight> that may be much like system <highlight><bold>10</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, but with the addition of a module for programming one or both of the primary and secondary BIOS images. Programming device <highlight><bold>441</bold></highlight> may be used to program the contents of backup BIOS <highlight><bold>113</bold></highlight>, and may also be used to program the contents of primary BIOS <highlight><bold>114</bold></highlight>. In one embodiment, programming device <highlight><bold>441</bold></highlight> may include a pre-programmed read-only memory (ROM) chip on a module with a connector. Interface <highlight><bold>442</bold></highlight> may be a mating connector on the same printed circuit board that contains memory device <highlight><bold>112</bold></highlight> that permits device <highlight><bold>441</bold></highlight> to be mechanically and electrically attached to or removed from the system. In one embodiment, all of device <highlight><bold>441</bold></highlight> receives its electrical power, input signals, and mechanical support through interface <highlight><bold>442</bold></highlight> and/or the circuit board so that no external connections are needed to program memory device <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> When a system is initially constructed, memory device <highlight><bold>112</bold></highlight> may be empty, i.e., unprogrammed with a BIOS. Since a BIOS program or its equivalent may be necessary to boot the computer system, inserting device <highlight><bold>44</bold></highlight> <highlight><bold>1</bold></highlight> into interface <highlight><bold>442</bold></highlight> may provide the equivalent of a BIOS program and also permit memory device <highlight><bold>112</bold></highlight> to be programmed with a BIOS for future boot operations. Once memory device <highlight><bold>112</bold></highlight> has been programmed, device <highlight><bold>441</bold></highlight> may be removed. Interface <highlight><bold>442</bold></highlight> may provide data (DATA) and address (ADR) lines to device <highlight><bold>441</bold></highlight> from a system bus so that the contents of the ROM may be read by the system processor over a standard bus. Connector <highlight><bold>442</bold></highlight> may also provide handshaking signals on lines PROG to enable control logic <highlight><bold>111</bold></highlight> to switch to device <highlight><bold>441</bold></highlight>. In one embodiment, interface <highlight><bold>442</bold></highlight> may provide a module presence detect line to control logic <highlight><bold>111</bold></highlight> to provide an indication to control logic <highlight><bold>111</bold></highlight> when device <highlight><bold>441</bold></highlight> is plugged into interface <highlight><bold>442</bold></highlight>. Upon receiving this indication that the ROM is plugged in, control logic <highlight><bold>111</bold></highlight> may block access to memory device <highlight><bold>112</bold></highlight> by deasserting the chip enable signal to memory device <highlight><bold>112</bold></highlight>, and may provide access to device <highlight><bold>441</bold></highlight> by asserting a chip enable signal to device <highlight><bold>441</bold></highlight>. When a reset, system restart, or CPU initialization signal causes execution to jump to high memory as previously described, this action may enable the ROM to provide instructions to the system processor in response. The ROM may contain the equivalent of initial BIOS code that permits the system processor to gain control over basic system resources. The ROM may also contain code that permits control logic <highlight><bold>111</bold></highlight> to again allow access to memory device <highlight><bold>112</bold></highlight>. With this ability, a BIOS program may be copied from the ROM into memory device <highlight><bold>112</bold></highlight>. The ROM may also contain code to validate the contents of memory device <highlight><bold>112</bold></highlight> by verifying that the BIOS copied correctly. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> For either initial BIOS programming or for revising backup BIOS <highlight><bold>113</bold></highlight>, inserting device <highlight><bold>441</bold></highlight> may permit backup BIOS <highlight><bold>113</bold></highlight> to be programmed into memory device <highlight><bold>112</bold></highlight>. In one embodiment, primary BIOS <highlight><bold>114</bold></highlight> may also be programmed from device <highlight><bold>441</bold></highlight>. In another embodiment, once backup BIOS <highlight><bold>113</bold></highlight> has been programmed, primary BIOS <highlight><bold>114</bold></highlight> may be downloaded into memory device <highlight><bold>112</bold></highlight> by the system during system operation. In either embodiment, primary BIOS <highlight><bold>114</bold></highlight> may be revised by downloading the revised primary BIOS into memory device <highlight><bold>112</bold></highlight> by the system during system operation. These features may permit primary BIOS <highlight><bold>114</bold></highlight> to be upgraded during system operations without the need for special equipment or technical support, and may also permit primary BIOS <highlight><bold>114</bold></highlight> to be upgraded without an operator present through the use of a remote download. At the same time, backup BIOS <highlight><bold>113</bold></highlight> may be protected from inadvertent corruption by requiring the insertion of device <highlight><bold>441</bold></highlight> before backup BIOS <highlight><bold>113</bold></highlight> may be reprogrammed. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The invention can be implemented in circuitry or as a method. The invention can also be implemented as instructions stored on a machine-readable medium, which can be read and executed by at least one processor to perform the functions described herein. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium can include read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.), and others. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The foregoing description is intended to be illustrative and not limiting. Variations will occur to those of skill in the art. Those variations are intended to be included in the invention, which is limited only by the spirit and scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method, comprising: 
<claim-text>validating a primary BIOS to determine if the primary BIOS is corrupted; </claim-text>
<claim-text>automatically selecting for execution a first boot sequence in the primary BIOS if the primary BIOS is not corrupted; </claim-text>
<claim-text>automatically selecting for execution a second boot sequence in a backup BIOS if the primary BIOS is corrupted; and </claim-text>
<claim-text>automatically executing the selected first or second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes validating from the backup BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes setting an invalidity indicator if the primary BIOS is corrupted. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes setting a selection bit to select either the first or second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes performing a checksum on at least a portion of the primary BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>automatically selecting for execution the second boot sequence includes adjusting for differences between the first boot sequence and the second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>retrying execution of the first boot sequence if the first boot sequence is selected for execution and does not complete execution within a predetermined period of time; and </claim-text>
<claim-text>automatically selecting for execution the second boot sequence if execution of the first boot sequence does not complete execution within the predetermined period of time in each of a predetermined number of retries. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A machine-readable medium having stored thereon instructions, which when executed by at least one processor cause said at least one processor to perform operations comprising: 
<claim-text>validating a primary BIOS to determine if the primary BIOS is corrupted; </claim-text>
<claim-text>automatically selecting for execution a first boot sequence in the primary BIOS if the primary BIOS is not corrupted; </claim-text>
<claim-text>automatically selecting for execution a second boot sequence in a backup BIOS if the primary BIOS is corrupted; and </claim-text>
<claim-text>automatically executing the selected first or second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes validating fiom the backup BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes setting an invalidity indicator if the primary BIOS is corrupted. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes setting a selection bit to select either the first or second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>validating the primary BIOS includes performing a checksum on at least a portion of the primary BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>automatically selecting for execution the second boot sequence includes adjusting for differences between the first boot sequence and the second boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>retrying execution of the first boot sequence if the first boot sequence is selected for execution and does not complete execution within a predetermined period of time; and </claim-text>
<claim-text>automatically selecting for execution the second boot sequence if execution of the first boot sequence does not complete execution within the predetermined period of time in each of a predetermined number of retries. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method, comprising: 
<claim-text>connecting a programming module onto a circuit board containing a memory device; </claim-text>
<claim-text>booting a computer system by reading contents from the programming module; </claim-text>
<claim-text>copying a backup BIOS program from the programming module to the memory device; </claim-text>
<claim-text>removing the programming module from the circuit board; and </claim-text>
<claim-text>subsequently booting the computer system from the memory device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising: 
<claim-text>copying a primary BIOS into the memory device without using the programming module. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein: 
<claim-text>connecting the programming module includes receiving all necessary electrical power for the programming module from the circuit board. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein: 
<claim-text>connecting the programming module includes receiving all necessary mechanical support for the programming module from the circuit board. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. An apparatus, comprising: 
<claim-text>a memory device including a primary BIOS and a backup BIOS; </claim-text>
<claim-text>a validator to validate at least a part of the primary BIOS; and </claim-text>
<claim-text>control logic coupled to the memory device to automatically select a first boot sequence in the primary BIOS for execution if the primary BIOS is validated and to automatically select a second boot sequence in the backup BIOS for execution if the primary BIOS is not validated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein: 
<claim-text>the validator includes code in the backup BIOS to perform a validation process on the first boot sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein: 
<claim-text>the backup BIOS is write-protected. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein: 
<claim-text>the backup BIOS is write-protected except during a programming operation on the backup BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein: 
<claim-text>the memory device is a single integrated circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising: 
<claim-text>a programming device to program the backup BIOS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein: 
<claim-text>the programming device includes a read-only memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein: 
<claim-text>the programming device is removably connected to a circuit board containing the memory device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein: 
<claim-text>the programming device is connected to receive all its electrical power from the circuit board. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein: 
<claim-text>the programming device is connected to receive all its mechanical support from the circuit board. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising: 
<claim-text>a timer to determine if the primary BIOS executes within a predetermined period of time.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005277A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005277A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005277A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005277A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005277A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005277A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005277A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
