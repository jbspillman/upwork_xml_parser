<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005090A1-20030102-D00000.TIF SYSTEM "US20030005090A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00001.TIF SYSTEM "US20030005090A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00002.TIF SYSTEM "US20030005090A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00003.TIF SYSTEM "US20030005090A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00004.TIF SYSTEM "US20030005090A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00005.TIF SYSTEM "US20030005090A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00006.TIF SYSTEM "US20030005090A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00007.TIF SYSTEM "US20030005090A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005090A1-20030102-D00008.TIF SYSTEM "US20030005090A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005090</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09895999</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010630</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/177</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>220000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for integrating network services</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Robert</given-name>
<middle-name>R.</middle-name>
<family-name>Sullivan</family-name>
<name-suffix>JR.</name-suffix>
</name>
<residence>
<residence-us>
<city>Pleasanton</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Dalibor</given-name>
<middle-name>F.</middle-name>
<family-name>Vrsalovic</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Muhamed</given-name>
<family-name>Aganagic</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Thomas C. Webster</name-1>
<name-2>BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN LLP</name-2>
<address>
<address-1>Seventh Floor</address-1>
<address-2>12400 Wilshire Boulevard</address-2>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1026</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An integrated internetworking architecture for automating the configuration and control of networks that operate according to standard layered protocols. The described architecture includes two major blocks: (1) a network; and (2) a controller coupled to the network that automatically configures the network by coordinating different resources to perform an action, such as providing an e-commerce shopping service. The controller may operate at a layer above the standard network protocols so as to abstract away the visible complexity of the network, thus allowing a human user to control, configure and operate the network as if it were a single host (e.g., computer) via a simple user interface. A tool set may also be provided to simulate and evaluate the interaction of the various networked components using the properties and provisioning information maintained within the controller. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates generally to the field of computer networking. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Doing business over the Internet, whether selling goods or providing services, is very costly. First, one must invest in the basic infrastructure: a complex computer network that can include more than 100 servers, software, and network appliance elements. Each element must be configured, monitored, and managed to sustain an operational state. Second, because network downtime means lost business, one must continue to invest substantial time and resources in maintaining the network. In fact, the Cost of Ownership (COO) of complex computer networks can far exceed the initial investment. To make matters worse, the COO of complex computer networks does not scale. An incremental increase in service capacity or functionality can mean a significant increase in the complexity of the service network and, therefore, the operations costs to manage that network. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The primary contributor to the high COO of a complex network is the need for constant human supervision of the network. While network management software exists to assist the human network operator, such software offers little more than the ability to remotely control some aspects of the network or the ability to troubleshoot problems more efficiently. For example, tools like OpenView from Hewlett Packard&reg; provide extensive network management functions (e.g., such as monitoring and control of data traffic through network routers and switches), while software tools like IBM Tivoli&reg; provide a fairly comprehensive view of each of each of the networked computer platforms, they are not capable of performing significant &ldquo;network management&rdquo; functions. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Despite the existence of network management tools, the human operator remains the true network manager, and human error remains the major cause of network downtime (e.g., &tilde;40%). For example, the eBay service outage on Jun. 12, 1999, which resulted in a revenue hit of between $3 and $5 million, was the result of operator error. Accordingly, it would be desirable reduce the effects of human error in the management of computer networks. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The increasing complexity of computer networks also impacts the productivity of the design, provisioning, and deployment parts of the life cycle. While Computer Aided Design (CAD) has given way to Computer Aided Manufacturing (CAD/CAM) in mechanical and electronic design fields, comparable benefits in the design and deployment of complex e-Business or internet networks. In the field of mechanical CAD, an underlying volumetric model of the 3-dimensional parts being designed is the basis for motion simulation and design-rules checking, and instructions derived from the model can generally be exported to machine tools to fabricate the parts. In the field of electronic CAD, a circuit model which includes the electronic components similarly enables computer-aided simulation, design rules checking, and debugging of complex circuits. A representation of the finished circuit design can be exported and ultimated rendered as a circuit board or an integrated circuit. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A model-based approach to increasing the productivity and automating the Operations, Management, Administration, and Provisioning of complex computer networks could yield productivity benefits comparable to those realized in the fields of mechanical and electronic CAD. This invention describes such a system. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A better understanding of the present invention can be obtained from the following detailed description in conjunction with the following drawings, in which: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a typical prior art data center configuration. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a meta-server according to one embodiment of the invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>a </italic></highlight>illustrates one embodiment of a meta-server architecture. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>b </italic></highlight>illustrates one example of defined relationships between various meta-server elements using a Unified Modeling Language (&ldquo;UML&rdquo;) representation. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>c </italic></highlight>illustrates a second example of defined relationships between various meta-server elements using Unified Modeling Language. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a meta-server controller deployed within a network and a group of defined zones. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a meta-server controller as basis for an integrated e-business solution developer&apos;s workbench based on the system model. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a particular tool set according to one embodiment of the invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> As described in more detail below, the inventors have developed a network integration architecture and associated Internet services platform that reduces the visible complexity of a network and enables significant automation of the network. According to the network integration architecture, network resources (both hardware and software) and the relationships between those resources are defined in a highly granular and well-understood manner, which enables network management automation, as well as a more highly integrated and scalable view of the network resources so that human operators can be more efficient and less prone to error. The network integration architecture can be implemented as an Internet services platform which is, in fact, a complex network, hidden behind a single user interface and can be controlled as if it were a single computer. Alternatively, the network integration architecture concepts can be applied to an existing network to provide similar benefits. </paragraph>
</section>
<section>
<heading lvl="1">A Complex Computer Network </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> One example of a complex computer network used to do business over the Internet is the data center. A typical data center is a very heterogeneous cluster consisting of computers, networking-equipment, and various appliances. As shown in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> typical data center might include a router <highlight><bold>110</bold></highlight>, a load balancer <highlight><bold>114</bold></highlight> a plurality of &ldquo;front end&rdquo; Web servers <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight>, a firewall <highlight><bold>130</bold></highlight> and a plurality of &ldquo;back end&rdquo; servers <highlight><bold>140</bold></highlight>-<highlight><bold>146</bold></highlight>. All data transmitted and received over the Internet <highlight><bold>105</bold></highlight> passes through the router <highlight><bold>110</bold></highlight>. Load balancer <highlight><bold>114</bold></highlight> analyzes all incoming data requests from clients <highlight><bold>101</bold></highlight> and forwards the requests to an appropriate front end server <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight>. The client request may be for a particular Web page stored on one of the front end servers <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight> which includes embedded objects provided by the back end servers <highlight><bold>140</bold></highlight>-<highlight><bold>145</bold></highlight>For security purposes, a firewall <highlight><bold>130</bold></highlight> monitors/controls the data traffic between the front end servers <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight> and the back end servers <highlight><bold>140</bold></highlight>-<highlight><bold>146</bold></highlight>. </paragraph>
</section>
<section>
<heading lvl="1">Meta-Server Introduction </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> To solve the complexity and cost problems associated with operating a complex computer network, one embodiment logically organizes all network information and services under a single, unitized &ldquo;meta-server&rdquo; platform. The meta-server of this embodiment is comprised of all network &ldquo;components&rdquo; and their existing management interfaces. By way of example but not limitation, network &ldquo;components&rdquo; may include network devices (e.g., load balancers, switches, routers, SSL accelerators, firewalls, . . . etc), servers including typical computers or computer clusters (e.g., from Intel, HP, IBM, Sun, . . . etc), and fixed function computers such as database appliances and compute units (e.g., such as databases, streaming media, or web-caching appliances). Various other hardware/software components may be logically incorporated within the meta-server while still complying with the underlying principles of the invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> logical model of one embodiment of a meta-server <highlight><bold>200</bold></highlight> is comprised of a plurality of &ldquo;services&rdquo; <highlight><bold>210</bold></highlight> (e.g., email services, Web services, database services, . . . etc), &ldquo;resources&rdquo; <highlight><bold>220</bold></highlight> (e.g., hardware and software components) and &ldquo;operators&rdquo; <highlight><bold>230</bold></highlight>. The operator portion <highlight><bold>230</bold></highlight> of the meta server includes a uniform security model which may be used to authorize access to the other elements of the meta-server platform (e.g., by defining groups of users with different authorization levels). Each of these meta-server elements will be described in detail below. In addition, in one embodiment, a central controller <highlight><bold>201</bold></highlight> (illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) is configured to manage and collect information from each of the individual meta-server components. The meta-server controller <highlight><bold>201</bold></highlight> thus logically encapsulates the incorporated resources, exposing only selected summary complexity to the duly authorized operators or external systems. The meta-server controller <highlight><bold>201</bold></highlight> may contain a hierarchical model of the meta-server&apos;s managed elements, their individual configuration properties, associations, and interdependencies, and cached operational status of each element in the form of object properties. The meta-server controller <highlight><bold>201</bold></highlight>&apos;s object model also may contain executable methods (automation programs) which can be invoked directly by operators or by external systems to calculate and repeat complex operations, management, administration, and provisioning sequence steps. The meta-server&apos;s controller <highlight><bold>201</bold></highlight> makes the underlying meta-server appear to be a single &lsquo;logical&rsquo; element to operations personnel or external systems. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Various features of the meta-server <highlight><bold>200</bold></highlight> architecture may be best understood by comparing the meta-server <highlight><bold>200</bold></highlight> and its controller <highlight><bold>201</bold></highlight> to the personal computer. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> For example, the operating system (&ldquo;OS&rdquo;) in a personal computer manages the internal hardware and software resources or components that make up a personal computer, exposing a simplified and abstracted single-system model to the user. The system model exposed by the OS to the user might be fixed, incorporating hardware elements (cpu, disk, memory, display, keyboard, other peripherals) and software elements (OS, device drivers, applications, utilities, etc). </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The OS provides a user interface framework and some necessary user interface pieces that are beneficially used by all applications (e.g., dialog boxes, help with fonts and graphical abstractions, icons, buttons, slider bars, . . . etc). Similarly, the meta-server controller <highlight><bold>201</bold></highlight> of one embodiment provides a user interface framework that can be shared by all data center management applications (e.g., service automation applications). The user interface framework may be developed in any convenient manner while still complying with the underlying principles of the invention (e.g., using a Web server interface, an X-Windows based user interface framework, . . . etc). </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In addition, in a similar manner that a computer OS provides a security model, including functions for authenticating users or other computers requesting access and/or an authorization model for associating allowed actions with each requesting user or computer, the controller <highlight><bold>201</bold></highlight> of one embodiment authenticates users (or systems requesting access) as members of pre-defined groups and generates views of the meta-server services <highlight><bold>210</bold></highlight> and resources <highlight><bold>220</bold></highlight> (e.g., graphically depicting operational and configuration status and offering management actions (commands) based on the selected element(s)). </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The application programming interfaces (&ldquo;APIs&rdquo;) exposed by a personal computer operating system enable a family of compatible applications to be executed on a family of compatible personal computers. Typically, the set of APIs grow over time without unnecessarily breaking the legacy (historically established) APIs. As new operating systems are offered with new innovative functionality, exposing new APIs, the applications written for earlier versions of the operating system are still supported. In the same way, in one embodiment, the controller <highlight><bold>201</bold></highlight> of the meta-server <highlight><bold>200</bold></highlight> includes APIs and a software developer&apos;s kit that allows data center applications to discover, access, and manipulate components managed under the meta-server platform. Accordingly, as the controller <highlight><bold>201</bold></highlight> API is extended to expose new functionality, the compatibility of older system management and automation applications is preserved. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The API exposed by the controller <highlight><bold>201</bold></highlight> may be used by Management Service Providers (who develop management services application frameworks) and/or automation software vendors (&ldquo;ISVs&rdquo;) (who write the individual site lifecycle automation and management applications). As described above, the controller <highlight><bold>201</bold></highlight> may include a user interface capability for use by individual persons responsible for operation, maintenance, administration and configuration of the meta-server <highlight><bold>200</bold></highlight>. In addition, in one embodiment, other computers (or other meta-server controllers which, for example, may manage a hierarchy of meta-servers) and system management tools may access a meta-server <highlight><bold>200</bold></highlight> as they do the individual internet service components today. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The OS for a typical computer reduces the programming and user interfaces to devices (such as display, printers, block devices, etc.) to an abstracted and extensible common-denominator interface known as the device-driver interface. Similarly the OS typically reduces interfaces to common system services to ad-hoc standard interfaces such as SQL server API (for database), and MAPI or VIM API (for messaging). </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> This practice has an important result for makers of computer applications: it allows apps to be written to stable and device- or subsystem-independent interfaces, thus enabling interoperability and use on a large set of otherwise incompatible computers. The stabilized Controller <highlight><bold>201</bold></highlight> interfaces (Client Interface <highlight><bold>321</bold></highlight>, Object Manager <highlight><bold>320</bold></highlight>&apos;s internal model which includes but is not limited to the schema described in <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>b</italic></highlight>, Provider Interface <highlight><bold>326</bold></highlight>, and Driver Interface <highlight><bold>331</bold></highlight>) have a similar impact and benefit for those who create Operations, Management, Administration, and Provisioning automation applications. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Just as stable interfaces and internal model of the computer OS greatly improve the economic Return on Investment (ROI) for computer desktop productivity applications, the stable abstracted interfaces and internal model which constrains the represented inter-element object associations within the Meta-Server <highlight><bold>200</bold></highlight> Controller <highlight><bold>201</bold></highlight> greatly improve the economics for OAM&amp;P and automation applications. An automation application or rule engine can be written to apply more generally to all compliant embodiments of the Meta-Server <highlight><bold>200</bold></highlight> because of the common interfaces and model. Because of the stable interfaces and internal model of the Meta-Server <highlight><bold>200</bold></highlight> Controller <highlight><bold>201</bold></highlight>, a common and uniform User Interface to the Meta-Server and its Services <highlight><bold>210</bold></highlight> is available to operations personnel no matter what those Services may be. </paragraph>
</section>
<section>
<heading lvl="1">Embodiments of a Meta-Server Network Management Architecture </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> One embodiment of a meta-server architecture used to facilitate the network management and control functions described herein is illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>a</italic></highlight>. The illustrated architecture may comprise software executed on a server. However, it should be noted that various architectural components described herein may be implemented by hardware, software or any combination thereof. As illustrated, the meta-server architecture is comprised generally of three components: Applications <highlight><bold>310</bold></highlight>, an Object Manager <highlight><bold>320</bold></highlight> and Drivers <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="7"><number>&lsqb;0032&rsqb;</number> Object Manager </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The object manager <highlight><bold>320</bold></highlight> of one embodiment embodies an object model (described below) to support the meta-server network management architecture. It also provides the mechanisms to instantiate the object model and perform operations on specific instances of an object. Three interfaces (i.e., APIs) are provided to facilitate this level of operation: a client interface <highlight><bold>321</bold></highlight>, a provider interface <highlight><bold>326</bold></highlight>, and a driver interface <highlight><bold>331</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> A provider framework <highlight><bold>325</bold></highlight> allows new/different types of &ldquo;providers&rdquo; to be added to the object manager <highlight><bold>320</bold></highlight>, each of which may include additional object classes and/or operations to enhance the functionality of the object manager <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The Object Manager <highlight><bold>320</bold></highlight> generally includes a representation of classes of objects as described in the typical internal model, or schema, as described by example in <cross-reference target="DRAWINGS">FIGS. 3</cross-reference><highlight><italic>b </italic></highlight>and <highlight><bold>3</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0036" lvl="7"><number>&lsqb;0036&rsqb;</number> Client Interface </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The constrained association relationships, default properties, and default methods for each class of objects represented within the Object Manager <highlight><bold>320</bold></highlight> are a part of the defined Client Interface <highlight><bold>321</bold></highlight> which is then used by various Applications <highlight><bold>310</bold></highlight>. In other words, in one embodiment, the client interface exposes a set of operations that can be performed on the instances of objects from the model (i.e., provided by the object manager <highlight><bold>320</bold></highlight>). The client interface <highlight><bold>321</bold></highlight> provides an application programming interface (&ldquo;API&rdquo;) which may be used by applications <highlight><bold>310</bold></highlight> to configure, query, or manipulate the instances of the objects provided by the object manager <highlight><bold>320</bold></highlight>. A graphical user interface is one such application which provides a graphical, external representation the object model and allows the objects to be displayed and graphically manipulated. A rule engine is another application which can use pre-defined rules to respond to events, changes of status, or invocation of methods associated with the objects within the Object Manager <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="7"><number>&lsqb;0038&rsqb;</number> Provider Framework </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The Provider Framework <highlight><bold>325</bold></highlight> and Provider Interface <highlight><bold>326</bold></highlight> are a possible embodiment of the interconnection and connection between the Object Manager <highlight><bold>320</bold></highlight> and the Driver(s) <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Changes to the properties represented in an object managed by the Object Manager <highlight><bold>320</bold></highlight> which are initiated through the Client Interface <highlight><bold>321</bold></highlight> are propagated to the Drivers <highlight><bold>330</bold></highlight> and ultimately to the managed Services <highlight><bold>210</bold></highlight> and Resources <highlight><bold>220</bold></highlight> in a reliable and efficient manner by the Provider Framework <highlight><bold>325</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When an Application <highlight><bold>310</bold></highlight> invokes an object&apos;s method through the Client Interface <highlight><bold>321</bold></highlight>, the action is reliably and efficiently invoked in the Driver <highlight><bold>330</bold></highlight> by the Provider Framework <highlight><bold>325</bold></highlight>. As described below, the Driver ultimately effects the requested action on the managed Service <highlight><bold>210</bold></highlight> or Resource <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> When the state of a managed Service <highlight><bold>210</bold></highlight> or Resource <highlight><bold>220</bold></highlight> changes, the interaction between the Driver <highlight><bold>330</bold></highlight>, the Provider and Provider Framework <highlight><bold>325</bold></highlight> (through the Provider Interface <highlight><bold>326</bold></highlight>) causes the associated property in the object managed by the Object Manager <highlight><bold>320</bold></highlight> to be reliably and efficiently updated. </paragraph>
<paragraph id="P-0043" lvl="7"><number>&lsqb;0043&rsqb;</number> Provider Interface </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Within a typical embodiment of the Meta-Server Controller <highlight><bold>201</bold></highlight>, the connection between the Provider Framework <highlight><bold>325</bold></highlight> and the Drivers <highlight><bold>330</bold></highlight> which act on or query the managed Services <highlight><bold>210</bold></highlight> or Resources <highlight><bold>220</bold></highlight> could be realized in a variety of means. The Meta-Server Controller <highlight><bold>201</bold></highlight> and its parts described herein could be embodied along with Drivers <highlight><bold>330</bold></highlight> and some or all of the managed Services <highlight><bold>310</bold></highlight> and/or Resources <highlight><bold>320</bold></highlight> on a single virtual, logical, and/or physical system. Alternatively the parts described here could be embodied on virtual, logical, or physically distinct system. Whether Providers and Provider Framework <highlight><bold>325</bold></highlight> are on the same system as the Drivers <highlight><bold>330</bold></highlight>, or not, a variety of physical connections or links, network and transport protocols, and/or object interfaces or remote procedure call (&ldquo;RPC&rdquo;) mechanisms may be utilized. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The common (defined for a particular embodiment or for a compatible set of embodiments) architecture of the Provider Framework <highlight><bold>325</bold></highlight> and Driver(s) <highlight><bold>330</bold></highlight> enable Provider Interface(s) <highlight><bold>326</bold></highlight> to be adapted to commonly used (and thus convenient) interconnection means including (but not limited to) internal system APIs and binary compatibility interfaces (&ldquo;ABI&rdquo;s), well known protocols such as SNMP, WBEM, Telnet, HTTP, HTTPS, or CORBA, or through specific and custom means suited to and incorporated within a particular embodiment. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> A managed object provider is a provider through which operations on the various meta-server levels of abstraction described below (e.g., resource, interconnect resource, service, interconnect service, . . . etc) may be manifested in the real world. The drivers <highlight><bold>330</bold></highlight>, which communicate with the managed object provider through the provider interface <highlight><bold>326</bold></highlight>, provide the physical manifestations of each of the meta-server operational requests. </paragraph>
<paragraph id="P-0047" lvl="7"><number>&lsqb;0047&rsqb;</number> Driver Interface </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The driver interface <highlight><bold>331</bold></highlight> is a set of operations through which the object manager <highlight><bold>320</bold></highlight> performs a management operation on a device (e.g., start, stop, status requests, . . . etc). The management operations request is transmitted through the provider framework <highlight><bold>325</bold></highlight>. </paragraph>
</section>
<section>
<heading lvl="1">Defined Relationships Between Meta-Server Components </heading>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In one embodiment, the meta-server object model is defined using Unified Modeling Language (&ldquo;UML&rdquo;) terminology. This embodiment provides a well understood object design nomenclature of Classes, Operations, Attributes or Properties, and Associations. For example, two such embodiments of a meta-server as represented in its controller <highlight><bold>201</bold></highlight> are described by the UML object diagrams illustrated in <cross-reference target="DRAWINGS">FIGS. 3</cross-reference><highlight><italic>b </italic></highlight>and <highlight><bold>3</bold></highlight><highlight><italic>c</italic></highlight>, which show the Class names, Aggregations, and Associations between various defined meta-server objects. (The names for <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>b </italic></highlight>are described below). </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> A meta-server controller <highlight><bold>201</bold></highlight> is illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> configured within a data center. The load-balancer <highlight><bold>114</bold></highlight> of this meta-server embodiment forwards incoming management connections directly to the controller <highlight><bold>201</bold></highlight>, which acts as a &ldquo;proxy&rdquo; and/or control gateway for all network management interactions. The controller may perform network/platform monitoring and network control functions based on various levels of abstraction defined using the object model. For example, in one particular embodiment, the following levels of abstraction are defined: </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Pod: A &ldquo;Pod&rdquo; represents the entire system and is the highest aggregation point of the object model. It is an aggregation of Zones, Interconnect Resources, and Services Collections (all of which are described below). In the example topology, the Pod would describe all the components in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, excluding the controller <highlight><bold>201</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Zone: A &ldquo;Zone&rdquo; is a named logical grouping of execution or storage resources (e.g., servers) that provide a contained execution for Services or their components. In one embodiment, only certain types of resources may be placed in Zones. For example, network or other communication between Zones is provided/mediated by Interconnect Resources. Three zones are defined in the embodiment described in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>: an Internet (or external) zone <highlight><bold>410</bold></highlight>; a front-end zone <highlight><bold>412</bold></highlight>; and a back-end zone <highlight><bold>414</bold></highlight>. Of course, various other zone definitions may be provided while still complying with the underlying principles of the invention. Only the front-end zone <highlight><bold>412</bold></highlight> and the back-end zone <highlight><bold>414</bold></highlight> contain resources. The Internet zone <highlight><bold>410</bold></highlight> does not contain any resources, but its definition may be used to define the interconnect resources (described below). </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Interconnect Resource: An interconnect resource is a resource that participates in two separate Zones. More specifically, in one embodiment, an Interconnect Resource is a named logical grouping of communication resources that provide gateway (for example bridging or routing) services between zones or environments external to the Pod. Only certain types of managed objects may be represented as Interconnect Resources. In the example topology described in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the Internet Router <highlight><bold>110</bold></highlight>, the Load Balancer <highlight><bold>114</bold></highlight>, and the Firewall <highlight><bold>130</bold></highlight> would be configured as Interconnect Resources. In one particular embodiment, there are two types of Interconnects: Intra-Pod Interconnects that connect two zones within the pod, and Extra-Pod Interconnects that connect zones with the external environment. An Intra-Pod Interconnect may be under the full management of the controller, whereas an Extra-Pod interconnect may not (i.e., due to the inability of the controller to manipulate external variables such as IP address assignment, because the communications path to the Extra-Pod Interconnect Resources is constrained or denied for security reasons, etc.). </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Interconnect Resources are an important abstraction of the Integrated Network Services invention. In one possible embodiment, a method in an Interconnect Resource&apos;s object, managed by the Object Manager <highlight><bold>320</bold></highlight> in the Controller <highlight><bold>201</bold></highlight>, could enumerate the intra-Zone communications requirements for each of the adjacent Zones. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In an example IP protocol-based system, these requirements could be aggregated as &ldquo;source&rdquo; and &ldquo;sink&rdquo; IP addresses, port-numbers (transport layer requirements) as well as round-robin, least recently used, or other (application protocol layer) requirements. Once the requirements are enumerated and aggregated for the adjacent Zones, the method to (re-) provision the Interconnect Resource could be translated from a common and convenient internal Controller <highlight><bold>201</bold></highlight> representation into specific Route and Policy provisioning instructions (for example) to the specific Interconnect Resource. Similar mechanisms can be fully implemented for other, non-IP protocols or interconnect mechanisms. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Thus, a dynamic Provisioning and Re-Provisioning method could be implemented for the Interconnect Resource class, allowing complex network provisioning tasks to be fully automated. As Services <highlight><bold>210</bold></highlight> or Resources <highlight><bold>220</bold></highlight> are added, removed, enabled, disabled, brought online or as they fail, the associated Interconnect Resources can be reconfigured automatically. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Resource: Resources include devices, networks, systems, and applications. A Resource is typically contained entirely in a single Zone. This relationship is expressed by an association between the Resource and the Zone in the model managed by the Object Manager <highlight><bold>320</bold></highlight>. The Resource can have any number of Services running on it. In the example topology illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, all of the servers <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight>, <highlight><bold>140</bold></highlight>-<highlight><bold>146</bold></highlight> may be instances of the Resource object. A number of standards exist or are emerging, such as Web Based Enterprise Management (&ldquo;WBEM&rdquo;), for communicating with managed resources. While the Controller <highlight><bold>201</bold></highlight> of one embodiment will provide support for WBEM (among others), the controller architecture is protocol-neutral. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Service: A Service may be a comprehensive and self-sufficient process or set of processes. A service runs on a single Resource. In the sample topology, the services running on the server resources are instances of the Service object (e.g., Web Services, database services, audio/video services, . . . etc). </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Service Collection: A Service Collection represents an aggregation of Services and/or other Service Collections. In the example topology, the Web Services provided by servers <highlight><bold>120</bold></highlight>-<highlight><bold>125</bold></highlight> may be aggregated into a single &ldquo;Web Service&rdquo; Collection. Then the Web Services can be operated on collectively by operating on the defined Service Collection. The Service Collection can also be used to define a Load Balance Service (provided by load balancer <highlight><bold>114</bold></highlight>), a Firewall Service (provided by firewall <highlight><bold>130</bold></highlight>) and a Live Picture Service (provided by servers <highlight><bold>140</bold></highlight> and <highlight><bold>144</bold></highlight>). In one embodiment, the entire site is a special Service Collection is that it cannot be aggregated into another Service Collection, but may be aggregated into a pod. </paragraph>
</section>
<section>
<heading lvl="1">Meta-Server Applications </heading>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Several application-specific embodiments of the meta-server will now be described. It should be noted, however, that these examples are for the purpose of illustration only and should not be read to limit the underlying principles of the invention. </paragraph>
<paragraph id="P-0061" lvl="7"><number>&lsqb;0061&rsqb;</number> Control and Management Gateway </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Independent service providers (so called &ldquo;xSPs&rdquo;) and in-house information technology groups are frequently called upon to establish service level agreements, or &ldquo;SLA&apos;s.&rdquo; In current data centers, the customers-to whom the SLA&apos;s are promised-require ongoing access to the managed components. Frequently the end-customer is provided with the &ldquo;root password&rdquo; to his/her servers, and is able to start and stop, to reconfigure, or even to re-provision or upgrade operating system or application software without necessarily notifying the service provider. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> As a result, any attempts to audit or log the access and changes, or to enforce agreed-upon rules in the SLA (e.g., remote console sessions are allowed only after backup is completed, enabling recovery from unforeseen consequences of the control actions taken during the remote console session, . . . etc) are bypassed. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Since all control and management actions are routed through the meta-server controller <highlight><bold>201</bold></highlight>, after the operator or agent has been properly authenticated and duly authorized, strict access control is enforced. The most commonly used actions are exposed as Methods (or &ldquo;buttons&rdquo; in the graphical user interface of the Controller <highlight><bold>201</bold></highlight>) and thus can be invoked, executed, and logged in the Controller <highlight><bold>201</bold></highlight>&apos;s event log without ambiguity or operator errors. Remote console or other access to individual components (when allowed for a specified Group of properly authenticated Users) occurs through a &ldquo;proxy&rdquo; service spawned within the controller <highlight><bold>201</bold></highlight> as required. This &ldquo;proxy&rdquo; function can constrain and log keystrokes and actions taken as necessary. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In one embodiment, the system model in the meta-server controller <highlight><bold>201</bold></highlight> contains the current operational status of the meta-server <highlight><bold>200</bold></highlight>, and this information is exposed to authorized agents through the controller&apos;s supported management interfaces (e.g., the Client Interface <highlight><bold>321</bold></highlight>, exposed over a remote invocation mechanism and protocols which can include SNMP, HTTP or HTTPs, XML, WBEM, or any other machine-to-machine interfaces, as required) so that higher level management systems in use in the data center may be integrated. Generally each individual meta-server <highlight><bold>201</bold></highlight> would be represented in a higher level management system as a single logical element, but the individual meta-servers <highlight><bold>201</bold></highlight> could alternately be federated together into a single logical and virtual Datacenter as exposed by a meta-meta-server. In this latter case, a meta-server controller <highlight><bold>201</bold></highlight> would incorporate individual meta-servers into a 2<highlight><superscript>nd </superscript></highlight>level meta-meta-server. This hierarchy could be thus extended to multiple levels as appropriate to scale up the Integrated System Management system concept for large scale deployments. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The controller <highlight><bold>201</bold></highlight> then extends and complements the capability of existing systems management tools where already in use by providing a &ldquo;top-down&rdquo; or hierarchical status of the meta-server on all supported consoles. In one embodiment operators may open a secure session with the desired meta-server and monitor/control a given customer or service simply by selecting a meta-server icon provided on his/her console. </paragraph>
<paragraph id="P-0067" lvl="7"><number>&lsqb;0067&rsqb;</number> Customer Management Portal </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> A meta-server user interface is provided in one embodiment which is extensible and based on the self-contained web server, which has access (through the Client Interface API) to the system model, objects for managed elements and their status/properties, and methods in the running meta-server <highlight><bold>201</bold></highlight> system. The common internal model of the Object Manager <highlight><bold>320</bold></highlight> and the uniform Client Interface <highlight><bold>321</bold></highlight> enable a &ldquo;dynamic GUI&rdquo; web interface to be implemented. With one set of HTML pages and associated web server back-end scriptlets (or similar) the meta-server embodiment managed by the controller can be uniformly exposed to the web client and the properly authenticated User. One set of HTML &ldquo;dynamic GUI&rdquo; web interface pages is thus able to represent any possible instantiation of objects into the controller <highlight><bold>200</bold></highlight>&apos;s meta-server system. This means that &ldquo;custom&rdquo; UI pages are synthesized or dynamically created for certain groups of authenticated users, exposing only the objects, properties, and/or methods they&apos;re authorized to interact with. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Custom pages in the user interface may be created, then, which correspond and correlate to the contractual SLAs obligations in force between a service provider and the owner (service provider&apos;s customer) of the services running on a deployed meta-server <highlight><bold>200</bold></highlight>. Performance to the service provider&apos;s obligations can be summarized, reported, and graphically displayed by the custom pages in the user interface. System performance and uptime, transaction response times, asset and software license management, and even links to associated customer service applications like trouble ticket disposition and billing may be provided within the user interface. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Services which are obligated and/or offered under the SLA, or even optional value-added services, can be initiated automatically from within the meta-server controller user interface. Moreover, methods, which are associated with services running within the meta-server <highlight><bold>200</bold></highlight>, can be implemented as simple scripts. Alternatively, or in addition, they can instead invoke method programs added through the client interface API <highlight><bold>321</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The user interface can be used generally (e.g., according to the configured permissions for the logged-in user&apos;s group) to interact with automation applications that have been loaded and executed on the meta-server controller <highlight><bold>201</bold></highlight>. One example of such an application is a rule-engine that hooks meta-server events (system events of all kinds) and filters or qualifies them against user-defined rules, in order to initiate auto-restart or auto-failover fault recovery, trouble call-out, or SLA non-compliance notification. For example, if a particular server crashes on the network, this event may trigger a fault-recovery application on the controller <highlight><bold>201</bold></highlight> which will then bring the server and/or any other system components back online in the right order. </paragraph>
<paragraph id="P-0072" lvl="7"><number>&lsqb;0072&rsqb;</number> Automation Application Platform </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The operational costs associated with managing complex networks/systems outweigh capital, and sometimes even bandwidth costs for a typical Internet service deployment. Within the scope of a given meta-server <highlight><bold>200</bold></highlight> (or even across a federation of coherently configured meta-server&apos;s) a programmer using the client interface API <highlight><bold>321</bold></highlight> can specify a partially or fully qualified reference to any object within the meta-server <highlight><bold>200</bold></highlight> (i.e., provided via the object manager <highlight><bold>320</bold></highlight>). The permissions may be based on the agent&apos;s name and authentication credentials may be enforced at the API <highlight><bold>321</bold></highlight> boundary, with fine-grained control by the system configurator (e.g., at the level of individual properties and methods of individual objects). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The internal model of the controller <highlight><bold>201</bold></highlight> may be modified or extended. In one embodiment, this can be done on-the-fly, through the API; in another embodiment, extension of the internal model is accomplished by re-configuring and re-starting the controller. This allows extension of the system model to include phantom services and providers that include new scripts and runtime programs as needed to implement desired functionality. </paragraph>
<paragraph id="P-0075" lvl="7"><number>&lsqb;0075&rsqb;</number> Encapsulation of Components into &ldquo;Unitized&rdquo; Deployment Building Block </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The meta-server controller <highlight><bold>201</bold></highlight> may be configured as a stand-alone component to existing E-Business or Internet service systems. By re-using and, where necessary, writing the relatively simple &ldquo;Providers&rdquo; for the necessary system components, the configuration and runtime-support for any system which implements IP-based services can be achieved. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Numerous deployed and to-be-deployed internet services, Web sites, and related E-Business systems share strikingly similar topologies, and use common or largely compatible individual components. The meta-server notions comprehend an opportunity for platform vendors, value-added resellers, or integrators to form unitized meta-server platforms (e.g., using off-the-shelf components). Certain topologies are common enough to be predictable as starting points for such off-the-shelf, unitized meta-server configurations: simple two-tier systems, with a reasonable ratio of web-heads &amp; proxies in the front-end, behind a load balancer, and with a few (e.g., 3, 4) applications/database servers in the back-end and a firewall between the subnets. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> One embodiment of such a system is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, which includes front end servers <highlight><bold>510</bold></highlight>, back end servers <highlight><bold>520</bold></highlight> and all other necessary networking logic (e.g., routing, switching, load balancing, . . . etc) within a single unitized platform. The meta-server components may be packaged with common sheet metal, redundant power &amp; interconnects, and with serviceability features, thereby significantly reducing overall system costs. In one embodiment, a meta-server may also include hot-swappable, high-integration, board level components. Moreover, in one embodiment, the meta-server is supported by a dynamically configurable &ldquo;backplane&rdquo; interconnect technology (e.g., based on Fiberchannel&trade; or InfiniBand&trade; technology). </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Since the meta-server architecture described herein manages and encapsulates the components of deployable &ldquo;unit&rdquo; capable of fully implementing an internet service or services, the deployment and operation of such services is greatly simplified. Unitized deployment, and the associated &ldquo;hiding&rdquo; of the internal busses and complexity offers significant benefits over current data center solutions. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Since the meta-server controller <highlight><bold>201</bold></highlight> includes the configuration, provisioning methods, and status of the running data center services, an automation application extension is provided in one embodiment to bring &ldquo;Plug and Play&rdquo; functionality at the component level to the meta-server. An meta-server &ldquo;add-on&rdquo; module that extends the existing subnets and zones, or which augments the existing topology of the running meta-server(s), could literally be dropped next to an operating meta-server. Upon successful interconnect and power-up, the meta-server controller <highlight><bold>201</bold></highlight> of this embodiment automatically recognizes the new module(s), and automatically allocate, provision, configure, and install the resources to the running site. These concepts are generally enabled by the meta-server functionality described herein. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The meta-server <highlight><bold>200</bold></highlight>&apos;s controller <highlight><bold>201</bold></highlight> embodiment may contain (within the Object Manager <highlight><bold>320</bold></highlight>) the complete set of information needed to provision, configure, test, and run the services within the meta-server <highlight><bold>200</bold></highlight>. This information may include (but is not limited to) the source network path or filename for each Resource <highlight><bold>220</bold></highlight>&apos;s OS, additional agents, installable software packages, and runtime content. The meta-server <highlight><bold>200</bold></highlight> can thus &ldquo;import&rdquo; a complete description of the software, configuration, and content necessary to instantiate a Service Collection on a particular meta-server <highlight><bold>200</bold></highlight> &ldquo;Pod&rdquo;, including the automation and management framework. Thus the &ldquo;imported&rdquo; description (and the software modules included by file or network pathname reference) are loosely comparable to a &ldquo;silent install&rdquo; script or program used to rebuild a single personal computer or server&mdash;except that the imported description loads an entire meta-server and its controller. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Similar productivity gains have been realized in other engineering and manufacturing/operations fields when an underlying system model has enabled a cohesive relationship between tools used in the design, validation, and manufacturing life-cycle. For two examples, consider mechanical computer-aided-design (CAD) and electronic CAD. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In mechanical CAD, an engineer uses a design tool to capture the form and function of a conceptual idea into a mechanical CAD program (like AutoCAD). Internal to the CAD program, a three-dimensional volumetric model of the system is created and manipulated by the designer. Ultimately the mechanical system described in this model can be tested for design rules (tolerances and dimensional fit between elements, for example), and a simulation of the interaction of the elements can be run on the design tool. Ultimately the components of the modeled system can be manufactured by machine tools using &ldquo;tool-paths&rdquo; and other instructions derived from the tool system&apos;s volumetric model. Standardization of the mechanical models and machine tool instructions has economic benefits for the makers of individual tools, simulation systems and machine tool controllers, and is important for realization of the CAD/CAM (computer-aided-design and computer-aided-manufacturing) systems presently available. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Similarly, electronic CAD uses a model of a circuit being designed to gain similar benefits. Conceptual design starts by dragging and dropping components (transistors, capacitors, etc) on the screen. Design rules can be run (to perform basic validity checking: no shorts or unconnected elements, etc). Models (ref: Spice or similar) of the individual components can be combined, and test signals can be simulated, to perform dynamic simulations of the described system. Ultimately, representations of the validated circuit can be exported based on the circuit model to manufacture the circuit as an application-specific integrated circuit (ASIC) or circuit board. Standardized representations of the circuit model (for example, ref VHDL) enable economic benefits and interoperability between tool chain components, thus increasing overall CAD/CAM productivity. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The internal model of a meta-server and the services running thereon can be compared to the volumetric models or circuit models that enable life-cycle productivity described in the examples above. The meta-server&apos;s Services and their interaction can be checked and simulated by the tools based on the properties, provisioning information carried within the meta-server model. The Operations, Administration, Management and Provisioning automation methods and the rule-sets that invoke them can be fully manipulated and verified in the simulation environment. Thus, computer-aided-design and computer-aided-operations (CAD/CAO) benefits can be realized from the model described in this invention and its embodiments. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Specifically a tool chain, comparable to the tool chain described for the mechanical and electronic CAD fields described above, can be created for use with the meta-server and its internal architecture. One such tool chain, employed in one embodiment, is described in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, which includes a meta-server controller <highlight><bold>201</bold></highlight>, the Client Interface <highlight><bold>321</bold></highlight>, and tools which are special purpose Applications <highlight><bold>310</bold></highlight> as described with respect to <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Different embodiments of the system may employ different sets of tools. The examplary tools referenced in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> include (but are not limited to) Meta-Server Design Capture <highlight><bold>610</bold></highlight>, Meta-Server Design Check <highlight><bold>620</bold></highlight>, Meta-Server Automation Rules and Automation Workbench <highlight><bold>630</bold></highlight>, Meta-Server Performance Simulator <highlight><bold>640</bold></highlight>, Meta-Server Functional Simulator <highlight><bold>650</bold></highlight>, Meta-Server Documentation Generator <highlight><bold>660</bold></highlight>, Meta-Server Deployment Exporter <highlight><bold>670</bold></highlight>, Meta-Server Ops Portal <highlight><bold>680</bold></highlight> (which, for example, might include the &ldquo;dynamic GUI&rdquo; user interface or other Custom pages as required), and the Meta-Server Maintenance Assistant (not shown). </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Embodiments of the invention may include various steps, which have been described above. The steps may be embodied in machine-executable instructions which may be used to cause a general-purpose or special-purpose processor to perform the steps. Alternatively, these steps may be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Elements of the present invention may also be provided as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic device) to perform a process. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, propagation media or other type of media/machine-readable medium suitable for storing electronic instructions. For example, the present invention may be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection). </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Throughout this detailed description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. In certain instances, well known structures and functions were not described in elaborate detail in order to avoid obscuring the subject matter of the present invention. Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system comprising: 
<claim-text>a network including a plurality of components; and </claim-text>
<claim-text>a controller coupled to the network and operative to automatically configure the components of the network to perform a combined action. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the controller defines relationships between the components to configure them to perform a combined action. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein each resource is one of hardware and software. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the action includes providing a network service. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the controller automatically configures the network in response to detecting an event. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein the event is generated in response to automatically detecting increased network usage. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein the network includes a plurality of resources, the controller assigning additional resources to provide a network service that is already being provided by other resources in response to the event. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein the event is generated in response to the controller detecting demand for a new network service. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the demand for the new network is issued in response to a command issued by a user of the system. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a console coupled to the controller operative to provide an interface that allows a human user to interact with the controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method comprising: 
<claim-text>logically grouping a plurality of components at a data center into a single meta-server; </claim-text>
<claim-text>defining one or more hierarchical relationships between each of said components including one or more associations, dependencies and/or prerequisites, said hierarchical relationships providing information related to network operations at said data center; and </claim-text>
<claim-text>using said information for one or more network management functions at said data center. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein a first one of said defined hierarchical relationships comprise: 
<claim-text>a first zone or resource collection comprised of a first subset of said plurality of components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein a second zone or resource collection of said defined hierarchical relationships comprise: 
<claim-text>a second zone comprised of a second subset of said plurality of components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein a third one of said defined hierarchical relationships comprise: 
<claim-text>an interconnect logically connecting said first zone and said second zone. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein one of said components grouped within said first zone is a Web server. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein one of said components grouped in both said first zone and said second zone is a firewall. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein one of said components is a router. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein one of said network management functions is to initialize one or more of said system components at said data center and said defined hierarchical relationships between each of said system components is used to determine an appropriate order in which to initialize said one or more components. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein initializing comprises rebooting one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein initializing comprises restarting one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein initializing comprises reconfiguring one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A meta-server comprising: 
<claim-text>a plurality of front end Web servers to process client requests for Web pages; </claim-text>
<claim-text>a plurality of back-end servers to perform various back-end processing functions associated with said client requests; </claim-text>
<claim-text>a controller to define one or more logical hierarchical relationships between each of said components including one or more associations, dependencies and/or prerequisites, said hierarchical relationships providing information related to network operations at said data center and to use said information for one or more network management functions at said data center. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> further comprising: 
<claim-text>a firewall communicatively coupled between said front-end Web servers and said back-end servers to analyze and filter data traffic directed towards said back end servers, </claim-text>
<claim-text>said controller further defining one or more additional logical hierarchical relationships between said firewall and said front-end and/or said back-end servers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> further comprising: 
<claim-text>a router communicatively coupled between said front-end Web servers, said back-end servers and an external network, said router to process data traffic according to a network addressing protocol, </claim-text>
<claim-text>said controller further defining one or more additional logical hierarchical relationships between said router, said front-end servers, said back-end servers and/or said firewall. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said front-end servers and said back-end servers are physically configured within a single unitized platform. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein said front-end servers and said back-end servers communicate over a dynamically configurable backplane bus. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said defined hierarchical relationships comprise a first zone including said front-end Web servers, a second zone including said back-end servers, and an interconnect logically coupling said first zone with said second zone. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The meta-server as in <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said defined hierarchical relationships comprise a first zone including said front-end Web servers, a second zone including said back-end servers, an interconnect logically coupling said first zone with said second zone, and an interconnect resource comprised of said firewall. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. An article of manufacture including program code which, when executed by a machine, cause said machine to perform the operations of: 
<claim-text>logically grouping a plurality of components at a data center into a single meta-server; </claim-text>
<claim-text>defining one or more hierarchical relationships between each of said components, said hierarchical relationships providing information related to network operations at said data center; and </claim-text>
<claim-text>using said information for one or more network management functions at said data center. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein a first one of said defined hierarchical relationships comprise: 
<claim-text>a first zone comprised of a first subset of said plurality of components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein a second one of said defined hierarchical relationships comprise: 
<claim-text>a second zone comprised of a second subset of said plurality of components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference> wherein a third one of said defined hierarchical relationships comprise: 
<claim-text>an interconnect logically connecting said first zone and said second zone. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein one of said components grouped within said first zone is a Web server. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference> wherein one of said components grouped in both said first zone and said second zone is a firewall. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein one of said components is a router. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein one of said network management functions is to initialize one or more of said system components at said data center and said defined hierarchical relationships between each of said system components is used to determine an appropriate order in which to initialize said one or more components. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein initializing Comprises rebooting one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein initializing comprises restarting one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The article of manufacture as in <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein initializing comprises reconfiguring one or more of said system components. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A method comprising: 
<claim-text>defining one or more logical hierarchical relationships between a plurality components on a network including one or more associations, dependencies and/or prerequisites, said logical hierarchical relationships providing information related to network operations; and </claim-text>
<claim-text>executing a simulation of said network operations based on said hierarchical relationships between said components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference> further comprising: 
<claim-text>storing different groups of said logical hierarchical relationships into one or more tool sets, said tool sets usable for conducting said simulation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference> further comprising: 
<claim-text>using results of said simulation to design additional logical hierarchical relationships between said components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> wherein designing additional logical hierarchical relationships comprises optimizing said logical hierarchical relationships between said components. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The method as in <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference> wherein said additional logical hierarchical relationships are designed responsive to an inclusion of new components on said network. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A network management architecture defined by a series of abstractions comprising: 
<claim-text>a plurality of network resources; </claim-text>
<claim-text>one or more services, each comprised of a specified set of said network resources; </claim-text>
<claim-text>a service collection comprised of two ore more services; and </claim-text>
<claim-text>a user interface providing information related to and control over said service collection, said services, and/or said network resources to a user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The network management architecture as in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference> wherein one of said resources is a Web server. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The network management architecture as in <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference> wherein one of said resources is a load balancer. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The network management architecture as in <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein said Web server and said load balancer both are included in a particular service. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The network management architecture as in <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference> wherein said Web server is included in a particular service with a plurality of other Web servers. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The network management architecture as in <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference> wherein said user is provided with differing levels of access to said service collection, said services, and/or said network resources, depending on a user group to which said user belongs. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The network management architecture as in claim <highlight><bold>50</bold></highlight> wherein said user is provided with access to specified objects, properties and/or methods of one or more of said services, service groups and/or resources based on access privileges of said user group. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The network management architecture as in claim <highlight><bold>51</bold></highlight> wherein said user interface dynamically displays to said user only those specified objects, properties and/or methods to which said user is permitted access.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005090A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005090A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005090A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005090A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005090A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005090A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005090A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005090A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005090A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
