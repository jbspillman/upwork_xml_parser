<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004904A1-20030102-D00000.TIF SYSTEM "US20030004904A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00001.TIF SYSTEM "US20030004904A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00002.TIF SYSTEM "US20030004904A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00003.TIF SYSTEM "US20030004904A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00004.TIF SYSTEM "US20030004904A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00005.TIF SYSTEM "US20030004904A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004904A1-20030102-D00006.TIF SYSTEM "US20030004904A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004904</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896036</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06N003/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06N003/12</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F015/18</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>706</class>
<subclass>013000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Multi-module genetic Programming with multiple genetic data representations</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Evan</given-name>
<middle-name>Randy</middle-name>
<family-name>Kirshenbaum</family-name>
</name>
<residence>
<residence-us>
<city> Mountain View</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>HEWLETT-PACKARD COMPANY</name-1>
<name-2>Intellectual Property Administration</name-2>
<address>
<address-1>P.O. Box 272400</address-1>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80527-2400</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method for genetic programming which is based on multiple genetic data component representations. Multiple genetic data component representations are determined and a solution is evolved using a set of genetic data components represented by the multiple genetic data component representations. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention pertains to the field of genetic programming. More particularly, this invention relates to genetic data representations in genetic programming. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Art Background </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Genetic programming may be used to obtain a variety of problem solutions. A problem solution obtainable through genetic programming may take the form of a computer program, a math function, an electrical circuit, finite automata, a graph structure, or a neural network to name a few examples. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Genetic programming may be defined as a computer-based programming methodology in which problem solutions are generated using an iterative process that simulates evolution by natural selection. Genetic programming typically involves the generation of an initial population of candidate solutions. A candidate solution plays a role analogous to an organism in biological evolution. Each candidate solution in a population is typically evaluated as a solution to a particular development problem using a fitness measure. If a candidate solution is considered good enough in terms of the fitness measure, then it is usually selected as the solution. Otherwise, a subset of the candidate solutions from the population are typically selected to become parents for a population of child candidate solutions. The child candidate solutions are then generated and evaluated as solutions using the fitness measure. The process repeats through generations of child populations until an individual candidate solution that is good enough is found or until it is decided that the process has gone on sufficiently long that it is not worth proceeding. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Child candidate solutions are typically created by combining genetic data components from parent candidate solutions using techniques that are modeled on biological processes such as mutation and crossover. Typically, the genetic data component of a candidate solution in prior genetic programming methods is represented as a parse tree or a sequence of instructions. It is desirable to use a genetic data component representation that decreases the number of generations of candidate solutions that need to be evaluated before obtaining a suitable solution. This would decrease the overall costs associated with using genetic programming to obtain problem solutions. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A method for genetic programming is disclosed which is based on multiple genetic data component representations. Multiple genetic data component representations are determined and a solution is evolved using a set of genetic data components represented by the multiple genetic data component representations. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Other features and advantages of the present invention will be apparent from the detailed description that follows. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention is described with respect to particular exemplary embodiments thereof and reference is accordingly made to the drawings in which: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example of a candidate solution which is partitioned into a program module and a parameters module; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows multiple genetic data component representations for a candidate solution which includes a program module and a parameters module; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a crossover operation on a pair of candidate solutions whose genotypes have genetic data component representations according to the present teachings; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example of a candidate solution which includes a neural network module and a program module and a parameters module; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates multiple genetic data component representations for a candidate solution which includes a neural network module and a program module and a parameters module; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates another example of multiple genetic data component representations for a candidate solution which includes a neural network module and a program module and a parameters module. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to the present method for genetic programming, multiple genetic data component representations are determined and a solution is evolved using a set of genetic data components represented by the genetic data component representations. The genetic data component representations may be determined by determining a model for the solution such that the model includes a set of modules. A solution may be evolved by parameterizing each module based on the genetic data components. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> A genetic data component representation may be any data structure (an array, a graph, a list, etc.) for which genetic operators may be defined. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One example of a genetic data component representation is a tree having nodes labeled with operators taken from an operator set. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Another example of a genetic data component representation is a sequence of instructions taken from an instruction set. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Another example of a genetic data component representation is a sequence of integers or floating-point numbers. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Yet another example of a genetic data component representation is a sequence of bits. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Evolving a solution may be performed in a known manner by generating generations of candidate solutions using genetic operators such as mutation and/or crossover. For example, parent candidate solutions of a generation may be selected based on their fitness and genetic data components for child candidate solutions obtained by performing crossover operations on the genetic data components of their parents. The genetic data components of parent and child candidate solutions have the representations determined according to the present teachings. The child candidate solutions may then be tested for fitness. The process may be repeated through subsequent generations until a suitable candidate solution is found. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The modules of a candidate solution are functional components which act in combination and in reaction to an environment to determine the fitness of the candidate solution. Each module is characterized by a &ldquo;model&rdquo; and realized (i.e. parameterized) by referring to one or more of the genetic data components. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> One example of a model is a mathematical model having a set of parameters. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Another example of a model is a set of operational semantics of a programming language. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Another example of a model is a specification of an abstract machine. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Yet another example of a model is the semantics of a neural network or finite automaton. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Another example of a model is the physics of an electrical circuit or molecule. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The realization of a module may include reading a set of parameters out of a numeric sequence or a sequence of bits interpreted as numbers, interpreting a labeled tree as a parse tree for a program written in the language, interpreting a sequence of instructions as a program, or interpreting a tree or sequence as a recipe for the construction of a structure such as a neural network or electrical circuit. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The genetic data component representations include at least two different representations. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an example of a model for a candidate solution <highlight><bold>32</bold></highlight>. The candidate solution <highlight><bold>32</bold></highlight> includes a program module <highlight><bold>20</bold></highlight> and a parameters module <highlight><bold>22</bold></highlight>. Any one or more of a set of operators of the program module <highlight><bold>20</bold></highlight> may reference any one or more of the param_<highlight><bold>1</bold></highlight> through param_m of the parameters module <highlight><bold>22</bold></highlight>. An example of operators in the program module <highlight><bold>20</bold></highlight> is as follows in pseudo-code. </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> gain(param<highlight><subscript>&mdash;</subscript></highlight>8, 0, param<highlight><subscript>&mdash;</subscript></highlight>2)&plus;sin(param<highlight><subscript>&mdash;</subscript></highlight>4) </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows multiple genetic data component representations <highlight><bold>30</bold></highlight> for the candidate solution <highlight><bold>32</bold></highlight>. The genetic data component representations <highlight><bold>30</bold></highlight> include a genetic data component representation for each module of the candidate solution <highlight><bold>32</bold></highlight>&mdash;a parse tree <highlight><bold>10</bold></highlight> corresponding to the program module <highlight><bold>20</bold></highlight> and a sequence of numbers <highlight><bold>12</bold></highlight> corresponding to the parameters module <highlight><bold>22</bold></highlight>. The parse tree <highlight><bold>10</bold></highlight> and the sequence of numbers <highlight><bold>22</bold></highlight> are different representations. The parse tree <highlight><bold>10</bold></highlight> (genotype) is expressed as the program <highlight><bold>20</bold></highlight> (phenotype) and the sequence of numbers <highlight><bold>12</bold></highlight> (genotype) is expressed as the parameters <highlight><bold>22</bold></highlight> (phenotype). </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a crossover operation on a pair of candidate solutions <highlight><bold>40</bold></highlight> and <highlight><bold>50</bold></highlight> each of which has the genetic data component representations <highlight><bold>30</bold></highlight>. The genotype of the candidate solution <highlight><bold>40</bold></highlight> includes a sequence of numbers <highlight><bold>42</bold></highlight> and a parse tree <highlight><bold>44</bold></highlight>. The genotype of the candidate solution <highlight><bold>50</bold></highlight> includes a sequence of numbers <highlight><bold>52</bold></highlight> and a parse tree <highlight><bold>54</bold></highlight>. A child candidate solution <highlight><bold>60</bold></highlight> of the candidate solutions <highlight><bold>40</bold></highlight> and <highlight><bold>50</bold></highlight> is formed by a pair of crossover operations <highlight><bold>34</bold></highlight> and <highlight><bold>36</bold></highlight> which operate on similar genetic data component representations. The crossover operation <highlight><bold>34</bold></highlight> performs crossover on the sequences of numbers <highlight><bold>42</bold></highlight> and <highlight><bold>52</bold></highlight> to yield a sequence of numbers <highlight><bold>62</bold></highlight>. The crossover operation <highlight><bold>36</bold></highlight> performs crossover on the parse trees <highlight><bold>44</bold></highlight> and <highlight><bold>54</bold></highlight> to yield a parse tree <highlight><bold>64</bold></highlight>. Not all of the components need to be involved in a mutation or crossover operation. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates another example of a model for a candidate solution <highlight><bold>70</bold></highlight>. The candidate solution <highlight><bold>70</bold></highlight> includes a neural network module <highlight><bold>72</bold></highlight> and a program module <highlight><bold>74</bold></highlight> and a parameters module <highlight><bold>76</bold></highlight>. Any one or more of the operators of the program module <highlight><bold>74</bold></highlight> may query the neural network module <highlight><bold>72</bold></highlight> and/or reference any one or more of the param_<highlight><bold>1</bold></highlight> through param_m of the parameters module <highlight><bold>76</bold></highlight>. An example of an operator that queries the neural network module <highlight><bold>72</bold></highlight> is as follows in pseudo-code. </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> net(param<highlight><subscript>&mdash;</subscript></highlight>4, 0, 1)* (&minus;param<highlight><subscript>&mdash;</subscript></highlight>3) </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows multiple genetic data component representations <highlight><bold>80</bold></highlight> for the candidate solution <highlight><bold>70</bold></highlight>. The genetic data component representations <highlight><bold>80</bold></highlight> include a genetic data component representation for each module of the candidate solution <highlight><bold>70</bold></highlight>&mdash;a parse tree <highlight><bold>82</bold></highlight> corresponding to the program module <highlight><bold>74</bold></highlight>, a sequence of numbers <highlight><bold>84</bold></highlight> corresponding to the parameters module <highlight><bold>76</bold></highlight>, and a parse tree <highlight><bold>86</bold></highlight> together with a sequence of numbers <highlight><bold>88</bold></highlight> that correspond to the neural network module <highlight><bold>72</bold></highlight>. The parse tree <highlight><bold>82</bold></highlight>, the sequence of numbers <highlight><bold>84</bold></highlight>, and the combination of the parse tree <highlight><bold>86</bold></highlight> and the sequence of numbers <highlight><bold>88</bold></highlight> are different representations in accordance with one embodiment. The parse tree <highlight><bold>86</bold></highlight> (genotype) may be used to determine the structure of the neural network module <highlight><bold>72</bold></highlight> (phenotype) and the sequence of numbers <highlight><bold>88</bold></highlight> (genotype) may be expressed as the weights W1-W10 (phenotype) of the neural network module <highlight><bold>72</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows another example of multiple genetic data component representations <highlight><bold>80</bold></highlight> for the candidate solution <highlight><bold>70</bold></highlight>. The genetic data component representations <highlight><bold>80</bold></highlight> include a genetic data component representation for each module of the candidate solution <highlight><bold>70</bold></highlight>&mdash;the parse tree <highlight><bold>82</bold></highlight> corresponding to the program module <highlight><bold>74</bold></highlight>, the sequence of numbers <highlight><bold>88</bold></highlight> corresponding to the parameters module <highlight><bold>76</bold></highlight> and the neural network module <highlight><bold>72</bold></highlight>, and a parse tree <highlight><bold>86</bold></highlight> together with the sequence of numbers <highlight><bold>88</bold></highlight> that correspond to the neural network module <highlight><bold>72</bold></highlight>. In this alternative mapping of genetic data component representations to modules, the set of parameters <highlight><bold>76</bold></highlight> are taken from the sequence of numbers <highlight><bold>88</bold></highlight> which also provides parameters for the neural network module <highlight><bold>72</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A model for a candidate solution may have only one module which is parameterized by multiple genetic data components. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In one embodiment, crossover operations and/or mutation operations are performed by matching the genetic data component representations. For example, parse trees or sequences of instructions that represent computer programs are crossed over with other parse trees or sequences of instructions that represent computer programs and not with, for example, parse trees that represent functions or structures and not with sequences of numbers. Parse trees that represent neural network structures are crossed over with other parse trees that represent neural network structures. Sequences of numbers that represent program parameters are crossed over with other sequences of numbers that represent program parameters. Sequences of numbers that represent neural network weights are crossed over with other sequences of numbers that represent neural network weights. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Alternatively, multiple genetic data component representations may be designated for crossover. For example, in some embodiments, any sequence of numbers may be crossed over with any other sequence of numbers regardless of their phenotypes. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The foregoing detailed description of the present invention is provided for the purposes of illustration and is not intended to be exhaustive or to limit the invention to the precise embodiment disclosed. Accordingly, the scope of the present invention is defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for genetic programming, comprising the steps of: 
<claim-text>determining more than one genetic data component representation; </claim-text>
<claim-text>evolving a solution using a set of genetic data components represented by the genetic data component representations. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of determining comprises the step of determining a model for the solution such that the model includes a set of modules and the step of evolving comprises the step of parameterizing each module based on the genetic data components. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the step of evolving the solution comprises the step of generating a child candidate solution by combining a set of genetic data components from each of a set of parent candidate solutions such that a set of genetic data components in the child candidate solution conforms to the genetic data component representations. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the step of combining comprises the step of combining the genetic data components of the parent candidate solutions which have a common type of genetic data component representation. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the step of combining comprises the step of combining the genetic data components of the parent candidate solutions which correspond to an analogous module in the child candidate solution. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the model includes a module that corresponds to a program and a module that corresponds to a set of parameters. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the genetic data components include a tree and a sequence of numbers and the step of parameterizing includes the steps of using the tree to realize the program and the sequence of numbers to realize the parameters. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein at least one operator of the program references the parameters. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the model includes a module that corresponds to a program and module that corresponds to a neural network. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the genetic data components include a first tree and a second tree and the step of parameterizing includes the steps of using the first tree to realize the program and using the second tree to realize the neural network. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein at least one operator of the program queries the neural network. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the model includes a module that corresponds to a math function and a module that corresponds to a set of parameters. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the genetic data components include a tree and a sequence of numbers and the step of parameterizing includes the steps of using the tree to realize the math function and using the sequence of numbers to realize the parameters.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004904A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004904A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004904A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004904A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004904A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004904A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004904A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
