<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005171A1-20030102-D00000.TIF SYSTEM "US20030005171A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00001.TIF SYSTEM "US20030005171A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00002.TIF SYSTEM "US20030005171A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00003.TIF SYSTEM "US20030005171A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00004.TIF SYSTEM "US20030005171A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00005.TIF SYSTEM "US20030005171A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00006.TIF SYSTEM "US20030005171A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005171A1-20030102-D00007.TIF SYSTEM "US20030005171A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005171</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896038</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/44</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>315000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System for ordering software methods within an object to be used in a computer network testing scenario</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Mark</given-name>
<middle-name>S.</middle-name>
<family-name>Schaeffer</family-name>
</name>
<residence>
<residence-us>
<city>San Ramon</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>William C. Milks, III</name-1>
<name-2>Russo &amp; Hale LLP</name-2>
<address>
<address-1>401 Florence Street</address-1>
<city>Palo Alto</city>
<state>CA</state>
<postalcode>94301</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for facilitating the arrangement of software methods within an object built using an object oriented programming framework. The order of the methods is specified within a graphical user interface adapted for organizing the methods. Selecting an object in a list causes a dialog box to appear. Within the dialog box is an editable field that enables a unique sequential integer ascending from the number &ldquo;1&rdquo; to be entered corresponding to a method in the list. After an integer is assigned to a method, the object can then be selected and dragged and dropped into a window. Each method of the dropped object, to which an integer has been assigned, appears as an icon in the window in the order previously specified using the editable field. The methods are automatically arranged from the top of the window towards the bottom of the window in the order previously specified from lowest number to highest. The methods are executed in the specified order when the object is run, for example, in a scenario for testing and monitoring the response or performance of a computer network. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to software tools and, more particularly, to software tools for testing and monitoring the response or performance of a computer network and components within that network and for maintaining uptime for the computer network such as a local area network (LAN) or wide area network (WAN), whether the network is an intranet or can connect to an extranet. As one example, the present invention relates to testing and monitoring a Web site comprised of computer network components accessible over the Internet or World Wide Web and, more particularly, to testing and monitoring and/or controlling computer network components at a Web site to promote e-business uptime. Specifically, one embodiment of the present invention provides a system to order software methods comprising an object to be included in a testing or monitoring scenario to enable the scenario to be quickly and easily configured and reconfigured by a relatively unsophisticated user. More specifically, a preferred embodiment of the present invention provides a system for facilitating configuration of scenarios for testing and monitoring the response or performance of a computer network and components within that network such as at a Web site. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In recent years, the number of computer networks has increased at an astronomical rate. LANs have become prevalent in businesses, and LANs are more and more frequently being installed in homes. Enterprises are typically connected through WANs. Thus, so-called &ldquo;intranet&rdquo; computer networks are commonplace. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> These computer networks can also connect to so-called &ldquo;extranet&rdquo; computer networks, as well as to the Internet or World Wide Web. Often, connection to the extranet is secured by a so-called &ldquo;firewall.&rdquo; Enterprises typically have a Web site that can be accessed for information or to conduct e-commerce, for example. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computer networks comprise various components, for example, various workstations and a file server that provides access to shared data and applications, as well as an operating system platform such as UNIX, Solaris, Linux, Windows NT, Windows 2000, or other operating system. A Web application can be run on a server to provide a Web site based on a standard Internet protocol such as TCP/IP. The load handled by the computer network components varies. The computer network must be able to handle diverse demands, or the network will experience processing delays and may even crash. It is important for an enterprise to know whether or not the proprietary portion of the computer network can handle the expected load and be able to control various components to avoid a crash. It is also important for the enterprise to be able to ascertain when additional components and/or load balancing is needed to increase the data handling capacity of the proprietary computer network. These measures can be adopted to optimize the so-called &ldquo;uptime&rdquo; of the enterprise&apos;s computer network. This is particularly important where downtime can adversely affect the revenues of the business. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Consequently, in order to maximize e-business, enterprises need to solve the computer network uptime problem. Solving the uptime problem means providing owners of computer networks the ability to load-test, simulate failure, monitor, access, and, preferably, control all components throughout the computer network during their lifecycle without regard to interface technology, protocols, or location. Various approaches are known for testing and monitoring computer networks. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One such approach is provided by Five Nine Solutions, Inc. located in Reno, Nev., which is a leading provider of distributed testing and monitoring tools for high-availability, enterprise-wide, and Internet-based or Web-based application computer networks. That company supplies a product called &ldquo;RemoteCog&rdquo; that includes tools needed for e-business to deal with the uptime problem. The RemoteCog product comprises a &ldquo;control center&rdquo; that integrates computer network testing, monitoring, access, control, and failure simulation for e-business, e-commerce, and wireless Internet systems. The RemoteCog product including the control center is a cost-effective, flexible, and highly extensible testing and monitoring solution that allows business-to-business enterprise and dot corn customers to deploy high-performance and reliable e-business systems. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Five Nine Solutions&apos; RemoteCog product identifies bottlenecks and enables adjustments to a computer network to achieve maximum e-business uptime quickly. The RemoteCog product provides all that is needed by an enterprise for e-business uptime assurance, because the enterprise can: a) load-test, simulate failure, monitor, and access and control all computer network components throughout the network lifecycle; b) use the same set of testing and monitoring scenarios throughout the lifecycle; c) test network performance while the enterprise can still avert potential problems; d) rapidly create and deploy tests with no coding; e) easily integrate third-party products, as well as existing scripts and programs, into the RemoteCog product; f) integrate testing and monitoring for API, Web, ODBC, SQL, and character based interfaces; and g) build custom objects for enhanced tests, or for controlling and monitoring other products or components. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Because the framework of the RemoteCog product is object oriented, new objects can be rapidly built to address emerging technologies, protocols, and, ultimately, new customer needs. This capability is used to build new objects that typically comprise more than one method. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Unfortunately, while objects can be conveniently built within the object oriented programming framework of the RemoteCog product, once an object is built, modification of the order of the methods that comprise that object requires dragging and dropping the individual methods in the desired order to reconfigure the object. This procedure is prone to error and can be time-consuming. This results in various inefficiencies and attendant costs associated with the time requirement to re-arrange methods comprising an object used for a testing or monitoring scenario. As a consequence, difficulty and delay can be experienced in dealing with the uptime problem. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> It would therefore be desirable to facilitate the arrangement of methods within an object built using an object oriented programming framework. It would also be desirable to provide a process to effectively re-order available methods within an object in an easy, quick, and virtually foolproof manner. Additionally, it would be desirable to enable a user to access a computer network testing or monitoring object and order the methods within that object in an efficient manner so as to avoid delay in addressing the uptime problem. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The present invention addresses the aforementioned problems by providing a method and apparatus for facilitating the arrangement or organization of methods within an object built using an object oriented programming framework. One embodiment of the present invention provides a process and software tool to effectively re-order available methods within an object in an easy, quick, and virtually foolproof manner, for example, to enable a user to access a computer network testing or monitoring object and order the methods within that object in an efficient manner so as to avoid delay in addressing the uptime problem. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> One embodiment of the object configuration tool in accordance with the present invention provides a framework for aggregating methods that comprise an object in the object library or that are coded by a developer. The object configuration tool enables the developer or a relatively unsophisticated user to specify the order in which the methods will be executed when a testing or monitoring scenario is created and launched. Preferably, the object configuration tool provides a graphical user interface to facilitate ordering the methods by the developer or user. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one embodiment in accordance with the present invention, a method and software tool provide an intelligent mechanism whereby software specification steps can self organize within a specification scenario, thereby permitting automation of the specification process. One implementation of the software tool is embedded within a computer network testing and monitoring tool such as the RemoteCog product to provide an automatic sequencing mechanism for self organizing of software modules within a graphical user interface used to specify such software modules. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> For example, within the RemoteCog control center, an object workbench is started by opening a &ldquo;umethods.c&rdquo; file. This causes a window to appear, which contains a text list of the individual methods contained in an object. Each individual text item in the list can then be selected with a pointing device such as a mouse. Double clicking the left mouse button with the mouse pointer on the selected item in the list causes a dialog box to appear. Preferably, within the dialog box is an editable field called &ldquo;Autopaste Order&rdquo;, for example. The developer or user can enter a unique sequential integer ascending from the number &ldquo;1&rdquo; in this field. This list item selection process is preferably repeated for each method in the list. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> From an object browser included in the control center, an entire object can then be selected by the mouse and dragged and dropped into a scenario wizard window. Each individual method, to which a unique sequential integer has been assigned, included in the dropped object will then appear as an icon in a scenario wizard window. The &ldquo;Autopaste Order&rdquo; previously entered using the object workbench will thus control the order of appearance of those method icons in the scenario wizard window. The method icons will be automatically arranged from the top of the window towards the bottom of the window in the order previously specified using the object workbench from the lowest number to the highest. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The object configuration tool in accordance with the present invention integrates seamlessly within an object oriented programming framework that is modular and highly scalable. Thus, the object configuration tool enables customized configuration and implementation of objects through ordering of selected methods comprising those objects. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The object configuration tool in accordance with the present invention effectively aggregates methods within an object created by a developer and provides the order in which a selected collection of methods, and preferably the entire collection of methods, is carried out. No known object oriented system enables modularized methods aggregated within an object to be ordered and/or re-ordered by the user for configuring the object using a dialog box. The object configuration tool of the present invention thus enables objects to be easily and quickly configured so that testing and monitoring scenarios incorporating those objects can be created and/or modified by the user for more rapid deployment as mission critical testing and monitoring scenarios for computer networks, for example, to address the uptime problem.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Various embodiments of the object configuration tool in accordance with the present invention will now be described in detail with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a schematic diagram of the object configuration tool in accordance with the present invention incorporated into a tool for specifying a testing and monitoring scenario for a computer network, for example. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a screen that illustrates opening a source code file &ldquo;umethods.c&rdquo; associated with an object to invoke an object workbench. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a screen that illustrates that for specified methods within an object identified in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the order and parameters can be specified using the object workbench. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> includes a Microsoft C&plus;&plus; screen typically used to build an object and illustrates once the methods are defined using the object workbench, function prototypes are created and are compiled into the object. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a screen that illustrates a scenario wizard for configuring a testing and monitoring scenario using the available objects and the associated methods that an object browser displays with the default ordering being shown. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows a screen that illustrates that the scenario wizard automatically loads the scenario with methods of the object in the sequence specified by the developer or user using the object configuration tool of the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a screen that illustrates executing a configured testing scenario.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> According to the present invention and referring now to the figures, wherein like reference numerals identify like elements of the various embodiments of the invention, one can effectively specify the order and thus arrange methods within an object preferably created within an object oriented programming framework. Additionally, one can access that object and re-order the incorporated methods to thus modify the object. One can also easily access the object and underlying methods through a graphical user interface. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Although the principles of the present invention can be applied to any object oriented programming environment, an embodiment of the object configuration tool in accordance with the present invention will be described in conjunction with a testing and monitoring software tool for computer networks by way of example and not by way of limitation, in order to promote a better understanding of the invention. Accordingly, as shown in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> testing and monitoring tool <highlight><bold>10</bold></highlight> for a computer network is provided to solve the uptime problem. For example, the testing and monitoring tool <highlight><bold>10</bold></highlight> enables enterprises to reach maximum e-business uptime quickly. By way of example, the testing and monitoring tool <highlight><bold>10</bold></highlight> may comprise the aforementioned RemoteCog product. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Accordingly, the testing and monitoring tool <highlight><bold>10</bold></highlight> preferably comprises one or more &ldquo;toolboxes&rdquo; <highlight><bold>12</bold></highlight>, third-party products, or programs/scripts that the enterprise has already developed. These objects are all incorporated into the framework of the testing and monitoring tool <highlight><bold>10</bold></highlight>. Because the testing and monitoring tool <highlight><bold>10</bold></highlight> can drive any or all toolboxes <highlight><bold>12</bold></highlight> simultaneously, constructing sophisticated testing, monitoring, and task automation scenarios is fast, easy, and requires no coding expertise. The framework for the testing and monitoring tool <highlight><bold>10</bold></highlight> provides distributed advanced protocol and technology independent capabilities that enable publishing, controlling, and running objects anywhere on the computer network or Internet. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The testing and monitoring tool <highlight><bold>10</bold></highlight> enables a developer or even an unsophisticated user to rapidly design testing and monitoring scenarios without programming. The testing and monitoring tool <highlight><bold>10</bold></highlight> comprises a control center that enables a developer or user to manage testing and monitoring scenarios and their execution. In addition, scenario information and results are preferably centrally stored in a repository <highlight><bold>14</bold></highlight> for maximum flexibility. The repository <highlight><bold>14</bold></highlight> can reside in any Oracle, Ingres II, SQL Server, or other ODBC compliant datastore. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Using the control center, the developer or user can plan, organize, and control scenarios composed of methods provided by objects. These scenarios can monitor and load-test computer networks in addition to automating tasks such as network and database maintenance. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> To identify and quantify performance issues that may exist in the computer network under consideration, the developer or user of a testing and monitoring scenario begins by identifying components <highlight><bold>16</bold></highlight> that he or she wants to verify. These components <highlight><bold>16</bold></highlight> may consist of sections of an application such as shell scripts, reports, database and API calls. In addition, using the control center, the developer can also design workload scenarios that will allow the developer to quickly verify whether a potential hardware solution will be sufficient. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The developer or user of a testing and monitoring scenario designs the workload scenario using an &ldquo;object browser&rdquo; and &ldquo;scenario wizard&rdquo; to visually assemble the methods provided by the various objects that can be selected using the object browser. The objects that are accessed via the object browser include those provided with the control center, by third parties, or custom objects constructed with an &ldquo;object workbench&rdquo;. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The object workbench enables the developer to quickly develop custom objects. Toolboxes are built using the object workbench, so custom objects behave as any toolbox <highlight><bold>12</bold></highlight>. Building customized objects enables non-programmers to construct sophisticated scenarios without coding. Once an object is built, the object can be re-used. VARS and SIs can quickly build objects that provide added value to their customers. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The control center preferably includes the following toolboxes <highlight><bold>12</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, one toolbox is an &ldquo;eBusiness toolbox&rdquo; <highlight><bold>12</bold></highlight> that enables rapid testing of Web sites without coding. In just three quick steps, the developer or user can run thousands of virtual Web users against a Web site. The eBusiness toolbox <highlight><bold>12</bold></highlight> also captures and plays back wireless browser traffic. The eBusiness toolbox <highlight><bold>12</bold></highlight> is extensible for complex Web site testing. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Additionally, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the control center includes as a toolbox an &ldquo;ODBC toolbox&rdquo; <highlight><bold>18</bold></highlight> to construct scenarios that issue SQL against an ODBC compliant DBMS for database access. Also, as shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> &ldquo;Mail&rdquo; toolbox <highlight><bold>20</bold></highlight> is included in the control center to provide the ability to stress and monitor SMTP and POP3 e-mail servers. Message size and e-mail addresses can be graphically randomized to enable sophisticated testing. Used in conjunction with the monitoring capabilities of the testing and monitoring tool <highlight><bold>10</bold></highlight>, the developer or user can detect e-mail problems early. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Another toolbox is an &ldquo;OS toolbox&rdquo; to construct scenarios that use UNIX or Windows command line utilities. The OS toolbox also contains a &ldquo;PING&rdquo; (Preventative InterNet Guard) object that enables the developer to monitor any machine and take action on failure, including paging or notifying a system administrator for the computer network. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Further, the control center preferably includes an &ldquo;FTP toolbox&rdquo; designed to enable fast testing of FTP servers. The developer or user can specify message size, upload, and download information. As with other toolboxes <highlight><bold>12</bold></highlight>, FTP test results are automatically published to the repository <highlight><bold>14</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. By creating scenarios that test Web sites and use the FTP toolbox, the developer or user can test all facets of the user experience at a Web site, including FTP downloads, in one easy test. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> An embodiment of the object configuration tool in accordance with the present invention will now be described. In general, the object configuration tool in accordance with one embodiment of the present invention employs a graphical user interface. The user and interface features will now be described in detail. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, opening a source code file &ldquo;umethods.c&rdquo; associated with a toolbox or object within the control center invokes an object workbench <highlight><bold>22</bold></highlight>. The lines of code are displayed in the user interface so that a developer can edit, add, or delete the corresponding code for the methods, that appears in the scroll box <highlight><bold>24</bold></highlight> located in the center of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Using the object workbench <highlight><bold>22</bold></highlight>, a developer or user can define the methods and parameters for an object. Additionally, the object configuration tool of the present invention enables the developer or user to manipulate methods by selecting the order of methods that define the object. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> For example, various objects are listed in an &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> that appears at the right hand side of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Each object is identified by an icon, for example, a set of interengaged cogs or gears. The developer or user can position the pointer of a pointing device such as a mouse on the cog icon and double click the left mouse button to list methods that comprise the object. For example, clicking on the cog icon preceding the &ldquo;PasteDemo&rdquo; object <highlight><bold>28</bold></highlight> reveals the list of constituent methods <highlight><bold>30</bold></highlight> for that object, including system methods consisting of methods styled in all upper case letters, for example, &ldquo;CONFIG&rdquo;, and user methods consisting of methods styled in mixed case letters, for example, &ldquo;One&rdquo;, &ldquo;Four&rdquo;, &ldquo;Two&rdquo;, and &ldquo;Three&rdquo;, each of which is preceded by a method icon such as a hammer and screwdriver. The method icon identifies the listed item as a method. The order in which the methods are listed in the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> is the default order established by the developer of the object. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When the developer or user desires to modify the default ordering of the methods <highlight><bold>30</bold></highlight> shown in the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> that appears on the right hand side of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, he or she positions the mouse pointer on the method displayed in the &ldquo;Methods&rdquo; box <highlight><bold>32</bold></highlight> and double clicks the left mouse button. Double clicking on one of the listed methods shown in the &ldquo;Methods&rdquo; box <highlight><bold>32</bold></highlight> pulls up a &ldquo;Method Parameters&rdquo; dialog box <highlight><bold>34</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The &ldquo;Method Parameters&rdquo; dialog box <highlight><bold>34</bold></highlight> displays the selected &ldquo;Method Name&rdquo; and corresponding &ldquo;&lsquo;C&rsquo; function name&rdquo; in respective fields <highlight><bold>36</bold></highlight> and <highlight><bold>38</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. For each method within the object, the order can be specified using an &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight>. For example, the developer or user can specify that the method &ldquo;One&rdquo; be executed first in order among the user methods by entering the integer &ldquo;1&rdquo; in the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Similarly, using the &ldquo;Method Parameters&rdquo; dialog box <highlight><bold>34</bold></highlight>, the developer or user can modify the order shown in the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> from the default execution order so that method &ldquo;Two&rdquo; is executed second, rather than third; method &ldquo;Three&rdquo; is executed third, rather than fourth; and method &ldquo;Four&rdquo; is executed fourth, rather than second, when the object is configured in a test scenario and launched. That is, the original default order of methods &ldquo;One&rdquo;, &ldquo;Four&rdquo;, &ldquo;Two&rdquo;, and &ldquo;Three&rdquo; can be rearranged as &ldquo;One&rdquo;, &ldquo;Two&rdquo;, &ldquo;Three&rdquo;, and &ldquo;Four&rdquo; by selecting each method in the &ldquo;Methods&rdquo; box <highlight><bold>32</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and specifying its position in the sequence using the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> to assign an integer number to the method (i.e., &ldquo;1&rdquo;, &ldquo;2&rdquo;, &ldquo;3&rdquo;, &ldquo;4&rdquo;). Additionally, the developer or user can specify various parameters imported to the method using a &ldquo;Parameters&rdquo; dialog box <highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In a modified embodiment, an autopaste specification may not be provided for one or more methods comprising an object, while an autopaste specification is specified for other methods comprising the object. Consequently, in the case in which an autopaste specification is not associated with a method that appears in the &ldquo;Methods&rdquo; box <highlight><bold>32</bold></highlight> which is double-clicked, the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight> is blank, that is, does not display a place for the method in the sequence. Preferably, the developer or user can nevertheless override by entering an integer in the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight> to specify the sequential position of the method within the object and cause an autopaste specification to be created for the method so that the method is included in the object in the specified order in the sequence when the object is selected for inclusion in a testing or monitoring scenario, as will be described later. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The object comprising the methods has a structured ordering that is actually embedded in the C-type file. The object configuration tool of the present invention has the ability to change the ordering through a dialog box to facilitate configuration of objects by less sophisticated users. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Once the order of the methods is specified within the object workbench <highlight><bold>22</bold></highlight>, function prototypes are created and need to be compiled into the object, as shown at the bottom of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. After compiling, the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> continues to display the available objects and the associated methods according to the default sequence, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. The autopaste order affects the order in which the methods are pasted by the scenario wizard. The default order in which the methods appear in the object browser does not change. The operation of the object configuration tool is then as follows. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In order to take advantage of the functionality of the object configuration tool in accordance with the preferred embodiment of the present invention, the developer or user positions the mouse pointer on a selected object, for example, the &ldquo;PasteDemo&rdquo; object <highlight><bold>28</bold></highlight>, and clicks and drags that object into a &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight> that appears in the center of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. The object (i.e., &ldquo;PasteDemo&rdquo;) is highlighted in the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight> and appears in an &ldquo;Object Identifier&rdquo; radio box <highlight><bold>46</bold></highlight> at the right hand side of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The scenario wizard automatically loads the scenario with the methods in the sequence predefined by the developer or user, as described above in conjunction with <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the order of the methods, namely, &ldquo;One&rdquo;, &ldquo;Two&rdquo;, &ldquo;Three&rdquo;, &ldquo;Four&rdquo;, that appears in the &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight>, is the modified order that was specified by the developer or user, as opposed to the original default order displayed in the &ldquo;Object Browser&rdquo; scroll box <highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A system method &ldquo;CONFIG&rdquo; also preferably has an autopaste specification. The &ldquo;CONFIG&rdquo; method is assigned an unalterable default order number zero (&ldquo;0&rdquo;) and is thus always the first method to be executed. User methods, for example, methods assigned an order number &ldquo;1&rdquo; and greater, appear afterwards. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the system method &ldquo;CONFIG&rdquo; is positioned as a &ldquo;setup&rdquo; step first in order. Preferably, a &ldquo;setup&rdquo; step is indicated by a ladder and paint can icon preceding the &ldquo;CONFIG&rdquo; method. The user methods &ldquo;One&rdquo;, &ldquo;Two&rdquo;, &ldquo;Three&rdquo;, and &ldquo;Four&rdquo; are sequentially positioned as &ldquo;test&rdquo; steps following the &ldquo;CONFIG&rdquo; method. Preferably, &ldquo;test&rdquo; steps are indicated by a stop watch icon preceding each method. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In summary, one embodiment of the present invention provides an object configuration tool integrated into an object oriented programming framework. The object configuration tool can be used by developers and users, who have a general understanding of computer networks hardware and software, to readily configure objects. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The object configuration tool aids construction of executable objects for tests. The developer or user designates what is supposed to happen in what sequence specifying the order of methods within an object, and the object configuration tool enables the order to be modified and automatically changes the structured ordering in the underlying code to effect the modified order of the methods. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The order of the methods contained in an object can be modified in the object workbench <highlight><bold>22</bold></highlight> using the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight> in the &ldquo;Method Parameters&rdquo; dialog box <highlight><bold>34</bold></highlight>. When a developer or user wants to use all of the methods of an object in a scenario for a test, rather than clicking and dragging each method over or having to remember which one to execute in what order, he or she can simply click and drag the entire object into the &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight> to automatically populate the scenario in the desired order. That is, all the developer or user needs to do is click on and drag the object over, and the test scenario will be populated with the methods comprising the object in the order in which the methods are to be performed when the object is dropped. This provides a shortcut for the test scenario writer. So it is easier for the developer or user to specify the order in which the methods are to be performed by simply designating the order using a dialog box and the user to use that order to create a test scenario. If the developer or user wants to re-order the methods, the interaction is at the dialog box level, and the object configuration tool in accordance with the preferred embodiment of the present invention automatically effects the structured ordering of methods in accordance with values entered in the &ldquo;Autopaste Order&rdquo; field <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The object configuration tool in accordance with the present invention integrates seamlessly within an object oriented programming framework that is modular and highly scalable. Thus, the object configuration tool facilitates customized configuration and implementation of objects through ordering of methods comprising those objects. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The developer can define the execution characteristics of the scenario by varying parameter values such as the number of iterations using the &ldquo;Parameters&rdquo; dialog box <highlight><bold>42</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The developer or user can also use a &ldquo;Setup Method&rdquo; check box <highlight><bold>41</bold></highlight> to specify that the method is a &ldquo;setup&rdquo; step, rather than a &ldquo;test&rdquo; step. Creating Web testing scenarios is quick and easy using the &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The foregoing powerful features of the control center allow the developer or user to rapidly design workload scenarios that enable early detection of potential performance problems, task automation, monitoring, and system database maintenance. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The control center is for configuring tests and is also the control console for the developer or user. The test scenario is built in the &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight> that appears in the center of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The objects comprising the test scenario are fundamentally programs that are run by the control center, that is, they run through a service called &ldquo;control&rdquo;. Thus, the objects are input to the configuration for the controller, which runs the objects, like an application run on a computer. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The control center preferably provides real time graphing, results, and user states enabling the developer or user to see what is occurring during a scenario execution, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Additionally, result data preferably populates the repository <highlight><bold>14</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, which enables generation of sophisticated reports using a report generator of choice. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The object configuration tool in accordance with the present invention effectively aggregates methods within an object and provides the order in which the methods is carried out. Unlike known object oriented systems, the object configuration tool of the present invention enables modularized methods aggregated within an object to be ordered and/or re-ordered by the developer or user for configuring the object. The object configuration tool in accordance with the present invention thus enables objects to be easily and quickly configured so that testing and monitoring scenarios incorporating those objects can be created and/or modified by the developer or user for more rapid deployment in mission critical testing and monitoring scenarios for computer networks, for example, to address the uptime problem. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Although the present invention has been described with a particular degree of specificity with reference to a preferred embodiment, it should be understood that numerous changes both in the form and steps disclosed can be made without departing from the spirit of the invention. For example, the object configuration tool is not required to apply to all methods comprising an object. That is, not all methods are required to have an autopaste specification. In an alternative embodiment, an object may have a set of two or more methods of which only a subset can be autopasted, that is, only certain methods have an autopaste specification. Consequently, if the developer or user autopastes the object, only the methods that have an autopaste specification appear in the &ldquo;Scenario Wizard&rdquo; window <highlight><bold>44</bold></highlight>. Additionally, if the developer or users were to autopaste the same object from different machines, the scenario wizard would automatically merge the two together (i.e., so that they are executed in parallel simultaneously). If autopaste is invoked such that two or more different objects are merged by the scenario wizard, it is preferable that all &ldquo;setup&rdquo; steps be executed before execution of &ldquo;test&rdquo; steps commences. The scope of protection sought is to be limited only by the scope of the appended claims that are intended to suitably cover the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">I claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system to facilitate the arrangement of methods within an object built using an object oriented programming framework, the system comprising: 
<claim-text>a plurality of methods comprising an object, each method consisting of a software module; </claim-text>
<claim-text>a control center comprising a graphical user interface to facilitate ordering the methods by a person who is one of a developer and a user; </claim-text>
<claim-text>an object workbench invoked by the person opening a code file, the object workbench displayed by the graphical user interface and comprising a window that contains a text list of the individual methods comprising the object; </claim-text>
<claim-text>a pointing device to select an individual method in the list; </claim-text>
<claim-text>a dialog box displayed by the graphical user interface when the individual method in the list is selected; </claim-text>
<claim-text>an editable field within the dialog box for entry by the person of a designation for the selected method corresponding to a desired place within a sequence in which the methods are to be performed; and </claim-text>
<claim-text>an intelligent mechanism whereby method software modules can self organize within the object, thereby permitting automation of the specification of the object; </claim-text>
<claim-text>whereby the system enables a developer or a relatively unsophisticated user to specify the order in which the methods are to be executed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the object is one of an object in an object library and a customized object coded by the developer. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the pointing device is a mouse. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the person enters a unique sequential integer ascending from the number &ldquo;1&rdquo; in the editable field to designate the place for the selected method within the sequence. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the system integrates seamlessly within the object oriented programming framework that is modular and highly scalable. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the system enables customized configuration and implementation of a plurality of objects through ordering of methods comprising the objects. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the system is embedded within a computer network testing and monitoring tool to provide an automatic sequencing mechanism for self organizing of methods within the graphical user interface used to specify the methods. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the system is embedded within a computer network testing and monitoring tool that provides distributed advanced protocol and technology independent capabilities that enable publishing, controlling, and running the object anywhere on the computer network or Internet. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the object is a toolbox consisting of a member of the group of toolboxes comprising a) an eBusiness toolbox that enables rapid testing of Web sites by running a plurality of virtual Web users against a Web site and enables capture and play back of wireless browser traffic, b) an ODBC toolbox to construct scenarios that issue SQL against an ODBC compliant DBMS for database access, c) a Mail toolbox to stress and monitor SMTP and POP3 e-mail servers and to enable message size and e-mail addresses to be randomized for testing and to detect e-mail problems, d) an OS toolbox to construct scenarios that use UNIX or Windows command line utilities and which contains a &ldquo;PING&rdquo; (Preventative InterNet Guard) object that enables the person to monitor any machine and take action on failure, including paging or notifying a system administrator, and e) an FTP toolbox to enable fast testing of FTP servers and allow the person to specify message size, upload, and download information to test user experience at a Web site, including FTP downloads. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising a repository to centrally store information and results. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the repository resides in an ODBC compliant datastore. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the control center further comprises an object browser to list the object and wherein the pointing device enables the person to select the entire object and to drag and drop the entire object into a scenario wizard window displayed by the graphical user interface, the methods comprising the object having the desired order designated using the editable field within the dialog box. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein each individual method comprising the dropped object appears as a respective icon in the scenario wizard window. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the person enters a unique sequential integer ascending from the number &ldquo;1&rdquo; in the editable field and wherein method icons are automatically arranged from the top of the scenario wizard window towards the bottom of the scenario wizard window in the order previously designated using the editable field from the lowest number to the highest. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a second dialog box displayed by the graphical user interface when the individual method in the list is selected to specify at least one parameter for the method. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the control center provides real time graphing, results, and user states enabling the person to observe what is occurring during object execution. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising a report generator and wherein result data populates the repository and enables generation of reports using the report generator. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the system enables customized configuration and implementation of the object. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method to effectively re-order available methods within an object, the method comprising the steps of: 
<claim-text>opening a code file corresponding to an object; </claim-text>
<claim-text>invoking an object workbench in response to opening the code file; </claim-text>
<claim-text>causing a window to appear in response to invoking the object workbench, the window displaying a text list of individual methods comprising the object; </claim-text>
<claim-text>providing a pointing device; </claim-text>
<claim-text>selecting an individual method in the list with the pointing device; </claim-text>
<claim-text>causing a dialog box to appear in response to selecting the method in the list; </claim-text>
<claim-text>providing an editable field within the dialog box; </claim-text>
<claim-text>entering a designation for the selected method in the editable field corresponding to a desired place in an order in which the selected method is to be performed; and </claim-text>
<claim-text>conforming the structured ordering of the code so that the method is performed at the designated place in the order; </claim-text>
<claim-text>thereby enabling modularized methods aggregated within an object to be ordered using a dialog box for configuring the object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising the step of modifying the code corresponding to at least one method. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the pointing device is a mouse and double clicking the left mouse button with a mouse pointer on the selected method in the list causes the dialog box to appear. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the designation is a unique sequential integer ascending from the number &ldquo;1&rdquo; entered in the editable field. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the step of selecting an individual method is repeated for each method in the list. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising the steps of: 
<claim-text>selecting an entire object from an object browser with the pointing device; </claim-text>
<claim-text>dragging and dropping the selected object into a scenario wizard window; and </claim-text>
<claim-text>displaying the methods comprising the selected object in the scenario wizard window in the order designated by the corresponding entries in the editable field to specify the order of the methods. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the pointing device is a mouse and wherein the step of selecting the entire object comprises dragging and dropping the entire object into the scenario wizard window. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein each individual method included in the dropped object appears as an icon in the scenario wizard window. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein the designation is a unique sequential integer ascending from the number &ldquo;1&rdquo; entered in the editable field and the methods are automatically arranged from the top of the scenario wizard window towards the bottom of the scenario wizard window in the order from the lowest number to the highest. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising the step of specifying at least one parameter for the method using a second dialog box. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein there is a plurality of objects, and further comprising the steps of: 
<claim-text>specifying a scenario by selecting at least one object to be run; and </claim-text>
<claim-text>automatically organizing the methods within the at least one object in the designated order in response to specifying a scenario; </claim-text>
<claim-text>thereby permitting automation of the ordering of methods contained in the at least one object within the specified scenario. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein objects are easily and quickly configured so that testing and monitoring scenarios incorporating the objects can be created and modified for rapid deployment as mission critical testing and monitoring scenarios for computer networks to address an uptime problem.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005171A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005171A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005171A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005171A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005171A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005171A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005171A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005171A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
