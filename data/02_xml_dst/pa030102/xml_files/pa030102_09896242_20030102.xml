<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005168A1-20030102-D00000.TIF SYSTEM "US20030005168A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005168A1-20030102-D00001.TIF SYSTEM "US20030005168A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005168A1-20030102-D00002.TIF SYSTEM "US20030005168A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005168</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896242</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/163</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F009/54</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F009/00</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F009/46</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>313000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>310000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for auditing system call events with system call wrappers</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Scott</given-name>
<middle-name>Alan</middle-name>
<family-name>Leerssen</family-name>
</name>
<residence>
<residence-us>
<city>Atlanta</city>
<state>GA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Joubert</given-name>
<family-name>Berger</family-name>
</name>
<residence>
<residence-us>
<city>Atlanta</city>
<state>GA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>HEWLETT-PACKARD COMPANY</name-1>
<name-2>Intellectual Property Administration</name-2>
<address>
<address-1>P.O. Box 272400</address-1>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80527-2400</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In one embodiment, the present invention is directed to a system and method in which a wrapper function is placed in memory. Additionally, address information is written into an entry of a system call table, said address information being associated with said wrapper function. Further, processing control is transferred to said wrapper function. The wrapper function transfers processing control to a system call routine, retrieves parameters associated with the system call routine, utilizes the parameters to generate audit data, and writes the audit data to a buffer. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to concurrently filed and commonly assigned U.S. patent application Ser. No. ______, enttitled &ldquo;SYSTEM AND METHOD FOR TRANSFORMING OPERATING SYSTEM AUDIT DATA TO A DESIRED FORMAT,&rdquo; which is hereby incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention is directed generally to operating systems, and more particularly to a system and method for generating audit data associated with system call operations. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> An Operating System (OS) is arguably the most important program executing on a computer system, because the OS is utilized in executing all other programs (which are commonly referred to as &ldquo;applications&rdquo;). In general, the OS provides functionality that applications may then utilize. For instance, an application may invoke an OS routine (e.g., via a system call) to save a particular file, and the OS may interact with the basic input/output system (BIOS), dynamic link libraries, drivers, and/or other components of the computer system to properly save the particular file. Many different OSs have been developed in the prior art, including HP-UX&reg;), Linux&trade;, MS-DOS&reg;, OS/2&reg;, Windows&reg;, UniX&trade;, System 8, and MPE/iX, as examples. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an exemplary system <highlight><bold>100</bold></highlight>, which includes an OS <highlight><bold>101</bold></highlight>. As shown, OS <highlight><bold>101</bold></highlight> may perform such tasks as recognizing input from keyboard <highlight><bold>106</bold></highlight> and mouse <highlight><bold>104</bold></highlight>, sending output to display screen <highlight><bold>107</bold></highlight>, and controlling peripheral devices, such as disk drive <highlight><bold>103</bold></highlight> and printer <highlight><bold>105</bold></highlight>. Some OSs have integrated therein relatively complex functions that were once performed only by separate programs, such as faxing, word processing, disk compression, and Internet browsers. Generally, OSs provide a software platform on top of which other programs, such as application <highlight><bold>102</bold></highlight>, may execute. Application programs are generally written to execute on top of a particular OS, and therefore, the particular OS implemented on a computer system may dictate, to a large extent, the types of applications that can be executed on such computer system. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Application <highlight><bold>102</bold></highlight> executing on computer system <highlight><bold>100</bold></highlight> may rely on operating system routines to perform such basic tasks as recognizing input from keyboard <highlight><bold>106</bold></highlight> and mouse <highlight><bold>104</bold></highlight>, as well as sending output to display screen <highlight><bold>107</bold></highlight>, as examples. OS <highlight><bold>101</bold></highlight> comprises sets of routines for performing various tasks (e.g., low-level operations). For example, operating systems commonly include routines for performing such tasks as creating a directory, opening a file, closing a file, and saving a file, as examples. Application <highlight><bold>102</bold></highlight> may invoke certain operating system routines to perform desired tasks by making a system call. That is, applications generally invoke operating system routines via system calls. Also, a user may interact with OS <highlight><bold>101</bold></highlight> through a set of commands. For example, the DOS operating system contains commands such as COPY and RENAME for copying files and changing the names of files, respectively. The commands are accepted and executed by a part of the OS called the command processor or command line interpreter. Additionally, a graphical user interface may be provided to enable a user to enter commands by pointing and clicking objects appearing on the display screen, for example. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The central module of an operating system is the kernel. Typically, the kernel is responsible for memory management, process and task management, and disk management. Applications access the kernel through system call operations or &ldquo;syscalls.&rdquo; A system call is typically considered a request to the operating system (kernel) to do a hardware/system-specific or privileged operation. Examples of system calls include fork, pipe, read, waitpid, write, and execve. In the Linux operating system, for example, the system calls are included in the &ldquo;unistd.h file&rdquo;. The system calls are also included in the &ldquo;libc&rdquo; as stubs, where a system call identifier is defined via the &ldquo;&num;define&rdquo; command to be equal to a certain number or vector to facilitate access to the particular desired routines of the kernel. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> To allow access to the system calls, an interrupt instruction is typically utilized. Specifically, an application pushes various arguments onto its stack and then executes the appropriate interrupt instruction. The CPU in response to the interrupt instruction transfers control to the kernel entry point which is _system_call( ) in the Linux operating system. The kernel entry point performs various tasks such as saving all registers and verifying that a valid system call was invoked. Most importantly, the kernel entry point utilizes the vector to obtain a memory offset address from the syscall table to determine the location of the particular kernel system call routine. The kernel entry point then transfers control to the routine located at the particular memory location. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Additionally, kernel system call routines commonly audit system calls from applications. For example, suppose an application makes a system call to open a particular file, audit code within the respective kernel system call routine may collect such audit data for the system call as the date and time the system call was made, name of file to be opened, and result of system call (e.g., system file opened successfully or failed). Trusted OSs, including without limitation Hewlett-Packard CMW (compartment mode workstation), Hewlett-Packard VirtualVault, Sun Trusted Solaris, and SCO CMW, commonly perform auditing of at least security relevant events. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts exemplary interaction between an application and the kernel according to the prior art. In system <highlight><bold>200</bold></highlight>, program <highlight><bold>201</bold></highlight> is operating in user space, i.e., a system mode that includes certain hardware limitations that prevent program <highlight><bold>201</bold></highlight> from interfering with other processes. Program <highlight><bold>201</bold></highlight> includes various code including the file open operation: &ldquo;fd&equals;open(&ldquo;FOO&rdquo;, RD_ONLY). This file operation includes a system call to &ldquo;open.&rdquo; The system call pushes information onto the stack and executes the appropriate interrupt instruction. The CPU of system <highlight><bold>200</bold></highlight> causes control to be transferred to the kernel entry point. The kernel entry point examines syscall table <highlight><bold>202</bold></highlight> to determine the memory location associated with the &ldquo;open&rdquo; routine. The kernel entry point then transfers control to kernel system call routine <highlight><bold>203</bold></highlight> which performs the &ldquo;open&rdquo; operations. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In addition, the kernel typically has been utilized to perform security-related tasks. For example, kernel system call routines include auditing code to allow audit administrators to track the activities of users and applications. For example, the kernel &ldquo;open&rdquo; system call routine may include code that writes the user_id, application_id, time, date, and filename for each open operation to be written to an audit file. A system administrator may examine the audit file to determine whether a particular user or a particular application is attempting to obtain access to permission-limited files. For example, a hacker may attempt to read a password file. The audit information may alert the system administrator that a hacker is attempting to breach the security of the system. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> However, this approach is problematic for many reasons. In particular, the approach of placing audit code within the particular system call routines of the kernel greatly increases the difficulty of changing the audit functionality to suit a particular system. Specifically, any changes in the audit code requires the operating system to be recompiled and reinstalled. Additionally, porting is required for each released version of the operating system. Moreover, audit code is generally indiscriminate in that it reports substantial numbers of audit records despite the relevance to a particular system. Gigabytes of audit information may be produced with very little information having any importance to security issues. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> According to at least one embodiment of the present invention, a computer readable medium is disclosed that includes instructions executable by a processor-based system, wherein the computer readable medium comprises code for replacing address information in a system call table with address information associated with a plurality of wrapper functions. Further, the computer readable medium comprises code for defining the plurality of wrapper functions, such plurality of wrappers functions transferring processing control to system call routines, such plurality of wrapper functions retrieving parameters associated with the system call routines, such plurality of wrapper functions utilizing the parameters to generate audit data, and such plurality of wrapper functions writing the audit data to a buffer. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> According to at least one embodiment of the present invention, a method for generating audit data is disclosed, which comprises placing a wrapper function in memory, and writing address information into an entry of a system call table, such address information being associated with the wrapper function. The method further comprises transferring processing control to the wrapper function, such wrapper function transferring processing control to a system call routine, retrieving parameters associated with the system call routine, utilizing the parameters to generate audit data, and writing the audit data to a buffer. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to at least one embodiment of the present invention, a computer system for generating audit data associated with system calls is disclosed. Such computer system comprises means for receiving processing control, such means for receiving being operable to transfer processing control to a system call routine and being operable to generate audit data associated with the system call routine. The computer system further comprises means for transferring control to the means for receiving, wherein such means for transferring control includes a system call table with address information associated with such means for receiving processing control. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts an exemplary computer system including an operating system according to the prior art. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart depicting interaction between a user application and the kernel according to the prior art. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts an exemplary configuration of prior art systems for generating operating system audit data. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart depicting interaction between a user application, a wrapper function, and the kernel according to embodiments of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a block diagram of an exemplary computer system adapted according to embodiments of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The present invention is directed to a system and method for allowing addition, removal, or modification of audit code without requiring the system call routines of the operating system kernel to be rebuilt. In embodiments of the present invention, a copy of the original syscall table is placed elsewhere in memory after the normal system start-up operations. Address information associated with wrapper functions is inserted into the syscall table. The wrapper functions are interposition code between a calling process and code that actually performs the task desired by the calling process. When an application performs a system call, the respective wrapper function is first called, because its address is contained in the syscall table. It shall be appreciated that causing the system call to be directed first to the respective wrapper function is advantageous. Specifically, the audit code may be placed into the wrapper function instead of being placed in the various kernel system call routines. By separating the audit code from the kernel system call routines, modification of the audit code does not effect the kernel system call routines. This allows system administrators to modify the audit code without appreciable difficulty. Accordingly, audit code is not arbitrarily restricted by the developers of the operating system. Instead, audit code may be developed on a case by case basis by system administrators to be adapted to their particular systems. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> After the wrapper function is called, the wrapper function then locates the address for the appropriate kernel system call routine in the copy of the original syscall table. The wrapper function then transfers control to the appropriate kernel system call routine which executes the desired task. When the kernel system call routine returns the result parameters, the wrapper function examines the parameters. The wrapper function then performs any desired audit operations such as writing to an audit file or audit buffer. The wrapper function completes the system call by returning the parameters to the application that performed the system call. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A typical configuration of prior art systems for generating OS audit data is shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As shown, auditing program <highlight><bold>301</bold></highlight> is executing on a system, which is operable to audit the execution of routines (which may be referred to as &ldquo;events&rdquo;). For instance, auditing program <highlight><bold>301</bold></highlight> may execute in the kernel of an OS to collect audit data regarding use of an operating system routine that is invoked via a system call (or &ldquo;syscall&rdquo;) made by an application. For example, as mentioned earlier, suppose an application makes a system call to open a particular file, audit program <highlight><bold>301</bold></highlight> within the OS may collect such audit data for the system call as the date and time the system call was made, name of file to be opened, and result of system call (e.g., system file opened successfully or failed). </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In certain implementations, auditing program <highlight><bold>301</bold></highlight> may audit only security events, but in other implementations it may provide additional auditing (e.g., may include application and system level logging). According to at least one implementation, auditing program <highlight><bold>301</bold></highlight> may comprise an audit device driver that collects audit data. Additionally, auditing program <highlight><bold>301</bold></highlight> may comprise an interface (e.g., API) from the kernel to user-space applications, which may enable event data to be passed to such user-space applications (e.g., an audit collection daemon) and/or may enable event data to be received at the kernel from user-space applications and/or users (e.g., system administrators). </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Auditing program <highlight><bold>301</bold></highlight> stores the audit data (which may be referred to as &ldquo;event data&rdquo;) to data storage <highlight><bold>302</bold></highlight>. Data storage <highlight><bold>302</bold></highlight> generally comprises a disk drive. According to at least one implementation, collected audit data may be buffered within the kernel of the OS, and as such buffer begins filling, the kernel notifies an audit collection daemon, which is a process (that may be executing in the user space of the OS) that collects the audit data from the kernel and writes it to data storage <highlight><bold>302</bold></highlight>. Typically, collected audit data is stored in binary format within data storage <highlight><bold>302</bold></highlight>. Audit data collected for a particular event (e.g., particular invocation of an OS routine) is generally referred to as a record. Thus, data storage <highlight><bold>302</bold></highlight> may include many records, wherein each record includes audit data for a particular event. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Display application <highlight><bold>303</bold></highlight> is typically provided by the provider of the OS that includes auditing program <highlight><bold>301</bold></highlight>. Display application <highlight><bold>303</bold></highlight> is typically a user-space application that is executable to retrieve collected audit data from data storage <highlight><bold>302</bold></highlight> and present the data to a user on a display <highlight><bold>304</bold></highlight> (e.g., computer monitor). A user, such as a system administrator, may view the collected audit data to, for example, trouble-shoot a problem being encountered with the computer system or evaluate the system&apos;s security. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Exemplary implementations for collecting and displaying audit data in a more flexible manner are disclosed in concurrently filed and commonly assigned U.S. patent application Ser. No. ______, entitled &ldquo;SYSTEM AND METHOD FOR TRANSFORMING OPERATING SYSTEM AUDIT DATA TO A DESIRED FORMAT,&rdquo; which has been incorporated herein by reference. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts exemplary interaction between application <highlight><bold>201</bold></highlight>, wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight>, and the kernel according to an embodiment of the present invention. In accordance with this embodiment of the present invention, ordinary start-up procedures are followed. The start-up operations write the offset addresses of kernel system call routines into the syscall table. However, according to the teachings of the present invention, the original syscall table is copied to a new memory location which is preferably designated as original syscall table copy <highlight><bold>403</bold></highlight>. In the memory location previously occupied by the original syscall table, new syscall table <highlight><bold>401</bold></highlight> is created. New syscall table <highlight><bold>401</bold></highlight> contains memory offsets to wrapper functions <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>402</bold></highlight>-N. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In system <highlight><bold>400</bold></highlight>, program <highlight><bold>201</bold></highlight> is operating in user space. Program <highlight><bold>201</bold></highlight> includes various code including the file open operation: &ldquo;fd&equals;open(&ldquo;FOO&rdquo;, RD_ONLY). This file operation includes a system call to &ldquo;open.&rdquo; The system call pushes information onto the stack and executes the appropriate interrupt instruction. The CPU of system <highlight><bold>400</bold></highlight> causes control to be transferred to the kernel entry point. The kernel entry point examines new syscall table <highlight><bold>401</bold></highlight> to determine the memory location associated with the &ldquo;open&rdquo; routine. Since new syscall table <highlight><bold>401</bold></highlight> contains the offset address to wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight>, the kernel entry point transfers control to wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> contains the audit code that is performed when the system call &ldquo;open&rdquo; is called, Wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> utilizes original syscall table copy <highlight><bold>403</bold></highlight> to determine the memory location of the appropriate kernel system call routine associated with the &ldquo;open&rdquo; operations, which is kernel system call routine <highlight><bold>202</bold></highlight>. For example, wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> may utilize the vector associated with the system call to determine the memory location of kernel system call routine <highlight><bold>202</bold></highlight>. In this example, the open system call is associated with the vector value <highlight><bold>7</bold></highlight>. Wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> utilizes the vector value to determine the memory location of kernel system call routine <highlight><bold>202</bold></highlight>. Wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> passes control to kernel system call routine <highlight><bold>202</bold></highlight> utilizing the memory location. Kernel system call routine <highlight><bold>202</bold></highlight> performs the &ldquo;open&rdquo; operations. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Control is then returned to wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight>. Wrapper function <highlight><bold>4022</bold></highlight> examines arguments associated with kernel system call routine <highlight><bold>202</bold></highlight>. Wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> may utilize various arguments to determine whether any auditing steps are appropriate. It may be desirable to not perform any auditing steps for opening a file that possesses little security concerns. If auditing steps are desired, wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> writes the appropriate audit data to audit buffer <highlight><bold>404</bold></highlight>. For example, wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> may include code that writes the user_id, application_id, time, date, and filename for each open operation to be written to audit buffer <highlight><bold>404</bold></highlight>. It is advantageous to write audit data to audit buffer <highlight><bold>404</bold></highlight> to reduce the impact of auditing on system performance. A buffer daemon may monitor audit buffer <highlight><bold>404</bold></highlight>. When the amount of buffered audit data exceeds some predetermined amount, the buffered audit data may be written to audit file <highlight><bold>405</bold></highlight>. By doing so, the number of file operations may be minimized so as to reduce the performance degradation of user applications. After audit data has been written to audit buffer <highlight><bold>404</bold></highlight>, wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>2</bold></highlight> then signals to the CPU that the interrupt has been completed by executing the appropriate instruction. The CPU of system <highlight><bold>400</bold></highlight> returns control to program <highlight><bold>201</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In a similar manner, program <highlight><bold>201</bold></highlight> may perform system calls to other wrapper functions. Program <highlight><bold>201</bold></highlight> may perform a system call to wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> to close a file or may perform a system call to wrapper function <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> to read from a file. Wrapper functions <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> receive processing control transfer via CPU interrupt operations as discussed above. Wrapper functions <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> transfer control to the appropriate kernel system call routines by utilizing original syscall table copy <highlight><bold>403</bold></highlight>. Wrapper functions <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> then perform auditing operations as defined by their audit code. Wrapper functions <highlight><bold>402</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> may examine parameters associated with the system calls (e.g., user_id, application_id, time, date, and filename). Wrapper functions <highlight><bold>401</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> may generate audit data from the parameters. Wrapper functions <highlight><bold>401</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>402</bold></highlight>-<highlight><bold>3</bold></highlight> write the audit data to audit buffer <highlight><bold>404</bold></highlight>. It shall be appreciated that auditing is not limited to file operations. Auditing data may be generated for any type of system call. Auditing data may be generated for systems calls related to thread handling, inter-process communication, or user-id (UID) handling, as examples. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> When implemented via executable instructions, various elements of the embodiments of the present invention comprise the code defining the operations of such various elements. The executable instructions or code may be obtained from a readable medium (e.g., a hard drive media, optical media, EPROM, EEPROM, tape media, cartridge media, flash memory, ROM, and/or the like) or communicated via a data signal from a communication medium (e.g., the Internet). As used herein, readable media is intended to include any medium that may store or transfer information. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts exemplary computer system <highlight><bold>500</bold></highlight> on which embodiments of the present invention may be implemented. Central processing unit (CPU) <highlight><bold>501</bold></highlight> is coupled to system bus <highlight><bold>502</bold></highlight>. CPU <highlight><bold>501</bold></highlight> may be any general purpose CPU. Suitable processors, without limitation, include any processor from the Itanium&trade; family of processors, such as the McKinley processor, available from Hewlett-Packard Company, or an PA-8500 processor also available from Hewlett-Packard Company. CPU <highlight><bold>501</bold></highlight> advantageously supports software interrupts to allow kernel access according to embodiments of the present invention. However, the present invention is not restricted by the architecture of CPU <highlight><bold>501</bold></highlight> as long as CPU <highlight><bold>501</bold></highlight> supports the inventive operations as described herein. Additionally, it shall be appreciated that the present invention is not limited to single processor platforms. For example, the auditing features of embodiments of the present invention may be advantageously adapted to multi-processor systems. Computer system <highlight><bold>500</bold></highlight> includes random access memory (RAM) <highlight><bold>503</bold></highlight>, which may be SRAM, DRAM, or SDRAM, as examples. Computer system <highlight><bold>500</bold></highlight> includes ROM <highlight><bold>504</bold></highlight> which may be PROM, EPROM, or EEPROM, as examples. RAM <highlight><bold>503</bold></highlight> and ROM <highlight><bold>504</bold></highlight> may hold user and system data and programs as is well known in the art. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Computer system <highlight><bold>500</bold></highlight> also includes input/output (I/O) adapter <highlight><bold>505</bold></highlight>, communications adapter <highlight><bold>511</bold></highlight>, user interface <highlight><bold>508</bold></highlight>, and display adapter <highlight><bold>509</bold></highlight>. I/O adapter <highlight><bold>505</bold></highlight> connects to storage devices <highlight><bold>506</bold></highlight>, such as one or more of hard drive, CD drive, floppy disk drive, tape drive, to computer system <highlight><bold>500</bold></highlight>. In accordance with embodiments of the present invention, audit data may be written to a file or files on any one of storage devices <highlight><bold>506</bold></highlight>. Communications adapter <highlight><bold>511</bold></highlight> is adapted to couple computer system <highlight><bold>500</bold></highlight> to a network <highlight><bold>512</bold></highlight>, which may be one or more of telephone network, local (LAN) and/or wide-area (WAN) network, Ethernet network, and/or Internet network. User interface <highlight><bold>508</bold></highlight> couples user input devices, such as keyboard <highlight><bold>513</bold></highlight> and pointing device <highlight><bold>507</bold></highlight>, to computer system <highlight><bold>500</bold></highlight>. Display adapter <highlight><bold>509</bold></highlight> is driven by CPU <highlight><bold>501</bold></highlight> to control the display on display device <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Computer system <highlight><bold>500</bold></highlight> advantageously employs a series of start-up operations to initialize the system. Computer system <highlight><bold>500</bold></highlight> may access configuration files on one of storage devices <highlight><bold>506</bold></highlight> to load portions of the operating system. When initializing the operating system, computer system <highlight><bold>500</bold></highlight> loads the kernel into RAM <highlight><bold>503</bold></highlight>. Computer system <highlight><bold>500</bold></highlight> further creates the syscall table to provide the offset addresses to the routines of the kernel. After normal start-up procedures have been completed, computer system <highlight><bold>500</bold></highlight> executes a configuration program according to embodiments of the present invention. The configuration program copies the original syscall table to a new memory location in RAM <highlight><bold>503</bold></highlight>. The configuration program loads the wrapper functions which perform the desired audit tasks into RAM <highlight><bold>503</bold></highlight>. The configuration program then rewrites the syscall table so that system calls originated by user space applications are first directed to the wrapper functions. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Embodiments of the present invention provide several advantages over prior art auditing systems. In particular, audit code may be dynamically added, removed, or updated without rebuilding the kernel system call routines. Specifically, the wrapper functions separate the audit code from the kernel system call code. When it is desired to change the audit code, the changes are made in source code in a manner that is well known in the art. The source code with the desired changes is compiled into a processor executable form. The processor executable code is then installed on the particular system to execute the desired changes. Since the audit code and the kernel system call code is separate, changes to the audit code do not require the kernel system call routines to be rebuilt. For similar reasons, changing the kernel system call code does not require modification of the audit code. Specifically, new versions of an operating system do not require porting the audit code. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Additionally, embodiments of the present invention are capable of eliminating extraneous audit data that is unnecessary for a particular system. For example, when an audit data is determined to be unnecessary, audit data may be eliminated by utilizing specialized code in selected wrapper functions to filter audit data as necessary. The specialized code may perform logical comparisons of various arguments to predefined criteria to determine whether auditing is appropriate. For example, the audit code may examine the filename and pathname associated with a particular file open operation. If the filename and pathname refer to system resources that possess little security concerns, the audit code may forgo generating audit data. Alternatively, certain wrapper functions may be completely disabled without effecting the operations of the kernel. Specifically, certain wrapper functions may be selectively disabled by rewriting the memory addresses of the respective kernel system call routines into the syscall table. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer readable medium including instructions executable by a processor-based system, said computer readable medium comprising: 
<claim-text>code for replacing address information in a system call table with address information associated with a plurality of wrapper functions; and </claim-text>
<claim-text>code for defining said plurality of wrapper functions, said plurality of wrappers functions transferring processing control to system call routines, said plurality of wrapper functions retrieving parameters associated with said system call routines, said plurality of wrapper functions utilizing said parameters to generate audit data, and said plurality of wrapper functions writing said audit data to a buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>code for copying said system call table to a new memory location as an original system call table copy before replacing said system call table with address information associated with said plurality of wrapper functions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein at least one of said plurality of wrapper functions is operable to examine memory information of said original system call table copy and is operable to transfer control to a system call routine associated with said memory information. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising: 
<claim-text>code for examining an amount of audit data in said buffer; and </claim-text>
<claim-text>code for writing said audit data to an audit file when the amount of audit data in said buffer exceeds a predetermined amount. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein at least one of said plurality of wrapper functions comprises code for performing a logical comparison of said parameters against predefined criteria to determine whether to write audit data to said buffer. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method for generating audit data comprising the steps of: 
<claim-text>placing a wrapper function in memory; </claim-text>
<claim-text>writing address information into an entry of a system call table, said address information being associated with said wrapper function; and </claim-text>
<claim-text>transferring processing control to said wrapper function, said wrapper function transferring processing control to a system call routine, retrieving parameters associated with said system call routine, utilizing said parameters to generate audit data, and writing said audit data to a buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said entry is associated with a vector, said method further comprising the step of: 
<claim-text>generating a system call utilizing said vector. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> further comprising the steps of: 
<claim-text>copying an original entry in said system call table associated with said vector to a new location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising the steps of: 
<claim-text>accessing said copy of an original entry to obtain memory information related to said system call routine; and </claim-text>
<claim-text>transferring processing control to said system call routine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said step of transferring processing control includes generating a software interrupt. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> further comprising the step of: 
<claim-text>disabling said wrapper function by restoring original address information to said entry of said system call table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said wrapper function performs a logical comparison between said parameters and predefined criteria to determine whether to write audit data to said buffer. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> further comprising the steps of: 
<claim-text>examining the amount of audit data in said buffer; and </claim-text>
<claim-text>writing said audit data to an audit file, when said amount of audit data exceeds a predetermined amount. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer system for generating audit data associated with system calls, said computer system comprising: 
<claim-text>means for receiving processing control, said means for receiving being operable to transfer processing control to a system call routine and being operable to generate audit data associated with said system call routine; and </claim-text>
<claim-text>means for transferring control to said means for receiving, wherein said means for transferring control includes a system call table with address information associated with said means for receiving processing control. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> further comprising: 
<claim-text>means for creating a copy of an original system call table, and wherein said means for receiving processing control is operable to determine the memory location of said kernel system call routine by accessing said copy of said original system call table. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said means for receiving processing control includes means for writing audit data to an audit buffer. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising: 
<claim-text>means for monitoring an amount of audit data in said audit buffer; and </claim-text>
<claim-text>means for writing buffered audit data to an audit file when said amount of audit data exceeds a predetermined amount.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005168A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005168A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005168A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
