<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004663A1-20030102-D00000.TIF SYSTEM "US20030004663A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00001.TIF SYSTEM "US20030004663A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00002.TIF SYSTEM "US20030004663A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00003.TIF SYSTEM "US20030004663A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00004.TIF SYSTEM "US20030004663A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00005.TIF SYSTEM "US20030004663A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004663A1-20030102-D00006.TIF SYSTEM "US20030004663A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004663</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896327</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G01R013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>702</class>
<subclass>066000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Facilitating comparisons between simulated and actual behavior of electronic devices</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Anthony</given-name>
<family-name>Masella</family-name>
<name-suffix>JR.</name-suffix>
</name>
<residence>
<residence-us>
<city>Littleton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Bruce</given-name>
<middle-name>A.</middle-name>
<family-name>Webster</family-name>
</name>
<residence>
<residence-us>
<city>Norton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Legal Department</name-1>
<name-2>Teradyne, Inc.</name-2>
<address>
<address-1>321 Harrison Avenue</address-1>
<city>Boston</city>
<state>MA</state>
<postalcode>02118</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for analyzing the behavior of electronic devices includes a first database for storing simulation values and a second database for storing actual waveform values. The simulation values include test patterns representing inputs to a device model, response data representing outputs from the device model, and expect data representing expected values of the response data in response to the test patterns. The actual waveform values include sampled inputs and outputs of an actual device under test (DUT), of the type presented by the model, and acquired using an electronic test system. When the DUT is exercised with test patterns that correspond to the test patterns stored in the first database, the DUT generates output that can be compared directly with the response data and/or expect data stored in the first database. The system according to the invention further includes software for aligning the data stored in the first and second databases, so that simulated and actual values can be readily compared. Analysis tools are included for examining similarities and differences between simulated and actual behavior. These include a graphical display for representing simulated and actual values. The graphical display enables a user of the system&mdash;generally the test developer&mdash;to visually identify instances in which the actual behavior of a DUT differs from the simulated behavior. The analysis tools may also include computer-processing features for scanning the first and second databases to automatically identify suspect areas in which actual and simulated behavior substantially differ. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates generally to simulating and/or testing electronic devices, and, more particularly, to facilitating comparisons between the behavior of a device predicted by a simulation and the behavior of a corresponding physical device exercised on a tester. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> When a designer develops a new electronic device, the designer generally concurrently develops a software model for the new device. The software model simulates the behavior of a physical device by producing output data in response to input data analogously to the way in which the physical device produces output signals in response to input signals. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A software model, once developed, can be made available to aid in developing a test program. A test program is a software program that runs on a tester for testing actual, physical devices. A conventional process for developing a test program is shown generally in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. An engineer acquires the device model (step <highlight><bold>110</bold></highlight>) and generates &ldquo;test patterns,&rdquo; i.e., sequences of data that correspond to input signals that are to be applied to inputs of an actual device under test (DUT) during operation of the test program on a tester (step <highlight><bold>112</bold></highlight>). The engineer applies the test patterns to the device model. In response, the device model generates response data (step <highlight><bold>114</bold></highlight>). Using the response data, as well as knowledge about the device and about the target tester, the engineer generates &ldquo;expect data,&rdquo; i.e., expected values of output signals from DUT in response to the test patterns during the execution of the test program. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> To implement a test program for use with a particular target tester, a test engineer translates the simulated test patterns and expect data into software instructions that are compatible with the target tester (step <highlight><bold>116</bold></highlight>). The test engineer stores the software instructions in the test program (step <highlight><bold>118</bold></highlight>) and debugs the test program by running it on the tester to test actual, physical devices (step <highlight><bold>120</bold></highlight>). The test engineer may alternatively debug the test program in a software environment that simulates both the tester and the device under test. Under control of the test program, the tester (or simulated tester) applies stimuli to inputs of a DUT (or simulated DUT), and captures responses from outputs of the DUT (or simulated DUT). The tester compares the captured responses with expect data stored in the test program. If the responses match the expect data, the test program passes. Otherwise, the test program fails. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Test programs commonly fail when first run, even when testing known-good devices. The reasons for this are varied, and include inaccurate data used to generate device models, failure to account for normal semiconductor process variations, and other sources. To address these problems, test engineers customarily modify the test programs (step <highlight><bold>122</bold></highlight>), test the changes, and repeat as needed to yield more reliable test programs. Eventually, the test program passes and is deployed to a testing facility for performing volume production testing. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Test engineers generally develop and debug test programs with only limited access to testers and with only limited numbers of actual devices. Consequently, problems with test programs often do not arise until after the test programs have been deployed. The personnel at the testing facilities generally lack expertise in test program development and in the test programs for specific devices. When a test program fails while testing a device that is believed to be good, the testing facility may halt production until the source of the problem is identified and the problem is solved. The testing facility generally falls back on the test engineer responsible for the test program to receive assistance. Messages from the testing facility usually take the form of emails, faxes, or telephone calls, which describe the nature of the failure. The test engineer receives the messages and prepares responses for the testing facility. In preparing responses, the test engineer may consult with device designers and examine simulations of the device. The test engineer&apos;s responses generally take the form of emails or faxes, which includes suggestions for modifying the test program. They may also include revised software, transmitted electronically or via a physical storage medium. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> This method of troubleshooting test programs involves several drawbacks. For example, the test development facility may be physically distant from the testing facility, making direct communication difficult. Different time zones, languages, and areas of expertise can significantly impair the ability to develop speedy solutions to test program failures. It often happens that a test engineer flies to Asia on a lengthy support mission, only to discover that the problem is one that could have been solved easily without the trip if better information had been available. Perhaps more significantly, test program failures can bring a production line to a complete halt until the failures are resolved. The opportunity cost of halting a production line can quickly rise to an excessive level. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> With the foregoing background in mind, it is an object of the invention to facilitate understanding of the behavior of an electronic device exercised by an automatic test system. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> To achieve the foregoing object, as well as other objectives and advantages, a system for examining the behavior a device exercised by an automatic test system includes a first collection of data for storing simulation values and a second collection of data for storing actual waveform values. The simulation values include test patterns representing inputs of a device model and response data representing outputs of the device model. They may also include expect data representing expected values of the response data. The actual waveform values include sampled inputs and/or outputs of an actual device under test (DUT) acquired using an electronic test system. When a tester exercises the DUT with test patterns that correspond to the test patterns stored in the first collection of data, the DUT generates output that can be compared directly with the response and/or expect data stored in the first collection of data. Software is included for aligning the data stored in the first and second collections of data, so that simulated and actual values can be readily compared. Analysis tools are included for examining similarities and differences between simulated and actual behavior. These may include a graphical display for visually representing simulated and actual values. The graphical display enables a user of the system to identify instances in which the actual behavior of a DUT deviates from the simulated behavior. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Additional objects, advantages, and novel features of the invention will become apparent from a consideration of the ensuing description and drawings, in which&mdash;</paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flowchart that shows the conventional process for developing a test program; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart illustrating an overview of a process for troubleshooting a test program failure according to the invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a screen shot for displaying simulated waveforms of a device model responding to test patterns, according to the prior art; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>C respectively show a detector circuit of an automatic test system for sampling actual waveforms, a graph showing a method of sampling using an &ldquo;edge&rdquo; method with the detector circuit of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, and a graph showing a method of sampling using a &ldquo;level&rdquo; method with the detector circuit of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a simplified schematic of a system for troubleshooting a test program according to the invention using an automatic test system and a remote test development workstation; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a screen shot for displaying both simulated waveforms of a device model and actual waveforms of a device acquired on an automatic test system in response to actual input signals, in accordance with the invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0017" lvl="7"><number>&lsqb;0017&rsqb;</number> Overview </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a high-level flowchart of a process according to an embodiment of the invention for troubleshooting a test program. At step <highlight><bold>210</bold></highlight>, the device is simulated using a device model that represents the type of device that will be the subject of the test program. The simulator applies test patterns to the device model, which in turn produces response data. From the functional description (or functional model), expect data are also produced. The test patterns, response data, and expect data are stored in a first collection of data <highlight><bold>214</bold></highlight>, hereinafter called the &ldquo;simulation baseline.&rdquo;</paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> At step <highlight><bold>212</bold></highlight>, an automatic test system is made to sample actual waveforms from physical nodes of a device under test (DUT) of the type represented by the device model. The tester samples nodes of the DUT and stores the sampled values in a second collection of data <highlight><bold>216</bold></highlight>, hereinafter called the &ldquo;sampled collection.&rdquo; To sample the waveforms, the tester is made to produce test stimuli that correspond to physical realizations of some or all of the test patterns applied to the device model during the simulation. For example, if a test pattern specifies that a particular input of the device model is to go HIGH at 20 ns into a particular test cycle, the tester can be made to supply an actual input signal to the corresponding pin of the DUT that goes high at 20 ns into the corresponding physical test cycle. The tester testing a DUT is thus made to realize some or all of the simulation in an actual testing environment. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> For each cycle of actual waveform data stored in the sampled collection <highlight><bold>216</bold></highlight>, a corresponding cycle of simulated data can be found in the simulation baseline <highlight><bold>214</bold></highlight>. At step <highlight><bold>218</bold></highlight>, cycles of actual data stored in the sampled collection <highlight><bold>216</bold></highlight> are aligned with corresponding cycles of simulated data in the simulation baseline <highlight><bold>214</bold></highlight>. Aligning the cycles enables simulated test events to be compared directly with corresponding actual test events that occur on an actual tester. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> At step <highlight><bold>220</bold></highlight>, aligned data from the simulation baseline <highlight><bold>214</bold></highlight> and the sampled collection <highlight><bold>216</bold></highlight> are rendered on a graphical display. The data are preferably rendered as waveforms, i.e., continuous signals that vary as a function of time. Displaying simulated and actual waveforms together allows a user to visually inspect similarities and differences between the two types of waveforms, and to drawn conclusions about how the test program and/or device model may be operating. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Analysis tools are preferably included to aid the user in finding discrepancies between the simulated and actual waveform data (step <highlight><bold>222</bold></highlight>). The analysis tools preferably include a &ldquo;Waveform Scan and Compare&rdquo; feature for scanning through the simulation baseline <highlight><bold>214</bold></highlight> and the sampled collection <highlight><bold>216</bold></highlight> to identify instances in which the simulated and actual waveforms differ by more than a predetermined limit, and then reporting these instances. </paragraph>
<paragraph id="P-0023" lvl="7"><number>&lsqb;0023&rsqb;</number> Simulation Baseline </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In the preferred embodiment, the software environment that simulates the device under test also emulates the target tester and any external hardware needed to facilitate testing. The software environment preferably executes the test program itself, rather than applying idealized test patterns that represent those included with the test program. This type of simulation yields more realistic results than one that simulates the device only, because it captures the characteristics of the test system and the interaction between the test system and the device under test. It also allows the test program to be developed on a computer workstation without tester hardware. This relieves the test developer of the need to have access to tester hardware. It also enables the test developer to largely complete and debug a test program for a new device prior to the arrival of the first devices from the fabrication facility. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> One suitable software environment for both simulating the device and emulating the tester and any external hardware is the VX Simulation Model (&ldquo;VX&rdquo;) produced by Teradyne, Inc., of Boston, Mass. VX connects a tester&apos;s software environment with electronic design automation (EDA) tools to allow test programs to be executed using simulations of the tester and the DUT. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Test developers have traditionally used VX to assist in developing test programs. VX includes a feature, which can be invoked by a user prior to running a simulation, for storing a record of all stimuli, responses, and expect data as they are produced during a simulation of a program testing the DUT. According to the preferred embodiment of the invention, this record of simulated test data is used to create the simulation baseline <highlight><bold>214</bold></highlight>. VX can therefore store the record of simulated test data with little or no additional effort on the part of the user. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> VX includes a program called &ldquo;DataScope&rdquo; for displaying simulated data as waveforms, similar to the way that an oscilloscope displays physical electronic signals as waveforms. Waveforms displayed in DataScope correspond to simulated data from different nodes of the device. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a drawing of a typical DataScope screen <highlight><bold>300</bold></highlight>. The DataScope screen <highlight><bold>300</bold></highlight> includes controls that are commonly found in programs having a graphical user interface, such as control buttons <highlight><bold>310</bold></highlight> and scroll bars <highlight><bold>312</bold></highlight>. Within DataScope, the control buttons enable a user to operate a host of features, such as features for adding and deleting waveforms from the display, searching for failures, changing the time scale, and zeroing in on a particular event in time. The vertical scroll bar enables a user to display waveforms that are off screen, and the horizontal scroll bar enables a user to change the time range over which waveforms are displayed. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> A trace region <highlight><bold>314</bold></highlight> within the screen <highlight><bold>300</bold></highlight> displays the selected waveforms. To the left of the trace region, waveform labels <highlight><bold>316</bold></highlight> indicate the node names of the respective waveforms. Below the trace region <highlight><bold>314</bold></highlight>, time markers <highlight><bold>318</bold></highlight> identify the simulated time for which the waveforms are displayed. Waveforms are displayed for different nodes at corresponding instants of simulated time. The common time scale allows the user to explore cause-effect relationships among the different simulated waveforms. The simulated time shown by the time markers <highlight><bold>318</bold></highlight> corresponds to actual instants in time during the operation of the test program on an actual tester. The events that occur among the displayed waveforms therefore correspond to test events occurring on an actual device under test during the operation of the test program. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The trace region <highlight><bold>314</bold></highlight> displays stimuli, expect data, and responses. Stimuli appear as single waveforms (e.g., &ldquo;A3 dchan&rdquo; and &ldquo;B3 dchan&rdquo;). Expect data appear as boxes with an additional line at either the top or the bottom of the box to respectively indicate an &ldquo;expect-HI&rdquo; or an &ldquo;expect-LO.&rdquo; Responses appear around the expect data. For example, &ldquo;F3dchan&rdquo; has a response that is HI throughout the displayed time range. It has expect data that is HI (additional line at the top of the box) a first time at the beginning of the displayed time range and a second time just after the middle of the displayed time region. Note that the simulation &ldquo;passes&rdquo; for F3dchan during this time range, because the response data matches the expect data during the relevant intervals (within the time spans represented by the respective boxes). In contrast, the node &ldquo;Cn4_bar dchan&rdquo; fails, as indicated with the letter &ldquo;F,&rdquo; because the response is HI when the expect value is low, within the second displayed box. Although <cross-reference target="DRAWINGS">FIG. 3</cross-reference> appears in black-and-white, the actual screen represented by <cross-reference target="DRAWINGS">FIG. 3</cross-reference> runs on a color display, for which stimuli, expect data, and responses each have a distinctive color for easy recognition. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> DataScope has previously been used for displaying simulation data only. In accordance with the invention, however, DataScope is enhanced to also display actual waveforms acquired by an automatic test system exercising an actual device under test. </paragraph>
<paragraph id="P-0031" lvl="7"><number>&lsqb;0031&rsqb;</number> Sampled Collection </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> When a test program is deployed at a testing facility and a believed-good device inappropriately fails the test program, data can be collected from the failing device for comparison with the simulation baseline <highlight><bold>214</bold></highlight> within DataScope. To allow for accurate comparison, portions of the simulation for which comparison is sought should be realized on the actual tester. In theory, this means running the actual test program on the device under test and digitizing the device I/O as the test program proceeds. In actuality, however, testers generally lack the hardware needed for accurately digitizing of each pin of the device under test in real time. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Although testers generally do not include high-speed samplers for each pin of the DUT, they do generally include window detectors for each pin. The window detectors identify the state of a signal in real time as either a HI, a LO, or a BETWEEN. <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> shows a conventional window detector, which is typical of that provided for each pin of a tester. The window detector includes two comparators <highlight><bold>410</bold></highlight> and <highlight><bold>412</bold></highlight>. The upper comparator <highlight><bold>410</bold></highlight> receives a signal V<highlight><subscript>DUT </subscript></highlight>from a pin of the DUT and compares it with a HI threshold voltage, V<highlight><subscript>TH</subscript></highlight>. The output of the comparator <highlight><bold>410</bold></highlight> assumes a HI or a LO state, depending upon whether V<highlight><subscript>DUT </subscript></highlight>is greater than or less than V<highlight><subscript>TH</subscript></highlight>. The lower comparator <highlight><bold>412</bold></highlight> also receives V<highlight><subscript>DUT</subscript></highlight>, and compares it with a low threshold voltage, V<highlight><subscript>TL</subscript></highlight>. The output of the comparator <highlight><bold>412</bold></highlight> is either HI or LO depending upon whether V<highlight><subscript>DUT </subscript></highlight>is greater than or less than V<highlight><subscript>TL</subscript></highlight>. Both comparators <highlight><bold>410</bold></highlight> and <highlight><bold>412</bold></highlight> receive a latch enable signal (LE), which can be activated once per test cycle. Upon activation, the LE signal causes both comparators to hold their output states. The comparators <highlight><bold>410</bold></highlight> and <highlight><bold>412</bold></highlight> can thus be used as low frequency sampling devices that indicate the state of VDUT at a particular point in time. By repeating a portion of test code and moving the time at which LE is activated, the signal at V<highlight><subscript>DUT </subscript></highlight>can be traced as a function of time. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> To operate the detectors as digitizing devices, the preferred embodiment prescribes the use of software libraries for sampling I/O of the DUT. A user of the automatic test equipment can invoke the libraries for repetitively running specific portions of code found in the test program, i.e., it includes the same test patterns for exercising the DUT in the same way. As the tester runs the software from the library, it simultaneously samples the I/O of relevant pins of the DUT. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4B and 4C</cross-reference> show two ways in which the detector circuit of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> can be used for sampling signals from the device under test. <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> illustrates &ldquo;edge&rdquo; mode for sampling signals. According to edge mode, the software library controlling the sampling moves the LE signal through a test cycle in search of a logic state transition, known as an edge, in the signal being sampled. For each placement of the LE signal within a test cycle, the tester reruns the test code and the detector generates output that indicates whether the sample is HI, LO, or BETWEEN. Edge mode is intended to maximize the speed of locating an edge. Therefore, the library preferably employs a binary search algorithm for finding an edge. Only a small number of points <highlight><bold>420</bold></highlight> are required to converge upon the location of an edge. Once the edge is located, an idealized digital waveform <highlight><bold>422</bold></highlight> can be traced to represent the signal at the pin being sampled. If the signal is expected to include more than one edge, the library can alter its search method. For example, the library can control the placement of the LE signal to perform a linear sweep from the beginning of the test cycle to the end of the test cycle. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4C</cross-reference> illustrates &ldquo;level&rdquo; mode of sampling signals. Level mode accurately captures the voltage levels of the signal being sampled, in addition to the time at which edges occur. The additional information is obtained at the expense of speed. According to level mode, the software library advances the LE signal linearly from the beginning of a test cycle to the end of the test cycle. At each setting of the LE signal, the library repeats the test patterns and varies the detector&apos;s voltage levels, V<highlight><subscript>TH </subscript></highlight>and V<highlight><subscript>TL</subscript></highlight>, to zero-in on the voltage level <highlight><bold>450</bold></highlight> of the sampled signal. The voltage of the sampled signal is found when the output of the detector changes state between two settings of the voltage levels. For speed, the software library preferably employs a binary search routine to find the voltage level of the sampled signal at each location of the LE signal. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In the preferred embodiment, the software library resides on the tester along with the test program and other tester software. The library includes features for looping on test patterns or groups of test patterns, and for collecting waveform information in either edge mode or level mode, at the user&apos;s selection. The library stores sampled data in the sampled collection <highlight><bold>216</bold></highlight>, for subsequent comparison with the simulation baseline <highlight><bold>214</bold></highlight>. Under user control, the library can direct the tester to sample all pins of the device under test for the entire test program, to sample only designated pins, or to sample any or all pins for designated test patterns only. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Because edge mode is relatively fast, users will generally employ edge mode to gather a complete record of a DUT&apos;s waveforms throughout the operation of the test program. Once the results of edge mode are inspected, users may wish to examine suspect portions of the test program or suspect pins using the more detailed sampling capabilities that level mode provides. </paragraph>
<paragraph id="P-0039" lvl="7"><number>&lsqb;0039&rsqb;</number> Integrated Environment </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Once the simulation baseline <highlight><bold>214</bold></highlight> and the sampled collection <highlight><bold>216</bold></highlight> have been generated, a user can view and directly compare simulated and actual waveforms to troubleshoot a test program or otherwise analyze the waveforms. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the preferred environment for troubleshooting test programs according to the invention. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> An operator&mdash;generally a test development engineer&mdash;accesses a computer workstation <highlight><bold>552</bold></highlight> in a test development environment <highlight><bold>550</bold></highlight>. The computer workstation <highlight><bold>552</bold></highlight> runs analysis software for displaying and analyzing waveforms. The computer workstation <highlight><bold>552</bold></highlight> has access to the simulation baseline <highlight><bold>214</bold></highlight> for displaying simulated waveforms. It also has access to the sampled collection <highlight><bold>216</bold></highlight>, which was produced in a tester environment <highlight><bold>500</bold></highlight>. Access may be accomplished in a variety of ways, such as by a computer network or internet <highlight><bold>530</bold></highlight>, or by copying the files from the tester environment <highlight><bold>500</bold></highlight> to the test development environment <highlight><bold>550</bold></highlight> and archiving them locally. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> With access established to both sources of data, the operator in the test development environment can run the analysis software for diagnosing problems with the test program. In the preferred embodiment, DataScope software is enhanced with a capability to display actual waveforms stored in the sampled collection <highlight><bold>216</bold></highlight> together with the simulated waveforms that it has traditionally been able to display. These enhanced features of DataScope are expected to be marketed under the name &ldquo;Silicon Signals&trade;.&rdquo;</paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Within DataScope, data from the sampled collection <highlight><bold>218</bold></highlight> is aligned in time with data from the simulation, and both types of data are displayed on the same screen. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a drawing of a typical DataScope screen <highlight><bold>600</bold></highlight> enhanced with Silicon Signals. An actual, time-aligned signal sampled from an actual device under test appears as the waveform &ldquo;F0 Mfg.&rdquo; On the DataScope display, the operator can directly compare F0 Mfg with its simulation counterpart, &ldquo;F0 dchan&rdquo; to search for possible sources of test program failures. Differences between simulated and actual results may indict the test program, the simulation, or the device under test. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> As with conventional DataScope, DataScope enhanced with Silicon Signals also provides the capability to display events occurring at different instants in time, to add or remove waveforms from the display, and to search for failures. One feature of Silicon Signals permits a user to scan through the data stored in the simulation baseline <highlight><bold>214</bold></highlight> and sampled collection <highlight><bold>216</bold></highlight> to identify instances in which they deviate from each other by more than a user-specified limit. Preferably, a user specifies a guardband that corresponds to a maximum allowable difference between actual and simulated waveforms. Instances in which the difference exceeds the guardband are flagged as suspect. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Another added feature permits a user to scan waveforms at times that precede the displayed time range, to find preceding events that may have contributed to a failure observed on a currently displayed screen. This feature greatly assists in identifying the root cause of test program failures, which generally can be traced to events that precede the actual failing tests. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Yet another added feature includes applying statistical methods for analyzing actual and simulated waveforms. For example, mean difference between corresponding edges of actual and simulated waveforms are computed and displayed, as well as maximum and minimum differences, and standard deviations. Portions of test code can be flagged as suspect if any of these statistical measures exceeds a predetermined limit. </paragraph>
<paragraph id="P-0047" lvl="7"><number>&lsqb;0047&rsqb;</number> Advantages </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The technique disclosed herein confers numerous advantages over the currently used, often ad hoc, technique for troubleshooting test programs. The instant invention allows operators to visually compare simulated waveforms with waveforms acquired on an actual device under test. This gives the operator a window into events occurring on the test floor, even though the test floor may be located half-way around the world. The operator can use the tools provided to quickly diagnose problems and offer solutions. Tester downtime and uncertainty are greatly reduced. Expensive support missions under crisis conditions can be averted. </paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> Alternatives </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Having described one embodiment, numerous alternative embodiments or variations can be made. For example, the embodiment above describes comparing simulation data with actual waveform data for a single device under test. The comparison can be made for more than one device under test, however. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates precisely this case. The waveform &ldquo;F0 Mfg&rdquo; corresponds to data acquired from one tester on the test floor using one DUT. However, the waveform labeled &ldquo;F0 Eng&rdquo; corresponds to data acquired using another DUT from another tester, one that is accessible to the test development engineer. The invention therefore allows simulation data to be compared with actual results from different testers or from different DUTs. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> As indicated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, some portions of the techniques disclosed are preformed at the tester environment <highlight><bold>500</bold></highlight> and other portions are performed at the test development environment <highlight><bold>550</bold></highlight>. This is not required, however. The analysis software can be loaded on the computer workstation <highlight><bold>510</bold></highlight> within the tester and the simulation baseline <highlight><bold>216</bold></highlight> can be made available to the tester environment <highlight><bold>500</bold></highlight>. Thus, one can troubleshoot the test program entirely on the tester, if desired. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Although troubleshooting test programs is a primary application of the techniques described herein, the invention is not limited to this application. For example, test development engineers typically use actual testers to debug test programs before deploying them for production testing. According to another alternative, the analysis software can be loaded onto these testers for assisting the test development engineers in developing more robust test programs. The techniques disclosed herein can be used for debugging device simulations, by flagging instances in which actual results substantially differ from simulated results. In addition, device designers or other technical personnel can use the techniques disclosed for learning about the behavior of physical devices in actual operating environments. Thus, the invention can be used more generally for improving the flow of information among design facilities, test development facilities, and production testing facilities. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> According to another variation, the test development engineer can control the tester via remote control software, to gather sampled waveform data directly. This capability further relieves the personnel at the testing facility from having to participate in solving the test program failure. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> As described above, detector circuits are used to sample the pins of a DUT, for building the sampled collection <highlight><bold>216</bold></highlight>. As testers continue to advance, more suitable devices may be used. For example, it is foreseeable that testers may someday include high-speed digitizers for every pin of a DUT. Therefore, the invention is not limited to situations in which waveforms are sampled using detectors like the one shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The techniques described above benefit from the use of simulation data that is derived by emulating the operation of the tester testing a simulated DUT with the actual test program. The invention is not limited to this type of simulation data, however. Simulations of the DUT alone&mdash;i.e., without tester emulation&mdash;may also be used. In addition, VX, DataScope, and Silicon Signals are disclosed as part of the preferred embodiment, but the invention is not limited to the use of these products. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Each of these alternatives and variations, as well as others, has been contemplated by the inventors and is intended to fall within the scope of the instant invention. It should be understood, therefore, that the foregoing description is by way of example, and the invention should be limited only by the spirit and scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-implemented system for analyzing the behavior of an electronic device, comprising: 
<claim-text>means for accessing data representing simulated waveforms of the electronic device in response to simulated test events; </claim-text>
<claim-text>means for accessing data representing actual waveforms of the electronic device in response to actual test events, wherein the actual waveforms are sampled from an actual electronic device using an automatic test system and the actual test events correspond to physical manifestations of the simulated test events; and </claim-text>
<claim-text>means for graphically displaying the data representing the simulated waveforms together with the data representing the actual waveforms for enabling a visual comparison of simulated and actual behavior of the electronic device in response to the simulated and actual test events. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for aligning data representing simulated waveforms with data representing actual waveforms for enabling responses to corresponding simulated and actual test events to be visually compared. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein the data representing actual waveforms includes data representing actual waveforms for a plurality of different physical devices; and </claim-text>
<claim-text>wherein the means for graphically displaying includes means for displaying data representing actual waveforms of different ones of the plurality of different physical devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising means for computer processing the data representing simulated waveforms and the data representing actual waveforms to detect instances in which the simulated and actual waveforms differ by more than a predetermined limit. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the predetermined limit is user-programmable. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>means for executing the actual test events on an automatic test system; and </claim-text>
<claim-text>means for sampling at least one output of the electronic device during the execution of the actual test events. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the means for executing comprises a software program executable on the automatic test system for exercising the electronic device. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the means for executing comprises means for detecting the occurrence of an edge at a terminal of the electronic device. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the means for executing comprises means for sampling a signal at a terminal of the electronic device at a predetermined sampling rate. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the means for accessing data representing simulated waveforms is located remotely from the automatic test system. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An automatic test system for exercising an electronic device, comprising: 
<claim-text>sampling circuitry for sampling at least one actual waveform of the electronic device as it responds to at least one predetermined test event; </claim-text>
<claim-text>software for accessing data representing the at least one actual waveform, and for accessing data representing at least one simulated waveform produced by a simulation of the electronic device as it responds to the at least one predetermined test event; and </claim-text>
<claim-text>a display for displaying together the at least one actual waveform and the at least one simulated waveform. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The automatic test system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>a software program for executing at least one predetermined test event on an automatic test system, wherein the software program is executable on the automatic test system for exercising the electronic device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The automatic test system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the software program controls pin electronics circuitry for detecting the occurrence of an edge in a sampled waveform. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The automatic test system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the software program controls pin electronics circuitry for sampling a waveform at a predetermined sampling rate. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The automatic test system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the tester is used to test integrated circuits in a production environment. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A computer-implemented system for troubleshooting a test program directed at testing an electronic device on an automatic test system, comprising: 
<claim-text>tester emulation software for emulating the behavior of the automatic test system exercising the electronic device; </claim-text>
<claim-text>software for storing simulation data acquired through operation of the tester emulation software, wherein the simulation data represents simulated waveforms of the electronic device in response to predetermined test events; </claim-text>
<claim-text>software for accessing the simulation data and actual data representing actual waveforms sampled from an automatic test system exercising the electronic device; and </claim-text>
<claim-text>software, operable in communication with the software for accessing, for graphically displaying together the simulated and actual waveforms and enabling a visual comparison between the simulated and actual waveforms in response to the predetermined test events. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the tester emulation software comprises: 
<claim-text>software for emulating the behavior of the automatic test system executing software for exercising the electronic device; </claim-text>
<claim-text>software for simulating the electronic device; and </claim-text>
<claim-text>software for enabling the software for emulating the automatic test system to communicate with the software for simulating the electronic device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer-implemented system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the software for emulating the automatic test system comprises: 
<claim-text>software for emulating digital test equipment; and </claim-text>
<claim-text>software for emulating analog test equipment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. In a computer-implemented system, a graphical display to aid in analyzing the behavior of a device under test in an automatic test system, comprising: 
<claim-text>at least one trace representing a simulated waveform of an input or output of a device under test; </claim-text>
<claim-text>at least one trace representing an actual waveform sampled from an automatic test system exercising the device under test; </claim-text>
<claim-text>wherein the at least one trace representing a simulated waveforms and the at least one trace representing an actual waveform represent corresponding test events spanning corresponding intervals of time. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The graphical display as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the device under test is a first device under test, and further comprising: 
<claim-text>at least on trace representing an actual waveform sampled from an automatic test system exercising a second device under test. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The graphical display as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising a user control for changing a time span over which waveforms are displayed. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The graphical display as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising a user control for initiating a scan of displayed waveforms for identifying an instance in which an actual waveform and a simulated waveform differ by more than a predetermined limit. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The graphical display as recited in <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising a user control for setting the predetermined limit. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The graphical display as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the graphical display is located remotely from the automatic test system. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A method of troubleshooting a test program that runs on an automatic test system for testing an electronic device, comprising: 
<claim-text>emulating in software the automatic test system exercising the electronic device as it undergoes a predetermined test scenario; </claim-text>
<claim-text>storing emulated waveform data corresponding to at least one waveform of the electronic device as it undergoes the predetermined test scenario; </claim-text>
<claim-text>sampling at least one actual waveform of an actual electronic device being exercised on an actual automatic test system as it undergoes the predetermined test scenario; </claim-text>
<claim-text>storing, responsive to the step of sampling, actual waveform data; and </claim-text>
<claim-text>displaying together the emulated waveform data and the actual waveform data to enable a visual comparison of the emulated and actual waveform data in response to the predetermined test event. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A method analyzing the behavior of an electronic device, comprising: 
<claim-text>emulating in software an automatic test system exercising the electronic device as it undergoes a predetermined test scenario; </claim-text>
<claim-text>storing emulated waveform data corresponding to at least one waveform of the electronic device as it undergoes the predetermined test scenario; </claim-text>
<claim-text>sampling at least one actual waveform of an actual electronic device being exercised on an actual automatic test system as it undergoes the predetermined test scenario; </claim-text>
<claim-text>storing, responsive to the step of sampling, actual waveform data; and </claim-text>
<claim-text>computer-processing the emulated waveform data and the actual waveform data to enable a comparison of the emulated and actual waveform data in response to the predetermined test event. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A method of developing a test program for testing an electronic device, comprising: 
<claim-text>emulating in software the automatic test system exercising the electronic device as it undergoes a predetermined test scenario included in the test program; </claim-text>
<claim-text>storing emulated waveform data corresponding to at least one waveform of the electronic device as it undergoes the predetermined test scenario; </claim-text>
<claim-text>sampling at least one actual waveform of an actual electronic device being exercised on an actual automatic test system as it undergoes the predetermined test scenario; </claim-text>
<claim-text>storing, responsive to the step of sampling, actual waveform data; and </claim-text>
<claim-text>displaying together the emulated waveform data and the actual waveform data to enable a visual comparison of the emulated and actual waveform data in response to the predetermined test event. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A computer-implemented system for analyzing the behavior of an electronic device, comprising: 
<claim-text>data representing simulated waveforms of the electronic device in response to simulated test events; </claim-text>
<claim-text>data representing actual waveforms of the electronic device in response to actual test events, wherein the actual waveforms are sampled from an actual electronic device using an automatic test system and the actual test events correspond to physical manifestations of the simulated test events; and </claim-text>
<claim-text>a graphical display for displaying the data representing the simulated waveforms together with the data representing the actual waveforms for enabling a visual comparison of simulated and actual behavior of the electronic device in response to the simulated and actual test events.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004663A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004663A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004663A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004663A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004663A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004663A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004663A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
