<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005207A1-20030102-D00000.TIF SYSTEM "US20030005207A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00001.TIF SYSTEM "US20030005207A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00002.TIF SYSTEM "US20030005207A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00003.TIF SYSTEM "US20030005207A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00004.TIF SYSTEM "US20030005207A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00005.TIF SYSTEM "US20030005207A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00006.TIF SYSTEM "US20030005207A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00007.TIF SYSTEM "US20030005207A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005207A1-20030102-D00008.TIF SYSTEM "US20030005207A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005207</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896395</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/38</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>306000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Virtual PCI device apparatus and method</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Brian</given-name>
<middle-name>K.</middle-name>
<family-name>Langendorf</family-name>
</name>
<residence>
<residence-us>
<city>Benicia</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Varghese</given-name>
<family-name>George</family-name>
</name>
<residence>
<residence-us>
<city>Folsom</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY, SOKOLOFF, TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 Wilshire Boulevard, Seventh Floor</address-1>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90025-1026</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Virtual PCI bus appears from the perspective of a computer program to be a part of a physical hierarchical PCI bus structure residing behind a host-to-PCI bridge. Devices that are physically located on the host bus side of the host-to-PCI bridge may appear as virtual devices residing on the virtual PCI bus allowing the physical devices to participate in device independent initialization and system resource allocation generally available only to PCI compliant devices. Processor initiated host bus cycles targeted to the virtual PCI device may be intercepted and redirected to the physical device. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention pertains generally to computers. In particular, it pertains to data transfer busses. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The PCI Local Bus Specification Rev. 2.2 and PCI to PCI Bridge Architecture Specification Rev. 1.1, both published by the PCI Special Interest Group, proscribe a PCI (Peripheral Component Interconnect) bus protocol for integrating network controllers, mass storage controllers, display controllers, multimedia device, communication device, and other devices into a system. PCI bus protocol, which includes specifications for electrical characteristics as well as the manner in which software interacts with PCI devices, provides for the integration of peripheral devices in a manner that is generally independent from the particular protocol employed by other system components such as a host bus, processor, or memory. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> PCI protocol provides &ldquo;hooks&rdquo; to enable computer programs to directly access and configure PCI devices. These hooks include configuration address space for accessing 256 8-bit configuration registers associated with each PCI device to allow computer programs to optionally detect each PCI device installed in a system, identify the vendor and device type, determine each PCI device&apos;s system resource requirements, relocate each device within the system address space, interrupt binding, install, configure, boot without user intervention and for system address map construction. Configuration registers include a predefined header region and device dependent region; however, only the necessary and relevant registers in each region need be implemented. PCI-to-PCI bridges are PCI devices with configuration registers, which are accessible to a computer program to assign a range bus number to the PCI busses behind the PCI-to-PCI bridge. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Configuration space is accessed through configuration cycles initiated by a computer program executing on a host processor. PCI protocol anticipates that the routing of configuration cycles be accomplished through either one of two distinct mechanisms in which a host-to-PCI bridge translates a software command (in the form of a sequence of processor initiated host bus accesses to I/O space) into a single configuration cycle on the targeted PCI bus involving the assertion of a particular PCI bus signal that is received by the targeted PCI device to indicate to that device that it is the target for the current configuration cycle. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Detection and initialization of PCI devices in a system can be accomplished by device independent program by utilizing configuration space. A program may poll the configuration space allocated to each slot on PCI bus <highlight><bold>0</bold></highlight> to detect the presence of PCI devices and PCI-to-PCI bridges that reside on bus <highlight><bold>0</bold></highlight>. The program may assign each detected PCI-to-PCI bridge a unique bus number by writing to particular configuration registers and then poll each slot on each assigned bus to detect the presence of PCI devices and PCI-to-PCI bridges. This process may be continued until each slot on each detected PCI bus is polled and all PCI devices are detected. For each PCI device found installed in the system, the device&apos;s configuration registers may be read to determine its resource requirements. A system address map may be built to eliminate conflicts among the system and various PCI devices and system resources may be assigned to each PCI device by writing to the appropriate configuration registers in each PCI device. Additionally, a self-test may be invoked on those devices that support self-test and any other initialization, installation, and configuration may be accomplished for each PCI device with or without user intervention. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Disadvantages imposed by strict adherence to PCI protocol include limits on data transfer speed, data path width, latency, and bandwidth, which set an upper boundary for performance of PCI devices. Performance may also be restricted by delays inherent to host-to-PCI bridges as well as the bandwidth constraints inherent to multiple PCI devices residing on a shared PCI bus. The present trend is for increasingly higher performance processors, memory, and host busses in which efficiently coupled devices can achieve performance advantages such as lower latency, higher throughput, and increased overall system performance than can be achieved through coupling to an actual PCI bus. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Plug-and-Play&trade; resource allocation programs, as required by PCI bridge specifications, typically expect the address space allocated to a particular PCI bus to include the address space allocated to any PCI bus behind that particular PCI bus. Accordingly, full compliance with PCI protocol increases the difficulty of locating PCI devices on the host processor side of a host-to-PCI bridge, where the PCI devices&mdash;possibly for compatibility reasons&mdash;require an address space that may be a subset of the address space allocated to a physical PCI bus. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a</italic></highlight>, <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>show a system configuration in accordance with the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a more detailed system configuration. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a system with a primary virtual bridge. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a system with a secondary virtual bridge and a primary virtual bridge. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5, 5</cross-reference><highlight><italic>a</italic></highlight>, <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>show flow charts of method embodiments.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Various embodiments of the provide for the integration of devices, such as network controllers, mass storage controllers, display controllers, multimedia devices, communication devices, and other devices, into a host bus processor as well as the efficient coupling of a device to a processor host bus. Select aspects of PCI protocol may be adhered to, enabling software support for these devices that is generally available only to PCI compliant devices. The present invention may provide, in some systems, at least one of a number of advantages over methods of prior art including: increased system performance, increased device performance, simpler initialization and configuration of all devices in a system, increased robustness in the system resource allocation process, lower overall cost and decreased physical board/chip space as well as enabling the allocation of a subset of the address space assigned to a physical PCI bus to a device residing on a host bus. Additionally, the present invention may enable integration of devices, which appear to computer programs as having many of the characteristics of a PCI compliant device, into a host processor, resulting in a number of advantages such as lower overall system cost, less space, reduction in processor-chip pin-count and increased bandwidth on PCI busses, increased system performance or increased device performance. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a</italic></highlight>, <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>2</bold></highlight>, <highlight><bold>3</bold></highlight> and <highlight><bold>4</bold></highlight> show block diagrams of systems <highlight><bold>100</bold></highlight>, <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight> and <highlight><bold>400</bold></highlight> for explaining various embodiments of the present invention. Processor <highlight><bold>130</bold></highlight> may represent any one processor coupled to host bus <highlight><bold>120</bold></highlight>. Alternatively processor <highlight><bold>130</bold></highlight> may represent two or more processors coupled to host bus <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Systems <highlight><bold>100</bold></highlight>, <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight>, <highlight><bold>400</bold></highlight> may include a host bus device <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> such as a network controller, mass storage controller, display controller, multimedia device, communication device, or other device. Host bus device <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> may be coupled to host bus <highlight><bold>120</bold></highlight> through an interface <highlight><bold>112</bold></highlight> in a manner that allows host bus <highlight><bold>120</bold></highlight> to be monitored and allows processor initiated host bus cycles, which are targeted to non-existent virtual PCI device <highlight><bold>160</bold></highlight>, to be intercepted by host bus device <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Host bus device <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> may include a monitor circuit <highlight><bold>114</bold></highlight> that is coupled to host bus <highlight><bold>120</bold></highlight> for tracking host bus cycles. Monitor circuit <highlight><bold>114</bold></highlight> may capture select information during each host bus cycle and identifies select host bus cycles that are to be snooped or intercepted. Read cycles may be intercepted by driving select host bus data signals to transfer data to host bus <highlight><bold>120</bold></highlight> and then completing the cycle. A cycle, initiated by processor <highlight><bold>130</bold></highlight>, is completed by informing the active processor <highlight><bold>130</bold></highlight> when to terminate the cycle pursuant to the particular protocol employed by the host bus <highlight><bold>120</bold></highlight>. Write cycles may be intercepted by latching the value of select host bus <highlight><bold>120</bold></highlight> data signals on host bus <highlight><bold>120</bold></highlight> write cycles and then completing the cycle. Host bus <highlight><bold>120</bold></highlight> cycles may be snooped by reading and storing select host bus cycle information in a storage <highlight><bold>115</bold></highlight> while the cycle is typically completed by another device coupled to the host bus <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Host bus device <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> may include storage <highlight><bold>111</bold></highlight> that is coupled to host bus <highlight><bold>120</bold></highlight> to allow the contents of storage <highlight><bold>111</bold></highlight> to be accessed through the host bus <highlight><bold>120</bold></highlight>. Various specific embodiments of storage <highlight><bold>111</bold></highlight> may include registers <highlight><bold>216</bold></highlight>, <highlight><bold>218</bold></highlight>, <highlight><bold>417</bold></highlight> that reside in system configuration space or random access memory (RAM), registers, or data ports that reside in system I/O or memory address space. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> PCI protocol provides for a certain number of addressable slots on each PCI bus in which a PCI device may reside. A PCI-to-PCI bridge is a PCI device that provides a transfer path between two PCI busses. A computer program typically assigns each PCI bus directly behind a detected PCI-to-PCI bridge a unique bus number. The PCI bus number and slot number combination provide a unique identifier that may be used by computer programs to select any particular PCI device installed in a system through configuration space. PCI addressing and routing protocol generally anticipates a physical hierarchal bus structure in which host bus cycles, targeted to a particular PCI device are physically routed through a host-to-PCI bridge and possibly through one or more PCI-to-PCI bridges to generate a cycle on the particular PCI bus in which the targeted PCI device resides. Each PCI bus is defined to be behind any PCI bus in the physical/virtual data transfer path between that PCI bus and host bus. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> For purposes of this specification a primary PCI bus <highlight><bold>150</bold></highlight> may be bus number <highlight><bold>0</bold></highlight> and be the bus directly behind the host-to-PCI bridge, but it may also be any PCI bus that is behind bus number <highlight><bold>0</bold></highlight> in which virtual PCI device <highlight><bold>150</bold></highlight> appears to be behind and it is consistent with the methods of the present inventions for there to be more then one primary PCI bus in a particular system. Additionally the primary PCI bus <highlight><bold>160</bold></highlight> may be an actual PCI bus or it may be virtual. The terms virtual and logical, for purposes of this specification, refer to the perspective of a computer program running on any one or more processor <highlight><bold>130</bold></highlight> where the program has an impression of a physical device or structure that may not be reflective of an actual physical device or structure. Virtual PCI device <highlight><bold>160</bold></highlight> logically resides on a PCI bus <highlight><bold>151</bold></highlight>, which is either an extension of primary PCI bus <highlight><bold>150</bold></highlight> or one of its subordinates (i.e. busses that reside behind primary PCI bus <highlight><bold>150</bold></highlight>). </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A host-to-PCI bridge <highlight><bold>140</bold></highlight>, <highlight><bold>240</bold></highlight>, <highlight><bold>340</bold></highlight> may facilitate the translation and routing of a select host bus <highlight><bold>120</bold></highlight> cycles to a primary PCI bus <highlight><bold>150</bold></highlight> and its subordinate busses. Host-to-PCI bridge <highlight><bold>140</bold></highlight>, <highlight><bold>240</bold></highlight>, <highlight><bold>340</bold></highlight> may include, a host bus interface <highlight><bold>141</bold></highlight>, a PCI bus interface <highlight><bold>142</bold></highlight>, storage <highlight><bold>145</bold></highlight>, storage <highlight><bold>149</bold></highlight> and control circuit <highlight><bold>148</bold></highlight> to track host bus <highlight><bold>120</bold></highlight> cycles to determine, for each host bus cycle, whether to route the host bus cycle to an actual primary PCI bus <highlight><bold>150</bold></highlight>. To make this determination, control circuit <highlight><bold>148</bold></highlight> consults storage <highlight><bold>145</bold></highlight>, which identifies address space allocated to primary PCI bus <highlight><bold>150</bold></highlight> and its subordinates, and storage <highlight><bold>149</bold></highlight>, which identifies address space allocated to virtual PCI device <highlight><bold>160</bold></highlight> or possibly other virtual devices. Storage <highlight><bold>145</bold></highlight> and <highlight><bold>149</bold></highlight> may hold information in the form of bus numbers, memory address ranges, I/O address ranges or other similar information. The information in storage <highlight><bold>149</bold></highlight>, that indicates the address ranges allocated to virtual PCI device <highlight><bold>160</bold></highlight> (or in more complex configurations to all or a group of virtual devices or busses), may generally be a subset of the address space in storage <highlight><bold>145</bold></highlight>, which is allocated to primary PCI bus <highlight><bold>150</bold></highlight> and its subordinates. Host bus cycles which are targeted to virtual PCI device <highlight><bold>160</bold></highlight> are allowed to be intercepted by host bus device <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In a system where host bus <highlight><bold>120</bold></highlight> utilizes the protocol of a Pentium&trade; 3 or 4 processor, host-to-PCI bridge <highlight><bold>140</bold></highlight>, <highlight><bold>240</bold></highlight>, <highlight><bold>340</bold></highlight> may be the responder for all host bus cycles insuring that all host bus cycles are completed according to host bus protocol, and host bus device <highlight><bold>110</bold></highlight> may claim select host bus cycles which it intercepts. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The information required to identify host bus cycles targeted to virtual PCI device <highlight><bold>160</bold></highlight> and the manner in which this information is obtained, may depend on the bus structure of the particular system. The unique bus-device number combination of virtual PCI device <highlight><bold>160</bold></highlight> may be hardwired or preprogrammed into both the host bus device <highlight><bold>110</bold></highlight> and host-to-PCI bridge in a system <highlight><bold>100</bold></highlight> in which virtual PCI device <highlight><bold>160</bold></highlight> resides logically on primary PCI bus <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> It is consistent with the methods of the present invention for a system <highlight><bold>100</bold></highlight>, <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight>, <highlight><bold>400</bold></highlight> to have two, three or more host bus devices <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> or to have two, three or more processors <highlight><bold>130</bold></highlight> with each having one or more host bus devices <highlight><bold>110</bold></highlight>, <highlight><bold>210</bold></highlight>, <highlight><bold>410</bold></highlight> integrated into it. The methods of the present invention may be applied to a system <highlight><bold>100</bold></highlight> comprised of a plurality of distinct host bus devices <highlight><bold>110</bold></highlight>, which are each to be associated with one of a plurality of distinct virtual PCI devices <highlight><bold>160</bold></highlight>. Host bus <highlight><bold>120</bold></highlight> cycles targeted to any one of the plurality of virtual PCI devices <highlight><bold>160</bold></highlight> are not forwarded to primary PCI bus <highlight><bold>150</bold></highlight> by host-to-PCI bridge <highlight><bold>140</bold></highlight>; rather, one of the host bus devices <highlight><bold>110</bold></highlight> is allowed to intercept the cycle. More than one host bus device <highlight><bold>110</bold></highlight> may be associated with a particular virtual PCI device <highlight><bold>160</bold></highlight>, such that the two or more host bus devices <highlight><bold>110</bold></highlight> utilize the system resources allocated to the particular virtual PCI device. Conversely, a single host bus device <highlight><bold>110</bold></highlight> may be associated with more than one virtual PCI device <highlight><bold>160</bold></highlight>. In addition, a host bus device <highlight><bold>110</bold></highlight> may support multiple functions in accordance with PCI protocol. A scheme for preventing multiple host bus devices <highlight><bold>110</bold></highlight> from intercepting cycles to the same virtual PCI device <highlight><bold>160</bold></highlight>, may be accomplished by hardwiring or preprogramming each host bus device <highlight><bold>110</bold></highlight> with a unique bus number-device number combination for identifying its associated virtual PCI device <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>shows host bus device <highlight><bold>110</bold></highlight> coupled to host bus through interface <highlight><bold>112</bold></highlight>, which is distinct from the host bus interface to processor <highlight><bold>130</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b </italic></highlight>shows an alternate configuration consistent with the methods of the present invention, where processor <highlight><bold>130</bold></highlight> and host bus device <highlight><bold>110</bold></highlight> are coupled to host bus <highlight><bold>120</bold></highlight> through an internal bus <highlight><bold>113</bold></highlight> and a shared host bus interface <highlight><bold>112</bold></highlight>. The system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b </italic></highlight>can result from integrating host bus device <highlight><bold>110</bold></highlight> and processor <highlight><bold>130</bold></highlight> into a single circuit package. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a system <highlight><bold>200</bold></highlight> for explaining an embodiment of the present invention pursuant to the teachings for system <highlight><bold>100</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. System <highlight><bold>200</bold></highlight> includes a virtual PCI device <highlight><bold>160</bold></highlight>, which appears from the perspective of a computer program running on one or more processors <highlight><bold>130</bold></highlight>, to include 256 8-bit configuration registers <highlight><bold>268</bold></highlight> that are accessible through configuration space. Only the necessary and relevant configuration registers <highlight><bold>268</bold></highlight> appear to be implemented. In accordance with PCI protocol, a computer program may initiate accesses to virtual configuration registers <highlight><bold>268</bold></highlight> to accomplish one or more functions that include detecting the presence of virtual PCI device <highlight><bold>160</bold></highlight>, identifying the vendor and device type determining virtual device&apos;s <highlight><bold>160</bold></highlight> system resource requirements, providing for full device relocation, interrupt binding, installation, configuration, booting without user intervention, and including virtual PCI device in the system map construction. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Host bus device <highlight><bold>210</bold></highlight> may include host bus storage <highlight><bold>111</bold></highlight>, which in this embodiment, is comprised of PCI compliant configuration registers <highlight><bold>218</bold></highlight>. Only the necessary and relevant registers <highlight><bold>218</bold></highlight> are implemented. Monitor circuit <highlight><bold>114</bold></highlight> tracks host bus cycles and identifies host bus cycles targeted to virtual configuration registers <highlight><bold>268</bold></highlight>, which are intercepted and redirected to access the host bus device configuration registers <highlight><bold>218</bold></highlight>. As a result, a computer program executing on processor <highlight><bold>130</bold></highlight> can access host bus device configuration registers <highlight><bold>218</bold></highlight> by initiating a host bus cycle targeted for the configuration registers <highlight><bold>268</bold></highlight> of virtual PCI device <highlight><bold>160</bold></highlight>. In this manner, host bus device <highlight><bold>210</bold></highlight> participates in an initialization and configuration procedure for assigning system resources that is generally available only to PCI devices. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Configuration cycles are generated in system <highlight><bold>200</bold></highlight> through either one of two mapping mechanisms provided by PCI protocol. Mechanism one is an indexing scheme in which two fixed locations in processor I/O space are reserved for a configuration-address register <highlight><bold>243</bold></highlight> and a configuration-data register <highlight><bold>244</bold></highlight>, which are typically incorporated into a host-to-PCI bridge <highlight><bold>240</bold></highlight>. Configuration-address register <highlight><bold>243</bold></highlight> enables or disables configuration space and is written by a computer program to identify a particular PCI device and specific configuration register by specifying the bus number, device number, function number, and register number for which a subsequent configuration cycle is intended. Subsequent DWORD read and write host bus cycles targeted to configuration-data register <highlight><bold>244</bold></highlight> are translated and routed, typically by host-to-PCI bridge <highlight><bold>240</bold></highlight>, into PCI compliant configuration cycles; however, host bus cycles targeted to the configuration registers <highlight><bold>268</bold></highlight> of virtual PCI device <highlight><bold>160</bold></highlight> are intercepted by host bus device <highlight><bold>210</bold></highlight> rather then be routed by host-to-PCI bridge <highlight><bold>240</bold></highlight> as anticipated by PCI protocol. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> A system <highlight><bold>200</bold></highlight> that supports mechanism one, may provide a mirror register <highlight><bold>216</bold></highlight> that is included in storage <highlight><bold>115</bold></highlight>, which holds select information obtained through snooping. Host bus <highlight><bold>120</bold></highlight> write cycles targeted to configuration-address register <highlight><bold>243</bold></highlight> may be snooped by host bus device <highlight><bold>210</bold></highlight> and the data transferred in the snooped cycle may be stored in mirror register <highlight><bold>216</bold></highlight> which then reflects the contents of configuration-address register <highlight><bold>243</bold></highlight>. Monitor circuit <highlight><bold>114</bold></highlight> may consult mirror register <highlight><bold>216</bold></highlight> to identify subsequent DWORD host bus <highlight><bold>120</bold></highlight> cycles targeted to configuration-data register <highlight><bold>244</bold></highlight> that are intended to access virtual configuration registers <highlight><bold>268</bold></highlight>. These identified cycles may be intercepted by host bus device <highlight><bold>210</bold></highlight> and redirected to access corresponding configuration registers <highlight><bold>218</bold></highlight> in host bus device <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Alternately, system <highlight><bold>200</bold></highlight> may support mechanism two, where a configuration-space-enable register (not shown) and a forward register (not shown), which typically reside in host-to-PCI bridge <highlight><bold>240</bold></highlight>, are written to by a computer program to specify <highlight><bold>4</bold></highlight><highlight><italic>k </italic></highlight>byte of configuration space to be mapped into a fixed location in processor I/O address space. A system <highlight><bold>200</bold></highlight>, designed to supports mechanism two may provide a mirror register <highlight><bold>216</bold></highlight> to store snooped host bus write cycles targeted to configuration-space-enable register (not shown) and forward register (not shown). Mirror register <highlight><bold>216</bold></highlight> may be consulted by monitor circuit <highlight><bold>114</bold></highlight> to identify host bus cycles that are targeted to virtual device&apos;s configuration registers <highlight><bold>268</bold></highlight>. Identified cycles may be intercepted by host bus device <highlight><bold>210</bold></highlight> and redirected to access corresponding configuration registers <highlight><bold>218</bold></highlight> in host bus device <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Pursuant to PCI protocol, configuration registers may be utilized by a computer program to allocate system resources that include interrupts, processor memory address space, processor I/O address space, and ROM (read only memory) address space which is a range of processor memory address space reserved for ROMs. A computer program may initiate accesses to non-existent virtual configuration registers <highlight><bold>268</bold></highlight> to determine virtual PCI device&apos;s <highlight><bold>160</bold></highlight> system requirements and allocate resources to virtual PCI device <highlight><bold>160</bold></highlight> by writing to select configuration registers <highlight><bold>268</bold></highlight>. A computer program may also access virtual device&apos;s configuration registers <highlight><bold>268</bold></highlight> for handling catastrophic errors as well as executing and obtaining status of a built in self-test (BIST). </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Optionally, host bus device configuration registers <highlight><bold>218</bold></highlight> may be implemented to indicate a request for specific system resources such as one or more ranges of memory space or I/O space to be assigned to virtual PCI device <highlight><bold>260</bold></highlight>. A portion of internal storage <highlight><bold>111</bold></highlight> may be mapped by a computer program into this address space for access through the host bus <highlight><bold>120</bold></highlight>. After a computer program assigns address space to virtual PCI device <highlight><bold>160</bold></highlight>, monitor circuit <highlight><bold>114</bold></highlight>, in this optional embodiment, may consult the appropriate configuration registers <highlight><bold>218</bold></highlight> to identify whether a host bus cycle is targeted to memory or I/O space allocated to virtual PCI device <highlight><bold>160</bold></highlight>. These identified cycles may be intercepted by host bus device <highlight><bold>210</bold></highlight> and redirected to access host bus storage <highlight><bold>111</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Both the host bus device <highlight><bold>210</bold></highlight> and host-to-PCI bridge <highlight><bold>240</bold></highlight> may be aware of the bus number and device number of virtual PCI device <highlight><bold>160</bold></highlight>. This information may be hardwired, preprogrammed, or provided by a program during system initialization and is used to identify host bus cycles targeted to virtual PCI device <highlight><bold>160</bold></highlight> configuration space. Host-to-PCI bridge <highlight><bold>240</bold></highlight> may learn the address space allocated to virtual PCI device <highlight><bold>160</bold></highlight> by snooping select host bus write cycles targeted to the particular virtual configuration registers <highlight><bold>268</bold></highlight> which specify the address space allocated to virtual PCI device <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a system <highlight><bold>300</bold></highlight>, for explaining an embodiment of the present invention, pursuant to the teachings for system <highlight><bold>100</bold></highlight> and system <highlight><bold>200</bold></highlight>. System <highlight><bold>300</bold></highlight> implements mechanism one for accessing configuration space. System <highlight><bold>300</bold></highlight> may be comprised of a primary virtual PCI-to-PCI (P-P) bridge <highlight><bold>370</bold></highlight> that may appear, to a computer program running on a processor <highlight><bold>130</bold></highlight>, as residing on primary PCI bus <highlight><bold>150</bold></highlight> and may appear as a bridge to primary virtual PCI bus <highlight><bold>357</bold></highlight>. Virtual PCI device <highlight><bold>360</bold></highlight> may appear, to a computer program running on processor <highlight><bold>130</bold></highlight> as residing on primary virtual bus <highlight><bold>357</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Both the host bus device <highlight><bold>210</bold></highlight> and host-to-PCI bridge <highlight><bold>340</bold></highlight>, in this embodiment, are aware of the bus number and device number in which primary virtual P-P bridge <highlight><bold>370</bold></highlight> resides and host bus device <highlight><bold>210</bold></highlight> is aware of the device number of virtual PCI device <highlight><bold>360</bold></highlight>. This information may be provided by an initialization program or be hardwired or preprogrammed. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Host-to-PCI bridge <highlight><bold>340</bold></highlight> may include storage <highlight><bold>149</bold></highlight>, which in this embodiment is written by a computer program, such as a Plug-and-Play&trade; resource allocation program, to assign address space to primary PCI bus <highlight><bold>150</bold></highlight>, which encompasses all address space assigned to virtual device <highlight><bold>160</bold></highlight>. Information stored in storage <highlight><bold>149</bold></highlight> may include the bus numbers of virtual busses (not shown) that may reside behind primary PCI bus <highlight><bold>357</bold></highlight>: bus numbers are commonly sufficient information to determine the configuration space allocated to primary PCI bus <highlight><bold>357</bold></highlight> and its subordinates. Optionally, storage <highlight><bold>149</bold></highlight> may include the memory space or I/O space allocated to primary PCI bus <highlight><bold>357</bold></highlight> and any subordinates. In this embodiment, pursuant to Plug-and-Play&trade; protocol, the address space allocated to primary PCI bus <highlight><bold>357</bold></highlight> typically encompasses the address space allocated to any optional subordinate busses (not shown) and virtual PCI device <highlight><bold>160</bold></highlight> resulting in easy and efficient decode by host-to-PCI bridge <highlight><bold>340</bold></highlight> for identifying host bus cycles targeted to virtual PCI bus <highlight><bold>357</bold></highlight> and any optional subordinate virtual busses. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Host-to-PCI bridge <highlight><bold>340</bold></highlight> may include bridge configuration registers <highlight><bold>347</bold></highlight> that are consulted by control circuit <highlight><bold>148</bold></highlight> to identify host bus cycles targeted to the virtual configuration registers <highlight><bold>378</bold></highlight> of primary virtual P-P bridge <highlight><bold>370</bold></highlight> and to route these identified cycles to the Host-to-PCI bridge configuration registers <highlight><bold>347</bold></highlight>. Control circuit <highlight><bold>148</bold></highlight>, in this embodiment, may consult both the bridge configuration registers <highlight><bold>347</bold></highlight> and storage <highlight><bold>145</bold></highlight> and storage <highlight><bold>149</bold></highlight> to determine whether to route host bus cycles to primary PCI bus <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Host bus device <highlight><bold>210</bold></highlight> may snoop host bus cycles targeted to the configuration registers <highlight><bold>378</bold></highlight> of primary virtual P-P bridge <highlight><bold>370</bold></highlight>, to learn the bus number assigned by a computer program to primary virtual PCI bus <highlight><bold>357</bold></highlight> and store this information in storage <highlight><bold>115</bold></highlight>, which holds select information obtained through snooping. Systems having only one host bus device <highlight><bold>210</bold></highlight> may arbitrarily assign a device number to virtual PCI device <highlight><bold>160</bold></highlight>. Systems with multiple host bus devices <highlight><bold>210</bold></highlight> may require a mechanism for associating each host bus device <highlight><bold>210</bold></highlight> with a distinct virtual PCI device <highlight><bold>360</bold></highlight>, such as providing each with a unique device number (i.e. slot number), which may be hardwired, preprogrammed, or stored by an initialization program. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a system <highlight><bold>400</bold></highlight> for explaining an embodiment of the present invention, pursuant to the teachings for system <highlight><bold>300</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Host bus device <highlight><bold>410</bold></highlight> may conform to the description given for host bus device <highlight><bold>210</bold></highlight> and <highlight><bold>310</bold></highlight>. System <highlight><bold>400</bold></highlight> implements mechanism one for accessing configuration space. System <highlight><bold>400</bold></highlight> is further comprised of a secondary virtual P-P bridge <highlight><bold>490</bold></highlight>, which directly interfaces a secondary virtual PCI bus <highlight><bold>451</bold></highlight>. Secondary virtual P-P bridge <highlight><bold>490</bold></highlight>, may appear from the perspective of a computer program running on a processor <highlight><bold>130</bold></highlight>, as residing on primary virtual PCI bus <highlight><bold>357</bold></highlight> and virtual PCI device <highlight><bold>160</bold></highlight> may reside logically on secondary virtual PCI bus <highlight><bold>451</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The secondary virtual bus <highlight><bold>451</bold></highlight> is subordinate to primary virtual PCI bus <highlight><bold>357</bold></highlight>, and, in this embodiment, the address space allocated to secondary virtual bus <highlight><bold>451</bold></highlight> and virtual PCI device <highlight><bold>160</bold></highlight> are within the address space allocated to the primary virtual PCI bus <highlight><bold>357</bold></highlight>. Host-to-PCI bridge <highlight><bold>340</bold></highlight> may consult storage <highlight><bold>145</bold></highlight> to identify and route host bus cycles targeted for primary PCI bus <highlight><bold>150</bold></highlight> and its subordinates, and consult storage <highlight><bold>149</bold></highlight> to identify host bus cycles that are targeted to primary virtual bus <highlight><bold>357</bold></highlight> and its subordinates. Host bus cycles targeted to primary virtual bus <highlight><bold>357</bold></highlight> and its subordinates are not forwarded to primary PCI bus <highlight><bold>450</bold></highlight> but are allowed to be intercepted by a host bus device <highlight><bold>410</bold></highlight>. Host-to-PCI bridge <highlight><bold>340</bold></highlight> may complete (i.e. terminate) intercepted host bus <highlight><bold>430</bold></highlight> cycles according to host bus protocol. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Host bus device <highlight><bold>410</bold></highlight> may include storage <highlight><bold>111</bold></highlight>, which is coupled to the host bus and accessible by processor <highlight><bold>130</bold></highlight>. Storage <highlight><bold>111</bold></highlight> may be comprised of device configuration registers <highlight><bold>218</bold></highlight>, which are accessed by host bus cycles targeted to the configuration registers <highlight><bold>268</bold></highlight> of virtual PCI device <highlight><bold>160</bold></highlight>. In addition, storage <highlight><bold>111</bold></highlight> may be further comprised of bridge configuration registers <highlight><bold>417</bold></highlight> which are accesses by a host bus cycles targeted to the virtual configuration registers <highlight><bold>497</bold></highlight> of virtual secondary P-P bridge <highlight><bold>490</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Similar to system <highlight><bold>300</bold></highlight>, both the host bus device <highlight><bold>410</bold></highlight> and host-to-PCI bridge <highlight><bold>340</bold></highlight>, in this embodiment, are aware of the bus number and device number in which primary virtual P-P bridge <highlight><bold>370</bold></highlight> resides. This information may be provided by an initialization program, hardwired or preprogrammed. Additionally, host bus device <highlight><bold>410</bold></highlight> includes monitor circuit <highlight><bold>114</bold></highlight>, which, in this embodiment, may learn the bus numbers assigned to primary virtual PCI bus <highlight><bold>357</bold></highlight> and its subordinates by snooping host bus cycles targeted to the configuration registers <highlight><bold>378</bold></highlight> of primary virtual P-P bridge <highlight><bold>370</bold></highlight>. This information acquired through snooping may be stored in storage <highlight><bold>115</bold></highlight>. In a system <highlight><bold>400</bold></highlight> that consist of a single host bus device <highlight><bold>410</bold></highlight>, the device number of the secondary virtual P-P bridge <highlight><bold>490</bold></highlight> may be assigned arbitrarily. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In a system with a multiple host bus devices <highlight><bold>410</bold></highlight>, a mechanism is required to associate each host bus device with a distinct secondary virtual P-P bridge <highlight><bold>490</bold></highlight> such as assigning a unique device number for the associated secondary virtual P-P bridge <highlight><bold>490</bold></highlight> to each host bus device <highlight><bold>410</bold></highlight>, which may be hardwired, preprogrammed, or assigned by an initialization program. Each host bus device <highlight><bold>410</bold></highlight> may consult its internal configuration registers <highlight><bold>417</bold></highlight>, after it is written by a computer program, to determine the bus number assigned to the secondary virtual bus <highlight><bold>451</bold></highlight> that directly behinds its associated secondary virtual P-P bridge and then arbitrarily assign a device number to each one or more virtual PCI devices <highlight><bold>460</bold></highlight>. This information may be consulted by monitor circuit <highlight><bold>114</bold></highlight> to identify of host bus cycles targeted to the virtual PCI device <highlight><bold>160</bold></highlight> in a similar manner as described for system <highlight><bold>100</bold></highlight>. Each host bus device <highlight><bold>410</bold></highlight> may include multiple physical devices which are each associated with a distinct virtual device <highlight><bold>160</bold></highlight> logically residing on its associated secondary virtual PCI bus <highlight><bold>451</bold></highlight>. Plug and Play&trade; programs typically group resources assigned to all virtual devices <highlight><bold>160</bold></highlight> residing behind each secondary virtual P-P bridge <highlight><bold>490</bold></highlight> resulting in easy decode of host bus cycles by each host bus device <highlight><bold>410</bold></highlight> for identifying cycles to be intercepted. For example, a single memory address range may be allocated to the secondary virtual P-P bridge <highlight><bold>490</bold></highlight> that encompasses the multiple ranges allocated to each device. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a flow diagram for explaining a method <highlight><bold>500</bold></highlight> of the present invention that may be utilized by systems <highlight><bold>100</bold></highlight>, <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight>, <highlight><bold>400</bold></highlight> and executed by monitor circuit <highlight><bold>114</bold></highlight>. Start <highlight><bold>510</bold></highlight> may be a host bus reset, which will result in storage and registers being set to default values. The following steps may be executed for each host bus cycle. The step of capturing <highlight><bold>520</bold></highlight> involves waiting for a host bus cycle, then receiving and latching select host bus address and control signals that indicate the target for the current host bus cycle. The next step of assessing (step <highlight><bold>540</bold></highlight>) includes evaluating each captured cycle to determine whether to enter intercept step <highlight><bold>550</bold></highlight> or to enter snooping step (step <highlight><bold>560</bold></highlight>). Snooping (step <highlight><bold>560</bold></highlight>) involves receiving and storing in storage <highlight><bold>115</bold></highlight> select host bus data signals <highlight><bold>120</bold></highlight>. The step of assessing (step <highlight><bold>550</bold></highlight>) includes evaluating each captured cycle to determine whether to do nothing for the current cycle and enter step <highlight><bold>520</bold></highlight> to capture the next host bus cycle or to enter intercept the cycle (step <highlight><bold>580</bold></highlight>), which causes the current host bus cycle to be routed to access (i.e. read or write) the appropriate locations within host bus storage <highlight><bold>111</bold></highlight>. Step <highlight><bold>540</bold></highlight> and <highlight><bold>550</bold></highlight> may be executed in parallel or either step <highlight><bold>540</bold></highlight>,<highlight><bold>550</bold></highlight> may precede the other. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>show flow diagrams for explaining a method <highlight><bold>600</bold></highlight> executed by monitor circuit <highlight><bold>114</bold></highlight> of system <highlight><bold>400</bold></highlight>, which is shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Start (step <highlight><bold>610</bold></highlight>) and capturing (step <highlight><bold>620</bold></highlight>) may be the same as described for steps <highlight><bold>510</bold></highlight> and <highlight><bold>520</bold></highlight>, respectively. Assessing (step <highlight><bold>540</bold></highlight>) and snooping (step <highlight><bold>560</bold></highlight>) are accomplished with steps <highlight><bold>641</bold></highlight>, <highlight><bold>642</bold></highlight>, <highlight><bold>662</bold></highlight> and <highlight><bold>664</bold></highlight>. Likewise assessing step <highlight><bold>550</bold></highlight> and intercepting step <highlight><bold>580</bold></highlight> are accomplished with steps <highlight><bold>643</bold></highlight>, <highlight><bold>644</bold></highlight>, <highlight><bold>645</bold></highlight>, <highlight><bold>682</bold></highlight>, <highlight><bold>684</bold></highlight>, and <highlight><bold>686</bold></highlight>. Assessing steps <highlight><bold>641</bold></highlight>-<highlight><bold>645</bold></highlight> may take place substantially in parallel during the address phase of a host bus cycle, and if snooping step <highlight><bold>662</bold></highlight>, <highlight><bold>664</bold></highlight> or intercepting step <highlight><bold>682</bold></highlight>, <highlight><bold>684</bold></highlight>, <highlight><bold>686</bold></highlight> is executed, then the snooping or intercepting step may take place during the data phase of a host bus cycle. Snooped cycles may be completed (e.g. terminated) by a device other than host bus device <highlight><bold>410</bold></highlight> and intercepted cycles may be completed by the host bus device <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Assessing step <highlight><bold>641</bold></highlight> includes an evaluation of whether the current captured host bus cycle is targeted to configuration-address register <highlight><bold>243</bold></highlight>. A positive evaluation results in step <highlight><bold>662</bold></highlight> being entered and the data transferred by the current captured cycle is snooped and some or all of this data is stored in mirror register <highlight><bold>216</bold></highlight>. A negative evaluation results in step <highlight><bold>642</bold></highlight> being entered. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Assessing step <highlight><bold>642</bold></highlight> includes an evaluation of whether the captured host bus cycle is targeted to the specific virtual configuration registers <highlight><bold>378</bold></highlight> for assigning a bus number to primary virtual P-P bridge <highlight><bold>370</bold></highlight>. A positive evaluation requires configuration-address register <highlight><bold>243</bold></highlight> (as reflected by contents of mirror register <highlight><bold>216</bold></highlight>) to have a value indicating that configuration space is enabled and a value that is currently pointing to the specific configuration register <highlight><bold>378</bold></highlight> of primary virtual P-P bridge <highlight><bold>370</bold></highlight> that specifies the bus number assigned to primary virtual bus <highlight><bold>357</bold></highlight>. A positive evaluation also requires the captured read or write host bus cycle to be targeted to configuration-data register <highlight><bold>244</bold></highlight>. A positive evaluation in step <highlight><bold>642</bold></highlight> results in snooping step <highlight><bold>664</bold></highlight> being entered where some or all host bus <highlight><bold>120</bold></highlight> data transferred in the current cycle being latched and stored in storage <highlight><bold>115</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Assessing step <highlight><bold>643</bold></highlight> includes an evaluation of whether the current cycle is targeted to configuration space of a secondary P-P bridge <highlight><bold>490</bold></highlight>. A positive evaluation requires configuration-address register <highlight><bold>243</bold></highlight> (as reflected by contents of mirror register <highlight><bold>216</bold></highlight>) to have a value indicating that configuration space is enabled and has a value that is currently pointing to the configuration registers <highlight><bold>497</bold></highlight> of secondary P-P bridge <highlight><bold>490</bold></highlight>. A positive evaluation also requires the captured cycle to be a read or write host bus cycle targeted to the configuration-data register <highlight><bold>244</bold></highlight>. A positive evaluation in step <highlight><bold>643</bold></highlight> results in intercepting step <highlight><bold>682</bold></highlight> being entered to route the current host bus cycle to configuration registers <highlight><bold>417</bold></highlight> which are for secondary virtual P-P bridge <highlight><bold>490</bold></highlight>, wherein the specific configuration registers <highlight><bold>417</bold></highlight> accessed are determined by the current contents of mirror register <highlight><bold>216</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Assessing step <highlight><bold>644</bold></highlight> includes an evaluation of whether the captured host bus cycle is targeted to configuration space of a virtual PCI device <highlight><bold>160</bold></highlight>. A positive evaluation requires configuration-address register <highlight><bold>243</bold></highlight> (as reflected by contents of mirror register <highlight><bold>216</bold></highlight>) to have a value indicating that configuration space is enabled and a value that is currently pointing to the configuration registers <highlight><bold>268</bold></highlight> of virtual PCI device <highlight><bold>160</bold></highlight>. A positive evaluation also requires the captured cycle to be a read or write host bus cycle targeted to the configuration-data register <highlight><bold>244</bold></highlight>. A positive evaluation in step <highlight><bold>644</bold></highlight> results in intercepting step <highlight><bold>684</bold></highlight> being entered to route the current host bus cycle to access the particular host bus configuration register <highlight><bold>218</bold></highlight> as indicated by the contents of mirror register <highlight><bold>216</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Assessing step <highlight><bold>645</bold></highlight> includes the evaluation of whether the captured host bus cycle is targeted to memory or I/O address space allocated by a computer program to virtual PCI device <highlight><bold>160</bold></highlight>. If the specific configuration registers <highlight><bold>218</bold></highlight> that specify memory or I/O space allocated to virtual PCI device <highlight><bold>460</bold></highlight> have not been previously set, then the results of this evaluation is always negative. The address space allocated to virtual PCI device <highlight><bold>160</bold></highlight>, as determined by the current contents of PCI configuration registers <highlight><bold>218</bold></highlight>, are compared to the captured host bus cycle information. If the target for current host bus cycle is within the address space allocated to virtual PCI device <highlight><bold>160</bold></highlight>, then step <highlight><bold>686</bold></highlight> is entered to route the current host bus <highlight><bold>420</bold></highlight> cycle to the appropriate internal storage <highlight><bold>111</bold></highlight> as indicated by the address and control signals of the captured host bus cycle. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> One skilled in the art will appreciate that functions described herein may be implemented in other physical devices than described while keeping with the sprit of the invention. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Although the present invention is described as being applied to PCI systems, one skilled in the art will appreciate that the methods taught herein may be utilized by any system having a host bus and a peripheral bus (similar to a PCI compliant bus) where advantage is obtained by having a device on coupled to the host bus appear, to computer programs running on a processor in the system, as a residing on a peripheral bus. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus, comprising: 
<claim-text>a first storage to store a plurality of data, said first storage coupled to a host bus through a first path and responsive to one or more of a plurality of control signals to transfer selected parts of said data to said host bus; and </claim-text>
<claim-text>a monitor circuit, coupled to said host bus to track processor initiated host bus cycles and to identify processor initiated host bus read cycles targeted to a virtual PCI device logically residing behind a primary PCI bus, wherein said primary PCI bus is coupled to said host bus through a second path which is distinct from said first path; </claim-text>
<claim-text>wherein said monitor circuit is to generate said plurality of control signals to transfer a select one or more said data to said host bus during one or more of said identified host bus read cycles targeted to said virtual PCI device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said virtual PCI device is a virtual PCI-PCI bridge. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a second storage coupled to said host bus and responsive to one or more of said plurality of control signals to selectively receive said data from said host bus to store in said second storage; 
<claim-text>wherein said virtual PCI device resides logically behind a virtual PCI-to-PCI bridge which resides logically behind said primary PCI bus; and </claim-text>
<claim-text>wherein said monitor circuit is to further identify host bus write cycles targeted to a location, within a configuration space reserved for said virtual PCI-to-PCI bridge, which specifies a bus number and to generate said control signals to receive said bus number from said host bus to store in said second storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a processor which is coupled to said host bus, wherein said processor, said first storage, and said monitor circuit are integrated into a single chip package. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said first storage and said monitor circuit are coupled to said host bus through an internal processor bus. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first storage is responsive to one or more of said plurality of control signals to selectively receive data from said host bus to store in said first storage; 
<claim-text>wherein said monitor circuit is to further identify processor initiated host bus write cycles targeted to said virtual PCI device residing logically behind said primary PCI bus; </claim-text>
<claim-text>wherein said monitor circuit is to generate said plurality of control signals to receive data from said host bus to store in said storage during one or more of said identified host bus write cycles targeted to said virtual PCI device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said storage is comprised of random access memory; and 
<claim-text>said identified host bus read cycles targeted to said virtual PCI device include host bus cycles targeted to memory address space allocated to said virtual PCI device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising a mirror register coupled to said host bus and responsive to one or more of said control signals to receive data from said host bus; 
<claim-text>wherein said monitor circuit is to further identify host bus write cycles targeted to a configuration-address register; and </claim-text>
<claim-text>wherein said monitor circuit is to generate said control signals to receive data from said host bus to store in said mirror register during said host bus cycles identified as targeted to said configuration-address register. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said identified host bus read cycles targeted to said virtual PCI device include host bus cycles to I/O address space allocated to said virtual PCI device. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first storage includes a first plurality of configuration registers; and 
<claim-text>wherein said identified host bus cycles include host bus cycles targeted to configuration space reserved for said virtual PCI device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said virtual PCI device resides behind a virtual PCI-to-PCI bridge, and 
<claim-text>wherein said first storage includes a second plurality of configuration registers, </claim-text>
<claim-text>and wherein said monitor circuit is to further identify host bus cycles targeted to configuration space allocated to said virtual PCI-to-PCI bridge, and </claim-text>
<claim-text>wherein said monitor circuit is to generate said plurality of control signals to transfer a select one or more said data to said host bus during one or more of said identified host bus read cycles targeted to said configuration space allocated to said virtual PCI-to-PCI bridge. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. An apparatus, comprising: 
<claim-text>a first storage, wherein contents of said first storage specify a first address space allocated to a primary PCI bus. </claim-text>
<claim-text>a second storage, wherein contents of said second storage specify a second address space allocated to a virtual PCI device logically residing behind said primary PCI bus; and </claim-text>
<claim-text>a control circuit, coupled to said first and said second storage, wherein said control circuit is to couple to a host bus to track processor initiated host bus cycles and to select host bus cycles to route to said primary PCI bus, wherein said routed cycles are to be selected, based on said contents of said first storage and said second storage, to exclude host bus cycles targeted to said second address space. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said first and said second address space includes memory host bus address space. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said first and said second address space includes host bus I/O space. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said first and said second address space includes PCI compliant configuration address space. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said virtual PCI device is a virtual PCI-to-PCI bridge. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising: 
<claim-text>a plurality of configuration registers; </claim-text>
<claim-text>a third storage coupled to said control circuit, wherein contents of said third storage indicate a bus and a device number in which said virtual PCI-to-PCI bridge logically resides, and wherein said control circuit is to further select, based on said bus and said device number, host bus cycles, targeted to configuration address space of said virtual PCI-to-PCI bridge, to route to said plurality of configuration registers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A system comprising: 
<claim-text>one or more processors coupled to a host bus; </claim-text>
<claim-text>a host-to-PCI bridge to route select processor initiated host bus cycles to a primary PCI bus; and </claim-text>
<claim-text>a host bus device, coupled to said host bus, to monitor said host bus, to identify processor initiated host bus cycles targeted to a first virtual PCI device which resides logically behind said primary PCI bus, and to intercept select said identified cycles targeted to said first virtual PCI device; </claim-text>
<claim-text>wherein said host-to-PCI bridge is to not forward said identified cycles which are targeted to said first virtual PCI device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said first host bus device includes a plurality of configuration registers, wherein said intercepted cycles, include host bus cycles targeted to configuration space reserved for said first virtual PCI device and are to be routed to access said plurality of configuration registers. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said first host bus device includes an array of memory devices, wherein said intercepted cycles include host bus cycles targeted to a memory space allocated to said virtual PCI device and are to be routed to access said array of memory devices. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprised of a second host bus device coupled to said host bus, wherein each said host bus device intercepts host bus cycles targeted to a distinct virtual PCI device which resides logically behind said primary PCI bus, wherein said distinct virtual PCI devices each have a distinct bus number and device number combination. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said virtual PCI device resides logically behind a primary virtual PCI-to PCI bridge, wherein said primary virtual PCI-to-PCI bridge resides logically behind said primary PCI bus, and wherein said host bus device is to snoop said host bus to determine a bus number assigned to said primary virtual PCI-to PCI bus. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said virtual PCI device resides logically behind a secondary virtual PCI-to PCI bridge which resides logically behind said primary virtual PCI-to-PCI bridge; and 
<claim-text>wherein said first host bus device includes a plurality of bridge configuration registers, wherein said intercepted cycles include host bus cycles targeted to the configuration space reserved for said secondary virtual PCI-to PCI bridge and are to be routed to access said plurality of bridge configuration registers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method comprising: 
<claim-text>capturing a current host bus cycle initiated by a processor; </claim-text>
<claim-text>determining whether said captured cycle is targeted to a virtual PCI device residing logically behind a primary PCI bus; and </claim-text>
<claim-text>intercepting said current host bus cycle, if said current cycle is determined to be targeted to said virtual PCI device, and not routing said cycle to said primary PCI bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said intercepting includes routing to access a storage coupled to said host bus. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said intercepting includes routing to access a location within a plurality of configuration registers. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said determining includes determining whether said current cycle is a write cycle targeted to a configuration-address register and snooping said current host bus cycle to receive data from said host bus if said current cycle is a write cycle targeted to said configuration-address register and writing some or all of said data into a mirror register. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The methods of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said determining includes determining whether said current cycle is a write cycle targeted to a location within the configuration registers of a virtual primary PCI-to-PCI bridge in which a bus number is specified; and 
<claim-text>snooping said current host bus cycle to receive data from said host bus if the current cycle is a write cycle to a location within the configuration registers of a virtual primary PCI-to-PCI bridge in which a bus number is specified and writing said data in a storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said determining includes determining whether said cycle is to a location within the configuration registers of a virtual PCI-to-PCI bridge; and 
<claim-text>intercepting said current host bus to route to access a location within a plurality of bridge configuration registers if said cycle is to a location within the configuration registers of a virtual PCI-to-PCI bridge. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said virtual PCI device is a virtual PCI-to-PCI bridge</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005207A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005207A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005207A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005207A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005207A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005207A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005207A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005207A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005207A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
