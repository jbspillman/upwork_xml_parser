<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005185A1-20030102-D00000.TIF SYSTEM "US20030005185A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00001.TIF SYSTEM "US20030005185A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00002.TIF SYSTEM "US20030005185A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00003.TIF SYSTEM "US20030005185A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00004.TIF SYSTEM "US20030005185A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00005.TIF SYSTEM "US20030005185A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00006.TIF SYSTEM "US20030005185A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00007.TIF SYSTEM "US20030005185A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00008.TIF SYSTEM "US20030005185A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005185A1-20030102-D00009.TIF SYSTEM "US20030005185A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005185</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896403</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>005000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for efficiently performing data transfer operations</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Praveen</given-name>
<middle-name>K.</middle-name>
<family-name>Kolli</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Harry</given-name>
<family-name>Chue</family-name>
</name>
<residence>
<residence-us>
<city>Alameda</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Mitsuaki</given-name>
<family-name>Shiraga</family-name>
</name>
<residence>
<residence-us>
<city>Saratoga</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Sony Corporation and Sony Electronics, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Gregory J. Koerner</name-1>
<name-2>SIMON &amp; KOERNER LLP</name-2>
<address>
<address-1>10052 Pasadena Avenue, Suite B</address-1>
<city>Cupertino</city>
<state>CA</state>
<postalcode>95014</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus and method for efficiently performing data transfer operations in an electronic system preferably includes a plurality of buffers that may store data and commands during execution of data transfer operations. Initially, at least a portion of a plurality of commands defining data transfer operations between a memory and peripheral devices may be temporarily stored in a command buffer associated with a processor interface. The processor interface may then issue commands directly to a memory interface, peripheral devices, and peripheral interfaces within the electronic system. Commands received by the memory interface may be temporarily stored in a command buffer associated with the memory interface. When a memory associated with the memory interface is ready, the memory interface may access the memory, and transfer data to or from one or more buffers associated with a peripheral device. Once the data is transferred to or from the buffers, then the memory interface may execute other commands stored in the command buffer. Execution of the first command does not have to be completed before the execution of a second command begins. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND SECTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates generally to techniques for managing data, and relates more particularly to a system and method for efficiently performing data transfer operations. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Background Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Implementing efficient methods for transferring data is a significant consideration for designers and manufacturers of contemporary electronic devices. However, efficiently transferring data with electronic devices may create substantial challenges for system designers. For example, enhanced demands for increased device functionality and performance may require more system processing power and require additional hardware resources. An increase in processing or hardware requirements may also result in a corresponding detrimental economic impact due to increased production costs and operational inefficiencies. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Furthermore, enhanced device capability to perform various advanced transfer operations may provide additional benefits to a system user, but may also place increased demands on the control and management of various device components. For example, an enhanced electronic device that transfers digital image data may benefit from an effective implementation because of the large amount and complexity of the digital data involved. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In certain contemporary environments, complex or lengthy data transfer operations may often consume substantial amounts of available system resources to the detriment of other system functionalities. For example, a system central processing unit may operate at a faster rate than other device components. This disparity in operating speeds may make it difficult for the other device components to perform one or more data transfer operations at a speed that compliments the central processing unit and does not slow down the overall operations of the central processing unit and electronic system. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Due to growing demands on system resources and substantially increasing data magnitudes, it is apparent that developing new techniques for transferring data is a matter of concern for related electronic technologies. Therefore, for all the foregoing reasons, developing efficient systems for transferring data remains a significant consideration for designers, manufacturers, and users of contemporary electronic devices. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In accordance with the present invention, an apparatus and method are disclosed for efficiently performing data transfer operations in an electronic system. In one embodiment, a central processing unit may preferably issue one or more commands to a central processing unit (CPU) interface. The CPU interface may temporarily store the one or more commands into a command buffer. The CPU interface may also temporarily store any data to be written to a device into a write buffer, and may store any data to be read from a device into a read buffer. The CPU interface may then issue each command from the command buffer to a peripheral or peripheral interface when the corresponding peripheral or peripheral interface is ready. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In another embodiment of the invention, one or more commands may be temporarily stored in a command buffer associated with a memory interface. The one or more commands may be received from the CPU interface, one or more peripheral interfaces, and one or more peripheral devices. When a command is executed, data corresponding to the command may be temporarily stored in one or more buffers associated with a receiving device. When the receiving device is ready, the data temporarily stored in the buffers may be transferred to the device. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In yet another embodiment of the present invention, a command count may be incremented in response to the issuance of a command. When each command is executed, the command count may be decremented. This provides the system with a command count of the number of outstanding commands that have yet to be executed. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The commands stored in the command buffers associated with the CPU interface and the memory interface may be executed in any appropriate order. The commands may be executed in a first-in-first-out order, or the commands may be prioritized and executed in a sequence that optimizes system operations. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In accordance with the present invention, the central processing unit may therefore advantageously issue multiple commands to the CPU interface regardless of the ready state of the devices involved in each command. When a peripheral or peripheral interface is receptive, a command may be issued to the peripheral or peripheral interface, and temporarily stored until the corresponding device is able to execute the command. Temporarily storing one or more commands in command buffers associated with a memory interface allows the memory interface to set up and execute multiple commands in a more expeditious manner. Additionally, temporarily storing data in buffers during data transfer operations allows the devices in the electronic system to transfer data in a continuous and uninterrupted flow, thereby allowing the electronic system to operate in a more efficient manner. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram for one embodiment of an electronic system, in accordance with the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram for one embodiment of the bridge device of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in accordance with the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram for one embodiment of the CPU interface of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with one embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of the DMA engines of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with one embodiment of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating a data transfer operation, in accordance with one embodiment of the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an exemplary timing diagram for one embodiment of a data transfer operation; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of method steps for performing a data transfer operation, in accordance with one embodiment of the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart of method steps for performing a data transfer operation, in accordance with one embodiment of the present invention; and </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart of method steps for performing a data transfer operation, in accordance with one embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The present invention relates to an improvement in data transfer techniques. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the generic principles herein may be applied to other embodiments. Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features described herein. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The present invention comprises an apparatus and method for efficiently performing data transfer operations in an electronic system, and preferably includes a plurality of buffers that may store data and commands. Initially, at least a portion of a plurality of commands defining data transfer operations between a memory, peripheral interfaces, and peripheral devices may be temporarily stored in a command buffer associated with a processor interface. The processor interface may then issue commands directly to a memory interface, peripheral devices and peripheral interfaces within the electronic system. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Commands received by the memory interface may be temporarily stored in a command buffer associated with the memory interface. When a memory associated with the memory interface is ready, the memory interface may access the memory and transfer data to at least one buffer associated with the receiving peripheral device. When the peripheral device is ready, the data stored in the buffers may be transferred to the peripheral. Alternatively, the memory interface may access at least one buffer associated with a peripheral or peripheral interface, and transfer data to the memory. Once the data is transferred to or from the buffer, then the memory interface may execute other commands that may be stored in the command buffer associated with the memory interface. Execution of the first command does not have to be completed before the execution of a second command begins. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> block diagram for one embodiment of an electronic system <highlight><bold>110</bold></highlight> is shown, in accordance with the present invention. In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, electronic system <highlight><bold>110</bold></highlight> may preferably include, but is not limited to, a central processing unit (CPU) <highlight><bold>114</bold></highlight>, a bridge device <highlight><bold>118</bold></highlight>, a memory <highlight><bold>122</bold></highlight>, a peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>), and a peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>). In alternate embodiments, electronic system <highlight><bold>110</bold></highlight> may readily include various other elements or functionalities in addition to, or instead of, those elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment. Furthermore, electronic system <highlight><bold>110</bold></highlight> may be implemented and configured in any desired manner. For example, electronic system <highlight><bold>110</bold></highlight> may be implemented as one or more integrated circuit devices, as a audio/visual electronic device, as a consumer electronics device, as a portable electronic device, or as a computer device. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, CPU <highlight><bold>114</bold></highlight> may preferably be implemented as any appropriate and effective processor device or microprocessor to thereby control and coordinate the operation of electronic system <highlight><bold>110</bold></highlight> in response to various software program instructions. Bridge device <highlight><bold>118</bold></highlight> may communicate with CPU <highlight><bold>114</bold></highlight> via path <highlight><bold>130</bold></highlight>, and may preferably include one or more interfaces for bidirectionally communicating with other devices or entities in electronic system <highlight><bold>110</bold></highlight>. One embodiment of bridge device <highlight><bold>118</bold></highlight> is further discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, memory <highlight><bold>122</bold></highlight> may bidirectionally communicate with bridge device <highlight><bold>118</bold></highlight> via path <highlight><bold>134</bold></highlight>. Memory <highlight><bold>122</bold></highlight> may be implemented by utilizing any desired technologies or configurations. For example, in certain embodiments, memory <highlight><bold>122</bold></highlight> may preferably be implemented as a memory device that is optimized for performing block transfers of various data. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In accordance with the present invention, bridge device <highlight><bold>118</bold></highlight> may also bidirectionally communicate with various peripheral devices in electronic system <highlight><bold>110</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, bridge device <highlight><bold>118</bold></highlight> may preferably communicate with a peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>) via path <highlight><bold>138</bold></highlight>, and may also preferably communicate with a peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>) via path <highlight><bold>142</bold></highlight>. In alternate embodiments, bridge device <highlight><bold>118</bold></highlight> may readily communicate with any desired number of peripheral devices in addition to, or instead of, those peripheral devices <highlight><bold>126</bold></highlight> that are presented and discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram for one embodiment of the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> bridge device <highlight><bold>118</bold></highlight> is shown, in accordance with the present invention. In the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment, bridge device <highlight><bold>118</bold></highlight> may preferably include, but is not limited to, a CPU interface <highlight><bold>210</bold></highlight>, a peripheral interface A <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>), a peripheral interface B <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>), a DMA engine A <highlight><bold>216</bold></highlight>(<highlight><italic>a</italic></highlight>), a DMA engine B <highlight><bold>216</bold></highlight>(<highlight><italic>b</italic></highlight>), and a memory interface <highlight><bold>220</bold></highlight>. In alternate embodiments, bridge device <highlight><bold>118</bold></highlight> may readily include various other elements or functionalities in addition to, or instead of, those elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment. In addition, bridge device <highlight><bold>118</bold></highlight> may be implemented in any appropriate manner. For example, in certain embodiments, bridge device <highlight><bold>118</bold></highlight> may be implemented as a separate integrated circuit device in electronic system <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment, CPU <highlight><bold>114</bold></highlight> may communicate with bridge device <highlight><bold>118</bold></highlight> through a CPU interface <highlight><bold>210</bold></highlight>. Similarly, memory <highlight><bold>122</bold></highlight> may communicate with bridge device <highlight><bold>118</bold></highlight> through a memory interface <highlight><bold>220</bold></highlight>. In addition, peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>) may communicate with bridge device <highlight><bold>118</bold></highlight> through a peripheral interface A <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>), and peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>) may communicate with bridge device <highlight><bold>118</bold></highlight> through a peripheral interface B <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>). Bridge device <highlight><bold>118</bold></highlight> may preferably also include a bridge bus <highlight><bold>226</bold></highlight> to enable various components and devices in electronic system <highlight><bold>110</bold></highlight> to effectively communicate through bridge device <highlight><bold>118</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment, peripheral interface A <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>) may preferably be associated with a DMA engine A <highlight><bold>216</bold></highlight>(<highlight><italic>a</italic></highlight>) for performing a direct memory access (DMA) data transfer operation between peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>) and memory <highlight><bold>122</bold></highlight>. Similarly, peripheral interface B <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>) may preferably be associated with a DMA engine B <highlight><bold>216</bold></highlight>(<highlight><italic>b</italic></highlight>) for performing a DMA data transfer operation between peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>) and memory <highlight><bold>122</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment, the two DMA engines <highlight><bold>216</bold></highlight> are shown as being integral with respective peripheral interfaces <highlight><bold>212</bold></highlight>. However, in alternate embodiments, the DMA engines <highlight><bold>216</bold></highlight> of bridge device <highlight><bold>118</bold></highlight> may be implemented in any suitable location or manner. The configuration of DMA engines <highlight><bold>216</bold></highlight> is further discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram for one embodiment of the CPU interface <highlight><bold>210</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is shown, in accordance with one embodiment of the present invention. In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, CPU interface <highlight><bold>210</bold></highlight> may preferably include, but is not limited to, a command buffer <highlight><bold>310</bold></highlight>, a write buffer <highlight><bold>314</bold></highlight>, and a read buffer <highlight><bold>318</bold></highlight>. In alternate embodiments, CPU interface <highlight><bold>210</bold></highlight> may readily include various other elements or functionalities in addition to, or instead of, those elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, CPU interface <highlight><bold>210</bold></highlight> may preferably include various types of appropriate information for performing one or more data transfer operations in electronic system <highlight><bold>110</bold></highlight>. In certain embodiments, CPU <highlight><bold>114</bold></highlight> may issue one or more commands that define a read operation or a write operation between CPU <highlight><bold>114</bold></highlight>, memory <highlight><bold>122</bold></highlight>, peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>), or peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>). The commands may preferably include an address, a size of the data to be transferred, and if the transfer operation includes a write command, the data to be written. The commands may be accepted by CPU interface <highlight><bold>210</bold></highlight> and then may preferably be directly issued to peripheral devices and peripheral interfaces by CPU interface <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The one or more commands issued by CPU <highlight><bold>114</bold></highlight> may preferably be stored in a command buffer <highlight><bold>310</bold></highlight>. The commands stored in command buffer <highlight><bold>514</bold></highlight> may preferably be executed in any appropriate order. For example, the commands may be executed in a first-in-first-out order, or the commands may be prioritized and executed in a sequence that optimizes system operations. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Data may preferably be temporarily stored in write buffer <highlight><bold>314</bold></highlight> before being written to memory <highlight><bold>122</bold></highlight>, peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>), peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>), or any other device in electronic system <highlight><bold>110</bold></highlight>. Data may also preferably be temporarily stored in read buffer <highlight><bold>318</bold></highlight> before being sent to CPU <highlight><bold>114</bold></highlight>. In certain embodiments, the size of command buffer <highlight><bold>310</bold></highlight>, write buffer <highlight><bold>314</bold></highlight>, and read buffer <highlight><bold>318</bold></highlight> may determine the number of commands and amount of data that may be stored in command buffer <highlight><bold>310</bold></highlight>, write buffer <highlight><bold>314</bold></highlight>, and read buffer <highlight><bold>318</bold></highlight>. Furthermore, command buffer <highlight><bold>310</bold></highlight>, write buffer <highlight><bold>314</bold></highlight>, and read buffer <highlight><bold>318</bold></highlight> may be implemented in any appropriate manner. For example, command buffer <highlight><bold>310</bold></highlight>, write buffer <highlight><bold>314</bold></highlight>, and read buffer <highlight><bold>318</bold></highlight> may be implemented as first-in-first-out (FIFO) buffers, and may be constructed with one or more flip-flops, FIFO memories, or other components that may be utilized to temporarily store information. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In accordance with the present invention, CPU interface <highlight><bold>210</bold></highlight> may therefore advantageously store more than one write command or read command in command buffer <highlight><bold>310</bold></highlight>. In addition, CPU interface <highlight><bold>210</bold></highlight> may store data associated with one or more write commands into write buffer <highlight><bold>314</bold></highlight>, and may store data associated with one or more read commands into read buffer <highlight><bold>318</bold></highlight>. When a device or device interface is receptive, a write command may be executed and the corresponding data stored in write buffer <highlight><bold>314</bold></highlight> may be transferred to the corresponding target device or device interface, via path <highlight><bold>322</bold></highlight>. Similarly, a read command may be executed and the corresponding data may be transferred and stored in read buffer <highlight><bold>318</bold></highlight> via path <highlight><bold>326</bold></highlight>. Electronic system <highlight><bold>110</bold></highlight> preferably does not have to wait for a first data transfer operation to finish before the execution of a second command begins. The devices in electronic system <highlight><bold>110</bold></highlight> are therefore able to transfer data in a continuous and uninterrupted flow, thereby permitting the electronic system <highlight><bold>110</bold></highlight> to operate in a more efficient manner. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> block diagram of the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> DMA engine <highlight><bold>216</bold></highlight> is shown, in accordance with one embodiment of the present invention. In the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment, DMA engine may be implemented as a transfer engine that preferably includes, but is not limited to, a state machine <highlight><bold>412</bold></highlight>, one or more control registers <highlight><bold>416</bold></highlight>, one or more command registers <highlight><bold>420</bold></highlight>, and one or more buffers <highlight><bold>424</bold></highlight>. In alternate embodiments, DMA engine <highlight><bold>216</bold></highlight> may readily include various other elements or functionalities in addition to, or instead of, those elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment, state machine <highlight><bold>412</bold></highlight> may include any appropriate and effective means for controlling the operation of DMA engine <highlight><bold>216</bold></highlight> to thereby perform various DMA data transfer operations. Control registers <highlight><bold>416</bold></highlight> may preferably include selected information that DMA engine may repeatedly require for performing various DMA data transfer operations. Command registers <highlight><bold>420</bold></highlight> may preferably include information from one or more command structures that may be copied into command registers <highlight><bold>420</bold></highlight> for local access by DMA engine <highlight><bold>216</bold></highlight> to perform corresponding DMA transfer operations. Buffers <highlight><bold>424</bold></highlight> may preferably store data during data transfer operations. The data may be transferred to a memory, memory interface, peripheral, or peripheral interface within electronic system <highlight><bold>110</bold></highlight>. The functionality and utilization of buffers <highlight><bold>424</bold></highlight> is further discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> block diagram illustrating a data transfer operation <highlight><bold>510</bold></highlight> is shown, in accordance with one embodiment of the present invention. In the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment, data transfer operation <highlight><bold>510</bold></highlight> may preferably utilize, but is not limited to, a CPU interface <highlight><bold>210</bold></highlight>, a peripheral A interface <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>) including a buffer <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>), a peripheral B interface <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>) including a buffer <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>), a memory interface <highlight><bold>220</bold></highlight> including a command buffer <highlight><bold>514</bold></highlight>, a memory <highlight><bold>122</bold></highlight>, a peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>), a peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>), and a peripheral C <highlight><bold>518</bold></highlight>. In alternate embodiments, data transfer operation <highlight><bold>510</bold></highlight> may readily function with various other elements or functionalities in addition to, or instead of, those elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment, initially, a CPU <highlight><bold>114</bold></highlight> (not shown) may preferably issue one or more read commands or write commands to CPU interface <highlight><bold>210</bold></highlight>. CPU interface <highlight><bold>210</bold></highlight> may temporarily store the commands and any associated data. When appropriate, CPU interface <highlight><bold>210</bold></highlight> may then subsequently issue the commands to memory interface <highlight><bold>220</bold></highlight>, peripheral A interface <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>), and peripheral B interface <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>) via path <highlight><bold>226</bold></highlight>. In certain embodiments, memory interface <highlight><bold>220</bold></highlight> may also receive commands from peripheral A interface <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>), peripheral B interface <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>), and peripheral C <highlight><bold>518</bold></highlight>. To better execute the received commands, memory interface <highlight><bold>220</bold></highlight> may temporarily store the commands in command buffer <highlight><bold>514</bold></highlight>. The commands stored in command buffer <highlight><bold>514</bold></highlight> may be executed in any appropriate order. The commands may be executed in a first-in-first-out order, or the commands may be prioritized and executed in a sequence that optimizes system operations. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When a command is to be executed, memory interface <highlight><bold>220</bold></highlight> may responsively access memory <highlight><bold>122</bold></highlight> via path <highlight><bold>134</bold></highlight>. For a command that defines a data transfer to peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>), memory interface <highlight><bold>220</bold></highlight> may transfer data to buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>) via path <highlight><bold>522</bold></highlight>, where the data may be temporarily stored. Memory interface <highlight><bold>220</bold></highlight> may then execute other commands that may be stored in command buffer <highlight><bold>514</bold></highlight>. In other words, execution of one command does not have to be completed before the execution of a subsequent command begins. For example, the next command stored in command buffer <highlight><bold>514</bold></highlight> may define a data transfer between memory <highlight><bold>122</bold></highlight> and peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>). When memory <highlight><bold>122</bold></highlight> is ready, memory interface <highlight><bold>220</bold></highlight> may access memory <highlight><bold>122</bold></highlight> and transfer data to buffer <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>). When peripheral A is ready, peripheral A interface <highlight><bold>212</bold></highlight>(<highlight><italic>a</italic></highlight>) may transfer the data stored in buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>) to peripheral A <highlight><bold>126</bold></highlight>(<highlight><italic>a</italic></highlight>) via path <highlight><bold>138</bold></highlight>. In addition, when peripheral B is ready, then peripheral B interface <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>) may transfer the data stored in buffers <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) to peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>) via path <highlight><bold>142</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Alternatively, if memory interface <highlight><bold>220</bold></highlight> is executing a command that requires data to be written into memory <highlight><bold>134</bold></highlight> from peripheral B <highlight><bold>126</bold></highlight>(<highlight><italic>b</italic></highlight>), peripheral interface <highlight><bold>212</bold></highlight>(<highlight><italic>b</italic></highlight>) may transfer the data into buffers <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) via path <highlight><bold>142</bold></highlight>. When memory <highlight><bold>122</bold></highlight> is ready to accept the data, memory interface <highlight><bold>220</bold></highlight> may access buffers <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) and transfer the data to memory <highlight><bold>122</bold></highlight> via path <highlight><bold>134</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Temporarily storing commands in command buffer <highlight><bold>514</bold></highlight> thus allows the memory interface <highlight><bold>220</bold></highlight> to set up and execute multiple commands in a more expeditious manner. Additionally, temporarily storing data in buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>), <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) allows the devices in electronic system <highlight><bold>110</bold></highlight> transfer data in a continuous and uninterrupted flow, thereby allowing electronic system <highlight><bold>110</bold></highlight> to operate in a more efficient manner. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In certain embodiments, the size of command buffer <highlight><bold>514</bold></highlight> may determine the number of commands that may be temporarily stored therein. The size of buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>) and <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) may determine the amount of data that may be temporarily stored in buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>) and <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>). Furthermore, command buffer <highlight><bold>514</bold></highlight> and buffers <highlight><bold>424</bold></highlight>(<highlight><italic>a</italic></highlight>) and <highlight><bold>424</bold></highlight>(<highlight><italic>b</italic></highlight>) may be implemented in any appropriate manner and in any location within electronic system <highlight><bold>110</bold></highlight>. For example, command buffers and buffers may be implemented as first-in-first-out (FIFO) buffers within bridge device <highlight><bold>118</bold></highlight>, and may be constructed with flip-flops, FIFO memories, or any other components that may be used to temporarily store information. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, an exemplary timing diagram for one embodiment of a data transfer operation is shown. In the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment, the timing diagram includes a system clock <highlight><bold>610</bold></highlight>, a processor command line <highlight><bold>614</bold></highlight> for CPU <highlight><bold>114</bold></highlight>, a transfer start pulse line <highlight><bold>622</bold></highlight>, a transfer end pulse line <highlight><bold>638</bold></highlight>, and a data transfer sequence <highlight><bold>646</bold></highlight>. In alternate embodiments, block data transfer operations may readily include various other timings, elements or functionalities in addition to, or instead of, those timings, elements or functionalities discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment, a data transfer timing cycle may begin at time <highlight><bold>612</bold></highlight> in response to a rising edge of system clock <highlight><bold>610</bold></highlight>. A first command <highlight><bold>618</bold></highlight> for a data transfer operation may then be provided by CPU <highlight><bold>114</bold></highlight> and temporarily stored in CPU interface <highlight><bold>210</bold></highlight>. A first transfer start pulse <highlight><bold>626</bold></highlight> may then be provided by a CPU interface <highlight><bold>210</bold></highlight> to a peripheral or peripheral interface. In response, a data transfer may begin at time <highlight><bold>628</bold></highlight>. When the first data transfer operation is complete and data <highlight><bold>650</bold></highlight>, <highlight><bold>654</bold></highlight>, <highlight><bold>658</bold></highlight>, <highlight><bold>662</bold></highlight> have been transferred, a transfer end pulse <highlight><bold>642</bold></highlight> may be generated at time <highlight><bold>644</bold></highlight> by the peripheral or peripheral interface in order to communicate the completion of the first command. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> During the first data transfer timing cycle (between time <highlight><bold>628</bold></highlight> and <highlight><bold>644</bold></highlight>), CPU <highlight><bold>114</bold></highlight> may issue a second command <highlight><bold>630</bold></highlight> that may be temporarily stored in command buffer <highlight><bold>310</bold></highlight>, and when appropriate, a second transfer start pulse <highlight><bold>634</bold></highlight> may be generated when a peripheral or peripheral interface is ready. The peripheral or peripheral interface may be the same device executing the first command, or the peripheral or peripheral interface may be another device in electronic system <highlight><bold>110</bold></highlight>. A second data transfer operation may then begin to transfer data <highlight><bold>666</bold></highlight>, <highlight><bold>670</bold></highlight>, <highlight><bold>674</bold></highlight>, <highlight><bold>678</bold></highlight>. In alternate embodiments, data transfer sequence <highlight><bold>646</bold></highlight> may readily include any number of combined data segments, and is not restricted in number to the four segments discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> From the foregoing discussion, it is apparent that, in certain embodiments, electronic systems may be designed to perform multiple data transfer operations that result in a continuous and uninterrupted transfer of data. By temporarily storing commands and data, CPU <highlight><bold>114</bold></highlight> or other electronic components may issue multiple commands and the data may be temporarily stored and transferred when expedient. The present invention therefore provides improved techniques for effectively transferring data without requiring the components within an electronic system to wait in order to issue and receive commands and/or data. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> flowchart of method steps for performing a data transfer operation is shown, in accordance with one embodiment of the present invention. The <cross-reference target="DRAWINGS">FIG. 7</cross-reference> embodiment is presented for purposes of illustration, and in alternate embodiments, the present invention may readily utilize various steps and sequences other than those discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> embodiment. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> embodiment, in step <highlight><bold>714</bold></highlight>, a CPU <highlight><bold>114</bold></highlight> may preferably issue a command to a CPU interface <highlight><bold>210</bold></highlight>. Then, in step <highlight><bold>718</bold></highlight>, CPU <highlight><bold>114</bold></highlight> may preferably determine whether the command has been accepted by the CPU interface <highlight><bold>210</bold></highlight>. If the command was not accepted, the CPU <highlight><bold>114</bold></highlight> may wait until the CPU interface <highlight><bold>210</bold></highlight> has accepted the command. If the command has been accepted, then the CPU interface <highlight><bold>210</bold></highlight> may preferably temporarily store the command as shown in step <highlight><bold>722</bold></highlight>. Next, in step <highlight><bold>726</bold></highlight>, the CPU interface <highlight><bold>210</bold></highlight> may issue the command to a peripheral or peripheral interface. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In response to the issuance of a command, a peripheral or peripheral interface may increment a command count in order to keep track of the number of outstanding commands that have been issued, as shown in step <highlight><bold>730</bold></highlight>. Next, in step <highlight><bold>734</bold></highlight>, a determination may be made as to whether or not there are any more commands to be issued by the CPU <highlight><bold>114</bold></highlight>. If there are more commands, then data may be transferred in step <highlight><bold>738</bold></highlight> to execute the foregoing command, and the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> method may preferably return to step <highlight><bold>714</bold></highlight>. The <cross-reference target="DRAWINGS">FIG. 7</cross-reference> process may then preferably repeat until a determination is made at step <highlight><bold>734</bold></highlight> that there are no more commands to be issued. When there are no more commands, the final data may be transferred in step <highlight><bold>742</bold></highlight>, and the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> process may preferably terminate. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart of method steps for performing a data transfer operation is shown, in accordance with one embodiment of the present invention. The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> embodiment is presented for purposes of illustration, and in alternate embodiments, the present invention may readily utilize various steps and sequences other than those discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> embodiment. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> embodiment, in step <highlight><bold>814</bold></highlight>, the execution of a command may be initiated by a peripheral or peripheral interface in electronic system <highlight><bold>110</bold></highlight>. Thereafter, a determination may be made at step <highlight><bold>818</bold></highlight> as to whether or not the execution of the command is complete. If the execution of a command is not completed, the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> method returns to step <highlight><bold>814</bold></highlight> and the command execution may continue. However, if at step <highlight><bold>818</bold></highlight>, the execution of a command is complete, the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> method preferably continues at step <highlight><bold>822</bold></highlight>, where a determination may be made as to whether or not a command count is equal to zero. If the command count is not equal to zero, then the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process may preferably continue in step <highlight><bold>830</bold></highlight> in which a peripheral or peripheral interface decrements the command count. The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process may then preferably return to step <highlight><bold>814</bold></highlight> in which another command may then be executed. The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process may preferably repeat until, at step <highlight><bold>822</bold></highlight>, a determination is made that the command count equals zero. The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process may then preferably terminate at step <highlight><bold>826</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> flowchart of method steps for performing a data transfer operation is shown, in accordance with one embodiment of the present invention. The <cross-reference target="DRAWINGS">FIG. 9</cross-reference> embodiment is presented for purposes of illustration, and in alternate embodiments, the present invention may readily utilize various steps and sequences other than those discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> embodiment. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> embodiment, in step <highlight><bold>914</bold></highlight>, a CPU interface <highlight><bold>210</bold></highlight>, peripheral interface <highlight><bold>212</bold></highlight>, or peripheral <highlight><bold>518</bold></highlight>, may preferably issue a command to a memory interface <highlight><bold>220</bold></highlight> in an electronic system <highlight><bold>110</bold></highlight>. A determination may then be made at step <highlight><bold>918</bold></highlight> as to whether or not the command has been accepted by the memory interface <highlight><bold>220</bold></highlight>. If the command has not been accepted, then the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> process may preferably wait until the command has been accepted by the memory interface <highlight><bold>220</bold></highlight>. If the command has been accepted, then the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> process may continue at step <highlight><bold>922</bold></highlight>, where the command may be temporarily stored in a command buffer. Next, in step <highlight><bold>926</bold></highlight>, the foregoing command may be executed and data corresponding to the command may be temporarily stored in buffers <highlight><bold>424</bold></highlight>. A determination may then be made at step <highlight><bold>930</bold></highlight> as to whether or not there are any more commands to be issued. If there are more commands to be issued, the data stored in buffers <highlight><bold>424</bold></highlight> may be transferred at step <highlight><bold>934</bold></highlight>, and the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> process may preferably return to step <highlight><bold>914</bold></highlight>. If, however, at step <highlight><bold>930</bold></highlight>, it is determined that there are no more commands to be issued, then the <cross-reference target="DRAWINGS">FIG. 9</cross-reference> process may continue at step <highlight><bold>938</bold></highlight> with the transfer of data stored in buffers <highlight><bold>424</bold></highlight>. The process of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may then preferably terminate. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The invention has been explained above with reference to certain embodiments. Other embodiments will be apparent to those skilled in the art in light of this disclosure. For example, the present invention may readily be implemented using configurations and techniques other than those described in the embodiments above. Additionally, the present invention may effectively be used in conjunction with systems other than those described above. Therefore, these and other variations upon the discussed embodiments are intended to be covered by the present invention, which is limited only by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An apparatus for facilitating bidirectional communications between a processor, at least one peripheral device, and at least one memory device in an electronic system, comprising: 
<claim-text>a processor interface for communicating with said processor, wherein said processor interface includes at least one processor command buffer and at least one processor data buffer; </claim-text>
<claim-text>at least one peripheral interface for communicating with said at least one peripheral device, wherein said at least one peripheral interface includes at least one peripheral data buffer; and </claim-text>
<claim-text>at least one memory interface for communicating with said at least one memory device, wherein said at least one memory interface includes at least one memory command buffer, </claim-text>
<claim-text>and wherein said processor interface, said at least one peripheral interface, and said at least one memory interface are electronically coupled to each other to facilitate the transfer of data between said processor, said at least one peripheral device, and said at least one memory device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said electronic system is implemented as one of an audio/visual electronic device, a consumer electronics device, a portable electronics device, and a computer device. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said processor interface temporarily stores one or more commands issued by said processor in said at least one processor command buffer. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said processor interface temporarily stores data in said at least one data buffer before said data is written to said at least one memory or said at least one peripheral in said electronic system. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said processor interface temporarily stores data in said at least one processor data buffer before said data is sent to said processor. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said at least one peripheral interface temporarily stores data in said at least one peripheral data buffer before said data is transferred to a peripheral device corresponding to said at least one peripheral interface. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said at least one peripheral interface temporarily stores data in said at least one peripheral data buffer before said data is transferred to said processor, another peripheral device in said electronic system, or to one of said at least one memory in said electronic system. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said at least one memory interface temporarily stores one or more commands in said at least one memory command buffer. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system for performing a plurality of data transfer operations between a plurality of devices, comprising: 
<claim-text>at least one command buffer for temporarily storing a plurality of commands that define said data transfer operations; </claim-text>
<claim-text>a plurality of data buffers for temporarily storing data that is to be read from, or written to, at least one of said plurality of devices, wherein said plurality of data buffers are associated with at least a portion of said plurality of devices in said system; and </claim-text>
<claim-text>at least one controller for controlling said plurality of data transfer operations, wherein storing said plurality of commands in said at least one command buffer and storing said data in said plurality of data buffers permits said at least one controller to begin a subsequent data transfer operation associated with a second command before an initial data transfer operation associated with a first command is completed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said at least one command buffer and said plurality of data buffers are implemented in a single integrated circuit device. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said system is implemented as one of an audio/visual electronic device, a consumer electronics device, a portable electronics device, and a computer device. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said plurality of devices are comprised of at least one memory and at least one peripheral device. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said at least one command buffer and said plurality of data buffers are implemented with at least one first-in-first-out memory. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said at least one command buffer and said plurality of data buffers are implemented with at least one flip-flop device. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method for transferring data between devices in an electronic system, comprising the steps of: 
<claim-text>issuing a plurality of commands defining data transfer operations between said devices; </claim-text>
<claim-text>temporarily storing at least a portion of said plurality of commands in at least one command buffer; </claim-text>
<claim-text>initiating execution of a first command from said plurality of commands stored in said command buffer; </claim-text>
<claim-text>temporarily storing data associated with said first command in at least one data buffer; and </claim-text>
<claim-text>initiating execution of a second command from said plurality of commands stored in said command buffer before execution of said first command is complete. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> further comprising the step of transferring data associated with said first command from said at least one data buffer to a device associated with said at least one data buffer when said device is ready to accept said data. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein said step of transferring data associated with said first command from said at least one data buffer to a device associated with said at least one data buffer when said device is ready to accept said data comprises the step of transferring data associated with said first command from said at least one data buffer to a peripheral device associated with said at least one data buffer when said peripheral device is ready to accept said data. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein said electronic system is implemented as one of an audio/visual electronic device, a consumer electronics device, a portable electronics device, and a computer device. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein said step of temporarily storing at least a portion of said plurality of commands in at least one command buffer comprises the step of temporarily storing at least a portion of said plurality of commands in at least one command buffer associated with a memory interface. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A system for transferring data between devices, comprising: 
<claim-text>means for issuing a plurality of commands defining data transfer operations between said devices; </claim-text>
<claim-text>means for temporarily storing at least a portion of said plurality of commands in at least one command buffer; </claim-text>
<claim-text>means for initiating execution of a first command from said plurality of commands stored in said command buffer; </claim-text>
<claim-text>means for temporarily storing data associated with said first command in at least one data buffer; and </claim-text>
<claim-text>means for initiating execution of a second command from said plurality of commands stored in said command buffer before execution of said first command is complete. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> further comprising means for transferring data associated with said first command from said at least one data buffer to a device associated with said at least one data buffer when said device is ready to accept said data. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said means for transferring data associated with said first command from said at least one data buffer to a device associated with said at least one data buffer when said device is ready to accept said data comprises means for transferring data associated with said first command from said at least one data buffer to a peripheral device associated with said at least one data buffer when said peripheral device is ready to accept said data. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein said system is implemented as one of an audio/visual electronic device, a consumer electronics device, a portable electronics device, and a computer device. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein said means for temporarily storing at least a portion of said plurality of commands in at least one command buffer comprises means for temporarily storing at least a portion of said plurality of commands in at least one command buffer associated with a memory interface.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005185A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005185A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005185A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005185A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005185A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005185A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005185A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005185A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005185A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005185A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
