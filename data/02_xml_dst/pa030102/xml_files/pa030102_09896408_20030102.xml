<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005119A1-20030102-D00000.TIF SYSTEM "US20030005119A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00001.TIF SYSTEM "US20030005119A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00002.TIF SYSTEM "US20030005119A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00003.TIF SYSTEM "US20030005119A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00004.TIF SYSTEM "US20030005119A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00005.TIF SYSTEM "US20030005119A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00006.TIF SYSTEM "US20030005119A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00007.TIF SYSTEM "US20030005119A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00008.TIF SYSTEM "US20030005119A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00009.TIF SYSTEM "US20030005119A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005119A1-20030102-D00010.TIF SYSTEM "US20030005119A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005119</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896408</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/173</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F017/30</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F007/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>225000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>707</class>
<subclass>010000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Automated creation of application data paths in storage area networks</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Christina</given-name>
<middle-name>Woody</middle-name>
<family-name>Mercier</family-name>
</name>
<residence>
<residence-us>
<city>Scotts Valley</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Noel</given-name>
<middle-name>Christopher</middle-name>
<family-name>Melville</family-name>
</name>
<residence>
<residence-us>
<city>Santa Cruz</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>Carver</middle-name>
<family-name>Rieseberg</family-name>
</name>
<residence>
<residence-us>
<city>Scotts Valley</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Nabin</given-name>
<family-name>Acharya</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Truls</given-name>
<middle-name>Solheim</middle-name>
<family-name>Myklebust</family-name>
</name>
<residence>
<residence-us>
<city>Los Gatos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>InterSAN, Inc., a Delaware Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Michael E. Woods</name-1>
<name-2>McCutchen, Doyle, Brown &amp; Enersen LLP</name-2>
<address>
<address-1>Suite 1800</address-1>
<address-2>Three Embarcadero Center</address-2>
<city>San Francisco</city>
<state>CA</state>
<postalcode>94111</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A DataPath Engine coupled to a SAN provides automated storage provisioning between an application on a Storage Area Network (SAN) attached server and a data volume on a SAN attached storage subsystem. The apparatus provides a simple user interface that allows operators to use pre-created policies for criteria to select data paths that meet organizations uptime and performance requirements. The apparatus uses pathing methodologies to select the optimal data path from the candidates by rating SAN state, uptime, performance, and other key factors. This apparatus allows an enterprise to more efficiently and effectively manage and monitor large, complex, distributed SANs. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates generally to the field of managing storage in a networked storage environment and, in particular, relates to the systems and methods for provisioning storage and paths, including devices in the path, to storage in storage networks. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Traditional computer storage architectures consist of dedicated storage devices connected to corresponding computer servers, an example of which is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the direct attachment of storage to corresponding servers does not support sharing of the storage infrastructure by multiple servers. Thus, this architecture has major limitations, such as, for example, capacity and performance constraints, difficulty of management, reduced availability, and susceptibility to disasters. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The Storage Area Network (commonly known as &ldquo;SAN&rdquo;) is a relatively new storage architecture that provides any-to-any connectivity between servers and storage at high (e.g., gigabit) speeds, allowing an enterprise to scale and manage its storage infrastructure independently of its server resources. For purposes of this invention, SAN is defined to include a storage network connecting a distributed and heterogeneous collection of compute servers, storage infrastructure, and special purpose, storage-service appliances. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a conventional SAN architecture <highlight><bold>200</bold></highlight> having computer servers <highlight><bold>202</bold></highlight>, a switching network <highlight><bold>204</bold></highlight> and a storage infrastructure <highlight><bold>206</bold></highlight>. Switching network <highlight><bold>204</bold></highlight> provides bi-directional coupling between servers <highlight><bold>202</bold></highlight> and storage infrastructure <highlight><bold>206</bold></highlight>. Thus, SAN architecture <highlight><bold>200</bold></highlight> provides &ldquo;any to any&rdquo; connectivity between any servers <highlight><bold>202</bold></highlight> and a device of storage infrastructure <highlight><bold>206</bold></highlight>, allowing heterogeneous collections of servers to share the same storage infrastructure. Information technology (IT) managers are implementing SAN technology to increase performance, consolidate and share storage resources, intermix best of class storage components, manage their storage in a centralized manner, and gain the availability features. In particular, the SAN architecture supports powerful new data management concepts in support of backup, replication, and availability. For example, such &ldquo;management&rdquo; typically includes some or all of discovery, monitoring, topology creation, naming, persistence, data volume creation, switch security, data volume security, and authentication. A data volume is a single logical unit exported by a storage subsystem to a computer server. It may consist of many physical discs, portions of discs, or a data tape, but looks like one contiguous space to a server. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Unfortunately, conventional SAN management tools are typically server-based and have little or no inherent knowledge of the SAN special-purpose hardware and services such as replication services, snapshot engines, and virtualizers or SAN appliances. Conventional tools do not relate SAN storage and switch devices to applications and lines of business, and they don&apos;t automate the many processes required to allocate storage to applications. As a result, the actions required to be taken by IT management to put SAN data management concepts into practice are very complex, and are becoming even more so as SAN infrastructures become more complex. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Today, most enterprises create data paths using a collection of device specific tools while referring to spreadsheets for SAN device information. Some enterprises have written scripts to address the complexity of storage provisioning in a SAN. These scripts have to modified whenever new equipment is added to the SAN and executed by hand. In many cases they have selected one security mechanism rather than using all of the mechanisms to reduce complexity. In some cases, corporate databases have been created to maintain the settings of all the devices in the SAN although many organizations still use paper documents to keep track of current settings. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The conventional server-based SAN management tools typically provide only device-specific task management capability. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an example of the steps a SAN administrator would have to execute in order to provide a SAN attached server storage access using current un-automated, device-based SAN management tools. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> At step <highlight><bold>251</bold></highlight>, the SAN administrator physically verifies that the server is connected to the disc storage. At step <highlight><bold>252</bold></highlight>, the SAN administrator finds a data volume of sufficient size. At step <highlight><bold>253</bold></highlight>, the SAN administrator sets mapping of the selected data volume. At step <highlight><bold>254</bold></highlight>, the SAN administrator selects one or more physical connections from the server to the storage subsystem with the data volume. At step <highlight><bold>255</bold></highlight>, the SAN administrator verifies that the physical connection is good. At step <highlight><bold>256</bold></highlight>, the SAN administrator configures the switch by setting security. Step <highlight><bold>255</bold></highlight> and <highlight><bold>256</bold></highlight> are repeated by the SAN administrator for every switch used. Finally, at step <highlight><bold>258</bold></highlight>, the SAN administrator configures the host bus adaptor (HBAs), within the servers. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Thus, as can be seen from the example of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the SAN administrator that administers a conventional SAN has a lot of storage infrastructure knowledge and uses many different tools in order to effectively manage the SAN. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention provides an efficient solution to the problem of implementation and management of a SAN. Preferred embodiments of the invention provide for both an apparatus and a method for automatic provisioning of storage to servers within a SAN. An operator, rather than a highly trained storage and switching expert, is able to perform automated provisioning which results in the creation of a data path between a server and data. A preferred embodiment of the present invention discovers and saves details of the SAN architecture, including, for example, server configurations, processes executable on specific servers and association of the processes with the server, devices and configurations of the switching network, and devices and configurations of the storage architecture. Devices, as used herein, are defined to include, for example, disc storage subsystems, tape storage subsystems, storage switches, storage routers, SAN appliances, and other storage devices such as solid state disc, etc. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Not only is static information determined, but dynamic information and state information as well. In the preferred embodiment, a DataPath Engine is provided which initiates, controls and monitors the discovering, saving, using, configuring, recommending and reporting associated with the preferred embodiment. The DataPath Engine calculates the optimal data path based upon the rules or policies specified and information learned about the SAN, including policies and rules defined in preconfigured templates for interaction with the DataPath Engine. As used herein, the term template is defined to include, for example, a list of defined rules and policies which define the storage characteristics and data path characteristics that must be used by the DataPath Engine for selection of a data path. The template is created in advance by an administrator using a graphical wizard, for example. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> A preferred embodiment of the present invention is directed towards a method of creating a data path for a process executing on a server coupled to a storage area network (SAN). The method includes parameterizing a set of attributes for a desired data path between the process and a device of the SAN; and constructing the data path that provides the set of attributes. For purposes of this application, the term attributes includes details about data volumes, security settings, performance settings, and other device and policy settings., and parameterizing is defined to include defaults selected by the system to help the administrator make better choices when creating a template which reflects data path policy and rules., with parameterizing attributes referring to an abstraction of the configuration, implementation and creation steps to identify the desired end product without necessarily specifying implementation details. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> An alternate preferred embodiment of the present invention provides for a method of configuring a SAN. The method includes discovering, by use of a DataPath Engine coupled to the SAN, processes that are operable on a server coupled to the SAN; discovering, by use of the Data Path Engine coupled to the SAN, devices that are included in the SAN; responding, by use of the DataPath Engine coupled to the SAN, to a data path construction request from a user by providing the user with an interface to accept a set of attributes for a desired data path for one of the discovered processes; and constructing, by use of the DataPath Engine coupled to the SAN, the data path that provides the set of attributes. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one aspect, the method of a preferred embodiment includes discovery of SAN device details; accepting policy and input regarding the type and size of data volume and path desired; and finding candidate data paths and volumes that meet the policy. The term policy and rules are important parts of the preferred embodiment of the present invention. Policy is defined to include actions which the DataPath Engine will take based upon events in the SAN and the term rules is defined to include characteristics of data volumes and data paths that the DataPath Engine must use to select candidate data paths for the application. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The data path may contain multiple channels or threads. A thread is a logical relationship representing a physical path between the server on which the application is resident and all of the devices, connections, ports and security settings in between. Further, for purposes of this application, threads are defined to include one or more of, depending upon the needs of the embodiment, application id, server id, HBA port id, HBA id, HBA security settings, switch port ids, switch security settings, storage subsystem port id, data volume id, data volume security settings, SAN appliance port id, SAN appliance settings. These relationships include, but are not limited to, the data volume; the storage subsystem the volume resides on; all ports and connections; switches; and SAN appliances and other hardware in the data path; the server with the Host Bus Adapter (HBA) where the application resides; and all applicable device settings. The data path selection is based upon policies such as, number of threads, number of separate storage switch fabrics that the threads must go through, level of security desired and actions to take based upon security problems detected, performance characteristics and cost characteristics desired. Data paths are created from SAN devices automatically discovered by the DataPath Engine (Applications, Servers, HBAs, Switches, Fabrics, Storage Subsystems, Routers, Data Volumes, Tape drives, Connections, Data Volume security, etc.). The data path can have multiple threads to the same data volume and span physical locations and multiple switched fabrics. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In another aspect, a preferred embodiment of the present invention is a method including an apparatus for selection and creation of the optimal data path among the candidate data paths. Pathing methodologies within the DataPath Engine use discovered information about the SAN such as device uptime information, performance information, cost information, and load. Device uptime information is defined to include, for example, the collection and persistence of data about when a device or connection or service is in service and available versus unavailable. Performance information is defined to include the collection and persistence of data about how each device is moving data from its location to the next and the resulting rate of data that the application is experiencing. Cost information is defined to include the correlation of cost information with actual devices used within a data path taking into consideration the percentage of the device used by the data path, when multiple data paths share the same devices. Cost in this case is a calculation of the infrastructure used. Many customers purchase expensive hardware in hopes of achieving high levels of availability. A calculation of the cost (switch ports used, HBA ports used, &num; gigabytes used) for each path may be provided for customers to analyze their cost for performance and availability achieved, as well as used as a &ldquo;rule&rdquo; when creating data paths. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Best practices information is also factored in as appropriate for the discovered devices, such as fan out ratios and switch fabric architecture which impacts performance once a new data path is added to the infrastructure. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Implementations of preferred embodiments of the invention provide for one or more of the following: </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> An operator with no storage or switch training uses a wizard on a graphical viewer to provision storage. Provisioning storage is defined to include creating a data path for a software application on a SAN attached server to a new or existing data volume. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Data path creation rules and policies are specified in a pre-created template. The template is expandable to include new rules as they are defined. A policy or template is created by a SAN administrator to meet the availability and performance needs of a software application on a SAN attached server. At storage provisioning time the proper template is automatically selected for the application. In some cases, predefined templates are provided and do not require creation by the SAN administrator. In some instances, for example, this is appropriate for standard implementations of common processes/applications. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Data path thread selection logic uses pathing methodologies that take into consideration the learned state and usage of the SAN. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Once the selected data path is approved by the operator, the DataPath Engine automatically configures SAN devices for data path creation across multiple devices, networks and locations. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Implementations of automated storage provisioning include but are not limited to, creation of data paths for an application, discovery of pre-existing data paths, reconfiguration of data paths, movement of data paths between asynchronous replications, and tuning of data paths based upon data collected about the SAN&apos;s performance and uptime. Advantages of the invention include the ability for a small number of operators to manage large, complex and distributed storage networks. They do not require detailed knowledge of storage networking devices or extensive training. Manual procedures and policies are automated for a huge time gain and reduction of personnel. Pathing methodologies calculate the best data paths rather than relying on experts or operator memory to select the optimal path during setup. Complex storage networking hardware and services can be added to storage networks and quickly incorporated into new or existing data paths. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Incorporating new devices into new or existing data paths is preferably done by adding new &ldquo;rules&rdquo; to the template. For example, a special purpose storage replication system is added to the SAN. A rule would be added to the DataPath Engine that allows a template to be created which selects a data path with the specified replication systems. New paths would be created using this template. Existing paths would be changed by data re-pathing. Re-pathing would allow an operator to select an alternate path to the existing volume or a replica of the volume (in another location) using a selected template. This capability, then, will support switching between replications as well as incorporating new devices into existing paths by changing to a new template (policy and rules). This also supports a change in performance characteristics and path optimization via a template with different settings than the original one used. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In an alternate preferred embodiment, the DataPath Engine stores the parameterization data or accesses a store of parameterization data used in the specification of existing data paths (including policies/templates/rules) used in guiding the generation of each existing data path. Periodically (automatically or operator initiated), the DataPath Engine reruns the pathing methodologies based upon the stored parameters to determine whether a new optimal data path exists. Depending upon specific embodiments, the data path may be changed automatically or the user may be requested to authorize the use of the new data path. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Automated storage provisioning is a powerful system for enterprises with extensive storage networks to reduce their personnel requirements and better utilize their storage infrastructure. As used herein, the term automatic means that all the underlying SAN infrastructure and settings are configured by the DataPath Engine without administrator intervention based solely on a request specifying an application, data volume size and template. The above description refers to the construction of a data path. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Further understanding of the nature and advantages of the invention may be realized by reference to the remaining portions of the Specification and Drawings. In the drawings, similarly numbered items represent the same or functionally equivalent structures.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The invention will be described with respect to particular embodiments thereof, and reference will be made to the drawings in which: </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates the &ldquo;direct attach&rdquo; storage architecture of the prior art; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates the Storage Area Network (SAN) architecture of today; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates the steps, which a SAN administrator must perform for the prior art of manually provisioning storage within the SAN architecture shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a preferred embodiment for a system that performs automated storage provisioning; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the steps the DataPath Engine and an operator to perform automated storage provisioning within the SAN architecture shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates rules or policies that can be specified by a SAN administrator which the DataPath Engine uses to select data volumes and data paths for an application; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a layout showing connections for <cross-reference target="DRAWINGS">FIG. 7A and 7B</cross-reference> which together illustrate a flowchart of a pathing methodology used by DataPath Engine to select the optimal data path through a complex SAN infrastructure; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an illustration of a graphical user interface <highlight><bold>800</bold></highlight> for, in the preferred embodiment, provisioning a data path; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an illustration of interface <highlight><bold>800</bold></highlight> after the operator has selected &lsquo;Next&rsquo; from interface <highlight><bold>800</bold></highlight> configuration illustrated in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is an illustration of interface <highlight><bold>800</bold></highlight> after the operator has selected &lsquo;Next&rsquo; from interface <highlight><bold>800</bold></highlight> configuration illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>; and </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is illustrates an alternate preferred embodiment for creation of a data path. In this case, a data path is desired to an existing data volume, already being used by another server.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an embodiment in accordance with the invention in which DataPath Engine <highlight><bold>302</bold></highlight> is provided as part of (or closely coupled to, depending upon a particular embodiment) the SAN infrastructure; switching network <highlight><bold>204</bold></highlight>, SAN attached servers <highlight><bold>202</bold></highlight>, and storage infrastructure <highlight><bold>206</bold></highlight>. DataPath Engine <highlight><bold>302</bold></highlight> operates in response to high-level SAN management commands entered by the operator via a Management Station <highlight><bold>304</bold></highlight> using a graphical user interface. The DataPath Engine is preferably operated as part of a general purpose computer server running any of several types of operating systems as well-known art; with one or more processing units; connected to the Wide Area Network (WAN) and switching network <highlight><bold>204</bold></highlight>; and having attached a persistent repository <highlight><bold>306</bold></highlight>. The DataPath Engine executes best with world-wide connectivity to SAN infrastructure via WAN and fibre channel connections and can be clustered with multiple computer servers for high availability and work load balancing. The management station is preferably operated as part of a specially programmed general purpose computer, such as a PC, workstation, mini-computer or other computing platform running any of several types of operating systems as well-known in the art. As well known, these platforms include one or more processing units for executing instructions obtained from memory (volatile or nonvolatile) and typically under control from signals provided through an I/O system. A display adapter typically maps memory contents of page frames for display on a monitor. Instructions and data for the executing instructions (program) and other data may be in the memory systems, which also includes removable media such as a portable magnetic media (e.g., floppy disk). The processing unit is able to communicate with other processing systems (e.g. the servers in the server architecture, devices in the switching/routing architecture, or devices in the storage architecture, typically by employing conventional networking protocols such as TCP/IP for example. These systems are well known to persons of ordinary skill in the art and will not be further explained herein. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> DataPath Engine <highlight><bold>302</bold></highlight> is coupled to switch network <highlight><bold>204</bold></highlight> and WAN <highlight><bold>208</bold></highlight> and obtains knowledge of the identity and behavior of the specific devices in storage infrastructure <highlight><bold>206</bold></highlight> and applications on the SAN attached servers <highlight><bold>202</bold></highlight>. This information is embedded, incorporated or otherwise associated within DataPath Engine <highlight><bold>302</bold></highlight>, saved to a persistent repository, and obtained either by automated discovery or through manual configuration. Automated discovery includes polling and broadcasting across the WAN and switch network for devices to initially find devices; to find new devices added to the SAN infrastructure, and to continually collect status on the devices. The configuration and use of DataPath Engine <highlight><bold>302</bold></highlight> allows device management specifics to be hidden from the operator as it handles all the details of individual device management. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates procedures for automated storage provisioning by an operator using DataPath Engine <highlight><bold>302</bold></highlight>. (This is in contrast to the discussion above concerning <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, which illustrates path allocation using conventional SAN management.) At step <highlight><bold>351</bold></highlight>, DataPath Engine <highlight><bold>302</bold></highlight> automatically discovers SAN device configuration and status. At step <highlight><bold>352</bold></highlight>, the operator selects a create data path command from a graphical interface along with policy. The embodiment of the command type is &ldquo;Create a Virtual Private DataPath&rdquo;. A &ldquo;Virtual Private DataPath (VPD)&rdquo; is the term representing a data path coupled with a data volume meeting the template rules, and monitored constantly in order to implement policies specified. At step <highlight><bold>353</bold></highlight>, DataPath Engine <highlight><bold>302</bold></highlight> selects the best candidate data volumes that meets the policy criteria. At step <highlight><bold>354</bold></highlight> the optimal candidate data paths are displayed for operator selection and the data path is set up based upon the operator&apos;s action. A data path represents the number of threads created between the application server and the data volume. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In this preferred embodiment, the pathing methodologies prioritize certain selection requirements over other possible candidates. In other embodiments, different selection requirements may produce different optimal paths. Optimal refers to a best fit of available resources to parameterized attributes based upon applicable prioritization conditions. In other embodiments and under different conditions, the recommended or optimal data path could be different, so best is used is a relative sense as opposed to an absolute sense. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Thus, it can be seen that an operator using the system illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> can manage the SAN without having detailed knowledge of the SAN devices and quickly provision storage with a two-step command. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates rules that can be implemented as policy for data path selection. The policy includes, but is not limited to: Storage Type, <highlight><bold>451</bold></highlight>, Number of Threads or Channels, <highlight><bold>452</bold></highlight>, Number of Fabrics, <highlight><bold>453</bold></highlight>, Bandwidth, <highlight><bold>454</bold></highlight>, Data Volume Security, <highlight><bold>455</bold></highlight>, Data Volume Action, <highlight><bold>456</bold></highlight>, Fabric Security, <highlight><bold>457</bold></highlight>, Fabric Action, <highlight><bold>458</bold></highlight>, HBA Security, <highlight><bold>459</bold></highlight>, HBA Action, <highlight><bold>460</bold></highlight>, Data Volume Size, <highlight><bold>461</bold></highlight>, DataVolume Pooling, <highlight><bold>462</bold></highlight>, Data Volume Characteristics, <highlight><bold>463</bold></highlight>, and Data Path Status, <highlight><bold>464</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a pathing methodology process <highlight><bold>550</bold></highlight> setting forth a preferred embodiment of how DataPath Engine <highlight><bold>302</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> selects an optimal path. Process <highlight><bold>550</bold></highlight> first reads a data path policy <highlight><bold>551</bold></highlight>, obtains a current SAN state <highlight><bold>552</bold></highlight>, gets an application name and volume size desired from an operator <highlight><bold>553</bold></highlight>, and initiates a search for data paths from each of the server&apos;s HBA ports <highlight><bold>554</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The data path search <highlight><bold>554</bold></highlight> loops through each server HBA port <highlight><bold>555</bold></highlight>, using the following steps: checks whether a port is used by any other data path <highlight><bold>566</bold></highlight>; when already used, then gives the port a weighting <highlight><bold>557</bold></highlight>, <highlight><bold>558</bold></highlight>; when not used, checks to see whether used by another thread of this data path <highlight><bold>559</bold></highlight>; and when not then gives the port the best ranking <highlight><bold>560</bold></highlight>; and adds the port to candidate list <highlight><bold>561</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Once all candidate ports have been identified, DataPath Engine <highlight><bold>302</bold></highlight> determines whether the number of HBA ports is equal to or greater than the number of threads specified in the policy <highlight><bold>562</bold></highlight>, and when not, it fails (Step <highlight><bold>563</bold></highlight>). Otherwise it searches for storage subsystems that match the policy requirements <highlight><bold>564</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The data volume search loops through each storage subsystem <highlight><bold>565</bold></highlight>, and determines whether there are suitable data volumes <highlight><bold>566</bold></highlight>. The DataPath Engine <highlight><bold>302</bold></highlight> loops through each data volume <highlight><bold>567</bold></highlight>, and when the size is acceptable <highlight><bold>568</bold></highlight>, and the data volume is accessible <highlight><bold>569</bold></highlight>, it gives the data volume a ranking <highlight><bold>571</bold></highlight>. When no data volumes are found <highlight><bold>572</bold></highlight>, then it fails <highlight><bold>573</bold></highlight>. All data volumes inaccessible from the server HBA are then discarded <highlight><bold>574</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Next DataPath Engine <highlight><bold>302</bold></highlight> ranks each switch fabric <highlight><bold>575</bold></highlight>, and computes the shortest data path <highlight><bold>576</bold></highlight>. For each HBA port on the server <highlight><bold>577</bold></highlight>, it finds the shortest route through the fabric to the data volume <highlight><bold>578</bold></highlight>, and ranks the data path <highlight><bold>579</bold></highlight>. Finally, DataPath Engine <highlight><bold>302</bold></highlight> calculates and sorts data paths by their ranking <highlight><bold>580</bold></highlight>, <highlight><bold>581</bold></highlight>, <highlight><bold>582</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an illustration of a graphical user interface <highlight><bold>800</bold></highlight> for, in the preferred embodiment, parameterizing a set of attributes for a desired data path. Interface <highlight><bold>800</bold></highlight> is coupled to DataPath Engine <highlight><bold>302</bold></highlight> and may be part of management station <highlight><bold>304</bold></highlight>. The preferred embodiment uses a simple set of data entry screens <highlight><bold>800</bold></highlight> and those shown in FIGS. <highlight><bold>9</bold></highlight>-<highlight><bold>11</bold></highlight>, to guide an operator in the definition and creation of an optimal data path (the path from the application on the server to the data volume on a storage subsystem). Interface <highlight><bold>800</bold></highlight> includes data based upon the context from which the operator requested to create the optimal data path. For example, when the operator has the owner view for &ldquo;Trading Floor&rdquo; currently opened, the owner information of interface <highlight><bold>800</bold></highlight> contains &ldquo;Trading Floor.&rdquo; The operator is able to override any field. In some cases, interface <highlight><bold>800</bold></highlight> is prepopulated (or preloaded) with policy information or template information. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> through <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrate a data path creation scenario for a preferred embodiment. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> describes an interface <highlight><bold>800</bold></highlight> that is populated with information to serve as an example. Interface <highlight><bold>800</bold></highlight> includes a data path template &ldquo;GoldService&rdquo; identifying and specifying rules about data path creation that hides the complexity and details of the storage and switching network architectures from the operator. The template includes information such as the number of threads, the security levels, default data volume size, etc. The provisioning can be done on behalf of an application executing on one server or a cluster of servers. In this example the operator is creating a data path from the application, Oracle, which is executing on a cluster consisting of three servers (DBserver<highlight><bold>1</bold></highlight>, DBserver<highlight><bold>2</bold></highlight>, DBserver<highlight><bold>3</bold></highlight>). The size requested is 72GB. The owner of the data path is the Trading Floor. Included in interface <highlight><bold>800</bold></highlight> is the concept of data path owner, which for purposes of this application, is defined to include a name of a customer or line of business within an enterprise and information about that organization such as a contact person, their email address for automatic notification, their address, applications which are associated with the owner and default templates that are associated with the owner. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an illustration of interface <highlight><bold>800</bold></highlight> after the operator has selected &lsquo;Next&rsquo; from interface <highlight><bold>800</bold></highlight> configuration illustrated in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, if &ldquo;automatically select best VPD&rdquo; is not checked. After the operator selects Next, the DataPath Engine <highlight><bold>302</bold></highlight> searches the SAN and switching infrastructure for candidate data volumes and the best data paths from each server to candidate data volumes. The best data path candidates will be selected using the pathing methodologies specified in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates that interface <highlight><bold>800</bold></highlight> now displays a set of data path candidate sets, including best data path candidate (determined as the candidate data path matching the rules and policies most closely) to each server, and alternates. The operator selects an alternate set or continues to the Next screen which automatically selects the default best candidate data paths. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> an illustration of interface <highlight><bold>800</bold></highlight> after the operator has selected &lsquo;Next&rsquo; from interface <highlight><bold>800</bold></highlight> configuration illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. Once the operator selects Next from the previous interface <highlight><bold>800</bold></highlight> configuration, interface <highlight><bold>800</bold></highlight> provides the operator with an opportunity to name the data path and to provide a description. After the DataPath Engine <highlight><bold>302</bold></highlight> creates the identified data path, the DataPath Engine <highlight><bold>302</bold></highlight> notifies the operator. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates an alternate preferred embodiment for creation of a data path. In this case, a data path is desired to an existing data volume, already being used by another server. This is a common case with clusters of servers that must all access the same data for a shared application. In this case interface <highlight><bold>800</bold></highlight> is configured as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> and is used in place of interface <highlight><bold>800</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. Other than the data volume preexist, the subsequent steps in the data path creation process do not have to be changed. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> It should be noted that the embodiments described here may be implemented in hardware, software, firmware or some combination thereof. While particular embodiments have been described, the scope of the invention is not to be limited to any particular embodiment. Rather, the scope of the invention is to be determined from the claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of creating a data path for a process executing on a server coupled to a storage area network (SAN), comprising: 
<claim-text>parameterizing a set of attributes for a desired data path between the process and a device of the SAN; and </claim-text>
<claim-text>constructing the data path that provides said set of attributes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said set of attributes includes a predefined template. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said set of attributes includes a data path owner, application, and the server or servers on which the application is executing. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said pre-defined template specifies a set of performance, availability, and cost metrics for the desired data path. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein said set of performance and availability metrics includes at least one of a number of threads, a security level, and a default volume size and characteristics, default path characteristics. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said parameterizing step includes a step of entering a user-defined attribute for inclusion in said set of attributes. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein said entering step includes entry of said user-defined attribute by use of a graphical user interface coupled to the SAN. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said constructing step further comprises: 
<claim-text>searching the SAN for a set of candidate devices; </claim-text>
<claim-text>constructing a candidate data path from the server to each candidate device of said set of candidate devices; </claim-text>
<claim-text>evaluating each said candidate data path against a selection metric to rank said candidate data paths from a best candidate data path to a least best candidate data path according to said selection metric; and </claim-text>
<claim-text>selecting said best candidate data path as the data path to be constructed by said constructing step. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said constructing step further comprises: 
<claim-text>searching the SAN for a set of candidate devices; </claim-text>
<claim-text>constructing a candidate data path from the server to each candidate device of said set of candidate devices; </claim-text>
<claim-text>evaluating each said candidate data path against a selection metric to rank said candidate data paths from a best candidate data path to a least best candidate data path according to said selection metric; </claim-text>
<claim-text>presenting said ranked candidate data paths to a user for selection; and </claim-text>
<claim-text>selecting a user-selected candidate data path as the data path to be constructed by said constructing step. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said presenting step recommends said best candidate data path for selection by said user. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said best candidate data path is presented as a default selection at said selecting step. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said selection metric includes device uptime information. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said selection metric includes performance information. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said selection metric includes cost calculation. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said selection metric includes best SAN practices information. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said selection metric includes learned state and usage information of the SAN. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said searching step prequalifies a subset of candidate data paths by finding those candidates that satisfy a pre-created policy prior to application of said evaluating step. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said constructed data path includes all physical, logical and security component identification and configuration information sufficient to operably link the process to an identified data volume of the SAN. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method of configuring a SAN, comprising: 
<claim-text>discovering, by use of a data path engine coupled to the SAN, processes that are operable on a server coupled to the SAN; </claim-text>
<claim-text>discovering, by use of said data path engine coupled to the SAN, devices that are included in the SAN; </claim-text>
<claim-text>responding, by use of said data path engine coupled to the SAN, to a data path construction request from a user by providing said user with an interface to accept a set of attributes for a desired data path for one of said discovered processes; and </claim-text>
<claim-text>constructing, by use of the DataPath Engine coupled to the SAN, the data path that provides said set of attributes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. Apparatus for creating a data path for a process executing on a server coupled to a storage area network (SAN), comprising: 
<claim-text>means for parameterizing a set of attributes for a desired data path between the process and a device of the SAN; and </claim-text>
<claim-text>means, coupled to said parameterizing means, for constructing the data path that provides said set of attributes.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005119A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005119A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005119A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005119A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005119A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005119A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005119A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005119A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005119A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005119A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005119A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
