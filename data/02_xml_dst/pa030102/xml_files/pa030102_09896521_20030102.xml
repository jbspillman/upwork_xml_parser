<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005054A1-20030102-D00000.TIF SYSTEM "US20030005054A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005054A1-20030102-D00001.TIF SYSTEM "US20030005054A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005054A1-20030102-D00002.TIF SYSTEM "US20030005054A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005054A1-20030102-D00003.TIF SYSTEM "US20030005054A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005054A1-20030102-D00004.TIF SYSTEM "US20030005054A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005054A1-20030102-D00005.TIF SYSTEM "US20030005054A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005054</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896521</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>204000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Distributed multipoint conferencing</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Hani</given-name>
<family-name>El-Gebaly</family-name>
</name>
<residence>
<residence-us>
<city>Beaverton</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Stephen</given-name>
<family-name>Ing</family-name>
</name>
<residence>
<residence-us>
<city>Beaverton</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FISH &amp; RICHARDSON, PC</name-1>
<name-2></name-2>
<address>
<address-1>4350 LA JOLLA VILLAGE DRIVE</address-1>
<address-2>SUITE 500</address-2>
<city>SAN DIEGO</city>
<state>CA</state>
<postalcode>92122</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Facilitating a distributed multipoint conference using, for example, the ITU-T H.323 protocol may involve establishing a connection (e.g., that supports a unicast stream) between multiple endpoints, including at least a requesting endpoint and one or more other participating endpoints, and initiating a connection from the requesting endpoint to at least a third endpoint. The requesting endpoint identifies to the third endpoint the one or more other participating endpoints. A connection is established between the third endpoint and the one or more other participating endpoints identified by the requesting endpoint. The third endpoint identifies the requesting endpoint to the one or more other participating endpoints. At each of the endpoints, unicast streams received from each of the other participating endpoints may be mixed to form a logical multipoint conference. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application relates to systems and techniques for distributed multipoint conferencing, for example, such as used in Internet-based voice- or video communications. Communicating voice and/or video data over a packet-switched computer network using Internet Protocol (IP) is referred to as &ldquo;IP telephony.&rdquo; IP telephony enables participants (e.g., human users) to conduct teleconferences or video-conferences over the Internet without having to use the Public Switched Telephone Network (PSTN). </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Telecom Standard H.323 of the International Telecommunication Union (ITU-T) serves as an umbrella for a set of standards for IP telephony, or more generally, for real-time multimedia communications over packet-switched networks. The standards under the H.323 umbrella define a set of call control, channel setup and coder-decoder (codec) specifications for transmitting real-time voice and video over networks that do not offer guaranteed service or quality of service&mdash;such as packet networks, and in particular Internet, Local Area Networks (LANs), Wide Area Networks (WANs), and Intranets. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">DRAWING DESCRIPTIONS </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1A and 1B</cross-reference> are block diagrams of centralized H.323 conference and a distributed H.323 conference respectively. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart of a signaling process for setting up a multipoint conference. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> show an example of a modified H.323 setup message. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a railroad diagram showing an example of a sequence of operations during setup of a multipoint conference involving four endpoints&mdash;A, B, C and D.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> An IP telephone call basically has two components&mdash;a signaling connection and a media (e.g., voice or video) stream. For H.323 calls, the signaling connection can be established using ITU-T standards H.245 and Q.931&mdash;parts of the H.323 umbrella that specify the in-band signaling protocol necessary to establish a call, determine capabilities of the participating terminals, and issue the commands to open and close the logical media channels. Once the signaling connection has been established, the participating endpoints can exchange data streams with each other using either a unicast (point-to-point, or one-to-one) stream or a multicast (one-to-many) stream. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> A multipoint IP telephony conference involves three or more participating endpoints (e.g., terminals or workstations). In general, H.323 supports two different types of multipoint conferencing: centralized conferencing and decentralized conferencing. As shown in <cross-reference target="DRAWINGS">FIG. 1A, H</cross-reference>.323 centralized multipoint conferencing involves three or more endpoints&mdash;H.323 terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight>&mdash;that exchange voice or video data with each other through a central node&mdash;namely, the Multipoint Control Unit (MCU) <highlight><bold>104</bold></highlight>, which in turn includes a Multipoint Controller (MC) <highlight><bold>105</bold></highlight> and a Multipoint Processor (MP) <highlight><bold>106</bold></highlight>. The MP <highlight><bold>106</bold></highlight> receives a unicast stream (e.g., voice and/or video data) from each of the terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight>, mixes the streams, and redistributes the mixed stream to each of the endpoints so that each endpoint can hear or see the respective media stream from each of the other endpoints participating in the conference. However, before the unicast streams can be transmitted and then mixed by the MPU <highlight><bold>106</bold></highlight>, the MC <highlight><bold>105</bold></highlight> first uses signaling channels to set up respective connections with each of the terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight> and to establish media channels for their unicast streams. Signaling between the MC <highlight><bold>105</bold></highlight> and the terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight> is based on ITU-T H.245. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1B, H</cross-reference>.323 decentralized multipoint conferencing differs from H.323 centralized multipoint conferencing primarily in that, rather than using MP <highlight><bold>106</bold></highlight> to collect, mix and redistribute all of the media streams, the media stream from each of the terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight> is sent directly to each of the other participating terminals using a multicast protocol. For example, terminal <highlight><bold>101</bold></highlight> multicasts its media stream to each of terminals <highlight><bold>102</bold></highlight> and <highlight><bold>103</bold></highlight>, terminal <highlight><bold>102</bold></highlight> multicasts its media stream to each of terminal <highlight><bold>101</bold></highlight> and <highlight><bold>103</bold></highlight>, and so on. Each participating terminal is responsible for mixing the received media streams into a single conference. As shown in <cross-reference target="DRAWINGS">FIG. 1B, H</cross-reference>.323 decentralized multipoint conferencing uses an MC <highlight><bold>108</bold></highlight> to serve as a central signaling controller. Although shown as a separate component in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>B, the MC <highlight><bold>108</bold></highlight> alternatively could be within one of the terminals <highlight><bold>101</bold></highlight>-<highlight><bold>103</bold></highlight>. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart of an example of a signaling process for setting up a distributed multipoint conference among three or more endpoints without requiring centralized control either for signaling or for mixing media streams. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the process starts with a first endpoint (e.g., an H.323 terminal) sending a call setup invitation to a second endpoint (e.g., another H.323 terminal connected via a WAN or LAN) to initiate a connection between the two endpoints (<highlight><bold>202</bold></highlight>). The first endpoint may send the invitation in response to a human user&apos;s actions at the first endpoint, for example, entering into a user interface of an IP telephony client (a end-user, clientserver-based software application such as Intel Internet Phone that emulates telephone functionality) a number or other input identifying the second endpoint as a call destination. In response to the invitation, the second endpoint connects to the first endpoint to establish a connection to facilitate unicast streaming between them (<highlight><bold>204</bold></highlight>). The second endpoint may connect with the first endpoint in response to a human user&apos;s actions at the second endpoint, for example, indicating in an IP telephony client acceptance of the incoming call from the first endpoint. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Next, if, for example, a human user at either the first or second endpoint decides to patch in another conference participant (e.g., a third endpoint), that user can perform appropriate actions on an IP telephony client, for example, to enter the third endpoint&apos;s number. In response, the requesting endpoint (i.e., either the first or second endpoint depending on which is initiating the patching in of the third participant) sends a request to a third endpoint to initiate a connection between the requesting endpoint and the third endpoint and further transmits information that identifies the other conference participants (<highlight><bold>206</bold></highlight>). For example, assuming that the second endpoint is the requesting endpoint, the second endpoint transmits to the third endpoint a request to setup a connection and information indicating that the first endpoint also is a conference participant. In response, the third endpoint connects to the requesting endpoint to establish a connection between them (<highlight><bold>208</bold></highlight>). </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Continuing the assumption that the second endpoint initiated-the connection request to the third endpoint, at this stage in the process, two connections have been established among the three endpoints: one connection between the first and second endpoints and another connection between the second and third endpoints. To complete the conference, a connection needs to be established between the third and first endpoints and the three connections need to be logically associated with each other so that each participating endpoint will know to mix the respective streams to form a single three-way conference. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Accordingly, based on the identities of the other participating endpoints provided by the requesting endpoint, the third endpoint sends an invitation to each of the other participating endpoints to establish a connection and further transmits the identity of the requesting endpoint (<highlight><bold>210</bold></highlight>). In the above example, the third endpoint would send an invitation to the first endpoint and would further transmit information identifying the second endpoint as the requesting endpoint. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Finally, each of the conference participants to whom the third endpoint sent an invitation in <highlight><bold>210</bold></highlight> (in the above example, only a single&mdash;namely, the first&mdash;endpoint) independently responds with signaling information that establishes a connection with the third endpoint (<highlight><bold>212</bold></highlight>). At this stage in the process, each of the participating endpoints (first, second and third) has a connection established with each of the other endpoints in the conference. Moreover, each of the participating endpoints knows the identities of the other participating endpoints and thus knows which unicast streams are to be mixed and treated logically as a single conference. For example, the second endpoint knows that all data received over the connections from the first and third endpoints is to be mixed and provided to the user of the IP telephony client at the second endpoint as a unitary stream. Similarly, the second endpoint further knows that all input received from the user of the IP telephony client at the second endpoint is to be sent in multi-unicast fashion over both of the connections to the first and third endpoints, each of which will then perform mixing locally. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In the case of voice-conferencing, mixing typically involves combining two potentially interfering audio streams and presenting the combined stream to the user. In the case of video-conferencing, however, the video portions of the respective media streams likely would not be overlaid to form a composite video but rather would be presented to the user at the second endpoint in separate display regions. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Virtually any number of additional participants can be added to the conference by repeating <highlight><bold>206</bold></highlight>-<highlight><bold>212</bold></highlight>. Stated more generally, this technique can be repeated as desired to support N-way conferencing among N endpoints, where N is an integer greater than two. Any currently participating endpoint can serve as the initiating, or requesting, endpoint to add another participant. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The signaling process of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may provide several advantages. For example, it may facilitate distributed multipoint conferences between terminals without requiring any centralized control either for signaling or for mixing or otherwise processing media streams. In particular, distributed multipoint conferences may be conducted without the need for an MCU, MC or MP, which consequently simplifies network design and A maintenance. The absence of the MCU, MC and MP further may tend to reduce communication latency because communicating directly among the conference participants, rather than through a central entity, may minimize the number of network &ldquo;hops&rdquo; required to collect, mix and redistribute the media streams. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Further, the process of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may facilitate multipoint conferencing without any additional infrastructure requirements and, in particular, potentially while avoiding the use of multicast streaming, which is not universally supported. Rather, the endpoints participating in the conference may communicate with each other through a set of connections that are logically related to collectively form the conference. This configuration&mdash;referred to here as &ldquo;multi-unicast&rdquo;&mdash;is universally supported and is more easily implemented than multicast protocols. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The flowchart of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an example of a conference set-up process. Other processes that include different or additional procedures may be used instead while still providing one or more of the advantages discussed here. Generally, the procedures depicted are order-independent and, depending on context, may be performed serially or substantially in parallel. Moreover, the distributed multipoint conference set-up process may be implemented using the H.323, Q.931 and/or H.245 protocols, or different or additional protocols, depending on the objectives and parameters of the system&apos;s designers, administrators, and/or users. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> together show an example of an H.323 setup message format that enables three or more H.323 terminals to establish a distributed multi-unicast multipoint conference without the use of a MCU, MC or MP. <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> shows the format of a standard H.323 PDU (Protocol Data Unit) message for setting up and maintaining connections between H.323 terminals. As shown therein, the PDU message <highlight><bold>300</bold></highlight> is composed of a message-body of one of the nine available message types <highlight><bold>304</bold></highlight> (setup, callProceeding, connect, alerting, information, releasecomplete, facility, progress, and empty). </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The message format <highlight><bold>300</bold></highlight> also includes a nonStandardData field <highlight><bold>305</bold></highlight> in which an optional NonStandardParameter <highlight><bold>306</bold></highlight> can be specified, for example, to communicate information that is outside of the H.323 standard. Essentially, this field serves as an extensible hook that system designers can use to implement functions that are not natively supported by H.323. When the NonStandardParameter field <highlight><bold>306</bold></highlight> is used, the message <highlight><bold>300</bold></highlight> further specifies a nonStandardIdentifier <highlight><bold>310</bold></highlight> and data <highlight><bold>312</bold></highlight>, in the form of a string of octets (eight-bit units), associated with the specified nonStandardIdentifier <highlight><bold>310</bold></highlight>. The nonStandardIdentifier <highlight><bold>310</bold></highlight>, which is used to determine the identity of the endpoint that is sending the non-standard data, further is specified in the message format <highlight><bold>300</bold></highlight> to be either an object <highlight><bold>316</bold></highlight> or h221NonStandard. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> When non-standard data is being communicated, the data is inserted in the form of octet strings at a field <highlight><bold>320</bold></highlight> in the message format <highlight><bold>300</bold></highlight>. An example of a data format that may be used for the octet string <highlight><bold>320</bold></highlight> is shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. As shown therein, to facilitate the setup of distributed multipoint multi-unicast H.323 conferences, the octet string field <highlight><bold>320</bold></highlight> may take the form of a structure SetupDistributedMPNonstandardParamter <highlight><bold>326</bold></highlight> that, depending on context, specifies one of two different parameters: Also <highlight><bold>328</bold></highlight> or RequestedBy <highlight><bold>332</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The Also parameter <highlight><bold>328</bold></highlight> is used in the context of <highlight><bold>206</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>&mdash;that is, by an H.323 terminal currently participating in the conference (&ldquo;the requesting endpoint&rdquo;) to identify in a setup message to an H.323 terminal being invited to join the conference (&ldquo;the joining endpoint&rdquo;) the identities of one or more other endpoints participating in the conference. Specifically, the Also parameter <highlight><bold>328</bold></highlight> would include a sequence <highlight><bold>331</bold></highlight> of one or more terminalAliases <highlight><bold>330</bold></highlight> (identities of endpoints) corresponding to the endpoints that already are participants in the conference. The terminalAlias parameter <highlight><bold>330</bold></highlight> can take any of the values shown in the list <highlight><bold>324</bold></highlight>, for example, an H.323 identifier, a URL (universal resource locator) address, an email address, etc. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The RequestedBy parameter <highlight><bold>332</bold></highlight> is used in the context of <highlight><bold>210</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>&mdash;that is, RequestedBy <highlight><bold>332</bold></highlight> is included in a setup message sent by the joining endpoint to inform each of the endpoints specified by the sequence <highlight><bold>331</bold></highlight> of the identity of the requesting endpoint. Specifically, the RequestedBy parameter <highlight><bold>332</bold></highlight> would include a sequence <highlight><bold>333</bold></highlight> of one or more terminalAliases <highlight><bold>334</bold></highlight> corresponding to the requesting endpoint. Typically, the terminalAlias sequence <highlight><bold>333</bold></highlight> would include only a single alias corresponding to the requesting endpoint. However, depending on the specific implementation and context, the sequence <highlight><bold>333</bold></highlight> could include two or more aliases corresponding to the requesting endpoint, for example, a telephone number alias, an email alias, an administrative alias, or the like. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Typically, SetupDistributedMPNonStandardParamter <highlight><bold>326</bold></highlight> would be included in &ldquo;Setup&rdquo; type messages in order to set up distributed multi-point conferences. However, other implementations could use SetupDistributedMPNonStandardParamter <highlight><bold>326</bold></highlight> in other types of messages, e.g., &ldquo;Facility&rdquo; messages, to provide additional or different functionality for other calling situations. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a railroad diagram that shows an example of a sequence of events that can be used to establish a distributed multi-unicast H.323 multipoint conference among four endpoints: A, B, C, and D. In this example, endpoint A first requests a signaling channel from endpoint B and, when established, sends an H.323 setup request message to endpoint B to initiate a connection between them (<highlight><bold>400</bold></highlight>). Endpoint B responds by returning a connect message to endpoint A to establish the connection (<highlight><bold>402</bold></highlight>). The connection between endpoints A and B, as well as the connections discussed below among the other endpoints, optionally can be established using the &ldquo;Fast Connect&rdquo; procedure&mdash;a commonly used call procedure for establishing H.323 calls. Details of the Fast Connect procedure can be found in ITU-T Recommendation H.323, section 8.1.7. In general, the Fast Connect procedure enables the logical media channels to be specified in the setup/connection messages rather than having to use multiple H.245 channel messages to set up the logical media channels after connection of the call. Among other information, the Fast Connect procedure includes elements in the setup/connection messages that specify information about the address and port at which the media stream will be received. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> At this point, assume that a user at endpoint B desires to establish a three-way conference by patching in a user at endpoint C. Accordingly, in response to user input, endpoint B requests a signaling channel with endpoint C and sends a setup request message requesting endpoint C to establish a connection with endpoint B (<highlight><bold>404</bold></highlight>). The setup message in this case includes the identity of endpoint A in the Also parameter to let endpoint C know with which other endpoints endpoint C should initiate a connection. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Endpoint C then responds with a connect message to endpoint B to establish a connection between them (<highlight><bold>406</bold></highlight>). Endpoints B and C also establish Realtime Transport Protocol (RTP) channels between them based on port information exchanged in the Fast Connect elements of the setup message sent from endpoint B to endpoint C in <highlight><bold>404</bold></highlight>. RTP channels are used to communicate packets of streaming media/data between endpoints. RTP is described in Request For Comment (RFC) number 1889 (January 1996) of the Internet Engineering Task Force (IETF) (see http://www.ietf.org/rfc/rfc1889.txt). </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Endpoint C further requests a signaling channel from endpoint A and sends a setup request message requesting endpoint A to establish a connection with endpoint C (<highlight><bold>408</bold></highlight>). The setup request message in <highlight><bold>408</bold></highlight> sent from endpoint C to endpoint A includes the identity of the requesting endpoint (B) in the message&apos;s RequestedBy parameter to let endpoint A know that the connection being initiated by endpoint C should be treated as part of the same logical conference as the connection currently in place between endpoints A and B. Similarly, endpoint B knows that its two connections with endpoints A and C, respectively, should be treated as the same logical conference because endpoint B initiated the call to endpoint C with the express purpose of establishing a three-way conference. Endpoint C knows that its two connections with endpoints A and B, respectively, should be treated as the same logical conference based on the &ldquo;Also A&rdquo; parameter received from endpoint B. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In response to the setup request message received from endpoint C, endpoint A sends a connect message to endpoint C to establish a connection between them (<highlight><bold>410</bold></highlight>). Endpoints A and C also establish RTP channels based on port information exchanged in the Fast Connect elements of the setup message sent from endpoint C to endpoint A in <highlight><bold>408</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Next in this example, the user at endpoint B decides to patch in a user at endpoint D to create a four-way conference. Accordingly, endpoint B sends a setup request message to endpoint D including the identities of endpoints A and C in the Also parameter (<highlight><bold>412</bold></highlight>). In response, endpoint D sends a setup request message to each of endpoints A and C including the identity of endpoint B in the RequestedBy parameter (<highlight><bold>414</bold></highlight> and <highlight><bold>416</bold></highlight>). In response to the invitation from D, endpoints A and C each send back to endpoint D a connect message to form respective connections (<highlight><bold>418</bold></highlight> and <highlight><bold>420</bold></highlight>). Lastly, endpoint D sends a connect message to endpoint B to complete the four-conference (<highlight><bold>422</bold></highlight>). For each of the connections A-D, C-D and D-B, corresponding RTP channels are established between the two connecting endpoints based on port information exchanged in the Fast Connect elements of the setup messages that initiated the connections. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Except as otherwise noted, <highlight><bold>400</bold></highlight>-<highlight><bold>422</bold></highlight> generally are time and order independent. Establishing a connection with an endpoint (<highlight><bold>402</bold></highlight>, <highlight><bold>406</bold></highlight>, <highlight><bold>410</bold></highlight>, <highlight><bold>418</bold></highlight>, <highlight><bold>420</bold></highlight>, <highlight><bold>422</bold></highlight>) necessarily cannot occur until after the corresponding setup request message has been received from that endpoint (<highlight><bold>400</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>408</bold></highlight>, <highlight><bold>412</bold></highlight>, <highlight><bold>414</bold></highlight>, <highlight><bold>416</bold></highlight>). However, a joining endpoint generally is free to connect back to the &ldquo;RequestedBy&rdquo; endpoint or send a setup request invitation to one or more of the &ldquo;Also&rdquo; endpoints in any order desired. For example, endpoint C could have sent the setup request message to endpoint A (<highlight><bold>408</bold></highlight>) before, or substantially concurrently with, connecting back to endpoint B (<highlight><bold>406</bold></highlight>). Similarly, endpoint D could have connected back to endpoint B (<highlight><bold>422</bold></highlight>) at any time after receiving the setup request invitation from endpoint B (<highlight><bold>412</bold></highlight>) and need not necessarily have waited until after forming connections with endpoints A and C. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> As discussed above, each of the endpoints A, B, C, and D participating in the conference knows, based on the information conveyed by the Also and RequestedBy parameters, to treat the unicast streams received from the other three endpoints as part of the same logical conference, for example, by mixing or otherwise processing the streams and presenting them to an end-user in a format that suggests their inter-relatedness (e.g., overlaid audio streams for voice and/or adjacent display regions for video). </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Various implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits) or in computer hardware, firmware, software, or combinations thereof. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Other embodiments may be within the scope of the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method comprising: 
<claim-text>establishing a connection between a plurality of endpoints, including at least a requesting endpoint and one or more other participating endpoints; </claim-text>
<claim-text>initiating a connection from the requesting endpoint to at least a third endpoint, the requesting endpoint identifying to the third endpoint the one or more other participating endpoints; and </claim-text>
<claim-text>establishing a connection between the third endpoint and the one or more other participating endpoints identified by the requesting endpoint, the third endpoint identifying the requesting endpoint to the one or more other participating endpoints. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which the connections between endpoints comprise connections that support unicast streams. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising at each of the endpoints, mixing streams received from each of the other endpoints to form a logical conference. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising, in response to the initiation of the connection from the requesting endpoint, establishing a connection from the third endpoint to the requesting endpoint. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which initiating a connection comprises sending an H.323 setup request message that includes an identity of the one or more other participating endpoints. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> in which sending the H.323 setup request message comprises formatting the H.323 setup request message to include the identity of the one or more other participating endpoints in a non-standard parameter field of the H.323 message. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which establishing the connection between the third endpoint and the one or more other participating endpoints comprises sending an H.323 setup request message that includes an identity of the requesting endpoint. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> in which sending the H.323 setup request message comprises formatting the H.323 setup request message to include the identity of the requesting endpoint in a non-standard parameter field of the H.323 message. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which initiating a connection comprises using a Fast Connect procedure. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which the initiating and establishing are repeated to form an N-way conference, where N is an integer greater than three. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which initiating a connection to a third endpoint is performed in response to input received from a user of an Internet Protocol telephony application. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method of facilitating a multipoint conference among three or more endpoints, the method comprising: 
<claim-text>receiving from an requesting endpoint information comprising an invitation to establish a connection with the requesting endpoint and identifying one or more other participating endpoints participating in a conference with the requesting endpoint; and </claim-text>
<claim-text>sending to each of the other participating endpoints identified by the requesting endpoint an invitation to establish a connection and information identifying the requesting endpoint. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> further comprising, in response to receiving an invitation from the requesting endpoint, establishing a connection with the requesting endpoint. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> in which establishing the connection with the requesting endpoint is order independent from sending invitations to each of the other participating endpoints identified by the requesting endpoint. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> in which receiving an invitation from the requesting endpoint comprises receiving an H.323 setup request message that identifies the one or more other participating endpoints in a non-standard parameter field. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> in which sending an invitation to each of the other participating endpoints identified by the requesting endpoint comprises sending an H.323 setup request message that identifies the requesting endpoint in a nonstandard parameter field. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> further comprising, in response to sending invitations to the other participating endpoints, receiving from each of the other participating endpoints information establishing a connection. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> further comprising mixing a plurality of unicast streams received from the inviting and other participating endpoints to form a logical conference. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> in which the plurality of unicast streams include voice data or video data or both. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> in which the receiving and sending are performed by an Internet Protocol telephony application. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. Computer software, embodied in a computer-readable medium and/or a propagated carrier signal, comprising instructions for a computer system to perform the following: 
<claim-text>receive from an requesting endpoint information comprising an invitation to establish a connection with the requesting endpoint and identifying one or more other endpoints participating in a conference with the requesting endpoint; </claim-text>
<claim-text>establish a connection with the requesting endpoint; </claim-text>
<claim-text>send to each of the other endpoints identified by the requesting endpoint an invitation to establish a connection and information identifying the requesting endpoint; </claim-text>
<claim-text>receive from each of the other endpoints information establishing a connection; and </claim-text>
<claim-text>mix a plurality of unicast streams received from the inviting and other endpoints to form a logical conference. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The software of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> in which the instructions to cause the computer system to receive an invitation from the requesting endpoint comprise instructions to receive an H.323 setup request message that identifies the one or more other endpoints in a non-standard parameter field. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The software of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> in which the instructions to cause the computer system to send an invitation to each of the other endpoints identified by the requesting endpoint comprise instructions to send an H.323 setup request message that identifies the requesting endpoint in a non-standard parameter field. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The software of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> in which the instructions are performed by an Internet Protocol telephony application. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. An application comprising: 
<claim-text>a user interface configured to receive from a user of the application input identifying one or more endpoints to be called to form a conference and to present a plurality of media streams to the user in a format that suggests inter-relatedness of the streams; and </claim-text>
<claim-text>H.323 protocol support for performing the following Internet Protocol (IP) telephony operations: 
<claim-text>(i) receive from an requesting endpoint information comprising an invitation to establish a connection with the requesting endpoint and identifying one or more other endpoints participating in a conference with the requesting endpoint; </claim-text>
<claim-text>(ii) establish a connection with the requesting endpoint; </claim-text>
<claim-text>(iii) send to each of the other endpoints identified by the requesting endpoint an invitation to establish a connection and information identifying the requesting endpoint; </claim-text>
<claim-text>(iv) receive from each of the other endpoints information establishing a connection; and </claim-text>
<claim-text>(v) mix a plurality of unicast streams received from the inviting and other endpoints to form a logical conference. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The application of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein the application comprises a client application configured to be executed on a computer system associated with the user, the client configured to communicate with a remote server application to provide the user with IP telephony functionality. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The application of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein, if two or more of the unicast streams comprise audio information, the user interface is configured to overlay the audio streams to suggest inter-relatedness. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The application of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein, if two or more of the unicast streams comprise video information, the user interface is configured to display the video streams in adjacent display regions to suggest inter-relatedness. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The application of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> in which the H.323 protocol support for receiving an invitation from the requesting endpoint comprises support to receive an H.323 setup request message that identifies the one or more other endpoints in a non-standard parameter field. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The application of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> in which the H.323 protocol support for sending an invitation to each of the other endpoints identified by the requesting endpoint comprises support to send an H.323 setup request message that identifies the requesting endpoint in a non-standard parameter field.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005054A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005054A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005054A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005054A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005054A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005054A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
