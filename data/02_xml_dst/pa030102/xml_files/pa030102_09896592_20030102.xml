<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005127A1-20030102-D00000.TIF SYSTEM "US20030005127A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00001.TIF SYSTEM "US20030005127A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00002.TIF SYSTEM "US20030005127A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00003.TIF SYSTEM "US20030005127A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00004.TIF SYSTEM "US20030005127A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00005.TIF SYSTEM "US20030005127A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005127A1-20030102-D00006.TIF SYSTEM "US20030005127A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005127</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896592</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F009/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>227000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and system for the distributed IP object persistent storage in a large scale network</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Lorin</given-name>
<middle-name>Evan</middle-name>
<family-name>Ullmann</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jason</given-name>
<family-name>Benfield</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Julianne</given-name>
<family-name>Yarsa</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Oliver</given-name>
<middle-name>Yehung</middle-name>
<family-name>Hsu</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Anne Vachon Dougherty</name-1>
<name-2></name-2>
<address>
<address-1>3173 Cedar Road</address-1>
<city>Yorktown Heights</city>
<state>NY</state>
<postalcode>10598</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, system, apparatus, and computer program product for the management of data, objects, and access within a distributed data processing system. The system may comprise a gateway-endpoint organization that allows for a highly distributed service management architecture, wherein services within this framework enable resource consumers to address resources and use resources throughout the distributed system. The distributed-framework routes action objects through the system so that the appropriate gateway receives the action object and ensures its completion and the return of status from its execution. The distributed nature of the gateways and their services allow logical routes to be dynamically determined for the action objects. In particular, the present invention is directed to a plurality of access mechanisms by which distributed services objects and related property data are stored and are accessed within a distributed data processing system. The access mechanisms include an IP Driver IPOP Accessor; a Network Endpoint Locator IPOP Accessor, an Application Properties IPOP Accessor; and an Activator IPOP Accessor. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to an improved data processing system and, in particular, to a method and system for multiple computer or process coordinating for network resource management. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> As detailed in co-pending U.S. patent application Ser. No. 09/738,307, filed Dec. 15, 2000, entitled &ldquo;Method and System for Management of Resource Leases in an Application Framework System&rdquo;, the teachings of which are incorporated by reference herein, technology expenditures have driven substantial changes in the information technology (IT) arena. Specifically, the IT costs have given rise to an increasing number of outsourcing service providers, each promising, often contractually, to deliver reliable service while offloading the costly burdens of staffing, procuring, and maintaining an IT organization. Service providers optimally employ server outsourcing, application hosting, and desktop management in a large-scela distributed network. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> IT solutions now require end-to-end management that includes network connectivity, server maintenance, and application management in order to succeed. Management systems must fulfill two broad goals: a flexible approach that allows rapid deployment and configuration of new services for the customer; and an ability to support rapid delivery of the management tools themselves. A successful management solution fits into a heterogeneous environment, provides openness with which it can knit together management tools and other types of applications, and a consistent approach to managing all of the IT assets. Many service providers have realized the need to scale their capabilities to manage millions of devices. When one considers the number of customers in a home consumer network as well as pervasive devices, such as smart mobile phones, these numbers are quickly realized. Significant bottlenecks appear when typical IT solutions attempt to support more than several thousand devices. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Given such network spaces, a management system should be immune from failure so that service attributes, such as response time, uptime, and throughput, are delivered in accordance with guarantees in a service level agreement. In addition, a service provider may attempt to support as many customers as possible within a single system. Accordingly, the management systems must be able to support granularity on a shared backbone of equipment and services as well as a set of measurements that apply very directly with each customer. By providing this type of granularity, a robust management system can enable a service provider to enter into quality-of-service (QOS) agreements with its customers. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Hence, as noted in the aforementioned patent application, there is a direct relationship between the ability of a management system to provide certain fault-tolerant functionality and the ability of a service provider using the management system to guarantee different levels of service across different platforms. Preferably, the management system can replicate services, detect faults within a service, restart services, and reassign work to a replicated service. By implementing a common set of interfaces across all of their services, each service developer gains the benefits of system robustness. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Distributed data processing systems with thousands of nodes are known in the prior art. The nodes can be geographically dispersed, and the overall computing environment can be managed in a distributed manner. The managed environment can be logically separated into a series of loosely connected managed regions in which each region has its own management server for managing local resources. The management servers coordinate activities across the enterprise and permit remote site management and operation. Local resources within one region can be exported for the use of other regions in a variety of manners. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The aforementioned patent application, provides disclosure of such a distributed network environment, as does another co-pending patent application, U.S. Ser. No. 09/740,088, filed Dec. 18, 2000, entitled &ldquo;Method and Apparatus for Defining Scope and for Ensuring Finite Growth of Scaled Distributed Applications&rdquo;, the teachings of which are also incorporated by reference herein. The network includes distributed service functionality, with &ldquo;distributed access&rdquo;, via an IP Object Persistent (hereinafter, &ldquo;IPOP&rdquo;) Service, to a plurality of network services. A central repository, referred to as the IP Object Persistent (or, hereinafter &ldquo;IPOP&rdquo;) Database maintains persistent objects for use by the many network entities. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In order to fulfill QOS guarantees, a management system needs not only to provide an infrastructure by which resources are fairly distributed, but also facilitate access to the available services readily and transparently. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Therefore, it would be particularly advantageous, and is an object of the present invention, to provide a method and system that provides ease of access to distributed network target resources in a fair yet highly distributed manner. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Another object of the invention is that the target resources be dynamically discoverable and flexibly addressable and utilizable. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Yet another object of the invention is to provide distributed service access mechanisms as command line interfaces as well as graphical user interfaces. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Still another object of the invention is to facilitate the retrieval and updating of data to IP network resources in a large-scale distributed network. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The foregoing and other objects are realized by the present method, system, apparatus, and computer program product for the management of data, objects, and access within a distributed data processing system. The system may comprise a gateway-endpoint organization that allows for a highly distributed service management architecture. Services within this framework enable resource consumers to address resources and use resources throughout the distributed system. The application framework is preferably implemented in an object-oriented manner. Resources are represented as objects. A request for a target resource is handled by at least one &ldquo;accessor&rdquo; through which a requester obtains server service access and server-connected database access by which a connection is invoked between the IPOP server and the IPOP database and the service performed. The interfaces classes which are used as the Accessors are independent of persistence or communication modes/protocols. With the Accessors, the requester program APIS are provided with connection management, security, transport details for handling remote method invocations (i.e., the I/O, in effect, for the distributed system) and the distribution for the applications. The request is instantiated as an action object that is both protocol-independent and network-route-unaware. The action object is addressed to the target resource, and the distributed framework routes the action object through the system so that the appropriate gateway receives the action object and ensures its completion and the return of status from its execution. The distributed nature of the gateways and their services allow logical routes to be dynamically determined for the action objects. As hardware and/or software changes or failures occur, the action objects can be rerouted, thereby providing fault-tolerance within the system. In particular, the present invention is directed to a plurality of access mechanisms by which distributed services objects and related property data are stored and are accessed within a distributed data processing system. The access mechanisms include an IP Driver IPOP Accessor; a Network Endpoint Locator IPOP Accessor, an Application Properties IPOP Accessor; and an Activator IPOP Accessor.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The invention will now be described in greater detail with specific reference to the appended drawings wherein: </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram depicting a known logical configuration of software and hardware resources; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is simplified diagram illustrating a large distributed computing enterprise environment in which the present invention is implemented; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram depicting components within a distributed system installation that provide resource management functionality within a distributed computing environment in accordance with the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block logic diagram of the IPOP (IP Object Persistence) service; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart that show processes for execution by the IP Driver IPOP Accessor; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart that shows processes for execution by the Network Endpoint Locator IPOP Accessor; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart that shows processes for execution by the Application Properties IPOP Accessor; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart that shows processes for execution by the Activator IPOP Accessor.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> diagram depicts a known logical configuration of software and hardware resources. In this example, the software is organized in an object-oriented system. Application object <highlight><bold>102</bold></highlight>, device driver object <highlight><bold>104</bold></highlight>, and operating system object <highlight><bold>106</bold></highlight> communicate across network <highlight><bold>108</bold></highlight> with other objects and with hardware resources <highlight><bold>110</bold></highlight>-<highlight><bold>114</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In general, the objects require some type of processing, input/output, or storage capability from the hardware resources. The objects may execute on the same device to which the hardware resource is connected, or the objects may be physically dispersed throughout a distributed computing environment. The objects request access to the hardware resource in a variety of manners, e.g. operating system calls to device drivers. Hardware resources are generally available on a first-come, first-serve basis in conjunction with some type of arbitration scheme to ensure that the requests for resources are fairly handled. In some cases, priority may be given to certain requesters, but in most implementations, all requests are eventually processed. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the present invention is preferably implemented in a large distributed computer environment <highlight><bold>210</bold></highlight> comprising up to thousands of &ldquo;nodes&rdquo;. The nodes will typically be geographically dispersed and the overall environment is &ldquo;managed&rdquo; in a distributed manner. Preferably, the managed environment is logically broken down into a series of loosely connected managed regions (MRs) <highlight><bold>212</bold></highlight>, each with its own management server <highlight><bold>214</bold></highlight> for managing local resources with the managed region. The network typically will include other servers (not shown) for carrying out other distributed network functions. These include name servers, security servers, file servers, thread servers, time servers and the like. Multiple servers <highlight><bold>214</bold></highlight> coordinate activities across the enterprise and permit remote management and operation. Each server <highlight><bold>214</bold></highlight> serves a number of gateway machines <highlight><bold>216</bold></highlight>, each of which in turn support a plurality of endpoints/terminal nodes <highlight><bold>218</bold></highlight>. The server <highlight><bold>214</bold></highlight> coordinates all activity within the managed region using a terminal node manager at server <highlight><bold>214</bold></highlight>. Each gateway machine runs a server component of a system management framework. The server component is a multi-threaded runtime process that comprises several components including at least an object request broker (ORB), at least one service, and either a local object library or access to an object library. Preferably, ORBs runs continuously, separate from the operating system, and communicate with both server and client processes through separate stubs and skeletons via an interprocess communication (IPC) facility (not shown). In particular, a secure remote procedure call (RPC) is typically used to invoke operations on remote objects. A Gateway machine (e.g., <highlight><bold>216</bold></highlight>) also includes an operating system and thread mechanism. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The system management framework, also termed distributed kernel services (DKS), includes a client component supported on each of the endpoint machines. The client component is a low cost, low maintenance application suite that is preferably &ldquo;dataless&rdquo; in the sense that system management data is not cached or stored there in a persistent manner. Implementation of the management framework in this &ldquo;client-server&rdquo; manner has significant advantages over the prior art, and it facilitates the connectivity of personal computers into the managed environment. It should be noted, however, that an endpoint may also have an ORB for remote object-oriented operations within the distributed environment, as explained in more detail further below. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Using an object-oriented approach, the system management framework facilitates execution of system management tasks required to manage the resources in the managed region. Such tasks are quite varied and include, without limitation, file and data distribution, network usage monitoring, user management, printer or other resource configuration management, and the like. In a preferred implementation, the object-oriented framework includes a Java runtime environment for well-known advantages, such as platform independence and standardized interfaces. Both gateways and endpoints operate portions of the system management tasks through cooperation between the client and server portions of the distributed kernel services. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In a large enterprise, such as the system that is illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, there is preferably one server per managed region with some number of gateways. For a workgroup-size installation, e.g., a local area network, a single server-class machine may be used as both a server and a gateway. References herein to a distinct server and one or more gateway(s) should thus not be taken by way of limitation as these elements may be combined into a single platform. For intermediate size installations, the managed region grows breadth-wise, with additional gateways then being used to balance the load of the endpoints. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The server is the top-level authority over all gateways and endpoints. The server maintains an endpoint list, which keeps track of every endpoint in a managed region. This list preferably contains all information necessary to uniquely identify and manage endpoints including, without limitation, such information as name, location, and machine type. The server also maintains the mapping between endpoints and gateways, and this mapping is preferably dynamic. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Each endpoint is also a computing device. In one preferred embodiment of the invention, most of the endpoints are personal computers, e.g., desktop machines or laptops. In this architecture, the endpoints need not be high powered or complex machines or workstations. An endpoint computer preferably includes a Web browser such as Netscape Navigator or Microsoft Internet Explorer. An endpoint computer thus may be connected to a gateway via the Internet, an intranet or some other computer network. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Preferably, the client-class framework running on each endpoint is a low-maintenance, low-cost framework that is ready to do management tasks but consumes few machine resources because it is normally in an idle state. Each endpoint may be &ldquo;dataless&rdquo; in the sense that system management data is not stored therein before or after a particular system management task is implemented or carried out. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram depicts components within the system management framework that provide resource/service access functionality within a distributed computing environment such as that shown above. A network contains four (<highlight><bold>4</bold></highlight>) ORBs <highlight><bold>300</bold></highlight>-<highlight><bold>303</bold></highlight>. IPOP Server <highlight><bold>308</bold></highlight> runs ORB1 <highlight><bold>300</bold></highlight>. In general, an ORB can support different services that are configured and run in conjunction with an ORB. For example, ORB4 at <highlight><bold>301</bold></highlight> includes IPDriver1 service <highlight><bold>324</bold></highlight> and Gateway IP Service <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The Gateway Service processes action objects, which are explained in more detail below, and directly communicates with endpoints or agents to perform management operations. The gateway receives events from resources and passes the events to interested parties within the distributed system. The NELS works in combination with action objects and determines which gateway to use to reach a particular resource. A gateway is determined by using the discovery service of the appropriate topology driver, and the gateway location may change due to load balancing or failure of primary gateways. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> DKS does not impose any particular representation, but it does provide an object-oriented structure for applications to model resources. The use of object technology allows models to present a unified appearance to management applications and to hide the differences among the underlying physical or logical resources. Logical and physical resources can be modeled as separate objects and related to each other using relationship attributes. By using objects, for example, a system may implement an abstract concept of a router and then use this abstraction within a range of different router hardware. The common portions can be placed into an abstract router class while modeling the important differences in subclasses, including representing a complex system with multiple objects. With an abstracted and encapsulated function, the management applications do not have to handle many details for each managed resource. A router usually has many critical parts, including a routing subsystem, memory buffers, control components, interfaces, and multiple layers of communication protocols. Using multiple objects has the burden of creating multiple object identifiers (OIDs) because each object instance has its own OID. However, a first order object can represent the entire resource and contain references to all of the constituent parts. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> ORB <highlight><bold>301</bold></highlight> contains IPDriver1 Service <highlight><bold>324</bold></highlight>, for which the distributed IP Driver IPOP Accessor <highlight><bold>328</bold></highlight> will facilitate access. ORB <highlight><bold>302</bold></highlight> contains IPDriver2 Service <highlight><bold>326</bold></highlight>, for which the distributed IP Driver IPOP Accessor <highlight><bold>328</bold></highlight> will also facilitate access, as well as Activation Application <highlight><bold>328</bold></highlight> for which the distributed Activator IPOP Accessor <highlight><bold>338</bold></highlight> will facilitate access. ORB <highlight><bold>303</bold></highlight> includes IPDriver3 Service <highlight><bold>350</bold></highlight> for which IP Driver IPOP Accessor <highlight><bold>328</bold></highlight> facilitates access, NEL Service <highlight><bold>360</bold></highlight>, for which NEL IPOP Accessor <highlight><bold>368</bold></highlight> facilitates access, and the DKS Administration GUI <highlight><bold>370</bold></highlight> for which Application Properties IPOP Accessor <highlight><bold>378</bold></highlight> facilitates access. Also illustrated is the Data Access Server Service (e.g., JDBC device driver or other data access server service as appropriate) at <highlight><bold>380</bold></highlight> which connects the IPOP Server <highlight><bold>300</bold></highlight> to the native Database <highlight><bold>381</bold></highlight>. DAS provides a database neutral access for application, wherein each ORB will have a DAS client (not shown) available as well. The Database <highlight><bold>381</bold></highlight> provides storage for the IPOP data, network topology data, DKS activator OID data, as well as other persistent objects, data, etc. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Applications require some type of insulation from the specifics of the operations of gateways. In the DKS environment, applications create action objects that encapsulate command which are sent to gateways, and the applications wait for the return of the action object. Action objects contain all of the information necessary to run a command on a resource. The application does not need to know the specific protocol that is used to communicate with the resource. The application is unaware of the location of the resource because it issues an action object into the system, and the action object itself locates and moves to the correct gateway. The location independence allows the NELS to balance the load between gateways independently of the applications and also allows the gateways to handle resources or endpoints that move or need to be serviced by another gateway. Nonetheless, the aforementioned Accessor components provide the transparent access mechanisms for access to the relevant applications/services, as further detailed below. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block logic diagram of the IPOP (IP Object Persistence) service. The IPOP architecture includes the IPOP Manager for configuring the IPOP as well as the IPOP graphical user interface (GUI) for allowing system administrator input to IPOP configuration data, which is stored at the database shown at <highlight><bold>405</bold></highlight>. The IPOP service utilizes the database helpers representatively illustrated as JDBC Database helpers at <highlight><bold>407</bold></highlight> and include those available code-customized representations for endpoint, system network, state and database connection management data. The IPOP database <highlight><bold>409</bold></highlight> provides storage of IP persistent objects, topology data, etc. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> What the present invention provides, beyond the framework and IPOP service interactions disclosed in the co-pending patent applications, is a plurality of access mechanisms, shown in box <highlight><bold>430</bold></highlight>, for DKS applications to access services, perform actions, and to read and write data at IP network resources. Each of the illustrated access mechanisms, or Accessors as they are dubbed by this disclosure, is available on a distributed basis as part of the IPOP Service. The access mechanisms illustrated in box <highlight><bold>430</bold></highlight>, including an IP Driver IPOP Accessor; a Network Endpoint Locator (NEL) IPOP Accessor, an Application Properties IPOP Accessor; and an Activator IPOP Accessor, for facilitating the invoking and use of the IP Driver service (e.g., at ORB2, ORB3 and ORB4 of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), NEL service (e.g., at ORB4 of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), Application Properties service (e.g., at DKS Admin. GUI of ORB4 of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), and Activation Application (e.g., at ORB3 of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), respectively. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart that show processes for execution by the IP Driver IPOP Accessor. In the preferred embodiment of the present invention, an IP driver subsystem is implemented as a collection of software components for discovering, i.e. detecting, IP &ldquo;objects&rdquo;, i.e. IP networks, IP systems, and IP endpoints by using physical network connections. This discovered physical network is used to create topology data that is then provided through other services via topology maps accessible through a graphical user interface (GUI) or for the manipulation of other applications. The IP driver system can also monitor objects for changes in IP topology and update databases with the new topology information. The IPOP service provides the services for other applications to access the IP object database. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> As detailed in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the IPDriver monitors at <highlight><bold>501</bold></highlight> and, upon discovery of a new object at <highlight><bold>503</bold></highlight>, calls IPOP to store the network object and passes the network in memory to IPOP at <highlight><bold>505</bold></highlight>. IPOP then stores the network object at <highlight><bold>507</bold></highlight>, filling in all required fields. Next the IPOP stores all systems associated with the network with all fields at <highlight><bold>509</bold></highlight>. Based upon a determination at <highlight><bold>511</bold></highlight> as to whether all systems have been fetched, the looping through system data continues at <highlight><bold>509</bold></highlight>-<highlight><bold>511</bold></highlight> or the system moves on to fetch all endpoints and fill in all fields for endpoints at <highlight><bold>513</bold></highlight>. Once it has been determined that all endpoints have been fetched, at decision box <highlight><bold>515</bold></highlight>, the IPDriver returns to its monitoring state. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The following pseudo-code illustrates the flow for the IP Driver IPOP Accessor: </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> IP Driver discovers a new Network Object </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> IP Driver calls IPOP API to persistently store then Network object in database. Passes the Network in memory to IPOP </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> IPOP stores network object in database </paragraph>
<paragraph id="P-0045" lvl="3"><number>&lsqb;0045&rsqb;</number> IPOP fetches prepared statement for Network Object and fills in the required fields based on the Network in memory passed by IPDriver </paragraph>
<paragraph id="P-0046" lvl="3"><number>&lsqb;0046&rsqb;</number> IPOP executes prepared statement in JDBC If no DB errors, continue </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> IPOP Stores all systems associated with Network in Database </paragraph>
<paragraph id="P-0048" lvl="3"><number>&lsqb;0048&rsqb;</number> Fetch systemsInNetwork vector from Network in memory </paragraph>
<paragraph id="P-0049" lvl="3"><number>&lsqb;0049&rsqb;</number> For each system LOOP </paragraph>
<paragraph id="P-0050" lvl="4"><number>&lsqb;0050&rsqb;</number> IPOP fetches database prepared statement for System and fills in the required fields based on the System in memory passed by IPDriver&apos;s Network </paragraph>
<paragraph id="P-0051" lvl="4"><number>&lsqb;0051&rsqb;</number> IPOP executes prepared statement in JDBC If no DB errors, continue </paragraph>
<paragraph id="P-0052" lvl="4"><number>&lsqb;0052&rsqb;</number> Fetch endpointsInSystem vector from System in memory </paragraph>
<paragraph id="P-0053" lvl="4"><number>&lsqb;0053&rsqb;</number> For each endpoint LOOP </paragraph>
<paragraph id="P-0054" lvl="5"><number>&lsqb;0054&rsqb;</number> IPOP fetches database prepared statement for Endpoint and fills in the required fields based on the Endpoint in memory passed by IPDriver&apos;s Network </paragraph>
<paragraph id="P-0055" lvl="5"><number>&lsqb;0055&rsqb;</number> IPOP executes prepared statement in JDBC If no DB errors, continue </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart that shows processes for execution by the Network Endpoint Locator IPOP Accessor. The Network Endpoint Locator (NEL) is used for application action access. The NEL service finds a route (data path) to communicate between the application and the appropriate endpoint. The NEL service converts input to protocol, network address, and gateway location for use by action objects. The NEL service is a thin service that supplies information discovered by the IPOP service. The primary roles of the NEL service are as follows: support the requests of applications for routes; maintain the gateway and endpoint caches that keep the route information; ensure the security of the requests; and perform the requests as efficiently as possible to enhance performance. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> When an action needs to be taken on a set of endpoints based on a request at <highlight><bold>601</bold></highlight>, the NEL service determines which endpoints are managed by which gateways at <highlight><bold>603</bold></highlight>. When the appropriate gateway is identified, a single copy of the action object is distributed to each identified gateway at <highlight><bold>605</bold></highlight>. The results from the endpoints are asynchronously merged back to the caller application through the appropriate gateways. Performing the actions asynchronously allows for tracking all results whether the endpoints are connected or disconnected. If the action object IP fails to execute an action object on the target gateway, as determined at <highlight><bold>607</bold></highlight>, NEL is consulted to identify an alternative path for the command. If an alternate path is found at <highlight><bold>609</bold></highlight>, the action object IP is transported to that gateway at <highlight><bold>605</bold></highlight> and executed. It may be assumed that the entire set of commands within one action object IP must fail before this recovery procedure is invoked. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart that shows processes for execution by the Application Properties IPOP Accessor. When physical network objects are stored in IPOP at <highlight><bold>701</bold></highlight>, the Application Properties IPOP Accessor will obtain properties at <highlight><bold>703</bold></highlight> and store the textual property information with the physical network objects at <highlight><bold>705</bold></highlight>. Properties, such as a simple identification of &ldquo;Mary&apos;s computer&rdquo; or &ldquo;John&apos;s router&rdquo; may become valuable tools on which to sort or use programatically at a later date. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart that shows processes for execution by the Activator IPOP Accessor. Applications request object using IPOP OIDs, for ease of communications, minimal storage requirements, etc. The Activation Service can take the OIDs in a request, provide the data class, and return the full object with related properties, etc. to the caller. In that way a locally stored application need only maintain a list of integers (i.e., OIDs) from which the Activator will reconstruct objects and provide the objects to the caller for application use. As shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, upon receipt of a request having an OID at <highlight><bold>801</bold></highlight>, the Activator IPOP Accessor is called at <highlight><bold>803</bold></highlight>. The Activator IPOP Accessor searcher the IPOP database at <highlight><bold>804</bold></highlight>, constructs the object in memory at <highlight><bold>805</bold></highlight> and then send the object to the caller at <highlight><bold>806</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Each of the Accessor components provides the functionality for a requester, which requester has the APIs for services, to call a service by which a connection is invoked between the IPOP server and the IPOP database and the service performed. The interfaces classes which are used as the Accessors are independent of persistence or communication modes/protocols. With the Accessors, the program APIS are provided with connection management, security, transport details for handling remote method invocations (i.e., the I/O, in effect, for the distributed system) and the distribution for the applications. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The advantages of the present invention should be apparent in view of the detailed description of the invention that is provided above. A distributed data processing system can be managed using a gateway-endpoint organization that allows for a highly distributed service management architecture. Services within this framework enable resource consumers to address resources and use resources throughout the distributed system. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of instructions in a computer readable medium and a variety of other forms, regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include media such as EPROM, ROM, tape, paper, floppy disc, hard disk drive, RAM, and CD-ROMs and transmission-type media, such as digital and analog communications links. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The description of the present invention has been presented for purposes of illustration but is not intended to be exhaustive or limited to the disclosed embodiments. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiments were chosen to explain the principles of the invention and its practical applications and to enable others of ordinary skill in the art to understand the invention in order to implement various embodiments with various modifications as might be suited to other contemplated uses. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for managing resources within a distributed data processing network having a plurality of distributed services for use by at least one network requester, the method comprising the steps of: 
<claim-text>providing a plurality of access mechanisms between the distributed service and a network requester; and </claim-text>
<claim-text>activating at least one of said access mechanisms in response to a request from said network requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said plurality of access mechanisms operate independent of the communication protocol utilized by said at least one network requester. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein each of said at least one network requester comprises at least one application programming interface (API) for at least one service and wherein said activating comprises invoking at least one of said access mechanisms to call a service by which a connection is invoked between a server and a server-associated persistent storage database. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> further comprising the step of performing said service. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said plurality of access mechanisms provide at least one of connection management, security, transport details for handling remote method invocations, and distribution for said at least one API. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said at least one access mechanism comprises an IP Driver Accessor for performing discovery and status monitoring in said network. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said at least one access mechanism comprises a Network Endpoint Locator Accessor for locating at least one endpoint in said network. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said at least one access mechanism comprises an Application Properties Accessor for updating said persistent storage database. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said at least one access mechanism comprises an Activator Accessor for accessing objects stored in said persistent storage database based on said request. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said request includes an integer comprising an object identifier. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A resource management system for managing resources within a distributed data processing network having a plurality of distributed services for use by at least one network requester, the method comprising: 
<claim-text>a plurality of access mechanisms between the distributed service and a network requester; and </claim-text>
<claim-text>at least one response component for activating at least one of said access mechanisms in response to a request from said network requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said plurality of access mechanisms operate independent of the communication protocol utilized by said at least one network requester. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein each of said at least one network requester comprises at least one application programming interface (API) for at least one service and wherein said at least one response component comprises means for invoking at least one of said access mechanisms to call a service by which a connection is invoked between a server and a server-associated persistent storage database. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said plurality of access mechanisms provide at least one of connection management, security, transport details for handling remote method invocations, and distribution for said at least one API. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein said at least one access mechanism comprises an IP Driver Accessor for performing discovery and status monitoring in said network. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein said at least one access mechanism comprises a Network Endpoint Locator Accessor for locating at least one endpoint in said network. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said at least one access mechanism comprises an Application Properties Accessor for updating said persistent storage database. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said at least one access mechanism comprises an Activator Accessor for accessing objects stored in said persistent storage database based on said request. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A program storage device readable by machine tangibly embodying a program of instructions executable by the machine for performing a method for managing resources within a distributed data processing network having a plurality of distributed services for use by at least one network requester, the method comprising the steps of: 
<claim-text>providing a plurality of protocol-independent access mechanisms between the distributed service and a network requester, adapted to operate independent of the communication protocol utilized by said at least one network requester; and </claim-text>
<claim-text>activating at least one of said access mechanisms in response to a request from said network requester. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The program storage device of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein each of said at least one network requester comprises at least one application programming interface (API) for at least one service and wherein said activating comprises invoking at least one of said access mechanisms to call a service by which a connection is invoked between a server and a server-associated persistent storage database.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005127A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005127A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005127A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005127A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005127A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005127A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005127A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
