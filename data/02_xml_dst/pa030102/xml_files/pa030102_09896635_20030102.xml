<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002504A1-20030102-D00000.TIF SYSTEM "US20030002504A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00001.TIF SYSTEM "US20030002504A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00002.TIF SYSTEM "US20030002504A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00003.TIF SYSTEM "US20030002504A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00004.TIF SYSTEM "US20030002504A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00005.TIF SYSTEM "US20030002504A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002504A1-20030102-D00006.TIF SYSTEM "US20030002504A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002504</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896635</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L012/28</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>H04L012/56</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>392000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>370</class>
<subclass>401000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Apparatus, method and system for an object exchange bridge</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Antti</given-name>
<family-name>Forstadius</family-name>
</name>
<residence>
<residence-non-us>
<city>Tampere</city>
<country-code>FI</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>MORGAN &amp; FINNEGAN, L.L.P.</name-1>
<name-2></name-2>
<address>
<address-1>345 Park Avenue</address-1>
<city>New York</city>
<state>NY</state>
<postalcode>10154-0053</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An apparatus, method and system to route object exchanges beyond clients and object exchange (OBEX) servers in close proximity with one another. The present disclosure further provides the ability to route OBEX communications across a communications network such as the Internet. The present disclosure also teaches that a bridge device may support both short range RF communications, such as Bluetooth, and TCP/IP communications. The present disclosure tracks and enables OBEX enabled clients to send and receive information far outside their immediate wireless transmission range to remote servers. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to an apparatus, method and system to route information from a wireless device across a communications network. More particularly, the disclosed invention relates to an apparatus, method and system to enable short range radio frequency (&ldquo;RF&rdquo;) wireless point to point communications to be bridged across a communications network. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="7"><number>&lsqb;0002&rsqb;</number> Networks </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Networks are commonly thought to consist of the interconnection and interoperation of clients, servers, and intermediary nodes in a graph topology. It should be noted that the term &ldquo;server&rdquo; as used herein refers generally to a computer, other device, software, or combination thereof that processes and responds to the requests of remote users across a communications network. Servers serve their information to requesting &ldquo;clients.&rdquo; A computer, other device, software, or combination thereof that facilitates, processes information and requests, and/or furthers the passage of information from a source user to a destination user is commonly referred to as a &ldquo;node.&rdquo; Networks are generally thought to facilitate the transfer of information from source points to destinations. There are many forms of networks such as Local Area Networks (LANs), Wide Area Networks (WANs), Pico networks, etc. </paragraph>
<paragraph id="P-0004" lvl="7"><number>&lsqb;0004&rsqb;</number> Internet </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The Internet is a network of networks. It is an interconnection of various and disparate networks that are disposed in communication with one another. This interconnectivity and intercommunications provided by the Internet is in large part facilitated through the use of common transmission protocols. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> As Internet usage increases, the amount of information and/or services available on the Internet also increases. This makes the Internet a valuable information transportation vehicle. </paragraph>
<paragraph id="P-0007" lvl="7"><number>&lsqb;0007&rsqb;</number> Transmission Control Protocol-Internet Protocol (TCP/IP) </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The proliferation and expansion of computer systems, databases, and networks of computers has been facilitated by an interconnection of such systems and networks in an extraterritorial communications network commonly referred to as the Internet. The Internet has developed and largely employs the Transmission Control Protocol-Internet Protocol (TCP/IP). TCP/IP was developed by a Department of Defense (DoD) research project to interconnect networks made by various and varying network vendors as a foundation for a network of networks, i.e., the Internet. The development of TCP/IP was in part driven by a requirement by the DoD to have a network that will continue to operate even if damaged during battle, thus allowing for information to be routed around damaged portions of the communications network to destination addresses. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The Internet is a packet-switched network and thus, information on the Internet is broken up into pieces, called packets, and transmitted in packet form. The packets contain IP addressing information called headers, which are used by routers to facilitate the delivery of the packets from a source to a destination across intermediary nodes on the Internet. Upon arrival at the destination, the packets are reassembled to form the original message, and any missing packets are requested again. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The IP component of the protocol is responsible for routing packets of information based on a four byte addressing mechanism; the address is written as four numbers separated by dots, each number ranging from 0 to 255, e.g., &ldquo;123.255.0.123&rdquo;. IP addresses are assigned by Internet authorities and registration agencies, and are unique. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The TCP portion of the protocol is used for verifying that packets of information are correctly received by the destination computer from the source, and if not, to retransmit corrupt packets. Other transmission control protocols are also commonly used that do not guarantee delivery, such as User Datagram Protocol (UDP). The TCP/IP protocol is specified in IEEE/RFC1190, January 1991. </paragraph>
<paragraph id="P-0012" lvl="7"><number>&lsqb;0012&rsqb;</number> Object Exchange (OBEX) Protocol </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> OBEX is a session protocol and can be described as a binary HTTP protocol. An example of an OBEX server implementation may be OpenOBEX, which may be found at the website: sourceforge.net/projects/openobex. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The OBEX protocol and specification may be found in: IrOBEX, IrDA Object Exchange Protocol, Counterpoint Systems Foundry, Inc., Microsoft Corporation, Mar. 18, 1999 (Version 1.2). </paragraph>
<paragraph id="P-0015" lvl="7"><number>&lsqb;0015&rsqb;</number> Bluetooth Protocol (BT) </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Bluetooth is a wireless technology that operates in the unlicensed Industrial, Scientific, and Medical (ISM) radio band of 2.4 GHz. Bluetooth technology includes a number of protocols that allow Bluetooth enabled devices to operate in a peer to peer environment forming piconets. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The Bluetooth protocol and specification may be found in: Bluetooth system; Specification Volumes 1 and 2, Core and Profiles: Version 1.1, Feb. 22, 2001. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One embodiment of the present invention solves the problem of allowing remote OBEX services to interact with clients that support Bluetooth GEOP profiles. This is a very useful feature when implemented in Bluetooth access point networks as the desired service can be accessed through any access point instead of having to connect directly to the server device. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In one embodiment of the present invention, the OBEX bridge apparatus comprises a processor; a memory, communicatively connected to the processor; a program, stored in the memory, including, a module to receive the OBEX encoded communications at a short range RF (e.g., Bluetooth) enabled OBEX bridge from an OBEX client, a module to determine a destination IP address to send the received OBEX encoded communications, and a module to send the received OBEX encoded communications from the short range RF enabled OBEX bridge to an OBEX server at the determined destination IP address via IP. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In another embodiment of the present invention, the OBEX bridge apparatus comprises a processor; a memory, communicatively connected to the processor; a program, stored in the memory, including, a module to obtain OBEX encoded communications, a module to establish a baseband communication channel using a Bluetooth GOEP profile between the OBEX client and a Bluetooth enabled OBEX bridge, a module to encapsulate the OBEX encoded communications into baseband communications, a module to provide the baseband encapsulated communications to the OBEX bridge, a module to assign an internal IP address within the OBEX bridge, a module to bind the IP address to the baseband communication channel, a module to establish a TCP/IP communication channel between the OBEX bridge and a remote OBEX server, and a module to route the OBEX encoded data from the baseband channel to the TCP/IP channel. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In another embodiment of the present invention, the OBEX bridge apparatus comprises a processor; a memory, communicatively connected to the processor; a program, stored in the memory, including, a module to create a client baseband handle referring to a memory space in an OBEX bridge&apos;s memory for incoming baseband communications, a module to create an internal IP address within an OBEX bridge allowing for communications to flow to and from a communications network through the IP address, a module to create an entry in the memory to store the client baseband handle data type, a module to create an entry in the memory to store the IP address data type, and a module to bind the client baseband handle data type with its respective IP address data type. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In yet another embodiment of the present invention, the OBEX bridge apparatus comprises a processor; a memory, communicatively connected to the processor; a program, stored in the memory, including, a module to receive at an OBEX bridge OBEX encoded communications transmitted from the OBEX client via short range radio link; a module to allocate an internal address to the OBEX client at the OBEX bridge; a module to associate the OBEX client with the allocated internal address at the OBEX bridge; a module to select a certain OBEX server at the OBEX bridge to send the received OBEX encoded communications; a module to determine a destination IP address of the selected OBEX server; a module to send the received OBEX encoded communications from the OBEX bridge to the selected OBEX server via IP. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The above advantages and features are of representative embodiments only, and are not exhaustive and/or exclusive. They are presented only to assist in understanding the invention. It should be understood that they are not representative of all the inventions defined by the claims, to be considered limitations on the invention as defined by the claims, or limitations on equivalents to the claims. For instance, some of these advantages may be mutually contradictory, in that they cannot be simultaneously present in a single embodiment. Similarly, some advantages are applicable to one aspect of the invention, and inapplicable to others. Furthermore, certain aspects of the claimed invention have not been discussed herein. However, no inference should be drawn regarding those discussed herein relative to those not discussed herein other than for purposes of space and reducing repetition. Thus, this summary of features and advantages should not be considered dispositive in determining equivalence. Additional features and advantages of the invention will become apparent in the following description, from the drawings, and from the claims. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The accompanying drawings illustrate certain embodiments of the disclosure. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic overview of a short range RF enabled and object exchange (OBEX) enabled client terminal according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> details the schematic overview of a short range RF enabled OBEX bridge according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic overview of an OBEX server according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an OBEX client-server-bridge connection <highlight><bold>400</bold></highlight> according to one embodiment of the present invention, and provides an exemplary data flow diagram; and </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> details a flow diagram of an exemplary communications flow between an exemplary OBEX client, OBEX bridge and an OBEX server. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0030" lvl="7"><number>&lsqb;0030&rsqb;</number> Short Range RF Enabled Client Terminal </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic overview of a short range RF and object exchange (OBEX) enabled client terminal (hereinafter called a &ldquo;client&rdquo;) according to one embodiment of the invention. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Client Systemization </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In one non-limiting example embodiment, the client <highlight><bold>101</bold></highlight> may comprise a clock <highlight><bold>103</bold></highlight>, central processing unit (CPU) <highlight><bold>102</bold></highlight>, a memory <highlight><bold>105</bold></highlight>, a power source <highlight><bold>104</bold></highlight>, input <highlight><bold>108</bold></highlight>, <highlight><bold>109</bold></highlight> and output <highlight><bold>110</bold></highlight>, <highlight><bold>111</bold></highlight> (I/O) components <highlight><bold>112</bold></highlight>, <highlight><bold>105</bold></highlight>, <highlight><bold>107</bold></highlight>. The power source <highlight><bold>104</bold></highlight> provides power to the client. One of the I/O components is preferably a Bluetooth chip <highlight><bold>106</bold></highlight> such as Cambridge Silicon Radio Inc.&apos;s BlueCore IC and Bluetooth transceiver <highlight><bold>107</bold></highlight> capable of transmitting and receiving Bluetooth protocol communications. It is to be understood that the use of Bluetooth components/protocols in the exemplary embodiment is intended to be illustrative rather than limiting, and that therefore other short range radio frequency technologies may alternatively be employed. Optionally, the client may also employ other wireless protocol transceivers <highlight><bold>112</bold></highlight> such as those employed for cellular telecommunications. Conventionally, although not necessarily, the client components are all interconnected and/or communicating through a system bus <highlight><bold>177</bold></highlight>. The system clock <highlight><bold>103</bold></highlight> typically has a crystal oscillator and provides a base signal. The clock is typically coupled to the system bus and various means that will increase or decrease the base operating frequency for other components interconnected in the client. The clock and various components in the client drive signals embodying information throughout the client. Such transmission and reception of signals embodying information throughout the client may be commonly referred to as communications. These communicative signals may further be transmitted, received, and the cause of return and/or reply signal communications beyond the instant client to: communications networks, input devices, computer systems (e.g., servers), bridges, other clients, peripheral devices, and/or the like. Of course, any of the above components may be connected directly to one another, connected to the CPU, and/or organized in numerous variations employed as exemplified by various wireless and short range RF enabled devices such as, but not limited to: cellular telephones, Portable Digital Assistants (PDAs), laptop computers, and/or the like. Optionally the client may include various input/output devices, which are also disposed in communication with the CPU through the system bus and/or directly. Such input devices may include a microphone <highlight><bold>108</bold></highlight>, an input keypad <highlight><bold>109</bold></highlight>, a touch sensitive screen (not shown), and/or like. Output devices may include an LCD <highlight><bold>110</bold></highlight> and a speaker <highlight><bold>111</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> CPU </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The CPU <highlight><bold>102</bold></highlight> comprises at least one data processor adequate to execute program modules for executing user and/or system-generated requests. The CPU may be a microprocessor such as the Intel Pentium Processor and/or the like. The CPU interacts with memory through signal passing through conductive conduits to execute stored program code according to conventional data processing techniques. Such signal passing facilitates communication within the communication networks and beyond through various interfaces. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Memory </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> It is to be understood that the client may employ various forms of memory <highlight><bold>105</bold></highlight>. In a typical configuration, memory <highlight><bold>105</bold></highlight> will include ROM, RAM, and possibly a fixed storage device, e.g., a hard disk drive. Also, the Bluetooth chip <highlight><bold>106</bold></highlight> may contain various Bluetooth protocols within its own memory that may be provided to either the CPU <highlight><bold>102</bold></highlight> and/or memory <highlight><bold>105</bold></highlight>. Generally, any mechanization and/or embodiment allowing a processor to affect the storage and/or retrieval of information is regarded as memory <highlight><bold>105</bold></highlight>. Thus, a client generally requires and makes use of memory. However, memory is a fungible technology and resource, thus, any number of memory embodiments may be employed in lieu of or in concert with one another. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Module Collection </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The memory <highlight><bold>105</bold></highlight> may contain a collection of program modules and/or data such as, but not limited to: an operating system module <highlight><bold>130</bold></highlight> (operating system); an OBEX client application <highlight><bold>121</bold></highlight>; Generic Object Exchange Profile(s) (GOEP), which may also serve as a Bluetooth profile; memory buffers <highlight><bold>123</bold></highlight>; cellular communication protocols; Bluetooth protocol stack <highlight><bold>124</bold></highlight>, other short range radio frequency protocols and/or the like. Bluetooth protocol stack may include a Link Manager (LM) <highlight><bold>174</bold></highlight>, a Logical Link Control and Application Protocol (L2CAP) <highlight><bold>175</bold></highlight>, a Service Discovery Protocol (SDP) <highlight><bold>176</bold></highlight>, RFCOMM <highlight><bold>177</bold></highlight> (i.e., a serial line emulation protocol), and/or the like. Although non-conventional software modules such as those in the module collection, typically and preferably, are stored in memory <highlight><bold>105</bold></highlight>, they may also be loaded and/or stored in memory such as: peripheral devices, ROM, remote storage facilities through a communications network, various forms of memory, and/or the like. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Operating System </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The operating system module <highlight><bold>130</bold></highlight> is executable program code facilitating the operation of the client. Typically, the operating system facilitates access of I/O, network interfaces, peripheral devices, storage devices, and/or the like. The operating system also may provide user interface functionality allowing the user to interact with the client. An exemplary client operating system is Linux. An operating system may communicate to and/or with other modules in a module collection, including itself, and/or facilities of the like. Conventionally, the operating system communicates with other program modules, user interfaces, and/or the like. For example, the operating system may contain, communicate, generate, obtain, and/or provide program module, system, user, and/or data communications, requests, and/or responses. The operating system, once executed by the CPU, may enable the interaction with communications networks, data, I/O, peripheral devices, program modules, memory, user input devices, and/or the like. Preferably, the operating system provides communications protocols that allow the client to communicate with other entities through a communications network <highlight><bold>144</bold></highlight>. Various communication protocols may be used by the client as a subcarrier transport mechanism for interacting with other short range RF enabled devices, such as, but not limited to: TCP/IP <highlight><bold>122</bold></highlight>, Bluetooth (i.e., via RFCOMM), OBEX <highlight><bold>121</bold></highlight>, and/or the like. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Bluetooth protocols </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In memory <highlight><bold>105</bold></highlight> various Bluetooth protocols <highlight><bold>124</bold></highlight> and/or other short range RF protocols are stored. The Bluetooth protocols may include a link manager protocol <highlight><bold>174</bold></highlight> (hereinafter &ldquo;LM&rdquo;). The link manager software runs on the CPU in the client to manage communications between itself and other Bluetooth devices. Another protocol is the Service Discovery Protocol <highlight><bold>176</bold></highlight> (hereinafter &ldquo;SDP&rdquo;). After the connection of a Bluetooth client with another device, the Service Discovery Protocol enables the querying and identification of the abilities of other Bluetooth devices. Another protocol is the Logical Link Control and Adaptation Protocol <highlight><bold>175</bold></highlight> (hereinafter &ldquo;L2CAP&rdquo;). The L2CAP provides multiplexing, packet segmentation and reassembly of data as it&apos;s communicated between the client and other Bluetooth enabled devices. Another protocol held in memory <highlight><bold>105</bold></highlight> is the RFCOMM which is a serial line emulation protocol that enables Bluetooth devices to intercommunicate by emulating a serial line. These various protocols interact to encode and decode data as given by the CPU through a base band <highlight><bold>107</bold></highlight>. LM and L2CAP run directly on top of base band <highlight><bold>107</bold></highlight>. RFCOMM and SDP run on top of L2CAP. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Furthermore, within the RAM <highlight><bold>105</bold></highlight> is an Object Exchange (hereinafter &ldquo;OBEX&rdquo;) client application <highlight><bold>121</bold></highlight>. The client application creates OBEX requests based on user input into the client device and receives and interprets OBEX responses from an OBEX server <highlight><bold>199</bold></highlight>. OBEX is a session layer protocol that was developed to enable the exchange of objects in a simple and spontaneous manner. OBEX enables object exchange services similar to HTTP used in the World Wide Web (the web), however, OBEX requires substantially less resources to run. The OBEX client application enables the client to exchange objects and to communicate over the RFCOMM. Further, the memory may contain a Generic Object Exchange Profile (hereinafter &ldquo;GOEP&rdquo; or &ldquo;Profile&rdquo;) <highlight><bold>125</bold></highlight>. GOEP specifies a manner in which Bluetooth devices may support object exchange facilities including File Transfer Profile, Object Push Profile and Synchronization Profile. The GOEP specification allows Bluetooth devices to interoperate by defining interoperability requirements for the applications and the higher Bluetooth protocol layers (i.e., L2CAP, RFCOMM, etc.). Furthermore, the memory <highlight><bold>105</bold></highlight> may provide an area that will act as a buffer <highlight><bold>123</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The Client <highlight><bold>101</bold></highlight> may communicate through communications network <highlight><bold>144</bold></highlight> wirelessly <highlight><bold>133</bold></highlight> to eventually reach an OBEX server <highlight><bold>199</bold></highlight>. This is facilitated by an OBEX bridge <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="7"><number>&lsqb;0046&rsqb;</number> OBEX Bridge for Short Range RF Communications </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> details the schematic overview of a short range RF enabled OBEX bridge (hereinafter &ldquo;bridge&rdquo;) according to one embodiment of the invention. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> OBEX Bridge Systemization </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In one non-limiting example embodiment, the bridge <highlight><bold>250</bold></highlight> may comprise a clock <highlight><bold>203</bold></highlight>, central processing unit (CPU) <highlight><bold>202</bold></highlight>, a memory <highlight><bold>205</bold></highlight>, a power source <highlight><bold>204</bold></highlight>, I/O components <highlight><bold>220</bold></highlight>, <highlight><bold>207</bold></highlight>. The power source <highlight><bold>104</bold></highlight> provides power to the bridge. One of the I/O components is a Bluetooth chip <highlight><bold>206</bold></highlight> such as Cambridge Silicon Radio Inc.&apos;s BlueCore IC and Bluetooth transceiver <highlight><bold>207</bold></highlight> capable of transmitting and receiving Bluetooth protocol communications. As discussed above in connection with &ldquo;Client Systemization&rdquo; (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>), the use of Bluetooth components/protocols in the exemplary embodiment is intended to be illustrative rather than limiting, and that therefore other short range RF technologies may alternatively be employed. Conventionally, although not necessarily, the client components are all interconnected and/or communicating through a system bus <highlight><bold>277</bold></highlight>. The system clock <highlight><bold>203</bold></highlight> typically has a crystal oscillator and provides a base signal. The clock is typically coupled to the system bus and various means that will increase or decrease the base operating frequency for other components interconnected in the bridge. The clock and various components in the client drive signals embodying information throughout the client. Such transmission and reception of signals embodying information throughout the client may be commonly referred to as communications. These communicative signals may further be transmitted, received, and the cause of return and/or reply signal communications beyond the instant bridge to: communications networks, input devices, computer systems (e.g., servers), peripheral devices, clients, and/or the like. Of course, any of the above components may be connected directly to one another, connected to the CPU, and/or organized in numerous variations employed as exemplified by various short range RF enabled computing devices. Optionally the client may include various input/output devices, which are also disposed in communication with the CPU through the system bus and/or directly. The Bluetooth module <highlight><bold>206</bold></highlight> enables wireless communications through a wireless transceiver <highlight><bold>207</bold></highlight>, while a network interface <highlight><bold>220</bold></highlight> such as an Ethernet card, an ISDN card, a DSL card, and/or the like enables communications <highlight><bold>266</bold></highlight> with the communications network <highlight><bold>244</bold></highlight>. Thus, the bridge <highlight><bold>250</bold></highlight> bridges short range RF wireless communications <highlight><bold>233</bold></highlight>, <highlight><bold>207</bold></highlight> with network communications <highlight><bold>220</bold></highlight>, <highlight><bold>266</bold></highlight>, <highlight><bold>244</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> CPU </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The CPU <highlight><bold>102</bold></highlight> comprises at least one data processor adequate to execute program modules for executing user and/or system-generated requests. The CPU may be a microprocessor such as the Intel Pentium Processor and/or the like. The CPU interacts with memory through signal passing through conductive conduits to execute stored program code according to conventional data processing techniques. Such signal passing facilitates communication within the communication networks and beyond through various interfaces. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Memory </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> It is to be understood that the bridge may employ various forms of memory <highlight><bold>205</bold></highlight>. In a typical configuration, memory <highlight><bold>205</bold></highlight> will include ROM, RAM, and possibly a fixed storage device, e.g., a hard disk drive. Also, the Bluetooth chip <highlight><bold>206</bold></highlight> may contain various Bluetooth protocols within its own memory that may be provided to either the CPU <highlight><bold>102</bold></highlight> and/or memory <highlight><bold>105</bold></highlight>. Generally, any mechanization and/or embodiment allowing a processor to affect the storage and/or retrieval of information is regarded as memory <highlight><bold>105</bold></highlight>. Thus, a bridge generally requires and makes use of memory. However, memory is a fungible technology and resource, thus, any number of memory embodiments may be employed in lieu of or in concert with one another. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Module Collection </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The memory <highlight><bold>205</bold></highlight> may contain a collection of program modules and/or data such as, but not limited to: an operating system module <highlight><bold>230</bold></highlight> (operating system); an OBEX bridge application <highlight><bold>221</bold></highlight>; TCP/IP stack <highlight><bold>222</bold></highlight>; Generic Object Exchange Profile(s) (GOEP), which may also serve as a Bluetooth profile; memory buffers <highlight><bold>223</bold></highlight>; cellular communication protocols; Bluetooth protocol stack <highlight><bold>224</bold></highlight>, other short range RF protocols, and/or the like. Bluetooth protocol stack may include a Link Manager protocol (LM) <highlight><bold>274</bold></highlight>, a Logical Link Control and Application Protocol (L2CAP) <highlight><bold>275</bold></highlight>, a Service Discovery Protocol (SDP) <highlight><bold>276</bold></highlight>, RFCOMM <highlight><bold>177</bold></highlight> (i.e., a serial line emulation protocol), and/or the like. Although non-conventional software modules such as those in the module collection, typically and preferably, are stored in memory <highlight><bold>205</bold></highlight>, they may also be loaded and/or stored in memory such as: peripheral devices, ROM, remote storage facilities through a communications network, various forms of memory, and/or the like. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Operating System </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The operating system module <highlight><bold>230</bold></highlight> is executable program code facilitating the operation of the bridge. Typically, the operating system facilitates access of I/O, network interfaces, peripheral devices, storage devices, and/or the like. The operating system also may provide user interface functionality allowing an administrator to interact with the bridge. An exemplary bridge operating system is Linux. An operating system may communicate to and/or with other modules in a module collection, including itself, and/or facilities of the like. Conventionally, the operating system communicates with other program modules, user interfaces, and/or the like. For example, the operating system may contain, communicate, generate, obtain, and/or provide program module, system, user, and/or data communications, requests, and/or responses. The operating system, once executed by the CPU, may enable the interaction with communications networks, data, I/O, peripheral devices, program modules, memory, user input devices, and/or the like. Preferably, the operating system provides communications protocols that allow the client to communicate with other entities through a communications network <highlight><bold>244</bold></highlight>. Various communication protocols may be used by the bridge as a subcarrier transport mechanism for interacting with other short range RF enabled devices, such as, but not limited to: Bluetooth (i.e., via RFCOMM), multicast, OBEX <highlight><bold>121</bold></highlight>, TCP/IP <highlight><bold>122</bold></highlight>, UDP, unicast, and/or the like. The TCP/IP stack enables TCP/IP communications through the network interface <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Bluetooth protocols </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In memory <highlight><bold>205</bold></highlight> various Bluetooth protocols <highlight><bold>224</bold></highlight> and/or other short range RF protocols are stored. The Bluetooth protocols may include a LM protocol <highlight><bold>274</bold></highlight>, SDP <highlight><bold>276</bold></highlight>, L2CAP <highlight><bold>275</bold></highlight>, RFCOMM <highlight><bold>277</bold></highlight>, and Baseband as has already been discussed above. The link manager software runs on the CPU in the bridge to manage communications between itself and other Bluetooth devices such as clients <highlight><bold>101</bold></highlight>. After the connection of the Bluetooth bridge with another device, the Service Discovery Protocol enables the querying and identification of the abilities of other Bluetooth devices. These various protocols interact to encode and decode data as given by the CPU through a base band <highlight><bold>207</bold></highlight>. LM and L2CAP run directly on top of base band <highlight><bold>207</bold></highlight>. RFCOMM and SDP run on top of L2CAP. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Furthermore, within the memory <highlight><bold>205</bold></highlight> is an OBEX bridge application <highlight><bold>221</bold></highlight>. The bridge application obtains information from OBEX clients <highlight><bold>101</bold></highlight> and further relays them to OBEX servers <highlight><bold>299</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The OBEX bridge <highlight><bold>250</bold></highlight> communicates via the Bluetooth transceiver <highlight><bold>207</bold></highlight> with a client <highlight><bold>101</bold></highlight> wirelessly <highlight><bold>233</bold></highlight>. Furthermore, the OBEX bridge, via the network interface <highlight><bold>220</bold></highlight>, is disposed in communication <highlight><bold>266</bold></highlight> with a communications network <highlight><bold>244</bold></highlight> which enables communications <highlight><bold>298</bold></highlight> with an OBEX server <highlight><bold>299</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="7"><number>&lsqb;0062&rsqb;</number> OBEX Server </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic overview of an OBEX server according to one embodiment of the invention. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> OBEX Server Systemization </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In one non-limiting example embodiment, the OBEX server <highlight><bold>399</bold></highlight> may comprise a clock <highlight><bold>303</bold></highlight>, central processing unit (CPU) <highlight><bold>302</bold></highlight>, a memory <highlight><bold>305</bold></highlight>, a power source <highlight><bold>304</bold></highlight>, I/O components <highlight><bold>380</bold></highlight>, <highlight><bold>381</bold></highlight>, <highlight><bold>382</bold></highlight>, <highlight><bold>320</bold></highlight>. The power source <highlight><bold>304</bold></highlight> provides power to the OBEX server. The I/O interface <highlight><bold>380</bold></highlight> may be any number of busses that allow for the interconnection of peripheral and input output devices, such as, but not limited to a keyboard <highlight><bold>382</bold></highlight>, a monitor <highlight><bold>381</bold></highlight>, a network interface <highlight><bold>320</bold></highlight>, and/or the like. Conventionally, although not necessarily, the client components are all interconnected and/or communicating through a system bus <highlight><bold>377</bold></highlight>. The system clock <highlight><bold>303</bold></highlight> typically has a crystal oscillator and provides a base signal. The clock is typically coupled to the system bus and various means that will increase or decrease the base operating frequency for other components interconnected in the bridge. The clock and various components in the client drive signals embodying information throughout the client. Such transmission and reception of signals embodying information throughout the client may be commonly referred to as communications. These communicative signals may further be transmitted, received, and the cause of return and/or reply signal communications beyond the instant bridge to: communications networks, input devices, other computer systems (e.g., servers), peripheral devices, bridges, and/or the like. Of course, any of the above components may be connected directly to one another, connected to the CPU, and/or organized in numerous variations employed as exemplified by various computer systems and servers. Optionally the client may include various input/output devices, which are also disposed in communication with the CPU through the system bus and/or directly. The network interface <highlight><bold>320</bold></highlight> may be an Ethernet card, an ISDN card, a DSL card, and/or the like enabling communications <highlight><bold>398</bold></highlight> with the communications network <highlight><bold>344</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> CPU </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The CPU <highlight><bold>102</bold></highlight> comprises at least one data processor adequate to execute program modules for executing user and/or system-generated requests. The CPU may be a microprocessor such as the Intel Pentium Processor and/or the like. The CPU interacts with memory through signal passing through conductive conduits to execute stored program code according to conventional data processing techniques. Such signal passing facilitates communication within the communication networks and beyond through various interfaces. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Memory </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> It is to be understood that the OBEX server may employ various forms of memory <highlight><bold>305</bold></highlight>. In a typical configuration, memory <highlight><bold>305</bold></highlight> will include ROM, RAM, and a fixed storage device <highlight><bold>340</bold></highlight>, e.g., a hard disk drive. Generally, any mechanization and/or embodiment allowing a processor to affect the storage and/or retrieval of information is regarded as memory <highlight><bold>305</bold></highlight>. Thus, an OBEX server generally requires and makes use of memory. However, memory is a fungible technology and resource, thus, any number of memory embodiments may be employed in lieu of or in concert with one another. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Module Collection </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The memory <highlight><bold>305</bold></highlight> may contain a collection of program modules and/or data such as, but not limited to: an operating system module <highlight><bold>330</bold></highlight> (operating system); an OBEX server application <highlight><bold>321</bold></highlight>; TCP/IP stack <highlight><bold>322</bold></highlight>; and OBEX file content <highlight><bold>341</bold></highlight>, which may be stored in the storage device <highlight><bold>340</bold></highlight> and retrieved into memory <highlight><bold>305</bold></highlight> as needed. The OBEX server application. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> OBEX Server Application </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> An OBEX Server Application module <highlight><bold>321</bold></highlight> is stored program code that is executed by the CPU. The OBEX server may be a conventional OBEX information server such as, but not limited to, OpenOBEX. Optionally, the information server allows for the execution of program modules through facilities such as C&plus;&plus;, Java, JavaScript, ActiveX, Common Gateway Interface (CGI) scripts, Active Server Page (ASP), and/or the like. Execution of these program modules in general is required in order to produce dynamic content (equivalent to use as in web servers). Optionally, the information server supports secure communications protocols such as, but not limited to, File Transfer Protocol (FTP); HyperText Transfer Protocol (HTTP); Object Exchange (OBEX) protocol, Secure Hypertext Transfer Protocol (HTTPS), Secure Socket Layer (SSL), and/or the like. Conventionally, an OBEX server provides results in the form of exchange objects, and allows for the manipulated generation of exchange objects through interaction with other program modules. An OBEX server may communicate to and/or with other modules in a module collection, including itself, and/or facilities of the like. Most frequently, the OBEX server communicates with operating systems, other program modules, user interfaces, and/or the like. An information server may contain, communicate, generate, obtain, and/or provide program module, system, user, and/or data communications, requests, and/or responses. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Operating System </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The operating system module <highlight><bold>330</bold></highlight> is executable program code facilitating the operation of the OBEX server. Typically, the operating system facilitates access of I/O, network interfaces, peripheral devices, storage devices, and/or the like. The operating system also may provide user interface functionality allowing an user to interact with the bridge. The operating system preferably is a conventional product such as Apple Macintosh OS X Server, AT&amp;T Plan 9, Microsoft Windows NT Server, Unix, and/or the like operating systems. Preferably, the operating system is highly fault tolerant, scalable, and secure. An operating system may communicate to and/or with other modules in a module collection, including itself, and/or facilities of the like. Conventionally, the operating system communicates with other program modules, user interfaces, and/or the like. For example, the operating system may contain, communicate, generate, obtain, and/or provide program module, system, user, and/or data communications, requests, and/or responses. The operating system, once executed by the CPU, may enable the interaction with communications networks, data, I/O, peripheral devices, program modules, memory, user input devices, and/or the like. Preferably, the operating system provides communications protocols that allow the client to communicate with other entities through a communications network <highlight><bold>344</bold></highlight>. Various communication protocols may be used by the bridge as a subcarrier transport mechanism for interacting with other devices, such as, but not limited to: multicast, OBEX <highlight><bold>121</bold></highlight>, TCP/IP <highlight><bold>122</bold></highlight>, UDP, unicast, and/or the like. The TCP/IP stack enables TCP/IP communications through the network interface <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The OBEX server is disposed in communication <highlight><bold>398</bold></highlight> with a communications network <highlight><bold>344</bold></highlight> via the network interface <highlight><bold>320</bold></highlight>. This enables communications <highlight><bold>366</bold></highlight> with the OBEX bridge <highlight><bold>250</bold></highlight> which is further disposed in communication <highlight><bold>333</bold></highlight> with an OBEX client <highlight><bold>101</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="7"><number>&lsqb;0077&rsqb;</number> OBEX Client-Bridge-Server Connection </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an OBEX client-server-bridge connection <highlight><bold>400</bold></highlight> according to one embodiment of the invention and provides an exemplary data flow diagram. The data flows are between an OBEX client <highlight><bold>401</bold></highlight>, an OBEX bridge <highlight><bold>450</bold></highlight> and an OBEX server <highlight><bold>499</bold></highlight>. The OBEX client has come within proximity of OBEX bridge <highlight><bold>450</bold></highlight> to establish a short range RF communication connection <highlight><bold>433</bold></highlight>, such as Bluetooth, via the BaseBand <highlight><bold>406</bold></highlight>. The OBEX client is running an OBEX client application <highlight><bold>121</bold></highlight>. The OBEX client application creates certain data requests in OBEX format. Those requests are processed by the client&apos;s CPU employing short range RF protocols, such as Bluetooth, into RFCOMM data blocks <highlight><bold>423</bold></highlight><highlight><italic>a</italic></highlight>. The Link Manager <highlight><bold>428</bold></highlight><highlight><italic>a </italic></highlight>and the L2CAP <highlight><bold>475</bold></highlight><highlight><italic>a </italic></highlight>help take the RFCOMM encoded OBEX communications and provide those as data to a Baseband transceiver <highlight><bold>406</bold></highlight><highlight><italic>a </italic></highlight>which will communicate via Bluetooth protocols to an OBEX bridge <highlight><bold>450</bold></highlight> by establishing a connection to the OBEX bridge&apos;s Baseband transceiver <highlight><bold>406</bold></highlight><highlight><italic>b. </italic></highlight>The received data signals follow an inverse route in the OBEX bridge; the RF communications received from the OBEX client <highlight><bold>401</bold></highlight> by the OBEX bridge <highlight><bold>450</bold></highlight> in the OBEX bridge&apos;s Baseband facility <highlight><bold>406</bold></highlight><highlight><italic>b </italic></highlight>are then decoded by the LM <highlight><bold>478</bold></highlight><highlight><italic>b </italic></highlight>and the L2CAP <highlight><bold>475</bold></highlight><highlight><italic>b </italic></highlight>up into a serial data format via the RFCOMM <highlight><bold>423</bold></highlight><highlight><italic>b </italic></highlight>resulting in the original OBEX communication from the client <highlight><bold>401</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> For each OBEX client establishing a connection <highlight><bold>433</bold></highlight>, the OBEX bridge <highlight><bold>450</bold></highlight> creates a handle to the communications being provided via RFCOMM <highlight><bold>423</bold></highlight><highlight><italic>b </italic></highlight>channel (typically the handle is a pointer that references an area of memory of a memory buffer <highlight><bold>223</bold></highlight>) and assigns and associates an internal, unique IP address to that handle. Thus, the OBEX bridge creates and maintains a table data-structure of at least two columns (bridge table) <highlight><bold>489</bold></highlight> comprising a handle to an RFCOMM channel established from a client communication connection (client RFCOMM handle) <highlight><bold>487</bold></highlight> and an associated, generated, internal IP address (client IP address) <highlight><bold>488</bold></highlight>. The bridge table may be implemented using various standard data structures, such as an array, hash, (linked) list, struct, and/or the like. Such data structures may be stored in memory and/or in (structured) files. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The OBEX bridge application <highlight><bold>421</bold></highlight> then obtains the OBEX data request that was originally generated by the client <highlight><bold>121</bold></highlight> by way of client RFCOMM handles (for data obtained from a particular client <highlight><bold>401</bold></highlight>). Upon obtaining the OBEX data request from the memory buffer, the OBEX bridge application <highlight><bold>421</bold></highlight> then encapsulates the OBEX data request into TCP/IP packets. These packets are then sent to a TCP/IP layer <highlight><bold>422</bold></highlight><highlight><italic>a, </italic></highlight>which further provides the TCP/IP communications as a data link <highlight><bold>407</bold></highlight><highlight><italic>a, </italic></highlight>which is eventually sent over a physical carrier medium such as Ethernet <highlight><bold>420</bold></highlight><highlight><italic>a. </italic></highlight>When generating the TCP/IP packet headers, the OBEX bridge stamps the originating IP address as being the client IP address <highlight><bold>488</bold></highlight> that was generated and associated with a particular client RFCOMM handle <highlight><bold>487</bold></highlight>; the OBEX bridge application may do so by looking to the bridge table <highlight><bold>489</bold></highlight>. When determining the destination IP address for the OBEX data request, the OBEX bridge application <highlight><bold>421</bold></highlight> may consult an internal OBEX server lookup list. This lookup list is comprised of IP addresses. The list may contain a single entry, or a plurality of IP addresses. The choice of which OBEX server is chosen from the lookup list may be governed by any number of load balancing and/or context sensitive heuristics. For example, based on the client&apos;s GOEP profile and OBEX server specializing in File Transfer Profile, Object Push Profile or Synchronization Profile may be specified. In another non-limiting example embodiment, an OBEX server with the lowest usage load may be employed. The look-up list may be implemented using various standard data structures, such as an array, hash, (linked) list, struct, and/or the like. Such data structures may be stored in memory and/or in (structured) files. Upon stamping the origination and destination IP addresses in the resulting TCP/IP packets, the TCP/IP communications from the OBEX bridge are communicated <highlight><bold>466</bold></highlight> by the OBEX bridges network interface <highlight><bold>420</bold></highlight><highlight><italic>a. </italic></highlight>The OBEX communications from the OBEX bridge <highlight><bold>421</bold></highlight> are then communicated <highlight><bold>466</bold></highlight> over a communications network <highlight><bold>344</bold></highlight> to a network interface <highlight><bold>420</bold></highlight><highlight><italic>b </italic></highlight>on the OBEX server <highlight><bold>499</bold></highlight>. Those communications are in turn provided to the data link <highlight><bold>407</bold></highlight><highlight><italic>b </italic></highlight>of the OBEX server <highlight><bold>499</bold></highlight> and provided in the form of TCP/IP packets <highlight><bold>422</bold></highlight><highlight><italic>b, </italic></highlight>which are then interpreted by the OBEX server application software <highlight><bold>221</bold></highlight>. The OBEX server application <highlight><bold>221</bold></highlight> then can process the OBEX encoded data and requests and provide back results and responses to the client <highlight><bold>401</bold></highlight> via the bridge <highlight><bold>450</bold></highlight>. Thus, the OBEX response signal from the OBEX server application <highlight><bold>221</bold></highlight> take the inverse path by which it originated. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Thus, the connection between an OBEX client and an OBEX bridge <highlight><bold>433</bold></highlight> that occur via Baseband <highlight><bold>406</bold></highlight> RF signals are provided by a conceptual RFCOMM channel <highlight><bold>423</bold></highlight>, <highlight><bold>433</bold></highlight><highlight><italic>b. </italic></highlight>Furthermore, the TCP connection between the OBEX bridge and OBEX server <highlight><bold>466</bold></highlight> that occur via network interfaces <highlight><bold>420</bold></highlight> and a communications network <highlight><bold>344</bold></highlight> are provided by a conceptual TCP/IP connection <highlight><bold>466</bold></highlight><highlight><italic>b. </italic></highlight>Thus, the RFCOMM channel between the client and bridge plus the TCP/IP connection between the bridge and server create a conceptual OBEX connection <highlight><bold>400</bold></highlight>. It&apos;s important to note that this OBEX connection can take place over a communications network and the OBEX server does not have to be placed in proximity with the OBEX client, rather communications can take place through the OBEX bridge through a communications network such as the Internet. </paragraph>
<paragraph id="P-0082" lvl="7"><number>&lsqb;0082&rsqb;</number> OBEX Server </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> details a flow diagram of one example communications flow between an OBEX client, OBEX bridge and an OBEX server. Box <highlight><bold>501</bold></highlight> shows that an OBEX client application <highlight><bold>121</bold></highlight> is instantiated. The application may be instantiated by invoking commands via an input keyboard or voice or other input means that will cause the client application to be executed by the client&apos;s CPU. In one non-limiting example the OBEX client application is instantiated as soon as the client is turned on. Upon this instantiation of the OBEX client application box <highlight><bold>502</bold></highlight> shows the client sets up a short range RF connection, such as Bluetooth, with the OBEX bridge as has been discussed in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Box <highlight><bold>503</bold></highlight> shows that upon establishing the communications between the client and the OBEX bridge application, the client uses the service discovery protocol to inquire about other short range RF device&apos;s capabilities and the associated GEOP parameters (in this case the Access Point (AP), i.e., the AP including an OBEX bridge, which contains the bridge application). Box <highlight><bold>504</bold></highlight> shows that the OBEX application bridge <highlight><bold>421</bold></highlight> responds using service discovery protocol giving out the parameters needed for the GOEP profile. Box <highlight><bold>505</bold></highlight> shows the client initiates protocols based on the GOEP profile it received from the server via the OBEX bridge. Box <highlight><bold>506</bold></highlight> shows that an RFCOMM channel is formed between the client and the OBEX bridge application. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Box <highlight><bold>507</bold></highlight> shows that upon the formation of an RFCOMM channel between the client and the bridge, the bridge internally assigns an IP address and binds it to a client RFCOMM handle. Box <highlight><bold>508</bold></highlight> shows that upon generating and associating an internal IP address to the client RFCOMM handle that the OBEX bridge thereafter establishes a TCP/IP connection with the remote OBEX server. Box <highlight><bold>509</bold></highlight> shows that after the establishment of a TCP/IP connection with the OBEX server, the OBEX client may then begin sending data to the OBEX bridge through the RFCOMM connection. Box <highlight><bold>510</bold></highlight> shows that the bridge receives data from the client via the RFCOMM connection and encapsulates it into TCP/IP packets. Therefore the OBEX application bridge <highlight><bold>421</bold></highlight> routes data from the RFCOMM communications <highlight><bold>433</bold></highlight><highlight><italic>b </italic></highlight>of the client to the TCP/IP socket in the OBEX bridge. These TCP/IP encapsulated packets are sent to the OBEX bridge&apos;s network interface <highlight><bold>420</bold></highlight><highlight><italic>a. </italic></highlight>After the OBEX application bridge <highlight><bold>421</bold></highlight> encodes the data into TCP/IP packets, the data is sent to the OBEX server wherein an OBEX server application <highlight><bold>221</bold></highlight> will thereafter obtain the data and process the OBEX requests. Any responses from the OBEX server will be sent back to the bridge via TCP/IP communications through the OBEX server network interface <highlight><bold>420</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Box <highlight><bold>511</bold></highlight> shows that the responses from the OBEX server <highlight><bold>499</bold></highlight> that are destined for the OBEX client <highlight><bold>401</bold></highlight> are received by the OBEX bridge <highlight><bold>450</bold></highlight> in the corresponding TCP/IP address that was generated by the OBEX bridge. The OBEX bridge uses the bridge table <highlight><bold>489</bold></highlight> to look up the client RFCOMM handle <highlight><bold>487</bold></highlight> associated to the client IP address <highlight><bold>488</bold></highlight> that received the communications from the OBEX server. Next, the bridge encapsulates the data that was received in the form of TCP/IP packets from the OBEX server and routes that data from the TCP/IP socket to the RFCOMM handle. This routing is accomplished by a lookup table that is established upon the creation of an RFCOMM handle as shown in box <highlight><bold>507</bold></highlight> and in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Thus, the bridge table <highlight><bold>489</bold></highlight> acts as a routing table to ensure that information flows properly between each client&apos;s data request and any respective results from an OBEX server. This is important in an environment where there are multiple OBEX and short range RF enabled clients that are disposed in communications with the OBEX bridge. Thus, upon performing a look up for the correct RFCOMM handle, the TCP/IP information obtained from the OBEX server is encapsulated into RFCOMM packets. The OBEX bridge then sends the RFCOMM encoded data through a wireless Baseband channel back to the client. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Box <highlight><bold>512</bold></highlight> shows that the client receives the data through the RFCOMM channel. Box <highlight><bold>513</bold></highlight> shows that boxes <highlight><bold>509</bold></highlight>, <highlight><bold>510</bold></highlight>, <highlight><bold>511</bold></highlight> and <highlight><bold>512</bold></highlight> may be repeated until the client disconnects from the RFCOMM link or the short range RF link (e.g., Bluetooth). </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Box <highlight><bold>514</bold></highlight> shows that the bridge terminates the TCP/IP connection to the remote server and releases the assigned IP address. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> It should be understood that the above description is only representative of illustrative embodiments. For the convenience of the reader, the above descriptions have focused on a representative sample of all possible embodiments, a sample that teaches the principles of the invention. The description has not attempted to exhaustively enumerate all possible variations. That alternate embodiments may not have been presented for a specific portion of the invention or that further undescribed alternate embodiments may be available for a portion is not to be considered a disclaimer of those alternate embodiments. It will be appreciated that many of those undescribed embodiments incorporate the same principles of the invention and others are equivalent. Thus, it is to be understood that the embodiments and variations shown and described herein are merely illustrative of the principles of this invention and that various modifications may be implemented without departing from the scope and spirit of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of wireless communication between an OBEX client and OBEX server over a communications network, comprising: 
<claim-text>receiving the OBEX encoded communications at a radio frequency enabled OBEX bridge from an OBEX client; </claim-text>
<claim-text>determining a destination IP address to send the received OBEX encoded communications; </claim-text>
<claim-text>sending the received OBEX encoded communications from the radio frequency enabled OBEX bridge to an OBEX server at the determined destination IP address via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the radio frequency enabled OBEX bridge is Bluetooth enabled. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>receiving OBEX encoded data responses from the OBEX server via IP; and </claim-text>
<claim-text>routing the OBEX encoded data responses to the OBEX client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A system for wireless communication between an OBEX client and OBEX server over a communications network, comprising: 
<claim-text>means to receive the OBEX encoded communications at a radio frequency enabled OBEX bridge from an OBEX client; </claim-text>
<claim-text>means to determine a destination IP address to send the received OBEX encoded communications; </claim-text>
<claim-text>means to send the received OBEX encoded communications from the radio frequency enabled OBEX bridge to an OBEX server at the determined destination IP address via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the radio frequency enabled OBEX bridge is Bluetooth enabled. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising: 
<claim-text>means to receive OBEX encoded data responses from the OBEX server via IP; and </claim-text>
<claim-text>means to route the OBEX encoded data responses to the OBEX client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A computer program stored on a computer readable medium, the program, comprising: 
<claim-text>a module to receive the OBEX encoded communications at a radio frequency enabled OBEX bridge from an OBEX client; </claim-text>
<claim-text>a module to determine a destination IP address to send the received OBEX encoded communications; </claim-text>
<claim-text>a module to send the received OBEX encoded communications from the radio frequency enabled OBEX bridge to an OBEX server at the determined destination IP address via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the radio frequency enabled OBEX bridge is Bluetooth enabled. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the OBEX server via IP; and </claim-text>
<claim-text>a module to route the OBEX encoded data responses to the OBEX client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An OBEX bridge apparatus, comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a memory, communicatively connected to the processor; </claim-text>
<claim-text>a program, stored in the memory, including, 
<claim-text>a module to receive the OBEX encoded communications at a radio frequency enabled OBEX bridge from an OBEX client; </claim-text>
<claim-text>a module to determine a destination IP address to send the received OBEX encoded communications; </claim-text>
<claim-text>a module to send the received OBEX encoded communications from the radio frequency enabled OBEX bridge to an OBEX server at the determined destination IP address via IP. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the radio frequency enabled OBEX bridge is Bluetooth enabled. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the OBEX server via IP; and </claim-text>
<claim-text>a module to route the OBEX encoded data responses to the OBEX client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method of wireless communication between an OBEX client and OBEX server over a communications network, comprising: 
<claim-text>obtaining OBEX encoded communications; </claim-text>
<claim-text>establishing a baseband communication channel using a Bluetooth GOEP profile between the OBEX client and a Bluetooth enabled OBEX bridge; </claim-text>
<claim-text>encapsulating the OBEX encoded communications into baseband communications; </claim-text>
<claim-text>providing the baseband encapsulated communications to the OBEX bridge; </claim-text>
<claim-text>assigning an internal IP address within the OBEX bridge; </claim-text>
<claim-text>binding the IP address to the baseband communication channel; </claim-text>
<claim-text>establishing a TCP/IP communication channel between the OBEX bridge and a remote OBEX server; and </claim-text>
<claim-text>routing the OBEX encoded data from the baseband channel to the TCP/IP channel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>receiving OBEX encoded data responses from the remote server through the TCP/IP channel; and </claim-text>
<claim-text>routing the OBEX encoded data responses to the baseband channel referring to the IP address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system for wireless communication between an OBEX client and OBEX server over a communications network, comprising: 
<claim-text>means to obtain OBEX encoded communications; </claim-text>
<claim-text>means to establish a baseband communication channel using a Bluetooth GOEP profile between the OBEX client and a Bluetooth enabled OBEX bridge; </claim-text>
<claim-text>means to encapsulate the OBEX encoded communications into baseband communications; </claim-text>
<claim-text>means to provide the baseband encapsulated communications to the OBEX bridge; </claim-text>
<claim-text>means to assign an internal IP address within the OBEX bridge; </claim-text>
<claim-text>means to bind the IP address to the baseband communication channel; </claim-text>
<claim-text>means to establish a TCP/IP communication channel between the OBEX bridge and a remote OBEX server; and </claim-text>
<claim-text>means to route the OBEX encoded data from the baseband channel to the TCP/IP channel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising: 
<claim-text>means to receive OBEX encoded data responses from the remote server through the TCP/IP channel; and </claim-text>
<claim-text>means to route the OBEX encoded data responses to the baseband channel referring to the IP address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer program stored on a computer readable medium, the program, comprising: 
<claim-text>a module to obtain OBEX encoded communications; </claim-text>
<claim-text>a module to establish a baseband communication channel using a Bluetooth GOEP profile between the OBEX client and a Bluetooth enabled OBEX bridge; </claim-text>
<claim-text>a module to encapsulate the OBEX encoded communications into baseband communications; </claim-text>
<claim-text>a module to provide the baseband encapsulated communications to the OBEX bridge; </claim-text>
<claim-text>a module to assign an internal IP address within the OBEX bridge; </claim-text>
<claim-text>a module to bind the IP address to the baseband communication channel; </claim-text>
<claim-text>a module to establish a TCP/IP communication channel between the OBEX bridge and a remote OBEX server; and </claim-text>
<claim-text>a module to route the OBEX encoded data from the baseband channel to the TCP/IP channel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the remote server through the TCP/IP channel; and </claim-text>
<claim-text>a module to route the OBEX encoded data responses to the baseband channel referring to the IP address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. An OBEX bridge apparatus, comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a memory, communicatively connected to the processor; </claim-text>
<claim-text>a program, stored in the memory, including, 
<claim-text>a module to obtain OBEX encoded communications; </claim-text>
<claim-text>a module to establish a baseband communication channel using a Bluetooth GOEP profile between the OBEX client and a Bluetooth enabled OBEX bridge; </claim-text>
<claim-text>a module to encapsulate the OBEX encoded communications into baseband communications; </claim-text>
<claim-text>a module to provide the baseband encapsulated communications to the OBEX bridge; </claim-text>
<claim-text>a module to assign an internal IP address within the OBEX bridge; </claim-text>
<claim-text>a module to bind the IP address to the baseband communication channel; </claim-text>
<claim-text>a module to establish a TCP/IP communication channel between the OBEX bridge and a remote OBEX server; and </claim-text>
<claim-text>a module to route the OBEX encoded data from the baseband channel to the TCP/IP channel. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the remote server through the TCP/IP channel; and </claim-text>
<claim-text>a module to route the OBEX encoded data responses to the baseband channel referring to the IP address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method of creating a data structure binding an IP address to an RFCOMM communication channel, comprising: 
<claim-text>creating a client baseband handle referring to a memory space in an OBEX bridge&apos;s memory for incoming baseband communications; </claim-text>
<claim-text>creating an internal IP address within an OBEX bridge allowing for communications to flow to and from a communications network through the IP address; </claim-text>
<claim-text>creating an entry in the memory to store the client baseband handle data type; </claim-text>
<claim-text>creating an entry in the memory to store the IP address data type; </claim-text>
<claim-text>binding the client baseband handle data type with its respective IP address data type. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A system for creating a data structure binding an IP address to an RFCOMM communication channel, comprising: 
<claim-text>means to create a client baseband handle referring to a memory space in an OBEX bridge&apos;s memory for incoming baseband communications; </claim-text>
<claim-text>means to create an internal IP address within an OBEX bridge allowing for communications to flow to and from a communications network through the IP address; </claim-text>
<claim-text>means to create an entry in the memory to store the client baseband handle data type; </claim-text>
<claim-text>means to create an entry in the memory to store the IP address data type; </claim-text>
<claim-text>means to bind the client baseband handle data type with its respective IP address data type. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A computer program stored on a computer readable medium, the program, comprising: 
<claim-text>a module to create a client baseband handle referring to a memory space in an OBEX bridge&apos;s memory for incoming baseband communications; </claim-text>
<claim-text>a module to create an internal IP address within an OBEX bridge allowing for communications to flow to and from a communications network through the IP address; </claim-text>
<claim-text>a module to create an entry in the memory to store the client baseband handle data type; </claim-text>
<claim-text>a module to create an entry in the memory to store the IP address data type; </claim-text>
<claim-text>a module to bind the client baseband handle data type with its respective IP address data type. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. An OBEX bridge apparatus, comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a memory, communicatively connected to the processor; </claim-text>
<claim-text>a program, stored in the memory, including, 
<claim-text>a module to create a client baseband handle referring to a memory space in an OBEX bridge&apos;s memory for incoming baseband communications; </claim-text>
<claim-text>a module to create an internal IP address within an OBEX bridge allowing for communications to flow to and from a communications network through the IP address; </claim-text>
<claim-text>a module to create an entry in the memory to store the client baseband handle data type; </claim-text>
<claim-text>a module to create an entry in the memory to store the IP address data type; </claim-text>
<claim-text>a module to bind the client baseband handle data type with its respective IP address data type. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A memory for access by a program module to be executed on a processor, comprising: 
<claim-text>a data structure stored in the memory, the data structure, including, 
<claim-text>a client baseband handle data type; </claim-text>
<claim-text>an IP address data type; </claim-text>
<claim-text>a binding associative reference between the client baseband handle data type and the IP address data type. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A memory for access by a program module to be executed on a processor, comprising: 
<claim-text>a data structure stored in the memory, the data structure, including, 
<claim-text>an IP packet, the packet including, 
<claim-text>an origination IP address data type, wherein the origination address is an internally created IP address generated by an OBEX bridge; </claim-text>
<claim-text>a destination IP address data type, wherein the destination IP address is determined by the OBEX bridge. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A method of wireless communication between an OBEX client and an OBEX server over a communications network, comprising: 
<claim-text>receiving at an OBEX bridge OBEX encoded communications transmitted from the OBEX client via a short range radio link; </claim-text>
<claim-text>allocating an internal address to the OBEX client at the OBEX bridge; </claim-text>
<claim-text>associating the OBEX client with the allocated internal address at the OBEX bridge; </claim-text>
<claim-text>selecting a certain OBEX server at the OBEX bridge to send the received OBEX encoded communications; </claim-text>
<claim-text>determining a destination IP address of the selected OBEX server; </claim-text>
<claim-text>sending the received OBEX encoded communications from the OBEX bridge to the selected OBEX server via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising: 
<claim-text>receiving OBEX encoded data responses from the selected OBEX server via IP; </claim-text>
<claim-text>routing the OBEX encoded data response at the OBEX bridge using said association; </claim-text>
<claim-text>transmitting the OBEX encoded data responses to the OBEX client via the short range radio link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the short range radio link is a Bluetooth link </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A system for wireless communication between an OBEX client and an OBEX server over a communications network, comprising: 
<claim-text>means to receive at an OBEX bridge OBEX encoded communications transmitted from the OBEX client via short range radio link; </claim-text>
<claim-text>means to allocate an internal address to the OBEX client at the OBEX bridge; </claim-text>
<claim-text>means to associate the OBEX client with the allocated internal address at the OBEX bridge; </claim-text>
<claim-text>means to select a certain OBEX server at the OBEX bridge to send the received OBEX encoded communications; </claim-text>
<claim-text>means to determine a destination IP address of the selected OBEX server; </claim-text>
<claim-text>means to send the received OBEX encoded communications from the OBEX bridge to the selected OBEX server via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising: 
<claim-text>means to receive OBEX encoded data responses from the selected OBEX server via IP; </claim-text>
<claim-text>means to rout the OBEX encoded data response at the OBEX bridge using said association; </claim-text>
<claim-text>means to transmit the OBEX encoded data responses to the OBEX client via short range radio link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the short range radio link is a Bluetooth link. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A computer program stored on a computer readable medium, the program, comprising: 
<claim-text>a module to receive at an OBEX bridge OBEX encoded communications transmitted from the OBEX client via short range radio link; </claim-text>
<claim-text>a module to allocate an internal address to the OBEX client at the OBEX bridge; </claim-text>
<claim-text>a module to associate the OBEX client with the allocated internal address at the OBEX bridge; </claim-text>
<claim-text>a module to select a certain OBEX server at the OBEX bridge to send the received OBEX encoded communications; </claim-text>
<claim-text>a module to determine a destination IP address of the selected OBEX server; </claim-text>
<claim-text>a module to send the received OBEX encoded communications from the OBEX bridge to the selected OBEX server via IP. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the selected OBEX server via IP; </claim-text>
<claim-text>a module to rout the OBEX encoded data response at the OBEX bridge using said association; </claim-text>
<claim-text>a module to transmit the OBEX encoded data responses to the OBEX client via short range radio link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The medium of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the short range radio link is a Bluetooth link. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. An OBEX bridge apparatus, comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a memory, communicatively connected to the processor; </claim-text>
<claim-text>a program, stored in the memory, including, 
<claim-text>a module to receive at an OBEX bridge OBEX encoded communications transmitted from the OBEX client via short range radio link; </claim-text>
<claim-text>a module to allocate an internal address to the OBEX client at the OBEX bridge; </claim-text>
<claim-text>a module to associate the OBEX client with the allocated internal address at the OBEX bridge; </claim-text>
<claim-text>a module to select a certain OBEX server at the OBEX bridge to send the received OBEX encoded communications; </claim-text>
<claim-text>a module to determine a destination IP address of the selected OBEX server; </claim-text>
<claim-text>a module to send the received OBEX encoded communications from the OBEX bridge to the selected OBEX server via IP. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, further comprising: 
<claim-text>a module to receive OBEX encoded data responses from the selected OBEX server via IP; </claim-text>
<claim-text>a module to rout the OBEX encoded data response at the OBEX bridge using said association; </claim-text>
<claim-text>a module to transmit the OBEX encoded data responses to the OBEX client via short range radio link. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the short range radio link is a Bluetooth link.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002504A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002504A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002504A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002504A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002504A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002504A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002504A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
