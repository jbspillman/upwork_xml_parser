<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005427A1-20030102-D00000.TIF SYSTEM "US20030005427A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00001.TIF SYSTEM "US20030005427A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00002.TIF SYSTEM "US20030005427A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00003.TIF SYSTEM "US20030005427A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00004.TIF SYSTEM "US20030005427A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00005.TIF SYSTEM "US20030005427A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00006.TIF SYSTEM "US20030005427A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00007.TIF SYSTEM "US20030005427A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00008.TIF SYSTEM "US20030005427A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00009.TIF SYSTEM "US20030005427A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005427A1-20030102-D00010.TIF SYSTEM "US20030005427A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005427</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896657</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/445</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>717</class>
<subclass>178000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Automated entitlement verification for delivery of licensed software</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Victor</given-name>
<middle-name>R.</middle-name>
<family-name>Herrero</family-name>
</name>
<residence>
<residence-us>
<city>Poughkeepsie</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>INTERNATIONAL BUSINESS MACHINES CORPORATION</organization-name>
<address>
<city>ARMONK</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>FLEIT, KAIN, GIBBONS,</name-1>
<name-2>GUTMAN &amp; BONGINI, P.L.</name-2>
<address>
<address-1>ONE BOCA COMMERCE CENTER</address-1>
<address-2>551 NORTHWEST 77TH STREET, SUITE 111</address-2>
<city>BOCA RATON</city>
<state>FL</state>
<postalcode>33487</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method, and computer readable medium for the central management, delivery and installation of media less software. The ordered software is packaged in such a way that only standard options are offered. The standard installation results in consistent software images across a corporation client PCs and eliminates the need of help desk involvement during installation. The software company is not involved with the burden of software distribution and tracking. Sales and the sales reports are generated and supplied in real time back to the software company. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> Not Applicable</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">PARTIAL WAIVER OF COPYRIGHT </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> All of the material in this patent application is subject to copyright protection under the copyright laws of the United States and of other countries. As of the first effective filing date of the present application, this material is protected as unpublished material. However, permission to copy this material is hereby granted to the extent that the copyright owner has no objection to the facsimile reproduction by anyone of the patent documentation or patent disclosure, as it appears in the United States Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 1. Field of The Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> This invention generally relates to the field of software purchasing, distribution and help desk workflow, and more particularly to licensed software selected, delivered and installed through a network. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> 2. Description of The Related Art </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The deployment of software is the last step in the cycle of software commerce. It suffers from all of the classical product and product distribution problems. For most products the problems encountered include, manufacturing, documentation, shipping, storage, over production, inventory shortages, and theft. However, software has some unique problems. One such problem is distribution. It&apos;s not uncommon for major software to be released more than once a year and distribution must be managed for frequent turnover where the product life is limited. In addition the distributors often are selling several competitive products. They are searching for a reason to sell one product over another product. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Once purchased the installation of the software product is often performed by consumers with limited computer skills. Many times this results in consumer confusion and frequent calls to help centers. The customer often times blames the software vendor for problems, which may be due to the particular PC being used, its configuration or the state of the co-resident software including the operating system. In a company the problems may be even worse as typically a IS (Information Services) person or department is accountable for not only all of the computers, which include hardware and software, but also the maintenance and upgrading. The employees always want the latest software and in many cases &ldquo;require&rdquo; special and unique configurations. Additionally the IS department tries to use just in time purchasing methods. Accordingly, a need exists for a efficient software deployment and installation solution to overcome the problems mentioned above. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Continuing further, there are two major developments that are influencing the software selection and deployment industry. One is the concept of very thin client, which usually means among other things, no removable media. With this type of a PC the software is installed and maintained and upgraded through a network. The second concept is the idea of &ldquo;software is a service&rdquo;. Notable here is Microsoft&apos;s .NET strategy, and SUN Microsystems&apos;s .COM efforts. With these business models the concept is that software is not bought in the classical sense but rather it is rented, or even given away. Accordingly, a need exists for a distribution method for software products, to provide distribution for normal computers, for thin clients, normal software products and also support for software that is a service. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Medium to large corporations use a centrally managed, enterprise-wide, software delivery application to distribute software to employees in an automated manner using installation packages. The software is packaged in such a way that only certain approved options are offered. This allows for the installation to take place with minimal up-front prompting of the user. The installation package is automated, and the installation performs identically for all employees. The installation package during installation will typically check for sufficient system resources on the employee&apos;s PC to stage, and perform the installation. Other checks are also performed including compatibility with the operating system, and other requisite software. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Although these centrally managed software delivery applications are useful they are not without their shortcomings. One shortcoming is the requirement to enter product keys during installation. Often times the management and security of these keys are problematic. Accordingly, a need exists for a method and a system to overcome this problem. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Another shortcoming is the requirement for users to respond to installation prompts such as which installed options to select. Installation options such as destination directories and options are required. For many inexperienced computer users, the answers to these installation questions are often not known. Moreover, different answers to installation questions among employees causes the installation package to install the software differently from system to system. Different installations across systems are much harder for support personnel to supply help and guidance. Accordingly, a need exists for a method and a system to overcome this problem. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Still, another shortcoming with the centrally managed, enterprise-wide, software delivery applications of the prior art is often times there is a need for internal or external logic associated with a software package to provide entitlement checks. The use of software entitlement checks with specialized programming and logic is expensive to deploy and expensive to maintain. The administrative costs associated with entitlement are particularly expensive. Accordingly, a need exists to overcome this problem as well. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Yet, still another shortcoming with the centrally managed, enterprise-wide, software delivery applications is the amount of communications between licensed software applications and licensed management servers being installed and the server from which the software is downloaded. Many times even after software is downloaded in the prior art systems, license information must be passed back from the application to the server. Accordingly, a need exists to overcome this shortcoming as well. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Briefly, according to the present invention, disclosed is a method, a system and computer readable medium for the selection, configuration, entitlement, delivery, installation and maintenance of software over a network. The software is download with associated scripting controls that will assure that all of the correct installation decisions and entitlement keys are entered. The software may be part of a major total upgrade bundle which includes several software product installations, or it may be a simple bug fix upgrade to existing software. This solution may be offered through a network for third party software vendors, or be part of a company wide software enterprise.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The subject matter, which is regarded as the invention, is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention will be apparent from the following detailed description taken in conjunction with the accompanying drawings. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary computer system that includes optional components, upon which the present invention can be implemented. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary software hierarchy that is executed on the hardware of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a functional blockdiagram of a network connected client and server topology according to the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of the payload that is delivered to the client as illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> according to the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram which shows the software delivery system performing the required checks, according to the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow diagram, which shows the over all ordering, delivery and installation of the requested software from a staging server, according to the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a screen shot of the selection of the desired software from a menu of software according to the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a screen shot of the license agreement, which is presented to the client, according to the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a screen shot of a page which receives the entitlement ID which will enable the down load to proceed according to the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a screen shot of the installation progress screen, according to the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF AN EMBODIMENT </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> It is important to note, that these embodiments are only examples of the many advantageous uses of the innovative teachings herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover, some statements may apply to some inventive features but not to others. In general, unless otherwise indicated, singular elements may be in the plural and visa versa with no loss of generality. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the drawing like numerals refer to like parts through several views. </paragraph>
<paragraph id="P-0028" lvl="7"><number>&lsqb;0028&rsqb;</number> Exemplary Server System </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, there is shown a block diagram <highlight><bold>100</bold></highlight> of the major electronic components of an information processing system <highlight><bold>100</bold></highlight> for the one or more servers in accordance with the invention. The electronic components include: a central processing unit (CPU) <highlight><bold>102</bold></highlight>, an Input/Output (I/O) Controller <highlight><bold>104</bold></highlight>, a mouse <highlight><bold>132</bold></highlight> a keyboard <highlight><bold>116</bold></highlight>, a system power and clock source <highlight><bold>106</bold></highlight>; display driver <highlight><bold>108</bold></highlight>; RAM <highlight><bold>110</bold></highlight>, ROM <highlight><bold>112</bold></highlight>, ASIC (application specific integrated circuit) <highlight><bold>114</bold></highlight> and a hard disk drive <highlight><bold>118</bold></highlight>. These are representative components of a computer. The general operation of a computer comprising these elements is well understood. Network interface <highlight><bold>120</bold></highlight> provides connection to a computer network such as Ethernet over TCP/IP or other popular protocol network interfaces. Optional components for interfacing to external peripherals include: a Small Computer Systems Interface (SCSI) port <highlight><bold>122</bold></highlight> for attaching peripherals; a PCMCIA slot <highlight><bold>124</bold></highlight>; and serial port <highlight><bold>126</bold></highlight>. An optional diskette drive <highlight><bold>128</bold></highlight> is shown for loading or saving code to removable diskettes <highlight><bold>130</bold></highlight>. The system <highlight><bold>100</bold></highlight> may be implemented by combination of hardware and software. Moreover, the functionality required for using the invention may be embodied in computer-readable media (such as 3.5 inch diskette <highlight><bold>130</bold></highlight>) to be used in programming an information-processing apparatus (e.g., a personal computer) to perform in accordance with the invention. </paragraph>
<paragraph id="P-0030" lvl="7"><number>&lsqb;0030&rsqb;</number> Example Software Hierarchy </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram <highlight><bold>200</bold></highlight>, illustrating the software hierarchy for the information processing system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> according to the present invention. The BIOS (Basic Input Output System) <highlight><bold>202</bold></highlight> is a set of low level of computer hardware instructions for communications between an operating system <highlight><bold>206</bold></highlight>, device driver <highlight><bold>204</bold></highlight> and hardware <highlight><bold>200</bold></highlight>. Device drivers <highlight><bold>204</bold></highlight> are hardware specific code used to communicate between and operating system <highlight><bold>206</bold></highlight> and hardware peripherals such as a CD ROM drive or printer. Operating system <highlight><bold>206</bold></highlight> is the master program that loads after BIOS <highlight><bold>202</bold></highlight> initializes, that controls and runs the hardware <highlight><bold>100</bold></highlight>. Examples of operating systems include Windows 3.1/95/98/ME/2000/NT, Unix, Macintosh, OS/2, Sun Solaris and equivalents. Applications <highlight><bold>208</bold></highlight> are software application programs written in C/C&plus;&plus;, assembler or other programming languages. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Applications <highlight><bold>208</bold></highlight> typically have several programs that are available for usage. Examples are software ordering system <highlight><bold>210</bold></highlight>, a software delivery application <highlight><bold>212</bold></highlight>, an entitlement ID database <highlight><bold>214</bold></highlight> and a deployment server application to transfer and install the ordered software <highlight><bold>216</bold></highlight>. It is noted that there may be other programs in applications <highlight><bold>208</bold></highlight> such as word-processing files, spreadsheet files and network browsers (not shown). </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Taken together these are the preferred embodiments of the present invention. There are also other software files such as information <highlight><bold>218</bold></highlight>. The information files can be such as, application <highlight><bold>1</bold></highlight> such as a word processing program <highlight><bold>220</bold></highlight>, application <highlight><bold>2</bold></highlight> such as a spread sheet program <highlight><bold>222</bold></highlight>, and text information such as a application manual <highlight><bold>224</bold></highlight>, or graphical information such as jpeg files <highlight><bold>226</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="7"><number>&lsqb;0034&rsqb;</number> Discussion Of Hardware And Software Implementation Options </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The present invention as would be known to one of ordinary skill in the art could be produced in hardware or software, or in a combination of hardware and software. However in one embodiment the invention is implemented in software. The system, or method, according to the inventive principles as disclosed in connection with the preferred embodiment, may be produced in a single computer system having separate elements or means for performing the individual functions or steps described or claimed or one or more elements or means combining the performance of any of the functions or steps disclosed or claimed, or may be arranged in a distributed computer system, interconnected by any suitable means as would be known by one of ordinary skill in art. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> According to the inventive principles as disclosed in connection with the preferred embodiment, the invention and the inventive principles are not limited to any particular kind of computer system but may be used with any general purpose computer, as would be known to one of ordinary skill in the art, arranged to perform the functions described and the method steps described. The operations of such a computer, as described above, may be according to a computer program contained on a medium for use in the operation or control of the computer, as would be known to one of ordinary skill in the art. The computer medium, which may be used to hold or contain the computer program product, may be a fixture of the computer such as an embedded memory or may be on a transportable medium such as a disk, as would be known to one of ordinary skill in the art. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The invention is not limited to any particular computer program or logic or language, or instruction but may be practiced with any such suitable program, logic or language, or instructions as would be known to one of ordinary skill in the art. Without limiting the principles of the disclosed invention any such computing system can include, inter alia, at least a computer readable medium allowing a computer to read data, instructions, messages or message packets, and other computer readable information from the computer readable medium. The computer readable medium may include non-volatile memory, such as ROM, Flash memory, floppy disk, Disk drive memory, CD-ROM, and other permanent storage. Additionally, a computer readable medium may include, for example, volatile storage such as RAM, buffers, cache memory, and network circuits. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Furthermore, the computer readable medium may include computer readable information in a transitory state medium such as a network link and/or a network interface, including a wired network or a wireless network, that allow a computer to read such computer readable information. </paragraph>
<paragraph id="P-0039" lvl="7"><number>&lsqb;0039&rsqb;</number> Software Entitlement </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a functional flow block diagram <highlight><bold>300</bold></highlight>, of a network <highlight><bold>302</bold></highlight> with attached clients and servers. Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> through client N <highlight><bold>308</bold></highlight> are connected to a network <highlight><bold>302</bold></highlight> such as the Internet. The ordering process over a network is described below. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> This process begins with an employee or customer using Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> orders <highlight><bold>308</bold></highlight> a copy of a particular software package. The order is received at the software ordering system <highlight><bold>310</bold></highlight>. This ordering system contains a list of available software from the employee&apos;s company and/or any third party software. Once the order is placed the ID is sent <highlight><bold>312</bold></highlight> back to Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight>. This same entitlement ID &num; is also sent <highlight><bold>316</bold></highlight> to the software delivery application <highlight><bold>314</bold></highlight>. The entitlement ID &num; is stored in the software delivery application&apos;s entitlement ID database <highlight><bold>322</bold></highlight>. Once Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> is ready to receive the ordered software, a request is made <highlight><bold>318</bold></highlight>, to the software delivery application <highlight><bold>314</bold></highlight>. This request may be made as soon as the entitlement ID &num; is received by the Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight>, or at a time later. This request is received by the software delivery application server <highlight><bold>320</bold></highlight>, which is part of the software delivery application <highlight><bold>314</bold></highlight>. The software delivery application <highlight><bold>320</bold></highlight> compares <highlight><bold>324</bold></highlight> the received entitlement ID &num; to the one that is stored in the entitlement ID database <highlight><bold>322</bold></highlight>. Assuming that the ID &num;s match the delivery server <highlight><bold>320</bold></highlight> schedules <highlight><bold>328</bold></highlight> the ordered software on the staging servers <highlight><bold>326</bold></highlight>. If the ID &num;s do not match, an error message is sent back to the Client <highlight><bold>1</bold></highlight> (not shown). Finally the correct staging server <highlight><bold>326</bold></highlight> connects with the client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> and the ordered software payload is downloaded and installed <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="7"><number>&lsqb;0042&rsqb;</number> Software Payload Description </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, illustrated is a block diagram <highlight><bold>400</bold></highlight> of the requested software that is delivered, as a payload <highlight><bold>402</bold></highlight> using a network <highlight><bold>302</bold></highlight>, to the client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> by the staging server <highlight><bold>326</bold></highlight>. The overall script <highlight><bold>404</bold></highlight> contains all of the information required to download and install the requested software. The software may consist of only one file or as shown software files <highlight><bold>1</bold></highlight> <highlight><bold>418</bold></highlight> through N <highlight><bold>422</bold></highlight>. It is noted that the software may be any type of file. It may be data as in text files, spreadsheets, databases, presentations, or multimedia files. The software may be also be executable files such as word processors, spreadsheet programs, database programs or presentation software. Moreover, the software may be a collection of software bundled together as a standard business software &ldquo;seat&rdquo; or a workstation &ldquo;bench&rdquo; in the case of science and engineering software. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The over all script <highlight><bold>404</bold></highlight> in this example of the present invention is controlling individual installation scripts <highlight><bold>1</bold></highlight> <highlight><bold>406</bold></highlight> through script N <highlight><bold>410</bold></highlight>. These scripts <highlight><bold>1</bold></highlight> through N install the requested software <highlight><bold>418</bold></highlight> through <highlight><bold>422</bold></highlight> into Client <highlight><bold>1</bold></highlight> <highlight><bold>304</bold></highlight> if and only if the software keys <highlight><bold>1</bold></highlight> through N<highlight><bold>412</bold></highlight> through <highlight><bold>416</bold></highlight> are verified. In some cases a key may not be required for download and installation. These software keys contain software security codes, which the scripting controls <highlight><bold>406</bold></highlight> through <highlight><bold>410</bold></highlight> will control during the installation. The ordered software is downloaded as pre-selected images or &ldquo;disks&rdquo; <highlight><bold>418</bold></highlight> through <highlight><bold>422</bold></highlight> that are known to be compatible with the client&apos;s hardware and software, and that were verified during the installation process. The client&apos;s owner or operator need not be involved with any phase of the down load or installation. No further selections or interactions are required. No questions are asked, such as: &ldquo;here should the file be stored&quest;&rdquo;, &ldquo;select options&rdquo; or selections that involve any of the possibly confusing decisions or opportunities for mistakes. All of the registration fill-in information has already been performed. Once initiated, the payload as described here causes the software to be downloaded and installed without any operator intervention. </paragraph>
<paragraph id="P-0045" lvl="7"><number>&lsqb;0045&rsqb;</number> Further Discussion of Payload </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> It is important to note that neither the software product being installed &ldquo;disk&rdquo; <highlight><bold>1</bold></highlight> through N <highlight><bold>418</bold></highlight> through <highlight><bold>422</bold></highlight> nor the software scripting such as the overall script <highlight><bold>404</bold></highlight> or the individual scripts <highlight><bold>1</bold></highlight> through N <highlight><bold>406</bold></highlight>-<highlight><bold>410</bold></highlight> require any internal or external logic associated with them to provide the entitlement check. The entitlement is performed by the software delivery application independently of the software package without impact to the software package repository. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Administrative costs associated with entitlement at the software delivery application are greatly minimized. The administrator is only required to define a relationship between the software package, that is, an identifier within the software delivery application <highlight><bold>314</bold></highlight> for the package and the software product &ldquo;disk&rdquo; <highlight><bold>1</bold></highlight> through N <highlight><bold>418</bold></highlight>-<highlight><bold>422</bold></highlight>. This enables any corresponding entitlement IDs received from the software delivery application <highlight><bold>314</bold></highlight> to be associated with the payload package <highlight><bold>402</bold></highlight> in an automated manner. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Finally understand that the startup and shutdown, behavior, and use of the software product &ldquo;disk&rdquo; <highlight><bold>1</bold></highlight> through N <highlight><bold>418</bold></highlight>-<highlight><bold>422</bold></highlight> once installed, is not affected in any way. No communication is required between the software product and a license management server at the time of execution. No client entitlement, or license management code or API is associated with the software product. </paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> Entitlement Verification of Client&apos;s Software Selection </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, illustrated is a flow diagram <highlight><bold>500</bold></highlight>, which illustrates the verification process. The flow is entered <highlight><bold>502</bold></highlight> when a client, such as <highlight><bold>304</bold></highlight>, decides to order a copy of a software file. The client makes a request <highlight><bold>504</bold></highlight> for software from a &ldquo;standard&rdquo; set of offerings. The software vendor ordering system <highlight><bold>310</bold></highlight> checks <highlight><bold>506</bold></highlight> to see if the client is a standard PC platform. This standardization is required in a company to assure a level of similarity between client PCs of a given type. Given the standardization of the software, checks are performed to assure compatibility with the ordered software. A standard installation on the company&apos;s PCs reduces help desk maintenance. If the client PC platform is not within the predefined profile the flow is exited <highlight><bold>516</bold></highlight> and the software is not delivered. If the PC platform standard compliance is verified <highlight><bold>506</bold></highlight>, the software vendor ordering system <highlight><bold>310</bold></highlight> checks if sufficient storage space is available <highlight><bold>508</bold></highlight>. If the ordered software is too large for the client&apos;s PC a download will not be scheduled. If there is insufficient space the flow is exited <highlight><bold>516</bold></highlight>. If there is space then the software is checked <highlight><bold>510</bold></highlight>. The version of the operating system and any co-resident software that is required is checked. Here again the software that is being ordered will not work if the operating system is not of the right version and release, and similarly for the support software <highlight><bold>512</bold></highlight>. If the software check is failed the flow is exited <highlight><bold>516</bold></highlight>. If the check for co-resident software is passed then the ordering system <highlight><bold>310</bold></highlight> can install the requested software <highlight><bold>514</bold></highlight> and the flow is exited <highlight><bold>516</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="7"><number>&lsqb;0051&rsqb;</number> Software Entitlement Flow Diagram </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, flow diagram <highlight><bold>600</bold></highlight> is shown which illustrates the ordering and the fulfillment of the present invention. The flow is entered <highlight><bold>602</bold></highlight> when a client orders software <highlight><bold>500</bold></highlight> from the software ordering system <highlight><bold>310</bold></highlight>. It is further assumed that the entitlement ID has been sent to the client <highlight><bold>606</bold></highlight>. In addition the software vendor ordering system <highlight><bold>310</bold></highlight> sends notification to the software delivery application <highlight><bold>314</bold></highlight> with the entitlement ID &num; <highlight><bold>608</bold></highlight>. This entitlement ID &num; is saved into a database <highlight><bold>322</bold></highlight> at the software delivery application <highlight><bold>610</bold></highlight>. At any time after receiving the entitlement ID &num; the client can access the software delivery application <highlight><bold>612</bold></highlight> and request the delivery of the ordered software <highlight><bold>614</bold></highlight>. The client is presented with a license agreement <highlight><bold>616</bold></highlight>. If the agreement is not accepted the flow is exited <highlight><bold>626</bold></highlight>. If the agreement is accepted <highlight><bold>616</bold></highlight> then the client can enter the entitlement ID &num; <highlight><bold>618</bold></highlight> If the entered entitlement ID &num; does not match the stored entitlement ID &num; in the entitlement ID database <highlight><bold>322</bold></highlight> the flow is exited <highlight><bold>626</bold></highlight>. If it does match <highlight><bold>620</bold></highlight> then the software delivery application schedules a delivery <highlight><bold>622</bold></highlight> via the staging servers <highlight><bold>326</bold></highlight>. The software delivery application <highlight><bold>314</bold></highlight> next performs the pre-installation audits <highlight><bold>623</bold></highlight>, which are explained below. Finally the software delivery application downloads and installs <highlight><bold>624</bold></highlight> the requested software and the flow is exited <highlight><bold>626</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="7"><number>&lsqb;0053&rsqb;</number> Screen Shot of Software Selection </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Turning now to FIG.<highlight><bold>7</bold></highlight>, is a screen shot <highlight><bold>700</bold></highlight> of the present invention&apos;s software selection page. Using a Internet browser <highlight><bold>702</bold></highlight> the client is presented the page entitled IBM standard software&mdash;W/2000 for North America. Note that a geographic selection was made earlier. (not shown) This Internet page contains the normal Windows controls <highlight><bold>704</bold></highlight> such as file, edit, view, favorites, tools, and help. The client has selected a URL (Uniform Resource Locator) that presents the W3 IBM standard software installer selection menu <highlight><bold>706</bold></highlight>. From this selection menu the client has selected the W/2000 page from the W3 home page <highlight><bold>708</bold></highlight>. This is indicated, as &ldquo;W/2000&rdquo; is bold. Given this selection the client is presented with a search catalog and a list of topics, from which the client has selected the advanced technology applications <highlight><bold>710</bold></highlight>. This is indicated, as &ldquo;as-is applications&rdquo; is bold. This menu selection in turn has presented the client with the main menu of as-is applications <highlight><bold>712</bold></highlight>. From this main menu the client has selected the Microsoft Project 2000 software package for download and installation. Finally the lower task bar <highlight><bold>714</bold></highlight> indicates that the client is connected to the Internet and that the transfer is completed. </paragraph>
<paragraph id="P-0055" lvl="7"><number>&lsqb;0055&rsqb;</number> Screen Shot of Entitlement ID Entry Page </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, is a screen shot <highlight><bold>800</bold></highlight> of the start of the licensing agreement, according to the present invention. Once the client has selected the desired software a dialog is presented to assure that the client agrees to the licensing and has local permission for the desired software. A typical browser window contains the Internet page <highlight><bold>802</bold></highlight> is shown, which is presented when the client selects a desired program Microsoft Project 2000 for download and installation <highlight><bold>712</bold></highlight>. This Internet page contains the typical Windows controls <highlight><bold>804</bold></highlight> such as file, edit, view, favorites, tools, and help. The client has selected a URL (Uniform Resource Locator) that presents the W3 IBM standard software installer selection menu <highlight><bold>706</bold></highlight>, and is continuing to select additional sub-menus. The client has selected the W/2000 page from the W3 home page <highlight><bold>808</bold></highlight>. On the previous screen the client selected desired software. This software, the Microsoft Project 2000 is presented with a legal notice and licensing agreement <highlight><bold>812</bold></highlight>. The client reads the agreement and accepts it <highlight><bold>616</bold></highlight>, which requires scrolling down, (not shown) and at the end of this agreement certain information will be requested. The information is the entitlement ID &num;. Finally the lower task bar <highlight><bold>814</bold></highlight> indicates that the client is connected to the Internet and that the transfer of the present page is completed. </paragraph>
<paragraph id="P-0057" lvl="7"><number>&lsqb;0057&rsqb;</number> Screen Shot of Licensing Agreement Purchase and Order Numbers </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, which shows a screen shot <highlight><bold>900</bold></highlight> of the entitlement ID entry page, according to the present invention. A normal Browser window presents Internet page <highlight><bold>902</bold></highlight>. This Internet page contains the normal Windows controls <highlight><bold>904</bold></highlight> such as file, edit, view, favorites, tools, and help. The client has selected a URL (Uniform Resource Locator) that presents the W3 IBM standard software installer selection menu <highlight><bold>906</bold></highlight>, and is continuing to select additional sub-menus. The client has selected the W/2000 page from the W3 home page <highlight><bold>908</bold></highlight>. On the previous screen the client was presented with the licensing agreement shown as screen shot <highlight><bold>800</bold></highlight>, which the client has read and agreed to <highlight><bold>616</bold></highlight>. This page presents the client with the details of the selected software <highlight><bold>910</bold></highlight>. The required operating system is listed <highlight><bold>912</bold></highlight>. The disk space required to download and install the selected software is listed <highlight><bold>914</bold></highlight>, which includes the temporary requirement and then the finally amount that is needed. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Next the entitlement ID <highlight><bold>916</bold></highlight> must be entered. Optionally the location of temporary drive space may be entered <highlight><bold>918</bold></highlight>. Assuming that the entitlement ID has been entered and that it is found in the software delivery application&apos;s database <highlight><bold>314</bold></highlight>, the download of the selected software is scheduled by the delivery application server <highlight><bold>320</bold></highlight>, at the staging servers <highlight><bold>326</bold></highlight> once the &ldquo;Install Now&excl;&rdquo; button is selected <highlight><bold>922</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Finally the lower task bar <highlight><bold>922</bold></highlight> indicates that the client is connected to the Internet and that the transfer of the present page is completed. </paragraph>
<paragraph id="P-0061" lvl="7"><number>&lsqb;0061&rsqb;</number> Screen Shots of the Software Installer </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, which shows a screen shot <highlight><bold>1000</bold></highlight> of the installation of the requested software, according to the present invention. Assuming that the entitlement ID has been checked successfully during screen shot <highlight><bold>900</bold></highlight>, the installation commences. The scheduling server <highlight><bold>326</bold></highlight> established a download session during which the requested software payload <highlight><bold>402</bold></highlight> with the associated scripts and entitlement ID &num; will be downloaded. A dialog box <highlight><bold>1002</bold></highlight> is presented to indicate the steps and the progress of the installation. This Window contains the normal Windows controls <highlight><bold>1004</bold></highlight> such as file, windows and help. In this view the staging servers have started the installation <highlight><bold>1006</bold></highlight> once the install code has been assembled into the payload, and as show, this operation is 29% compete. Once this is complete several checks are performed by software delivery application: verify the PC Platform <highlight><bold>506</bold></highlight>, the storage space <highlight><bold>508</bold></highlight>, the Operating System <highlight><bold>510</bold></highlight> and the prerequisite software <highlight><bold>512</bold></highlight>. <highlight><bold>1008</bold></highlight>. Once the product is downloaded and installed the temporary files are removed <highlight><bold>1010</bold></highlight>. It is noted that no configuration questions are asked or options are provided. Once started the present invention completes the download and installation in an efficient and unattended way, which obviates incorrect or even different choices by the client. Any future help desk support can be accomplished with a known level of consistency. Finally during the installation the client may cancel the installation operation using the cancel button <highlight><bold>1012</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="7"><number>&lsqb;0063&rsqb;</number> Non-Limiting Examples </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Although a specific embodiment of the invention has been disclosed. It will be understood by those having skill in the art that changes can be made to this specific embodiment without departing from the spirit and scope of the invention. The scope of the invention is not to be restricted, therefore, to the specific embodiment, and it is intended that the appended claims cover any and all such applications, modifications, and embodiments within the scope of the present invention.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method on a client server network for the ordering, downloading, and installing software, the method at the client system comprising the steps of: 
<claim-text>ordering at least one software file from a list of software on a software ordering server; </claim-text>
<claim-text>receiving a response to the order for at least one software file from the software ordering server, the response includes an entitlement ID; </claim-text>
<claim-text>requesting a copy of the at least one software file from the software delivery server, the request includes the received entitlement ID; </claim-text>
<claim-text>receiving the copy of the at least one software file from a scheduling server as part of a payload containing at least one customized installation script; and </claim-text>
<claim-text>installing the received copy of the at least one software file under the direction of a scheduling server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of receiving a response to the request for a copy of at least one software file, further comprising the sub-steps: 
<claim-text>receiving a request for acceptance of a software license agreement for the copy of the at least one software file from the software delivery server; and, </claim-text>
<claim-text>sending the an acceptance of the software license agreement to the software delivery server for the requested copy of the at least one software file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of receiving a response to the request for a copy of the at least one software file, further comprising the sub-steps of: 
<claim-text>sending a system platform type for the client system; </claim-text>
<claim-text>sending an amount of available storage for the client system; and, </claim-text>
<claim-text>sending at least one identifier of other software installed on the client system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the ordering of at least one software file from the software ordering server is accomplished only when the need for the software file is needed for use. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of installing the received at least one software file requires no further intervention from the software ordering server. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of installing the received at least one software file requires no client user intervention by a user on the client system. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of installing the at least one received software file does not allow any choices or options by a user on the client system. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the completed step of installing the at least one received software file obviates the need for help to install, or questions about the installation of the at least one software file from a help desk. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method on a client server network for the selection, download and installation of software, the method at the software delivery server comprising the steps of: 
<claim-text>receiving a request for the download a copy of at least one software file from a client system; </claim-text>
<claim-text>verifying the client system&apos;s PC compatibility for the requested copy of at least one software file; and </claim-text>
<claim-text>scheduling the download of the requested software to the client system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, the step of verifying, further comprising the sub-steps of: 
<claim-text>requesting the client system&apos;s PC platform type; </claim-text>
<claim-text>requesting the clients system&apos;s PC platform&apos;s available storage; </claim-text>
<claim-text>requesting the client system&apos;s platform&apos;s installed software; and </claim-text>
<claim-text>verifying that one or more responses to the requests above are within allowable limits. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method on a client server network for the ordering, deployment and installation of software, the method at the software delivery server comprising the steps of: 
<claim-text>receiving a entitlement ID for at least one software file; </claim-text>
<claim-text>storing the entitlement ID for at least one software file in a database; </claim-text>
<claim-text>receiving a request for the down load of at least one requested software file with a entitlement ID from a client; </claim-text>
<claim-text>looking up the received entitlement ID in the database, </claim-text>
<claim-text>finding the entitlement ID and the request for at least one software file in the data base; and </claim-text>
<claim-text>scheduling a response to the request for a copy of the at least one software file at a scheduling server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A computer readable medium containing programming instructions for the ordering, downloading, and installing software over a client server network, the programming instructions executing at the client system comprising: 
<claim-text>ordering at least one software file from a list of software on a software ordering server; </claim-text>
<claim-text>receiving a response to the order for at least one software file from the software ordering server, the response includes an entitlement ID; </claim-text>
<claim-text>requesting a copy of the at least one software file from the software delivery server, the request includes the received entitlement ID; </claim-text>
<claim-text>receiving the copy of the at least one software file from a scheduling server as part of a payload containing at least one customized installation script; and, </claim-text>
<claim-text>installing the received copy of the at least one software file under the direction of a scheduling server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer readable medium according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the programming instruction of receiving a response to the request for a copy of at least one software file, further comprising the programming instruction: 
<claim-text>receiving a request for acceptance of a software license agreement for the copy of the at least one software file from the software delivery server; and, </claim-text>
<claim-text>sending the an acceptance of the software license agreement to the software delivery server for the requested copy of the at least one software file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer readable medium according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the programming instruction of receiving a response to the request for a copy of the at least one software file, further comprising the sub-steps of: 
<claim-text>sending a system platform type for the client system; </claim-text>
<claim-text>sending an amount of available storage for the client system; and, </claim-text>
<claim-text>sending at least one identifier of other software installed on the client system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A computer readable medium containing programming instructions for the ordering, deployment and installation of software over a client server network, the programming instructions executing at the software staging server comprising: 
<claim-text>receiving a request from a client system for a copy of at the at least one software file; </claim-text>
<claim-text>building a payload of software commands and the at least one software file; </claim-text>
<claim-text>down loading sending the payload of software commands and the at least one software file to the file system; and </claim-text>
<claim-text>installing the at least one software file on the client system using the software commands in the client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A structure of a payload for the delivery of at least one software file, the payload comprising: 
<claim-text>at least one software file; </claim-text>
<claim-text>at least one installation script for at least one software file; </claim-text>
<claim-text>at least one software key for the at least one software file for installing the one software file; and </claim-text>
<claim-text>an overall installation script which controls the downloading and installation and file maintenance for the at least one software file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A software staging server coupled to a client server network, the staging server comprising: 
<claim-text>a network interface for couple one or more client systems; </claim-text>
<claim-text>a request received over the network interface from at least one of the one or more client system for a copy of at the at least one software file; and </claim-text>
<claim-text>a payload of software commands and the at least one software file, the payload sent over the network interface so that the at least one software file is installed on the at least one of the one or more client systems without further user intervention on the client system.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005427A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005427A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005427A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005427A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005427A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005427A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005427A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005427A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005427A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005427A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005427A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
