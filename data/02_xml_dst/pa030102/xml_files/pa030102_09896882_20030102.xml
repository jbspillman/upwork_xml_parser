<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005344A1-20030102-D00000.TIF SYSTEM "US20030005344A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005344A1-20030102-D00001.TIF SYSTEM "US20030005344A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005344A1-20030102-D00002.TIF SYSTEM "US20030005344A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005344A1-20030102-D00003.TIF SYSTEM "US20030005344A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005344A1-20030102-D00004.TIF SYSTEM "US20030005344A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005344A1-20030102-D00005.TIF SYSTEM "US20030005344A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005344</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896882</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F001/12</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>400000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Synchronizing data with a capture pulse and synchronizer</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Sriram</given-name>
<middle-name>M.</middle-name>
<family-name>Bhamidipati</family-name>
</name>
<residence>
<residence-us>
<city>Los Altos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Kamal</given-name>
<middle-name>J.</middle-name>
<family-name>Koshy</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Horaira</given-name>
<family-name>Abu</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BLAKELY SOKOLOFF TAYLOR &amp; ZAFMAN</name-1>
<name-2></name-2>
<address>
<address-1>12400 WILSHIRE BOULEVARD, SEVENTH FLOOR</address-1>
<city>LOS ANGELES</city>
<state>CA</state>
<postalcode>90025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention is in the field of synchronizing data. More particularly, the present invention provides a method, apparatus, system, and machine-readable medium to synchronize data between different clock domains using a capture pulse. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is in the field of synchronizing data. More particularly, the present invention provides a method, apparatus, system, and machine-readable medium to synchronize data between different clock domains. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Efficient packet sizes for transactions between a host and a target device may be large. For instance, when a host requests a read from a memory device and the read comprises data from consecutive addresses, the most efficient packet size for the host and memory device may be the entire read since a single transaction may request the data and respond to the request. However, hosts on a bus may transact with a target device on a second bus via a network component and large packets may not be handled efficiently or at all by the network component. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Efficient packet sizes for transactions processed by a network component, such as a bridge, router, hub, switch, etc., may be based on an internal register size of the network component since network component may store transactions in the register. In many cases, the network component may limit the size of a transaction based on the size of the register. For example, when more than one host initiates a transaction to transmit to a target device via a network component, algorithms may factor in the size of the register when arbitrating the bus, determining how to respond to the transaction, and determining when to terminate the transaction. Thus, the network component may force the host and target device to divide a large packet transaction into a sequence of smaller packet transactions. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Forcing the host and target device to transact via a sequence of smaller packet transactions may cause the host, network component, and target device to spend additional time and energy on a transaction. The size of the sequence of smaller packet transactions may be greater than a single large packet transaction as a result of additional data for identification of the transactions for a host, network component, and target device. Further, the time spent processing the sequence of smaller packet transactions may be greater as a result of additional data and handshaking. Thus, small registers can diminish device and bus speed by increasing the amount of traffic and data on a bus.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF FIGURE DESCRIPTIONS </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In the accompanying drawings, like references may indicate similar elements: </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a host coupled to a target device via a network component. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts four First In, First Out queues, eight bit wide by four bit deep, coupled to synchronous memory. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a flow chart to synchronize and schedule data for synchronous memory. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a timing diagram for a synchronizer. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a machine-readable medium comprising instructions to synchronize and schedule data for synchronous memory.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF EMBODIMENTS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The following is a detailed description of example embodiments of the invention depicted in the accompanying drawings. The example embodiments are in such detail as to clearly communicate the invention. However, the amount of detail offered is not intended to limit the anticipated variations of embodiments. The variations of embodiments anticipated for the present invention are too numerous to discuss individually so the detailed descriptions below are designed to make such embodiments obvious to a person of ordinary skill in the art. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, there is shown a host <highlight><bold>170</bold></highlight> coupled to a physical layer device <highlight><bold>100</bold></highlight> via a network component <highlight><bold>105</bold></highlight>. The host <highlight><bold>170</bold></highlight> may comprise an agent on a first bus and may request a large packet transaction of physical layer device <highlight><bold>100</bold></highlight> via network component <highlight><bold>105</bold></highlight>. The physical layer device <highlight><bold>100</bold></highlight> may comprise networking products, including media converters, switches, wireless, transceivers, hubs, and print servers supporting Ethernet, Fast Ethernet, asynchronous transfer mode (ATM), and Gigabit Ethernet. Network component <highlight><bold>105</bold></highlight> may forward the large packet transaction to physical layer device <highlight><bold>100</bold></highlight> and physical layer device <highlight><bold>100</bold></highlight> may respond with a large packet comprising data. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Network component <highlight><bold>105</bold></highlight> may comprise an inbound register <highlight><bold>110</bold></highlight>, a synchronizer and scheduler <highlight><bold>120</bold></highlight>, a capture register <highlight><bold>130</bold></highlight>, and a synchronous memory <highlight><bold>160</bold></highlight>. The inbound register <highlight><bold>110</bold></highlight> may receive data for a transaction from physical layer device <highlight><bold>100</bold></highlight> according to a media clock frequency, e.g., the frequency of the bus coupling physical layer device <highlight><bold>100</bold></highlight> to network component <highlight><bold>105</bold></highlight> or the frequency of a protocol handling the bus transaction. For example, the bus may be <highlight><bold>32</bold></highlight> bits wide and the clock speed of the bus may be between 25 and 125 MHz so inbound register <highlight><bold>110</bold></highlight> may receive 32 bits of data from physical layer device <highlight><bold>100</bold></highlight> at a rate of 25 to 125 million times per second. Synchronizer and scheduler <highlight><bold>120</bold></highlight> may receive the media clock signal and receive a memory clock signal for synchronous memory <highlight><bold>160</bold></highlight>. The synchronizer and scheduler <highlight><bold>120</bold></highlight> can generate a capture pulse to synchronize the media clock signal with the memory clock signal by using asynchronous logic to generate a capture pulse at the first stable rising edge of the memory clock signal after the media clock signal is asserted. The synchronizer and scheduler <highlight><bold>120</bold></highlight> may be designed to assure a single capture pulse is generated during an assertion of the media clock signal when the media clock signal is a lower frequency than the synchronous memory clock signal. Further, the synchronizer and scheduler <highlight><bold>120</bold></highlight> may coordinate storage of the data to write to the synchronous memory <highlight><bold>160</bold></highlight> with capturing data from the inbound register <highlight><bold>110</bold></highlight> such that data in the capture register is not overwritten prior to writing the data to the synchronous memory <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Capture register <highlight><bold>130</bold></highlight> may be coupled to synchronizer and scheduler <highlight><bold>120</bold></highlight> to receive capture pulses and coupled to inbound register <highlight><bold>110</bold></highlight> to capture data. Capture register <highlight><bold>130</bold></highlight> may capture the data from inbound register <highlight><bold>110</bold></highlight> at each capture pulse from synchronizer and scheduler <highlight><bold>120</bold></highlight>. Thus, in the present embodiment, capture register <highlight><bold>130</bold></highlight> may capture 32 bits of data from inbound register <highlight><bold>110</bold></highlight> on every pulse of the media clock signal, or 25 to 125 million times per second. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Synchronous memory <highlight><bold>160</bold></highlight> may comprise a memory having a memory word of 32 bits and comprise bytes, kilobytes, megabytes, or gigabytes of memory to store data from inbound register <highlight><bold>110</bold></highlight>. Synchronous memory <highlight><bold>160</bold></highlight> may be coupled to synchronizer and scheduler <highlight><bold>120</bold></highlight> to receive a write enable when a memory word is available in capture register <highlight><bold>130</bold></highlight> to write to synchronous memory <highlight><bold>160</bold></highlight>. Synchronous memory <highlight><bold>160</bold></highlight> may be coupled to capture register <highlight><bold>130</bold></highlight> to receive the memory word. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> When the bus between network component <highlight><bold>105</bold></highlight> and host <highlight><bold>170</bold></highlight> is available for a transaction and host <highlight><bold>170</bold></highlight> is available to receive a transaction, network component <highlight><bold>105</bold></highlight> may transfer data stored in synchronous memory <highlight><bold>160</bold></highlight> in a large packet transaction to host <highlight><bold>170</bold></highlight>. In some embodiments, the last 32 bits of data transferred into inbound register <highlight><bold>110</bold></highlight> may be transferred from inbound register <highlight><bold>110</bold></highlight> to host <highlight><bold>170</bold></highlight> without first being stored in synchronous memory <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In alternative embodiments, network component <highlight><bold>105</bold></highlight> may comprise more than one inbound register <highlight><bold>110</bold></highlight>. For example, when a memory word is 32 bits for synchronous memory <highlight><bold>160</bold></highlight> and network component <highlight><bold>105</bold></highlight> comprises two inbound registers to receive a large packet transaction from physical layer device <highlight><bold>100</bold></highlight>, each inbound register may transmit 16 bits of data to a capture register. In some embodiments, each inbound register is coupled to an independent capture register and each capture register may capture 32 bits of data. Further, when network component <highlight><bold>105</bold></highlight> comprises four inbound registers each register may transmit eight bits of data to a capture register or each inbound register may be coupled to an independent capture register. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In other embodiments, network component <highlight><bold>105</bold></highlight> may comprise a multiplexer and separate the synchronizer and scheduler functions. When network component <highlight><bold>105</bold></highlight> comprises more than one capture register, each capture register may be coupled to the multiplexer. The scheduler may be coupled to a synchronizer or a synchronizer for each capture register to determine a write select signal to transmit to the multiplexer to select each capture register in a sequence. The sequence may also be based upon the number of ports available to write data to the synchronous memory. When a capture register is selected by the scheduler, the data in the capture register may be written to the synchronous memory <highlight><bold>160</bold></highlight>. The scheduler may also coordinate the transfer of data from each capture register into the synchronous memory to prevent a data overflow in a capture register. This coordination may be more complex when the more than one inbound register receives data at more than one media clock frequency. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In some embodiments, the scheduler may track the number of capture pulses received by each capture register and determine when the capture register is full and should be drained to the synchronous memory. Many these embodiments comprise a capture register that captures a partial or full memory word from an inbound register each capture pulse. In some of these embodiments, the capture pulse is generated every clock signal of the lower frequency between the media clock signal and the memory clock signal. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, there is shown an apparatus comprising four inbound registers <highlight><bold>200</bold></highlight>, <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>203</bold></highlight> coupled to a synchronous memory <highlight><bold>260</bold></highlight>. Each inbound register <highlight><bold>200</bold></highlight>, <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>203</bold></highlight> may receive one-fourth of a memory word of each media clock cycle. A synchronizer <highlight><bold>220</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>222</bold></highlight>, and <highlight><bold>223</bold></highlight> for each inbound register <highlight><bold>200</bold></highlight>, <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>203</bold></highlight> may receive a media clock signal and receive a memory clock signal for synchronous memory <highlight><bold>260</bold></highlight>. The synchronizers <highlight><bold>220</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>222</bold></highlight>, and <highlight><bold>223</bold></highlight> may generate a capture pulse, synchronizing the media clock signal with the memory clock signal, to capture data from inbound registers <highlight><bold>200</bold></highlight>, <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>203</bold></highlight>. For example, synchronizer <highlight><bold>220</bold></highlight> may generate a capture pulse at a transition of the memory clock signal when the media clock signal is asserted. The synchronizer <highlight><bold>220</bold></highlight> may comprise an asynchronous state machine to generate the capture pulse when the memory clock signal has a rising edge. This capture pulse can be the first rising edge of the memory clock signal after the last rising edge of the media clock signal since the last rising edge of the media clock signal may show that the data is ready. The asynchronous state machine may not create a capture pulse when one or both signals may be unstable. For instance, during a transition from low to high, a reading of the state of the signal can fluctuate and the asynchronous state machine can be designed to ignore a reading when the signal is unstable. When synchronizer <highlight><bold>220</bold></highlight> generates a capture pulse <highlight><bold>215</bold></highlight> the capture pulse is transmitted to the capture register <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Capture register <highlight><bold>210</bold></highlight> may capture data from inbound register <highlight><bold>200</bold></highlight> for each capture pulse <highlight><bold>215</bold></highlight> input from synchronizer <highlight><bold>220</bold></highlight>. The capture pulse <highlight><bold>215</bold></highlight> from synchronizer <highlight><bold>220</bold></highlight> may also be forwarded to scheduler <highlight><bold>250</bold></highlight>. Further, when capture register <highlight><bold>210</bold></highlight> comprises data, the data may be forwarded to multiplexer <highlight><bold>240</bold></highlight> when multiplexer <highlight><bold>240</bold></highlight> receives a write select from scheduler <highlight><bold>250</bold></highlight>. Inbound registers <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, and <highlight><bold>203</bold></highlight> may operate in a similar fashion with synchronizers <highlight><bold>221</bold></highlight>, <highlight><bold>222</bold></highlight>, and <highlight><bold>223</bold></highlight> and capture registers <highlight><bold>211</bold></highlight>, <highlight><bold>212</bold></highlight>, and <highlight><bold>213</bold></highlight>. Each synchronizer <highlight><bold>220</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>222</bold></highlight> and <highlight><bold>223</bold></highlight> may forward a capture pulse <highlight><bold>215</bold></highlight>, <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight> and <highlight><bold>218</bold></highlight> to scheduler <highlight><bold>250</bold></highlight> when the capture pulses are generated. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Scheduler <highlight><bold>250</bold></highlight> may receive capture pulses from synchronizers <highlight><bold>220</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>222</bold></highlight>, and <highlight><bold>223</bold></highlight> and select a capture register <highlight><bold>210</bold></highlight>, <highlight><bold>211</bold></highlight>, <highlight><bold>212</bold></highlight> or <highlight><bold>213</bold></highlight> to drain to synchronous memory <highlight><bold>260</bold></highlight> via multiplexer <highlight><bold>240</bold></highlight>. Scheduler <highlight><bold>250</bold></highlight> may comprise an output of a write select to multiplexer <highlight><bold>240</bold></highlight> and an output of a write enable to synchronous memory <highlight><bold>260</bold></highlight> to allow data of a capture register <highlight><bold>210</bold></highlight>, <highlight><bold>211</bold></highlight>, <highlight><bold>212</bold></highlight>, or <highlight><bold>213</bold></highlight> to be written to synchronous memory <highlight><bold>260</bold></highlight>. The write select may indicate the capture register to drain and may be designed to drain a capture register before a full capture register attempts to capture data. The design can consider the configuration of registers such as the frequency of the memory clock signal, the frequency of each media clock signal, and the size of each capture register. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Synchronous memory <highlight><bold>260</bold></highlight> may comprise an amount of data storage to optimize data flow through the apparatus. For example, when the apparatus is a network component the network component may handle one or more transactions at a time of a maximum size or typical size and synchronous memory <highlight><bold>260</bold></highlight> may be designed to hold the one or more transactions of a typical or maximum size. In some embodiments, synchronous memory <highlight><bold>260</bold></highlight> may be coupled to an outbound register or outbound registers. In many of these embodiments, the outbound register configuration may be similar to that of the inbound register configuration to output the data in a similar configuration, such as a large packet transaction of the same or different clock signal. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In alternative embodiments, the number of inbound capture registers and synchronizers may vary. For example, when a memory word synchronous memory <highlight><bold>260</bold></highlight> is 64 bits, each inbound register may comprise 64 bits and comprise one channel by 64 bits, two channels by 32 bits, four channels by 16 bits, or eight channels by 8 bits. On the other hand, when a memory word is 32 bits there may be one, two or four inbound registers each comprising 32 bits and one channel by 32 bits, two channels by 16 bits, or four channels by 8 bits, respectively. When the incoming data is configured one channel by one memory word, two channels by one half a memory word, or four channels by one fourth of a memory word, data may be drained from a capture register every cycle, every two cycles, or every four cycles of the media clock signal. In some of these embodiments, the capture pulse may capture data from the inbound register(s) every cycle, while in other embodiments, the capture register may also capture data at every cycle, every two cycles, or every four cycles of the media clock signal. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, there is shown a flow chart to synchronize and schedule data for synchronous memory. The flow chart comprises receiving a media clock signal <highlight><bold>300</bold></highlight>, creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>310</bold></highlight>, capturing media data in response to the capture pulse <highlight><bold>320</bold></highlight>, multiplexing to store the media data in the synchronous memory <highlight><bold>330</bold></highlight>, scheduling to store the media data in the synchronous memory <highlight><bold>340</bold></highlight>, and storing the media data in a synchronous memory <highlight><bold>350</bold></highlight>. Receiving a media clock signal <highlight><bold>300</bold></highlight> may comprise receiving a clock signal associated with data to capture <highlight><bold>305</bold></highlight>. Receiving a clock signal associated with data to capture <highlight><bold>305</bold></highlight> may receive a clock signal of a bus or port to capture data from the bus or port in the inbound register. Receiving a media clock signal <highlight><bold>300</bold></highlight> may comprise receiving a clock signal of a lower frequency than a memory clock signal associated with a synchronous memory. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>310</bold></highlight> may synchronize the media clock signal with a memory clock signal for synchronous memory to facilitate storing data received at a frequency of the media clock signal in the synchronous memory. Creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>310</bold></highlight> may comprise creating a capture pulse with asynchronous logic <highlight><bold>315</bold></highlight> and creating a capture pulse to synchronize the media clock signal with a transition of the memory clock signal <highlight><bold>317</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Creating a capture pulse with asynchronous logic <highlight><bold>315</bold></highlight> may comprise forwarding the media clock signal and the memory clock signal to a microprocessor executing software comprising asynchronous logic or forwarding a media clock signal and the memory clock signal to an asynchronous state machine. When the asynchronous logic is executed on a microprocessor, the execution of the asynchronous logic is a pseudo asynchronous operation since the microprocessor may operate off a synchronous clock. So the speed of the microprocessor can be designed to appear asynchronous for he purposes of implementing the asynchronous logic. The asynchronous logic implemented by the microprocessor or the asynchronous state machine may comprise two inputs, three internal states, and an output state. In particular, in some embodiments, the asynchronous state machine may be a 3 bit asynchronous state machine. For example, the asynchronous state machine may receive a media clock signal (X) and a memory clock signal (Y) as inputs. A first state (particular values of Q<highlight><bold>2</bold></highlight>, Q<highlight><bold>1</bold></highlight>, and Q<highlight><bold>0</bold></highlight>) may indicate when a media clock signal pulse has been received but a memory clock signal pulse has not been received and may be a function of the inputs X and Y as well as the prior value of Q<highlight><bold>0</bold></highlight> and another state such as the second state and the third state. A second state (particular values of Q<highlight><bold>2</bold></highlight>, Q<highlight><bold>1</bold></highlight>, and Q<highlight><bold>0</bold></highlight>) may indicate when both X and Y are being received this cycle and may be a function of a prior value of Q<highlight><bold>1</bold></highlight> as well as X and Y and another state. A third state (particular values of Q<highlight><bold>2</bold></highlight>, Q<highlight><bold>1</bold></highlight>, and Q<highlight><bold>0</bold></highlight>) may indicate that X has been received and Y was received last cycle but Y is not asserted this cycle. Q<highlight><bold>3</bold></highlight> may be a function of a prior value of Q<highlight><bold>2</bold></highlight>, and the state of X, Y and another state. Finally, an output of the capture pulse may be determined as a function of Q<highlight><bold>0</bold></highlight>, Q<highlight><bold>1</bold></highlight>, and Q<highlight><bold>2</bold></highlight>. An example of such logic can be see below:</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Q</italic></highlight><highlight><bold>2</bold></highlight><highlight><superscript>&plus;</superscript></highlight><highlight><italic>Q</italic></highlight><highlight><bold>2</bold></highlight><highlight><italic>&middot;X&plus;Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;<highlight><italic>Y&plus;Q</italic></highlight><highlight><bold>1</bold></highlight>&middot;<highlight><italic>Y</italic></highlight></in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Q</italic></highlight><highlight><bold>1</bold></highlight><highlight><superscript>&plus;</superscript></highlight><highlight><italic>&equals;Q</italic></highlight><highlight><bold>0</bold></highlight>&middot;<highlight><italic>XQ</italic></highlight><highlight><bold>1</bold></highlight>&middot;<highlight><italic>X&plus;Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;<highlight><italic>Q</italic></highlight><highlight><bold>1</bold></highlight>&middot;<highlight><italic>Q</italic></highlight><highlight><bold>0</bold></highlight>&plus;<highlight><italic>X&middot;{overscore (Y)}</italic></highlight></in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Q</italic></highlight><highlight><bold>0</bold></highlight><highlight><superscript>&plus;</superscript></highlight><highlight><italic>&equals;Q</italic></highlight><highlight><bold>1</bold></highlight>&middot;<highlight><italic>Q</italic></highlight><highlight><bold>0</bold></highlight>&plus;<highlight><italic>Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;<highlight><italic>{overscore (Y)}&plus;Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;{overscore (<highlight><italic>Q</italic></highlight><highlight><bold>1</bold></highlight>)}</in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Z&equals;Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;{overscore (<highlight><italic>Q</italic></highlight><highlight><bold>1</bold></highlight>)}&plus;<highlight><italic>Q</italic></highlight><highlight><bold>2</bold></highlight>&middot;{overscore (<highlight><italic>Q</italic></highlight><highlight><bold>0</bold></highlight>)}</in-line-formula></paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>310</bold></highlight> may further comprise creating a capture pulse when a partial or full memory word of data is available in an inbound register to capture. In alternate embodiments, more or less states may be tracked in generating a capture pulse along with values to define the states. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Creating a capture pulse to synchronize the media clock signal with a transition of the memory clock signal <highlight><bold>317</bold></highlight> may create a capture pulse when the media clock signal is high and when the memory clock signal transitions from low to high or high to low. In some embodiments, creating a capture pulse to synchronize the media clock signal with a transition of the memory clock signal <highlight><bold>317</bold></highlight> may comprise creating a capture pulse after a rising edge of the media clock signal, not yet followed by a capture pulse, and the memory clock signal comprises a stable rising edge from low to high. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Capturing media data in response to the capture pulse <highlight><bold>320</bold></highlight> may comprise capturing data from a queue <highlight><bold>325</bold></highlight>. Capturing data from a queue <highlight><bold>325</bold></highlight> may capture data from an inbound register in a capture register. Capturing data from an inbound register may comprise capturing a full or partial memory word from the inbound register when the full or partial memory word becomes available in response to the capture pulse. In some embodiments, capturing media data in response to the capture pulse <highlight><bold>320</bold></highlight> may comprise capturing data at a first stable transition from low to high or high to low of the capture pulse. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Multiplexing to store the media data in the synchronous memory <highlight><bold>330</bold></highlight> may comprise receiving data from one or more capture registers, selecting the capture register to receive data from and in response to a write select, and transmitting the data to the synchronous memory. Multiplexing to store the media data in the synchronous memory <highlight><bold>330</bold></highlight> may comprise receiving a write select signal to store the media data <highlight><bold>335</bold></highlight>. Receiving a write select signal to store the media data <highlight><bold>335</bold></highlight> may receive a write select from a scheduler to choose a capture register to drain data. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Scheduling to store the media data in the synchronous memory <highlight><bold>340</bold></highlight> may comprise initiating a signal based upon a capture pulse <highlight><bold>345</bold></highlight>. Initiating a signal based upon a capture pulse <highlight><bold>345</bold></highlight> may comprise initiating a write select signal and transmitting the signal to a multiplexer to select one or more capture register from which the multiplexer can receive data. Selecting the capture register from which the multiplexer can receive data may also comprise determining the capture register having data available to transfer to the multiplexer. Data in the capture register may be available to transfer to the multiplexer when the data comprises a full or partial memory word. In some embodiments, a full memory word may comprise 32 bits. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Initiating a signal based upon a capture pulse <highlight><bold>345</bold></highlight> may further comprise transmitting a write enable to the synchronous memory to store the media data in the synchronous memory. In some embodiments, the synchronous memory may operate like a first in, first out queue or more than one queue. Initiating a signal based upon a capture pulse <highlight><bold>345</bold></highlight> may initiate a write select signal to select a capture register and to transfer data from the capture register to the synchronous memory in a sequential order. For example, when there are four capture registers, data may be captured by the capture register every fourth cycle of the memory clock signal. On the first cycle of the memory clock signal, data in a first capture register may be stored in the synchronous memory. On a second cycle of the memory clock signal, media data in the second capture register may be stored in the synchronous memory, and in the third and fourth cycles of the memory clock signal, data from the third and fourth capture registers may be stored in the synchronous memory. Further, on the fifth cycle of the memory clock signal, the sequence may begin again at the first capture register when data remains to be transferred from the capture registers to the synchronous memory. In alternate embodiments, data may be written to the synchronous memory from the capture registers when the register becomes full wherein a sequential order can be based on the amount of data in a capture register and the number of synchronous memory ports may be available to drain the capture registers. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Storing the media data in a synchronous memory <highlight><bold>350</bold></highlight> may comprise writing a memory word to the synchronous memory <highlight><bold>355</bold></highlight>. Writing a memory word to the synchronous memory <highlight><bold>355</bold></highlight> may comprise writing a 32 bit media data in a capture register to synchronous memory. Storing the media data in a synchronous memory <highlight><bold>350</bold></highlight> may further comprise receiving a write enable from a scheduler and storing data from a multiplexer in memory. In some embodiments, storing the media data in synchronous memory further comprises incrementing a pointer in synchronous memory. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In alternative embodiments, data may be transferred directly from a capture register into synchronous memory in response to a capture pulse. For instance, when a single capture register may transfer data into the synchronous memory, multiplexing may not be necessary. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, there is shown a timing diagram comprising media clock signal <highlight><bold>400</bold></highlight>, memory clock signal <highlight><bold>420</bold></highlight>, and capture pulse <highlight><bold>440</bold></highlight>. Media clock signal <highlight><bold>400</bold></highlight> may be a clock signal received along with media data, such as a bus clock signal, to facilitate transferring data from a bus into a register or queue. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Memory clock signal <highlight><bold>420</bold></highlight> may be a clock signal for synchronous memory such as static random access memory (SRAM). The memory clock signal <highlight><bold>420</bold></highlight> may indicate how often the synchronous memory can receive data in each available port and output data from each available port. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> A synchronizer may receive the media clock signal <highlight><bold>400</bold></highlight> and the memory clock signal <highlight><bold>420</bold></highlight> as inputs and output a capture pulse <highlight><bold>440</bold></highlight>. The capture pulse <highlight><bold>440</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may be one possible embodiment of the generation of such a capture pulse. In the present embodiment, the synchronizer is designed to generate or create a capture pulse at the first stable edge of a transition from low to high <highlight><bold>425</bold></highlight> and <highlight><bold>430</bold></highlight> of a memory clock signal <highlight><bold>420</bold></highlight> when the media clock signal <highlight><bold>400</bold></highlight> is asserted <highlight><bold>405</bold></highlight> and <highlight><bold>410</bold></highlight>. At time <highlight><bold>1</bold></highlight>, the media clock signal <highlight><bold>400</bold></highlight> is asserted <highlight><bold>405</bold></highlight> at a stable rising edge <highlight><bold>425</bold></highlight> of memory clock signal <highlight><bold>420</bold></highlight> so a capture pulse <highlight><bold>445</bold></highlight> is created. At time <highlight><bold>2</bold></highlight>, a capture pulse may not be created because one capture pulse has already been created after the rising edge of the last media clock. At time <highlight><bold>3</bold></highlight>, since a capture pulse has not been generated since that last stable edge of the media clock signal <highlight><bold>400</bold></highlight>, a second capture pulse <highlight><bold>450</bold></highlight> may be created as a result of asynchronous logic in the synchronizer, recognizing a first stable edge of memory clock signal <highlight><bold>420</bold></highlight> at <highlight><bold>430</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In alternative embodiments, more than one memory clock signal pulse such as pulse <highlight><bold>427</bold></highlight> at time <highlight><bold>2</bold></highlight> may occur between capture pulses <highlight><bold>445</bold></highlight> and <highlight><bold>450</bold></highlight>. In some embodiments, capture pulses <highlight><bold>440</bold></highlight> may occur at every memory clock signal pulse such as <highlight><bold>425</bold></highlight>, <highlight><bold>427</bold></highlight> and <highlight><bold>430</bold></highlight>, depending upon the frequencies of the media clock signal and memory clock signal. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> machine-readable medium embodiment of the present invention is shown. A machine-readable medium includes any mechanism that provides (i.e. stores and or transmits) information in a form readable by a machine (e.g., a computer), that when executed by the machine, can perform the functions described herein. For example, a machine-readable medium may include read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g. carrier waves, infrared signals, digital signals, etc.); etc . . . Several embodiments of the present invention can comprise more than one machine-readable medium depending on the design of the machine. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The machine-readable medium <highlight><bold>500</bold></highlight> may comprise instructions for receiving a media clock signal <highlight><bold>510</bold></highlight>, creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>520</bold></highlight>, capturing media data in response to the capture pulse <highlight><bold>530</bold></highlight>, multiplexing to store the data in the synchronous memory <highlight><bold>540</bold></highlight>, scheduling to store the media data in the synchronous memory <highlight><bold>550</bold></highlight>, and storing the media data in a synchronous memory <highlight><bold>560</bold></highlight>. Receiving a media clock signal <highlight><bold>510</bold></highlight> may comprise instructions for receiving a clock signal used to transfer data into an inbound register. In some embodiments, the clock signal can be used to transfer data from a port of one frequency to a port of a second frequency. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>520</bold></highlight> can comprise comparing a media clock signal to a memory clock signal and determining a pulse to synchronize data associated with the media clock signal to the memory clock signal. Creating a capture pulse to synchronize the media clock signal with a memory clock signal <highlight><bold>520</bold></highlight> may comprise instructions to output a capture pulse at the coincidence of an event of the media clock signal with a second event of the memory clock signal. In some embodiments, the event on the media clock signal may comprise a transition in the media clock signal and the second event of the memory clock signal may comprise a high state, a low state, or a transition. In embodiments where the media clock signal is faster than the memory clock signal, the event on the media clock signal may be a transition and the event on the memory clock signal may be a high or a low. In other embodiments, when the memory clock signal is faster than the media clock signal, the second event of the memory clock signal may be a transition and the even ton the media clock signal may be an assertion such as high or low. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Capturing media data in response to the capture pulse <highlight><bold>530</bold></highlight> can comprise instructions for copying the contents of an inbound register into the capture register upon receipt of the capture pulse. In some embodiments, capturing media data in response to the capture pulse <highlight><bold>530</bold></highlight> may also comprise instructions to capture the media data in response to the capture pulse when the media data comprises a partial or full memory word. In many embodiments, asynchronous logic may determine when to create a capture pulse when the media clock signal event and memory clock signal event are not too close together to obtain a stable and correct transition from one state in the asynchronous logic to a second state. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Multiplexing to store the data in the synchronous memory <highlight><bold>540</bold></highlight> can comprise instructions for selecting an input to receive captured media data from and outputting the media data to the synchronous memory. Multiplexing to store the data in the synchronous memory <highlight><bold>540</bold></highlight> may further comprise receiving a signal indicating an input to select. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Scheduling to store the media data in the synchronous memory <highlight><bold>550</bold></highlight> may comprise instructions for receiving one or more capture pulse from one or more synchronizer, determining the capture pulse associated with a capture register comprising data available to transfer to synchronous memory, outputting a write select signal, and outputting a write enable signal. Outputting a write select signal can comprise instructions to output a signal to a multiplexer to indicate an input for the multiplexer to drain data. Outputting a write enable signal can comprise instructions to output a signal to the synchronous memory substantially simultaneously with outputting a write select signal to the multiplexer. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Storing the media data in a synchronous memory <highlight><bold>560</bold></highlight> can comprise instructions to receive data from a multiplexer and store the data in memory when a write enable signal is received from a scheduler. In other embodiments, instructions for storing the media data in a synchronous memory <highlight><bold>560</bold></highlight> can comprise instructions to cause a synchronous memory to store data upon receiving a write enable signal from a scheduler. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In alternative embodiments, instructions for multiplexing to store the media data in the synchronous memory <highlight><bold>540</bold></highlight> may be unnecessary. In many of these embodiments, storing the media data in a synchronous memory <highlight><bold>560</bold></highlight> can comprise storing media data from a capture register in synchronous memory in response to a capture pulse. In particular, storing the media data in a synchronous memory <highlight><bold>560</bold></highlight> can comprise storing media data in response to a write enable signal from a synchronizer. Further, the synchronizer may output a write select signal substantially simultaneously with outputting a capture pulse to a capture register. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method, comprising: 
<claim-text>receiving a media clock signal; </claim-text>
<claim-text>creating a capture pulse to synchronize the media clock signal with a memory clock signal; </claim-text>
<claim-text>capturing media data at a transition of the capture pulse; and </claim-text>
<claim-text>storing the media data in a synchronous memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising scheduling to store the media data in the synchronous memory. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein scheduling to store the media data comprises initiating a signal based upon a capture pulse. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising multiplexing to store the media data in the synchronous memory. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein multiplexing to store the media data comprises receiving a write select signal to store the media data. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said receiving a media clock signal comprises receiving a clock signal of a queue comprising data to capture. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said creating a capture pulse to synchronize the media clock signal comprises creating a capture pulse with asynchronous logic. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said creating a capture pulse to synchronize the media clock signal comprises creating a capture pulse to synchronize the media clock signal with a transition of the memory clock signal. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said capturing data at a transition of the capture pulse comprises capturing data from a queue. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said storing the data in a synchronous memory comprises writing a memory word to the synchronous memory. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An apparatus, comprising: 
<claim-text>a synchronizer; and </claim-text>
<claim-text>a buffer coupled to said synchronizer; and </claim-text>
<claim-text>a synchronous memory coupled to said buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising a multiplexer coupled to more than one buffer. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising a scheduler coupled to said synchronous memory. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising an inbound register coupled to said buffer. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said synchronizer comprises an asynchronous state machine. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said buffer comprises a buffer to capture data from an inbound register. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said synchronous memory comprises a synchronous random access memory. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said synchronous memory comprises memory to store data from an inbound register. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A system, comprising: 
<claim-text>a host; </claim-text>
<claim-text>a deep memory node coupled to said host; and </claim-text>
<claim-text>a physical layer device coupled to said deep memory node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said host comprises a host to initiate a large packet transaction. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said deep-memory node comprises: 
<claim-text>a synchronizer; and </claim-text>
<claim-text>a buffer coupled to said synchronizer; and </claim-text>
<claim-text>a synchronous memory coupled to said buffer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said deep-memory node comprises a synchronous memory to handle a large-packet transaction. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said target device comprises a physical layer device to respond to a large-packet transaction. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A machine-readable medium containing instructions, which when executed by a machine, cause said machine to perform operations, comprising: 
<claim-text>receiving a media clock signal; </claim-text>
<claim-text>creating a capture pulse to synchronize the media clock signal with a memory clock signal; </claim-text>
<claim-text>capturing media data at a transition of the capture pulse; and </claim-text>
<claim-text>storing the media data in a synchronous memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> further comprising scheduling to store the media data in the synchronous memory. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> further comprising multiplexing to store the media data in the synchronous memory. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said creating a capture pulse to synchronize the media clock signal comprises creating a capture pulse with asynchronous logic. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said creating a capture pulse to synchronize the media clock signal comprises creating a capture pulse to synchronize the media clock signal with a transition of the memory clock signal. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said capturing data at a transition of the capture pulse comprises capturing data from a queue. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The machine-readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said storing the data in a synchronous memory comprises writing a memory word to the synchronous memory.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005344A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005344A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005344A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005344A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005344A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005344A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
