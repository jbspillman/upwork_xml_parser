<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005386A1-20030102-D00000.TIF SYSTEM "US20030005386A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005386A1-20030102-D00001.TIF SYSTEM "US20030005386A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005386A1-20030102-D00002.TIF SYSTEM "US20030005386A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005386A1-20030102-D00003.TIF SYSTEM "US20030005386A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005386A1-20030102-D00004.TIF SYSTEM "US20030005386A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005386A1-20030102-D00005.TIF SYSTEM "US20030005386A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005386</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896901</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H03M013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>714</class>
<subclass>774000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Negotiated/dynamic error correction for streamed media</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Sanjay</given-name>
<family-name>Bhatt</family-name>
</name>
<residence>
<residence-us>
<city>Redmond</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Richard</given-name>
<family-name>Machin</family-name>
</name>
<residence>
<residence-us>
<city>Bellevue</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>LEE &amp; HAYES PLLC</name-1>
<name-2></name-2>
<address>
<address-1>421 W RIVERSIDE AVENUE SUITE 500</address-1>
<city>SPOKANE</city>
<state>WA</state>
<postalcode>99201</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Methods and apparatuses are provided which allow a receiving device to dynamically control and/or otherwise influence a sending device&apos;s decision regarding the level of error correction that is applied to streamed media. One method includes having the receiving device generate a request for streamed media that specifies an initial requested error correction level. In this manner, the receiving device is allowed to initially negotiate an error correction level with the sending device that will be providing the streamed media. The receiving device may also dynamically modify the requested level of error correction applied to the streaming media. The sending and receiving devices may also initially and/or dynamically negotiate different error correction encoding schemes. Different error encoding scheme(s) and/or error correction levels can also be selectively applied to different types of streamed media data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to communication networks, and more particularly to methods and apparatuses that provide dynamic error correction for streamed media over wired and/or wireless connections/networks. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The Internet and other similar networks are currently being used to deliver streaming media from a server device to a client device. For example, audio and/or video content from news broadcasts can be streamed, from a server device/devices, through a network to one or more client devices. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The terms &ldquo;streaming media&rdquo; and &ldquo;streamed media&rdquo;, as used herein, essentially mean real-time or near-real-time delivery of critical content (e.g., audio and/or video data) to a subscribing user&apos;s client device or devices. The client device/devices render the streamed media in a way that is appropriate for the client device and the media. By way of example, a live or previously recorded radio program can be transmitted as streamed audio data over a network to a wireless communication device, such as, e.g., a mobile telephone device, which then reproduces the audio signal. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> To provide better service to the user, some networks that are used for streaming media are beginning to offer predictable levels of service. For example, in certain networks, an attempt is made to maintain both the throughput of the network connections (i.e., the data rate) and the errors introduced into data transmitted on those connections (i.e., the residual bit error rate or BER) within certain predicted limits, for the duration of a connection. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> An example of such a network is the so-called &ldquo;third generation&rdquo; (3G) wireless network. 3G wireless networks are being designed to support high data rate wireless telephone services. Streaming content services are predicted to be major applications in these and other types of networks. Such services will be required to deal with certain levels of BER while maintaining an acceptable streaming content experience for subscribing users. As such, in many of these networks there is a need for error correction services that reduce the amount of corrupted data. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> U.S. Pat. No. 6,141,788, issued to Rosenberg et al., provides a method for applying forward error correction (FEC) techniques in packet networks. FEC, which is a well-known error correction technique, provides a mechanism by which a sending device provides a receiving device with additional FEC data that can be subsequently used by the receiving device to detect and correct errors in received data. Thus, to support FEC the sending device typically includes an FEC encoder and the receiving device typically includes an FEC decoder. FEC allows for different levels of encoding. The different levels of encoding can be expressed by a density ratio based on the amount of FEC data generated for a given amount of data. Thus, for example, in certain systems the FEC encoding level may be &ldquo;high&rdquo; when there is a ratio of one FEC packet for every data packet. In other systems, the FEC encoding level may be &ldquo;lower&rdquo; such that there is a ratio of one FEC packet for every four data packets. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Rosenberg et al. disclose a method by which FEC packets may be forwarded from a sending device to one or more receiving devices. The receiving devices may or may not be configured to provide FEC decoding. For those receiving devices that can provide the requisite FEC decoding, Rosenberg et al., provide a way for the decoder to identify the level of FEC encoding from the header of an FEC packet, and thereafter complete the error correction process, as needed. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> One of the drawbacks to the methods and apparatuses provided by Rosenberg et al., is that the sending device controls the level of FEC encoding independent of the receiving device(s). The receiving device(s) is simply advised as to the level of FEC encoding has been applied by the sending device. The receiving device is unable to influence the sending device&apos;s selection of the FEC encoding level. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> It would be advantageous for a receiving device to be able to influence the sending device&apos;s decision, such that, for example, the receiving device can better adapt the density of error correction applied for a given location/time. Thus, there is a need for improved methods and apparatuses that allow a receiving device to control the level of encoding applied to streamed media by a sending device. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In accordance with certain aspects of the present invention, methods and apparatuses are provided which allow a receiving device to dynamically control and/or otherwise influence a sending device&apos;s decision regarding the level of error correction that is applied to streamed media. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> For example, in accordance with certain exemplary implementations of the present invention, a method is provided for use in a receiving device. The method includes generating a request for streamed media having an initial requested level of error correction provided therein. In this manner, the receiving device is allowed to request that a sending device provide a particular level of encoding for the streamed media. Moreover, in certain implementations, the method further includes having the receiving device dynamically modify the requested level of error correction applied to the streaming media.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> A more complete understanding of the various methods and apparatuses of the present invention may be had by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein: </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram depicting an exemplary device, in the form of a computer, which is suitable for use in providing, receiving, and/or otherwise communicating streamed media, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is block diagram depicting an exemplary communication environment that includes a wireless communication link suitable for streaming media between a sending device and a receiving device, in accordance with certain implementations of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram depicting a sending device that is streaming media to a receiving device, for example, in the communication environment as in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with certain exemplary implementations of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram depicting a method for use in a receiving device, for example, as in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, in accordance with certain exemplary implementations of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram depicting a method for use in a sending device, for example, as in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, in accordance with certain exemplary implementations of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an illustrative diagram depicting a portion of a message format suitable for use in supporting the streaming of media between a sending device and a receiving device, for example, as in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, in accordance with certain exemplary implementations of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an illustrative diagram depicting two exemplary techniques for use in applying error correction to a matrix of data packets, in accordance with certain exemplary implementations of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, portions of the invention are described in the general context of computer-executable instructions, such as program modules, being executed by a computer or like device, which, for example, may take the form of a personal computer (PC), a workstation, a portable computer, a server, a plurality of processors, a mainframe computer, a wireless communications base station, a hand-held communications device, a streamed media player, a set-top box, etc. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The various exemplary implementations of the present invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As provided herein, the term &ldquo;logic&rdquo; is meant to apply to any form of logic and requisite supporting elements, including, e.g., software, firmware, hardware, and/or any combination thereof. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> FIG.<highlight><bold>1</bold></highlight> illustrates an example of a suitable computing environment <highlight><bold>120</bold></highlight> on which portions of the subsequently described methods and apparatuses may be implemented. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Exemplary computing environment <highlight><bold>120</bold></highlight> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the improved methods and apparatuses described herein. Neither should computing environment <highlight><bold>120</bold></highlight> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in computing environment <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The improved methods and apparatuses herein are operational with numerous other general purpose and/or special purpose computing system environments or configurations. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, computing environment <highlight><bold>120</bold></highlight> includes a general-purpose computing device in the form of a computer <highlight><bold>130</bold></highlight>. The components of computer <highlight><bold>130</bold></highlight> may include one or more processors or processing units <highlight><bold>132</bold></highlight>, a system memory <highlight><bold>134</bold></highlight>, and a bus <highlight><bold>136</bold></highlight> that couples various system components including system memory <highlight><bold>134</bold></highlight> to processor <highlight><bold>132</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Bus <highlight><bold>136</bold></highlight> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus also known as Mezzanine bus. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Computer <highlight><bold>130</bold></highlight> typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer <highlight><bold>130</bold></highlight>, and it includes both volatile and non-volatile media, removable and non-removable media. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, system memory <highlight><bold>134</bold></highlight> includes computer readable media in the form of volatile memory, such as random access memory (RAM) <highlight><bold>140</bold></highlight>, and/or nonvolatile memory, such as read only memory (ROM) <highlight><bold>138</bold></highlight>. A basic input/output system (BIOS) <highlight><bold>142</bold></highlight>, containing the basic routines that help to transfer information between elements within computer <highlight><bold>130</bold></highlight>, such as during start-up, is stored in ROM <highlight><bold>138</bold></highlight>. RAM <highlight><bold>140</bold></highlight> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processor <highlight><bold>132</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Computer <highlight><bold>130</bold></highlight> may further include other removable/non-removable, volatile/non-volatile computer storage media. For example, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a hard disk drive <highlight><bold>144</bold></highlight> for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &ldquo;hard drive&rdquo;), a magnetic disk drive <highlight><bold>146</bold></highlight> for reading from and writing to a removable, non-volatile magnetic disk <highlight><bold>148</bold></highlight> (e.g., a &ldquo;floppy disk&rdquo;), and an optical disk drive <highlight><bold>150</bold></highlight> for reading from or writing to a removable, non-volatile optical disk <highlight><bold>152</bold></highlight> such as a CD-ROM, CD-R, CD-RW, DVD-ROM, DVD-RAM or other optical media. Hard disk drive <highlight><bold>144</bold></highlight>, magnetic disk drive <highlight><bold>146</bold></highlight> and optical disk drive <highlight><bold>150</bold></highlight> are each connected to bus <highlight><bold>136</bold></highlight> by one or more interfaces <highlight><bold>154</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The drives and associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules, and other data for computer <highlight><bold>130</bold></highlight>. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk <highlight><bold>148</bold></highlight> and a removable optical disk <highlight><bold>152</bold></highlight>, it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A number of program modules may be stored on the hard disk, magnetic disk <highlight><bold>148</bold></highlight>, optical disk <highlight><bold>152</bold></highlight>, ROM <highlight><bold>138</bold></highlight>, or RAM <highlight><bold>140</bold></highlight>, including, e.g., an operating system <highlight><bold>158</bold></highlight>, one or more application programs <highlight><bold>160</bold></highlight>, other program modules <highlight><bold>162</bold></highlight>, and program data <highlight><bold>164</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The improved methods and apparatuses described herein may be implemented within operating system <highlight><bold>158</bold></highlight>, one or more application programs <highlight><bold>160</bold></highlight>, other program modules <highlight><bold>162</bold></highlight>, and/or program data <highlight><bold>164</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> A user may provide commands and information into computer <highlight><bold>130</bold></highlight> through input devices such as keyboard <highlight><bold>166</bold></highlight> and pointing device <highlight><bold>168</bold></highlight> (such as a &ldquo;mouse&rdquo;). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, camera, etc. These and other input devices are connected to the processing unit <highlight><bold>132</bold></highlight> through a user input interface <highlight><bold>170</bold></highlight> that is coupled to bus <highlight><bold>136</bold></highlight>, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> A monitor <highlight><bold>172</bold></highlight> or other type of display device is also connected to bus <highlight><bold>136</bold></highlight> via an interface, such as a video adapter <highlight><bold>174</bold></highlight>. In addition to monitor <highlight><bold>172</bold></highlight>, personal computers typically include other peripheral output devices (not shown), such as speakers and printers, which may be connected through output peripheral interface <highlight><bold>175</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Computer <highlight><bold>130</bold></highlight> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <highlight><bold>182</bold></highlight>. Remote computer <highlight><bold>182</bold></highlight> may include many or all of the elements and features described herein relative to computer <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Logical connections shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> are a local area network (LAN) <highlight><bold>177</bold></highlight> and a general wide area network (WAN) <highlight><bold>179</bold></highlight>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> When used in a LAN networking environment, computer <highlight><bold>130</bold></highlight> is connected to LAN <highlight><bold>177</bold></highlight> via network interface or adapter <highlight><bold>186</bold></highlight>. When used in a WAN networking environment, the computer typically includes a modem <highlight><bold>178</bold></highlight> or other means for establishing communications over WAN <highlight><bold>179</bold></highlight>. Modem <highlight><bold>178</bold></highlight>, which may be internal or external, may be connected to system bus <highlight><bold>136</bold></highlight> via the user input interface <highlight><bold>170</bold></highlight> or other appropriate mechanism. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is a specific implementation of a WAN via the Internet. Here, computer <highlight><bold>130</bold></highlight> employs modem <highlight><bold>178</bold></highlight> to establish communications with at least one remote computer <highlight><bold>182</bold></highlight> via the Internet <highlight><bold>180</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In a networked environment, program modules depicted relative to computer <highlight><bold>130</bold></highlight>, or portions thereof, may be stored in a remote memory storage device. Thus, e.g., as depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, remote application programs <highlight><bold>189</bold></highlight> may reside on a memory device of remote computer <highlight><bold>182</bold></highlight>. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, which depicts an exemplary communications environment <highlight><bold>200</bold></highlight>. Communications environment <highlight><bold>200</bold></highlight> includes a server <highlight><bold>202</bold></highlight> coupled to a network <highlight><bold>204</bold></highlight>. Server <highlight><bold>202</bold></highlight>, in this example, is configured as a sending device that provides streamed media over network <highlight><bold>204</bold></highlight>. Network <highlight><bold>204</bold></highlight> is representative of one or more communication links/networks. In certain exemplary implementations network <highlight><bold>204</bold></highlight> includes the Internet, an intranet, or other like network. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> A second server <highlight><bold>206</bold></highlight> is also shown as being coupled to network <highlight><bold>204</bold></highlight>. Server <highlight><bold>206</bold></highlight>, in this example, is configured as a sending device that can provide streaming media through an antenna <highlight><bold>208</bold></highlight> to a wireless receiving device <highlight><bold>210</bold></highlight>. Thus, for example, server <highlight><bold>206</bold></highlight> may be co-located with a wireless base station. Server <highlight><bold>206</bold></highlight> may generate the streamed media itself, and/or may receive streamed media from server <highlight><bold>202</bold></highlight> and provide the streamed media to receiving device <highlight><bold>210</bold></highlight>. In this example, the streamed media that is sent from server <highlight><bold>206</bold></highlight> to receiving device <highlight><bold>210</bold></highlight> has associated with it error correction data. The error correction data can be generated, for example, by server <highlight><bold>202</bold></highlight> and/or server <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In the examples that follow it will be assumed that server <highlight><bold>206</bold></highlight> is the sending device that is providing both the streamed media and generating the associated error correction data to receiving device <highlight><bold>210</bold></highlight>, which is configured as a client device. It is noted, however, that the methods and apparatuses provided herein are adaptable for use in both wired and wireless environments. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Receiving device <highlight><bold>210</bold></highlight> is representative of any device capable of receiving streamed media over a wireless communication link. The wireless communication link, in this example, may be obstructed or otherwise interfered with by objects or other signals. For example, as illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, an obstacle such as truck <highlight><bold>212</bold></highlight> may cause signal interference as it passes between antenna <highlight><bold>208</bold></highlight> and receiving device <highlight><bold>210</bold></highlight>. Such signal interference can lead to errors in the received data, which can degrade the streamed media presentation if not corrected. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In accordance with certain aspects of the present invention, to correct the errors in the received data, server <highlight><bold>206</bold></highlight> and receiving device <highlight><bold>210</bold></highlight> are configured to support an improved error correction scheme. The improved error correction scheme essentially allows the sending device and receiving device to negotiate the level of error correction that is provided for the streamed media. The negotiation can be conducted at the beginning of the streaming media process and anytime thereafter. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Thus, with the improved error correction scheme it is possible to dynamically alter the error correction level as needed to overcome errors caused by different interference factors. For example, receiving device <highlight><bold>210</bold></highlight> may send a request message <highlight><bold>214</bold></highlight> identifying a requested error correction level <highlight><bold>216</bold></highlight>. A higher error correction level may be requested when truck <highlight><bold>212</bold></highlight> is causing interference. However, once truck <highlight><bold>212</bold></highlight> has moved on, then receiving device <highlight><bold>210</bold></highlight> may request a lower error correction level. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In accordance with certain exemplary implementations of the present invention, request message <highlight><bold>214</bold></highlight> is a real time streaming protocol (RTSP) setup message. Here, for example, the requested error correction level <highlight><bold>216</bold></highlight> can indicate the density of error correction packets that are to be generated for a plurality of streaming media data packets. In certain implementations, for example, the density of error correction packets is specified along with the number of streaming media data packets within a span. Thus, when requesting the streamed media, receiving device <highlight><bold>210</bold></highlight> may request that the density of error correction packets be two per span, wherein each span includes four streaming media data packets. The sending device, here server <highlight><bold>206</bold></highlight>, can either accept the request, propose a different error correction level, or override the requested error correction level. Hence, in this example, it is assumed that server <highlight><bold>206</bold></highlight> has decided to accept the requested error correction level <highlight><bold>216</bold></highlight>. As such, server <highlight><bold>206</bold></highlight> will provide the requisite computing and data storage resources for the error correction data generation process. If at sometime during the streaming media session, server <highlight><bold>206</bold></highlight> can no longer provide such resources, then the error correction level provided can be reduced by server <highlight><bold>206</bold></highlight> as needed. As will be described, the error correction packets transmitted to receiving device <highlight><bold>210</bold></highlight> indicate the error correction level that the sending device (here, server <highlight><bold>206</bold></highlight>) has applied. In this manner, the error correction level can be established, negotiated, and/or dynamically altered, as needed, by either the receiving device or the sending device. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> With this example in mind, attention is now drawn to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, which depicts an exemplary streaming media arrangement <highlight><bold>300</bold></highlight>, in accordance with certain implementations of the present invention. Here, a sending device <highlight><bold>302</bold></highlight> is streaming media to a receiving device <highlight><bold>304</bold></highlight>. As shown, a data connection <highlight><bold>306</bold></highlight> is provided with forward error correction (FEC) protection. Data connection <highlight><bold>306</bold></highlight> includes a real-time transport protocol (RTP) data stream <highlight><bold>306</bold></highlight><highlight><italic>a </italic></highlight>and an associated RTP FEC data stream <highlight><bold>306</bold></highlight><highlight><italic>b. </italic></highlight>While, in this example, data streams <highlight><bold>306</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>306</bold></highlight><highlight><italic>b </italic></highlight>are distinct data streams, in other configurations these data streams can be interleaved into a single data stream. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Logic <highlight><bold>308</bold></highlight> is provided in sending device <highlight><bold>302</bold></highlight> to support the improved error correction scheme. In this example, logic <highlight><bold>308</bold></highlight> includes server dynamic FEC logic, which is configured to stream media, and encode (and stream) error correction data associated with the streamed media. Prior to streaming media, logic <highlight><bold>308</bold></highlight> provides receiving device <highlight><bold>304</bold></highlight> with information about the streaming media available. For example, in certain implementations an enhancement is provided to the standard session description protocol (SDP) elements that allows receiving device <highlight><bold>304</bold></highlight> to identify the location and characteristics of the streamed media and associated FEC data streams. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Once receiving device <highlight><bold>304</bold></highlight> has selected a streamed media, then receiving device <highlight><bold>304</bold></highlight> sends an RTSP setup message <highlight><bold>214</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) to receiving device <highlight><bold>302</bold></highlight>, wherein logic <highlight><bold>308</bold></highlight> responds by streaming media over data connection <highlight><bold>306</bold></highlight>. As mentioned, sending device <highlight><bold>302</bold></highlight> may accept/support the requested error correction level <highlight><bold>216</bold></highlight>, or some other error correction level as may be more appropriate given the situation. The resulting error correction level, however it is decided, is identified by logic <highlight><bold>308</bold></highlight> within RTP FEC stream <highlight><bold>306</bold></highlight><highlight><italic>b. </italic></highlight>For example, logic <highlight><bold>308</bold></highlight> can identify the density of error correction applied to a span of data packets within a header portion of an RTP message within one or more packets in RTP FEC stream <highlight><bold>306</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> To support such tasks, logic <highlight><bold>308</bold></highlight> is operatively coupled to a communication interface <highlight><bold>310</bold></highlight>, which includes a transmitter and a receiver (not shown) configured to support communications between sending device <highlight><bold>302</bold></highlight> and receiving device <highlight><bold>304</bold></highlight>. Logic <highlight><bold>312</bold></highlight> is also operatively coupled to memory <highlight><bold>312</bold></highlight>, which is configured to support the requisite buffering of media and/or error correction data for the improved error correction scheme. In this example, logic <highlight><bold>308</bold></highlight> is also operatively coupled to an optional management interface <highlight><bold>314</bold></highlight>, which is arranged to configure certain operating parameters for logic <highlight><bold>308</bold></highlight>. Thus, for example, management interface <highlight><bold>314</bold></highlight> may provide a user interface that allows a user to control/monitor logic <highlight><bold>308</bold></highlight>. by way of example, the user may establish a minimum/maximum error correction level that logic <highlight><bold>308</bold></highlight> will provide. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Logic <highlight><bold>308</bold></highlight> operates with corresponding logic <highlight><bold>316</bold></highlight> provided within receiving device <highlight><bold>304</bold></highlight>. In this example, logic <highlight><bold>316</bold></highlight> includes client dynamic FEC logic. Logic <highlight><bold>316</bold></highlight> is operatively coupled a communication interface <highlight><bold>318</bold></highlight>, which configured to provide communication to sending device <highlight><bold>302</bold></highlight>, e.g., via communication interface <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Logic <highlight><bold>316</bold></highlight> is configured to support the improved error correction scheme. As such, logic <highlight><bold>316</bold></highlight> is configured to use the received error correction data packets to correct errors in the received streamed media packets. In certain implementations, logic <highlight><bold>316</bold></highlight> is configured, therefore, to specify at any time the number of data packets (or span) to which a given number of FEC data packets will apply, and subsequently identify a received span and its associated received FEC data packets, reorder those data packets if necessary, and then apply error correction to any induced bit errors that are identified in the data. To support such tasks, logic <highlight><bold>316</bold></highlight> is also operatively coupled to memory <highlight><bold>320</bold></highlight>, which is configured to support the requisite buffering of media and/or error correction data. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Logic <highlight><bold>316</bold></highlight> is also operatively coupled to an application interface <highlight><bold>322</bold></highlight>, which provides communication between an application <highlight><bold>324</bold></highlight> and logic <highlight><bold>316</bold></highlight>. Application <highlight><bold>324</bold></highlight>, for example, can be a streamed media player/recorder. Logic <highlight><bold>316</bold></highlight> is configured to support the operation of application <highlight><bold>324</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> With this in mind, reference is now made to the flow diagram in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which depicts an exemplary dynamic error correction process <highlight><bold>400</bold></highlight> for use in receiving device <highlight><bold>304</bold></highlight>. In step <highlight><bold>402</bold></highlight>, receiving device <highlight><bold>304</bold></highlight> discovers and selects a streaming media available on sending device <highlight><bold>302</bold></highlight>. Then in step <highlight><bold>404</bold></highlight>, a request message <highlight><bold>214</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) identifying a requested error correction level <highlight><bold>216</bold></highlight> (e.g., within an RTSP setup message) is sent to sending device <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Next, in step <highlight><bold>406</bold></highlight>, if for some reason the sending device does not accept the request, then one or more additional requests, preferably with different requested error correction levels, are sent as needed until the sending device agrees to provide the requested streamed media. Process <highlight><bold>400</bold></highlight> then continues with step <highlight><bold>408</bold></highlight>, wherein sending device <highlight><bold>302</bold></highlight> has accepted the request for streamed media. In step <highlight><bold>408</bold></highlight>, receiving device <highlight><bold>304</bold></highlight> begins receiving streamed media data packets and corresponding FEC data packets. In step <highlight><bold>410</bold></highlight>, at least one span of streamed media data packets is buffered/arranged along with one or more associated FEC packets. Here, the number of streamed media data packets in the span can be identified in the FEC data packet(s). </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Next, in step <highlight><bold>412</bold></highlight>, error correction is performed, as needed. For example, an FEC decoder operation is performed on the data in the span using the associated FEC data packet(s). In step <highlight><bold>414</bold></highlight>, the error corrected streamed media data is provided through application interface <highlight><bold>322</bold></highlight> to application <highlight><bold>324</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>) for further processing. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In step <highlight><bold>416</bold></highlight>, logic <highlight><bold>316</bold></highlight> monitors the streamed media process and if desirable negotiates a different error correction level. For example, a new request message <highlight><bold>214</bold></highlight> identifying a different requested error correction level <highlight><bold>216</bold></highlight> (e.g., within an RTSP setup message) can be sent to sending device <highlight><bold>302</bold></highlight>. With or without a change to the requested error correction level, process <highlight><bold>400</bold></highlight> then returns to step <highlight><bold>408</bold></highlight>. Thereafter, for the life of the streamed media connection, steps <highlight><bold>408</bold></highlight> through <highlight><bold>416</bold></highlight> are repeated. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Attention is now drawn to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, which depicts an exemplary dynamic error correction process <highlight><bold>500</bold></highlight> for use in sending device <highlight><bold>302</bold></highlight>. In step <highlight><bold>502</bold></highlight>, sending device <highlight><bold>502</bold></highlight> identifies the availability of streamed media to an inquiring receiving device. Next, in step <highlight><bold>504</bold></highlight> a request for streamed media is received. The request identifies an initial error correction level to be applied to a specified streamed media. For example, a request message <highlight><bold>214</bold></highlight> identifying a requested error correction level <highlight><bold>216</bold></highlight> (e.g., within an RTSP setup message) can be sent by receiving device <highlight><bold>304</bold></highlight> to sending device <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In step <highlight><bold>506</bold></highlight>, a determination is made as to whether sending device <highlight><bold>302</bold></highlight> can support the requested error correction level. If the requested error correction level cannot be supported, then process <highlight><bold>500</bold></highlight> continues with step <highlight><bold>508</bold></highlight>. In step <highlight><bold>508</bold></highlight>, sending device <highlight><bold>302</bold></highlight> communicates (actively or passively) to receiving device <highlight><bold>304</bold></highlight>, that the requested error correction level cannot be supported. Thereafter, sending device <highlight><bold>302</bold></highlight> waits for a new request message. This or a similar negotiation procedure continues until an acceptable error correction level is requested. Optionally, in certain implementations, sending device <highlight><bold>302</bold></highlight> may, at some point unilaterally adjust the error correction level to an acceptable level. For example, if there is need in the sending device to reduce the amount of processing/memory associated with an FEC data stream, then sending device <highlight><bold>302</bold></highlight> can make the necessary corresponding changes (e.g., reduction) to the error correction level. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Once the error correction level is acceptable, then process <highlight><bold>500</bold></highlight> continues with step <highlight><bold>510</bold></highlight>, wherein sending device <highlight><bold>302</bold></highlight> generates the appropriate number of error correction data packet(s) for a defined span of one or more streamed media data packets. The span of streamed data packets may include a sequential span or non-sequential span of streamed media packets. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Next, in step <highlight><bold>512</bold></highlight>, sending device <highlight><bold>302</bold></highlight> provides the span and associated error correction data packet(s) to receiving device <highlight><bold>304</bold></highlight>. In step <highlight><bold>514</bold></highlight>, if receiving device <highlight><bold>304</bold></highlight> has requested a different error correction level, then process <highlight><bold>500</bold></highlight> returns to step <highlight><bold>506</bold></highlight>, otherwise process <highlight><bold>500</bold></highlight> returns to step <highlight><bold>510</bold></highlight>. Steps <highlight><bold>506</bold></highlight> through <highlight><bold>514</bold></highlight> are repeated for the life of the streamed media connection. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, which illustratively depicts an extension <highlight><bold>600</bold></highlight> to an RTP message header that is suitable for use in an FEC data packet provided by sending device <highlight><bold>302</bold></highlight> to receiving device <highlight><bold>304</bold></highlight>, in accordance with certain exemplary implementations of the present invention. Here, RTP message header <highlight><bold>600</bold></highlight> identifies the error correction level associated with the FEC data packet by specifying a Mask, an FEC Span, and an FEC Index. The Mask identifies the number of packets in the span associated with the FEC data packet. In this example, the Mask field is 24 bits. FEC Span identifies the number of FEC data packets associated with the span. Here, the FEC Span field is 5 bits. The FEC Index identifies the present FEC data packet&apos;s position within the FEC Span. Here, the FEC Index field is 6 bits. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Other fields included within exemplary extension <highlight><bold>600</bold></highlight>, include a 16 bit packet Sequence Number (SN) Base field, a 16 bit Length Recovery field, a 1 bit Extended (E) flag field, a 7 bit Payload Type (PT) Recovery field, a 32 bit media packet Timestamp (TS) Recovery field, a 5 bit EX Flags field, and a 16 bit Reserved field. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The SN Base field is set to the minimum sequence number of those media packets on this streaming connection that are to be protected by FEC. This allows for the FEC operation to extend over a string of packets. The Length Recovery field is used to determine the length of any recovered packets. It is computed via the protection operation applied to the 16 bit natural binary representation of the payload length (in bytes). The payload length includes the media payload itself, as well as additional overhead for the CSRC list, extension and padding of the media packet or packets associated with this FEC packet. This field allows for the FEC procedure to be applied even when the lengths of the media packets streamed on a connection vary. For example, assume an FEC packet is being generated by XOR&apos;ing two media packets together. The length of the two media packets are 3 (0b011) and 5 (0b101) bytes, respectively. The length recovery field is then encoded as 0b011 XOR 0b101&equals;0b100. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The E flag indicates a header extension. PT indicates Payload Type for the media packet payload. The PT recovery field is obtained via the protection operation applied to the payload type values of the media packets associated with the FEC data packet. The Mask field is 24 bits, and identifies the media packet associated with the FEC data packet. If bit i in the mask is set to 1, then the media packet with sequence number N&plus;i is associated with the FEC data packet, where N is the SN Base field in the FEC packet header. The least significant bit corresponds to i&equals;0, and since, in this example, there can be at most 24 packets in a sequence of FEC protected streamed media packets, the most significant bit corresponds to i&equals;23. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The TS recovery field is computed via the protection operation applied to the timestamps of the streamed media packets associated with the FEC data packet. This allows the timestamp to be completely recovered. The EX Flags and the Reserved fields are each reserved for future use. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The following sections focus on some exemplary message exchanges using the above methods and apparatuses. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The excerpts below are from an SDP content description that is sent by sending device <highlight><bold>302</bold></highlight> to receiving device <highlight><bold>302</bold></highlight> in response to a DESCRIBE request. The SDP description indicates the path for the content file, and URLs for audio and video streams, as well as associated standard and dynamic FEC streams. </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> v&equals;0 </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> o&equals;SYSTEM 2001032617414702&emsp;00 </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> 200103261741470200 </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> IN IP4&emsp;127.0.0.1 </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> s&equals;&lt;No Title&gt;</paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> c&equals;IN <highlight><bold>1</bold></highlight>P4&emsp;0.0.0.0 </paragraph>
<paragraph id="P-0076" lvl="2"><number>&lsqb;0076&rsqb;</number> b&equals;AS:5 </paragraph>
<paragraph id="P-0077" lvl="2"><number>&lsqb;0077&rsqb;</number> a&equals;maxps:900 </paragraph>
<paragraph id="P-0078" lvl="2"><number>&lsqb;0078&rsqb;</number> t&equals;0.0 </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> a&equals;control:rtsp://test/welcome.asf/ //the absolute URL for this media stream </paragraph>
<paragraph id="P-0080" lvl="2"><number>&lsqb;0080&rsqb;</number> a&equals;etag:&lcub;6CAE8AA4-1866-A24D-344E-3CF22C3894A7&rcub;</paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> a&equals;range:npt&equals;0.000-110.474 </paragraph>
<paragraph id="P-0082" lvl="2"><number>&lsqb;0082&rsqb;</number> a&equals;recvonly </paragraph>
<paragraph id="P-0083" lvl="2"><number>&lsqb;0083&rsqb;</number> a:pgmpu:data:application/x-wms-contentdesc,Copied%20MetaData%20From%20Playlist%20File&equals;1%0D%0 A </paragraph>
<paragraph id="P-0084" lvl="2"><number>&lsqb;0084&rsqb;</number> : p<highlight><bold>1</bold></highlight> m&equals;audio 0 RTP/AVP 96&emsp;97&emsp;98 </paragraph>
<paragraph id="P-0085" lvl="2"><number>&lsqb;0085&rsqb;</number> b&equals;AS:7 </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> b&equals;RS:0 </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> b&equals;RR:0 </paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> a&equals;rtpmap:96 x-asf-pf/10000 </paragraph>
<paragraph id="P-0089" lvl="2"><number>&lsqb;0089&rsqb;</number> a&equals;rtpmap:97 parityfec/1000 </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> a&equals;fmtp:97 audio/fec97&emsp;24&emsp;1 </paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> a&equals;rtpmap:98 wms-fec/1000 </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> a&equals;fmtp:98 audio/fec98&emsp;24&emsp;1&emsp;//the relative URL For this media stream&apos;s associated dynamic FEC stream </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> a&equals;control:audio </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> a&equals;stream:1 </paragraph>
<paragraph id="P-0095" lvl="2"><number>&lsqb;0095&rsqb;</number> m&equals;application 0 RTP/AVP 96 </paragraph>
<paragraph id="P-0096" lvl="2"><number>&lsqb;0096&rsqb;</number> b&equals;RS:0 </paragraph>
<paragraph id="P-0097" lvl="2"><number>&lsqb;0097&rsqb;</number> b&equals;RR:0 </paragraph>
<paragraph id="P-0098" lvl="2"><number>&lsqb;0098&rsqb;</number> a&equals;rtpmap:96 x-wms-rtx/1000 </paragraph>
<paragraph id="P-0099" lvl="2"><number>&lsqb;0099&rsqb;</number> a&equals;control:rtx </paragraph>
<paragraph id="P-0100" lvl="2"><number>&lsqb;0100&rsqb;</number> a&equals;stream:65536 </paragraph>
<paragraph id="P-0101" lvl="2"><number>&lsqb;0101&rsqb;</number> m&equals;video 0 RTP/AVP 96&emsp;97&emsp;98 </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> b&equals;AS:45 </paragraph>
<paragraph id="P-0103" lvl="2"><number>&lsqb;0103&rsqb;</number> b&equals;RS:0 </paragraph>
<paragraph id="P-0104" lvl="2"><number>&lsqb;0104&rsqb;</number> b&equals;RR:0 </paragraph>
<paragraph id="P-0105" lvl="2"><number>&lsqb;0105&rsqb;</number> a&equals;rtpmap:96 x-asf-pf/1000 </paragraph>
<paragraph id="P-0106" lvl="2"><number>&lsqb;0106&rsqb;</number> a&equals;rtpmap:97 parityfec/1000 </paragraph>
<paragraph id="P-0107" lvl="2"><number>&lsqb;0107&rsqb;</number> a&equals;fmtp:97 video/fec97&emsp;24&emsp;1 </paragraph>
<paragraph id="P-0108" lvl="2"><number>&lsqb;0108&rsqb;</number> a&equals;rtpmap:98 wms-fec/1000 </paragraph>
<paragraph id="P-0109" lvl="2"><number>&lsqb;0109&rsqb;</number> a&equals;fmtp:98 video/fec98&emsp;24&emsp;1 </paragraph>
<paragraph id="P-0110" lvl="2"><number>&lsqb;0110&rsqb;</number> a&equals;control:video </paragraph>
<paragraph id="P-0111" lvl="2"><number>&lsqb;0111&rsqb;</number> a&equals;stream:2 </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> The following lines identify a dynamic error correction level payload format and the URL that is to be used for a FEC Stream corresponding to this format: </paragraph>
<paragraph id="P-0113" lvl="2"><number>&lsqb;0113&rsqb;</number> a&equals;rtpmap:98 wms-fec/1000&emsp;//Windows&reg; Media Services FEC payload format 98 </paragraph>
<paragraph id="P-0114" lvl="2"><number>&lsqb;0114&rsqb;</number> a&equals;fmtp:98 audio/fec98&emsp;24&emsp;1&emsp;//the relative URL For this media stream&apos;s associated dynamic FEC stream using this payload format </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In this example, receiving device <highlight><bold>304</bold></highlight> appends the relative URL to the absolute URL for the media stream in order to arrive at: </paragraph>
<paragraph id="P-0116" lvl="2"><number>&lsqb;0116&rsqb;</number> rtsp://test/welcome.asf/audio/fec98&emsp;24&emsp;1 </paragraph>
<paragraph id="P-0117" lvl="7"><number>&lsqb;0117&rsqb;</number> as the URL for the associated FEC connection for streamed media at rtsp://test/welcome.asf. The FEC URL description includes the FEC Span&mdash;the number of data packets to which a particular FEC data packet or set of FEC data packets will apply&mdash;and the number of FEC data packets that apply to this span: </paragraph>
<paragraph id="P-0118" lvl="2"><number>&lsqb;0118&rsqb;</number> a&equals;fmtp:98 audio/fec98&emsp;24&emsp;1&emsp;// span&equals;24, FEC packets per span&equals;1 </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> From this, receiving device <highlight><bold>304</bold></highlight> is able to select, for example, audio and/or video streams and for each of those it can select associated FEC streams that are encoded according to standard FEC or according to dynamic FEC. In the case of dynamic FEC, in this example, a request/response exchange between sending device <highlight><bold>302</bold></highlight> and receiving device <highlight><bold>304</bold></highlight> occurs whereby sending device <highlight><bold>302</bold></highlight> agrees to the receiving device&apos;s SETUP request to play a stream of dynamic FEC data packets, using a packet span of 24 and 4 FEC data packets per span. Here, an FecBurstMargin is used to buffer a set of packet spans and associated FEC packets in the form of a Vandermonde matrix, which includes calculations commonly applied to error correction problems. </paragraph>
<paragraph id="P-0120" lvl="2"><number>&lsqb;0120&rsqb;</number> SETUP rtsp://test/welcome2.asf/stream&equals;5/fec98 RTSP/1.0 </paragraph>
<paragraph id="P-0121" lvl="2"><number>&lsqb;0121&rsqb;</number> Transport: RTP/AVP/UDP;unicast;client_port&equals;2408;ssrc&equals;6dded651;mode&equals;PLAY;Fec Span&equals;4;FecPerSpan&equals;1;FecBurstMargin&equals;6, RTP/AVP/TCP;unicast;interleaved&equals;0-1;ssrc&equals;6dded651;mode&equals;PLAY </paragraph>
<paragraph id="P-0122" lvl="2"><number>&lsqb;0122&rsqb;</number> If-Match: &ldquo;&lcub;83A04BD0-FD30-1984-4994-0A22CA116ED3&rcub;&rdquo;</paragraph>
<paragraph id="P-0123" lvl="2"><number>&lsqb;0123&rsqb;</number> Date: Fri, 23 Mar 2001&emsp;04:28:14 GMT </paragraph>
<paragraph id="P-0124" lvl="2"><number>&lsqb;0124&rsqb;</number> CSeq: 8 </paragraph>
<paragraph id="P-0125" lvl="2"><number>&lsqb;0125&rsqb;</number> Session: 1077055954 </paragraph>
<paragraph id="P-0126" lvl="2"><number>&lsqb;0126&rsqb;</number> User-Agent: WMPlayer/9.0.0.197 guid/CB131790-CC16-4CCE-A234-6D29BEE21FCE </paragraph>
<paragraph id="P-0127" lvl="2"><number>&lsqb;0127&rsqb;</number> Accept-Language: en-us, *;q&equals;0.1 </paragraph>
<paragraph id="P-0128" lvl="2"><number>&lsqb;0128&rsqb;</number> Accept-Charset: UTF-8, *;q&equals;0.1 </paragraph>
<paragraph id="P-0129" lvl="2"><number>&lsqb;0129&rsqb;</number> X-Accept-Authentication: NTLM, Digest, B </paragraph>
<paragraph id="P-0130" lvl="2"><number>&lsqb;0130&rsqb;</number> RTSP/1.0&emsp;200 OK </paragraph>
<paragraph id="P-0131" lvl="2"><number>&lsqb;0131&rsqb;</number> Transport: RTP/AVP/UDP;unicast;source&equals;157.56.216.159;server_port&equals;2410;client_p ort&equals;2408;ssrc&equals;3874dd27;mode&equals;PLAY;FecSpan&equals;4;FecPerSpan&equals;1;FecBurs tMargin&equals;6 </paragraph>
<paragraph id="P-0132" lvl="2"><number>&lsqb;0132&rsqb;</number> Date: Fri, 23 Mar 2001&emsp;04:28:14 GMT </paragraph>
<paragraph id="P-0133" lvl="2"><number>&lsqb;0133&rsqb;</number> CSeq: 8 </paragraph>
<paragraph id="P-0134" lvl="2"><number>&lsqb;0134&rsqb;</number> Timestamp: 1&emsp;0.031 </paragraph>
<paragraph id="P-0135" lvl="2"><number>&lsqb;0135&rsqb;</number> Session: 1077055954;timeout&equals;60 </paragraph>
<paragraph id="P-0136" lvl="2"><number>&lsqb;0136&rsqb;</number> Server: WMServer/9.0.0.197 </paragraph>
<paragraph id="P-0137" lvl="2"><number>&lsqb;0137&rsqb;</number> Cache-Control: must-revalidate, proxy-revalidate </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> In the following example receiving device <highlight><bold>304</bold></highlight> establishes an initial FEC density of 4:2. The RTSP setup message includes: </paragraph>
<paragraph id="P-0139" lvl="2"><number>&lsqb;0139&rsqb;</number> SETUP rtsp://test/welcome2.asf/stream&equals;5/fec98 RTSP/1.0 </paragraph>
<paragraph id="P-0140" lvl="2"><number>&lsqb;0140&rsqb;</number> Transport: RTP/AVP/UDP;unicast;client_port&equals;2408;ssrc&equals;6dded651;mode&equals;PLAY;Fec Span&equals;4;FecPerSpan&equals;2; </paragraph>
<paragraph id="P-0141" lvl="7"><number>&lsqb;0141&rsqb;</number> Sending device <highlight><bold>302</bold></highlight> responds with success: </paragraph>
<paragraph id="P-0142" lvl="2"><number>&lsqb;0142&rsqb;</number> RTSP/1.0&emsp;200 OK </paragraph>
<paragraph id="P-0143" lvl="2"><number>&lsqb;0143&rsqb;</number> Transport: RTP/AVP/UDP;unicast;source&equals;157.56.216.159;server_port&equals;2410;client_p ort&equals;2408;ssrc&equals;3874dd27; </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> Thereafter, receiving device <highlight><bold>304</bold></highlight> will receive streamed media and associated FEC data packets from sending device <highlight><bold>302</bold></highlight>, with each FEC data packet using RTP header extension <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Attention is now drawn to the illustrative diagram depicted in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, wherein an arrangement <highlight><bold>700</bold></highlight> is shown having a 4&times;4 matrix of media data packets (<highlight><bold>701</bold></highlight> through <highlight><bold>716</bold></highlight>) and two alternative associated FEC data packet sets <highlight><bold>716</bold></highlight> and <highlight><bold>718</bold></highlight>. FEC data packet set <highlight><bold>716</bold></highlight> includes FEC data packets <highlight><bold>731</bold></highlight> through <highlight><bold>738</bold></highlight>, and FEC data packet set <highlight><bold>718</bold></highlight> includes FEC data packets <highlight><bold>721</bold></highlight> through <highlight><bold>728</bold></highlight>. Arrangement <highlight><bold>700</bold></highlight> illustrates that FEC encoding can be applied to sequential streamed media data packets or non-sequential data packets. Here, for example, as represented by shaded region <highlight><bold>742</bold></highlight>, FEC encoding can be applied to sequential data packets <highlight><bold>701</bold></highlight>-<highlight><bold>704</bold></highlight> to produce associated FEC data packets <highlight><bold>721</bold></highlight> and <highlight><bold>722</bold></highlight>. Alternatively, as represented by shaded region <highlight><bold>740</bold></highlight>, FEC encoding can be applied to non-sequential data packets <highlight><bold>701</bold></highlight>, <highlight><bold>705</bold></highlight>, <highlight><bold>709</bold></highlight>, and <highlight><bold>713</bold></highlight>, to produce associated FEC data packets <highlight><bold>731</bold></highlight> and <highlight><bold>732</bold></highlight>. Note that the error correction density in both instances is 4:2. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> In certain implementations, it is advantageous to encode non-sequential data packets, since doing so may reduce the deleterious effects of burst errors commonly experienced in certain wireless links. However, such non-sequential encoding requires more memory (in both sending device <highlight><bold>302</bold></highlight> and receiving device <highlight><bold>304</bold></highlight>) than comparable sequential encoding. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> In accordance with certain implementations of the present invention, logic <highlight><bold>308</bold></highlight> and logic <highlight><bold>316</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>) are further configured to selectively/dynamically switch between sequential and non-sequential encoding. Thus, for example, receiving device <highlight><bold>304</bold></highlight> and sending device <highlight><bold>302</bold></highlight> may initially/dynamically negotiate to use a particular type of error correction encoding. This additional capability may be used to further improve the streamed media process. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> In accordance with certain other implementations of the present invention, logic <highlight><bold>308</bold></highlight> and logic <highlight><bold>316</bold></highlight> may be further configured to selectively/dynamically apply error correction encoding to the streamed media based on the content of the streamed media. By way of example, different error correction encoding can be applied to video content and audio content. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In certain further implementations, for example, different error correction encoding can be applied to different portions of a streamed video. Thus, in a news broadcast, inserted commercial portions may be error correction encoded at a different level than the news portions. In accordance with still other implementations, different error correction encoding can be applied to streamed media data packets carrying different types of video frame data. For example, in an MPEG stream, a data packet with I-frame data may be error correction encoded at a higher level than a data packet with P-frame data. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Although some preferred implementations of the various methods and apparatuses of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the exemplary implementations disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for use in a receiving device, the method comprising: 
<claim-text>identifying a sending device configurable to provide streamed media with dynamic error correction; </claim-text>
<claim-text>generating a request for the streamed media that identifies a requested error correction level; and </claim-text>
<claim-text>providing the request for the streamed media to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>subsequently dynamically modifying the requested error correction level; and </claim-text>
<claim-text>providing the modified requested error correction level to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein generating the request for the streamed media includes identifying the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein specifying the requested error correction data density includes: 
<claim-text>identifying a number of streamed data packets within a span; and </claim-text>
<claim-text>identifying a number of error correction data packets associated with the span. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the number of streamed data packets within the span is between about 1 and about 24, and wherein the number of error correction data packets associated with the span is between about 1 and about 24. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein providing the request for the streamed media to the sending device includes: 
<claim-text>sending a real time streaming protocol (RTSP) setup message to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>receiving streamed data packets and error correction data packets sent by the sending device; </claim-text>
<claim-text>associating a span, comprising a plurality of the received streamed data packets, with at least one of the received error correction data packets; and </claim-text>
<claim-text>correcting errors in the span, as needed, using the at least one of the received error correction data packets. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the span includes a plurality of sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the span includes a plurality of non-sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>selectively requesting that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>selectively requesting that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are non-sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein associating the span with the at least one of the received error correction data packets includes: 
<claim-text>examining a packet header within the at least one of the received error correction data packets to determine: 
<claim-text>the plurality of the received data packets within the span; and </claim-text>
<claim-text>a position parameter for the at least one of the received error correction data packets within an error correction data packet sequence associated with the span. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the packet header includes an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the error correction data packets include forward error correction (FEC) generated error correction data. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein providing the request for the streamed media to the sending device includes transmitting the request for the streamed media over at least one wireless communication link. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the receiving device is a client device and the sending device is a server device. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. An apparatus for use in a receiving device, the apparatus comprising: 
<claim-text>a receiver operatively configurable to receive streamed media from a sending device; </claim-text>
<claim-text>a transmitter operatively configurable to output requests for the streamed media; and </claim-text>
<claim-text>logic operatively coupled to the receiver and the transmitter, the logic being configured to generate a request for the streamed media that specifies a requested error correction level and provide the request to the transmitter. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the logic is further operatively configured to subsequently dynamically modify the requested error correction level. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the logic is further configured to identify the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the requested error correction data density identifier includes a specified number of streamed data packets within a span and a specified number of error correction data packets associated with the span. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the specified number of streamed data packets within the span is between about 1 and about 24, and wherein the specified number of error correction data packets associated with the span is between about 1 and about 24. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the transmitter is configured to provide the request within a real time streaming protocol (RTSP) setup message. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the logic is further configured to associate a span, comprising a plurality of received streamed data packets, with at least one received error correction data packet as provided by the receiver, and correct errors in the span, as needed, using the at least one received error correction data packet. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the span includes a plurality of sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the span includes a plurality of non-sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the logic is further configured to selectively request that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are sequential. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the logic is further configured to selectively request that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are non-sequential. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the logic is further configured to examine a packet header within the at least one received error correction data packet to determine the plurality of the received data packets within the span and a position parameter for the at least one received error correction data packets within an error correction data packet sequence associated with the span. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein the packet header includes an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the error correction data packets include forward error correction (FEC) generated error correction data. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the receiver and the transmitter are configured to receive and transmit, respectively, over at least one wireless communication link. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the receiving device is a client device and the sending device is a server device. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A computer-readable medium comprising computer-executable instructions for: 
<claim-text>identifying a sending device configurable to provide streamed media with dynamic error correction; </claim-text>
<claim-text>generating a request for the streamed media that identifies a requested error correction level; and </claim-text>
<claim-text>providing the request for the streamed media to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>subsequently dynamically modifying the requested error correction level; and </claim-text>
<claim-text>providing the modified requested error correction level to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein generating the request for the streamed media includes identifying the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein specifying the requested error correction data density includes identifying a number of streamed data packets within a span, and a number of error correction data packets associated with the span. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein providing the request for the streamed media to the sending device includes: 
<claim-text>sending a real time streaming protocol (RTSP) setup message to the sending device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>associating a span, comprising a plurality of received streamed data packets, with at least one received error correction data packet; and </claim-text>
<claim-text>correcting errors in the span, as needed, using the at least one of the received error correction data packets. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the span includes a plurality of sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the span includes a plurality of non-sequential streamed data packets. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>selectively requesting that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>selectively requesting that the sending device generate the at least one of the error correction data packets based on the span comprising streamed data packets that are non-sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein associating the span with the at least one received error correction data packet includes: 
<claim-text>examining a packet header within the at least one received error correction data packet to determine the plurality of the received data packets within the span, and a position parameter for the at least one received error correction data packet within an error correction data packet sequence associated with the span. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein the packet header includes an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the error correction data packets include forward error correction (FEC) generated error correction data. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the request for streamed media is further configured for transmission over at least one wireless communication link. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the receiving device is a client device and the sending device is a server device. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A method for use in a sending device configured to provide streamed media to a receiving device, the method comprising: 
<claim-text>receiving a request for streamed media from the receiving device, the request for streamed media having a requested error correction level; </claim-text>
<claim-text>in response, generating at least one error correction data packet associated with a span of data packets to be streamed in accordance with the requested error correction level; and </claim-text>
<claim-text>outputting the span of data packets and the at least one error correction data packet. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, further comprising: 
<claim-text>subsequently receiving a dynamically modified requested error correction level; and </claim-text>
<claim-text>in response, generating at least one error correction data packet associated with a span of data packets to be streamed in accordance with the modified requested error correction level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the request for the streamed media identifies the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, wherein the requested error correction data density identifies a number of streamed data packets to be included within the span, and a number of error correction data packets to be associated with the span. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, further comprising: 
<claim-text>selectively overriding the received requested error correction level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the received request for streamed media is included in a real time streaming protocol (RTSP) setup message. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein outputting the at least one error correction data packet the packet includes generating an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the request for streamed media is received over a wireless communication link and the data packets within the span and the at least one error correction data packet are configured for transmission over the wireless communication link. </claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein generating the at least one error correction data packet associated with the span of data packets to be streamed in accordance with the requested error correction level includes generating the span for a plurality of sequential data packets. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein generating the at least one error correction data packet associated with the span of data packets to be streamed in accordance with the requested error correction level includes generating the span for a plurality of non-sequential data packets. </claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 56</dependent-claim-reference>, further comprising: 
<claim-text>receiving a request from the receiving device to generate the at least one of the error correction data packets based on the span comprising data packets that are sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 57</dependent-claim-reference>, further comprising: 
<claim-text>receiving a request from the receiving device to generate the at least one of the error correction data packets based on the span comprising data packets that are non-sequential. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein generating the at least one error correction data packet associated with the span of data packets to be streamed in accordance with the requested error correction level includes: 
<claim-text>selectively generating the at least one error correction data packet associated with the span of data packets to be streamed based on content within the data packets to be streamed, such that a first error correction level is applied to a first type of content and a different second error correction level is applied to a second type of content. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00066">claim 60</dependent-claim-reference>, wherein the first type of content includes audio content and the second type of content includes video content. </claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00066">claim 60</dependent-claim-reference>, wherein the first type of content includes a first type of video content and the second type of content includes a second type of video content. </claim-text>
</claim>
<claim id="CLM-00063">
<claim-text><highlight><bold>63</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein the first type of video content includes I-frame video content and the second type of video content includes P-frame video content. </claim-text>
</claim>
<claim id="CLM-00064">
<claim-text><highlight><bold>64</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein the first type of video content includes video content associated with a first program and the second type of video content includes video content associated with an appended second program. </claim-text>
</claim>
<claim id="CLM-00065">
<claim-text><highlight><bold>65</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00066">claim 64</dependent-claim-reference>, wherein the video content associated with an appended second program includes advertising content. </claim-text>
</claim>
<claim id="CLM-00066">
<claim-text><highlight><bold>66</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the sending device includes a server device and the receiving device includes a client device. </claim-text>
</claim>
<claim id="CLM-00067">
<claim-text><highlight><bold>67</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the error correction data packet includes forward error control (FEC) generated data. </claim-text>
</claim>
<claim id="CLM-00068">
<claim-text><highlight><bold>68</bold></highlight>. An apparatus for use in a sending device capable of streaming media to a receiving device, the apparatus comprising: 
<claim-text>a receiver configurable to receive a request for streamed media from the receiving device, the request for streamed media having a requested error correction level; </claim-text>
<claim-text>logic operatively coupled to the receiver and configured to generate at least one error correction data packet associated with a span of data packets to be streamed in accordance with the received requested error correction level; and </claim-text>
<claim-text>a transmitter operatively coupled to the logic and configurable to transmit the span of data packets and the at least one error correction data packet to the receiving device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00069">
<claim-text><highlight><bold>69</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein: 
<claim-text>the receiver is further configured to receive a modified requested error correction level; and </claim-text>
<claim-text>in response, the logic is further configured to generate at least one error correction data packet associated with a span of data packets to be streamed in accordance with the modified requested error correction level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00070">
<claim-text><highlight><bold>70</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the request for the streamed media identifies the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00071">
<claim-text><highlight><bold>71</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00077">claim 70</dependent-claim-reference>, wherein the requested error correction data density identifies a number of streamed data packets to be included within the span, and a number of error correction data packets to be associated with the span. </claim-text>
</claim>
<claim id="CLM-00072">
<claim-text><highlight><bold>72</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the logic is further configured to selectively override the received requested error correction data density identifier. </claim-text>
</claim>
<claim id="CLM-00073">
<claim-text><highlight><bold>73</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the receiver receives the request for streamed media in a real time streaming protocol (RTSP) setup message. </claim-text>
</claim>
<claim id="CLM-00074">
<claim-text><highlight><bold>74</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the transmitter transmits the at least one error correction data packet using an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00075">
<claim-text><highlight><bold>75</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the receiver is a wireless receiver and the transmitter is a wireless transmitter. </claim-text>
</claim>
<claim id="CLM-00076">
<claim-text><highlight><bold>76</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the span includes a plurality of sequential data packets. </claim-text>
</claim>
<claim id="CLM-00077">
<claim-text><highlight><bold>77</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein span includes a plurality of non-sequential data packets. </claim-text>
</claim>
<claim id="CLM-00078">
<claim-text><highlight><bold>78</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the logic is further configured to selectively generate the at least one error correction data packet associated with the span of data packets to be streamed based on content within the data packets to be streamed, such that a first error correction level is applied to a first type of content and a different second error correction level is applied to a second type of content. </claim-text>
</claim>
<claim id="CLM-00079">
<claim-text><highlight><bold>79</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00077">claim 78</dependent-claim-reference>, wherein the first type of content includes audio content and the second type of content includes video content. </claim-text>
</claim>
<claim id="CLM-00080">
<claim-text><highlight><bold>80</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00077">claim 78</dependent-claim-reference>, wherein the first type of content includes a first type of video content and the second type of content includes a second type of video content. </claim-text>
</claim>
<claim id="CLM-00081">
<claim-text><highlight><bold>81</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00088">claim 80</dependent-claim-reference>, wherein the first type of video content includes I-frame video content and the second type of video content includes P-frame video content. </claim-text>
</claim>
<claim id="CLM-00082">
<claim-text><highlight><bold>82</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00088">claim 80</dependent-claim-reference>, wherein the first type of video content includes video content associated with a first program and the second type of video content includes video content associated with an appended second program. </claim-text>
</claim>
<claim id="CLM-00083">
<claim-text><highlight><bold>83</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00088">claim 82</dependent-claim-reference>, wherein the video content associated with an appended second program includes advertising content. </claim-text>
</claim>
<claim id="CLM-00084">
<claim-text><highlight><bold>84</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the sending device includes a server device and the receiving device includes a client device. </claim-text>
</claim>
<claim id="CLM-00085">
<claim-text><highlight><bold>85</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00066">claim 68</dependent-claim-reference>, wherein the error correction data packet includes forward error control (FEC) generated data. </claim-text>
</claim>
<claim id="CLM-00086">
<claim-text><highlight><bold>86</bold></highlight>. A computer-readable medium comprising computer-executable instructions for: 
<claim-text>in response to a received request for streamed media from a receiving device, the request for streamed media having a requested forward error level, generating at least one error correction data packet associated with a span of data packets to be streamed in accordance with the requested error correction data density identifier; and </claim-text>
<claim-text>causing the span of data packets and the at least one error correction data packet to be output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00087">
<claim-text><highlight><bold>87</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>in response to a subsequently received modified requested error correction level, generating at least one error correction data packet associated with a span of data packets to be streamed in accordance with the modified requested error correction level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00088">
<claim-text><highlight><bold>88</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, wherein the request for the streamed media identifies the requested error correction level by specifying a requested error correction data density. </claim-text>
</claim>
<claim id="CLM-00089">
<claim-text><highlight><bold>89</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 88</dependent-claim-reference>, wherein the requested error correction data density identifies a number of streamed data packets to be included within the span, and a number of error correction data packets to be associated with the span. </claim-text>
</claim>
<claim id="CLM-00090">
<claim-text><highlight><bold>90</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, further comprising computer-executable instructions for: 
<claim-text>selectively overriding the received requested error correction level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00091">
<claim-text><highlight><bold>91</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, wherein the received request for streamed media is included in a real time streaming protocol (RTSP) setup message. </claim-text>
</claim>
<claim id="CLM-00092">
<claim-text><highlight><bold>92</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, wherein the span of data packets and the at least one error correction data packet are output using an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00093">
<claim-text><highlight><bold>93</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00088">claim 86</dependent-claim-reference>, wherein causing the span of data packets and the at least one error correction data packet to be output includes causing the span of data packets and the at least one error correction data packet to be provided to a wireless transmitter. </claim-text>
</claim>
<claim id="CLM-00094">
<claim-text><highlight><bold>94</bold></highlight>. A system comprising: 
<claim-text>a network; </claim-text>
<claim-text>a first device operatively coupled to the network and configured to output a request for streamed media over the network and receive streamed media over the network, the request for streamed media comprising a requested forward error correction level; and </claim-text>
<claim-text>a second device operatively coupled to the network and configured to receive the request for streamed media over the network and in response generate at least one error correction data packet associated with a span of data packets to be streamed in accordance with the received requested error correction level, and output the at least one error correction data packet and the span of data packets over the network to the first device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00095">
<claim-text><highlight><bold>95</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device includes a client device and the second device includes a server device. </claim-text>
</claim>
<claim id="CLM-00096">
<claim-text><highlight><bold>96</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device includes a mobile communication device and the second device includes a base station. </claim-text>
</claim>
<claim id="CLM-00097">
<claim-text><highlight><bold>97</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device is further configured to dynamically modify the requested error correction level for subsequently received streamed media. </claim-text>
</claim>
<claim id="CLM-00098">
<claim-text><highlight><bold>98</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the requested error correction level includes a specified number of streamed data packets within a span and a specified number of error correction data packets associated with the span. </claim-text>
</claim>
<claim id="CLM-00099">
<claim-text><highlight><bold>99</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device outputs the request for streamed media within a real time streaming protocol (RTSP) setup message. </claim-text>
</claim>
<claim id="CLM-00100">
<claim-text><highlight><bold>100</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device is further configured, upon receipt, to associate the span with the at least one error correction data packet and correct errors in the span, as needed, using the at least one received error correction data packet. </claim-text>
</claim>
<claim id="CLM-00101">
<claim-text><highlight><bold>101</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00111">claim 100</dependent-claim-reference>, wherein the first device is further configured to examine a packet header within the at least one received error correction data packet to determine the plurality of the received data packets within the span and a position parameter for the at least one received error correction data packet within an error correction data packet sequence associated with the span. </claim-text>
</claim>
<claim id="CLM-00102">
<claim-text><highlight><bold>102</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00111">claim 101</dependent-claim-reference>, wherein the packet header includes an extended real-time transport protocol (RTP) header. </claim-text>
</claim>
<claim id="CLM-00103">
<claim-text><highlight><bold>103</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the second device is further configured to receive a modified requested error correction level and, in response, generate at least one error correction data packet associated with a span of data packets to be subsequently streamed in accordance with the modified requested error correction level. </claim-text>
</claim>
<claim id="CLM-00104">
<claim-text><highlight><bold>104</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the second device is further configured to selectively override the received requested error correction level. </claim-text>
</claim>
<claim id="CLM-00105">
<claim-text><highlight><bold>105</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the network includes at least one wireless communication link. </claim-text>
</claim>
<claim id="CLM-00106">
<claim-text><highlight><bold>106</bold></highlight>. The system as recited in <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first device and the second device are configured to dynamically negotiate the error correction level. </claim-text>
</claim>
<claim id="CLM-00107">
<claim-text><highlight><bold>107</bold></highlight>. A computer-readable medium having stored thereon a data structure, comprising: 
<claim-text>at least one parameter requesting streamed media; </claim-text>
<claim-text>at least one parameter identifying the requested streamed media; and </claim-text>
<claim-text>at least one parameter establishing a receiving device requested error correction level to be applied by a sending device when providing the requested streamed media. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00108">
<claim-text><highlight><bold>108</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00111">claim 107</dependent-claim-reference>, wherein the at least one parameter establishing the client device requested error correction level identifies a specified number of streamed data packets within a span and a specified number of error correction data packets associated with the span. </claim-text>
</claim>
<claim id="CLM-00109">
<claim-text><highlight><bold>109</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00111">claim 107</dependent-claim-reference>, wherein the receiving device requested error correction level is dynamically set. </claim-text>
</claim>
<claim id="CLM-00110">
<claim-text><highlight><bold>110</bold></highlight>. The computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the data structure is part of a real time streaming protocol (RTSP) formatted message. </claim-text>
</claim>
<claim id="CLM-00111">
<claim-text><highlight><bold>111</bold></highlight>. A computer-readable medium having stored thereon a data structure, comprising: 
<claim-text>an error correction packet extended real-time transport protocol (RTP) header having: 
<claim-text>a first parameter identifying a number of streamed data packets within a span; </claim-text>
<claim-text>a second parameter identifying a specified number of error correction data packets associated with the span; and </claim-text>
<claim-text>a third parameter identifying a sequence number of the error correction data packet with respect to the specified number of error correction data packets associated with the span.</claim-text>
</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005386A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005386A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005386A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005386A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005386A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005386A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
