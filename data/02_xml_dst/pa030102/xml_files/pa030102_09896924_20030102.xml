<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004971A1-20030102-D00000.TIF SYSTEM "US20030004971A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00001.TIF SYSTEM "US20030004971A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00002.TIF SYSTEM "US20030004971A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00003.TIF SYSTEM "US20030004971A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00004.TIF SYSTEM "US20030004971A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00005.TIF SYSTEM "US20030004971A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00006.TIF SYSTEM "US20030004971A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00007.TIF SYSTEM "US20030004971A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00008.TIF SYSTEM "US20030004971A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00009.TIF SYSTEM "US20030004971A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004971A1-20030102-D00010.TIF SYSTEM "US20030004971A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004971</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896924</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>200000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Automatic generation of data models and accompanying user interfaces</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wen</given-name>
<middle-name>G.</middle-name>
<family-name>Gong</family-name>
</name>
<residence>
<residence-us>
<city>Cupertino</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Adam</given-name>
<middle-name>Scott</middle-name>
<family-name>Grancell</family-name>
</name>
<residence>
<residence-us>
<city>Pacifica</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Dinh &amp; Associates</name-1>
<name-2>Truong T. Dinh</name-2>
<address>
<address-1>2506 Ash Street</address-1>
<city>Palo Alto</city>
<state>CA</state>
<postalcode>94306</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Techniques to generate data models for an item master having a number of items. Each item is associated with a number of attributes and each attribute is associated with a set of values. In one method, the items in the item master are initially classified into a number of pagesets, with each pageset being defined by a unique combination of values for a first set of (classification) attributes. For each pageset, a second set of (selectable) attributes is determined to uniquely identify the items in the pageset. The selectable attributes may be selected from a list of candidate attributes, which may include mandatory attributes designated to be used as selectable attributes and optional attributes that may be selected for use. Data models are generated for each pageset based in part on the selectable attributes, and include a set of tables descriptive of the items in the pageset. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to computer processing, and more particularly to techniques for generating data models and user interfaces for catalog-type applications. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> For some business enterprises, a large number of products or items may need to be organized and categorized for presentation in a clear and logical manner, such as with a catalog. For example, a retailer or a distributor may carry a large number of items in its inventory. These items may then be categorized into a number of groups (e.g., hundreds or thousands of groups) of related items. Each group may include one or more items and may be represented with a &ldquo;pageset&rdquo;. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Catalog-type applications such as the one described above are typically characterized by a large number of relatively simple items. These items may be associated with various attributes used to identify and describe the items. If the items can be sufficiently described and uniquely identified based solely on their attribute values, then the attributes may be used to classify the items into groups and to further identify the items in each group. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Each group of items may be represented with &ldquo;data models&rdquo; that describe the items in the group. These data models are typically of a particular defined format or schema and include sufficient information such that they may be used to generate user interface (UI) elements, such as frames or screens for a catalog. Items in each group may then be clearly and logically present via these UI elements. For catalog-type applications, the data models tend to be similar from group to group (i.e., pageset to pageset). </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Catalog-type applications tend to be large, with many items, and the task of organizing and classifying the items becomes more challenging as the number of items increases. However, catalog-type applications also tend to be repetitive, which affords the use of similar data models for representing the groups of items. Techniques that can be used to automatically generate data models and user interfaces for catalog-type applications are thus highly desirable. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The invention provides techniques to automatically generate data models from an &ldquo;item master&rdquo; (e.g., a master table) that includes a number of items. A set of classification attributes is initially provided (e.g., by an administrator via a user interface screen or automatically generated) and used to classify the items in the item master into pagesets. Data models may then be automatically generated for each pageset based in part on a set of candidate attributes (which may also be provided by the administrator via the user interface screen or in a configuration file). The data models are thereafter used to generate user interface (UI) elements, which can present the items in each pageset in a clear and logical manner. Various implementations of the invention are possible, some of which are described below. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A specific embodiment of the invention provides a method for generating data models for an item master having a number of items. Each item in the item master is associated with a number of attributes and each attribute is associated with a respective set of possible values. In accordance with the method, the items in the item master are initially classified into a number of pagesets. Each pageset is defined by a unique combination of values for a first set of attributes (referred to as classification attributes). A second set of attributes (referred to as selectable attributes) is then determined for each pageset, with the selectable attributes being used to uniquely identify the items in the pageset. Data models are then generated for each pageset based in part on the selectable attributes. In one implementation, the data models include a set of tables descriptive of the items in the pageset. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The classification attributes may be specified (e.g., by an administrator) via configuration variables. The selectable attributes may be selected from a list of candidate attributes, which may include mandatory and optional attributes. Mandatory attributes are designated to be used as selectable attributes. Optional attributes may be specified in an ordered list and may be selected for use as selectable attributes based on their order in the list. Each pageset includes a sufficient (e.g., minimum) number of attributes such that the items in the pageset are uniquely identified by their selectable attribute values. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The data models for each pageset may include a number of features tables and configuration tables. One feature table is provided for each selectable attribute and includes a mapping of codes to descriptions corresponding to all possible attribute values. The configuration tables identify valid and invalid configurations for the pageset. Invalid configurations may be associated with a number of types of exception messages. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Output files (e.g., UI elements) are generated for the pagesets based on the data models. These output files may include input files for selectable attributes and results files for other attributes associated with items in the pageset. A contents list file is also provided and includes application-specific (as oppose to pageset-specific) data used to provide a navigation mechanism for the generated pagesets. The output files may be provided as XML documents, HTML files, or in some other format. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Prior to generating the data models, the item master and/or configuration variables may be validated, and error messages may be generated (and provided in a log file) for errors resulting from the validation process. The error messages may be used to &ldquo;clean up&rdquo; the item master and/or configuration variables, and the validation process may be iterated any number of times until valid data is obtained. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Another specific embodiment of the invention provides a method for forming a list of attributes for identifying items in a pageset. In accordance with the method, an attribute not yet considered for identifying the items in the pageset is initially selected. A determination is then made whether the selected attribute is useful for identifying the items in the pageset. If the attribute is useful, then it is included in the list. One or more additional attributes are then evaluated in similar manner, one attribute at a time, until a sufficient number of attributes is included in the list such that the items in the pageset are uniquely identified by their values for the attributes in the list. In one embodiment, only attributes that are common for all items in the pageset are considered for evaluation. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The invention further provides other methods, computer program products, and systems capable of implementing various aspects, embodiments, and features of the invention, as described in further detail below. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The foregoing, together with other aspects of this invention, will become more apparent when referring to the following specification, claims, and accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of an item master that lists the available items for an enterprise; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram of an embodiment of a system capable of automatically generating data models for an item master; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows various tables that may be generated for configuration-type data models, in accordance with an embodiment of the invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a flow diagram of an embodiment of a process performed by a data builder module to generate a set of intermediate data files from the item master; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4B and 4C</cross-reference> are flow diagrams of two embodiments of a process to determine a list of selectable attributes that may be used to uniquely identify the items in each pageset; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flow diagram of an embodiment of a process performed by a model builder module to generate data models for each pageset; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a flow diagram of an embodiment of a process to examine the data for each pageset to generate exception messages for invalid configurations; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows an embodiment of a screen capable of presenting items in the item master using application files generated from the data models; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a diagram of another embodiment of a system capable of automatically generating data models using items stored in a repository; and </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram of a computer system.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of an item master <highlight><bold>100</bold></highlight> that includes a collection of items (e.g., products) for an enterprise. Item master <highlight><bold>100</bold></highlight> (which may be implemented as a table) includes a number of rows and columns, with the specific number of rows and columns being dependent on the type and quantity of items being represented by the item master. The first row in the item master contains column headers, which identify the various attributes for the items in the table. Each subsequent row of the item master represents one record for one item. Each record includes information for the associated item, or more specifically the values for the attributes identified by the column headings. Thus, each column may be used to represent one specific attribute of the items, and each row may be used to represent one item. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In general, item master <highlight><bold>100</bold></highlight> may include information for any type of items that have attributes and which may be offered in a catalog context. For example, the items in the item master may represent products, services, solutions sets, employee relationship management (ERM)-based entities such as benefit documents, and other types of items. The item master may also be generated in various manners. In one embodiment, the item master may be generated manually (via key entry) and/or automatically (via a defined process) and is provided in a single data file. In another embodiment, the item master is generated from smaller tables in a relational database (i.e., a repository). </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the specific example shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, item master <highlight><bold>100</bold></highlight> includes product data for a clothing enterprise. The first row in the item master contains column headers for the following attributes&mdash;ID, Gender, Type, Style, Size, Color, Price, and Item Number. Each subsequent row includes a record for one item and includes a set of values for the attributes identified by the column headers. For clarity, various aspects and embodiments of the invention are described for the example item master <highlight><bold>100</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The item master may include a large listing for many items (e.g., hundreds or thousands of items). Presentation of the item master in the form shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> may be cumbersome and unintelligible to an end-user (i.e., a user of a catalog application). For better presentation, the items may be classified into groups or &ldquo;pagesets&rdquo;. Each pageset may be defined by a specific set of attribute values and may be viewed as corresponding to a particular product family. Each pageset may include one or more items having a first set of attribute values that match those used to define the pageset. In fact, this first set of attribute values is used to categorize the items in the item master into their proper pagesets. The items in each pageset are also associated with a second set of attribute values that may be used to uniquely identify the items in the pageset. Since all items in a given pageset have the same set of values for the attributes in the first set, &ldquo;uniqueness&rdquo; for the items in the pageset is achieved if each item in the pageset has a unique set of values for the second set of attributes (i.e., the set of values for the attributes in the second set for each item in the pageset is different from the sets of attribute values for all other items in the pageset). Uniqueness is described in further detail below. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In an embodiment and as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, item master <highlight><bold>100</bold></highlight> is defined to includes an identifier (ID) column <highlight><bold>110</bold></highlight>, one or more Classification columns <highlight><bold>120</bold></highlight>, one or more Candidate Attribute columns <highlight><bold>130</bold></highlight>, and one or more Data Attribute columns <highlight><bold>140</bold></highlight>. ID column <highlight><bold>110</bold></highlight> lists an item-specific identifier (e.g., an ID, SKU, or row ID) for each item in the item master. This identifier may not be unique for all items in the item master, but is unique for all items in any given pageset. The unique values for the identifier may be used to uniquely identify the items in each pageset. Classification columns <highlight><bold>120</bold></highlight> correspond to attributes used to classify the items in the item master into pagesets. Each pageset is defined by a unique set of classification column values and includes one or more items having the same set of attribute values used to classify the pageset. Candidate Attribute columns <highlight><bold>130</bold></highlight> correspond to attributes that may be selected and used to uniquely identify items within each pageset. The names of the Classification and Candidate Attribute columns generally conform to defined naming conventions for tables. Data Attribute columns <highlight><bold>140</bold></highlight> correspond to additional attributes of the items in the item master. These data attributes are generally used to provide additional descriptive information for the items and but are typically not used to identify the items in the pageset. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the example shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the Classification columns includes the Gender and Type columns, the Candidate Attribute columns includes the Style, Size, and Color columns, and the Data Attribute columns include the Description (Desc), Price, Item Number, and Image columns. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Various implementations may be used to classify items in an item master, generate data models, and further generate UI elements (i.e., run-time applications) based on the data models. In one family of implementations (referred to as &ldquo;file-based&rdquo;), preparation of the item master and specification of the attributes are mandatory steps (requiring interaction with an administrator, who may be tasked with building the catalog application), and run-time applications (e.g., in HTML files) are generated based on the data models (e.g., using XLST). In another family of implementations (referred to as &ldquo;repository-based&rdquo;), preparation of the item master and specification of the attributes are optional steps and the data models are generated and saved to a repository. A publisher module (described below) may then be used to process (and possibly modify) the data models to generate the run-time application. A specific design for each of these two families of implementations is described below in <cross-reference target="DRAWINGS">FIGS. 2 and 7</cross-reference>, respectively. Various other implementations can also be contemplated and are within the scope of the invention. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram of a system <highlight><bold>200</bold></highlight> capable of automatically generating data models for an item master, in accordance with an embodiment of the invention. System <highlight><bold>200</bold></highlight> is an example of a file-based design, and is implemented as a software program that takes an item master as input and can generate data-dependent components of a catalog-type application. In this embodiment, system <highlight><bold>200</bold></highlight> (which is also referred to as a &ldquo;catalog builder&rdquo;) includes a data builder module <highlight><bold>210</bold></highlight>, a model builder module <highlight><bold>220</bold></highlight>, and a file builder module <highlight><bold>230</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Data builder module <highlight><bold>210</bold></highlight> receives the item master and a first set of configuration variables, validates the data in the item master, classifies items in the item master into pagesets, identifies which attributes are to used to identify the items in each pageset, and provides a set of intermediate data files. Data builder module <highlight><bold>210</bold></highlight> further provides status information indicative of the results of the processing on the item master and log information indicative of &ldquo;uncleanliness&rdquo; (i.e., errors) in the item master and/or errors in the configuration variables. The log information may be used to modify the configuration variables and/or the data in the item master (e.g., in an iterative manner) to provide valid data and variables. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Model builder module <highlight><bold>220</bold></highlight> receives the intermediate data files and a second set of configuration variables and generates data models. The data models may be provided in various forms such as, for example, XML documents, HTML files, formatted files or database tables that may be stored in a repository <highlight><bold>250</bold></highlight>, and others. The XML documents contain pageset-specific data including the representation of the data models. A callout process may be inserted at a callout point in model builder module <highlight><bold>220</bold></highlight> and used to process and possibly modify (e.g., the XML version of) the data models before they are generated in final form, as described below. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> File builder module <highlight><bold>230</bold></highlight> receives the data models (which may be provided in XML documents) and a third set of configuration variables and generates datadependent application files. These application files either include or may be used to generate UI elements suitable for representing a catalog of the item master, as described below. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Each module executes on one or more input files and provides a set of output files. In an embodiment, user preferences for the operation of each module, such as directions for interpreting the item master, output format options, directories of the input and output files, and so on, are provided as configuration variables. The configuration variables for all three modules may be provided in various forms. In one implementation, the configuration variables are provided in a (global) configuration file. In another implementation, the configuration variables may be entered via a user interface screen that may be provided (e.g., for each module) to assist an administrator in the generation of the data models and UI elements. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> These modules and their inputs and outputs are described in further details below. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Model builder module <highlight><bold>220</bold></highlight> may be designed to generate data models of various schemas. The specific schema to be used for the data models is dependent on various factors such as the data architecture employed, the specific design of a runtime engine that will process the data models to generate the required outputs, and so on. Various types if data models may also be generated such as, for example, configuration type and list type. The particular data model type to be generated may be specified in the configuration variables. For clarity, a specific schema for configuration-type data models is described below. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows various tables that may be generated for configuration-type data models, in accordance with an embodiment of the invention. In this embodiment, the configuration-type data models for each pageset include one or more Selectable Attribute feature tables <highlight><bold>310</bold></highlight>, an Items feature table <highlight><bold>320</bold></highlight>, a main configuration table <highlight><bold>330</bold></highlight>, and a configuration sub-table <highlight><bold>340</bold></highlight>. Additional, fewer, and/or different tables may also be provided for the configuration-type data models and are within the scope of the invention. The following description for the tables and sub-table is for a specific pageset (e.g., Woman&apos;s Pants). </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> For each pageset, a set of Selectable Attribute feature tables <highlight><bold>310</bold></highlight> is provided for the set of all &ldquo;selectable&rdquo; attributes used to uniquely identify the items in the pageset, with one Selectable Attribute feature table being provided for each selectable attribute. In the example shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, all three candidate attributes are used as selectable attributes for the pageset. In this case, Style feature table <highlight><bold>310</bold></highlight><highlight><italic>a, </italic></highlight>Size feature table <highlight><bold>310</bold></highlight><highlight><italic>b, </italic></highlight>and Color feature table <highlight><bold>310</bold></highlight><highlight><italic>c </italic></highlight>are generated for the Style, Size, and Color selectable attributes, respectively. In a typical implementation, each Selectable Attribute feature table is named after the selectable attribute associated with and represented by the feature table. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Each Selectable Attribute feature table <highlight><bold>310</bold></highlight> provides a mapping of codes and their corresponding descriptions. The codes are used to represent the possible values for the associated selectable attribute, and the descriptions are texts that are more intelligible to the end-user. The codes are more efficient internal representations for the attribute values, and the description may be displayed in the UI elements for the end-user. Each Selectable Attribute feature table typically further provides an indication of which specific attribute value should be used as the default value for the associated selectable attribute, if none is specified. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, each Selectable Attribute feature table <highlight><bold>310</bold></highlight> includes a Code column, a Description (Desc) column, and a Default column. In an embodiment, the values in the Code column are uniquely distinguishable text string. In an embodiment, the code values are numeric and sequentially numbered (e.g., starting from <highlight><bold>0</bold></highlight>). These code values correspond to all possible values for the associated selectable attribute for the given pageset (and not for the entire item master). The Description column includes values drawn from the column of the item master corresponding to the selectable attribute being represented by the feature table. As an example, for the Style feature table <highlight><bold>310</bold></highlight><highlight><italic>a, </italic></highlight>code values of 0,1,2, and 3 are used to represent the possible styles of Dress, Casual, Twill, and Jean, respectively, for the pageset for Woman&apos;s Pant. The Default column includes an indication of which value should be used as the default (e.g., Casual is the default for the Style selectable attribute for this pageset). </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Items feature table <highlight><bold>320</bold></highlight> includes item-specific information, and may be used to provide additional information not included in the Selectable Attribute feature tables. In an embodiment, the Items feature table includes a Code column, a Description (Desc) column, an ID column, a Price column, an Item Number column, an Image column, a Default column, and zero or more additional columns. The Code column includes distinguishable values used to represent a key referenced by an Items column of configuration sub-table <highlight><bold>340</bold></highlight>. The Description, ID, Price, Item Number, and Image columns each includes the values drawn from the corresponding column in the item master, and these columns may also be specified in the configuration variables. The Default column includes an indication of which row value should be used as the default for the Description column. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Additional columns may be added to Items feature table <highlight><bold>320</bold></highlight>, e.g., by specifying these columns in the configuration variables. Each additional column (if any) is typically named after the corresponding specified column in the item master, and includes data drawn from that specified column. In the example shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the Price, Item Number, and Image columns are added to the Items feature table and these columns include the values drawn from the Price, Item Number, and Image columns in the item master. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Items feature table <highlight><bold>320</bold></highlight> includes one row for each item in the pageset. For each item, the values for the columns in the Items feature table are drawn from the corresponding columns in the item master. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Main configuration table <highlight><bold>330</bold></highlight> identifies valid and invalid configurations for the selectable attributes in the pageset. Each pageset is associated with a set of selectable attributes, and each selectable attribute is further associated with a set of possible values. The permutation of all possible combinations of values for these selectable attributes would represent all possible items that may be included in the pageset. However, a given pageset typically includes only a subset of all possible items. Each item actually included in the pageset represents a valid combination (i.e., a valid configuration) in the main configuration table, and items not included in the pageset are invalid combinations that are represented as &ldquo;exceptions&rdquo; in the configuration table. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, main configuration table <highlight><bold>330</bold></highlight> references configuration sub-table <highlight><bold>340</bold></highlight> for the valid and invalid configurations and includes a Sub-table column and a Rule column. The Sub-table column includes the name of the configuration sub-table that may be referenced to determine valid and invalid configurations for the pageset. The Sub-table column is also referred to as a &ldquo;type-99&rdquo; column since it references to another sub-table. In this example, the name of the configuration sub-table being referenced is &ldquo;Attribute_Check&rdquo;. The Rule column may include rules that may be used to cross reference some other information, e.g., exception messages. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Configuration sub-table <highlight><bold>340</bold></highlight> identifies the valid and invalid configurations for the pageset. These configurations may be represented in numerous ways, with the more efficient representation being dependent on the specific data in the pageset. In one simple implementation, the configuration sub-table may include one entry (i.e., one row) for each possible configuration, with the valid configurations being grouped into one row set and the invalid configurations being grouped into another row set. For many pagesets, the number of valid configurations may represent only a small subset of all possible configurations, the number of invalid configurations may be large, and it may not be efficient to list each invalid configuration with its own row in the configuration sub-table. Techniques to more efficiently represent invalid configurations are described below. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, configuration sub-table <highlight><bold>340</bold></highlight> includes one column for each selectable attribute for the pageset (e.g., Style, Size, and Color columns), the Items column for Items feature table <highlight><bold>320</bold></highlight>, and zero or more additional columns. For efficiency, the configuration sub-table typically uses code values to represent the configurations. Thus, each Selectable Attribute column (which is also referred to as a &ldquo;type-1&rdquo; column) refers to a corresponding Selectable Attribute feature table. The Items column (which is also referred to as a &ldquo;type-0&rdquo; column since it does not refer to another table) includes data drawn from a specified column in the Items feature table. Each additional column (if any) includes either fixed text or data drawn from a specified column in the item master. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, configuration sub-table <highlight><bold>340</bold></highlight> includes a Data row set that lists valid configurations for the pageset and an Exception row set that lists invalid configurations. The valid and invalid configurations may be determined as described below. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The list-type data models may include Items feature table <highlight><bold>320</bold></highlight> and main configuration table <highlight><bold>330</bold></highlight>. Additional, fewer, and/or different tables may also be provided for the list-type data models and are within the scope of the invention. The main configuration table uses the Items feature table as a single type-<highlight><bold>1</bold></highlight> column with a value of &ldquo;*&rdquo; in the data cell (i.e., match all the rows from the Item feature table). </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows one specific design for the data models, which may be used to generate catalog applications. Various other designs for the data models may also be implemented and are within the scope of the invention. For example, a data model design that may also be used is described in European Patent Application Serial No. 99309178.4, entitled &ldquo;Method and Apparatus for Interpreting User Selections in the Context of a Relation Distributed as a Set of Orthogonalized Sub-Relations,&rdquo; filed Nov. 18, 1999, assigned to the assignee of the present application and incorporated herein by reference. In general, any type of data models having attribute-to-UI relationships may be used in conjunction with the techniques described herein. Moreover, these data models need not be implemented with tables. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, data builder module <highlight><bold>210</bold></highlight> receives the item master and the first set of configuration variables and provides a set of intermediate data files for model builder module <highlight><bold>220</bold></highlight>. The item master may be in the form shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and is typically provided in a single data file. The configuration variables for data builder module <highlight><bold>210</bold></highlight> may include the following information: </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> Item master file name&mdash;identifies the particular file that includes the item master to be operated on by data builder module <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> ID column name&mdash;identifies the ID column in the item master. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> List of classification columns&mdash;the attributes corresponding to these columns are used to group the items in the item master into pagesets. </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> List of candidate columns&mdash;the attributes corresponding to these columns may be selected and used to uniquely identify the items in each pageset. </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> List of data attribute columns&mdash;the attributes corresponding to these columns may be used to further describe the items in the item master. </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> Columns that are trigger-target pairs&mdash;an attribute may be used as a trigger for another attribute. For example, different sets of sizes for pants may be applicable for different styles of pants. In this case, the style attribute is used as a trigger to determine the proper set of sizes for that style of pant. </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> Columns that will be added to the Items feature table&mdash;identifies the columns in the item master that will be added to the Items feature table. </paragraph>
<paragraph id="P-0061" lvl="2"><number>&lsqb;0061&rsqb;</number> Directory path for the log and intermediate data files&mdash;identifies the location where the log and intermediate data files are to be saved. </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> Toggle for auto-conversion of single-widget data models to list-type&mdash;</paragraph>
<paragraph id="P-0063" lvl="7"><number>&lsqb;0063&rsqb;</number> The configuration variables for data builder module <highlight><bold>210</bold></highlight> listed above are for a specific implementation. For other implementations, the configuration variables may include additional, fewer, and/or different information than that listed above, and this is within the scope of the invention. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a flow diagram of an embodiment of a process <highlight><bold>400</bold></highlight> performed by data builder module <highlight><bold>210</bold></highlight> to generate the intermediate data files from the item master. Initially, the item master is validated to identify any &ldquo;uncleanliness&rdquo; in the data that would prevent the generation of complete data models for the item master, at step <highlight><bold>410</bold></highlight>. This validation may entail checking the item master to ensure that (1) no two rows have duplicate data, (2) the attributes for the Classification and Candidate Attribute columns are not blank (i.e., no empty strings), and so on. The configuration data may also be validated, at step <highlight><bold>412</bold></highlight>. If any errors in the item master and/or configuration data are encountered, as determined in step <highlight><bold>414</bold></highlight>, then error messages are generated and included in a log file that is made available to the administrator, at step <highlight><bold>416</bold></highlight>. Via the log file, the administrator is informed of the errors and can clean up the input data. Steps <highlight><bold>410</bold></highlight> through <highlight><bold>416</bold></highlight> may be iteratively performed until the data in the item master and the configuration data are validated. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Once the data is validated, data builder module <highlight><bold>210</bold></highlight> groups the items in the item master into pagesets, at step <highlight><bold>418</bold></highlight>. This is achieved based on the attribute values in the Classification columns identified by the configuration variables. In particular, each unique set of attribute values for the Classification columns is associated with a separate pageset. All items in the item master having the same set of attribute values for the Classification columns are grouped into the same pageset. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The grouping of the items in the item master into pagesets may be performed by traversing the item master, one record at a time. For each record, the Classification column values are determined. If this set of values is unique, then a new pageset is defined and the record is grouped into that pageset. Otherwise, the record is grouped into a pageset previously defined for another item in the item master. A column may be provided in the item master to mark the particular pageset to which each item belongs. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Table <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of the grouping of the items into pagesets. The number of pagesets is equal to the number of unique sets of classification column values. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Once the items in the item master are grouped into pagesets, data builder module <highlight><bold>210</bold></highlight> identifies a list of attributes that may be used to uniquely identify the items in each pageset, at step <highlight><bold>420</bold></highlight>. These attributes are referred to as selectable attributes. In an embodiment, one set of selectable attributes is provided for each pageset, and different pagesets may be associated with different sets of selectable attributes. The selectable attributes are chosen from those associated with the Candidate Attribute columns identified in the configuration variables. The selectable attributes for each pageset may be determined as described below in <cross-reference target="DRAWINGS">FIG. 4B</cross-reference>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Data builder module <highlight><bold>210</bold></highlight> then generates output files based on the pageset data, at step <highlight><bold>422</bold></highlight>. In an embodiment, these files include (1) a verbose log file that may be used to provide information, warning, error, and so on, which may be provided as feedback to an administrator regarding the quality of the data, (2) a status file that lists all pagesets to be generated, the pageset name, items, selectable attributes, and data model type, and (3) a set of intermediate data files to be used by model builder module <highlight><bold>220</bold></highlight> to generate data models. Additional, fewer, and/or different output files may also be generated and are within the scope of the invention. The processing by data builder module <highlight><bold>210</bold></highlight> then terminates. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In an embodiment, the configuration variables identify a list of Candidate Attribute columns, and the attributes corresponding to these columns (which are also referred to as candidate attributes) may be selected and used to uniquely identify the items in each pageset. For each pageset, a (minimum) number of candidate attributes may be selected (which are then referred to as selectable attributes) such that each item in the pageset may be uniquely identified based on these selected attributes. Since each of these selected attributes may also be selected (i.e., configured with a value) by the end-user via the catalog application (e.g., a UI screen), they are also referred to as selectable attributes. The designation of the attributes in the item master as candidate attributes and/or the selection of the candidate attributes as selectable attributes may be made by the administrator (e.g., specified via the configuration variables), automatically by data builder module <highlight><bold>210</bold></highlight>, or a combination of both. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In an embodiment, the candidate attributes are grouped into two categories labeled as &ldquo;mandatory&rdquo; and &ldquo;optional&rdquo;. Mandatory attributes are those attributes designated by the administrator to be used as selectable attributes (and may or may not be helpful in determining uniqueness among items in a pageset). Optional attributes are those that may be selected for use to uniquely identify items if the mandatory attributes are not sufficient to determine uniqueness. The designation of each candidate attribute as either mandatory or optional may be made by the administrator or via another means. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In an embodiment, the optional attributes are provided in an ordered list, and these attributes are thereafter selected for use to determine uniqueness, one at a time and as needed, based on their order in the list. Thus, the first optional attribute in the list is considered first to determine whether or not it is useful for item identification, the second optional attribute in the list is considered next, and so on, and the last optional attribute in the list is considered last. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> is a flow diagram of an embodiment of a process <highlight><bold>420</bold></highlight> to determine a list of selectable attributes that may be used to uniquely identify the items in each pageset. Initially, the number of unique items in the pageset is determined, at step <highlight><bold>442</bold></highlight>. This may be achieved by simply counting the number of items in the item master belonging to the pageset being processed. This number is denoted as &ldquo;A&rdquo;. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The optional attributes are then placed in a first list in the order specified in the configuration variables, at step <highlight><bold>444</bold></highlight>. These optional attributes may be considered, one at a time if necessary and in the order in which they are placed on the first list, to determine uniqueness. The mandatory attributes (if any) are placed in a second list, at step <highlight><bold>446</bold></highlight>. The number of sets of unique values for the attributes in the second list is then determined, at step <highlight><bold>448</bold></highlight>. This number is denoted as &ldquo;B&rdquo;. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> A determination is then made whether the number of unique attribute value sets is equal to the number of unique items in the pageset (i.e., whether A&equals;B), at step <highlight><bold>450</bold></highlight>. If these numbers are equal, indicating that the mandatory attributes in the second list are sufficient to uniquely identify the items in the pageset, then the process proceeds to step <highlight><bold>468</bold></highlight>. Otherwise, if the mandatory attributes are not sufficient to determine uniqueness, the optional attributes are considered, one by one, until a sufficient number of optional attributes is included to specify item uniqueness. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The consideration of the optional attributes begins in step <highlight><bold>452</bold></highlight>, where a determination is made whether the first list of optional attributes is empty. If the first list is empty, then an error message may be generated in the log file, at step <highlight><bold>454</bold></highlight>, and the process terminates. Otherwise, if the first list is not empty, then the highest order optional attribute in the first list is selected for consideration and placed in the second list, at step <highlight><bold>456</bold></highlight>. The current value of B is then saved as C, in step <highlight><bold>458</bold></highlight>, and the number of sets of unique values for the attributes in the second list is determined and saved as the new value of B, at step <highlight><bold>460</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> A determination is then made whether the number of unique attribute value sets is equal to the number of unique items in the pageset (i.e., whether A&equals;B), at step <highlight><bold>462</bold></highlight>. If these numbers are equal, indicating that the mandatory and optional attributes in the second list are sufficient to uniquely identify the items in the pageset, then the process proceeds to step <highlight><bold>468</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> If B is not equal to A at step <highlight><bold>462</bold></highlight>, then a determination is made whether the number of unique attribute value sets with the latest optional attribute is greater than the number of unique attribute value sets without the latest optional attribute (i.e., whether B&gt;C), at step <highlight><bold>464</bold></highlight>. If B is not greater than C, indicating that the latest optional attribute was not useful in determining uniqueness, then this attribute is removed from the second list, at step <highlight><bold>466</bold></highlight>. Otherwise, the optional attribute is retained in the second list. In either case, the process then returns to step <highlight><bold>452</bold></highlight> to consider the next optional attribute. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> At step <highlight><bold>468</bold></highlight>, since the number of unique attribute value sets is equal to the number of unique items in the pageset, the second list is provided as the list of selectable attributes that may be used to specify item uniqueness for the pageset. The process then terminates. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4C</cross-reference> is a flow diagram of another embodiment of a process <highlight><bold>470</bold></highlight> to determine a list of selectable attributes. Initially, the items for a particular pageset to be processed are identified, at step <highlight><bold>472</bold></highlight>. A determination is then made whether or not a list of mandatory attributes is empty, at step <highlight><bold>474</bold></highlight>. If this list is not empty, then all mandatory attributes are moved to the selectable attribute list, at step <highlight><bold>476</bold></highlight>. Otherwise, the first element of a list of optional attributes is moved to the selectable attribute list, at step <highlight><bold>478</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The items in the pageset that can be uniquely identified by the sets of values for the attributes in the selectable attribute list are then marked, at step <highlight><bold>480</bold></highlight>. A determination is then made whether there are any unmarked items in the pageset, at step <highlight><bold>482</bold></highlight>. If all items are marked, then the selectable attribute list is returned as the list of selectable attributes that may be used to specify item uniqueness for the pageset, at step <highlight><bold>484</bold></highlight>. The process then terminates. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Otherwise, if there is any unmarked item in the pageset, a determination is made whether or not the optional attribute list is empty, at step <highlight><bold>486</bold></highlight>. If the optional attribute list is empty, then an error message may be generated in the log file, at step <highlight><bold>488</bold></highlight>, and the process terminates. And if the optional attribute list is not empty, then a determination is made whether adding the first element of the optional attribute list to the selectable attribute list would help to uniquely identify the unmarked items in the pageset, at step <highlight><bold>490</bold></highlight>. If the answer is no, then the first element of the optional attribute list is discarded, at step <highlight><bold>492</bold></highlight>. Otherwise, the first element of the optional attribute list is moved to the selectable attribute list, at step <highlight><bold>494</bold></highlight>, and the process returns to step <highlight><bold>480</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The process shown in <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> or <highlight><bold>4</bold></highlight>C may be executed for each pageset in the item master and provides a list of selectable attributes that may be used to determine uniqueness for each pageset. In the embodiment shown, the minimum number of selectable attributes is provided for each pageset, since optional attributes that do not contribute to item identification are removed. Moreover, the attributes to be considered and their order for consideration may be specified (e.g., by the administrator via the configuration variables) or may be automatically determined (e.g., by data builder module <highlight><bold>210</bold></highlight>). </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The process to select attributes to specify item uniqueness results in the creation of configuration-type data models. A particular combination of Classification column values may also be specified to generate list-type data models. Configuration-type data models may also be automatically converted into list-type data models (list-type data models may be generated from the item master) via a parameter value in the first set of configuration variables provided to data builder module <highlight><bold>210</bold></highlight>. This process of selecting selectable attributes, which creates configuration-type data models, may be overridden in the configuration file by specifying that a particular combination of classification column values should generate list-type data models instead. The administrator may also select to automatically convert configuration-type data models that contain only one selectable attribute into list-type data models. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Model builder module <highlight><bold>220</bold></highlight> receives the set of intermediate data files from data builder module <highlight><bold>210</bold></highlight> and the second set of configuration variables and generates data models that may be provided to file builder module <highlight><bold>230</bold></highlight> and/or stored to repository <highlight><bold>250</bold></highlight>. The data models are provided in one or more formats which may be specified (e.g., via the configuration variables). The configuration variables for model builder module <highlight><bold>220</bold></highlight> may include the following information: </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> Output format&mdash;XML, HTML, repository, or a combination thereof </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> Overwrite existing data models&mdash;true or false </paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> Directory path for the log file </paragraph>
<paragraph id="P-0089" lvl="2"><number>&lsqb;0089&rsqb;</number> Directory containing the intermediate data files </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> Gateway repository project name (if saving to the repository) </paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> Gateway database connect string (if saving to the repository) </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> HTML file destination directory (if using HTML) </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> Backup HTML files (if using HTML)&mdash;true or false </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> XML output directory </paragraph>
<paragraph id="P-0095" lvl="2"><number>&lsqb;0095&rsqb;</number> Backup XML files&mdash;true or false </paragraph>
<paragraph id="P-0096" lvl="2"><number>&lsqb;0096&rsqb;</number> Callout process (optional) </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> The configuration variables for model builder module <highlight><bold>220</bold></highlight> listed above are for a specific implementation. For other implementations, the configuration variables may include additional, fewer, and/or different information than those listed above, and this is within the scope of the invention. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flow diagram of an embodiment of a process <highlight><bold>500</bold></highlight> performed by model builder module <highlight><bold>220</bold></highlight>. Initially, model builder module <highlight><bold>220</bold></highlight> processes the data for each pageset to generate a set of tables and sub-table for the data models, as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, at step <highlight><bold>510</bold></highlight>. Model builder module <highlight><bold>220</bold></highlight> then identifies valid configurations and generates exceptions for each pageset, at step <highlight><bold>512</bold></highlight>. Exception messages may be generated to identify invalid configurations, and these messages may be generated by passing the pageset data through several &ldquo;methods&rdquo; in sequential order, as described below in <cross-reference target="DRAWINGS">FIG. 5B</cross-reference>. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Model builder module <highlight><bold>220</bold></highlight> then represents the data models, e.g., in XML and adds to this XML other pageset-specific data, at step <highlight><bold>514</bold></highlight>. The pageset-specific data includes raw data from the item master and information generated by data builder module <highlight><bold>210</bold></highlight> such as which attributes are mandatory and which are optional. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In an embodiment, model builder module <highlight><bold>220</bold></highlight> supports the inclusion of an optional administrator-specified callout process to be applied to the data models. Via the callout process, the administrator is able to examine and modify the data models before they are provided in final output form. If the data models are provided as XML pagesets, as for the embodiment described herein, the callout processes are designed with the capability to operate on streamed XML as both input and output. Any number of processes may be used as the in-line callout process. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Thus, the XML may be passed streaming through an optional callout process, at step <highlight><bold>516</bold></highlight>. After streaming through the callout process, the XML may be validated before the final data models are generated, at step <highlight><bold>518</bold></highlight>. Model builder module <highlight><bold>220</bold></highlight> then provides the optionally modified and validated XML representation for each pageset in one or more output forms, which may be specified by the administrator via the configuration variables. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> First, XML documents may be created (e.g., as specified by the configuration variables and/or as the default form), at step <highlight><bold>520</bold></highlight>. In this case, one XML document is provided for each pageset, with the XML document containing the data models and other pageset-specific information such as data for the pageset items obtained from the item master. A master XML document containing application-specific data (as opposed to pageset-specific data) and references to all of the pageset documents is also created and provided. This master XML document may be used to generate the contents list for the item master, as described below. Second, the data models may optionally be provided to repository <highlight><bold>250</bold></highlight>, at step <highlight><bold>522</bold></highlight>. Third, the data models may optionally be used directly to generate HTML files (*_<highlight><bold>00</bold></highlight>.htm and *_m.htm files), at step <highlight><bold>524</bold></highlight>. The HTML files may be read directly by a runtime engine, which can allow for rapid generation of pageset screens. However, the data models in HTML form may not be easily modified by a subsequent process. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a flow diagram of an embodiment of a process to examine the data for each pageset to generate exception messages for invalid configurations. In an embodiment, logical guidance for generating the exception messages is derived from the pageset data itself. Various types of exception messages may be generated for invalid configurations. These data-dependent exception messages can greatly reduce the number of messages that needs to be generated and further reduce the number of entries needed to represent invalid configurations in the configuration sub-table. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Initially, the pageset data is examined to identify any selectable attribute that has only one value (i.e., the attribute value occurs only once in the valid configurations for the pageset), at step <highlight><bold>542</bold></highlight>. For each such attribute value, a first type of exception message may be generated such as, e.g., &ldquo;&lsqb;selectable attribute value&rsqb; is only available with &lsqb;list of other selectable attribute values an item is available with&rsqb;.&rdquo; Next, the pageset data is examined to identify any pair of selectable attribute values that do not occur together in a valid configuration (e.g., red dress), at step <highlight><bold>544</bold></highlight>. For each such attribute pair, a second type of exception message may be generated such as, e.g., &ldquo;&lsqb;attribute 1 value&rsqb; is not available with &lsqb;attribute 2 value&rsqb;&rdquo;. The first two types of exception messages are thus effectively generated from valid configurations. Typically, the first two types of exception messages cover a large percentage of all invalid configurations. Finally, the pageset data is examined to identify all remaining invalid configurations, at step <highlight><bold>546</bold></highlight>. For each such invalid configuration, a third type of exception message may be generated such as, e.g., &ldquo;&lsqb;the combination of selected attribute values is an invalid configuration&rsqb;.&rdquo;</paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Each of the steps described above may be performed via a respective method. The exception messages may also be provided in a log file that is provided by model builder module <highlight><bold>220</bold></highlight>. The log file provides result of the data modeling so that the administrator can review the result. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> File builder module <highlight><bold>230</bold></highlight> receives the data models (e.g., the XML documents) from model builder module <highlight><bold>220</bold></highlight> and the third set of configuration variables and generates data-dependent application files. The configuration variables for file builder module <highlight><bold>230</bold></highlight> may include the following information: </paragraph>
<paragraph id="P-0107" lvl="2"><number>&lsqb;0107&rsqb;</number> Path of the executable for a Xalan XSL processor </paragraph>
<paragraph id="P-0108" lvl="2"><number>&lsqb;0108&rsqb;</number> Directory for XML documents </paragraph>
<paragraph id="P-0109" lvl="2"><number>&lsqb;0109&rsqb;</number> Directory for the log file output </paragraph>
<paragraph id="P-0110" lvl="2"><number>&lsqb;0110&rsqb;</number> For each XSLT stylesheet to be used: </paragraph>
<paragraph id="P-0111" lvl="3"><number>&lsqb;0111&rsqb;</number> Stylesheet name </paragraph>
<paragraph id="P-0112" lvl="3"><number>&lsqb;0112&rsqb;</number> Directory for stylesheet output </paragraph>
<paragraph id="P-0113" lvl="3"><number>&lsqb;0113&rsqb;</number> Backup stylesheet output&mdash;true or false </paragraph>
<paragraph id="P-0114" lvl="7"><number>&lsqb;0114&rsqb;</number> The configuration variables for file builder module <highlight><bold>230</bold></highlight> listed above are for a specific implementation. For other implementations, the configuration variables may include additional, fewer, and/or different information than those listed above, and this is within the scope of the invention. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> File builder module <highlight><bold>230</bold></highlight> generates application files from the received XML documents. In an embodiment, these application files include a Contents List page, one or more Inputs pages, and one or more Output pages. The application files may either include or be used to generate UI elements suitable for representing the item master. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The Contents List page is generated from the attributes corresponding to the Classification columns in the item master and are used to provide a hierarchical tree of the pagesets for the item master. The hierarchical tree may include any number of levels, with one level being provided for each classification column. For the example shown in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>, the first level may be Gender and the second level may be Type. The Contents List page provides a means for an end-user to navigate through the item master to arrive at the desired pageset. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> The Input pages represent the selectable attributes and are generated based on the Selectable Attribute feature tables, the main configuration table, and the configuration sub-table. Typically, one Input page is generated per pageset, and each Input page includes all selectable attributes for the pageset. Upon selection of a particular pageset by the end-user, the Input page for the selected pageset may be displayed. Depending on the specific implementation, the Input page may allows the end-user to view all valid configurations for the pageset, or may allow the end-user to select a particular configuration and respond whether the selected configuration is valid or invalid. The Input pages reference the Selectable Attribute feature tables. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> The Output pages represent the additional data for the items in each pageset. This data may include the data in the Data Attribute columns in the item master (e.g., the Price, Item Number, and Image columns in the item master shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). The data in the Output pages may be presented in various manners. In one implementation, upon selection of a particular valid configuration via the Input page, the additional data corresponding to the selected configuration is retrieved from the Output page and presented to the end-user. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows an embodiment of a screen <highlight><bold>600</bold></highlight> capable of presenting items in the item master. In this embodiment, the screen includes three frames <highlight><bold>610</bold></highlight>, <highlight><bold>620</bold></highlight>, and <highlight><bold>630</bold></highlight> generated from the application files and used to display the Contents List page, the Input page, and Output page, respectively. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The Contents List page is rendered in frame <highlight><bold>610</bold></highlight>, via which the end-user is able to navigate through various classification attributes to arrive at the desired pageset. In the example shown, the classification attributes are presented via a hierarchical tree structure, with the Gender level including two choices (Woman and Man) and each Gender choice further including a number of choices. In another implementation, the classification attributes may also be represented with a set of list boxes, one list box for each classification attribute, with each list box including the possible choices for the classification attribute. The values in each classification attribute list box may be dependent on the values selected for other classification attributes. The specific set of values selected for all classification attributes directs the end-user to the associated pageset. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> The Input page for the selected pageset is rendered in frame <highlight><bold>620</bold></highlight>, which provides the list of selectable attributes. In an embodiment, the default values are populated in the list boxes for the selectable attributes. In an embodiment, a specific value may be selected for each selectable attribute (e.g., to override the default value). Upon selection of a specific set of values for all selectable attributes, the configuration corresponding to this specific set of values may be checked as to determine whether it is valid or invalid. For example, the end-user may select the configuration of a blue, size 2, dress pant. If the configuration is valid, the Output page for the selected configuration is displayed in frame <highlight><bold>630</bold></highlight>. For the above example, the additional data for the selected configuration may include the price of $59.95 and the item number of 128. Otherwise, if the configuration is not valid, the appropriate exception message may be displayed, e.g., in frame <highlight><bold>630</bold></highlight>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The application files may be generated based on a particular template. The use of the template allows for flexibility in creating both the contents and the data-based logic of the application files. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> The template may be provided via a file, specified via a user interface screen, or provided via some other means. Default templates may be provided and used for creating the application files. The templates may be modified (or customized) to suit the specific application design. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In one specific implementation, the templates comprise XSLT (Extensible Style Language Transformations) stylesheets. In this implementation, file builder module <highlight><bold>230</bold></highlight> includes runtime Java and a Java-based Xalan XSL (Extensible Style Language) processor, which is publicly available. The Xalan XSL processor is a particular implementation of XSL transformation, and is used to convert XML documents to other types of documents such as XML, HTML, PDF, and possibly others. Other types of templates may also be defined and used and are within the scope of the invention. For example, </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> File builder module <highlight><bold>230</bold></highlight> further provides a log file that provides information for the administrator. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> System <highlight><bold>200</bold></highlight> may be launched to execute the data, model, and file modules in the proper sequential order. The execution may be initiated via a single batch file, which is a &ldquo;wrapper&rdquo; script. The wrapper script may receive a configuration variable indicating a starting point module and starts execution from this starting point module. The starting point may be data builder module <highlight><bold>210</bold></highlight>, model builder module <highlight><bold>220</bold></highlight>, or file builder module <highlight><bold>230</bold></highlight>. In this way, the administrator is able to run only the desired module(s) of system <highlight><bold>200</bold></highlight>, e.g., those that have not yet been run. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a diagram of a system <highlight><bold>700</bold></highlight> capable of automatically generating data models using items stored in a repository, in accordance with another embodiment of the invention. System <highlight><bold>700</bold></highlight> an example of a repository-based design, and also takes an item master as input and can generate data-dependent components of a catalog-type application. In this embodiment, system <highlight><bold>700</bold></highlight> includes a catalog admin module <highlight><bold>710</bold></highlight>, a catalog builder module <highlight><bold>720</bold></highlight>, a designer module <highlight><bold>730</bold></highlight>, and a publisher module <highlight><bold>740</bold></highlight>. Catalog builder module <highlight><bold>720</bold></highlight> further includes a data/model builder module <highlight><bold>722</bold></highlight> and a contents list builder module <highlight><bold>724</bold></highlight>. A database <highlight><bold>750</bold></highlight> provides the data for system <highlight><bold>700</bold></highlight> and further stores the data models generated by system <highlight><bold>700</bold></highlight>. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> The item master from the database may be comprised of a number of smaller tables that may be represented using any number of (relational) database schema. In that case, the collection of all attributes for the items in the item master may not apply to each item (i.e., not all items in the item master may be associated with all of the attributes). In an embodiment, only attributes that are common to all items in the item master are considered for use as classification attributes, and only attributes that are common to all items in each pageset are considered for use as candidate attributes for that pageset. Other attributes that apply to only some of the items in the item master would then be designated as data attributes. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Catalog admin module <highlight><bold>710</bold></highlight> receives the item master and possibly other data from database <highlight><bold>750</bold></highlight> and provides classification and configuration data. In an embodiment, all or a subset of the common attributes for the item master may be presented to an administrator (e.g., via a screen), who may then select a set of these common attributes to classify the item master. This allows the administrator to categorize the item master and define pagesets in any desired manner. This first set of attributes comprises the classification data for the item master. The classification data is then provided to data/model builder module <highlight><bold>722</bold></highlight> and used to classify the items in the item master into pagesets, as described above. The classification data is also provided to contents list builder module <highlight><bold>724</bold></highlight> and used to generate a Contents List table. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> In an embodiment, all or a subset of the common attributes (which are not classification attributes) for each pageset may also be presented to the administrator, who may then select a set of these attributes as candidate attributes for the pageset. The administrator may also define configuration variables (e.g., such as those described above) via catalog admin module <highlight><bold>710</bold></highlight>. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Within catalog builder module <highlight><bold>720</bold></highlight>, data/model builder module <highlight><bold>722</bold></highlight> receives (1) the item master and possibly extended attributes for the items in the item master from database <highlight><bold>750</bold></highlight>, (2) the classification data from catalog admin module <highlight><bold>710</bold></highlight>, and (3) configuration data, which may be provided via a file and/or by catalog admin module <highlight><bold>710</bold></highlight>. Data/model builder module <highlight><bold>722</bold></highlight> performs many of the functions described above for data builder module <highlight><bold>210</bold></highlight> and model builder module <highlight><bold>220</bold></highlight>. Data/model builder module <highlight><bold>722</bold></highlight> may first generate an item master (on the fly) similar to that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> if the data/model builder module is provided with a collection of smaller &ldquo;normalized&rdquo; tables that collectively defines the Products table. A normalized table is typically provided for each attribute (e.g., color, size). The use of normalized tables may reduce the amount of redundancy (i.e., without normalization, many combinations of redundant information may be present). </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Data/model builder module <highlight><bold>722</bold></highlight> then classify the items in the item master into pagesets using the classification data, and further generates data models for each pageset using the candidate attributes and configuration data. The candidate attributes may be provided by catalog admin module <highlight><bold>710</bold></highlight>, via the configuration data, and/or derived from the extended attributes by data/model builder module <highlight><bold>722</bold></highlight>. In an embodiment and as described above, the data models for each pageset may include a set of feature tables, a main configuration table, and a configuration sub-table. These tables and sub-table may be generated as described above in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The data models may be stored back to database <highlight><bold>750</bold></highlight>, or may be provided directly to publisher module <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Contents list builder module <highlight><bold>724</bold></highlight> receives the classification data and generates a Contents List table, which may be used for navigation through the item master as described above. The Contents List table may also be stored back to database <highlight><bold>750</bold></highlight>, or may be provided directly to publisher module <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Catalog builder module <highlight><bold>720</bold></highlight> may also provide a log file, which may include error messages indicating any uncleaniness in the received item master and/or the configuration data. The information provided in the log file may be used to clean the item master (e.g., modify item values and/or attributes), the configuration data, and/or the classification data, such that valid data models may be generated. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Designer module <highlight><bold>730</bold></highlight> provides graphical user interface (GUI) tools to assist the administrator manually perform data modeling, create attributes, select default, and perform other functions. Designer module may be used to further modify or customize data model and/or content list that are generated by catalog builder module <highlight><bold>720</bold></highlight>. Designer module <highlight><bold>730</bold></highlight> may also be used to publish the result of the data modeling. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Publisher module <highlight><bold>740</bold></highlight> receives the data models and the Contents List table from database <highlight><bold>750</bold></highlight> and generates UI elements suitable for display on a screen. In an embodiment, publisher module <highlight><bold>740</bold></highlight> generates a Contents List page based on the Contents List table and a number of pagesets based on the data models. These contents list page and pagesets may be presented as HTML files or in some other format. </paragraph>
</section>
<section>
<heading lvl="1">Computer System </heading>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram of an embodiment of a computer system <highlight><bold>800</bold></highlight> that may be used to store and execute program codes that implement system <highlight><bold>200</bold></highlight> or <highlight><bold>700</bold></highlight>. System <highlight><bold>800</bold></highlight> includes a bus <highlight><bold>808</bold></highlight> that interconnects major subsystems such as one or more processors <highlight><bold>810</bold></highlight>, a memory subsystem <highlight><bold>812</bold></highlight>, a data storage subsystem <highlight><bold>814</bold></highlight>, an input device interface <highlight><bold>816</bold></highlight>, an output device interface <highlight><bold>818</bold></highlight>, and a network interface <highlight><bold>820</bold></highlight>. Processor(s) <highlight><bold>810</bold></highlight> perform many of the processing functions for system <highlight><bold>800</bold></highlight> and communicate with a number of peripheral devices via bus <highlight><bold>808</bold></highlight>. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Memory subsystem <highlight><bold>812</bold></highlight> may include a RAM <highlight><bold>832</bold></highlight> and a ROM <highlight><bold>834</bold></highlight> used to store codes and data that implement various aspects of the invention. In a distributed environment, the program codes and data may be stored on a number of computer systems and used by the processors of these systems. Data storage subsystem <highlight><bold>814</bold></highlight> provides non-volatile storage for program codes and data, and may include a hard disk drive <highlight><bold>842</bold></highlight>, a floppy disk drive <highlight><bold>844</bold></highlight>, and other storage devices <highlight><bold>846</bold></highlight> such as a CD-ROM drive, an optical drive, and removable media drive. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Input device interface <highlight><bold>816</bold></highlight> provides interface with various input devices such as a keyboard <highlight><bold>852</bold></highlight>, a pointing device <highlight><bold>854</bold></highlight> (e.g., a mouse, a trackball, a touch pad, a graphics tablet, a scanner, or a touch screen), and other input device(s) <highlight><bold>856</bold></highlight>. Output device interface <highlight><bold>818</bold></highlight> provides an interface with various output devices such as a display <highlight><bold>862</bold></highlight> (e.g., a CRT or an LCD) and other output device(s) <highlight><bold>864</bold></highlight>. Network interface <highlight><bold>820</bold></highlight> provides an interface for system <highlight><bold>800</bold></highlight> to communicate with other computers coupled to communication network <highlight><bold>822</bold></highlight>. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Many other devices or subsystems (not shown) may also be coupled to system <highlight><bold>800</bold></highlight>. In addition, it is not necessary for all of the devices shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> to be present to practice the invention. Furthermore, the devices and subsystems may be interconnected in configurations different from that shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. One or more of the storage devices may be located at remote locations and coupled to system <highlight><bold>800</bold></highlight> via communication network <highlight><bold>822</bold></highlight>. The operation of a computer system such as that shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is readily known in the art and not described in detail herein. The source codes to implement various aspects and embodiments of the invention (e.g., sub-configuration) may be operatively disposed in memory subsystem <highlight><bold>812</bold></highlight> or stored on storage media such as a hard disk, a floppy disk, or a CD-ROM that is operative with a CD-ROM player. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Headings are provided herein for reference and to aid in locating certain sections. These headings are not intended to limit the scope of the concepts described therein under, and these concepts may have applicability in other sections throughout the entire specification. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The foregoing description of the specific embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without the use of the inventive faculty. Thus, the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein, and as defined by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer program product for generating data models for an item master with a plurality of items, comprising a computer-usable medium having embodied therein computer-readable program codes for 
<claim-text>classifying the items in the item master into a plurality of pagesets, wherein each item in the item master is associated with a plurality of attributes and each attribute is associated with a respective set of possible values, and wherein each pageset is defined by a unique combination of values for a first set of attributes; </claim-text>
<claim-text>determining a second set of attributes for each pageset, wherein the attributes in the second set are used to identify items in the associated pageset; and </claim-text>
<claim-text>generating data models for each pageset based in part on the associated second set of attributes. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for 
<claim-text>receiving a first set of configuration variables, and </claim-text>
<claim-text>wherein the first set of attributes is specified in the first set of configuration variables. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for 
<claim-text>validating data in the item master. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for 
<claim-text>generating a first log file with errors resulting from the validating. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data models includes a set of tables descriptive of the items in the pageset. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the data models for each pageset include 
<claim-text>a plurality of features tables, one feature table for each attribute in the second set of attributes for the pageset, and </claim-text>
<claim-text>a configuration table indicative of valid and invalid configurations for the items in the pageset. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein invalid configurations are represented in part by a plurality of types of exception messages. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, a first type of exception messages corresponds to attributes in the second set having one value. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, a second type of exception messages corresponds to a pair of attributes in the second set having mutually exclusive sets of values. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for storing the data models to a repository. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for 
<claim-text>generating output files for the plurality of pagesets based on the generated data models. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the output files include 
<claim-text>a plurality of pagesets files, one for each of the plurality of pagesets, each pageset file including data for the associate pageset, and </claim-text>
<claim-text>a contents list file including data non-specific to the pagesets. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the output files are provided as XML documents. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the output files are provided as HTML files. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second set of attributes for each pageset includes a sufficient number of attributes such that the items in the pageset are uniquely identified by their values for the attributes included in the second set. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second set of attributes for each pageset includes a minimum number of attributes such that the items in the pageset are uniquely identified by their values for the attributes included in the second set. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the attributes in the second set are selected from among a plurality of candidate attributes. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the plurality of candidate attributes include one or more mandatory attributes designated to be included in the second set. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the plurality of candidate attribute includes one or more optional attributes selectable for inclusion in the second set. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the one or more optional attributes are provided in an ordered list, and each optional attribute is considered for inclusion in the second set based on its order in the ordered list. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer program product for forming a list of attributes for identifying a plurality of items in a pageset, comprising a computer-usable medium having embodied therein computer-readable program codes for 
<claim-text>receiving the pageset of items, wherein each item is defined by a unique combination of values for a plurality of attributes and each attribute is associated with a respective set of possible values; </claim-text>
<claim-text>selecting an attribute not yet considered for identifying items in the pageset; </claim-text>
<claim-text>determining whether the selected attribute is useful for identifying items in the pageset; </claim-text>
<claim-text>including the selected attribute in the list if the attribute is useful for identifying items in the pageset; and </claim-text>
<claim-text>repeating the selecting, determining, and including for each of one or more additional attributes until a sufficient number of attributes is included in the list such that the items in the pageset are uniquely identified by their values for the attributes in the list. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein attributes to be considered for identifying items are provided in an ordered list, and wherein the attributes in the ordered list are selected for consideration based on their order in the ordered list. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein attributes to be considered for identifying items are attributes common for all items. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein each item in the pageset includes a combination of valid values for the common attributes. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the selected attribute is deemed as useful for identifying items if more items in the pageset may be uniquely identified with the selected attribute. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A computer program product for forming a list of attributes for identifying a plurality of items in a pageset, comprising a computer-usable medium having embodied therein computer-readable program codes for 
<claim-text>receiving the pageset of items, wherein each item is defined by a unique combination of values for a plurality of attributes and each attribute is associated with a respective set of possible values; </claim-text>
<claim-text>selecting an attribute not yet considered for identifying items in the pageset; </claim-text>
<claim-text>including the selected attribute in the list; </claim-text>
<claim-text>determining whether the list of attributes is sufficient to uniquely identify the items in the pageset; and </claim-text>
<claim-text>repeating the selecting, including, and determining for each of one or more additional attributes until a sufficient number of attributes is included in the list such that the items in the pageset are uniquely identified by their values for the attributes in the list. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer program product of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein the computer-usable medium is further embodied with computer-readable program codes for 
<claim-text>determining whether the selected attribute is useful for identifying items; and </claim-text>
<claim-text>removing the selected attribute from the list if the attribute is not useful for identifying items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. In a computer system, a method for generating data models for an item master with a plurality of items, comprising: 
<claim-text>classifying the items in the item master into a plurality of pagesets, wherein each item in the item master is associated with a plurality of attributes and each attribute is associated with a respective set of possible values, and wherein each pageset is defined by a unique combination of values for a first set of attributes; </claim-text>
<claim-text>determining a second set of attributes for each pageset, wherein the attributes in the second set are used to identify items in the associated pageset; and </claim-text>
<claim-text>generating data models for each pageset based in part on the associated second set of attributes, wherein the data models includes a set of tables descriptive of items in the pageset.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004971A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004971A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004971A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004971A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004971A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004971A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004971A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004971A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004971A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004971A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004971A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
