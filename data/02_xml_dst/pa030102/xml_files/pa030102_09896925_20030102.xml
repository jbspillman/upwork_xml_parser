<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005270A1-20030102-P00001.TIF SYSTEM "US20030005270A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00002.TIF SYSTEM "US20030005270A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00003.TIF SYSTEM "US20030005270A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00004.TIF SYSTEM "US20030005270A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00005.TIF SYSTEM "US20030005270A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00006.TIF SYSTEM "US20030005270A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00007.TIF SYSTEM "US20030005270A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-P00008.TIF SYSTEM "US20030005270A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00000.TIF SYSTEM "US20030005270A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00001.TIF SYSTEM "US20030005270A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00002.TIF SYSTEM "US20030005270A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00003.TIF SYSTEM "US20030005270A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00004.TIF SYSTEM "US20030005270A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00005.TIF SYSTEM "US20030005270A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00006.TIF SYSTEM "US20030005270A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00007.TIF SYSTEM "US20030005270A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00008.TIF SYSTEM "US20030005270A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00009.TIF SYSTEM "US20030005270A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005270A1-20030102-D00010.TIF SYSTEM "US20030005270A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005270</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09896925</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>712</class>
<subclass>226000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Programmable control of data attributes</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Andrew</given-name>
<middle-name>C.</middle-name>
<family-name>Bartlett</family-name>
</name>
<residence>
<residence-us>
<city>Westborough</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Paul</given-name>
<family-name>Jackson</family-name>
</name>
<residence>
<residence-us>
<city>Wellesley</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FAUSTINO A. LICHAUCO</name-1>
<name-2>Fish &amp; Richardson P.C.</name-2>
<address>
<address-1>225 Franklin Street</address-1>
<city>Boston</city>
<state>MA</state>
<postalcode>02110-2804</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Software for building a block diagram representation of a system includes instructions for defining a propagation block having an input port for receiving information indicative of an attribute set of an input signal and an output port for providing information indicative of an attribute set of an output signal on the basis of the attributes of the input signal. The software includes instructions for associating, with the propagation block, a rule-set for determining the output attribute set on the basis of the input attribute-set. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to computer simulation, and in particular, to software for building block-diagram models of systems to be simulated. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Before a computer can simulate the behavior of a system, a model of that system must be built. In many cases, a system can be described by one or more constituent elements connected together so that outputs of one element become inputs of other elements. Each such system element can be characterized by a transfer function. Such a system is often represented as a block diagram in which each system element corresponds to one of the blocks in the block diagram. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Software intended for computer simulation of systems often provides a user-interface for enabling users to define blocks representative of the constituent elements of the system. At a purely abstract level, the definition of a particular block is no more than the definition of the transfer function of the system element that that block represents. However, at the implementation level, there are many computational details to consider. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> For example, to optimize performance, a system designer must consider what data types (fixed or floating point, arrays or scalars) are to be used in representing input and output signals of the block. Having done so, a designer must consider the number of bits to use for each input and output and the scaling to be applied to map a sequence of bits into a number that represents some value in a range of values. Each input or output signal of a block can thus be thought of as having two different parts: a value, and a set of attributes for representing that value. Two such attributes, already described above, are data-type and scaling attributes. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In most cases, a user can easily make the value of a block&apos;s output signals (hereafter referred to as &ldquo;outputs&rdquo;) depend on the values of its input signals (hereafter referred to as &ldquo;inputs&rdquo;). This permits a change in an input&apos;s value to propagate automatically throughout the system. However, it is not so easy for a user to cause the attributes of a block&apos;s output to depend on the attributes of its inputs. As a result, in most cases, a change in an input attribute does not propagate automatically throughout the system. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The invention is based on the recognition that it is possible to specify rules for determining the output signal&apos;s attributes on the basis of one or more input signal attributes. This enables a user to programmably set attributes associated with inputs and outputs of a block representative of a system element. Such a block can then be interconnected with other blocks without regard to matching the attributes of signals passed between blocks. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The invention thus includes a computer-readable medium having encoded thereon instructions for causing a computer system to receive a definition of a propagation block. The propagation block has an input port for receiving information indicative of an input attribute-set of an input signal, and an output port for providing information defining an output attribute-set of an output signal. The medium also has encoded thereon instructions for causing the computer to receive a definition of a rule-set for determining the output attribute-set on the basis of the input attribute-set. The user can program the propagation block by define the rule-set through a user-interface. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In one aspect of the invention, the instructions cause the propagation block to define an output attribute-set that includes a number of bits to be used for representing the output. In another aspect of the invention, the instructions cause the propagation block to define an output attribute-set that includes a scaling factor to be applied to the output. Such a scaling factor can include a bias, a slope, or both. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Other types of attributes can be controlled. For example, the output might be an array, in which case the instructions cause the propagation block to define an output attribute-set that includes a dimension of the array. Or, the output might include a signal, in which case the instructions cause the propagation block to define an output-attribute set that includes a sampling rate associated with the signal and/or information indicative of whether the signal is a time-based signal or a frame-based signal. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> These and other features and objects of the invention will be apparent from an examination of the following detailed description and the figures, in which:</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE FIGURES </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a user-defined block that incorporates the invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows the detailed architecture of the user-defined block in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a dialog box for causing a computation block to accept attributes specified by an attribute-propagation block; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4 and 5</cross-reference> illustrate alternate methods of interconnecting the attribute-propagation block shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a graphical user interface element for enabling the attribute-propagation block to be programmed by a user; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows a method carried out by the attribute-propagation block of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows an alternate embodiment of the system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9 and 10</cross-reference> are graphical user interface elements showing the rule-sets associated with the additional attribute-propagation blocks in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Software for simulating dynamic systems often provides a graphical interface for creating a block diagram of the system to be simulated. Such a block diagram typically includes several blocks, each of which is characterized by a transfer function. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> To build a system model, a user drags selected blocks from a library onto a worksheet. These blocks can be built-in blocks, provided as part of the software, or user-defined blocks that a user has defined and saved in a library. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Once the selected blocks are on the worksheet, the user interconnects them to build the system. If a block having the desired transfer function is unavailable, the user can often define such a block by assembling existing blocks. As noted above, the resulting user-defined block can be saved in a library and re-used in a variety of system models. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In defining a block, a user must define the attributes of the input and output signals for the block. In most cases, the optimal selection of output signal attributes depends on the input signal attributes. The invention provides a user-interface for enabling a user to programmably define attributes of output signals on the basis of attributes of input signals. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a user-defined block <highlight><bold>10</bold></highlight> incorporating the invention. The illustrated block <highlight><bold>10</bold></highlight> is intended to flawlessly and efficiently add two addends together. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> To achieve flawlessness, attributes of the sum should, whenever possible, be selected to avoid rounding errors or overflow errors. To achieve efficiency, attributes of the sum should, whenever possible be selected to minimize the lengths of data types used and to avoid excessive scaling adjustments. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The optimal attributes for the addends and the sum are not independent of each other. For example, if the first and second addends are eight-bits wide, then the sum should also be eight-bits wide. This reduces (but does not eliminate) the likelihood of overflow error. However, if the first addend is sixteen bits wide and the second addend is eight-bits wide, then the sum should be sixteen-bits wide to reduce the likelihood of overflow error. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Since the optimal attributes for the sums and addends (collectively referred to as the &ldquo;block variables&rdquo;) depend on each other, it is not possible to assign optimal attributes without a priori knowledge of the attributes assigned to at least one of the block variables. Nevertheless, it is possible to specify, in advance, rules for selecting optimal attributes of one or more block variables. Once attributes of one or more block variables become known, these rules can be applied to determine optimal attributes for other block variables. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows the internal architecture of the user-defined block <highlight><bold>10</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The values of the first and second addends are provided to an adder <highlight><bold>12</bold></highlight>, the output of which is the sum shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The adder <highlight><bold>12</bold></highlight> is an example of a &ldquo;computation block.&rdquo; A computation block is one that sets the value of its output on the basis of the values of its inputs. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the adder <highlight><bold>12</bold></highlight> is a built-in block dragged into the system model from a library of built-in blocks. A built-in block, such as the adder <highlight><bold>12</bold></highlight>, typically includes built-in attribute-setting rules for providing output attributes on the basis of input attributes. These built-in rules are rigid and cannot easily be changed by the user. The invention provides a user-interface through which these built-in rules can be overridden by user-defined attribute setting rules. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> To override the built-in attribute-setting rules, these rules are first disabled. To disable built-in attribute-setting rules of a built-in block, the user opens a dialog box that controls the attribute-setting rules associated with that block. A dialog box provided by the illustrated embodiment is shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. However, user-interfaces other than dialog boxes, or dialog boxes having different layouts, can also be used. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the illustrated dialog box <highlight><bold>15</bold></highlight> includes options <highlight><bold>17</bold></highlight> for &ldquo;Output data type and scaling&rdquo;. These options control the manner in which the built-in library block sets its output. By selecting the option entitled &ldquo;Inherit via block propagation&rdquo; <highlight><bold>19</bold></highlight>, the user forces a built-in block to set attributes using rules carried out by an attribute-propagation block in communication with the built-in block. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The attributes of the first and second addends are made available to an attribute-propagation block <highlight><bold>14</bold></highlight> through first and second ports. Unlike a computation block, an attribute-propagation block does not operate on the values of its inputs and outputs. Instead, the attribute-propagation block determines attributes of its output signal on the basis of attributes of its input signals. This is different from a computation block, which determines the value of an output on the basis of values of its inputs. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The attribute-propagation block <highlight><bold>14</bold></highlight> includes a rule-set <highlight><bold>16</bold></highlight> for determining the optimal attributes of the sum on the basis of attributes of the first and second addends, more generally referred to as the &ldquo;controlling attributes.&rdquo; The optimal attributes of the sum, more generally referred to as the &ldquo;propagated attributes,&rdquo; are then provided back to the summer. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The illustrated attribute-propagation block <highlight><bold>14</bold></highlight> has two inputs and one output. The two inputs receive controlling attributes and the output provides a propagated attribute selected by applying rules to a subset of the controlling attributes. However, an attribute-propagation block can also have one input and one output. Alternatively, an attribute-propagation block can have many inputs and many outputs. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> One method for achieving an attribute-propagation block having many inputs and many outputs is to appropriately interconnect attribute propagation blocks of the type shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. For example, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a parallel connection of attribute-propagation blocks <highlight><bold>18</bold></highlight>, <highlight><bold>20</bold></highlight> that effectively creates an attribute-propagation block having two inputs and two outputs. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates daisy-chained attribute propagation blocks <highlight><bold>22</bold></highlight>, <highlight><bold>24</bold></highlight> that effectively create an attribute-propagation block having three inputs and one output. The interconnections shown in FIGS. <highlight><bold>4</bold></highlight> and <highlight><bold>5</bold></highlight> can readily be combined to form attribute-propagation blocks with any number of inputs and outputs. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> It is also important to note that the concept of &ldquo;input&rdquo; and &ldquo;output&rdquo; are purely logical concepts. In this context, it is useful to consider an attribute-propagation block as having a plurality of ports, each of which can be an input port or an output port depending on circumstances that become apparent only at run-time. For example, in the case of an attribute-propagation block <highlight><bold>14</bold></highlight> with three ports, as shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> controlling attribute can be made available at the first and third ports, in which case the attribute-propagation block <highlight><bold>14</bold></highlight> applies the rules in the rule-set <highlight><bold>16</bold></highlight> to determine a propagated attribute at the second port. In such a case, the second port is a logical output port and the first and third ports are logical input ports. However, controlling attributes might instead be made available at the second and third ports, in which case the attribute-propagation block <highlight><bold>14</bold></highlight> applies the rules in its rule-set <highlight><bold>16</bold></highlight> to determine the propagated attribute at the first port. In this case, the second port is now a logical input port and the first port becomes a logical output port. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> An analogy can be drawn to the process of solving one equation with two unknowns. If one learns the value of the first unknown, one can use the equation to evaluate the second unknown. However, one could just as easily have learned the second unknown and used that, together with the equation, to evaluate the first unknown. In either case, the result would have been the same. The designation of one variable as the &ldquo;given&rdquo; variable and the other as derived from the given variable is thus meaningless until the evaluation has already taken place. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The attribute-propagation block <highlight><bold>14</bold></highlight> also includes a user-interface <highlight><bold>26</bold></highlight> for enabling a user to easily alter the rules for determination of attributes. In the illustrated embodiment, the user-interface <highlight><bold>26</bold></highlight> is a graphical user-interface that presents user-selectable options in a dialog box <highlight><bold>28</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Such a dialog box can be opened, for example, by selecting the attribute-propagation block <highlight><bold>14</bold></highlight> and choosing an appropriate menu command. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the illustrated dialog box <highlight><bold>28</bold></highlight> implements a first collection of rules <highlight><bold>30</bold></highlight> for controlling a first attribute, namely the data-type attribute, and a second collection of rules <highlight><bold>32</bold></highlight> for controlling a second attribute, namely the scaling attribute. Each collection of rules includes a switch (designated as rules 1 and 2 respectively) for disabling the function of the propagation block <highlight><bold>14</bold></highlight>. These switches enable a user to explicitly specify one or both attributes. In the illustrated embodiment, attribute propagation is enabled by choosing &ldquo;Inherit via propagation rule&rdquo; in a drop-down list of options. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In some cases, the application of two rules will be impossible because of a conflict between the rules. To resolve such conflicts, each collection of rules <highlight><bold>30</bold></highlight>, <highlight><bold>32</bold></highlight> includes a priority order for application of the rules. When the application of two rules results in a conflict, the rule having the higher priority is applied. The priority order of the rules is communicated to the user by listing the rules on the dialog box <highlight><bold>28</bold></highlight> in the order of their priority. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Rules 1.1 and 1.2 describe what should happen if the attribute of either of the addends were set to be floating point. The remaining rules 1.3 through 1.4.4 only apply if neither addend has an attribute set to be floating point. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Rule 1.3 controls whether the propagated attribute designates a signed or unsigned fixed point number. It is only necessary to designate a bit to represent a sign if there exists some way that the sum can become negative. Since this can occur when either or both of the addends is signed, rule 1.3 causes the propagated attribute to be signed if either one of the addends is signed. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> To avoid rounding errors, it is necessary (though not sufficient) that the sum have at least as many bits as the widest of the addends. Rule 1.4.1 creates such a rule by setting the base number of bits based on the widest addend. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> To avoid overflow errors, it is necessary that the sum have at least one bit more than the widest addend. Rules 1.4.2 and 1.4.3 cause this to be the case. These rules are set to multiply the base number of bits by 2 and then to add 0 to the resulting product. For example, suppose the first and second addends are, respectively, sixteen and eight bits wide. The base number of bits would then correspond to the wider of the two addends, namely the 16-bit addend. Rules 1.4.2 and 1.4.3 adjust this base to be 2*16&plus;0 bits (i.e. 32 bits). </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Rule 1.4.4 determines what bit sizes are allowable. In this example, the allowable sizes are 8, 16, and 32 bits. Since the adjusted base number of bits (32) happens to be an allowed value, the propagated data-type attribute would specify that the sum is a 32-bit fixed point number. If the adjusted number of bits had been other than one of the three allowed values, the propagation block <highlight><bold>14</bold></highlight> would have set an error message. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Rules 2 through 2.2.3 determine the scaling attributes of the output signal. The concept of scaling arises because of the need to map an integer to a range of values. For example, if an integer between 0 and 256 is to map to a value between a and b, a suitable mapping might be to multiply the integer by a &ldquo;slope&rdquo; of (b&minus;a)/256 and adding a &ldquo;bias&rdquo; of a. The user controls the values of the slope and bias by appropriately setting values in Rules 2 through 2.2.3. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> To avoid round-off error, the sum should allow as much precision as the most precise of the addends. Rule 2.1.1 determines which addend has the smallest slope, and hence which is most precise. This value will be used to set the attribute of the sum to be as precise as the most precise of the addends. Rules 2.1.2 and 2.1.3 allow a user to adjust the base slope as determined by Rule 2.1. 1, either by multiplying by a constant (Rule 2.1.2) or by adding a constant (rule 2.1.3). As illustrated, these constants are set to 1 and 0 respectively. Hence, in the illustrated example, it is rule 2.1.1 that determines the slope associated with the output. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Rule 2.2.1 determines how scaling biases (also known as scaling offsets) should be treated. In the illustrated embodiment, the propagated attribute of the sum is set to have a bias equal to the sum of the biases associated with the controlling attributes of the addends. By effectively canceling the effects of the biases, rule 2.2.1 reduces the likelihood of a loss of precision or overflow resulting from bias mismatch. Rules 2.2.2 and 2.2.3 are analogous to rules 2.1.2 and 2.1.3 respectively, and are set to similar trivial values. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The user-interface <highlight><bold>26</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> can take the form of a dialog box, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. However, the user-interface <highlight><bold>26</bold></highlight> can take other forms, for example a tabbed dialog box, a sequence of dialog boxes such as that presented by a wizard, or menu commands. The user-interface <highlight><bold>26</bold></highlight> need not be a graphical user-interface <highlight><bold>26</bold></highlight>. For example, the user-interface <highlight><bold>26</bold></highlight> might be stored in an external file accessible to the user. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In addition, the rule definitions shown in the dialog box <highlight><bold>28</bold></highlight> are representative only and are selected for the specific purpose of creating a user-defined block <highlight><bold>10</bold></highlight> that generates a sum from two addends. The rule definitions in the dialog box <highlight><bold>28</bold></highlight> will, in general, depend on the specific application of the attribute-propagation block <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Additional details on the user-interface <highlight><bold>26</bold></highlight> of the attribute-propagation block <highlight><bold>14</bold></highlight> are provided in an extract from &ldquo;Fixed-Point Blockset Users Guide&rdquo;, Version 3 published by Math Works in September 2000 that is attached as an appendix to this specification. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows the process carried out by the attribute-propagation block. The propagation block begins by collecting <highlight><bold>34</bold></highlight> all the rules identified in the dialog box of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The attribute-propagation block then determines <highlight><bold>36</bold></highlight> whether any propagated attributes can be set without reference to any controlling attributes. If the rules permit a propagated attribute to be set without knowledge of any controlling attributes, the attribute-propagation block sets <highlight><bold>38</bold></highlight> the propagated attribute accordingly. If not, the attribute-propagation block collects the known attributes and determines <highlight><bold>40</bold></highlight> if these are sufficient to set the remaining attributes consistent with the rules. If they are not sufficient, the attribute-propagation block waits <highlight><bold>42</bold></highlight> and retries later. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> If the known attributes are sufficient to determine a propagated attribute, then the attribute-propagation block determines <highlight><bold>44</bold></highlight> whether the propagated attribute can be set in a manner consistent with all the rules. If not, the attribute-propagation block posts <highlight><bold>46</bold></highlight> an error. Otherwise, the attribute-propagation block sets <highlight><bold>38</bold></highlight> the propagated attribute consistent with the rules and the known input attributes. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The system <highlight><bold>10</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, when implemented with a rule-set <highlight><bold>16</bold></highlight> as defined in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, reduces, but does not eliminate overflow errors. To alert the user to overflow, it is useful to provide second and third attribute-propagation blocks <highlight><bold>48</bold></highlight>, <highlight><bold>50</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Both the second and third attribute-propagation blocks <highlight><bold>48</bold></highlight>, <highlight><bold>50</bold></highlight> set the same propagated attribute, namely the propagation attribute of a reference value provided by a reference block <highlight><bold>52</bold></highlight>. So long as the second and third attribute-propagation blocks <highlight><bold>48</bold></highlight>, <highlight><bold>50</bold></highlight> agree on the attribute assigned to the reference value, there is no error. If the second and third attribute-propagation blocks <highlight><bold>48</bold></highlight>, <highlight><bold>50</bold></highlight> attempt to assign conflicting attributes to the reference value, an error results. The interconnection shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, when combined with the rule-set definitions <highlight><bold>52</bold></highlight>, <highlight><bold>54</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 9 and 10</cross-reference>, are such that the occurrence of such an error is likely to correspond to an overflow. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9 and 10</cross-reference> show the rule-set definitions for the second and third attribute-propagation blocks <highlight><bold>48</bold></highlight>, <highlight><bold>50</bold></highlight> respectively. An examination of these figures shows that if a conflict is to arise, it will do so because of the difference in rules 2.1.1 and 2.1.2. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Using its rule 2.1.1 (see <cross-reference target="DRAWINGS">FIG. 9</cross-reference>), the second attribute-propagation block <highlight><bold>48</bold></highlight> attempts to set the base of the reference signal to correspond to the addend having the greatest range. Using rule 2.1.2, the second attribute-propagation block <highlight><bold>48</bold></highlight> provides one additional bit of range to the sum by setting the multiplicative adjustment to double the slope. The extra bit of range insures that overflow is impossible. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Using its rule 2.1.1 (see <cross-reference target="DRAWINGS">FIG. 10</cross-reference>), the third attribute-propagation block <highlight><bold>50</bold></highlight> attempts to set the base of the reference signal to correspond to the addend having the smallest, rather than the largest, range. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The attribute of the reference value is both an input attribute and an output attribute of the third attribute-propagation block <highlight><bold>50</bold></highlight>. Consequently, if the reference value has a smaller range than the adder&apos;s output, then no conflict occurs. Otherwise an error occurs. Such an error is desirable because it alerts the user to the possibility of an overflow. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The attribute-propagation block of the invention has been described in the context of a particular application, namely a system <highlight><bold>10</bold></highlight> for generating the sum of two addends. This particular application has been chosen as a vehicle for describing the structure and function of the attribute-propagation block primarily for its simplicity. It will be appreciated that the attribute-propagation block of the invention has broader applications than that described in connection with the detailed description herein. For example, other attributes can be controlled by an attribute-propagation block. These attributes can include dimensions of arrays, vectors, or matrices, whether values are real or complex, sampling rates of signals, and whether signals are subject to frame-based or time-based sampling. 
<image file="US20030005270A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030005270A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030005270A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030005270A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030005270A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030005270A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030005270A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030005270A1-20030102-P00008.TIF" id="EMI-00008"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">Having described the invention, and a preferred embodiment thereof, what we claim as new and secured by Letters Patent is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-readable medium having encoded thereon instructions for causing a computer system to: 
<claim-text>receive a definition of a propagation block having 
<claim-text>an input port for receiving information indicative of an input attribute-set of an input signal, and </claim-text>
<claim-text>an output port for providing information defining an output attribute-set of an output signal, and </claim-text>
</claim-text>
<claim-text>receive a definition of a rule-set for determining said output attribute-set on the basis of said input attribute-set; and </claim-text>
<claim-text>provide a user-interface for enabling a user to define said rule-set. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said instructions cause said propagation block to define an output attribute-set that includes a number of bits to be used for representing said output. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said instructions cause said propagation block to define an output attribute-set that includes a scaling factor to be applied to said output. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said instructions cause said propagation block to define a scaling factor that includes a bias. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said instructions cause said propagation block to define a scaling factor that includes a slope. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said output includes an array and said instructions cause said propagation block to define an output attribute-set that includes a dimension of said array. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said output includes a signal and said instructions cause said propagation block to define an output-attribute set that includes a sampling rate associated with said signal. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said output includes a signal and said instructions cause said propagation block to define an output-attribute set that includes information indicative of whether said signal is a time-based signal or a frame-based signal. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said input includes a plurality of variables and said instructions for receiving a definition of a rule-set comprise instructions for defining the rule-set to determine said output attribute-set on the basis of a subset of said plurality of variables. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein said instructions for receiving a definition of a rule-set comprise instructions for defining the rule-set to determine said subset of said plurality of variables. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said instructions for receiving a definition of a rule-set comprise instructions for defining the rule-set to determine said subset on the basis of an order in which said input-attributes become available to said second object. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The computer-readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said instructions for receiving a definition of a rule-set comprise instructions for defining the rule-set to determine said subset on the basis of weights assigned to each of said input-attributes. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. In a block diagram simulation system, a method of: 
<claim-text>defining a propagation block having an input port for receiving information indicative of an attribute set of a signal and an output port for providing information indicative of an attribute set of a signal; </claim-text>
<claim-text>associating with said propagation block a rule-set for determining said output attribute set on the basis of said input attribute-set; and </claim-text>
<claim-text>providing a user-interface for enabling a user to revise said rule-set. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method of transferring software from a source computer-system to a target computer-system, said method comprising: 
<claim-text>transferring, to said target computer-system, instructions for causing said target computer-system to receive a definition of a propagation block having 
<claim-text>an input port for receiving information indicative of an input attribute-set of an input signal, and </claim-text>
<claim-text>an output port for providing information defining an output attribute-set of an output signal, and </claim-text>
</claim-text>
<claim-text>transferring, to said target computer-system, instructions for causing said target computer-system to receive a definition of a rule-set for determining said output attribute-set on the basis of said input attribute-set; and </claim-text>
<claim-text>transferring, to said target computer-system, instructions for causing said target computer-system to provide a user-interface for enabling a user to define said rule-set. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising transferring, to said target computer-system, instructions for causing said target computer-system to define an output attribute-set that includes a number of bits to be used for representing said output. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising transferring, to said target computer-system, instructions for causing said target computer-system to define an output attribute-set that includes a scaling factor to be applied to said output. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein transferring instructions for causing said target computer-system to define an output attribute-set comprises transferring instructions for defining a scaling factor that includes a bias. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein transferring instructions for causing said target computer-system to define an output attribute-set comprises transferring instructions for defining a scaling factor that includes a slope. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said output includes an array and transferring instructions for causing said target computer-system to define an output attribute-set comprises transferring instructions for defining an output attribute-set that includes a dimension of said array. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said output includes a signal and transferring instructions for causing said target computer-system to define an output attribute-set comprises transferring instructions for defining an output-attribute set that includes a sampling rate associated with said signal. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said output includes a signal and transferring instructions for causing said target-computer system to define an output attribute-set comprises transferring instructions for defining an output-attribute set that includes information indicative of whether said signal is a time-based signal or a frame-based signal. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said input includes a plurality of variables and transferring instructions for causing said target computer system to receive a definition of a rule-set comprises transferring instructions for defining the rule-set to determine said output attribute-set on the basis of a subset of said plurality of variables. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein transferring instructions for receiving a definition of a rule-set comprises transferring instructions for defining the rule-set to determine said subset of said plurality of variables. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein transferring instructions for receiving a definition of a rule-set comprises transferring instructions for defining the rule-set to determine said subset on the basis of an order in which said input-attributes become available to said second object. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein transferring instructions for receiving a definition of a rule-set comprises transferring instructions for defining the rule-set to determine said subset on the basis of weights assigned to each of said input-attributes.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005270A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005270A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005270A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005270A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005270A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005270A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005270A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005270A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005270A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005270A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005270A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
