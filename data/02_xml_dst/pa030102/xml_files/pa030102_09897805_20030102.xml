<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004702A1-20030102-D00000.TIF SYSTEM "US20030004702A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00001.TIF SYSTEM "US20030004702A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00002.TIF SYSTEM "US20030004702A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00003.TIF SYSTEM "US20030004702A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00004.TIF SYSTEM "US20030004702A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00005.TIF SYSTEM "US20030004702A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00006.TIF SYSTEM "US20030004702A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00007.TIF SYSTEM "US20030004702A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004702A1-20030102-D00008.TIF SYSTEM "US20030004702A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004702</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09897805</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/28</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>704</class>
<subclass>002000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Partial sentence translation memory program</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Dan</given-name>
<family-name>Higinbotham</family-name>
</name>
<residence>
<residence-us>
<city>Orem</city>
<state>UT</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>KIRTON AND MCCONKIE</name-1>
<name-2>1800 EAGLE GATE TOWER</name-2>
<address>
<address-1>60 EAST SOUTH TEMPLE</address-1>
<address-2>P O BOX 45120</address-2>
<city>SALT LAKE CITY</city>
<state>UT</state>
<postalcode>84145-0120</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention features a partial sentence translation memory integrated within a workbench program, that identifies, or operates to determine, previously translated partial sentences existing within text data. The partial sentence translation memory comprises an algorithm that allows a translator to identify partial sentence translations instead of entire sentence translations. The algorithm causes a computer to access a database of previously translated material contained within either the workbench program or in the partial sentence translation memory program itself. The workbench program or the partial sentence translation memory is capable of determining whether or not a given partial sentence from a source document has been previously translated. The purpose of the algorithm of the present invention is to allow a translator to see at a single glance what parts of a text segment within a source document have been previously translated. Specifically, a translator is able to identify previously translated sentence fragments existing within a source language text segment, such as phrases or other non-sentence structures. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The field of this invention relates to computer translation programs. Specifically, this invention relates to a computer translation system comprising a partial sentence or phrase translation memory program capable of identifying or determining previously translated partial sentences existing within a source language text segment, wherein the partial sentences are identified from a database of previously translated material. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Background </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The task of translating documents or material from language to language may be facilitated with several tools or aids. Traditionally, such aids or tools existed in paper form that include monolingual and bilingual dictionaries and terminology glossaries. However, with the advent of computers and the ever increasing capabilities of computer systems, the once tedious task of translating material from a source language to a target language has been greatly simplified. Translators are now capable of working within the context of a word processing or DTP environment comprising some type of translation software package, commonly referred to as a translator&apos;s workbench or workbench program. This workbench program is a single integrated software package comprising a text editor or word processor into which a number of translation-related tools are integrated for rapid and easy access. Alternatively, stand-alone translation software can be installed on a translator&apos;s computer system or workstation. Although a significant amount of autonomous effort is still required to entirely translate material from a source language (the untranslated material) into a target language (the translated material), computers have allowed translators to produce high-accuracy translations in a much shorter time frame. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Employing the use of computer systems to reduce the translation time and to aid in the translation of material is referred to in the industry as machine assisted human translation (&ldquo;MAHT&rdquo;) or interactive translation. Machine assisted human translation has focused on ways of using computer systems to significantly reduce the amount of autonomous time and effort required to complete a translation. MAHT and Terminology Management Tools are based on the concept of automating the re-use of previously translated sentences. These tools are designed for use by professional translators and do not automatically produce computer-generated translations. Instead they allow the translator to improve his/her productivity and consistency by re-using terms and sentences they have translated in the past. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The procedure by which MAHT systems are capable of producing high-quality and accurate translations is found in their ability to identify portions of a source language, from a source document, that are to be translated into a target language; then to extrapolate fragments of known or previously translated material of the target language, usually contained within an index or database, based upon the identified source language information to create the translated target language. The remaining material from the source language or document that was unobtainable by the computer system is then filled in autonomously to complete the translation. In prior art translation systems, the fragments extrapolated by the computer system are on a sentence by sentence basis. This means that only entire sentences may be recognized by the computer system and translated into the target language. For example, a translator wishing to translate a document from English to French, may be assisted by causing the computer system to extrapolate all previously translated sentences from the source document that are found in the index or database of previously translated material and returning their French equivalents. Those sentences not found must then be transferred autonomously. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> An example of a MAHT tool is a translation memory (&ldquo;TM&rdquo;). A translation memory is a database that collects translations as they are performed along with the source language equivalents. After a number of translations have been performed and stored in the translation memory, it can be accessed to assist new translations where the new translation includes identical or similar source language text as has been included in the translation memory. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Although translation programs and MAHT translation systems greatly aid in the translation of source material into a target material, their ability to yield large amounts of translated material from a specific source document into a target language is limited. The limitations of these systems stem from the fact that they operate on a sentence by sentence basis. Put another way, these systems are only capable of finding similar full sentences from the source document. This is because TM systems are only capable of storing previously translated sentences. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> As conventional TM systems have the limitation that they operate only at the sentence, their overall benefit to a translator is limited. Conventional TM systems rely on a close or &ldquo;fuzzy&rdquo; match between the sentence to be translated and those stored within the TM database. As sentences often do not match directly, especially from source document to source document, the degree of &ldquo;fuzziness&rdquo; between sentences returned and those desired is greatly increased. As such, the translation draft is much less accurate, thereby requiring the translator to perform a greater percentage of the translation by hand. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Other prior art translation memory systems are able to work with units of text contained within a sentence, such as a word or phrase, but only if they are manually stored with a lexicon. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In addition, although TM systems provide significant advantages, they are not ideal for stand-alone documents, multiple terminology documents, or short documents. Conventional TM systems are particularly suitable for highly technical documents, documents with specialized vocabularies, large documents, related documents, and documents containing large amounts of recurring text. As such, their ability to provide accurate, high percentage translations varies from document to document. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Therefore, what is needed is a translation memory system capable of operating on a partial sentence basis. Specifically, what is needed is a MAHT that is capable of returning those partial sentence fragments to the translator for more expansive application of the TM and improved translation accuracy. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY AND OBJECTS OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The present invention advances prior art translation memory systems by providing a partial sentence translation memory, integrated with a workbench program that operates, or is capable of translating text, on a partial sentence or phrase basis. The partial sentence translation memory comprises an algorithm that allows a translator to determine or find partial sentence translations instead of entire sentence translations as featured in conventional translation memory systems. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The primary purpose of the algorithm, and the crux of the present invention, is to allow a translator to see at a single glance what parts of a text segment existing within a source document have been previously translated. Specifically, a translator is able to find translated sentence fragments, such as phrases or other non-sentence structures. As such, a partial sentence may be considered as simply a sequence of words contained within a segment of text. In a preferred embodiment, this process or procedure is carried out by the partial sentence translation memory by determining the longest phrase ending with the last word. However, the partial sentence translation memory could be designed to start with the beginning word in the text segment as the first step. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The algorithm interfaces with a workbench program, as previously described, and causes a computer to access one or more databases, such as an inverted word index, that contains previously translated material. The workbench program comprises computer readable software that functions to determine whether or not a given partial sentence from a source document has been previously translated and allows the translator to see at a single glance as much. Moreover, punctuation and capitalization are ignored in order to obtain more accurate returns. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The algorithm of the present invention provides significant advantages over prior art translation memory programs. Unlike the present invention partial sentence translation memory, prior art translation memory programs are unduly limited in their capabilities to offer the translator efficient, accurate, and high percentage translation assistance. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Therefore, it is an object of the preferred embodiments of the present invention to provide a partial sentence, or phrase, partial sentence translation memory. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> It is another object of the preferred embodiments of the present invention to provide a partial sentence translation memory and system that allows a translator to see at a single glance the parts of a text segment, namely partial sentences such as phrases and the like, that have been previously translated. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> It is still another object of the preferred embodiments of the present invention to provide a database of previously translated material, such as an inverted word index, that interfaces and interacts with the partial sentence translation memory, wherein the database is capable of storing and presenting partial sentence translations, or phrases, as directed by the partial sentence translation memory. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> It is a further object of the preferred embodiments of the present invention to provide a partial sentence translation memory that provides the translator the ability, if desired, to store and receive updates of partial sentence translations. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> It is still further an object of the preferred embodiments of the present invention to provide an efficient and accurate method of translation capable of increasing a translator&apos;s ability to translate source documents based on partial sentences. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> To achieve the foregoing objects, and in accordance with the invention as embodied and broadly described herein, the present invention features a partial sentence translation memory for assisting a translator in translating text data based on partial sentences. The present invention further features a method for assisting a translator in translating source documents based on partial sentences and computer readable code that directs a computer to determine whether text data has been previously translated based on partial sentences. Each of these is discussed in greater detail below.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The foregoing and other objects and features of the present invention will become more fully apparent from the following description and appended claims, taken in conjunction with the accompanying drawings. Understanding that these drawings depict only typical embodiments of the invention and are, therefore, not to be considered limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which: </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system environment, or workstation, indicating various ways a source document may be introduced into the system, and specifically the writeable text data application program; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates generally the translation system, and particularly the partial sentence translation system, according to the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates the interaction of the partial sentence translation memory, as well as the workbench program, with the several translation memory databases possible in the present invention and with each other; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a general flow chart representative of the sequential steps of the partial sentence translation memory algorithm of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a technical flow chart representative of the detailed sequential steps performed by the partial sentence translation memory algorithm to determine partial sentences, or phrases, that have been previously translated; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the graphical user interface and the several databases that may be retrieved and viewed therein; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart showing the life cycle of a partial sentence as it progresses from existing in a source document, to being detected or determined as being previously translated, to being checked by a translator, and to ultimately being stored within a translation memory program; and </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a technical flow chart representative of the inverse of the detailed sequential steps performed by the partial sentence translation memory algorithm to determine partial sentences, or phrases, that have been previously translated of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> It will be readily understood that the components of the present invention, as generally described and illustrated in the figures herein, could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the preferred embodiments of the system and method of the present invention, as represented in <cross-reference target="DRAWINGS">FIGS. 1 through 7</cross-reference>, is not intended to limit the scope of the invention as claimed, but is merely representative of the presently preferred embodiments of the invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The presently preferred embodiments of the invention will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout. </paragraph>
</section>
<section>
<heading lvl="1">I. General Discussion of Translation Memory Systems </heading>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Employing the use of computer systems to reduce the translation time and to aid in the translation of material is referred to in the industry as machine assisted human translation (&ldquo;MAHT&rdquo;) or interactive translation. Machine assisted human translation has focused on ways of using computer systems to significantly reduce the amount of autonomous time and effort required to complete a translation. Within the MAHT environment are several tools and/or aids that a translator may use to receive assistance in the translation of the source material. MAHT and Terminology Management Tools are based on the concept of automating the re-use of previously translated sentences. These tools are designed for use by professional translators and do not automatically produce computer-generated translations. Instead they allow the translator to improve his/her productivity and consistency by re-using terms and sentences they have translated in the past. Among these tools include electronic dictionaries or terminological databases. However, more sophisticated tools are available to the translator as a result of the technological advancements of the computer system. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> An example of a more sophisticated MAHT tool is a translation memory (&ldquo;TM&rdquo;). A translation memory is a database that collects translations as they are performed along with the source language equivalents and then provides the translator with the ability, or allows the translator, to access previously translated material easily and efficiently. A TM system also contains a database of sentences and their translations that has been built up from previous translation projects. A TM system follows along as a source document is translated, and subsequently stores these translated sentences. When the translator comes across identical or similar material, the TM allows the translator to reuse the previously translated material. This allows a translator to search the existing database for the most accurate sentence match and then return that match to the workbench program where the translator can edit and modify the translation for accuracy. Once the sentence has been translated accurately, it can be stored, along with the source sentence, into the database for later retrieval. This process continues until reaching the end of the source document, wherein a number of sentence translations have been performed and stored in the translation memory database. Subsequently, the TM database can be accessed to assist new translations where the new translation includes identical or similar source language text as has been included in the translation memory. In this regard, the level of benefit received from a TM is directly proportional to the amount of repetition in the document to be translated. In addition, the capabilities of the TM to assist in translating is also directly proportional to the number of varying sentences within the database. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The procedure by which TM systems are capable of producing high-quality and accurate translations is found in their ability to identify portions of a source language, from a source document, that are to be translated into a target language; then to extrapolate fragments of known or previously translated material of the target language, usually contained within an index or database, based upon the identified source language information, to create the translated target language. The remaining material from the source language or document that was unobtainable by the computer system is then filled-in autonomously to complete the translation. As stated above, prior art TM systems operate to extrapolate on a sentence by sentence basis. This means that only entire sentences may be recognized by the computer system and translated into the target language. For example, a translator wishing to translate a document from English to French, may be assisted by causing the computer system to extrapolate all previously translated sentences from the source document that are found in the index or database of previously translated material and returning their French equivalents. Those sentences not found must then be translated autonomously. In any event, the translator is interactively working within the translation environment with the TM to create and finalize the translated document, thus providing an efficient translation method. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The advantage of a TM operating within a MAHT environment is that it can leverage existing TM technology to make the translator more efficient, without sacrificing the traditional accuracy provided by a human translator. It makes translations more efficient by ensuring that the translator never has to translate the same source text twice. In the past, these systems have been slow. This has largely been a direct function of the state of computer systems and their ability to process large amounts of data. However, with the ever increasing processing power of computer systems, this is, for the most part, no longer an issue. TM systems provide significant advantages over manual translation. Some of these benefits include: improved translation consistency across an entire document, improved translation accuracy, reduction in total translation time and costs, and reduction in the time to market of products. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Translation memories are most effective when they are able to locate &ldquo;fuzzy matches&rdquo; as well as identical matches. Fuzzy matches facilitate the retrieval of text that differs slightly in word order, morphology, case, or spelling. By returning approximate matches, considerable time is preserved even though these sentences must be autonomously checked for accuracy. A translator&apos;s job is much easier if a significant starting point is provided from which he/she can work. In addition, approximations are necessary due to the numerous varieties possible in natural language texts. Some examples of existing translation programs, more commonly referred to as workbench programs, using &ldquo;fuzzy&rdquo; matches include Workbench program&trade; for Windows by Trados&trade; and Deja Vu&trade;, published by Atril. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Translation memory programs do not analyze syntax or grammar, thus they are more language independent than other translation techniques. In practice, however, it has been difficult to implement search software that is truly language independent. In particular, existing search engines are word based, which is to say that they rely on a particular word as the basic element in accomplishing the search. This is especially true of &ldquo;fuzzy&rdquo; search methods. In each language, words change in unique ways to account for changes in gender, plurality, tense, and the like. Hence, word-based systems cannot be truly language independent because the words themselves are inherently language oriented. It has been a continuing difficulty to develop fast, accurate fuzzy text search methods. </paragraph>
</section>
<section>
<heading lvl="1">II. Partial Sentence Translation Memory </heading>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The present invention features a translation system comprising: (a) a computerized workstation; (b) a workbench program executable on the computerized workstation, the workbench program comprising at least one workbench program database of previously translated material; (c) a writeable text data software application program also executable on the computerized workstation, the writeable text data application program containing text data to be translated; and (d) a partial sentence translation memory program operable with the workbench program and optionally including a partial sentence translation memory database of previously translated material, the partial sentence translation memory program comprising computer-readable code that allows a user to determine, at a single glance, whether partial sentences in the source language have been previously translated. This is done by comparing the partial sentences within the text segment to either a database of previously translated material, e.g., the workbench program database or the partial sentence translation memory database. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The present invention also features a method for determining whether partial sentences of source text data have been previously translated. The method comprises the steps of: (a) executing a workbench program, such as TRADOS&trade;, on a computer system; (b) executing a writeable text data application program on the computer system, the writeable text data application program being capable of interfacing with the workbench program; (c) entering text data, written in a source language, into the writeable text data application program, wherein the text data comprises at least one text segment; (d) identifying the text segment to be operated upon; (e) accessing a partial sentence translation memory program from the computer system, the partial sentence translation memory interfacing with the workbench program and the writeable application program, the workbench program containing at least one database of previously translated material, with either the partial sentence translation memory or the workbench program being capable of determining whether the text data has been previously translated; (f) comparing the text segment with the previously translated material to determine those partial sentences within the text segment that have been previously translated; and (g) displaying the partial sentence translations on the computer within a graphical user interface environment. These translations could also be displayed in context as they existed in the database. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The step of comparing itself, as described above, is the crux of the invention and may comprise the steps of determining a first longest partial sentence translation in the text segment, wherein the first longest partial sentence translation ends with the last word in the text segment; determining a second longest partial sentence translation, the second partial sentence translation starting with the word directly preceding the first word of the first longest partial sentence translation, the second partial sentence translation defining the longest partial sentence translation beginning with the word; and repeating the step of comparing as often as necessary to obtain the longest partial sentence translation that starts with each word in the text segment. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The step of comparing may alternatively comprise, as an inverse to the above described step of comparing, the steps of determining a first longest partial sentence translation in said text segment, wherein said first longest partial sentence translation starts with the first word in said text segment; determining a second longest partial sentence translation, said second partial sentence translation ending with the word directly after the last word of said first longest partial sentence translation, said second partial sentence translation defining the longest partial sentence translation ending with said word; and repeating said step of comparing as often as necessary to obtain the longest partial sentence translation that ends with each word in said text segment. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Each of the above-described steps may be repeated as often as necessary for determining partial sentences from any identified text segment within the writeable text data application program. In addition, the method further comprises the step of storing the partial sentence translations for later use. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The purpose of the algorithm of the present invention is to allow a translator to see at a single glance what parts of a text segment within a source document have been previously translated. Specifically, a translator is able to find or determine previously translated sentence fragments, such as phrases or other non-sentence structures. As such, a phrase may be considered as simply a sequence of words contained within a segment of text. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Essentially, the algorithm causes a computer to access a database of previously translated material. This database can be based on either the workbench program&apos;s database, or on the partial sentence translation memory database, or any other suitable database. What is critical is that the present invention contains, or interfaces with a program that contains, computer readable code, or a software function, that directs a computer to determine whether or not a given phrase from a source document has been previously translated. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Upon the introduction of a source document within a translator workbench, and the determination of a target language, the algorithm begins by analyzing a word string or text segment, as identified by the translator, from the source document contained within a word processing program or other text data program. This text segment may be a sentence or partial sentence, such as a phrase. The algorithm operates upon the text segment by causing a software function to see if the last word contained within the text segment has been previously translated. If the last word has been translated before, the last two words of the text segment are considered a phrase. The software function is then used to determine if this phrase, comprising the last two words of the segment, has been previously translated. If it has, the last three words are considered as a phrase. The software function is then used to determine if this phrase, comprising the last three words of the segment, has been previously translated. If it has, the last four words are considered and defined as a phrase. This process, or these iterations, continue until a phrase is found as not having been previously translated, or in other words, the software cannot define the next sequential phrase as having been previously translated. The program then commences to mark the previous phrase that was determined as having been previously translated, identifying it as the longest phrase from the end of the text segment that has been previously translated. The software program determines these phrases by checking them with the translation memory as described herein. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The next step performed by the algorithm of the present invention is to determine the longest phrase in the same text segment that starts or begins with the word just before the beginning word in the phrase just marked as the longest phrase from the end of the text segment. Rather than trying all of the phrases that start with this word, a phrase that stretches only halfway to the end of the segment is tested with the software function. If it has been previously translated, a phrase that stretches three-fourths of the way to the end of the segment is tested. If the software function determines that the phrase that stretches only halfway to the end of the segment has not been previously translated, a phrase that only stretches one-fourth of the way to the end of the segment is tested. After each test, a phrase is tested whose last word is halfway between the last successful test and the last failed test until the longest phrase starting with that word is found and marked. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Each time a longest phrase is found and marked, the same phrase is tested which ends with the same ending word, but begins with the word before the starting word. If it is found, it must be the longest translated phrase that begins with the new starting word, so it is marked. If it is not found, the procedure described in the previous paragraph is used to determine the longest translated phrase that begins with the new starting word. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> This backward proceeding procedure is repeated over and over again until the longest phrase, determined as being previously translated, that starts with each word in the text segment has been determined. By the nature and logistics of the algorithm, any partial sentence that consists of a single word is removed from the list, and any phrase that is completely contained by another phrase in the list is also removed. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Again these steps are achieved by checking the phrases with the translation memory, wherein the translation memory is created and/or updated as described herein. Moreover, again, the algorithm as presented and described herein may be designed to perform the inverse of these steps. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system environment wherein a user may input text data into the computer system either manually, or by voice, or by scanning, or through some other source such as importing via telecommunications networks. This text data represents the text data of the source language that is to be translated into a target language. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Specifically, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a translation system <highlight><bold>10</bold></highlight>, or translator&apos;s workbench, as contained and operable on computer system <highlight><bold>2</bold></highlight>. Computer system <highlight><bold>2</bold></highlight> comprises central processing unit <highlight><bold>4</bold></highlight>, random access memory <highlight><bold>6</bold></highlight>, keyboard <highlight><bold>8</bold></highlight>, mouse <highlight><bold>12</bold></highlight>, monitor <highlight><bold>14</bold></highlight>, and printer <highlight><bold>16</bold></highlight>. Other computer components not shown may also be included as this illustration is only intended to be an example. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates how text data is input or entered into computer <highlight><bold>2</bold></highlight>. Text data may be manually entered as represented by box <highlight><bold>18</bold></highlight>. The most common way to manually enter text data is by typing on a keyboard using a word processor or other application program. Text data may also be entered into computer system <highlight><bold>2</bold></highlight> by scanning paper documents <highlight><bold>20</bold></highlight> into scanner <highlight><bold>22</bold></highlight>, or by obtaining or importing text data from a another computer <highlight><bold>24</bold></highlight>, such as via a telecommunications network <highlight><bold>26</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is not meant to be limiting in any way. One ordinarily skilled in the art will recognize the many possible ways in which text data may be entered and stored on a computer system, to be further processed and worked upon. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is illustrative of translation system <highlight><bold>10</bold></highlight>. Shown are the many elements and components needed to carry out the present invention along with their interaction with each other. Translation system <highlight><bold>10</bold></highlight> utilizes an existing workbench program <highlight><bold>30</bold></highlight>, such as TRADOS , etc., to create and access a database that collects and stores previously translated material, and that is capable of determining whether text data has been previously translated. Workbench program <highlight><bold>30</bold></highlight> also contains a database of sentences and their translations that has been built up from previous translation projects that is accessible via workbench program <highlight><bold>30</bold></highlight>. The workbench program allows the translator to access the database of previously translated material easily and efficiently. When the translator comes across identical or similar material, the workbench program allows the translator to reuse the previously translated material. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> also shows text data application program <highlight><bold>42</bold></highlight>. Text data application program <highlight><bold>42</bold></highlight> serves as the vehicle for providing text data that is to be operated upon within the translator&apos;s workbench. Suitable text data application programs may include word processor software programs such as Microsoft Word&trade;, Corel WordPerfect&trade;, or others. As text is input or entered into text data application program <highlight><bold>42</bold></highlight>, it may then be further processed. In essence, the text may be operated on by the computer system and translation system to see if source text data has a corresponding target translation. Portions or segments of the target language may then be stored in one of several data bases which will be discussed further below. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Once the text data is entered, translation system <highlight><bold>10</bold></highlight> calls upon a partial sentence extraction subroutine/algorithm, or partial sentence translation memory, <highlight><bold>50</bold></highlight> and workbench program <highlight><bold>30</bold></highlight> to determine, at a single glance, what partial sentences existing within the selected text data have been previously translated. The user is capable of monitoring and working within the translation system <highlight><bold>10</bold></highlight> via graphical user interface <highlight><bold>100</bold></highlight>. Graphical user interface <highlight><bold>100</bold></highlight> may be any interface known in the art. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is illustrative of the interrelation between workbench program <highlight><bold>30</bold></highlight> and partial sentence translation memory <highlight><bold>50</bold></highlight>, and the various translation memory databases interacting with these two. Specifically, what is shown is the ability for workbench program <highlight><bold>30</bold></highlight> to access a network server translation memory database (&ldquo;network TM database&rdquo;) <highlight><bold>32</bold></highlight>, which is capable of providing information to several interconnected translator workbenches or workstations, or a local workbench program translation memory database <highlight><bold>34</bold></highlight>, or both if desired by the user and set up properly. This is not new in the art and is only meant for illustration purposes only. One ordinarily skilled in the art will recognize how partial sentence translation memory program <highlight><bold>50</bold></highlight> may operate within various translation memory programs, TRADOS being only one of such programs. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Partial sentence translation memory <highlight><bold>50</bold></highlight> runs in conjunction with workbench program <highlight><bold>30</bold></highlight> to carry out the translation procedures as described herein. Each workstation, only one of which is shown here, may contain a local workbench program translation memory database <highlight><bold>34</bold></highlight>, a local permanent translation memory database (&ldquo;permanent TM database&rdquo;) <highlight><bold>36</bold></highlight>, a local temporary translation memory database (&ldquo;temporary TM database&rdquo;) <highlight><bold>38</bold></highlight>, and a terminology database <highlight><bold>40</bold></highlight>. These databases contain material or information that has been previously translated and that may be accessed to assist the translator in various translations. Permanent TM database <highlight><bold>36</bold></highlight>, and temporary TM database <highlight><bold>38</bold></highlight> are keyed off of and are utilized by partial sentence translation memory <highlight><bold>50</bold></highlight>, while local workbench program translation memory database <highlight><bold>34</bold></highlight> and network server translation memory database <highlight><bold>32</bold></highlight> are keyed off of and utilized only by workbench program <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> When translating, a user executes workbench program <highlight><bold>30</bold></highlight> from a computer workstation. Workbench program <highlight><bold>30</bold></highlight> can be any known translation memory program, such as TRADOS&reg; or MTX, and is designed to operate on, or work with, text data present in a word processing program, such as Microsoft Word&reg; or Corel WordPerfect&reg;, or any other application program containing text data. Included in either the workbench program or the partial sentence translation memory program is a software function that can determine whether or not a given partial sentence has been previously translated. Preferably, punctuation and grammar are ignored, so a partial sentence, or phrase, is considered to be simply a sequence of words. Each of the above-described databases are made operational through either workbench program <highlight><bold>30</bold></highlight>, or partial sentence translation memory <highlight><bold>50</bold></highlight>, respectively. Workbench program <highlight><bold>30</bold></highlight> includes workbench translation memory database <highlight><bold>34</bold></highlight>, which contains the necessary tools and operational commands necessary to determine whether any selected text data has been previously translated from a source language to a target language. As partial sentence translation memory <highlight><bold>50</bold></highlight> is executed, it works in conjunction with workbench program <highlight><bold>30</bold></highlight> to determine whether a partial sentence has been translated. In this preferred embodiment, partial sentence translation memory <highlight><bold>50</bold></highlight> utilizes workbench program <highlight><bold>30</bold></highlight> to obtain or access previously translated material. As stated, partial sentence translation memory <highlight><bold>50</bold></highlight> may itself contain the ability to access previously translated material. Partial sentence translation memory <highlight><bold>50</bold></highlight> operates to substantially reduce the number and degree of &ldquo;fuzzy&rdquo; matches often returned by workbench program <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> To provide a detailed description of the databases, temporary TM database <highlight><bold>38</bold></highlight> is an optional or discretionary database that is operational during a current text data translation session. Temporary TM database <highlight><bold>38</bold></highlight> contains and stores the words, phrases, and sentences that have been translated during that session. In essence, temporary TM database <highlight><bold>38</bold></highlight> stores sentences and phrases, and their translations, for use in the current translation session. These are translations that the user or translator translates and enters autonomously. When the current work session is started, and Workbench program <highlight><bold>30</bold></highlight> and partial sentence translation memory <highlight><bold>50</bold></highlight> are executed, temporary TM database <highlight><bold>38</bold></highlight> receives from and stores new text data that is translated during the current translation session. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Although not a critical aspect of the present invention, as the translation session progresses and text data in a source language is operated upon to see if any given partial sentences or phrases contained within the text data have been previously translated, the user may wish to store the translated text. To do so, the user downloads the information currently stored in temporary TM database <highlight><bold>38</bold></highlight> to permanent TM database <highlight><bold>36</bold></highlight>, which is a database that receives and stores previously translated material for later use. This is preferably an inverted word index. Permanent TM database <highlight><bold>36</bold></highlight> is also accessible during the translation session to provide the user with previously translated material which can be used to translate new text data. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> If several workstations are interconnected within a network, network TM database <highlight><bold>32</bold></highlight> may be used to receive and store previously translated material stored on the permanent TM databases of any or all of those workstations. Upon translating text data, the user may upload this information to network TM database where it may be accessible by any number of users, so that each may share the information uploaded from the other workstations. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> also shows terminology database <highlight><bold>40</bold></highlight>, which comprises a dictionary of translated words and/or phrases that are entered into the database manually once the correct translation is determined by the translator. Once the data is entered, it may later be accessed to assist in the translation process. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The specifics of using a translation memory software program within a translation workstation are well known in the art and are not described herein. Only a brief description of these systems has been provided as this is not the focus of the present invention. One ordinarily skilled in the art will understand the workings these systems together with a text data application program. These systems are merely provided as background information and are intended to be used with the partial sentence translation memory technology described below. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates, generally, the method for identifying partial sentences, within a source language text segment, that have been previously translated, as dictated by the partial sentence translation memory program or algorithm of the present invention. It should be noted that the present invention, and specifically the partial sentence translation memory algorithm, is designed to work with known workbench programs and already existing stored databases, as well as being capable of creating and accessing its own database of previously translated partial sentences or phrases, such as in an inverted word index. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Partial sentence translation memory <highlight><bold>50</bold></highlight> comprises starting point <highlight><bold>52</bold></highlight>, which leads into first finding the longest phrase at the end of a text data segment, shown as <highlight><bold>53</bold></highlight>. A text data segment can be a sentence, a subset of a sentence, or two or more straddled sentences, such as text at the end of one sentence and text at the start of the next sentence. Basically, a text data segment is any segment of words grouped together. The longest phrase is found by starting with the last word in the text data segment and checking that with a translation memory database to see if that word has been translated before. If it has, that word plus the second to last word are considered a phrase and also checked. If that phrase has been previously translated, the next word and resulting phrase proceeding backwards through the text data segment is checked. Essentially, the algorithm moves backwards through the text data segment, n being the next word beyond the phrase that has been checked and found to have been previously translated. Once the system finds a phrase that has not been translated, the phrase checked just prior to the untranslated phrase is marked as the longest phrase of the sentence found to be previously translated. In this step, the longest phrase from the end of the text data segment that is determined to have been previously translated is marked. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The algorithm then proceeds by using a binary search to determine the longest phrase starting with the word before the beginning of the phrase just marked, starting with the word n, shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> as <highlight><bold>55</bold></highlight>. Once found this phrase is added to the list of previously translated phrases. This step is repeated several times, using n&minus;1 shown generally as <highlight><bold>59</bold></highlight>, until the longest phrase that starts with each word in the segment has been determined, i.e., until n&lt;0, shown as <highlight><bold>57</bold></highlight>. Moreover, the algorithm eliminates any partial sentence, or phrase, that consists of a single word, or any partial sentence, or phrase, that is completely contained by another phrase, shown as <highlight><bold>61</bold></highlight>. At this stage, the partial sentence translation is complete, shown as <highlight><bold>63</bold></highlight>, and can be used again for any number of text data segments. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a technical flow chart representative of the detailed sequential steps performed by the partial sentence translation memory algorithm as just generally described. As defined, &ldquo;T&rdquo; is the total number of words in the segment (the segment contains words 0 through T&minus;1), &ldquo;P(n,m)&rdquo; is the phrase from word n to word m, &ldquo;i&rdquo; is a counter, used to move backward through the sentence, &ldquo;e&rdquo; is a placeholder pointing to the last word of the phrase currently being investigated, and the number &ldquo;0&rdquo; is the first word of the text data segment. Each box is designated by a numeral followed by a description of that step in the translation algorithm. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Start <highlight><bold>52</bold></highlight> of the algorithm of the present invention comprises highlighting or identifying a text data segment existing in the word processor. The text data segment may be obtained using any known means in the art, such as typing, scanning, importing, etc. At this stage, the user initiates the Workbench program and partial sentence translation memory algorithm to begin identifying previously translated partial sentences, or phrases, within the text data. The translation system of the present invention is capable of operating on the text data segment within the translation workbench to identify previously translated partial sentences, or phrases, from that text data segment using the partial sentence translation memory algorithm described in detail in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> below. Referring now to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>: </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> &ldquo;i&equals;T.&rdquo; &ldquo;e&equals;T&minus;1&rdquo; <highlight><bold>54</bold></highlight>. This points e to the last word of the segment, and i past the end of the segment so it will be the last word in the segment in the next step. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> &ldquo;i&equals;i&minus;1&rdquo; <highlight><bold>58</bold></highlight> decrements i to the previous word in the sentence. On the first time through, it points i to the last word of the sentence. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> &ldquo;i&lt;0&quest;&rdquo; <highlight><bold>62</bold></highlight>. If i is less than 0, i has gone backward through the whole segment, so all phrases in the segment which are also in memory have already been added to the list. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> &ldquo;Remove sub phrases from list&rdquo; <highlight><bold>64</bold></highlight>. The algorithm compiles of list of phrases that are found in translation memory. It is possible that both P(n,m) and P(n&plus;1,m) are in the list. Only the longest phrases found in memory will be displayed to the user, so P(n&plus;1,m) is removed from the list in each such case. Phrases of length 1, which are phrases comprising only a single word, from the binary search below are also removed at this point, thus removing all phrases in the list that are sub-phrases of other phrases in the list. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> &ldquo;Done&rdquo; <highlight><bold>66</bold></highlight>. At the end of the algorithm, the list contains the longest phrases in the current segment, which are found in translation memory. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> &ldquo;P(i,i) exists&quest;&rdquo; <highlight><bold>60</bold></highlight>. This is true if word i exists anywhere in translation memory. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> &ldquo;e&equals;i&minus;1&rdquo; <highlight><bold>56</bold></highlight>. Since word i is not known anywhere in translation memory (the last step), word i cannot be part of a phrase found in translation memory. The word before i, namely i&minus;1, is the last word that could possibly be the end of a translation memory phrase, for any words earlier in the segment. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> &ldquo;i&equals;T&minus;1&quest;&rdquo; <highlight><bold>68</bold></highlight>. If i is T&minus;1, there is no need to consider the phrase P(i,i) for the list, because it is only one word. Only phrases of 2 or more words will be added to the list at this point. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> &ldquo;e&lt;i&plus;1&rdquo; <highlight><bold>72</bold></highlight>. In this case, the phrase P(i,e) would be less than 2 words long, so it does not need to be considered. Only phrases of two or more words will be added to the list at this point. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> &ldquo;P(i,e) exists&quest;&rdquo; <highlight><bold>76</bold></highlight>. This is true if the phrase from word i to word e is found in translation memory. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> &ldquo;Add P(i,e) to list&rdquo; <highlight><bold>80</bold></highlight>. This is the list of phrases from the segment that occur in translation memory. The value of e either comes from e&equals;i when P(i,i) exists (which is removed later), or from e&equals;mid when P(i,mid) exists in steps <highlight><bold>84</bold></highlight> and <highlight><bold>86</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> &ldquo;high &equals;e&minus;1,&rdquo; &ldquo;low &equals;i&plus;1,&rdquo; &ldquo;e&equals;i&rdquo; <highlight><bold>82</bold></highlight>. This starts a section of the algorithm which is basically a binary search like the binary search algorithm in the work by Kernighan and Ritchie, which is incorporated by reference herein. All of the steps below are also part of the binary search. Since P(i,e) didn&apos;t exist in the last step, i.e. the phrase from word i to word e was not in translation memory, this section does a binary search for the last word of a phrase starting with word i that is in translation memory. If a phrase beginning with word i is in translation memory, the last word that could possibly end such a phrase is e&minus;1, since P(i,e) is not in translation memory, so we let high&equals;e&minus;1, the last possible word. The first word that could possibly end a two or more word phrase starting with word i is word i&plus;1 (low&equals;i&plus;1). The guess is halfway between low and high (mid), to see if that phrase is in translation memory. If it is, the next guess is halfway between mid and high, and so forth; if it isn&apos;t, the next guess is halfway between low and mid, and so forth. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> &ldquo;low&lt;&equals;high&quest;&rdquo; <highlight><bold>92</bold></highlight>. If this is true, there may be a longer phrase that could be added to the list, so the binary search is continued. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> &ldquo;mid&equals;low&plus;(high-low)/2&rdquo; <highlight><bold>90</bold></highlight>. Word mid is the word halfway between an end word that succeeds (P(i,low&minus;1) exists), and an end word that does not succeed (P(i,high&plus;1) does not exist). </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> &ldquo;P(i,mid) exists&quest;&rdquo; <highlight><bold>86</bold></highlight>. The halfway guess is checked to see if the phrase is in translation memory. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> &ldquo;high&equals;mid&minus;1&quest;&rdquo; <highlight><bold>88</bold></highlight>. Since the phrase from word i to word mid was not in translation memory, the last word that could possibly end a phrase starting with i is word mid&minus;1, the new high. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> &ldquo;low&equals;mid&plus;1,&rdquo; &ldquo;e&equals;mid&rdquo; <highlight><bold>84</bold></highlight>. Since the phrase from word i to word mid was found in translation memory, the next phrase to try must end no earlier than mid&plus;1. P(i,mid) could be added to the list if no longer phrases are found starting with word i, so the algorithm sets e&equals;mid so that P(i,e) can be added to the list later. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the graphical user interface and the several databases that may be retrieved and viewed therein. These are only illustrative, and are not intended to be limiting in any way. Temporary database <highlight><bold>102</bold></highlight> is a local database existing on the workstation computer during a translation session and is displayed on the GUI <highlight><bold>100</bold></highlight>. As the user identifies previously translated text data from its source language to a target language, temporary database <highlight><bold>102</bold></highlight> stores and shows the user what is currently being translated. This information may then later be stored in a permanent database <highlight><bold>104</bold></highlight> if desired. Permanent database <highlight><bold>104</bold></highlight> may be stored on a hard drive or on a network drive. Permanent database <highlight><bold>104</bold></highlight> may also be queried so that the user may retrieve information from that database at any time during the translation session. For example, if a text data segment is being transferred, permanent database <highlight><bold>104</bold></highlight> may be accessed and shown on GUI <highlight><bold>100</bold></highlight> at any time. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Also displayable at any time on GUI <highlight><bold>100</bold></highlight> is terminology database <highlight><bold>106</bold></highlight> and the local translation software program database <highlight><bold>108</bold></highlight>, shown as a TRADOS&reg; database. These databases function as described above and are included in the discussion of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> to show their interaction with GUI <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> As an embodiment, the present invention may also comprise a partial sentence or phrase match window. This window would allow the translator to see each previously translated source language partial sentence in the context in which it existed in the database in which it was found. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a flowchart showing the life cycle of an identified previously translated partial sentence as it progresses from existing in a source document, to being identified as being previously translated, to ultimately being stored within the translation memory program. Each number in the figure represents a step in the process. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> First, a user may request a network or other translation memory database <highlight><bold>112</bold></highlight> and transfer this database to the workbench program <highlight><bold>114</bold></highlight> executed on the workstation. Within the workstation, a writeable text data application program is executed <highlight><bold>116</bold></highlight>. From the writeable text data application program, the partial sentence translation memory, containing the algorithm as described herein, and the workbench program may be executed <highlight><bold>118</bold></highlight>. This is preferably done using a series of macros to call the necessary functions, but may also be done using any known means in the art. In the writeable text data application program, text data may be entered <highlight><bold>120</bold></highlight>, wherein the text data is in a source language. From this source language, partial sentences may be identified and returned in a target language as a result of the partial sentence translation memory program or algorithm. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Once the text data is entered, a portion of the text data may be selected. This selected portion identifies and defines the text segment to be translated <highlight><bold>122</bold></highlight>. Once identified, the text segment may be operated upon by execution of the partial sentence translation memory of the present invention <highlight><bold>124</bold></highlight>. The partial sentence translation memory of the present invention identifies or determines, within the text segment, any partial sentences that have been previously translated by comparing the text segment to a database containing previously translated material. The partial sentence translation memory seeks out the longest partial sentences within the identified text segment that have been previously translated and returns these results to the translator or user. Once identified, these partial sentences and their translations in context are displayed to the translator, who can then transfer them, such as by copy and paste, into the text data application program <highlight><bold>126</bold></highlight>. Other text segments in the text data may be operated upon <highlight><bold>128</bold></highlight> using the same method and technique <highlight><bold>130</bold></highlight> until there are no longer any text segments left to translate in the source document. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Upon translating one or more of the text segments in the text data, these returned sentences in the target language may then be stored in a database <highlight><bold>132</bold></highlight> for later use. The database is typically a permanent database located on the user&apos;s hard drive. However, the database could also be stored on a network. Once stored, these translated sentences may be checked by the individual for correctness and accuracy <highlight><bold>134</bold></highlight>. If found satisfactory, these translated partial sentences can be uploaded to a network <highlight><bold>136</bold></highlight> where any number of individuals may access the translated material to assist them in subsequent translations of source works. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is illustrative of the inverse of the detailed technical flow chart representative of the detailed sequential steps performed by the partial sentence translation memory algorithm as described in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In short, the partial sentence translation memory program may be designed to operate in an inverse manner as taught and described in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> by beginning with the first word of the text segment and proceeding in subsequent iterations with the second word, the third word, and so on. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The present invention further features a computer readable medium containing instructions to direct a computer: (a) to interface with a pre-existing workbench application program stored and executable on a computer system, the workbench application program comprising at least one database of previously translated material; and (b) to operate on a text segment existing within a writeable text data application program, for the purpose of identifying or determining, within the text segment, any previously translated partial sentences, by identifying and translating the text segment based upon a partial sentence basis as compared with the database of previously translated material. The identification of previously translated partial sentences existing within the text segment comprises a first longest partial sentence, which ends with the last word in the text segment that has been previously translated, a second longest partial sentence in the text segment and begins with the word just preceding the first word in the first longest partial sentence, and a plurality of partial sentences, each beginning with a different word in the text segment. As stated above, the inverse of these may be achieved to accomplish the same results. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The present invention further features a program storage device readable by a computer tangibly embodying a program of instructions executable by the computer to perform method steps for determining partial sentences, existing within a text segment, that have been previously translated, the method comprising the steps of: (a) generating text data within a writeable application program, the text data comprising a plurality of text segments; (b) identifying at least one of the text segments; (c) executing a partial sentence translation memory on the computer system, the partial sentence translation memory optionally including a database of previously translated material; (d) interfacing the partial sentence translation memory with a workbench program comprising at least one database of previously translated material; and (e) operating on the at least one identified text segment, for the purpose identifying or determining any partial sentences contained in the text segment that have been previously translated, the operation completed either by (i) comparing the last word in the text segment with the workbench program to determine whether the last word has been previously translated, wherein if the last word has been previously translated then the last two words in the text segment are considered a partial sentence and the last two words are compared with the translation memory to determine whether they have been previously translated, wherein if the last two words have been previously translated then the last three words in the text segment are considered a partial sentence and the last three words are compared with the translation memory, wherein this process step continues until the longest previously translated partial sentence is determined, wherein the longest partial sentence is marked as having been previously translated; (ii) determining the longest partial sentence beginning with the word just prior to the beginning of the marked partial sentence by comparing the partial sentence with the translation memory; (iii) repeating the process of the previous step until the longest partial sentence, using each word in the text segment as a starting point, respectively, is determined; and (iv) returning the results to a graphical user interface; or (i) comparing the first word in the said text segment with one of said databases of previously translated material to determine whether said first word has been previously translated, wherein if said first word has been previously translated then the first two words in said text segment are considered a partial sentence and said first two words are compared with said translation memory to determine whether they have been previously translated, wherein if said first two words have been previously translated then the first three words in said text segment are considered a partial sentence and said first three words are compared with said translation memory, wherein this process step continues until the longest previously translated partial sentence is determined, wherein said longest partial sentence is marked as having been previously translated; (ii) determining the longest partial sentence ending with the word just after the end of said marked partial sentence by comparing said partial sentence with said translation memory; (iii) repeating the process of the previous step until the longest partial sentence, using each word in the said text segment as an ending point, respectively, is determined; and (iv) returning said results to a graphical user interface. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The above recited method may further comprise the step of storing the translations for later use. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The present invention finally features a computer readable memory medium including code for directing a computer to determine partial sentence translations, the computer readable memory medium comprising: (a) means for controlling the computer to receive and process text data in a writeable application program, the text data intended for translation; (b) means for controlling the computer to identify at least a portion of the text data to define a text segment; (c) means for controlling the computer to execute a partial sentence translation memory; (d) means for controlling the computer to interface the partial sentence translation memory with a workbench program comprising at least one database of previously translated material; and (e) means for controlling the computer to identify within the text segment any partial sentences that have been previously translated, the partial sentences determined by identifying a plurality of longest previously translated partial sentences as compared with the database of previously translated material. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims, rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A translation system comprising: 
<claim-text>a computerized workstation; </claim-text>
<claim-text>a workbench program executable on said computerized workstation; </claim-text>
<claim-text>a writeable text data software application program executable on said computerized workstation, said writeable text data application program containing text data to be translated; and </claim-text>
<claim-text>a partial sentence translation memory operable with said workbench program and said writeable text data software application program, said partial sentence translation memory comprised of computer-readable code that allows a user to determine, at a single glance, whether partial sentences within said text data have been previously translated by comparing said partial sentences with a database of previously translated material. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said database of previously translated material is contained within said partial sentence translation memory. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said partial sentence translation memory utilizes said database contained therein to determine whether said partial sentences have been previously translated. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said database of previously translated material is contained within said workbench program, said partial sentence translation memory utilizes said database contained within said workbench program to determine whether said partial sentences have been previously translated. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said partial sentence translation memory allows said user to identify a text segment of said text data of said source language and to determine which partial sentences within said text segment have been previously translated by comparing said partial sentences with said database. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said partial sentence translation memory ignores punctuation and capitalization. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said text data is selected from a group consisting of words, phrases, characters, and symbols. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said writeable text data software application program is selected from the group consisting of a word processor program, a spread sheet program, a presentations program, and any text program recognized by a computer. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The translation system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said text data is entered into said text data program using methods selected from the group consisting of typing, scanning, importing, FTP, and importing from a network program. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method for determining whether partial sentences of source text data have been previously translated, said method comprising the steps of: 
<claim-text>executing a workbench program on a computer system; </claim-text>
<claim-text>executing a writeable text data application program on said computer system, said writeable text data application program capable of interfacing with said workbench program; </claim-text>
<claim-text>entering text data, written in a source language, into said writeable text data application program, said text data comprising at least one text segment; </claim-text>
<claim-text>identifying said text segment to be operated upon; </claim-text>
<claim-text>accessing a partial sentence translation memory from said computer, said partial sentence translation memory interfacing with said workbench program and said writeable application program; </claim-text>
<claim-text>comparing said text segment with a database containing previously translated material to determine those partial sentences within said text segment that have been previously translated; and </claim-text>
<claim-text>displaying said partial sentence translations on said computer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said database of previously translated material is contained within said workbench program. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said database of previously translated material is contained within said partial sentence translation memory. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said step of comparing comprises the steps of: 
<claim-text>a) determining a first longest partial sentence translation in said text segment, wherein said first longest partial sentence translation ends with the last word in said text segment; </claim-text>
<claim-text>b) determining a second longest partial sentence translation, said second partial sentence translation starting with the word directly preceding the first word of said first longest partial sentence translation, said second partial sentence translation defining the longest partial sentence translation beginning with said word; and </claim-text>
<claim-text>c) repeating said step of comparing as often as necessary to obtain the longest partial sentence translation that starts with each word in said text segment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said step of comparing comprises the steps of: 
<claim-text>a) determining a first longest partial sentence translation in said text segment, wherein said first longest partial sentence translation starts with the first word in said text segment; </claim-text>
<claim-text>b) determining a second longest partial sentence translation, said second partial sentence translation ending with the word directly after the last word of said first longest partial sentence translation, said second partial sentence translation defining the longest partial sentence translation ending with said word; and </claim-text>
<claim-text>c) repeating said step of comparing as often as necessary to obtain the longest partial sentence translation that ends with each word in said text segment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as recited in either <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> or <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said steps are repeated as often as necessary for determining partial sentences from any number of identified text segment within said writeable text data application program. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising the step of storing said partial sentence translations in a database for later use. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said database is stored in a permanent database on said computer system. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said database is stored on a network. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer readable medium containing instructions to direct a computer: 
<claim-text>to interface with a pre-existing workbench application program stored and executable on a computer system, said workbench application program comprising at least one database of previously translated material; and </claim-text>
<claim-text>to operate on a text segment existing within a writeable text data application program, for the purpose of identifying, within said text segment, any previously translated partial sentences as determined by comparing, on a partial sentence basis, said text segment with said database of previously translated material. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said partial sentence comprises a first longest partial sentence, which ends with the last word in said text segment that has been previously translated. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said partial sentence is a second longest partial sentence in said text segment and begins with the word just preceding the first word in said first longest partial sentence. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said partial sentence comprises a plurality of partial sentences, each beginning with a different word in said text segment. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A program storage device readable by a computer tangibly embodying a program of instructions executable by said computer to perform method steps for identifying partial sentences, existing within a text segment, that have been previously translated, said method comprising the steps of: 
<claim-text>generating text data within a writeable application program, said text data comprising a plurality of text segments; </claim-text>
<claim-text>identifying at least one of said text segments; </claim-text>
<claim-text>executing a partial sentence translation memory on said computer system; </claim-text>
<claim-text>interfacing said partial sentence translation memory with a workbench program; and </claim-text>
<claim-text>operating on said at least one identified text segment, for the purpose of identifying any partial sentences contained in said text segment that have been previously translated, said operation completed by: 
<claim-text>comparing the last word in said text segment with a database of previously translated material to determine whether said last word has been previously translated, wherein if said last word has been previously translated then the last two words in said text segment are considered a partial sentence and said last two words are compared with said database to determine whether they have been previously translated, wherein if said last two words have been previously translated then the last three words in said text segment are considered a partial sentence and said last three words are compared with said database, wherein this process step continues until the longest previously translated partial sentence is determined, wherein said longest partial sentence is marked as having been previously translated; </claim-text>
<claim-text>determining the longest partial sentence beginning with the word just prior to the beginning of said marked partial sentence by comparing said partial sentence with said database; </claim-text>
<claim-text>repeating the process of the previous step until the longest partial sentence, using each word in said text segment as a starting point, respectively, is determined; and </claim-text>
<claim-text>returning said results to a graphical user interface. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising storing said partial sentence translations in said at least one database for later use. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein said database of previously translated material is contained within said workbench program. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein said database of previously translated material is contained within said partial sentence translation memory. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A program storage device readable by a computer tangibly embodying a program of instructions executable by said computer to perform method steps for identifying partial sentences, existing within a text segment, that have been previously translated, said method comprising the steps of: 
<claim-text>generating text data within a writeable application program, said text data comprising a plurality of text segments; </claim-text>
<claim-text>identifying at least one of said text segments; </claim-text>
<claim-text>executing a partial sentence translation memory on said computer system; </claim-text>
<claim-text>interfacing said partial sentence translation memory with a workbench program; and </claim-text>
<claim-text>operating on said at least one identified text segment, for the purpose of identifying any partial sentences contained in said text segment that have been previously translated, said operation completed by: 
<claim-text>comparing the first word in the said text segment with a database of previously translated material to determine whether said first word has been previously translated, wherein if said first word has been previously translated then the first two words in said text segment are considered a partial sentence and said first two words are compared with said database to determine whether they have been previously translated, wherein if said first two words have been previously translated then the first three words in said text segment are considered a partial sentence and said first three words are compared with said database, wherein this process step continues until the longest previously translated partial sentence is determined, wherein said longest partial sentence is marked as having been previously translated; </claim-text>
<claim-text>determining the longest partial sentence ending with the word just after the end of said marked partial sentence by comparing said partial sentence with said database; </claim-text>
<claim-text>repeating the process of the previous step until the longest partial sentence, using each word in the said text segment as an ending point, respectively, is determined; and </claim-text>
<claim-text>returning said results to a graphical user interface. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising storing said partial sentence translations in said at least one database for later use. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said database of previously translated material is contained within said workbench program. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said database of previously translated material is contained within said partial sentence translation memory. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A computer readable memory medium including code for directing a computer to identify partial sentence translations, said computer readable memory medium comprising: 
<claim-text>means for controlling said computer to receive and process text data in a writeable application program, said text data intended for translation; </claim-text>
<claim-text>means for controlling said computer to identify at least a portion of said text data to define a text segment; </claim-text>
<claim-text>means for controlling said computer to execute a partial sentence translation memory, optionally including at least one database of previously translated material; </claim-text>
<claim-text>means for controlling said computer to interface the said partial sentence translation memory with a workbench program comprising at least one database of previously translated material; and means for controlling said computer to identify, within said text segment, any partial sentences that have been previously translated, said partial sentences identified by determining a plurality of longest previously translated partial sentences as compared with one of said databases of previously translated material.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004702A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004702A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004702A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004702A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004702A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004702A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004702A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004702A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004702A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
