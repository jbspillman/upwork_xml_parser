<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005394A1-20030102-D00000.TIF SYSTEM "US20030005394A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005394A1-20030102-D00001.TIF SYSTEM "US20030005394A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005394A1-20030102-D00002.TIF SYSTEM "US20030005394A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005394</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09897817</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010629</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>716</class>
<subclass>004000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>I.C. cell and library identification</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Brent</given-name>
<family-name>Buchanan</family-name>
</name>
<residence>
<residence-us>
<city>Emerson</city>
<state>GA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Koninklijke Philips Electronics NV</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Corporate Patent Counsel</name-1>
<name-2>Philips Electronics North America Corporation</name-2>
<address>
<address-1>580 White Plains Road</address-1>
<city>Tarrytown</city>
<state>NY</state>
<postalcode>10591</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Apparatus, method and program product for evaluating design code of an integrated circuit. A program assigns an identifier to a cell based upon a cell characteristic. The program catalogs the identifier in a database configured to store and recall the identifier and characteristic along with additional properties that pertain to the cell. The program may associate the identifier or characteristic with a cell embedded in the design code. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to semiconductors, and more particularly to design and evaluation processes associated with the production of integrated circuits. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Manufacturers of semiconductors regard testing and evaluation processes as ubiquitous and indispensable to design and production operations. Semiconductors, also known as integrated circuits (I.C.) and computer chips, are tiny electronic circuits etched on silicon that electronically process, store and move information. As broadly discussed below, processes associated with semiconductor production involve substantial investment of economic and manpower resources. Consequently, it is advantageous to verify I.C. layout integrity prior to committing a design to silicon. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Manufacturers create an integrated circuit on the surface of a doped, polished silicon wafer. Production processes may employ diffusion, thin films, oxidation, photolithography, deposition and/or etching techniques to apply a first microscopic layer to the wafer. Designers configure multiple layers of polysilicon, silicon oxide, silicon nitride and metal to form a unique structure responsive to intended application and desired electrical characteristics. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> During a masking phase, a chip manufacturer delineates microscopic paths operable to carry electronic impulses throughout the semiconductor. More particularly, masking processes apply a light sensitive resist substance to the wafer. Manufacturers position a detailed mask of thousands of individual semiconductor circuits over the surface, and project lights onto the wafer. Surfaces left exposed by the mask are altered by the light, and a chemical wash reveals a new mask layer on the wafer. The process repeats for each desired layer, resulting in elaborate, miniaturized circuitry. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> An I.C. design file drives the masking processes. Program code within the file describes and defines mask parameters and specifications as read by the production equipment. Conventional formats for such files include Graphic Design System (GDS) and Caltech Intermediate Format (CIF). Design files comprise, in part, sequences of cell descriptions. Cells may be viewed as preprogrammed logical units that perform a distinct function. For instance, individual cells may comprise investors, capacitors, gates, oscillators and/or multiplexors. As such, the standard cells may be incorporated into multiple semiconductor designs. When incorporated into a file layout, design engineers integrate these individual cells with others to form a chip layer. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Parent libraries store individual cells along with others grouped by version or designer preference. In this manner, the libraries may act as a template or pallette from which designers may retrieve and apply component cells. As such, libraries make cells available for automatic placement and routing within a custom semiconductor layout. In practice, designers may use default cells from a most recent library version to populate I.C. design files. Other applications may require proprietary cells from more dated, particular libraries. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Once the masked layers are in place, manufacturers use diamond saws to section hundreds of chips from the wafer. The chip may then be encased in a plastic or ceramic shell with exposed connectors. The completed product may be tested once more and put through a &ldquo;burn-in&rdquo; or trial use process. Packaged chips that pass this final rigorous test are then installed into circuit boards and consumer products. Defective chips are discarded at a loss to the manufacturer. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Due to the complexities and costs inherent to the above manufacturing processes, it is extremely advantageous to detect errors prior to mask creation and application. However, typical I.C. design files may be marred with multiple instances of corruption. For example, faulty or otherwise obsolete cells may be erroneously incorporated or retained within a file. Left undiscovered, the inappropriate and broken processes borne of theses cells can propagate to production, ultimately translating into wasted resources. Additionally, other processes require identification of specific cells of interest, including those associated with license fees, unauthorized modifications and resource development. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Yet, in contrast to the highly automated environment responsible for chip layering, layout designers often must resort to manual evaluation of files prior to production. This labor and time intensive process tolerates error and inefficiency. Consequently, what is needed is an automated, efficient manner of identifying potentially, problematic cell structures within an I.C. design file. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The invention successfully incorporates computer-based technology to provide a systematic method, apparatus and program product for evaluating I.C. design code. One embodiment determines a cell characteristic for an unknown cell embedded within the design code by accessing a database of cell records. Each such cell record may be associated with a known cell having at least one cell characteristic. Exemplary cell characteristics may include a checksum value, a geometric property, a name, a time stamp, or some combination thereof. As such, the cell record may identify the cell characteristic of its associated, known cell. One embodiment may further compare the cell characteristic of the unknown cell with the cell characteristics stored in at least a subset of the cell records of the database. The embodiment may then output an identifier for a cell record having a cell characteristic that matches that of the unknown cell. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The above and other objects and advantages of the present invention shall be made apparent from the accompanying drawings and the description thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWING </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and, together with a general description of the invention given above, and the detailed description of the embodiments given below, serve to explain the principles of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a networked computer system consistent with the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary hardware and software environment for a computer from the networked computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow chart embodying one method of evaluating an I.C. design file within the environments of <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference>; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a logical structure for the database illustrated and applied in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight>; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic diagram illustrating an I.C. design file evaluation session and environment suited for executing the process steps of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> in a manner consistent with the principles of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> An embodiment of the present invention may include an apparatus, program product and computer-implemented method for evaluating design code for an integrated circuit. The embodiment may receive a request for a cell record that corresponds to a particular cell or cell grouping. The cell record may further be associated with one or more cell characteristics. Exemplary characteristics may regard the origin of cell, such as its creation date or parent library. One embodiment may sample and apply a cell characteristic from the design code to a database configured to store a plurality of identifiers. The database may further maintain a plurality of cell characteristics associated with the plurality of cell records. The embodiment may ultimately retrieve and output an identifier associated with the cell from the database. An environment suited for execution of such an embodiment is illustrated in <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference>. </paragraph>
<paragraph id="P-0019" lvl="7"><number>&lsqb;0019&rsqb;</number> Hardware and Software Environment </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Turning to the Drawings, wherein like numbers denote like parts throughout the several views, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system <highlight><bold>10</bold></highlight> suitable for evaluating an I.C. design file in a manner consistent with the invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Computer system <highlight><bold>10</bold></highlight> is illustrated as a networked computer system including one or more designer computers <highlight><bold>12</bold></highlight>, <highlight><bold>14</bold></highlight> and <highlight><bold>20</bold></highlight> (e.g., desktop or PC-based computers, workstations, etc.) coupled to server <highlight><bold>16</bold></highlight> (e.g., a PC-based server, a minicomputer, a midrange computer, a mainframe computer, etc.) through a network <highlight><bold>18</bold></highlight>. Network <highlight><bold>18</bold></highlight> represents a networked interconnection, including, but not limited to local-area, wide-area, wireless, and public networks (e.g., the Internet). Moreover, any number of computers and other devices may be networked through network <highlight><bold>18</bold></highlight>, e.g., multiple servers. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> User computer <highlight><bold>20</bold></highlight>, which may be similar to computers <highlight><bold>12</bold></highlight>, <highlight><bold>14</bold></highlight>, may include: a central processing unit (CPU) <highlight><bold>21</bold></highlight>, a number of peripheral components such as a computer display <highlight><bold>22</bold></highlight>, a storage device <highlight><bold>23</bold></highlight>, a printer <highlight><bold>24</bold></highlight>, and various input devices (e.g., a mouse <highlight><bold>26</bold></highlight> and keyboard <highlight><bold>27</bold></highlight>), among others. Server computer <highlight><bold>16</bold></highlight> may be similarly configured, albeit typically with greater processing performance and storage capacity, as is well known in the art. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a hardware and software environment for an apparatus <highlight><bold>30</bold></highlight> suitable for identifying cells within an I.C. design file in a manner consistent with the principles of the invention. In the embodiment, apparatus <highlight><bold>30</bold></highlight> may represent a computer, computer system or other programmable electronic device, including: a designer computer (e.g., similar to computers <highlight><bold>12</bold></highlight>, <highlight><bold>14</bold></highlight> and <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>), a server computer (e.g., similar to server <highlight><bold>16</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>), a portable computer, an embedded controller, etc. Apparatus <highlight><bold>30</bold></highlight> will hereinafter also be referred to as a &ldquo;computer,&rdquo; although it should be appreciated the term &ldquo;apparatus&rdquo; may also include other suitable programmable electronic devices consistent with the invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Computer <highlight><bold>30</bold></highlight> typically includes at least one processor <highlight><bold>31</bold></highlight> coupled to a memory <highlight><bold>32</bold></highlight>. Processor <highlight><bold>31</bold></highlight> may represent one or more processors (e.g., microprocessors), and memory <highlight><bold>32</bold></highlight> may represent the random access memory (RAM) devices comprising the main storage of computer <highlight><bold>30</bold></highlight>, as well as any supplemental levels of memory, e.g., cache memories, non-volatile or backup memories (e.g., programmable or flash memories), read-only memories, etc. In addition, memory <highlight><bold>32</bold></highlight> may be considered to include memory storage physically located elsewhere in computer <highlight><bold>30</bold></highlight>, e.g., any cache memory in a processor <highlight><bold>31</bold></highlight>, as well as any storage capacity used as a virtual memory, e.g., as stored within a cell database <highlight><bold>37</bold></highlight> or on another computer coupled to computer <highlight><bold>30</bold></highlight> via network <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Computer <highlight><bold>30</bold></highlight> also may receive a number of inputs and outputs for communicating information externally. For interface with a layout designer, computer <highlight><bold>30</bold></highlight> typically includes one or more input devices <highlight><bold>33</bold></highlight> (e.g., a keyboard, a mouse, a trackball, a joystick, a touchpad, and/or a microphone, among others) and a display <highlight><bold>34</bold></highlight> (e.g., a CRT monitor, an LCD display panel, and/or a speaker, among others). It should be appreciated, however, that with some implementations of computer <highlight><bold>30</bold></highlight>, e.g., some server implementations, direct user input and output may not be supported by the computer, and interface with the computer may be implemented through client computer or workstation networked with computer <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> For additional storage, computer <highlight><bold>30</bold></highlight> may also include one or more mass storage devices <highlight><bold>36</bold></highlight> configured to store a cell database <highlight><bold>37</bold></highlight> and/or cell library and compiler data. Exemplary devices <highlight><bold>36</bold></highlight> may include: a floppy or other removable disk drive, a hard disk drive, a direct access storage device (DASD), an optical drive (e.g., a CD drive, a DVD drive, etc.), and/or a tape drive, among others. Furthermore, computer <highlight><bold>30</bold></highlight> may include an interface with one or more networks <highlight><bold>38</bold></highlight> (e.g., a LAN, a WAN, a wireless network, and/or the Internet, among others) to permit the communication of information with other computers coupled to the network. It should be appreciated that computer <highlight><bold>30</bold></highlight> typically includes suitable analog and/or digital interfaces between processor <highlight><bold>31</bold></highlight> and each of components <highlight><bold>32</bold></highlight>, <highlight><bold>33</bold></highlight>, <highlight><bold>34</bold></highlight>, <highlight><bold>36</bold></highlight> and <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Computer <highlight><bold>30</bold></highlight> operates under the control of an operating system <highlight><bold>40</bold></highlight>, and executes various computer software applications, components, programs, objects, modules, etc. (e.g., cell evaluation program <highlight><bold>50</bold></highlight>, checksum program <highlight><bold>42</bold></highlight>, library report generator <highlight><bold>43</bold></highlight>, geometry-based comparison program <highlight><bold>45</bold></highlight>, among others). Moreover, various applications, components, programs, objects, modules, etc. may also execute on one or more processors in another computer coupled to computer <highlight><bold>30</bold></highlight> via a network <highlight><bold>38</bold></highlight>, e.g., in a distributed or client-server computing environment, whereby the processing required to implement the functions of a computer program may be allocated to multiple computers over a network. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In general, the routines executed to implement the embodiments of the invention, whether implemented as part of an operating system or a specific application, component, program, object, module or sequence of instructions will be referred to herein as &ldquo;computer programs&rdquo; or &ldquo;program code.&rdquo; The computer programs typically comprise one or more instructions that are resident at various times in various computer memory and storage devices. When a program is read and executed by a processor, the program causes the computer to execute steps or elements embodying the various aspects of the invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Moreover, while the invention has and hereinafter will be described in the context of fully functioning processors and computer systems, those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of forms, and that the invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include but are not limited to recordable type media such as volatile and non-volatile memory devices, floppy and other removable disks, hard disk drives, optical disks (e.g., CD-ROM&apos;s, DVD&apos;s, etc.), among others, and transmission type media such as digital and analog communication links. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Those skilled in the art will recognize that the exemplary environments illustrated in <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference> are not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative hardware and/or software environments may be used without departing from the scope of the invention. </paragraph>
</section>
<section>
<heading lvl="1">I.C. Design File Evaluation </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The flowchart of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an exemplary embodiment for evaluating an I.C. design file within the hardware and software environments of the first two figures. More specifically, the illustrated process steps use a cell characteristic to assign and identify a cell record. For purposes of one embodiment, a cell record may contain a cell identifier and at least one such cell characteristic. The computer-implemented method embodied in the flowchart catalogs an identifier in a database configured to store and recall it along with characteristics that pertain to the cell. Such characteristics may regard the origin of cell, such as its creation date or parent library. One embodiment ultimately associates the identifier or characteristic with a cell embedded in the design file. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Turning to block <highlight><bold>60</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an I.C. design file may arrive at a processor, such as the computer system <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The embodiment may not require the file to have a specific manufacturing syntax. However, exemplary formats may include CIF or GDS, which conventionally comprise a stream of binary bits that encode a sequence of records. Some of these records may relate to descriptions of logical units, or cells. The cells are standard electronic components that designers may integrate to create a semiconductor layer. In addition to cell descriptions, other structures within the design file may comprise instructional or bureaucratic header information. Such header data may be included for departmental or notational purposes by various programmers throughout a design process. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> At block <highlight><bold>62</bold></highlight>, the embodiment may sequentially sample all records contained in a file. For instance, a parser may relay a preset number of consecutive bits from the file into the register of a processor. The bit sequences, which encode the records, may then be processed and categorized as appropriate to a given application. For instance, one embodiment may concern itself solely with those file records that relate to a characteristic or processing instruction associated with a cell. As such, it may be advantageous to distinguish cell records from those header records that may be peripheral to the present application. For processing considerations, the embodiment may disregard superfluous header records, instead focusing on only those records that describe or contribute to cell structure. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Consequently, the embodiment may ascertain at block <highlight><bold>64</bold></highlight> whether a sampled record encodes a cell. Program code of the embodiment may assess the size, placement and/or sequence of registered bits to determine the nature of the record. Tags and other indicators programmed into the manufacturing code may further provide a means for distinguishing cell records from other header data. The program may continue to consecutively sample file records at block <highlight><bold>62</bold></highlight> until a cell structure is indicated at block <highlight><bold>64</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Should the embodiment detect at block <highlight><bold>64</bold></highlight> that a record is, in fact, a cell, characteristics of the cell may be evaluated at block <highlight><bold>66</bold></highlight>. For purposes of the invention, suitable cell characteristics may embody any property that relates or predictably describes a cell or cell function. The embodiment may evaluate and rely on a single such characteristic to unilaterally identify and/or categorize cells within the file. For example, the date that a cell was created may be identified as a distinguishing characteristic. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Alternatively or in addition, some applications may require the evaluation of multiple cell characteristics. Such an application may be appropriate where a number of cells within a file share one or more common characteristics. As such, a range of characteristics may form a unique compilation of properties sufficient to allow for identification. The scope of still another application may be steered by detected cell characteristics. As such, the embodiment may apply a hierarchical sequence of successive evaluations configured to sufficiently screen cells. For example, if a first characteristic indicates that a compiler created a cell, then the embodiment may additionally record a creation date to assist in determining the particular compiler of origin. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The focus of an evaluation process may further determine the type of cell characteristics upon which the embodiment will rely. For example, one application may require program code to uniquely identify a particular cell. More particularly, a designer may require the detection of a faulty or copyrighted cell that may have been incorporated into a design file. As such, a characteristic or set of characteristics unique to the particular cell may be applied and evaluated against each cell in the file. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Another application may call for an entire class of cells to be identified. A designer may initiate such an evaluation where an entire library is deemed inappropriate. In such a scenario, a characteristic unique to all the cells retrieved from the inappropriate, parent library may be employed as the evaluative characteristic. Where applicable, program code of the embodiment may utilize multiple cell characteristics as dictated by differing evaluation and processing requirements. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> One such characteristic may involve a unique, numerical value or signature. A preferred embodiment may use a checksum algorithm to arrive at such a mathematical fingerprint. For example, the embodiment may transmit 16 bits of a cell to an adder. The adder may sum the bits to arrive at number that is unique to the cell. Another embodiment may evaluate an entire cell string by dropping a least significant bit from the register, and then adding a next occurring bit to the accumulating value of the cell count. Variations and more sophisticated mathematical manipulations can produce more tailored applications and signatures. For instance, another embodiment may sum or multiply a sampling of the cell&apos;s most and least significant bits. As discussed below in more detail, such a checksum application can additionally prove useful in verifying the integrity of already identified cells. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Another embodiment may partially rely on descriptive data imputed onto cell records during progressive design stages. Such data may be purely descriptive in nature, including designer or corporate notation. Other data may reflect an automatic registration or other processes, such as a date/time stamp. Some I.C. manufacturing formats, including GDS, incorporate such time stamps that reflect the creation or modification date of a cell. The embodiment may capitalize on this notational feature by stripping the time stamp information out of the file at block <highlight><bold>66</bold></highlight>. As discussed below, such time stamps may present a viable means for establishing a unique cell identifier. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The extent and scope of time stamp utilization may depend, in part, upon the reliability and integrity of the particular stamping processes. For instance, where a certainty exists that the time stamps within a particular file have been consistently assigned and preserved, the time stamps may serve a role within an identification scheme of the embodiment. Program code may employ such time stamps as a means of determining other characteristics, such as the compiler or library where a cell originated. However, alterations and inconsistencies within a file may largely abrogate the utility of time stamps in the context of other applications. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Similarly, cell structures within a file may contain cell &ldquo;names,&rdquo; attributed by file designers. While such names may have effectively related to a cell during one step of a design process, reliance on such names as a means of identification may be impractical due to inconsistent and arbitrary name treatment. More specifically, iterations of programming may have largely diluted any meaningful or reliable association with the cell. For instance, designers routinely disassociate cells when they discard or repetitively modify such names throughout a single programming process. Designers may alter names for design purposes or for mere preference. Consequently, while such names may be compatible with an embodiment of the invention, they are generally insufficient to serve as a single characteristic capable of reliably identifying a cell. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Other applications may sample and evaluate geometric-based characteristics, such as the shape or metal content of a cell. While such exemplary characteristics may serve as a viable means of distinguishing and identifying some cells, the massive memory and processing requirements associated with geometric and measurement based programs may prove impractical or inefficient for many file applications. However, a sampling of partial or even full geometric characteristics may not prove preclusive in other processing efforts consistent with the embodiment. For instance, program code may maintain a database configured to compare geometric characteristics and derived data using commercially, available comparison programs. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Furthermore, geometric applications may be limited to second or third level evaluation cycles. That is, program code may restrict geometric applications to only those occurrences where threshold characteristics of a cell have already registered. For instance, in an effort designed to detect a cell containing a specific logo structure, the embodiment may reserve geometric comparisons for only those cells that first match a designated time stamp and checksum value. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The sampled characteristics may ultimately serve as a means of identifying a cell or collection of cells. Cell identification may require the characteristics to be compared to and associated with a plurality of recorded characteristics. The embodiment may store the recorded characteristics within the cell database. The database may additionally maintain a plurality of cell identifiers that uniquely correspond to one or more of the recorded cell characteristics. In this manner, the identifier may act as a means of uniquely designating a cell or group of cells having a particular characteristic or set of characteristics. At block <highlight><bold>68</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the embodiment may evaluate a sampled cell characteristic against the plurality of those maintained within such a cell database. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a database configured to maintain the characteristics sampled in block <highlight><bold>66</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> column <highlight><bold>82</bold></highlight> of exemplary cell characteristics occupy fields within the mapped database <highlight><bold>37</bold></highlight>. During evaluation, a suitable search algorithm <highlight><bold>86</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may match a database field <highlight><bold>92</bold></highlight> associated with a sampled cell characteristic <highlight><bold>88</bold></highlight>. The algorithm <highlight><bold>86</bold></highlight> may subsequently retrieve an identifier <highlight><bold>94</bold></highlight> associated with the characteristic field <highlight><bold>92</bold></highlight> from a column of identifier fields <highlight><bold>90</bold></highlight>. As discussed herein, an identifier may correspond to a cell on a one-to-one basis, as well as to a group of cells sharing a common characteristic or collection of characteristics. For instance, a particular application may prompt the search algorithm <highlight><bold>86</bold></highlight> to associate all cells having a common time stamp <highlight><bold>96</bold></highlight> with a single identifier <highlight><bold>98</bold></highlight>. Of note, an identifier field may be logically paired with one or more cell characteristics to comprise a cell record in one embodiment. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Conversely, several identifiers <highlight><bold>90</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may share common database associations with select characteristics <highlight><bold>82</bold></highlight>. Consequently, the embodiment may cause the algorithm <highlight><bold>86</bold></highlight> to access multiple characteristic fields <highlight><bold>82</bold></highlight> to distinguish from among such identifiers. Returning to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> common cell characteristic may prompt a program of the embodiment to sample additional characteristics from the cell at block <highlight><bold>66</bold></highlight>. The database may evaluate these additional characteristics in conjunction with the first to more accurately determine an applicable identifier. Again, while the identifier may be unique to the cell characteristic(s), it may nonetheless relate to multiple cells. Such may be the case where the characteristic describes a common library of origin. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Returning to the database of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, evaluation of certain characteristic fields may automatically prompt searches of additional fields. For example, the retrieval of a generic compiler field <highlight><bold>98</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may prompt program code to initiate the retrieval of time stamp <highlight><bold>96</bold></highlight> and production calendar <highlight><bold>100</bold></highlight> information to more particularly determine the compiler that created the cell. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The embodiment may populate the identifier fields of the database in a variety of ways. For example, the manner in which the database is populated may depend upon the source of the cell characteristics. For instance, processes required to access data derived from libraries may vary considerably from those needed to retrieve comparable data from compilers and other sources. More particularly, when recording characteristics from library-derived cells, the embodiment may receive files or reports generated from remote library design entities. The files may contain compatible identifiers that are preassigned to leaf or child cells. Other library reports may merely embody cell characteristics that a program of the embodiment can further process to assign an identifier. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Program code may initiate the automatic generation of such library reports, as well as the extraction of identifying information and characteristics. As such, the embodiment may scan and retrieve identifiers and related data from other databases containing library resources. Program code may incorporate this library data into the database for use in identifying presented cell structures. As discussed below in greater detail, identifiers may additionally be assigned and accumulated within the database as the embodiment processes cell characteristics conveyed in sampled design files. In any case, program code of the embodiment may cause the database to be populated with cataloged library cells and associated identifiers. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> While the relatively small number of library cells within a file may lend themselves to thorough evaluation, cells produced by compilers may present unique concerns. Compilers typically mass produce memory cells, such as dual output RAM, in response to specifications submitted by a designer. For instance, a designer may command a compiler to automatically design a cell having 512 memory locations, each containing 27 bits. The compiler may produce numerous conforming cells for the designer to incorporate into their layout. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The great number and variety associated with such compiler-originated cells can complicate storage of the actual cells within a single, comprehensive database. While such a database is compatible with the principles of the present invention, its absence would not preclude cell identification within one embodiment. A program of the embodiment may retrieve signatures for compiler cells through a prearranged scheme with the compiler designer, such as through an http channel transmission. In this manner, only certain cells produced by the compiler may be downloaded to the database. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Another embodiment may initiate the parallel production of a signature file that accompanies compiler cell output. The embodiment may configure and record a signature file such that its contents may be routinely extracted and processed. In this manner, the embodiment may import only relevant portions of the compiler signature file into the design database. As such, the signatures may be evaluated by direct comparison as discussed above. Still another embodiment may configure a compiler to produce and place an appropriate identifier into a portion of the I.C. design file. As such, a processor of the embodiment may extract the identifier for recordation within the database. In addition, the embodiment may actively compile occurrences of cells within the database at block <highlight><bold>76</bold></highlight> as design files are processed. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Should a cell characteristic of an evaluated cell match an identifier at block <highlight><bold>70</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, then a program of the embodiment may further evaluate the identifier at block <highlight><bold>72</bold></highlight>. Namely, program code may compare the identifier of the cell to that of a designated identifier. Such an identifier may be designated by a designer or control process for the purpose of locating a particular cell or cell group. For instance, a designer may wish to verify that a particular, defective cell is not included in a design layout. The designer may type in or otherwise indicate the identifier that corresponds to the defective cell. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> At block <highlight><bold>72</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, program code of the embodiment may compare the identifiers of the cells contained in the file with the designated identifier. Should a match be detected, the embodiment may output a notification to the designer at block <highlight><bold>74</bold></highlight>. The designer may substitute a suitable cell for the identified defective one, saving substantial productions costs. Similarly, an automated process may designate identifiers that correspond to cells associated with license fees or unauthorized modifications. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> An automatic process may additionally screen a design file for cells that originate from a particular library or compiler. Such an application may be useful in verifying that cells are retrieved from an appropriate library. For instance, while most cells may default to a most recent library version, a copyrighted cell may require an archived library. The embodiment may output the identifier of the cell so that the designer can ensure the proper library relationship. In this manner, the embodiment may evaluate commercial and functional aspects of the design file, diminishing the occurrence of inappropriate cells prior to production. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> A designer may alternatively designate a characteristic at block <highlight><bold>72</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. For instance, the designer may desire a listing of which cells in the file originated from a particular compiler. Another automated process may search all design files for cells associated with a particular library or time stamp. As above, the embodiment may search the cell database, only now program code may search cell characteristic fields of the database. The embodiment may output identifiers associated with located characteristic fields at block <highlight><bold>74</bold></highlight>. Thus, the embodiment allows the designer to initiate an evaluation of design files from the perspective of both an identifier and cell characteristic. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Should an unidentified cell be presented to the embodiment at block <highlight><bold>70</bold></highlight>, program code may initiate processes configured to record the cell&apos;s characteristics within the database. At block <highlight><bold>76</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the program may additionally assign and catalog an identifier to the cell. While the embodiment may manufacture and assign identifiers according to any common scheme, an identifier may correspond directly to the cell characteristic. For instance, program code may designate the checksum value sampled at block <highlight><bold>46</bold></highlight> as the cell&apos;s identifier. Of note, all cell characteristic fields derived from a cell may additionally be associated with the newly created and cataloged cell identifier. In this manner, the embodiment may passively accumulate its own record of cell characteristics by assigning and recording identifiers to cells as presented in files. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> As discussed above, cell characteristics sampled at block <highlight><bold>46</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> may now be recorded at block <highlight><bold>78</bold></highlight>. These characteristics may populate fields in the database along with additional properties extracted from the cell at block <highlight><bold>78</bold></highlight>. These additional characteristics may eclipse those characteristics searched at block <highlight><bold>46</bold></highlight>, accounting for other cell properties. Program protocol may initiate the sampling and storage of these additional cell characteristics within the database to anticipate future searches. As discussed above, the database may be configured such that the entry of particular characteristic fields cause program code to populate and automatically associate additional fields relating to the cell. For instance, a cell characteristic such as a time stamp may prompt the program to associate the field with a corresponding identifier and a listing of potential libraries. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> One embodiment may incorporate an additional step after block <highlight><bold>78</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> intended to notify designers of potentially mangled or otherwise corrupted cells. For instance, such a step could be useful in an application where a designer anticipates a majority of file cells are accounted for in the cell database. As such, the embodiment could output an warning to the designer coincident with the detection of an unidentified cell. More particularly, program code could initiate a notification every time an unknown checksum is encountered. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Similarly, a designer may initiate a global checksum operation to further reduce the occurrence of error. Such a step may embody the more conventional use of a checksum as an error-detection scheme. As such, the checksum algorithm may be applied to the cell to ensure the accompanying numerical value is the same. If a disparity is detected, a notification may cause a designer to verify that the cell corresponding to the new checksum is not corrupted. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> incorporates the database <highlight><bold>37</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 2 and 4</cross-reference> into a schematic block diagram suited for executing the process steps of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Generally, the database <highlight><bold>37</bold></highlight> is accessed by program code <highlight><bold>102</bold></highlight> configured to evaluate an I.C. design file <highlight><bold>104</bold></highlight>. Layout designers <highlight><bold>106</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>108</bold></highlight> may access the file <highlight><bold>104</bold></highlight> prior to the file&apos;s transmittal to production <highlight><bold>110</bold></highlight> at &ldquo;tape-out.&rdquo; The designers <highlight><bold>106</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>108</bold></highlight> may construct the file <highlight><bold>104</bold></highlight> from cells imported from various compilers <highlight><bold>112</bold></highlight>, <highlight><bold>114</bold></highlight> and libraries <highlight><bold>116</bold></highlight>, <highlight><bold>118</bold></highlight>, <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The I.C. design file <highlight><bold>104</bold></highlight> may employ CIF or GDS manufacturing syntax to encode cell descriptions. More particularly, the file <highlight><bold>104</bold></highlight> describes and defines mask parameters as read by the production equipment <highlight><bold>110</bold></highlight>. Designers <highlight><bold>106</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>108</bold></highlight> may access libraries <highlight><bold>116</bold></highlight>, <highlight><bold>118</bold></highlight>, <highlight><bold>120</bold></highlight> and compilers <highlight><bold>112</bold></highlight>, <highlight><bold>114</bold></highlight> to incorporate invertors, capacitors, gates, oscillators, multiplexors and/or other cells to construct a chip layer. Parent libraries <highlight><bold>116</bold></highlight>, <highlight><bold>118</bold></highlight>,<highlight><bold>120</bold></highlight> may store individual cells along with others grouped by version or designer preference. Designers <highlight><bold>106</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>108</bold></highlight> may use default cells from a most recent library version <highlight><bold>120</bold></highlight> to populate the I.C. design file <highlight><bold>104</bold></highlight> via any networked communication means contemplated in <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference>. Other applications may require proprietary cells from a more dated, particular library <highlight><bold>118</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Due to the complex dynamics inherent to a design process, a single I.C. design file may contain multiple error instances. For example, faulty or otherwise obsolete cells may be erroneously incorporated or retained within the design file <highlight><bold>104</bold></highlight>. Another included cell may be modified for another application by a designer <highlight><bold>107</bold></highlight> unauthorized to do so. Left undiscovered, these errors can mar production <highlight><bold>110</bold></highlight> and waste resources. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> One embodiment of the present invention mitigates the occurrence of these and other errors during an evaluation process. A processor may sequentially sample all records contained in a file <highlight><bold>104</bold></highlight> until a cell structure is detected. Program code <highlight><bold>102</bold></highlight> may then evaluate cell characteristics of the record. While such characteristics as time stamps and checksum values have been discussed in detail, suitable cell characteristics may embody any property that relates or predictably describes a cell or cell function. Program code <highlight><bold>102</bold></highlight> may evaluate and rely on one or more such characteristics to monitor cells within the file. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The goal of an evaluation procedure may dictate relevant characteristics. For example, one application may require program code <highlight><bold>102</bold></highlight> to identify a cell containing a required trademark. As such, a characteristic or set of characteristics unique to the particular cell may be applied and evaluated against each cell in the file <highlight><bold>104</bold></highlight>. Another application may call for the identification of an entire class of cells. A designer may initiate such an evaluation where an entire library <highlight><bold>116</bold></highlight> is suspect. As such, a characteristic unique to all cells retrieved from the defective parent library <highlight><bold>116</bold></highlight> are used for identification. Program code <highlight><bold>102</bold></highlight> may sample multiple cell characteristics as dictated by differing evaluation and processing requirements. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Program code <highlight><bold>102</bold></highlight> may ultimately compare a sampled cell characteristic against the plurality of those maintained within the cell database <highlight><bold>37</bold></highlight>. One such characteristic may involve a numerical signature or checksum value. Another embodiment may rely on a time stamp. Other applications may sample and evaluate geometric-based characteristics, such as the shape or metal content of a cell. In any case, the sampled characteristics may ultimately serve as a means of identifying a cell or collection of cells. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Of note, cell identification may require the characteristics to be compared to and associated with a plurality of recorded characteristics. The processor <highlight><bold>30</bold></highlight> may store the recorded characteristics within the cell database <highlight><bold>37</bold></highlight>. The database <highlight><bold>37</bold></highlight> may additionally maintain a plurality of identifiers that uniquely correspond to one or more of the recorded cell characteristics. In this manner, the identifier may act as a means of uniquely designating a cell or cell grouping having a particular characteristic or set of characteristics. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Program code <highlight><bold>102</bold></highlight> may populate fields of the database <highlight><bold>37</bold></highlight> by receiving files or reports generated from a library <highlight><bold>120</bold></highlight> or compiler <highlight><bold>112</bold></highlight>. The library reports may document cell characteristics that program code <highlight><bold>102</bold></highlight> may process to arrive at an identifier. Program code <highlight><bold>102</bold></highlight> may initiate the automatic generation of such reports, as well as the extraction of identifying information and characteristics. As such, the embodiment may scan and retrieve identifiers and related data from other databases containing library and/or compiler resources. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Program code <highlight><bold>102</bold></highlight> may match a located cell characteristic to an identifier. That identifier may then be evaluated against an identifier designated by a designer <highlight><bold>108</bold></highlight> for the purpose of locating a particular cell or cell group. For instance, a designer <highlight><bold>108</bold></highlight> may wish to locate any proprietary cells included in a design layout. Should an identifier match be detected, the program code <highlight><bold>102</bold></highlight> may output a notification to the designer <highlight><bold>108</bold></highlight>. Thus, the designer <highlight><bold>108</bold></highlight> may investigate the application of the proprietary cell prior to committing the design to silicon. Of note, program code <highlight><bold>102</bold></highlight> allows a designer <highlight><bold>108</bold></highlight> to direct an evaluation of the design file <highlight><bold>104</bold></highlight> from either the perspective of an identifier or cell characteristic. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Program code <highlight><bold>102</bold></highlight> may additionally screen a design file <highlight><bold>104</bold></highlight> for cells that originate from a particular library or compiler. Such an application may be useful for verifying that cells are retrieved from an appropriate library. For instance, while most cells may default to a most recent library version <highlight><bold>120</bold></highlight>, certain cells may erroneously point to an inappropriate or dated library <highlight><bold>116</bold></highlight>. By detecting file cells originating from the parent library <highlight><bold>116</bold></highlight>, the designer <highlight><bold>108</bold></highlight> may substitute a more appropriate cell, diminishing the occurrence of faulty cells prior to production. Cell characteristics of unidentified cells presented to the processor <highlight><bold>30</bold></highlight> may be recorded with the database <highlight><bold>37</bold></highlight>. Program code may additionally assign and record an identifier to the cell. Such data may be utilized during future evaluation sessions. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> While the present invention has been illustrated by a description of various embodiments and while these embodiments have been described in considerable detail, it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. Additional advantages and modifications will readily appear to those skilled in the art. The invention in its broader aspects is therefore not limited to the specific details, representative apparatus and method, and illustrative example shown and described. Accordingly, departures may be made from such details without departing from the spirit or scope of applicant&apos;s general inventive concept.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-implemented method for evaluating design code for an integrated circuit, the method comprising: 
<claim-text>determining a cell characteristic for an unknown cell defined in the design code; </claim-text>
<claim-text>attempting to identify the unknown cell by accessing a database of cell records, wherein each cell record is associated with a known cell having at least one cell characteristic, wherein each cell record identifies the cell characteristic of its associated known cell, and wherein accessing the database includes comparing the cell characteristic for the unknown cell with the cell characteristics stored in at least a subset of the cell records in the database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising outputting an identifier for a cell record having a cell characteristic that matches that of the unknown cell. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein determining the cell record includes processing a request that identifies the cell characteristic for the unknown cell. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cell characteristic is selected from among a group consisting of: a checksum value, a geometric property, a name, a time stamp, and a combination thereof. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising creating a new cell record within the database if the unknown cell is not identified. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An apparatus, comprising: 
<claim-text>a memory; </claim-text>
<claim-text>a database of cell records resident in the memory, wherein each cell record is associated with a known cell suitable for use in design code for an integrated circuit and having at least one cell characteristic, and wherein each cell record identifies the cell characteristic of its associated known cell; and </claim-text>
<claim-text>program code configured to attempt to identify an unknown cell defined within design code of an integrated circuit by accessing the database and comparing a cell characteristic for the unknown cell with the cell characteristics stored in at least a subset of the cell records in the database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the cell characteristic is selected from among a group consisting of: a checksum value, a geometric property, a name, a time stamp, and a combination thereof. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein program code initiates the creation of a new cell record within the database if the unknown cell is not known. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method of populating a database, the method comprising: 
<claim-text>scanning a file comprising design code that defines a plurality of cells; </claim-text>
<claim-text>creating a cell record within the database for an unknown cell of the plurality of cells defined within the file, wherein the cell record includes at least an identifier and a cell characteristic; </claim-text>
<claim-text>recording the cell characteristic within a first field of the database; </claim-text>
<claim-text>storing the cell identifier within a second field of the database, wherein the first and the second fields are logically associated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A program product, comprising: 
<claim-text>a program configured to identify an unknown cell defined within design code of an integrated circuit by accessing a database and comparing a cell characteristic for the unknown cell with a plurality of cell characteristics stored in at least a subset of a plurality of cell records maintained within the database, wherein each cell record is associated with a known cell suitable for use in design code for an integrated circuit and having at least one cell characteristic, and wherein each cell record identifies the cell characteristic of its associated known cell; and </claim-text>
<claim-text>a signal bearing medium bearing the program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the signal bearing medium includes a recordable medium. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The program product of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the signal bearing medium includes a transmission type medium.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005394A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005394A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005394A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
