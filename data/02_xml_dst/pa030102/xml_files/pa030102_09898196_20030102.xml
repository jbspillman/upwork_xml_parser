<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005042A1-20030102-D00000.TIF SYSTEM "US20030005042A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00001.TIF SYSTEM "US20030005042A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00002.TIF SYSTEM "US20030005042A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00003.TIF SYSTEM "US20030005042A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00004.TIF SYSTEM "US20030005042A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00005.TIF SYSTEM "US20030005042A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00006.TIF SYSTEM "US20030005042A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00007.TIF SYSTEM "US20030005042A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00008.TIF SYSTEM "US20030005042A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00009.TIF SYSTEM "US20030005042A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00010.TIF SYSTEM "US20030005042A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00011.TIF SYSTEM "US20030005042A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005042A1-20030102-D00012.TIF SYSTEM "US20030005042A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005042</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09898196</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010702</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and system for detecting aborted connections and modified documents from web server logs</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Magnus</given-name>
<family-name>Karlsson</family-name>
</name>
<residence>
<residence-us>
<city>Mountain View</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Ludmila</given-name>
<family-name>Cherkasova</family-name>
</name>
<residence>
<residence-us>
<city>Sunnyvale</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>HEWLETT-PACKARD COMPANY</name-1>
<name-2>Intellectual Property Administration</name-2>
<address>
<address-1>P.O. Box 272400</address-1>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80527-2400</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">One embodiment of the present invention provides a method for detecting client aborted connections from web access logs produced by web servers. The present embodiment utilizes the following two fields of the logs: the requested web document name and the number of bytes transferred by the web server of that requested document. Specifically, the present embodiment first determines the real size of the web document from the log information. Once determined, if another transferred bytes value is less than the real size, the document was either modified or the client aborted the connection. The present embodiment filters out the document modifications from the aborted connections by relying on the assumption that modifications to a document generate one change in transferred bytes followed by the same size for a time while an aborted connection will manifest itself as a one time change in the number of transferred bytes. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to the field of computers. More specifically, the present invention relates to the field of web servers and detecting aborted connections and/or modified documents. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND ART </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Computers and other electronic devices have become integral tools used in a wide variety of different applications, such as in finance and commercial transactions, computer-aided design and manufacturing, health care, telecommunication, education, etc. Computers along with other electronic devices are finding new applications as a result of advances in hardware technology and rapid development in software technology. Furthermore, the functionality of a computer system or other type of electronic device is dramatically enhanced by coupling these type of stand-alone devices together in order to form a networking environment. Within a networking environment, users may readily exchange files, share information stored on a common database, pool resources, and communicate via electronic mail (e-mail) and video teleconferencing. Furthermore, computers along with other types of electronic devices which are coupled to the Internet provide their users access to data and information from all over the world. Computer systems have become useful in many aspects of everyday life both for personal and business uses. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> It is appreciated that a computer (e.g., desktop or laptop) may be communicatively coupled to the Internet or other computers via wired or wireless technologies. For example, a telephone line may be attached to a serial communication (COM) port of a computer thereby enabling the computer to communicate with the Internet via wired technology. Furthermore, a Global System for Messaging (GSM) digital cellular phone may also be attached to a serial COM port of a computer thereby enabling the computer to wirelessly communicate with the Internet. Therefore, once the computer is communicatively coupled to the Internet using wired and/or wireless technologies, its user(s) may access web sites all over the world which provide a wide variety of information. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> However, there are disadvantages associated with some of the web sites of the Internet. For example, some web sites are unable to handle in a timely manner all of the web page requests that they receive from client computers. This lack of performance may be caused by the fact that the web sites may not have enough processing power thereby prolonging their response times. Given the prolonged response time of some web sites, computer users get impatient waiting for web content to completely download to their computers and they eventually hit the &ldquo;Stop&rdquo; button of their Internet browser thereby aborting the connection with the web site server. Therefore, one way to measure the quality of service of a web site server from a performance point of view is to determine its amount of aborted connections during a given period of time. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> There are difficulties associated with determining the amount of web server connections that were aborted by client computers. For example, one of the difficulties is that today&apos;s web servers currently do not keep track of aborted connections. However, in the past (and some may still be operating today) web servers detected their aborted connections at the operating system level and subsequently kept track of them. Some of the disadvantages with this approach is that it is not currently supported on all web servers (e.g., Apache, Netscape Lite, and others) and it also degrades the performance of its web servers. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One solution to enable today&apos;s web servers to keep track of aborted connections is to modify their web server application code. However, a disadvantage associated with this solution is that it involves a time consuming process that can be very costly to perform. Another disadvantage associated with this solution is that the extra logging of aborted connections degrades the performance of the web server. A further disadvantage associated with this solution is that a person has to have access to the web server application code otherwise he or she is not able to modify it in the first place. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Accordingly, a need exists for a method and system for detecting aborted connections of a web server that does not involve modify web server application code. Furthermore, a need exists for a method and system that accomplishes the above need and is not burdensome to implement, does not adversely affect web server performance, and is cost efficient. The present invention provides a method and system which accomplishes the above mentioned needs. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> For instance, one embodiment of the present invention provides a method for detecting client aborted connections from web access logs produced by web servers. The present embodiment utilizes the following two fields of the logs: the requested web document name and the number of bytes transferred by the web server of that requested document. Specifically, the present embodiment first determines the real size of the web document from the log information. Once determined, if another transferred bytes value is less than the real size, the document was either modified or the client aborted the connection. The present embodiment filters out the document modifications from the aborted connections by relying on the assumption that modifications to a document generate one change in transferred bytes followed by the same size for a time while an aborted connection will manifest itself as a one time change in the number of transferred bytes. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In another embodiment, the present invention includes a method for detecting an aborted connection from a log of a server. The method include the step of finding a file within the log that is static. Furthermore, the method includes the step of detecting the aborted connection utilizing the size of the file and a first data value of a plurality of data values of the log of the server. It should be understood that the plurality of data values correspond to data transferred by the server in response to requests for the file. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In yet another embodiment, the present invention includes a computer readable medium having computer readable code embodied therein for causing a computer to perform particular steps. Specifically, the computer readable medium causes the computer to perform the steps described within the previous paragraph. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> These and other advantages of the present invention will no doubt become obvious to those of ordinary skill in the art after having read the following detailed description of the preferred embodiments which are illustrated in the drawing figures. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary computer system used in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary network used in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> are a flowchart of steps performed in accordance with one embodiment of the present invention for detecting aborted connections and modified documents within a web access log produced by a web server. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a simplified exemplary web access log produced by a web server that may be utilized by an embodiment of the present invention to detect aborted connections and modified documents. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference> are a flowchart of steps performed in accordance with one embodiment of the present invention for detecting modified documents within a web access log produced by a web server. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> are a flowchart of steps performed in accordance with one embodiment of the present invention for detecting aborted connections within a web access log produced by a web server. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart of steps performed in accordance with another embodiment of the present invention for detecting aborted connections and modified documents within a web access log produced by a web server. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a graph illustrating the number of aborted connections and requests per day that the ESN-Europe web site experienced over an established time period. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a graph illustrating the number of aborted connections and requests per day that the Hewlett Packard (HP) Labs web site experienced over an established time period. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Reference will now be made in detail to the preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore, in the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be obvious to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Some portions of the detailed descriptions which follow are presented in terms of procedures, logic blocks, processing, and other symbolic representations of operations on data bits within a computer or digital system memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, logic block, process, etc., is herein, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these physical manipulations take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system or similar electronic computing device. For reasons of convenience, and with reference to common usage, these signals are referred to as bits, values, elements, symbols, characters, terms, numbers, or the like with reference to the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> It should be borne in mind, however, that all of these terms are to be interpreted as referencing physical manipulations and quantities and are merely convenient labels and are to be interpreted further in view of terms commonly used in the art. Unless specifically stated otherwise as apparent from the following discussions, it is understood that throughout discussions of the present invention, discussions utilizing terms such as &ldquo;finding&rdquo; or &ldquo;determining&rdquo; or &ldquo;detecting&rdquo; or &ldquo;outputting&rdquo; or &ldquo;transmitting&rdquo; or &ldquo;locating&rdquo; or &ldquo;storing&rdquo; or &ldquo;receiving&rdquo; or &ldquo;recognizing&rdquo; or &ldquo;utilizing&rdquo; or &ldquo;generating&rdquo; or &ldquo;providing&rdquo; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data. The data is represented as physical (electronic) quantities within the computer system&apos;s registers and memories and is transformed into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission, or display devices. </paragraph>
</section>
<section>
<heading lvl="1">Exemplary Hardware in Accordance with the Present Invention </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of one embodiment of an exemplary computer system <highlight><bold>100</bold></highlight> used in accordance with the present invention. It should be appreciated that system <highlight><bold>100</bold></highlight> is not strictly limited to be a computer system. As such, system <highlight><bold>100</bold></highlight> of the present embodiment is well suited to be any type of computing device (e.g., server computer, portable computing device, desktop computer, etc.). Within the following discussions of the present invention, certain processes and steps are discussed that are realized, in one embodiment, as a series of instructions (e.g., software program) that reside within computer readable memory units of computer system <highlight><bold>100</bold></highlight> and executed by a processor(s) of system <highlight><bold>100</bold></highlight>. When executed, the instructions cause computer <highlight><bold>100</bold></highlight> to perform specific actions and exhibit specific behavior which is described in detail below. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Computer system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> comprises an address/data bus <highlight><bold>110</bold></highlight> for communicating information, one or more central processors <highlight><bold>102</bold></highlight> coupled with bus <highlight><bold>110</bold></highlight> for processing information and instructions. Central processor unit <highlight><bold>102</bold></highlight> may be a microprocessor or any other type of processor. The computer <highlight><bold>100</bold></highlight> also includes data storage features such as a computer usable volatile memory unit <highlight><bold>104</bold></highlight> (e.g., random access memory, static RAM, dynamic RAM, etc.) coupled with bus <highlight><bold>110</bold></highlight> for storing information and instructions for central processor(s) <highlight><bold>102</bold></highlight>, a computer usable non-volatile memory unit <highlight><bold>106</bold></highlight> (e.g., read only memory, programmable ROM, flash memory, EPROM, EEPROM, etc.) coupled with bus <highlight><bold>110</bold></highlight> for storing static information and instructions for processor(s) <highlight><bold>102</bold></highlight>. System <highlight><bold>100</bold></highlight> also includes one or more signal generating and receiving devices <highlight><bold>108</bold></highlight> coupled with bus <highlight><bold>110</bold></highlight> for enabling system <highlight><bold>100</bold></highlight> to interface with other electronic devices and computer systems. The communication interface(s) <highlight><bold>108</bold></highlight> of the present embodiment may include wired and/or wireless communication technology. For example, within the present embodiment, the communication interface <highlight><bold>108</bold></highlight> is a serial communication port, but could also alternatively be any of a number of well known communication standards and protocols, e.g., Universal Serial Bus (USB), Ethernet, FireWire (IEEE 1394), parallel, small computer system interface (SCSI), infrared (IR) communication, Bluetooth wireless communication, broadband, and the like. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Optionally, computer system <highlight><bold>100</bold></highlight> can include an alphanumeric input device <highlight><bold>114</bold></highlight> including alphanumeric and function keys coupled to the bus <highlight><bold>110</bold></highlight> for communicating information and command selections to the central processor(s) <highlight><bold>102</bold></highlight>. The computer <highlight><bold>100</bold></highlight> can include an optional cursor control or cursor directing device <highlight><bold>116</bold></highlight> coupled to the bus <highlight><bold>110</bold></highlight> for communicating user input information and command selections to the central processor(s) <highlight><bold>102</bold></highlight>. The cursor directing device <highlight><bold>116</bold></highlight> can be implemented using a number of well known devices such as a mouse, a track-ball, a track-pad, an optical tracking device, a touch screen, etc. Alternatively, it is appreciated that a cursor can be directed and/or activated via input from the alphanumeric input device <highlight><bold>114</bold></highlight> using special keys and key sequence commands. The present embodiment is also well suited to directing a cursor by other means such as, for example, voice commands. The system <highlight><bold>100</bold></highlight> can also include a computer usable mass data storage device <highlight><bold>118</bold></highlight> such as a magnetic or optical disk and disk drive (e.g., hard drive or floppy diskette) coupled with bus <highlight><bold>110</bold></highlight> for storing information and instructions. An optional display device <highlight><bold>112</bold></highlight> is coupled to bus <highlight><bold>110</bold></highlight> of system <highlight><bold>100</bold></highlight> for displaying video and/or graphics. It should be appreciated that optional display device <highlight><bold>112</bold></highlight> may be a cathode ray tube (CRT), flat panel liquid crystal display (LCD), field emission display (FED), or any other display device suitable for displaying video and/or graphic images and alphanumeric characters recognizable to a user. </paragraph>
</section>
<section>
<heading lvl="1">Exemplary Network in Accordance with the Present Invention </heading>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary network <highlight><bold>200</bold></highlight> used in accordance with an embodiment of the present invention. For example, network <highlight><bold>200</bold></highlight> includes client devices <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight> that are requesting web documents from one or more web servers <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C which belong to the same web site. Each of the web servers <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C produces a web access log that contains all of the requests it receives from the clients (e.g., <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight>). As such, an embodiment of the present invention utilizes these web access logs in order to measure the performance of the web servers (e.g., <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C). Specifically, an embodiment of the present invention utilizes web access logs to measure the amount of aborted connections that the web servers encounter. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Network <highlight><bold>200</bold></highlight> includes web servers <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B and <highlight><bold>210</bold></highlight>C which are communicatively coupled to the Internet <highlight><bold>208</bold></highlight>. Additionally, client devices <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> and <highlight><bold>206</bold></highlight> are communicatively coupled to the Internet <highlight><bold>208</bold></highlight>. It should be appreciated that the devices of network <highlight><bold>200</bold></highlight> of the present embodiment are well suited to be coupled in a wide variety of implementations. For example, web servers <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B and <highlight><bold>210</bold></highlight>C and client devices <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> and <highlight><bold>206</bold></highlight> of network <highlight><bold>200</bold></highlight> may be coupled via coaxial cable, copper wire, fiber optics, the Internet <highlight><bold>208</bold></highlight>, wireless communication, and the like. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Within network <highlight><bold>200</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, it is understood that client devices <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight> may each be implemented in a manner similar to computer system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Moreover, servers <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C may be implemented in a variety ways in accordance with the present embodiment. For example, servers <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C of network <highlight><bold>200</bold></highlight> may be implemented in a manner similar to computer system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the servers <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C of network <highlight><bold>200</bold></highlight> are not strictly limited to such an implementation. It should be understood that network <highlight><bold>200</bold></highlight> is well suited to have any number of client devices (e.g., <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight>) along with any number of web servers (e.g., <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C) belonging to the same web site. </paragraph>
</section>
<section>
<heading lvl="1">Exemplary Operations in Accordance with the Present Invention </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> are a flowchart <highlight><bold>300</bold></highlight> of steps performed in accordance with one embodiment of the present invention for detecting aborted connections and modified documents from web access logs produced by a web server. Flowchart <highlight><bold>300</bold></highlight> includes processes of the present invention which, in one embodiment, are carried out by processors and electrical components under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside, for example, in data storage features such as computer usable volatile memory <highlight><bold>104</bold></highlight> and/or computer usable non-volatile memory <highlight><bold>106</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the computer readable and computer executable instructions may reside in any type of computer readable medium. Although specific steps are disclosed in flowchart <highlight><bold>300</bold></highlight>, such steps are exemplary. That is, the present invention is well suited to performing various other steps or variations of the steps recited in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>. Within the present embodiment, it should be appreciated that the steps of flowchart <highlight><bold>300</bold></highlight> may be performed by software or hardware or any combination of software and hardware. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> It should be appreciated that documents are stored in the form of files in a computer system. As such, the words &ldquo;document&rdquo; and &ldquo;file&rdquo; may be used interchangeably within the detailed description of embodiments of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> One of the motivations behind flowchart <highlight><bold>300</bold></highlight> is to provide a method to web service providers targeted at detecting potential performance bottlenecks on web sites. One way to measure the quality of service of a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) from a performance point of view is to measure its amount of aborted connections. The logic behind this being that if the web site is not fast enough, a client user will get impatient and hit the stop button of its browser, thus aborting the connection. Specifically, flowchart <highlight><bold>300</bold></highlight> is a method for detecting client aborted connections and modified web documents from the web access logs produced by web servers. The present embodiment utilizes the following two fields of web access logs: the requested web document name and the number of bytes transferred by the web server of that requested document. The present embodiment first determines the real size of the web document from the log information. Once determined, if another transferred bytes value within the log is less than the real size, the document was either modified or the client aborted the connection. The present embodiment distinguishes modified documents from the aborted connections within the web access log by relying on the assumption that modifications to a document generate one change in transferred bytes followed by the same size for a time while an aborted connection will manifest itself as a one time change in the number of transferred bytes. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> At step <highlight><bold>302</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the present embodiment examines a web access log produced by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B, or <highlight><bold>210</bold></highlight>C). It should be appreciated that the web access log of the present embodiment may be implemented in a wide variety of ways in accordance with the present invention. For example, a web access log of the present embodiment may be generated within a network (e.g., <highlight><bold>200</bold></highlight>) where a number of clients devices (e.g., <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight>) are requesting web documents from one or more web servers (e.g., <highlight><bold>210</bold></highlight>A-<highlight><bold>210</bold></highlight>C) which belong to the same web site. Each of the web servers may produce a web access log that is in the Common Access Log Format depicted below: </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> hostname - - &lsqb;dd/mm/yyyy:hh:mm:ss tz&rsqb; request status bytes </paragraph>
<paragraph id="P-0036" lvl="7"><number>&lsqb;0036&rsqb;</number> where &ldquo;dd/mm/yyyy:hh:mm:ss tz&rdquo; corresponds to the numerical representation of the date and time (with time zone) that a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) responded to a web file request from a client device (e.g., <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> or <highlight><bold>206</bold></highlight>). Specifically, the &ldquo;dd/mm/yyyy&rdquo; corresponds to the numerical representation of the date with the day (dd), month (mm), and year (yyyy) and the &ldquo;hh:mm:ss&rdquo; corresponds to the numerical representation of the time with the hours (hh), minutes (mm), and seconds (ss) together with the time zone (tz). It should be appreciated that a log entry such as the one shown above may be entered by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) into its web access log each time it responds to a web file request from any client device (e.g., <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> or <highlight><bold>206</bold></highlight>). </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Furthermore, a web access log of the present embodiment may contain all of the requests that were received by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) from any client devices (e.g., <highlight><bold>202</bold></highlight>-<highlight><bold>206</bold></highlight>) including the ones that were faulty or incurred some error on the server side. The requests labeled as &ldquo;successful&rdquo; in delivering a document within the web access log are the ones with the requested field set to GET and the status field set to 200. However, all of the GET-200s within a web access log are not successful in the real sense of the word. For example, if a client (e.g., <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> or <highlight><bold>206</bold></highlight>) aborts a connection, the web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) is still going to report this as a GET-200 since the server successfully delivered whatever portion of the web document before the client closed (aborted) the connection. In this case, the server is going to set the bytes field to the number of bytes it transferred before the connection was aborted. Moreover, the web access log of the present embodiment may contain one entry per client requested web document. Each entry may have a variety of fields about the client request, however, the fields that the present embodiment is mainly concerned with are the name of the requested web document and the number of bytes transferred by the web server in response to that request. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a simplified exemplary web access log <highlight><bold>400</bold></highlight> produced by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B, or <highlight><bold>210</bold></highlight>C) that may be utilized by the present embodiment to detect aborted connections and modified documents. Exemplary web access log <highlight><bold>400</bold></highlight> includes four different file names (e.g., &ldquo;index.html&rdquo;, &ldquo;story.html&rdquo;, &ldquo;design.html&rdquo;, and &ldquo;story2.html&rdquo;) along with the number of bytes transferred by the web server in response to each request received by the web server. Specifically, the transferred byte number adjacent to the file name was transferred first by the web server while the right most transferred byte number was transferred last. It is appreciated that the different file names of web access log <highlight><bold>400</bold></highlight> may be associated with files containing web content. It should be understood that the web access log <highlight><bold>400</bold></highlight> will be described in conjunction with flowchart <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In step <highlight><bold>304</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the present embodiment determines whether a file name encountered within the web access log is a dynamically generated file. If the present embodiment at step <highlight><bold>304</bold></highlight> determines that the file is dynamically generated, the present embodiment proceeds to step <highlight><bold>306</bold></highlight>. However, if the present embodiment at step <highlight><bold>304</bold></highlight> determines that the file is not dynamically generated (i.e., static), the present embodiment proceeds to step <highlight><bold>310</bold></highlight>. It should be understood that the present embodiment of flowchart <highlight><bold>300</bold></highlight> does not utilize dynamically generated files as they most often produce files with varying size which makes it hard to determine the actual size of the file. Instead, the present embodiment of flowchart <highlight><bold>300</bold></highlight> specifically utilizes static files of the web access log. Additionally, it is appreciated that the present embodiment at step <highlight><bold>304</bold></highlight> may determine whether a file is dynamically generated by using a wide variety of methods. For example, the present embodiment at step <highlight><bold>304</bold></highlight> may detect and filter dynamic files by parsing the suffix of the file. For example, the dynamic file suffixes may include &lsquo;.cgi&rsquo; for CGI-scripts, &lsquo;.pl&rsquo; for Perl, &lsquo;.jsp&rsquo;, and &lsquo;.asp&rsquo;. Furthermore, the present embodiment at step <highlight><bold>304</bold></highlight> may detect and filter dynamic files by checking for the suffix parameter marker &lsquo;&quest;&rsquo; because parameters are given to dynamically generated files or documents. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> At step <highlight><bold>306</bold></highlight>, the present embodiment determines whether the current file name is the last entry in the web access log of the web server. If the present embodiment determines that the current file is the last entry in the web access log of the web server at step <highlight><bold>306</bold></highlight>, the present embodiment proceeds to exit flowchart <highlight><bold>300</bold></highlight>. However, if the present embodiment determines that the current file is not the last entry in the web access log of the web server at step <highlight><bold>306</bold></highlight>, the present embodiment proceeds to step <highlight><bold>308</bold></highlight>. In step <highlight><bold>308</bold></highlight>, the present embodiment proceeds to the next file name in the web access log of the web server. Once step <highlight><bold>308</bold></highlight> is completed, the present embodiment proceeds to step <highlight><bold>304</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> At step <highlight><bold>310</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the present embodiment goes to the first transferred byte value corresponding to the current file. For example, if the present embodiment was dealing with the &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>), at step <highlight><bold>310</bold></highlight> the present embodiment would go to the first transferred byte value of 10 kB adjacently located to the file name. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In step <highlight><bold>312</bold></highlight>, the present embodiment determines whether the current transferred byte value (e.g., 10 kB) is equal to the previous transferred byte value. If the present embodiment determines that the current transferred byte value is not equal to the previous transferred byte value at step <highlight><bold>312</bold></highlight>, the present embodiment proceeds to step <highlight><bold>314</bold></highlight>. However, if the present embodiment determines that the current transferred byte value is equal to the previous transferred byte value at step <highlight><bold>312</bold></highlight>, the present embodiment proceeds to step <highlight><bold>318</bold></highlight>. It is understood that the previous transferred byte value may be stored within memory. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> It should be appreciated that the present embodiment associated with steps <highlight><bold>312</bold></highlight>-<highlight><bold>318</bold></highlight> is trying to determine what the actual size is of the current file using the transferred byte values. This size determination is referred to as the &ldquo;perceived size.&rdquo; That is, the perceived size is set (or established) by the present embodiment at steps <highlight><bold>312</bold></highlight>-<highlight><bold>318</bold></highlight> whenever a file has the same transferred byte size two references in a row. The logic behind this being that if the present embodiment observes the same number of transferred bytes for a web file two times in a row, it is probably the real size of the web file. Conversely, there is a high probability that an aborted connection will not have the same amount of transferred bytes two times in a row. Furthermore, it is appreciated that the present embodiment associated with steps <highlight><bold>312</bold></highlight>-<highlight><bold>318</bold></highlight> may set the &ldquo;perceived size&rdquo; of a file whenever the file has the same transferred byte size &ldquo;N&rdquo; references in a row, where &ldquo;N&rdquo; is greater than or equal to 2. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> For example, if the present embodiment associated with steps <highlight><bold>312</bold></highlight>-<highlight><bold>318</bold></highlight> was dealing with the &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>), the present embodiment starts with the first transferred byte value and it observes that there are two references in a row of the same transferred byte size (e.g., 10 kB). Therefore, the present embodiment sets the perceived size for the &ldquo;index.html&rdquo; file equal to 10 kB. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> It is appreciated that flowchart <highlight><bold>300</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> is well suited to be modified such the present embodiment enables the actual file sizes of the files contained within a web access log of a web server to be received from an external source (e.g., computer user, stored data, and the like) and subsequently stored for later use. In this manner, the present embodiment of flowchart <highlight><bold>300</bold></highlight> would not need to first determine the perceived size (e.g., actual size) of any file it encounters within the web access log. Instead, that information would be initially provided from an external source. It should be understood that this embodiment may become more complicated if any of the file sizes changed during the duration of the web access log analyzed. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> At step <highlight><bold>314</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the present embodiment determines whether the current transferred byte value is the last transferred byte value associated with the current file. If the present embodiment determines that the current transferred byte value is the last transferred byte value associated with the current file at step <highlight><bold>314</bold></highlight>, the present embodiment proceeds to step <highlight><bold>306</bold></highlight>. However, If the present embodiment determines that the current transferred byte value is not the last transferred byte value associated with the current file at step <highlight><bold>314</bold></highlight>, the present embodiment proceeds to step <highlight><bold>316</bold></highlight>. In step <highlight><bold>316</bold></highlight>, the present embodiment proceeds to the next transferred byte value associated with the current file. Once step <highlight><bold>316</bold></highlight> is completed, the present embodiment proceeds to step <highlight><bold>312</bold></highlight>. At step <highlight><bold>318</bold></highlight>, the present embodiment sets the perceived size value equal to the current transferred byte value. It is understood that the perceived size may be set by storing its value within memory. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In step <highlight><bold>320</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, the present embodiment returns to the first transferred byte value of the current file in the web access log. For example, if the present embodiment was dealing with the &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>), at step <highlight><bold>320</bold></highlight> the present embodiment would go to the first transferred byte value of 10 kB adjacently located to its file name. At step <highlight><bold>322</bold></highlight>, the present embodiment determines whether the current transferred byte value is equal to the perceived size of the file (e.g., &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>). If the present embodiment determines that the current transferred byte value (e.g., 6 kB) is not equal to the perceived size (e.g., 10 kB) at step <highlight><bold>322</bold></highlight>, the present embodiment proceeds to step <highlight><bold>328</bold></highlight>. However, if the present embodiment determines that the current transferred byte value (e.g., 10 kB) is equal to the perceived size (e.g., 10 kB) at step <highlight><bold>322</bold></highlight>, the present embodiment proceeds to step <highlight><bold>324</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In step <highlight><bold>324</bold></highlight>, the present embodiment determines whether the current transferred byte value is the last transferred byte value of the current file. If the present embodiment determines that the current transferred byte value is the last transferred byte value of the current file at step <highlight><bold>324</bold></highlight>, the present embodiment proceeds to step <highlight><bold>306</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. However, if the present embodiment determines that the current transferred byte value is not the last transferred byte value of the current file at step <highlight><bold>324</bold></highlight>, the present embodiment proceeds to step <highlight><bold>326</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. At step <highlight><bold>326</bold></highlight>, the present embodiment proceeds to the next transferred byte value of the current file. Once step <highlight><bold>326</bold></highlight> is completed, the present embodiment proceeds to step <highlight><bold>322</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In step <highlight><bold>328</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, the present embodiment determines whether the current transferred byte value is greater that the perceived size of the current file. If the present embodiment at step <highlight><bold>328</bold></highlight> determines that the current transferred byte value (e.g., 6 kB) is not greater that the perceived size (e.g., 10 kB) of the current file (e.g., &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>), the present embodiment proceeds to step <highlight><bold>330</bold></highlight>. However, if the present embodiment at step <highlight><bold>328</bold></highlight> determines that the current transferred byte value (e.g., 17 kB) is greater that the perceived size (e.g., 12 kB) of the current file (e.g., the &ldquo;story2.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>), the present embodiment proceeds to step <highlight><bold>340</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> It should be understood that a modified document of the present embodiment produces a constant change to the number of transferred bytes of the current document (or file) and will thus change the perceived size to the new size of the document, while an aborted connection of the present embodiment still will produce a random number of transferred bytes that are less than the perceived size. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In step <highlight><bold>340</bold></highlight>, the present embodiment increases a count that is associated with modified documents by the value of one indicating that a modified document has been discovered. It is understood that the modified documents count may be stored within memory. At step <highlight><bold>342</bold></highlight>, the present embodiment sets the perceived size of the current file equal to the current transferred byte value. It is understood that the perceived size may be set by storing its value within memory. Once step <highlight><bold>342</bold></highlight> is completed, the present embodiment proceeds to step <highlight><bold>324</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> At step <highlight><bold>330</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, the present embodiment increases a count that is associated with aborted connections by the value of one indicating that an aborted connection may have been discovered. It is understood that the aborted connections count maybe stored within memory. In step <highlight><bold>332</bold></highlight>, the present embodiment determines whether the current transferred byte value is the last transferred byte value of the current file (or document). If the present embodiment determines that the current transferred byte value is the last transferred byte value of the current file at step <highlight><bold>332</bold></highlight>, the present embodiment proceeds to step <highlight><bold>306</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. However, if the present embodiment determines that the current transferred byte value is not the last transferred byte value of the current file at step <highlight><bold>332</bold></highlight>, the present embodiment proceeds to step <highlight><bold>334</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> At step <highlight><bold>334</bold></highlight>, the present embodiment proceeds to the next transferred byte value of the current file in the web access log (e.g., <highlight><bold>400</bold></highlight>). In step <highlight><bold>336</bold></highlight>, the present embodiment determines whether the current transferred byte value is equal to the previous transferred byte value of the current file. If the present embodiment determines at step <highlight><bold>336</bold></highlight> that the current transferred byte value (e.g., 10 kB) is not equal to the previous transferred byte value (e.g., 6 kB) of the current file (e.g., &ldquo;index.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>), the present embodiment proceeds to the beginning of step <highlight><bold>322</bold></highlight>. However, if the present embodiment determines at step <highlight><bold>336</bold></highlight> that the current transferred byte value (e.g., 15 kB) is equal to the previous transferred byte value (e.g., 15 kB) of the current file (e.g., the &ldquo;design.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>), the present embodiment proceeds to step <highlight><bold>338</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> At step <highlight><bold>338</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, the present embodiment decreases the count associated with aborted connections by the value of one because the present embodiment determined that a modification had occurred instead of an aborted connection. It should be pointed out that the present embodiment of flowchart <highlight><bold>300</bold></highlight> defines a connection as aborted if the following holds: there is a perceived size set (or established) for a file; a transferred byte size (e.g., 7 kB) of the file (e.g., the &ldquo;story.html&rdquo; file of web access log <highlight><bold>400</bold></highlight>) in its log is less than the perceived size (e.g., 16 kB) of that file; the next transferred byte size (e.g., 4 kB) for this file is not the same size; and the file is not dynamically generated. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> It should be understood that flowchart <highlight><bold>300</bold></highlight> is well suited to be modified such that its functionality is performed during a single reading of the data stored within a web access log. For example, for every file encountered within the web access log, its perceived size and its last transferred byte value may be stored. In this manner, the aborted connection count, modified document count, and file information are handled as they are encountered within the web access log. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference> are a flowchart <highlight><bold>500</bold></highlight> of steps performed in accordance with one embodiment of the present invention for detecting modified documents within a web access log produced by a web server. Flowchart <highlight><bold>500</bold></highlight> includes processes of the present invention which, in one embodiment, are carried out by processors and electrical components under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside, for example, in data storage features such as computer usable volatile memory <highlight><bold>104</bold></highlight> and/or computer usable non-volatile memory <highlight><bold>106</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the computer readable and computer executable instructions may reside in any type of computer readable medium. Although specific steps are disclosed in flowchart <highlight><bold>500</bold></highlight>, such steps are exemplary. That is, the present invention is well suited to performing various other steps or variations of the steps recited in <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference>. Within the present embodiment, it should be appreciated that the steps of flowchart <highlight><bold>500</bold></highlight> may be performed by software or hardware or any combination of software and hardware. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> It is understood that steps <highlight><bold>302</bold></highlight>-<highlight><bold>328</bold></highlight>, <highlight><bold>332</bold></highlight>-<highlight><bold>336</bold></highlight>, <highlight><bold>340</bold></highlight> and <highlight><bold>342</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference> are similar to steps <highlight><bold>302</bold></highlight>-<highlight><bold>328</bold></highlight>, <highlight><bold>332</bold></highlight>-<highlight><bold>336</bold></highlight>, <highlight><bold>340</bold></highlight> and <highlight><bold>342</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> described above. However, if the present embodiment at step <highlight><bold>328</bold></highlight> determines that the current transferred byte value is not greater that the perceived size of the current file, the present embodiment proceeds to step <highlight><bold>332</bold></highlight>. Furthermore, if the present embodiment determines at step <highlight><bold>336</bold></highlight> that the current transferred byte value is equal to the previous transferred byte value of the current file, the present embodiment proceeds to step <highlight><bold>340</bold></highlight>. In this manner, the present embodiment keeps track of modified documents but does not keep tract of aborted connections. Therefore, flowchart <highlight><bold>500</bold></highlight> illustrates steps performed in accordance with one embodiment of the present invention for detecting modified documents within a web access log (e.g., <highlight><bold>400</bold></highlight>) produced by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B, or <highlight><bold>210</bold></highlight>C). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> are a flowchart <highlight><bold>600</bold></highlight> of steps performed in accordance with one embodiment of the present invention for detecting aborted connections within a web access log produced by a web server. Flowchart <highlight><bold>600</bold></highlight> includes processes of the present invention which, in one embodiment, are carried out by processors and electrical components under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside, for example, in data storage features such as computer usable volatile memory <highlight><bold>104</bold></highlight> and/or computer usable non-volatile memory <highlight><bold>106</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the computer readable and computer executable instructions may reside in any type of computer readable medium. Although specific steps are disclosed in flowchart <highlight><bold>600</bold></highlight>, such steps are exemplary. That is, the present invention is well suited to performing various other steps or variations of the steps recited in <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>. Within the present embodiment, it should be appreciated that the steps of flowchart <highlight><bold>600</bold></highlight> may be performed by software or hardware or any combination of software and hardware. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> It is understood that steps <highlight><bold>302</bold></highlight>-<highlight><bold>338</bold></highlight>, and <highlight><bold>342</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> are similar to steps <highlight><bold>302</bold></highlight>-<highlight><bold>338</bold></highlight>, and <highlight><bold>342</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> described above. However, if the present embodiment at step <highlight><bold>328</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> determines that the current transferred byte value is greater that the perceived size of the current file, the present embodiment proceeds to step <highlight><bold>342</bold></highlight>. Furthermore, once step <highlight><bold>338</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> is completed, the present embodiment proceeds to step <highlight><bold>342</bold></highlight>. In this manner, the present embodiment keeps track of aborted connections but does not keep tract of modified documents. As such, flowchart <highlight><bold>600</bold></highlight> illustrates steps performed in accordance with one embodiment of the present invention for detecting aborted connections within a web access log (e.g., <highlight><bold>400</bold></highlight>) produced by a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B, or <highlight><bold>210</bold></highlight>C). </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart <highlight><bold>700</bold></highlight> of steps performed in accordance with one embodiment of the present invention for detecting aborted connections and modified documents from web access logs produced by a web server. Flowchart <highlight><bold>700</bold></highlight> includes processes of the present invention which, in one embodiment, are carried out by processors and electrical components under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside, for example, in data storage features such as computer usable volatile memory <highlight><bold>104</bold></highlight> and/or computer usable non-volatile memory <highlight><bold>106</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, the computer readable and computer executable instructions may reside in any type of computer readable medium. Although specific steps are disclosed in flowchart <highlight><bold>700</bold></highlight>, such steps are exemplary. That is, the present invention is well suited to performing various other steps or variations of the steps recited in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Within the present embodiment, it should be appreciated that the steps of flowchart <highlight><bold>700</bold></highlight> may be performed by software or hardware or any combination of software and hardware. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In step <highlight><bold>702</bold></highlight>, the present embodiment finds a static file within a web access log (e.g., <highlight><bold>400</bold></highlight>) associated with a web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C). It is appreciated that the present embodiment may determine if a file is static in step <highlight><bold>702</bold></highlight> by utilizing any of the techniques described above. At step <highlight><bold>704</bold></highlight>, the present embodiment determines the actual size of the static file. It is understood that the present embodiment may determine the actual size of the static file by utilizing any of the techniques described above. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> At step <highlight><bold>706</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the present embodiment detects the aborted connections of the file by utilizing the size of the file and a transferred byte value of the web access log. It is understood that the transferred byte value corresponds to the amount of data transferred by the web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C) in response to a request for the file by a client device (e.g., <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight> or <highlight><bold>206</bold></highlight>). The present embodiment may detect the aborted connections of the file by utilizing any of the techniques described above. For example, the present embodiment may detect an aborted connection if the file size is larger than a first transferred byte value and the size of a subsequent second transferred byte value is not equal to the value of the first transferred byte value. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> In step <highlight><bold>708</bold></highlight>, the present embodiment detects that the file of the web access log has been modified by utilizing the size of the file and a transferred byte value of the web access log. The present embodiment may detect that the file of the web access log has been modified by utilizing any of the techniques described above. For example, if the present embodiment detects that the transferred byte value is greater than the size of the file, the present embodiment may conclude that the file has been modified. Additionally, if the present embodiment detects that a first transferred byte value is less than the size of the file and a subsequent second transferred byte value is equal to the first transferred byte value, the present embodiment may conclude that the file has been modified. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> It should be appreciated that step <highlight><bold>708</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> does not have to be performed after step <highlight><bold>706</bold></highlight> as shown. That is, the order that steps <highlight><bold>706</bold></highlight> and <highlight><bold>708</bold></highlight> are performed may be modified in accordance with the present embodiment. Furthermore, it should be understood that the functionality of flowchart <highlight><bold>700</bold></highlight> may be performed for every file encountered within the web access log (e.g., <highlight><bold>400</bold></highlight>) of the web server (e.g., <highlight><bold>210</bold></highlight>A, <highlight><bold>210</bold></highlight>B or <highlight><bold>210</bold></highlight>C). </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a graph <highlight><bold>800</bold></highlight> illustrating the number of aborted connections and requests per day that the ESN-Europe web site experienced over an established time period. Graph <highlight><bold>800</bold></highlight> may be produced utilizing information gathered by an embodiment of the present invention. For example, flowchart <highlight><bold>600</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 6A</cross-reference> and <highlight><bold>6</bold></highlight>B may have been utilized to determine the amount of aborted connections that occurred each day from web access logs produced by one or more web servers of the ESN-Europe web site. It is important to note that graph <highlight><bold>800</bold></highlight> shows that as the requests that the ESN-Europe web site received per day increased, the aborted connections also increased. So when the demand was high, the web server(s) of the ESN-Europe web site are not able to respond quickly to the requests and the client users are aborting their connections. Conversely, when the demand is low, the web server(s) of the ESN-Europe web site are able to handle the requests and so the aborted connections are also low. As such, a conclusion can be made that the server(s) of the ESN-Europe web site are clearly to blame for the aborted connections. It is important to note that the number of aborted connections in graph <highlight><bold>800</bold></highlight> is scaled up 200 times for easier reference. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a graph <highlight><bold>900</bold></highlight> illustrating the number of aborted connections and requests per day that the Hewlett Packard (HP) Labs web site experienced over an established time period. Graph <highlight><bold>900</bold></highlight> may also be produced utilizing information gathered by an embodiment of the present invention. For example, flowchart <highlight><bold>300</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> may have been utilized to determine the amount of aborted connections that occurred each day from web access logs produced by one or more web servers of the HP Labs web site. It is important to note that graph <highlight><bold>900</bold></highlight> shows that there is nearly no correlation between the number of requests per day that the HP Labs web site received and its number of aborted connections. Specifically, there is a constant number (more or less) of aborted connections over the days observed. Therefore, the conclusion can be made that the web server(s) of the HP Labs web site are not to blame for the aborted connections. It is important to note that the number of aborted connections in graph <highlight><bold>900</bold></highlight> is scaled up 100 times for easier reference. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Accordingly, the present invention provides a method and system for detecting aborted connections of a web server that is able to function across different web server platforms and does not involve modify web server application code. Furthermore, the present invention also provides a method and system which satisfies the above accomplishments and is not burdensome to implement. Additionally, the present invention also provides a method and system which satisfies the above accomplishments and does not adversely affect web server performance and is cost efficient. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for detecting an aborted connection from a log of a server, said method comprising the steps of: 
<claim-text>(a) finding a file within said log that is static; and </claim-text>
<claim-text>(b) detecting said aborted connection utilizing the size of said file and a first data value of a plurality of data values of said log of said server, wherein said plurality of data values correspond to data transferred by said server in response to requests for said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said server comprises a web server. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said file comprises web content. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file within said log that is static by parsing a suffix of the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file within said log that is static by identifying that a parameter is associated with the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step (b) further comprises the step of: 
<claim-text>detecting said aborted connection utilizing the size of said file and said first data value, wherein the size of said first data value is less than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step (b) further comprises the step of: 
<claim-text>detecting said aborted connection utilizing the size of said file and said first data value, wherein the size of said first data value is less than the size of said file and the size of a subsequent second data value is not equal to the size of said first data value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>(c) detecting said file has been modified utilizing the size of said file and a second data value of said plurality of data values. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said step (c) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and said second data value, wherein the size of said second data value is greater than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said step (c) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and said second data value, wherein the size of said second data value is less than the size of said file and the size of a subsequent third data value is equal to the size of said second data value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method for detecting an aborted connection from a log of a server, said method comprising the steps of: 
<claim-text>(a) finding a file within said log that is static; </claim-text>
<claim-text>(b) determining the size of said file by utilizing a plurality of data values of said log that correspond to data transferred by said server in response to requests for said file; and </claim-text>
<claim-text>(c) detecting said aborted connection utilizing the size of said file and a first data value of said plurality of data values of said log of said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said server comprises a web server. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said file comprises web content. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file within said log that is static by parsing a suffix of the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file within said log that is static by determining that a parameter is associated with the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said step (b) further comprises the step of: 
<claim-text>determining the size of said file by utilizing a first data value and a second data value of said plurality of data values, wherein the size of said first data value is equal to the size of the second data value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said step (c) further comprises the step of: 
<claim-text>detecting said aborted connection utilizing the size of said file and said first data value of said plurality of data values, wherein the size of said first data value is less than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> further comprising the step of: 
<claim-text>(d) detecting said file has been modified utilizing the size of said file and the size of a second data value of said plurality of data values. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein said step (d) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and the size of said second data value, wherein the size of said second data value is greater than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method as described in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein said step (d) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and the size of said second data value, wherein the size of said second data value is less than the size of said file and the size of a subsequent third data value of said plurality of data values is equal to the size of said second data value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer readable medium having computer readable code embodied therein for causing a computer to perform particular steps of: 
<claim-text>(a) finding a file that is static within a log of a server; and </claim-text>
<claim-text>(b) detecting said aborted connection utilizing the size of said file and a first data value of a plurality of data values of said log of said server, wherein said plurality of data values correspond to data transferred by said server in response to requests for said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said server comprises a web server. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said file comprises web content. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file that is static within said log by parsing a suffix of the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said step (a) further comprises the step of: 
<claim-text>finding said file that is static within said log by identifying that a parameter is associated with the name of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said step (b) further comprises the step of: 
<claim-text>detecting said aborted connection utilizing the size of said file and said first data value, wherein the size of said first data value is less than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said step (b) further comprises the step of: 
<claim-text>detecting said aborted connection utilizing the size of said file and said first data value, wherein the size of said first data value is less than the size of said file and the size of a subsequent second data value is not equal to the size of said first data value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further comprising the step of: 
<claim-text>(c) detecting said file has been modified utilizing the size of said file and a second data value of said log of said server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said step (c) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and a second data value, wherein the size of said second data value is greater than the size of said file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer readable medium as described in <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference> wherein said step (c) further comprises: 
<claim-text>detecting said file has been modified utilizing the size of said file and a second data value, wherein the size of said second data value is less than the size of said file and the size of a subsequent third data value is equal to the size of said second data value.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005042A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005042A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005042A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005042A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005042A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005042A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005042A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005042A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005042A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005042A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005042A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005042A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005042A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
