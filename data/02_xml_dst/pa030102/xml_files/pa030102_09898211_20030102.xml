<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002494A1-20030102-D00000.TIF SYSTEM "US20030002494A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00001.TIF SYSTEM "US20030002494A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00002.TIF SYSTEM "US20030002494A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00003.TIF SYSTEM "US20030002494A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00004.TIF SYSTEM "US20030002494A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00005.TIF SYSTEM "US20030002494A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002494A1-20030102-D00006.TIF SYSTEM "US20030002494A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002494</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09898211</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010702</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L012/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>386000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>370</class>
<subclass>389000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Processing of data packets within a network element cluster</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Arttu</given-name>
<family-name>Kuukankorpi</family-name>
</name>
<residence>
<residence-non-us>
<city>Helsinki</city>
<country-code>FI</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Joni</given-name>
<family-name>Pajarinen</family-name>
</name>
<residence>
<residence-non-us>
<city>Espoo</city>
<country-code>FI</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Christian</given-name>
<family-name>Jalio</family-name>
</name>
<residence>
<residence-non-us>
<city>Espoo</city>
<country-code>FI</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Marko</given-name>
<family-name>Nippula</family-name>
</name>
<residence>
<residence-non-us>
<city>Espoo</city>
<country-code>FI</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FALK AND FISH</name-1>
<name-2></name-2>
<address>
<address-1>16590 OAK VIEW CIRCLE</address-1>
<city>MORGAN HILL</city>
<state>CA</state>
<postalcode>95037</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Processing of data packets within a network element cluster having a plurality of network element nodes is described. The network element cluster has a cluster network address common to said plurality of nodes. Distribution decisions are determined for first data packets, a first data packet being a data packet initiating opening of a packet data connection to said cluster network address, according to predetermined criteria. For each node of the network element cluster those first data packets, which are to be processed in said particular node, are selected according to the distribution decisions. Node-specific lists about opened packet data connections for which a node is responsible are maintained, and using these node-specific lists second data packets, which are data packets relating to any opened packet data connection specified in a node-specific list, are processed. For each node of the network element cluster those second data packets, which relate to connections on the node-specific list of said particular node, are selected for processing. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates to methods for distributing data packets of communication connections to nodes in network element clusters and to network element clusters, where such methods are applied. Especially, the invention is related to such a method as specified in the preamble of the independent method claim. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The public networks are presently being used more and more for sensitive and mission critical communications and the internal networks of various organisations and enterprises are nowadays connected to the public networks, Internet being one of them. Since the basic mechanisms of the public networks were originally not designed with secrecy and confidentiality in mind, public networks are untrusted networks. To protect an internal network, a special network element is usually used to connect the internal network to a public network. Typically such network element monitors the connections traversing the network element and possibly modifies the data packets of the connections according to predetermined rules. Methods such as network address translation (NAT) and protocol conversions are methods requiring that the data packets are modified in such network elements. Also other modifications on the data packets traversing the network element may be performed. This kind of network element is often called a security gateway or a firewall. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> To ensure sufficient capacity of a firewall or a server, it is common to construct them as clusters of typically identical network elements. The identical or similar network elements forming a cluster are usually called nodes. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates two examples of network element clusters. A security gateway or a firewall connecting a network <highlight><bold>13</bold></highlight> to a second network <highlight><bold>10</bold></highlight> is a cluster <highlight><bold>14</bold></highlight> of network elements <highlight><bold>15</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>15</bold></highlight><highlight><italic>c</italic></highlight>. As a comparison, network <highlight><bold>11</bold></highlight> is connected to the network <highlight><bold>10</bold></highlight> using single network element <highlight><bold>12</bold></highlight>. A second example is a server cluster <highlight><bold>17</bold></highlight> having server nodes <highlight><bold>18</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>18</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>18</bold></highlight><highlight><italic>c</italic></highlight>. As a comparison, a server <highlight><bold>16</bold></highlight> is also presented in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A cluster of network elements such as servers or firewalls includes typically a plurality of similar nodes. The nodes have a common network address, hereafter called a cluster network address, and connections are typically directed to the cluster by means of this cluster network address. Additionally, the nodes may have node-specific network addresses. In a cluster, where nodes have a common cluster network address, all nodes see all data packets arriving at the cluster and there has to be an arrangement for distinguishing which data packets belong to which node. That is, each node should process only those packets that are assigned to it and ignore other data packets. Therefore the data packets arriving at the cluster need to be distributed to different nodes of the cluster. Typically distributing is done so that every node filters all arriving data packets and decides for example on the basis of the plaintext header field(s) of the packet whether that particular node needs to process that particular packet. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Connections directed to a cluster of network elements are directed to different nodes of the cluster on the basis of predefined distribution criteria. An example of distribution criteria is use of hash functions: node-specific sets of hash values are allocated to the nodes and a hash value for a data packet is calculated using a predetermined hash function and certain header fields of the data packet. Typically the header fields that are used for calculating hash values for TCP/IP (Transfer Control Protocol/Internet Protocol) or for UDP/IP (User Datagram Protocol/Internet Protocol) are source address, source port, destination address and destination port. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> When a data packet directed to the cluster network address arrives at the cluster, a hash value is calculated on the basis of some header fields of the data packet, and the resulting hash value defines which node processes the data packet. Typically, all nodes filter all arriving data packets by calculating hash values for them, and then decide on the basis of the hash values the data packets which belong to them. Also some other method than calculating hash may be used for distributing data packets. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Consider, as an example, server cluster <highlight><bold>17</bold></highlight> having two nodes <highlight><bold>18</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>18</bold></highlight><highlight><italic>b </italic></highlight>and the following situation, where distribution decision are made using a hash function. The employed range of hash values is, for example, A-F. Hash values A, B and C are allocated to node <highlight><bold>18</bold></highlight><highlight><italic>a </italic></highlight>and hash values D, E and F are allocated to node <highlight><bold>18</bold></highlight><highlight><italic>b</italic></highlight>. Connections are directed to the nodes <highlight><bold>18</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>18</bold></highlight><highlight><italic>b </italic></highlight>on the basis of hash values calculated for incoming packets. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> For ensuring reliable operation it is typically required that all data packets of one connection, for example TCP connection, are handled by the same node. Otherwise the connection may fail. The header fields used in calculating hash values for data packets are selected so that data packets of a packet data connection have same header field values. Every data packet of one connection has same source address, source port, destination address and destination port, and therefore these header fields are often used. All data packets of a certain packet data connection result in hash value C, for example, and a data packet resulting in hash value C are always directed to node <highlight><bold>18</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Problems arise, if the hash values need to be reallocated dynamically within the nodes of the cluster <highlight><bold>17</bold></highlight>, for example because a new node <highlight><bold>18</bold></highlight><highlight><italic>c </italic></highlight>is added to the cluster <highlight><bold>17</bold></highlight>. Other reasons for reallocating the hash values may be for example load balancing or a node starting a procedure to go offline. Consider the above mentioned connection with hash value C handled in the node <highlight><bold>18</bold></highlight><highlight><italic>a</italic></highlight>. If node <highlight><bold>18</bold></highlight><highlight><italic>c </italic></highlight>is added to the cluster <highlight><bold>17</bold></highlight> and hash values are reallocated so that hash values A and B belong to the node <highlight><bold>18</bold></highlight><highlight><italic>a</italic></highlight>, hash values C and D belong to the node <highlight><bold>18</bold></highlight><highlight><italic>b </italic></highlight>and respectively hash values E and F belong to die node <highlight><bold>18</bold></highlight><highlight><italic>c</italic></highlight>, the hash value C does not belong to the node <highlight><bold>18</bold></highlight><highlight><italic>a </italic></highlight>anymore. Thus data packets of the connection, which is used here as an example, are not directed to the node <highlight><bold>18</bold></highlight><highlight><italic>a </italic></highlight>anymore, and the connection fails. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Clustering functionality is typically implemented by means of separate clustering module, which is typically software running in the same device (computer) with the application to be clustered. Clustering module and the application to be clustered are running on top of some operating system (OS). <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates the server cluster <highlight><bold>17</bold></highlight> in more detail. The gateway or firewall cluster <highlight><bold>14</bold></highlight> may be implemented in a similar manner. In the server cluster <highlight><bold>17</bold></highlight>, each node <highlight><bold>18</bold></highlight> comprises operating system <highlight><bold>20</bold></highlight> and the clustered application <highlight><bold>22</bold></highlight>. The operating system may be divided into lower level and higher level portions <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>20</bold></highlight><highlight><italic>b</italic></highlight>. For example, the higher level may include IP, TCP and UDP functionality and the lower level may include network interface. Furthermore, the nodes may include a firewall component <highlight><bold>23</bold></highlight>. The clustered application may be, for example, WWW- or WAP-server application. Typically these programs <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight> are similar in each node <highlight><bold>18</bold></highlight>, and the clustered application <highlight><bold>22</bold></highlight> does not need be aware of the clustering; the application <highlight><bold>22</bold></highlight> runs independently in each node. The clustering software <highlight><bold>21</bold></highlight> is responsible for distributing the arriving data packets to the clustered application in the correct node. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> An object of the invention is to realize such a method for processing data packets within a network element cluster, which allows flexible load sharing and balancing between the nodes of a network element cluster and provides enhanced reliability for packet data connections. A further object is to present a node of a network element cluster and a network element cluster, where flexible load balancing and load sharing is possible. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The invention is characterized by that which is specified in the appended independent claims. The appended dependent claims describe some preferred embodiments of the invention. The features described in one dependent claim may be further combined with features described in another dependent claim to produce further embodiments of the invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In a method in accordance with the invention, node-specific lists of connections, for which each node of a cluster is responsible, are maintained. A data packet, which initiates opening of a new connection, is processed in a node determined by a distribution decision according to predetermined criteria. These first data packets are thus distributed to the cluster nodes. A data packet, which relates to an opened packet data connection, is processed in that node in whose connection list the opened packet data connection is specified. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Determining distribution decisions and determining in which node a data packet is processed may be implemented, for example, by using a hash function. Advantageously, to each node in a network element cluster is allocated a separate set of hash values, hash values are calculated for data packets using certain fields of a data packet. The data packets, for which distribution decisions are determined, are processed in nodes of the network element cluster according to the calculated hash values. Various different hash functions may be used, as is known to a man skilled in the art. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> By maintaining the node-specific lists of opened packet data connections it is possible to update the predetermined distribution criteria typically without loosing any connections. Even in a situation, where the predetermined distribution criteria are updated and the node-specific hash value ranges, for example, change, a node continues to process those data packets, which relate to opened packet data connections in the node-specific connection list. As long as a packet data connection is on a node-specific list, the corresponding node processes the data packets relating to this packet data connection&mdash;irrespective of the hash values allocated to that node (or other updated distribution criteria). </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One advantage of the invention is thus that is allows updating the distribution criteria without typically loosing any opened packet data connections. A further advantage is that it allows gracious shut down of a node in a cluster. In a shut down situation, typically first the distribution criteria are modified so that a node does not obtain any new packet data connections. Thereafter the node is kept operational until the packet data connections in its connection list are closed. Once the last packet data connection, for which the node is responsible, is closed, the node may be shut down without disturbing packet data connections. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The reason for changing the distribution criteria may be, for example, that the load is not in balance between the nodes, a new node is added to the cluster or a node is to be removed from the cluster.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Various embodiments of the invention will be described in detail below, by way of example only, with reference to the accompanying drawing, which </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates examples of network element clusters, </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates schematically clustering program for a node in a network element cluster, </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates as an example a flowchart of a method according to the invention, schematically examples of data packets and header fields, which are suitable for use in accordance with the invention, </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates as an example a flowchart of a method according to a first preferred embodiment of the invention, </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates as an example a flowchart of a method according to a second preferred embodiment of the invention, </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates schematically a first example of a cluster of network elements in accordance with the invention, </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates schematically a second example of a cluster of network elements according to the invention, the network elements in said cluster being network elements in accordance with the invention, </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates schematically an example a network element in accordance with the invention, and </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates schematically clustering software in accordance with the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference> are discussed in more detail above in connection with the prior art description. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Typically the fields of data packets that are used for determining distribution decisions are header fields, but also other fields may be used. Hash functions are widely used for determining distribution decisions and distributing data packets. Advantageously, to each node in a network element cluster is allocated a separate, node-specific set of hash values; hash values are calculated for data packets using certain fields of data packets; and such data packets, which initiate opening of packet data connections, are distributed to nodes of the network element cluster according to the calculated hash values. Hash functions are described in more detail later in this document, and the invention is described in conjunction with hash functions. Nevertheless, the invention is not limited to only the use of hash functions, but also other suitable functions may be used. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Said predetermined criteria are typically information about what information in data packets is used for determining distribution decisions and about how this information is used. Information about hash function to be used and/or the field(s) of data packets to be used may be included. The predetermined criteria also typically indicate the way in which a range of hash values is allocated to nodes as node-specific hash value sets. As discussed above, in many cases it is advantageous to reallocate the node-specific hash value sets, that is, to update the predetermined criteria. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> A hash function h is a function mapping a certain domain to a certain range, where the size of the range is typically much less than the size of the domain. A typical feature of a hash function is that it distributes input values, which are close to each other in the domain, evenly to the range. Therefore small changes in the input values may result in large changes in the corresponding hash values. In this description the domain and range typically consist of integer numbers, and the size of the domain is typically 2<highlight><superscript>M </superscript></highlight>and the size of the range is typically 2<highlight><superscript>N</superscript></highlight>. The range size is typically selected so that 2<highlight><superscript>N </superscript></highlight>is considerably larger than the number of nodes in a network element cluster. This way the hash function provides load sharing between the nodes of the network element cluster. For example, 256 hash values (i.e. N&equals;8) may be suitable for a few nodes in a network element cluster. Also a smaller amount of hash values may be sufficient. Hash functions or other functions suitable for making distribution decisions are known to a man skilled in the art. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In the following, several embodiments for implementing the invention are described. The embodiments are described as examples only and any corresponding solution for implementing the invention may be used. Accordingly features of any embodiment may be combined with features of some other embodiment. It is clear from the wide range of different embodiments of the invention that the invention can be applied in various ways, and that only some possibilities are described herein. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a method <highlight><bold>300</bold></highlight> according to the invention. When a data packet, which initiates opening of a packet data connection, arrives at the network element cluster, a distribution decision is determined in step <highlight><bold>301</bold></highlight> for the data packet according to predetermined criteria. Thereafter data packets to be processed in each node of the network element cluster are selected in step <highlight><bold>302</bold></highlight> from the data packets initiating opening of a packet data connection. This selection is performed according to the distribution decisions determined for the data packets. Node-specific lists about opened packet data connections for which a node is responsible are maintained in step <highlight><bold>303</bold></highlight>. Data packets for each node of the network element cluster are selected in step <highlight><bold>304</bold></highlight> from data packets relating to opened packet data connections specified in node-specific lists. These data packets are processed in that node, in whose node-specific list the opened packet data connection is specified. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Term node-specific connection list does not refer to any specific data structure. A node-specific connection list may be implemented as any suitable data structure. It may be, for example, a table or an ordered list. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Typically a connection list is a data structure having an entry corresponding to each opened packet data connection. An entry specifying an opened packet data connection typically comprises values of some data packet header fields, which identify data packets relating to a certain packet data connection. Typically these header fields are the destination address, source address, destination port and source port. It is possible to use alternatively or additionally also other header fields. By comparing header fields of a data packet, which is not a data packet initiating opening of a new packet data connection, to the entries in a node-specific connection list it is easy to determine, if that node is responsible for processing the arriving data packet. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Typically an entry specifying a packet data connection is added to a node-specific connection list, which may be any suitable data structure when a data packet initiating the opening of the packet data connection is received in a network element cluster. It is necessary that obsolete entries are removed from a node-specific connection list, otherwise the connection lists grow uncontrollably. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> One way of removing obsolete entries is to refresh the node-specific connection list every now and then, for example every 30 seconds. The refresh process may be triggered by a timer and for the time of the refresh typically no new connections are accepted. The refresh is done by obtaining information about tie currently open connections from the operating system and using this information for constructing a new node-specific connection list, which replaces the previous connection list. The operating system, and more specifically, the higher portion <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>of the operating system in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, maintains a list of open connections. Thus obtaining a list of current connection from the operating system results in replacing the connection list of the clustering module with a list of currently open connections and discarding possible old connections. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> This approach causes problems, if the application to be clustered resides at a lower level than the portion of the operating system maintaining the list of currently open connections and alters the identifiers of a packet data connection. In that case the list of current connections maintained in the operating system may contain different information from the node-specific connection list of the clustering module. This is the case especially with proxy-type firewall applications. For example, some firewalls modify the destination address field of data packets in order to direct the data packets to the firewall&apos;s proxy. The address in the operating system&apos;s list of current connections is the modified address, but the clustering module sees the original destination address. Thus this destination address field appears to be different in the operating system&apos;s list and in the clustering module&apos;s list. Any changes by the application that modify identifiers of a connection (that is header fields of data packets relating to a connection) will cause a connection to be cut when the refresh takes place. The reason for this is that an incoming packet from a particular connection cannot be identified as a connection of the handling node, because the refresh has yielded different information. Regarding the common four header fields (source and destination addresses and source and destination ports) used for identifying connections, this solution works, if only one identifier is modified and it is known which of the identifiers is modified. In this case it is possible to identify connections by only three of the four identifiers. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Additionally, obtaining the list of current connections from an operating system is operating system dependent. Furthermore, clustering modules are typically also clustered application-specific, due to some applications modifying some fields of the data packets and some applications modifying some other fields. This way of maintaining a list of opened packet data connections is thus applicable typically in some specific situations. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an example of a second solution of maintaining node-specific opened connections lists: a flowchart of a method according to a first preferred embodiment of the invention. Here at least incoming data packets, which relate to already opened packet data connections, are monitored to detect at least data packets relating to closing of a packet data connection. It may be advantageous to monitor data packets flowing in both directions, e.g. data packets to and from a client, as a closing dialog may be initiated typically by either of the connection end points. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Consider, as an example, a TCP connection. A data packet initiating the opening of a TCP connection is a SYN packet, and a data packet relating to the closing of a TCP connection is either a FIN packet or a RST packet. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> An entry in a connection list may further comprise information indicating a status of an opened packet data connection. The status of a connections may be, for example, OPENING, ESTABLISHED or CLOSING. When an entry is made to the connection list on the basis of a data packet initiating the opening of a packet data connection, the status field of the entry may be set to OPENING. When a first regular data packet relating to the same packet data connection is received, the status of the corresponding entry in a connection list may set to ESTABLISHED. When a data packet relating to the closing of an opened packet data connection is received the status of the corresponding entry in a connection list may set to CLOSING. Advantageously the predetermined time periods for removing an entry from connection list may be status specific. For updating status information in a connection list, typically all incoming data packets are monitored and it is checked if these data packets change the status of an opened connection. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> For determining the status of a connection, also the packets that are going out from the network node may be used. For example, the outgoing data packets may be used for verifying that the status of the connection was interpreted correctly on the basis of the incoming data packets. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Connections which are lost or cut&mdash;and which therefore are not closed with a proper closing dialog&mdash;are advantageously removed from node-specific connection lists by timeouts. This means, for example, that each entry in a connection list contains information about the arrival time of the latest data packet relating to the opened packet data connection. It is possible that the arrival time is indicated in the entry, and when the time lapsed since that latest arrival time exceeds a predetermined threshold, the entry is removed from the node-specific connection list. The arrival times in the entries may be check, for example, periodically. In this case, the timing information indicates indirectly how long an opened packet data connection is still valid. Alternatively, it is possible to indicate directly the threshold in an entry. In this case, it is possible to decrease the timing information in entries periodically and when timing information in an entry reaches zero, for example, the entry is removed from the node-specific connections list. Timing information in this case indicates directly how long an opened packet data connection is still valid. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In method <highlight><bold>400</bold></highlight> an arriving data packet is received in step <highlight><bold>401</bold></highlight>. It is first checked in step <highlight><bold>402</bold></highlight>, if the arriving data packet is a data packet initiating the opening of a packet data connection. If it is, then a distribution decision is determined in step <highlight><bold>301</bold></highlight> for the data packet, the data packet is selected to be processed in a node specified by the distribution decision, and an entry specifying the opened packet data connection is added in step <highlight><bold>403</bold></highlight> to the node-specific connections list of the proper node. This step <highlight><bold>403</bold></highlight> forms part of maintaining node-specific connection lists. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> If the arriving data packet is not a data packet initiating opening of a packet data connection, it is checked in step <highlight><bold>404</bold></highlight>, if the data packet is a data packet relating to one of the opened connections. If it is not, the data packet may be discarded (step <highlight><bold>405</bold></highlight>). If the data packet relates to one of the opened connections, it is checked in step <highlight><bold>406</bold></highlight> if it is a data packet changing the status of the relating packet data connection. In other words, data packets, which do not initiate opening of a packet data connection, are monitored in step <highlight><bold>406</bold></highlight>. If the data packet causes the status of the connection to change to CLOSING, an existing corresponding entry is removed in step <highlight><bold>407</bold></highlight> from a node-specific connection list. If the data packet otherwise changes the status of the packet data connection, status information and timing information for determining how long an entry is valid is updated in a corresponding connection list entry in step <highlight><bold>409</bold></highlight>. If the data packet does not cause a change to the status of the packet data connection, timing information is updated in step <highlight><bold>408</bold></highlight>. Thereafter a node for processing the data packet is determined in step <highlight><bold>408</bold></highlight>. The node is that node, in whose node-specific connection list the connection is specified, and step <highlight><bold>408</bold></highlight> forms part of step <highlight><bold>304</bold></highlight>, </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Consider, for example, TCP data packets. A data packet initiating the opening of a TCP connection is a SYN packet and a closing data packet is either a FIN or RST packet. Further consider an example, where the threshold time period since the arrival of the latest data packet for removing the entry is used as timing information. Advantageously, the time value associated with OPENING is shorter than the value associated with ESTABLISHED in order to avoid the possibility to maliciously overload the clustering modules with a large amount of entries corresponding to SYN packets. When a connection is established it is safer to maintain each entry for a longer time in the connection lists. When a FIN or RST packet is received the entry&apos;s status is changed to CLOSING with a shorter CLOSING timeout. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Method <highlight><bold>400</bold></highlight> may alternatively be such that only data packets relating to closing of a packet data connection are looked for in step <highlight><bold>406</bold></highlight>. In this case step <highlight><bold>409</bold></highlight> is not needed. Furthermore, it is possible that the data packets, which do not initiate opening of a packet data connection, are not monitored. In this case steps <highlight><bold>406</bold></highlight>, <highlight><bold>407</bold></highlight> and <highlight><bold>409</bold></highlight> are not needed; only timing information is updated in step <highlight><bold>410</bold></highlight>. Entries from the connection lists are removed as specified by a timeout. Method <highlight><bold>400</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> typically is in many situations more applicable than these simpler modifications, which&mdash;on the other hand&mdash;may require a bit less processing capacity. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> A further solution for removing obsolete entries from the node-specific connection lists is described next. In this solution, the obsolete entries are removed after a certain&mdash;advantageously status-specific&mdash;time period since the arrival of the latest data packet has elapsed. The data packets may be monitored for allowing the time period for removing an entry be status-specific. If it is sufficient to use a constant time period, there is no need to monitor data packets, which do not initiate packet data connections, in this solution. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a flowchart of such a method <highlight><bold>500</bold></highlight> according to a second preferred embodiment of the invention. Here two separate connection lists are maintained for each node: a first node-specific list specifying the node&apos;s own opened packet data connections and a second node-specific list specifying the opened packet data connections, which other nodes in the cluster are processing. Method <highlight><bold>500</bold></highlight> describes the actions in a node of a network element cluster. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In step <highlight><bold>401</bold></highlight> of method <highlight><bold>500</bold></highlight> a data packet arrives. Similarly as in method <highlight><bold>400</bold></highlight>, it is checked in step <highlight><bold>402</bold></highlight>, if the data packet is a data packet initiating the opening of a packet data connection. After a distribution decision is determined for such a data packet in step <highlight><bold>301</bold></highlight>, an entry is added either to the first node-specific list (step <highlight><bold>403</bold></highlight>) or to the second node-specific list (step <highlight><bold>501</bold></highlight>). The data packet is either selected for processing in the node (step <highlight><bold>302</bold></highlight><highlight><italic>b</italic></highlight>) or discarded (step <highlight><bold>302</bold></highlight><highlight><italic>c</italic></highlight>), depending on the distribution decision. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> If the data packet is a data packet relating to a packet data connection on the first node-specific connection list (step <highlight><bold>404</bold></highlight>), then the data packet is selected for processing in this node (step <highlight><bold>502</bold></highlight>). Timing information&mdash;and possible status information, if the data packets are monitored&mdash;is updated in step <highlight><bold>503</bold></highlight> in the corresponding entry in the first node-specific connection list. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> If the data packet is a data packet relating to a packet data connection on the second node-specific connection list (step <highlight><bold>504</bold></highlight>), then the data packet is discarded (step <highlight><bold>505</bold></highlight>), for processing in this node (step <highlight><bold>502</bold></highlight>). Timing information&mdash;and possible status information, if the data packets are monitored&mdash;is updated in step <highlight><bold>506</bold></highlight> in the corresponding entry in the second node-specific connection list. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> If the data packet is a data packet, for which there is no entry on either the first or the second node-specific connection lists, the data packet is treated similarly as a data packet initiating the opening a new packet data connection. This case may arise if an entry in a connection list is removed because the time period since the arrival of the latest data packet has been too long and, for example, a periodically occurring connection list checking has removed the entry either from the first node-specific connection list or from the second node-specific connection list of this node. A distribution decision is determined for the data packet in step <highlight><bold>507</bold></highlight>. If the distribution decision is such that this node is responsible for processing the packet, for example a hash value of the data packet is one of the hash values allocated to this node, the packet is selected for processing in this node in step <highlight><bold>509</bold></highlight> and a corresponding entry is added to the first node-specific connection list in step <highlight><bold>510</bold></highlight>. If the data packet is to be processed by another node, the data packet is discarded in this node (step <highlight><bold>511</bold></highlight>) and a corresponding entry is added to the second node-specific connection list (step <highlight><bold>512</bold></highlight>). When adding entries in steps <highlight><bold>510</bold></highlight> and <highlight><bold>512</bold></highlight>, the type of the data packet typically determines the status information in the entry. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> When a new node joins a cluster according to the second preferred embodiment of the invention, the node starts to collect connections to its own connections list. Additionally, the node asks for the own connections list and the other connections list from some other node and merges the information in them to its other connections list. The own connections list and the other connections list of any one of the nodes includes the connections that are already opened before the new node is added to the cluster. They are connections that should not be processed by the new node and therefore they are added to the other connections list of the new node. This way already opened connections continue to be handled by the same node also after reallocation of the hash values. The only thing that might cause problems after reallocation of hash values is that if some entry gets unintentionally removed from the connection list and hash value needs to be calculated to a non-SYN packet. If the hash corresponding to that specific connection is reallocated to some other node after opening the connection, the rest of the packets of the connection would be accepted for processing in some other node than the node that started to process the connection. This situation would result in failing the connection. However, the probability of this situation is marginal because it requires both a change in load balancing filter and a connection idle for longer than the ESTABLISHED timeout. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Advantageously each node of a network element cluster has a node-specific network address. Packet data connections, which are initiated by a node, typically use a node-specific network address. Arriving data packets, in whose header fields a node-specific network address is specified, are then processed in the same node. A cluster network address and node-specific network addresses are typically used, for example, in proxy server clusters: a client identifies a proxy server cluster using the cluster network address and a node in the proxy server cluster, when opening a connection to a second server, uses the node-specific network address. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In the appended claims directed to methods or clusters and in the discussion relating to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> the following terms are used. A first data packet is a data packet initiating the opening of a packet data connection in any of the nodes of a cluster. A second data packet is a data packet of a packet data connection, which is specified in a node-specific connection list of any of the nodes of a cluster. A third data packet is a data packet, which is neither a first data packet nor a second data packet. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates schematically as a first example a cluster <highlight><bold>600</bold></highlight> of network elements in accordance with the invention. In this cluster <highlight><bold>600</bold></highlight>, there is a plurality of network element nodes <highlight><bold>18</bold></highlight>. These network element nodes typically need not be aware of the other nodes in the cluster. In the cluster <highlight><bold>600</bold></highlight>, there is&mdash;as an example&mdash;a separate network element <highlight><bold>610</bold></highlight>, where the clustering functionality is implemented. It must be appreciated that the clustering functionality may also be included in each network element node <highlight><bold>18</bold></highlight>. In that case no separate network element <highlight><bold>610</bold></highlight> is needed. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In FIGS. <highlight><bold>6</bold></highlight>-<highlight><bold>9</bold></highlight> the flow of data packets is illustrated with thicker vertical arrows. Thinner horizontal arrows illustrate, as examples, typical interactions of various means. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The network element <highlight><bold>610</bold></highlight> connects the cluster to a network and it has means <highlight><bold>601</bold></highlight> for receiving data packets relating to the cluster network address of the cluster. Typically all data packets addressed to the cluster network address are received by the network element <highlight><bold>610</bold></highlight>. The network element <highlight><bold>610</bold></highlight> further has means <highlight><bold>602</bold></highlight> for determining distribution decisions for received first data packets, a first data packet being a data packet initiating opening of a packet data connection to said cluster network address, according to predetermined criteria. TCP SYN packets are an example of first data packets. Means <highlight><bold>603</bold></highlight> are means for selecting from said first data packets for each node of the network element cluster those first data packets, which are to be processed in said particular node according to the distribution decisions. Node-specific lists about opened packet data connections for which a node is responsible are maintained in means <highlight><bold>604</bold></highlight> for maintaining said node-specific lists. Means <highlight><bold>605</bold></highlight> for selecting from received second data packets, a second data packet being a data packet relating to an opened packet data connection specified in a node-specific list, for each node of the network element cluster those second data packets, which relate to connections on the node-specific list of said particular node. The network element <highlight><bold>601</bold></highlight> further has means <highlight><bold>606</bold></highlight> for sending to each node <highlight><bold>18</bold></highlight> of said network element cluster <highlight><bold>600</bold></highlight> data packets selected for the particular node. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Means <highlight><bold>602</bold></highlight>-<highlight><bold>605</bold></highlight> are typically provided as a computer program or computer program components. It is clear to a person skilled in the art, how to provide means <highlight><bold>601</bold></highlight> for receiving packets and means <highlight><bold>606</bold></highlight> for sending packet to other nodes. The cluster <highlight><bold>600</bold></highlight> may further comprise means <highlight><bold>607</bold></highlight> for updating the predetermined distribution criteria, for example, for re-allocating hash values between the nodes <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The network element <highlight><bold>610</bold></highlight> and means therein may be arranged to operate in accordance with any method according to the invention. Examples of such methods are those discussed above in detail. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates schematically a second example of a network element cluster <highlight><bold>700</bold></highlight> in accordance with the invention. This cluster <highlight><bold>700</bold></highlight> has a plurality of network elements <highlight><bold>710</bold></highlight> in accordance with the invention, the network elements <highlight><bold>710</bold></highlight> applicable for constructing a network element cluster. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In the description below, a first data packet is a data packet initiating the opening of a packet data connection in the particular network element (node) in question according to a distribution decision determined for that data packet. A second data packet is a data packet relating to an opened packet data connection specified in the connection list of the particular network element (node). A third data packet is a data packet initiating the opening of such a packet data connection, which is to be specified in the other connections list of this network element (node) according to a distribution decision determined for that data packet. A fourth data packet is a data packet relating to an opened packet data connection specified in the other connections list of this network element (node). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Furthermore, there may be data packets, which do not initiate opening of a packet data connection but which are specified neither on the own connection list (just plain &ldquo;list&rdquo; below and in the appended claims directed to a network element) nor on the other connections list (&ldquo;second list&rdquo; below and in the appended claims directed to a network element). A fifth data packet is a data packet, which is neither a first, second, third or fourth data packet, but it is a data packet to be processed in this network element (node) according to a distribution decision for the data packet. A sixth data packet is a data packet, which is neither a first, second, third or fourth data packet, nor a data packet to be processed in this network element (node) according to a distribution decision for the data packet. In other words, using the method <highlight><bold>500</bold></highlight> as an example, fifth data packets would be processed in steps <highlight><bold>509</bold></highlight> and <highlight><bold>510</bold></highlight> and sixth data packets in steps <highlight><bold>511</bold></highlight> and <highlight><bold>512</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> A network element <highlight><bold>710</bold></highlight> is a network element adapted to serve as a node in a cluster of network element. Such a cluster has typically a plurality of similar network element nodes and a cluster network address common to said plurality of network element nodes. A network element <highlight><bold>710</bold></highlight> comprises means <highlight><bold>701</bold></highlight> for receiving data packets; means <highlight><bold>702</bold></highlight> for determining distribution decisions for at least some of received data packets according to predetermined criteria; and means <highlight><bold>703</bold></highlight> for selecting, based on distribution decisions, from those received data packets, which are data packets initiating opening of packet data connection to said cluster network address, first data packets for processing in the network element. It further comprises means <highlight><bold>704</bold></highlight> for maintaining a list about opened packet data connections in the network element and means <highlight><bold>705</bold></highlight> for selecting, based on said list, from received data packets second data packets, a second data packet being a data packet relating to an opened connection on said list, for processing in the network element A network element <highlight><bold>710</bold></highlight> may further comprise means <highlight><bold>705</bold></highlight> for updating said predetermined criteria. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates, a network element <highlight><bold>710</bold></highlight> may further comprise means <highlight><bold>706</bold></highlight> for detecting such a second data packet, which is a data packet relating to closing of a packet data connection. In this case, the means <highlight><bold>704</bold></highlight> for maintaining said list is typically arranged to add an entry representing an opened packet data connection to said list, when a first data packet is selected for processing in the network element; and to remove an entry from said list, when a second data packet relating to closing of a packet data connection is detected. The means <highlight><bold>704</bold></highlight> are typically furthermore arranged to remove an entry from said list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. In this case, entries of said list typically comprise timing information for determining how long an entry is valid. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In a network element <highlight><bold>710</bold></highlight> having means <highlight><bold>701</bold></highlight>-<highlight><bold>705</bold></highlight>, entries of said list may comprise timing information for determining how long an entry is valid. In this case said means <highlight><bold>704</bold></highlight> for maintaining said list is typically arranged to add an entry representing an opened packet data connection to said list when a first data packet is selected for processing in the network element; update said timing information at least when a second data packet is selected; and remove an entry from said list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. The network element may further comprise means <highlight><bold>707</bold></highlight> for determining the status of an opened packet data connection, wherein entries of said list comprise status information and said means <highlight><bold>704</bold></highlight> for maintaining said list is arranged to update said status information according to a determined status. The predefined time period for removing entries from the list may be status specific. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a further example of a network element in accordance with the invention. This network element <highlight><bold>810</bold></highlight> is a network element in accordance with the second preferred embodiment of the invention, where a list of those connections, for which a node is responsible and a second list of connection for which other nodes of a cluster are responsible, are maintained. In addition to means <highlight><bold>701</bold></highlight>-<highlight><bold>705</bold></highlight> the network element <highlight><bold>810</bold></highlight> further comprises the following means: </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> means <highlight><bold>801</bold></highlight> for detecting, based on distribution decisions according to predetermined criteria, from received data packets, which are data packets initiating opening of packet data connections, third data packets to be processed in at least a second network element; </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> means <highlight><bold>802</bold></highlight> for maintaining a second list about opened packet data connections in said at least second network element: </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> means <highlight><bold>803</bold></highlight> for detecting from received data packets fourth data packets, a fourth data packet being a data packet relating to an opened connection on said second list; </paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> means <highlight><bold>804</bold></highlight> for selecting, based on distribution decisions, from received data packets fifth data packets, a fifth data packet being a data packet relating to said cluster network address but not relating to a packet data connection on said list or on said second list nor to opening of a packet data connection, for processing in the network element; and </paragraph>
<paragraph id="P-0076" lvl="2"><number>&lsqb;0076&rsqb;</number> means <highlight><bold>805</bold></highlight> for detecting, based on said distribution decisions, in received data packets sixth data packets, a sixth data packet being a data packet relating to said cluster network address but not relating to a packet data connection on said list or on said second list nor to opening of a packet data connection, to be processed in said at least second network element. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Furthermore, in the network element <highlight><bold>810</bold></highlight> said list and said second list comprise timing information for determining how long an opened packet data connection is valid. Said means <highlight><bold>704</bold></highlight> for maintaining said list is arranged to add a packet data connection relating to a first data packet or a fifth data packet to said list; update timing information in said list, when a second data packet is selected; and remove an opened packet data connection from said list, when a predefined time period from the arrival of the latest data packet relating to said packet data connection is exceeded. Said means <highlight><bold>802</bold></highlight> for maintaining said second list are arranged to add a packet data connection relating to a third data packet or a sixth data packet to said second list; update timing information in said second list, when a fourth data packet is detected; and remove an opened packet data connection from said second list, when a predefined time period from the arrival of the latest data packet relating to said packet data connection is exceeded. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the means <highlight><bold>702</bold></highlight> for determining distribution decisions is illustrated twice in order not to make the figure any more complex. Typically said list and said second list comprise entries corresponding to opened packet data connections. In this case said means <highlight><bold>704</bold></highlight> for maintaining said list is arranged to add an entry representing an opened packet data connection to said list when a first data packet or a fifth data packet is selected for processing in the network element; to update said timing information at least when a second data packet is selected; and to remove an entry from said list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. The means <highlight><bold>802</bold></highlight> for maintaining said second list is arranged to add an entry representing an opened packet data connection to said second list when a third data packet or a sixth data packet is detected; to update said timing information at least when a fourth data packet is detected; and to remove an entry from said second list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. The network element <highlight><bold>810</bold></highlight> may further comprise means for determining the status of an opened packet data connection. In this case entries of said list and said second list comprise status information, and said means <highlight><bold>704</bold></highlight>, <highlight><bold>802</bold></highlight> for maintaining said list and said second list are arranged to update said status information according to a determined status. The predefined time period for removing an entry from the list or from the second list may be status specific. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Above network elements according to some embodiments of the invention are described. A network element in accordance with the invention may be arranged to operate in accordance with any method according to the invention. Examples of such methods are those discussed above in detail. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates schematically a clustering computer program or a computer program component <highlight><bold>900</bold></highlight> for a network element, which is adapted to serve as a node in a network element cluster. Such a cluster has a plurality of network element nodes and a cluster network address common to said plurality of network element nodes. Computer program (component) <highlight><bold>900</bold></highlight> comprises programs code means for: </paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> receiving <highlight><bold>901</bold></highlight> data packets from an operating system, </paragraph>
<paragraph id="P-0082" lvl="2"><number>&lsqb;0082&rsqb;</number> determining <highlight><bold>902</bold></highlight> distribution decisions for at least some of received data packets, </paragraph>
<paragraph id="P-0083" lvl="2"><number>&lsqb;0083&rsqb;</number> selecting <highlight><bold>903</bold></highlight> according to said distribution decisions from those received data packets, which initiate opening of packet data connection to said cluster network address, first data packets, </paragraph>
<paragraph id="P-0084" lvl="2"><number>&lsqb;0084&rsqb;</number> maintaining <highlight><bold>904</bold></highlight> a list about opened packet data connections based at least on said first data packets, </paragraph>
<paragraph id="P-0085" lvl="2"><number>&lsqb;0085&rsqb;</number> selecting <highlight><bold>905</bold></highlight>, based on said list, from received data packets second data packets, which are data packets relating to opened connections on said list, and </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> delivering <highlight><bold>906</bold></highlight> selected data packets to a second computer program component for processing. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> It is possible that selected data packets are delivered to the second computer program component via some higher level parts of the operating system, but this is not illustrated in the figure for tie sake of clarity. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> A computer program product according to the invention comprises program code means stored on a computer readable medium for performing the steps of: </paragraph>
<paragraph id="P-0089" lvl="2"><number>&lsqb;0089&rsqb;</number> receiving data packets from an operating system, </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> determining distribution decisions for at least some of received data packets, </paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> selecting, according to said distribution decisions, from those received data packets, which initiate opening of packet data connection to said cluster network address, first data packets, </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> maintaining a list about opened packet data connections based at least on said first data packets, </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> selecting, based on said list, from received data packets second data packets, which are data packets relating to opened connections on said list, and </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> delivering selected data packets to a second computer program component for processing, </paragraph>
<paragraph id="P-0095" lvl="7"><number>&lsqb;0095&rsqb;</number> when said program product is run on a computer. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> A computer program product and a computer program (component) in accordance with the invention may be arranged to operate in accordance with any method according to the invention. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In view of the foregoing description it will be evident to a person skilled in the art that various modifications may be made within the scope of the invention. While preferred embodiments of the invention have been described in detail, it should be apparent that many modifications and variations thereto are possible, all of which fall within the scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for processing data packets within a network element cluster having a plurality of network element nodes, said network element cluster having a cluster network address common to said plurality of nodes, said method comprising the steps of: 
<claim-text>determining distribution decisions for first data packets, a first data packet being a data packet initiating opening of a packet data connection to said cluster network address, according to predetermined criteria, </claim-text>
<claim-text>selecting from said first data packets for each node of the network element cluster those first data packets, which are to be processed in said particular node, according to the distribution decisions, </claim-text>
<claim-text>maintaining node-specific lists about opened packet data connections for which a node is responsible, and </claim-text>
<claim-text>selecting from second data packets, a second data packet being a data packet relating to an opened packet data connection specified in a node-specific list, for each node of the network element cluster those second data packets, which relate to connections on the node-specific list of said particular node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each node of the network element cluster receives all data packets directed to the cluster network address and selects which data packets are processed in that particular node, on the basis of the distribution decisions or on the basis of the node-specific list. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, said maintaining comprising the substeps of: 
<claim-text>adding an entry representing a new packet data connection to the node-specific list of that node, in which a first data packet is selected to be processed, and </claim-text>
<claim-text>removing, after receiving in said network element cluster such a second data packet, which is further a data packet relating to closing of a packet data connection, an entry representing an opened packet data connection from a corresponding node-specific list. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said node-specific list comprises timing information for determining how long an opened packet data connection is valid, and said maintaining comprises the substeps of: 
<claim-text>updating said timing information, when a node for processing a second data packet is selected, </claim-text>
<claim-text>removing an entry representing an opened packet data connection from said node-specific list, when a predefined time period from the receiving of the latest data packet relating to said packet data connection is exceeded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, comprising the step of: 
<claim-text>determining the status of an opened packet data connection, and wherein status information indicating the determined status of an opened packet data connection is maintained in said node-specific list. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said node-specific list comprises timing information for determining how long an opened packet data connection is valid, and said maintaining comprising the substeps of: 
<claim-text>adding an entry representing a new packet data connection to the node-specific list of that node, in which a first data packet is selected to be processed </claim-text>
<claim-text>updating said timing information, when a node for processing a second data packet is selected, and </claim-text>
<claim-text>removing an entry representing an opened packet data connection from said node-specific list, when a predefined time period from the receiving of the latest data packet relating to said packet data connection is exceeded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, comprising the step of: 
<claim-text>determining the status of an opened packet data connection, and wherein status information indicating the determined status of an opened packet data connection is maintained in said node-specific list. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein a plurality of status indications are used and said predefined time periods are status indication specific. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein at least three status indications are used, a first status indication corresponding to a packet data connection, for which so far only a first data packet is being detected, a second status indication corresponding to a packet data connection, for which additionally at least one further data packet is being detected, and a third status indication corresponding to a packet data connection, for which a packet data relating to closing of said packet data connection is being detected. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein packet data connections are Transfer Control Protocol connections, the first data packet is a SYN packet, and the data packet relating to the closing of a packet data connection is either a FIN packet or a RST packet. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein for each node a node-specific list of opened packet data connections, for which the node is responsible, is maintained, said method further comprising the steps of: 
<claim-text>maintaining for each node a second node-specific list of opened packet data connections, for which other nodes of the network element cluster are responsible, p<highlight><bold>1</bold></highlight> determining distribution decisions for third data packets, a third data packet being a data packet relating to said cluster network address but neither a data packet relating to an opened packet data connection on a node-specific list or on a second node-specific list nor a data packet initiating opening of a packet data connection, according to said predetermined criteria, </claim-text>
<claim-text>selecting from said third data packets for each node of the network element cluster those third data packets, which are to be processed in said particular node, according to the distribution decisions, and </claim-text>
<claim-text>updating for each node either the node-specific list or the second node-specific list when selecting to process a third data packet in a node of the network element cluster, and wherein </claim-text>
<claim-text>for each node the second node-specific list is updated when selecting to process a first data packet in another node, and </claim-text>
<claim-text>for each node the second node-specific list is updated when selecting to process a second data packet in another node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said node-specific lists and said second node-specific lists comprise timing information for determining how long an opened packet data connection is valid, and said maintaining the node-specific lists and second node-specific lists comprises the substeps of: 
<claim-text>adding an entry representing a new packet data connection to the node-specific list of that node, in which a first data packet is selected to be processed, and to the second node-specific lists of the other nodes, </claim-text>
<claim-text>adding an entry representing the packet data connection to the node-specific list of that node, in which a third data packet is selected to be processed, and to the second node-specific lists of the other nodes, </claim-text>
<claim-text>updating said timing information in the node-specific lists and second node-specific lists based on a selection of a node for processing a second data packet, and </claim-text>
<claim-text>removing an entry representing an opened packet data connection from said node-specific lists and said second node-specific lists, when a predefined time period from the receiving of the latest data packet relating to said packet data connection is exceeded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, comprising the step of: 
<claim-text>determining the status of an opened packet data connection, and wherein </claim-text>
<claim-text>status information indicating the determined status of an opened packet data connection is maintained in said node-specific lists and second node-specific lists, and </claim-text>
<claim-text>the status information in an entry relating to a third data packet depends on the type of the third data packet. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein a plurality of status indications are used and said predefined time periods are status indication specific. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein at least three status indications are used, a first status indication corresponding to a packet data connection, for which so far only a first data packet is being detected, a second status indication corresponding to a packet data connection, for which additionally at least one further data packet is being detected, and a third status indication corresponding to a packet data connection, for which a packet data relating to closing of said packet data connection is being detected. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein packet data connections are Transfer Control Protocol connections, the first data packet is a SYN packet, and the data packet relating to the closing of a packet data connection is either a FIN packet or a RST packet. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the distribution decisions are determined based on a hash value calculated for a data packet, said hash value being calculated using a hash function and certain header field(s) of said data packet and each node of said plurality of node having a node-specific set of hash values. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said header fields comprise the source and destination address fields of Internet Protocol data packet header and the source and destination port fields of a Transfer Control Protocol data packet header. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said header fields comprise the source and destination address fields of Internet Protocol data packet header and the source and destination port fields of a User Datagram Protocol data packet header. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising the step of; 
<claim-text>updating the node-specific sets of hash values. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the step of: 
<claim-text>updating said predetermined criteria. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A cluster of network element nodes, said cluster having a plurality of nodes and a cluster network address common to said plurality of nodes, said cluster further comprising: 
<claim-text>means for receiving data packets relating to said cluster network address, </claim-text>
<claim-text>means for determining distribution decisions for received first data packets, a first data packet being a data packet initiating opening of a packet data connection to said cluster network address, according to predetermined criteria, </claim-text>
<claim-text>means for selecting from said first data packets for each node of the network element cluster those first data packets, which are to be processed in said particular node according to the distribution decisions, </claim-text>
<claim-text>means for maintaining node-specific lists about opened packet data connections for which a node is responsible, </claim-text>
<claim-text>means for selecting from received second data packets, a second data packet being a data packet relating to an opened packet data connection specified in a node-specific list, for each node of the network element cluster those second data packets, which relate to connections on the node-specific list of said particular node, and </claim-text>
<claim-text>means for sending to each node of said network element cluster data packets selected for the particular node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A cluster according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, further comprising means for updating said predetermined criteria. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A network element for constructing a cluster of network element nodes, said cluster having a plurality of network element nodes and a cluster network address common to said plurality of network element nodes, said network element comprising: 
<claim-text>means for receiving data packets, </claim-text>
<claim-text>means for determining distribution decisions for at least some of received data packets according to predetermined criteria, </claim-text>
<claim-text>means for selecting, based on distribution decisions, from those received data packets, which are data packets initiating opening of packet data connection to said cluster network address, first data packets for processing in the network element, </claim-text>
<claim-text>means for maintaining a list about opened packet data connections in the network element, and </claim-text>
<claim-text>means for selecting, based on said list, from received data packets second data packets, a second data packet being a data packet relating to an opened connection on said list, for processing in die network element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising means for updating said predetermined criteria. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising 
<claim-text>means for detecting such a second data packet, which is a data packet relating to closing of a packet data connection, wherein said means for maintaining said list is arranged to </claim-text>
<claim-text>add an entry representing an opened packet data connection to said list when a first data packet is selected for processing in the network element, and </claim-text>
<claim-text>remove an entry from said list, when a second data packet relating to closing of a packet data connection is detected. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein entries of said list comprise timing information for determining how long the opened packet data connection is valid and said means for maintaining said list is arranged to 
<claim-text>add an entry representing an opened packet data connection to said list when a first data packet is selected for processing in the network element, </claim-text>
<claim-text>update said timing information at least when a second data packet is selected, and </claim-text>
<claim-text>remove an entry from said list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, further comprising means (<highlight><bold>707</bold></highlight>) for determining the status of an opened packet data connection, wherein entries of said list comprise status information and said means for maintaining said list is arranged to update said status information according to a determined status. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein said predefined time period is status specific. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising 
<claim-text>means for detecting, based on distribution decisions according to predetermined criteria, from received data packets, which are data packets initiating opening of packet data connections, third data packets to be processed in at least a second network element, </claim-text>
<claim-text>means for maintaining a second list about opened packet data connections in said at least second network element, </claim-text>
<claim-text>means for detecting from received data packets fourth data packets, a fourth data packet being a data packet relating to an opened connection on said second list, </claim-text>
<claim-text>means for selecting, based on distribution decisions, from received data packets fifth data packets, a fifth data packet being a data packet relating to said cluster network address but neither a data packet relating to a packet data connection on said list or on said second list nor a data packet initiating opening of a packet data connection, for processing in the network element, and </claim-text>
<claim-text>means for detecting, based on said distribution decisions, in received data packets sixth data packets, a sixth data packet being a data packet relating to said cluster network address but neither a data packet relating to a packet data connection on said list or on said second list nor a data packet initiating opening of a packet data connection, to be processed in said at least second network element, wherein 
<claim-text>said list and said second list comprise timing information for determining how long an opened packet data connection is valid, </claim-text>
<claim-text>said means for maintaining said list is arranged to add a packet data connection relating to a first data packet or a fifth data packet to said list; update timing information in said list, when a second data packet is selected; and remove an opened packet data connection from said list, when a predefined time period from the arrival of the latest data packet relating to said packet data connection is exceeded, and </claim-text>
<claim-text>said means for maintaining said second list are arranged to add a packet data connection relating to a third data packet or a sixth data packet to said second list; update timing information in said second list, when a fourth data packet is detected; and remove an opened packet data connection from said second list, when a predefined time period from the arrival of the latest data packet relating to said packet data connection is exceeded. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein said list and said second list comprise entries corresponding to opened packet data connections and said means for maintaining said list is arranged to 
<claim-text>add an entry representing an opened packet data connection to said list when a first data packet or a fifth data packet is selected for processing in the network element, </claim-text>
<claim-text>update said timing information at least when a second data packet is selected, and </claim-text>
<claim-text>remove an entry from said list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded, and said means for maintaining said second list is arranged to </claim-text>
<claim-text>add an entry representing an opened packet data connection to said second list when a third data packet or a sixth data packet is detected, </claim-text>
<claim-text>update said timing information at least when a fourth data packet is detected, and </claim-text>
<claim-text>remove an entry from said second list, when a predefined time period from the arrival of the latest data packet relating to said entry is exceeded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, further comprising means for determining the status of an opened packet data connection, wherein entries of said list and said second list comprise status information, said means for maintaining said list is arranged to update said status information according to a determined status and said means for maintaining said second list is arranged to update said status information according to a determined status. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A network element according to <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein said predefined time period is status specific. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A network element cluster comprising, a plurality of network element nodes, said cluster having a cluster network address common to said plurality of network element nodes and each network element comprising: 
<claim-text>means for receiving data packets, </claim-text>
<claim-text>means for determining distribution decisions for at least some of received data packets according to predetermined criteria, </claim-text>
<claim-text>means for selecting, based on distribution decisions, from those received data packets, which are data packets initiating opening of packet data connection to said cluster network address, first data packets for processing in the network element, </claim-text>
<claim-text>means for maintaining a list about opened packet data connections in the network element, and </claim-text>
<claim-text>means for selecting, based on said list, from received data packets second data packets, a second data packet being a data packet relating to an opened connection on said list, for processing in the network element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A computer program component for a network element, said network element being a network element for constructing a cluster of network element nodes, said cluster having a plurality of network element nodes and a cluster network address common to said plurality of network element nodes, said computer program component comprising programs code means for: 
<claim-text>receiving data packets from an operating system, </claim-text>
<claim-text>determining distribution decisions for at least some of received data packets, </claim-text>
<claim-text>selecting according to said distribution decisions from those received data packets, which initiate opening of packet data connection to said cluster network address, first data packets, </claim-text>
<claim-text>maintaining a list about opened packet data connections based at least on said first data packets. </claim-text>
<claim-text>selecting, based on said list, from received data packets second data packets, which are data packets relating to opened connections on said list, and </claim-text>
<claim-text>delivering selected data packets to a second computer program component for processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A computer program product comprising program code means stored on a computer readable medium for performing the steps of: receiving data packets from an operating system, 
<claim-text>determining distribution decisions for at least some of received data packets, </claim-text>
<claim-text>selecting, according to said distribution decisions, from those received data packets, which initiate opening of packet data connection to said cluster network address, first data packets, </claim-text>
<claim-text>maintaining a list about opened packet data connections based at least on said first data packets, </claim-text>
<claim-text>selecting, based on said list, from received data packets second data packets, which are data packets relating to opened connections on said list, and </claim-text>
<claim-text>delivering selected data packets to a second computer program component for processing, </claim-text>
<claim-text>when said program product is run on a computer.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002494A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002494A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002494A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002494A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002494A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002494A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002494A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
