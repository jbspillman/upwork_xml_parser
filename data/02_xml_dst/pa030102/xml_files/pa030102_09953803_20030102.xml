<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002585A1-20030102-P00001.TIF SYSTEM "US20030002585A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00002.TIF SYSTEM "US20030002585A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00003.TIF SYSTEM "US20030002585A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00004.TIF SYSTEM "US20030002585A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00005.TIF SYSTEM "US20030002585A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00006.TIF SYSTEM "US20030002585A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00007.TIF SYSTEM "US20030002585A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00008.TIF SYSTEM "US20030002585A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-P00009.TIF SYSTEM "US20030002585A1-20030102-P00009.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-D00000.TIF SYSTEM "US20030002585A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002585A1-20030102-D00001.TIF SYSTEM "US20030002585A1-20030102-D00001.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002585</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09953803</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20010917</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04B001/66</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>H04N007/12</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>375</class>
<subclass>240260</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>375</class>
<subclass>240280</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>341</class>
<subclass>050000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method of encoding video data for serial transmission</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60313194</doc-number>
<document-date>20010817</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60296924</doc-number>
<document-date>20010608</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Hugh</given-name>
<family-name>Mair</family-name>
</name>
<residence>
<residence-us>
<city>Fairview</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Gordon</given-name>
<family-name>Gammie</family-name>
</name>
<residence>
<residence-us>
<city>Plano</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Steve</given-name>
<family-name>Clynes</family-name>
</name>
<residence>
<residence-us>
<city>Allen</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Rolf</given-name>
<family-name>Lagerquist</family-name>
</name>
<residence>
<residence-us>
<city>Richardson</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Dwight N. Holmbo</name-1>
<name-2>Texas Instruments Incorporated</name-2>
<address>
<address-1>Mail Station 3999</address-1>
<address-2>P.O. Box 655474</address-2>
<city>Dallas</city>
<state>TX</state>
<postalcode>75265</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An encoding scheme simplifies the TMDS encoding algorithm described in the DVI 1.0 specification while retaining compatibility with most existing DVI receivers. The generation of the Transition Control bit has been removed; and although the INV bit has a similar function to the DC bit in the DVI 1.0 standard, the algorithm for deriving it is very different. No attempt is made to maintain a DC balance on the cable. Instead, the INV bit is set to a &lsquo;1&rsquo; for the purpose of removing &lsquo;rogue&rsquo; character sequences; otherwise it is always set to a &lsquo;0&rsquo;. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED PATENT APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to co-pending U.S. patent application Ser. No. 60/296,924, entitled <highlight><italic>Method For Adding Additional Data To A Communication Link While Retaining Backward Compatibility</italic></highlight>, filed on Jun. 8, 2001 and co-pending U.S. Patent Application entitled <highlight><italic>New Encoding Algorithm Providing Compatibility With a Class of DVI Receivers, </italic></highlight>filed on Aug. 17, 2001.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention relates generally to data encoding, and more particularly to video data encoding algorithms providing compatibility with a class of digital visual interface (DVI) receivers. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Prior Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The Digital Visual Interface Specification, Revision 1.0 (DVI 1.0), published by the Digital Display Working Group (DDWG) describes an encoding scheme that should be used for transmission of video data across an interconnecting cable in a compliant system. The DVI 1.0 encoding algorithm involves the expansion of 8-bit video data to a 10-bit serial word. During active video times, the video data is encoding, and during inactive video times, two binary signals are encoded. On one channel, for example, these two binary signals are used to represent horizontal and vertical synchronizing signals. For active video, the input word is denoted as D<highlight><bold>0</bold></highlight> through D<highlight><bold>7</bold></highlight> (D<highlight><bold>0</bold></highlight> is the LSB). The serial word is denoted S<highlight><bold>0</bold></highlight> through S<highlight><bold>9</bold></highlight> (where S<highlight><bold>0</bold></highlight> is the LSB and the first bit to be sent). The algorithm is defined as: </paragraph>
<paragraph id="P-0006" lvl="2"><number>&lsqb;0006&rsqb;</number> S<highlight><bold>0</bold></highlight>&equals;D<highlight><bold>0</bold></highlight>&circ; DC </paragraph>
<paragraph id="P-0007" lvl="2"><number>&lsqb;0007&rsqb;</number> S<highlight><bold>1</bold></highlight>&equals;D<highlight><bold>1</bold></highlight>&circ; S<highlight><bold>0</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0008" lvl="2"><number>&lsqb;0008&rsqb;</number> S<highlight><bold>2</bold></highlight>&equals;D<highlight><bold>2</bold></highlight>&circ; S<highlight><bold>1</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> S<highlight><bold>3</bold></highlight>&equals;D<highlight><bold>3</bold></highlight>&circ; S<highlight><bold>2</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> S<highlight><bold>4</bold></highlight>&equals;D<highlight><bold>4</bold></highlight>&circ; S<highlight><bold>3</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> S<highlight><bold>5</bold></highlight>&equals;D<highlight><bold>5</bold></highlight>&circ; S<highlight><bold>4</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0012" lvl="2"><number>&lsqb;0012&rsqb;</number> S<highlight><bold>6</bold></highlight>&equals;D<highlight><bold>6</bold></highlight>&circ; S<highlight><bold>5</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0013" lvl="2"><number>&lsqb;0013&rsqb;</number> S<highlight><bold>7</bold></highlight>&equals;D<highlight><bold>7</bold></highlight>&circ; S<highlight><bold>6</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0014" lvl="2"><number>&lsqb;0014&rsqb;</number> S<highlight><bold>8</bold></highlight>&equals;TC&circ; 1 </paragraph>
<paragraph id="P-0015" lvl="2"><number>&lsqb;0015&rsqb;</number> S<highlight><bold>9</bold></highlight>&equals;DC </paragraph>
<paragraph id="P-0016" lvl="7"><number>&lsqb;0016&rsqb;</number> where &lsquo;&circ; &rsquo; is defined as an exclusive-OR operation, TC is a &lsquo;Transition Control&rsquo; bit, and DC is a &lsquo;DC Balance Control&rsquo; bit, as described in further detail herein below. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In order to be able to identify active video data from non-active video data, the inventors of the prior art algorithm set forth above identified the number of transitions within the 10-bit word as a key characteristic that could be detected. Furthermore, certain characters could be sent to uniquely identify the LSB/MSB positions within the serial data stream. In order to prevent the active video characters from being misinterpreted, the TC bit is used to reduce the number of transitions within an active data symbol. </paragraph>
</section>
<section>
<heading lvl="1">EXAMPLE </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Assume DC&equals;0 (DC has a separate, independent function described herein below), with TC&equals;0, a binary data symbol (LSB)11111111(MSB) would be first encoded as (LSB)1010101010(MSB). Since the goal of the algorithm is to minimize the number of transitions for active data, the TC bit must be set (i.e. perform transition control), and hence the character would be fully encoded as (LSB)1111111100(MSB). </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Further, if one assumes that the preceding bit in the serial stream has a logic value of &lsquo;1&rsquo;, it can be shown that all 8-bit input data can be encoded into a 10-bit code with fewer than six 0-to-1 or 1-to-0 transitions. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The DC Balance Control bit is used to optionally invert bits S<highlight><bold>0</bold></highlight> through S<highlight><bold>7</bold></highlight> in order to maintain a DC bias close to zero. The goal of the encoder is to transmit exactly the same number of ones and zeros over a period of time. The encoder keeps a running count of the number of ones and zeros that it has transmitted within the current active video period. If there is a disparity between the number of ones and the number of zeros that have been sent, the encoder will adjust the DC Balance Control bit to ensure that the current character, at worst, does not add to this disparity, and typically will cause the disparity to bias itself towards zero. </paragraph>
</section>
<section>
<heading lvl="1">EXAMPLE </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> If the first active data symbol is (LSB)10000000(MSB), the encoder will transmit the serial code (LSB)1111111110(MSB). This will accumulate a disparity of &plus;8 (i.e. nine &lsquo;1&rsquo;s and one &lsquo;0&rsquo; have been sent). If the second active data symbol is (LSB)01000000(MSB), the transmitter can send either (LSB)0111111110(MSB) or (LSB)1000000011(MSB). These two characters have individual disparities of &plus;6 and &minus;4 respectively. Since it is desirable to maintain a cumulative disparity close to zero, the second character must be sent; hence the cumulative disparity will become &plus;4(&lsqb;&plus;8&rsqb;&plus;&lsqb;&minus;4&rsqb;). </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> For the purpose of DVI 1.0, there are four synchronization characters that represent inactive video data. The particular value that should be sent depends on the state of the two additional binary signals that are transmitted during inactive video: </paragraph>
</section>
<section>
<heading lvl="1">EXAMPLE </heading>
<paragraph id="P-0023" lvl="2"><number>&lsqb;0023&rsqb;</number> (C<highlight><bold>1</bold></highlight>,C<highlight><bold>0</bold></highlight>)&equals;(0,0): (LSB)0010101011(MSB) </paragraph>
<paragraph id="P-0024" lvl="2"><number>&lsqb;0024&rsqb;</number> (C<highlight><bold>1</bold></highlight>,C<highlight><bold>0</bold></highlight>)&equals;(0,1): (LSB)1101010100(MSB) </paragraph>
<paragraph id="P-0025" lvl="2"><number>&lsqb;0025&rsqb;</number> (C<highlight><bold>1</bold></highlight>,C<highlight><bold>0</bold></highlight>)&equals;(1,0): (LSB)0010101010(MSB) </paragraph>
<paragraph id="P-0026" lvl="2"><number>&lsqb;0026&rsqb;</number> (C<highlight><bold>1</bold></highlight>,C<highlight><bold>0</bold></highlight>)&equals;(1,1): (LSB)1101010101(MSB) </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In view of the foregoing, an encoding scheme that simplifies the TMDS encoding algorithm described in the DVI 1.0 specification while retaining compatibility with most existing DVI receivers would provide great advantages over the prior art. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The present invention is directed to an encoding scheme that simplifies the TMDS encoding algorithm described in the DVI 1.0 specification while retaining compatibility with most existing DVI receivers. The encoding scheme can be described as: </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> S<highlight><bold>0</bold></highlight>&equals;D<highlight><bold>0</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> S<highlight><bold>1</bold></highlight>&equals;D<highlight><bold>1</bold></highlight>&circ; S<highlight><bold>0</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> S<highlight><bold>2</bold></highlight>&equals;D<highlight><bold>2</bold></highlight>&circ; S<highlight><bold>1</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> S<highlight><bold>3</bold></highlight>&equals;D<highlight><bold>3</bold></highlight>&circ; S<highlight><bold>2</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> S<highlight><bold>4</bold></highlight>&equals;D<highlight><bold>4</bold></highlight>&circ; S<highlight><bold>3</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> S<highlight><bold>5</bold></highlight>&equals;D<highlight><bold>5</bold></highlight>&circ; S<highlight><bold>4</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> S<highlight><bold>6</bold></highlight>&equals;D<highlight><bold>6</bold></highlight>&circ; S<highlight><bold>5</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> S<highlight><bold>7</bold></highlight>&equals;D<highlight><bold>7</bold></highlight>&circ; S<highlight><bold>6</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> S<highlight><bold>8</bold></highlight>&equals;1 </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> S<highlight><bold>9</bold></highlight>&equals;INV </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In one aspect of the invention, a digital visual interface encoding scheme is implemented without a Transition Control bit such that the number of transitions is not controlled and such that the active and non-active video cannot be separated based on the number of transitions while retaining compatibility with most existing DVI receivers. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In still another aspect of the invention, a digital visual interface encoding scheme is implemented such that a DC balance is not maintained on the associated cable while retaining compatibility with most existing DVI receivers. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In yet another aspect of the invention, a digital visual interface encoding scheme is implemented having the INV bit set to a &lsquo;1&rsquo; for the purpose of removing &lsquo;rogue&rsquo; character sequences while retaining compatibility with most existing DVI receivers. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Other aspects, features and advantages of the present invention will be readily appreciated as the invention becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings in which like reference numerals designate like parts throughout the figures thereof and wherein: </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates the prior art (DVI 1.0) digital visual interface encoding algorithm; and </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a digital visual interface encoding scheme according to one embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> While the above-identified drawing figures set forth alternative embodiments, other embodiments of the present invention are also contemplated, as noted in the discussion. In all cases, this disclosure presents illustrated embodiments of the present invention by way of representation and not limitation. Numerous other modifications and embodiments can be devised by those skilled in the art which fall within the scope and spirit of the principles of this invention. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The present embodiments are best understood by first reiterating a synopsis of the prior art set forth above. The Digital Visual Interface Specification, Revision 1.0 (DVI 1.0), as stated herein before, describes an encoding scheme that should be used for transmission of video data across an interconnecting cable in a compliant system. The DVI 1.0 encoding algorithm involves the expansion of 8-bit video data to a 10-bit serial word. During active video times, the video data is encoding, and during inactive video times, two binary signals are encoded. On one channel, for example, these two binary signals are used to represent horizontal and vertical synchronizing signals. For active video, the input word is denoted as D<highlight><bold>0</bold></highlight> through D<highlight><bold>7</bold></highlight> (D<highlight><bold>0</bold></highlight> is the LSB). The serial word is denoted S<highlight><bold>0</bold></highlight> through S<highlight><bold>9</bold></highlight> (where S<highlight><bold>0</bold></highlight> is the LSB and the first bit to be sent). The algorithm is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> as: </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> S<highlight><bold>0</bold></highlight>&equals;D<highlight><bold>0</bold></highlight>&circ; DC </paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> S<highlight><bold>1</bold></highlight>&equals;D<highlight><bold>1</bold></highlight>&circ; S<highlight><bold>0</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0049" lvl="2"><number>&lsqb;0049&rsqb;</number> S<highlight><bold>2</bold></highlight>&equals;D<highlight><bold>2</bold></highlight>&circ; S<highlight><bold>1</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0050" lvl="2"><number>&lsqb;0050&rsqb;</number> S<highlight><bold>3</bold></highlight>&equals;D<highlight><bold>3</bold></highlight>&circ; S<highlight><bold>2</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> S<highlight><bold>4</bold></highlight>&equals;D<highlight><bold>4</bold></highlight>&circ; S<highlight><bold>3</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0052" lvl="2"><number>&lsqb;0052&rsqb;</number> S<highlight><bold>5</bold></highlight>&equals;D<highlight><bold>5</bold></highlight>&circ; S<highlight><bold>4</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> S<highlight><bold>6</bold></highlight>&equals;D<highlight><bold>6</bold></highlight>&circ; S<highlight><bold>5</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> S<highlight><bold>7</bold></highlight>&equals;D<highlight><bold>7</bold></highlight>&circ; S<highlight><bold>6</bold></highlight>&circ; TC&circ; DC </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> S<highlight><bold>8</bold></highlight>&equals;TC&circ; 1 </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> S<highlight><bold>9</bold></highlight>&equals;DC </paragraph>
<paragraph id="P-0057" lvl="7"><number>&lsqb;0057&rsqb;</number> where &lsquo;&circ; &rsquo; is defined as an exclusive-OR operation, TC is a &lsquo;Transition Control&rsquo; bit, and DC is a &lsquo;DC Balance Control&rsquo; bit, as described in further detail herein below. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In order to be able to identify active video data from non-active video data, the inventors of the prior art algorithm set forth above identified the number of transitions within the 10-bit word as a key characteristic that could be detected. Furthermore, certain characters could be sent to uniquely identify the LSB/MSB positions within the serial data stream. In order to prevent the active video characters from being misinterpreted, the TC bit is used to reduce the number of transitions within an active data symbol. Further, if one assumes that the preceding bit in the serial stream has a logic value of &lsquo;1&rsquo;, it can be shown that all 8-bit input data can be encoded into a 10-bit code with fewer than six 0-to-1 or 1-to-0 transitions. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The DC Balance Control bit is used to optionally invert bits S<highlight><bold>0</bold></highlight> through S<highlight><bold>7</bold></highlight> in order to maintain a DC bias close to zero. The goal of the encoder is to transmit exactly the same number of ones and zeros over a period of time. The encoder keeps a running count of the number of ones and zeros that it has transmitted within the current active video period. If there is a disparity between the number of ones and the number of zeros that have been sent, the encoder will adjust the DC Balance Control bit to ensure that the current character, at worst, does not add to this disparity, and typically will cause the disparity to bias itself towards zero. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an encoding scheme that simplifies the TMDS encoding algorithm described in the DVI 1.0 specification and depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, discussed herein above, while retaining compatibility with most existing DVI receivers according to the best mode known by the present inventors. As seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the encoding algorithm can be described as: </paragraph>
<paragraph id="P-0061" lvl="2"><number>&lsqb;0061&rsqb;</number> S<highlight><bold>0</bold></highlight>&equals;D<highlight><bold>0</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> S<highlight><bold>1</bold></highlight>&equals;D<highlight><bold>1</bold></highlight>&circ; S<highlight><bold>0</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> S<highlight><bold>2</bold></highlight>&equals;D<highlight><bold>2</bold></highlight>&circ; S<highlight><bold>1</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> S<highlight><bold>3</bold></highlight>&equals;D<highlight><bold>3</bold></highlight>&circ; S<highlight><bold>2</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> S<highlight><bold>4</bold></highlight>&equals;D<highlight><bold>4</bold></highlight>&circ; S<highlight><bold>3</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> S<highlight><bold>5</bold></highlight>&equals;D<highlight><bold>5</bold></highlight>&circ; S<highlight><bold>4</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> S<highlight><bold>6</bold></highlight>&equals;D<highlight><bold>6</bold></highlight>&circ; S<highlight><bold>5</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> S<highlight><bold>7</bold></highlight>&equals;D<highlight><bold>7</bold></highlight>&circ; S<highlight><bold>6</bold></highlight>&circ; INV </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> S<highlight><bold>8</bold></highlight>&equals;1 </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> S<highlight><bold>9</bold></highlight>&equals;INV </paragraph>
<paragraph id="P-0071" lvl="7"><number>&lsqb;0071&rsqb;</number> It can also be seen that the generation of the TC (Transition Control) bit has been removed. The implication is that the number of transitions is not controlled; and hence the active and non-active video cannot be separated based on the number of transitions. Although the INV bit has a similar function to the DC bit in the DVI 1.0 standard, the algorithm for deriving it is very different. In the algorithm shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, no attempt is made to maintain a DC balance on the cable. Instead, the INV bit is set to a &lsquo;1&rsquo; for the purpose of removing &lsquo;rogue&rsquo; character sequences; it is set to a &lsquo;0&rsquo; at all other times. Rogue character sequences, as used herein, are defined in two ways as: </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> 1) any character which generates a reserved synchronization character upon encoding, e.g, (LSB)00111111(MSB) will encode as (LSB)0010101010(MSB); since this is synchronization character (1,0), the INV bit must be set to avoid sending a decodable synchronization character during active video. The encoded stream therefore appears as (LSB)1101010111(MSB) which is not a reserved character; or </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> 2) a sequence of two adjacent synchronization characters appearing in any position across the span of three consecutive stream characters. The present inventors evaluated different DVI 1.0 receivers and found this criteria was used by most of the DVI 1.0 receivers that were evaluated to determine the LSB/MSB position. Two consecutive characters was determined to be significant since this causes an LSB/MSB realignment in the receiver and hence the second synchronization character is fully decoded. Generation of consecutive synchronization characters must therefore be avoided. </paragraph>
</section>
<section>
<heading lvl="1">EXAMPLE </heading>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> (LSB)00000001(MSB), (LSB)01111110(MSB), (LSB)11111100(MSB) would encode as serial stream: (LSB)0000000110(MSB), (LSB)1010101110(MSB, (LSB)1010100010(MSB). It can be seen that the synchronization characters 1101010101 and 1101010100 occur consecutively within the stream; hence this stream is illegal. The algorithm illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> would implement the INV bit to generate the stream as: (LSB)0000000110(MSB), (LSB)0101010011(MSB), (LSB)1010100010(MSB), which does not contain an illegal sequence. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The present inventors tested different brands of DVI 1.0 compliant receivers and found most of the brands correctly decoded the algorithm described herein above with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. A computer program source code written in the &lsquo;C&rsquo; computer programming language and used to test the encoding algorithm shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is set forth in Appendix &lsquo;A&rsquo; attached hereto. Specifically, the computer programs use sequences of random numbers to test for the effective removal of rogue characters that are the basis of the algorithm for controlling the &lsquo;INV&rsquo; signal, and therefore are the basis for the validation of the algorithm set forth in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In summary explanation of the above, the present invention is directed to an encoding scheme that simplifies the TMDS encoding algorithm described in DVI 1.0, while retaining compatibility with most existing DVI receivers. The generation of the Transition Control bit has been removed; and although the INV bit has a similar function to the DC bit in the DVI 1.0 standard, the algorithm for deriving it is very different. In the present algorithm, no attempt is made to maintain a DC balance on the cable. Instead, the INV bit is set to a &lsquo;1&rsquo; for the purpose of removing &lsquo;rogue&rsquo; character sequences; otherwise it is always set to a &lsquo;0&rsquo;. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> This invention has been described in considerable detail in order to provide those skilled in the digital visual interface art with the information needed to apply the novel principles and to construct and use such specialized components as are required. In view of the foregoing descriptions, it should be apparent that the present invention represents a significant departure from the prior art in construction and operation. However, while particular embodiments of the present invention have been described herein in detail, it is to be understood that various alterations, modifications and substitutions can be made therein without departing in any way from the spirit and scope of the present invention, as defined in the claims which follow. 
<image file="US20030002585A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030002585A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030002585A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030002585A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030002585A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030002585A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030002585A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030002585A1-20030102-P00008.TIF" id="EMI-00008"></image>
<image file="US20030002585A1-20030102-P00009.TIF" id="EMI-00009"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of expanding 8-bit video data to a 10-bit serial word comprising the steps of: 
<claim-text>performing an exclusive OR operation on the LSB of the video data and a number defined by an INV bit to generate a serial word LSB; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word LSB, the second LSB of the video data and the number defined by the INV bit to generate the second LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word second LSB, the third LSB of the video data and the number defined by the INV bit to generate the third LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word third LSB, the fourth LSB of the video data and the number defined by the INV bit to generate the fourth LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word fourth LSB, the fifth LSB of the video data and the number defined by the INV bit to generate the fifth LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word fifth LSB, the sixth LSB of the video data and the number defined by the INV bit to generate the sixth LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word sixth LSB, the seventh LSB of the video data and the number defined by the INV bit to generate the seventh LSB of the serial word; </claim-text>
<claim-text>performing an exclusive OR operation on the serial word seventh LSB, the eighth LSB of the video data and the number defined by the INV bit to generate the eighth LSB of the serial word; </claim-text>
<claim-text>setting the ninth LSB of the serial word to the number one; and </claim-text>
<claim-text>setting the tenth LSB of the serial word to the number defined by the INV bit, wherein the number defined by the INV bit is a &lsquo;1&rsquo; whenever a rogue character sequence occurs upon expanding the 8-bit video data to a 10-bit serial word, and wherein the number defined by the INV bit is a &lsquo;0&rsquo; otherwise. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of expanding 8-bit video data to a 10-bit serial word according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of setting the tenth LSB of the serial word to the number defined by the INV bit, wherein the number defined by the INV bit is a &lsquo;1&rsquo; whenever a rogue character sequence occurs upon expanding the 8-bit video data to a 10-bit serial word, and wherein the number defined by the INV bit is a &lsquo;0&rsquo; otherwise comprises the step of setting the tenth LSB of the serial word to the number &lsquo;1&rsquo; whenever any character generates a reserved synchronization character upon encoding. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of expanding 8-bit video data to a 10-bit serial word according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of setting the tenth LSB of the serial word to the number defined by the INV bit, wherein the number defined by the INV bit is a &lsquo;1&rsquo; whenever a rogue character sequence occurs upon expanding the 8-bit video data to a 10-bit serial word, and wherein the number defined by the INV bit is a &lsquo;0&rsquo; otherwise further comprises the step of setting the tenth LSB of the serial word to the number &lsquo;1&rsquo; whenever a sequence of two adjacent synchronization characters appears in any position across a span of three consecutive stream characters. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of expanding 8-bit video data to a 10-bit serial word according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of transmitting the 10-bit serial word across an interconnecting cable in a digital visual interface compliant system. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method of expanding video data to a serial word comprising the steps of: 
<claim-text>encoding a first bit of video data and a rogue character sequence removal bit to generate a first bit of the serial word; </claim-text>
<claim-text>encoding a second bit of video data, the first bit of the serial word, and the rogue character sequence removal bit to generate a second bit of the serial word; </claim-text>
<claim-text>encoding a third bit of video data, the second bit of the serial word, and the rogue character sequence removal bit to generate a third bit of the serial word; </claim-text>
<claim-text>encoding a fourth bit of video data, the third bit of the serial word, and the rogue character sequence removal bit to generate a fourth bit of the serial word; </claim-text>
<claim-text>encoding a fifth bit of video data, the fourth bit of the serial word, and the rogue character sequence removal bit to generate a fifth bit of the serial word; </claim-text>
<claim-text>encoding a sixth bit of video data, the fifth bit of the serial word, and the rogue character sequence removal bit to generate a sixth bit of the serial word; </claim-text>
<claim-text>encoding a seventh bit of video data, the sixth bit of the serial word, and the rogue character sequence removal bit to generate a seventh bit of the serial word; </claim-text>
<claim-text>encoding an eighth bit of video data, the seventh bit of the serial word, and the rogue character sequence removal bit to generate an eighth bit of the serial word; </claim-text>
<claim-text>setting a ninth bit of the serial word to the number &lsquo;1&rsquo;; and </claim-text>
<claim-text>setting a tenth bit of the serial word to a number defined by the rogue character sequence removal (INV) bit, wherein the number defined by the INV bit is a &lsquo;1&rsquo; whenever a rogue character sequence occurs upon expanding the video data to a serial word, and wherein the number defined by the INV bit is a &lsquo;0&rsquo; otherwise. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of expanding video data to a serial word according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein the step of setting a tenth bit of the serial word to a number defined by the INV bit comprises the step of setting the tenth bit of the serial word to the number &lsquo;1&rsquo; whenever any character generates a reserved synchronization character upon encoding. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of expanding video data to a serial word according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein the step of setting a tenth bit of the serial word to a number defined by the INV bit comprises the step of setting the tenth bit of the serial word to the number &lsquo;1&rsquo; whenever a sequence of two adjacent synchronization characters appears in any position across a span of three consecutive stream characters. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of expanding video data to a serial word according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> further comprising the step of transmitting the serial word across an interconnecting cable in a digital visual interface compliant system. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method of expanding video data to generate a serial word suitable for transmission across an interconnecting cable in a digital visual interface compliant system, the method comprising the steps of: 
<claim-text>encoding a plurality of video data bits to generate all of the bits other than the two most significant bits of a serial word; </claim-text>
<claim-text>setting the next to the most significant bit of the serial word to the number &lsquo;1&rsquo;; and </claim-text>
<claim-text>setting the most significant bit of the serial word to a number defined by a rogue character sequence removal (INV) bit, wherein the number defined by the INV bit is a &lsquo;1&rsquo; whenever a rogue character sequence occurs upon expanding the video data to a serial word, and wherein the number defined by the INV bit is a &lsquo;0&rsquo; otherwise. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the step of setting the most significant bit of the serial word to a number defined by the INV bit comprises the step of setting the most significant bit of the serial word to the number &lsquo;1&rsquo; whenever any character generates a reserved synchronization character upon encoding. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the step of setting the most significant bit of the serial word to a number defined by the INV bit comprises the step of setting the most significant bit of the serial word to the number &lsquo;1&rsquo; whenever a sequence of two adjacent synchronization characters appears in any position across a span of three consecutive stream characters. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the step of encoding a plurality of video data bits to generate all of the bits other than the two most significant bits of a serial word comprises the steps of: 
<claim-text>encoding a first bit of video data and the rogue character sequence removal bit to generate a first bit of the serial word; </claim-text>
<claim-text>encoding a second bit of video data, the first bit of the serial word, and the rogue character sequence removal bit to generate a second bit of the serial word; </claim-text>
<claim-text>encoding a third bit of video data, the second bit of the serial word, and the rogue character sequence removal bit to generate a third bit of the serial word; </claim-text>
<claim-text>encoding a fourth bit of video data, the third bit of the serial word, and the rogue character sequence removal bit to generate a fourth bit of the serial word; </claim-text>
<claim-text>encoding a fifth bit of video data, the fourth bit of the serial word, and the rogue character sequence removal bit to generate a fifth bit of the serial word; </claim-text>
<claim-text>encoding a sixth bit of video data, the fifth bit of the serial word, and the rogue character sequence removal bit to generate a sixth bit of the serial word; </claim-text>
<claim-text>encoding a seventh bit of video data, the sixth bit of the serial word, and the rogue character sequence removal bit to generate a seventh bit of the serial word; and </claim-text>
<claim-text>encoding an eighth bit of video data, the seventh bit of the serial word, and the rogue character sequence removal bit to generate an eighth bit of the serial word. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of expanding video data to generate a serial word according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising the step of transmitting the serial word across an interconnecting cable in a digital visual interface compliant system.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002585A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002585A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
