<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005376A1-20030102-D00000.TIF SYSTEM "US20030005376A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00001.TIF SYSTEM "US20030005376A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00002.TIF SYSTEM "US20030005376A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00003.TIF SYSTEM "US20030005376A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00004.TIF SYSTEM "US20030005376A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00005.TIF SYSTEM "US20030005376A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00006.TIF SYSTEM "US20030005376A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00007.TIF SYSTEM "US20030005376A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00008.TIF SYSTEM "US20030005376A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005376A1-20030102-D00009.TIF SYSTEM "US20030005376A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005376</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09971934</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20011009</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-26070</doc-number>
</priority-application-number>
<filing-date>20010514</filing-date>
<country-code>KR</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G01R031/28</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>714</class>
<subclass>724000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for automatically analyzing and managing loss factors in test process of semiconductor integrated circuit devices</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Kyu</given-name>
<middle-name>Sung</middle-name>
<family-name>Lee</family-name>
</name>
<residence>
<residence-non-us>
<city>Cheonan-city</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Ae</given-name>
<middle-name>Yong</middle-name>
<family-name>Chung</family-name>
</name>
<residence>
<residence-non-us>
<city>Cheonan-city</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Sung</given-name>
<middle-name>Ok</middle-name>
<family-name>Kim</family-name>
</name>
<residence>
<residence-non-us>
<city>Cheonan-city</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>JONES VOLENTINE, P.L.L.C.</name-1>
<name-2></name-2>
<address>
<address-1>Suite 150</address-1>
<address-2>12200 Sunrise Valley Drive</address-2>
<city>Reston</city>
<state>VA</state>
<postalcode>20191</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method automatically analyzes and manages loss factor data of test processes in which a great number of IC devices are tested as a lot with a number of testers. The lot contains a predetermined number of identical IC devices, and the lot test process is performed sequentially according to a predetermined number of test cycles. The system include a means for verifying test results for each of the test cycles and for determining whether or not a re-test is to be performed and an IC device loading/unloading means for loading IC devices to be tested and contained in the lot to a test head and for unloading the tested IC devices from the test head by sorting the tested IC devices according to the test results. The system also includes raw data generating means for generating raw data on the basis of time data occurring when the test process is performed; data calculating means for calculating testing time data, index time data based on the raw data, and loss time data; data storage means for storing the raw data and the calculated data; and data analyzing and outputting means for analyzing the raw data and the calculated data according to the lots, the plurality of testers and the IC device loading/unloading means and for outputting the analyzed output through an user interface. The test system includes testers, a server system and terminal computer, and the server system is provided with data storage means for integrally manipulating time data generated by the testers according to lots and test cycles and for storing manipulated time data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to a technology for testing semiconductor integrated circuit (IC) devices, and more particularly to a system and a method for automatically analyzing and managing loss factors in the test process. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> After manufacture and prior to shipment, semiconductor IC devices are typically subjected to a number of tests to verify their performance and reliability. Among these is an electrical performance test. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The electrical performance test may include a DC test, an AC test and a functional test. The DC test is to verify DC characteristics of an IC device by performing an open/short test, measuring input currents, output voltages, power supply currents, etc. The AC test measures timings of an IC device by applying input pulse signals to input terminals of the device to check operational characteristics such as input/output propagation delay time (or access time), starting and finalized time of input and output signals, etc. In the functional test, test patterns generated from a pattern generator are transformed into pulse signals having a normal level and applied to a Device Under Test (DUT). The output signals from the DUT are compared to reference signals, for instance in the case of memory devices, to verify read/write functions and mutual interference of each of the memory cells during actual operation. Generally, a dynamic functional test combining the AC and functional tests is performed. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Conventional test systems for the electrical performance sort the IC devices into a number of &ldquo;bin&rdquo; categories according to the test results. For example, the semiconductor devices classified as &ldquo;BIN 1&rdquo; (i.e., bin category 1) are those that pass, or fall within the electrical performance specification, for all test items. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The test process constitutes a significant portion of the manufacture of semiconductor IC devices in terms of both time and expense. For testing mass-produced IC devices, expensive test systems and highly efficient handler systems are necessary. As the electrical performance of IC devices increasingly improves, the expense and time in the testing process grows higher and longer. As a result, loss factors found in the test process significantly affect the yield and productivity of IC devices more than expected before. The test process is commonly performed by lots in which a great number, e.g., one thousand (1,000) of IC devices are contained. The loss factors that may be caused in the lot test include time losses such as actual operation of the test system, loading, unloading, indexing, instantaneous stoppage, failure repair, lot change and re-testing. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> However, in the conventional test process, the loss factor data are collected manually by operators or organized solely based on the practical experiences of test engineers. Accordingly, the loss factor data varies depending on the operators or engineers and therefore are not reliable. Furthermore, there exist loss factors that cannot be traced manually or empirically, which makes impossible the analytical collection and management of data concerning the loss factors. As the need of time-to-market of small-numbered and various kinds of semiconductor IC devices becomes more pressing, the improvement in the yield and productivity of IC devices increases in importance. Therefore, it would be highly desirable to reduce the loss factors and optimize the operational efficiency of test systems. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Moreover, it is necessary to efficiently and integrally control the test process performed by a tremendously large number of testers. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> It is an object of this invention to automatically analyze and manage loss factors occurring in a test process. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Another object of this invention is to quickly deal with losses in a test process and to improve the efficiency of operation of a test system. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Further, it is also an object of this invention to precisely, analytically and quickly collect various time data occurring in the test process. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one aspect, the present invention is a system for automatically analyzing and managing loss factors occurring in test processes in which a great number of IC devices are tested lot by lot with a number of testers. The lot contains a predetermined number of identical IC devices, and the test process for the lot is performed sequentially according to a predetermined number of test cycles. The system comprises a means for verifying test results for each of the test cycles and for determining if a re-test is to be performed or not; IC device loading/unloading means for loading IC devices to be tested and contained in the lot to a test head and for unloading the tested IC devices from the test head by sorting the tested IC devices according to the test results; raw data generating means for generating raw data on the basis of time data occurring when the test process is performed; data calculating means for calculating testing time data, index time data based on the raw data, and loss time data; data storage means for storing the raw data and the calculated data; and data analyzing and outputting means for analyzing the raw data and the calculated data according to the lots, the plurality of testers and the IC device loading/unloading means and for outputting the analyzed output through an user interface. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In another aspect, the present invention is a system comprising: test systems each including a plurality of testers operated by a dedicated test program and IC devices loading/unloading means for loading IC devices to be tested into the tester and for unloading and sorting the tested IC devices depending on test results; a server system including data storage means for integrally manipulating time data generated by the test systems according to the plurality of lots and test cycles and for storing the manipulated time data; terminal systems electrically interconnected to the server system and communicating with operators with an user interface; and the testers and/or server system comprising raw data generation means for generating raw data based on the time data occurring during the test process and data calculating means for calculating test time data, index time data and loss time data based on the raw data. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In a further aspect, the present invention is a method for automatically analyzing and managing loss factors occurring in a test process in which IC devices are tested lot by lot with a number of testers, each lot containing a predetermined number of identical IC devices, and the test process for each lot being performed sequentially according to a plurality of test cycles, said method comprising steps of: generating raw data for each of the plurality of test cycles and in real-time according to the progress of the test process; generating test time data and index time data for each test cycle based on the generated raw data; calculating loss time data based on the raw data, test time data and index time data; generating and storing test process data based on data obtained from the step of calculating loss time data; and analyzing the test process data and outputting the analyzed result to an user interface. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> These and other features, and advantages, will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings. It is important to point out that the illustrations may not necessarily be drawn to scale, and that there may be other embodiments of this invention that are not specifically illustrated but which will still fall under the scope of the present invention. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing the overall structure of a system for automatically analyzing and managing loss factors in a process for testing semiconductor integrated circuit devices. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flow chart showing a method of automatically analyzing and managing loss factors in a test process of semiconductor integrated circuit devices. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow chart of a raw data generating process. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow chart of a test process in terms of operations of a tester and a handler. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a time data extracting method. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a schematic block diagram of a system for automatically analyzing and managing loss factors in a test process of semiconductor integrated circuit devices. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an exemplary user interface suitable for use in analyzing and managing loss factors in a test process of semiconductor integrated circuit devices. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows another exemplary user interface suitable for use in analyzing and managing loss factors in a test process of semiconductor integrated circuit devices. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows still another exemplary user interface suitable for use in analyzing and managing loss factors in a test process of semiconductor integrated circuit devices.</paragraph>
</section>
</summary-of-invention>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Semiconductor IC devices are tested physically and/or electrically at numerous intervals during the overall fabrication process. However, the more critical tests of semiconductor devices are conducted during the latter portions of the fabrication and assembly processes. These test processes are commonly referred to as quality assurance (QA) tests and final testing of the devices. For ICs, these QA and final tests typically occur after the wafer fabrication and assembly processes, or when the IC chip is fully assembled or otherwise considered complete. The description herein mainly outlines the final testing performed after the IC devices&apos; wafer fabrication and assembly processes are completed. However, those who have ordinary skill in the pertinent art could easily understand that the present invention can be applied to various test processes and is not limited to final testing. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Typically, during a final test process, the static and dynamic electrical performance characteristics of each assembled semiconductor device are tested to ensure that the device meets stringent design requirements and customer specifications. Those devices that pass these final tests are then theoretically ready to be packaged and shipped to customers. Semiconductor manufacturers that use existing final test processes typically test the assembled or completed semiconductor devices by lot (about 1,000 devices/lot). Each device in the lot is passed through an automated or semi-automated test system, which contains equipment that measures the device&apos;s AC, DC and parametric or dynamic electric performance characteristics. The test equipment compares each device&apos;s performance characteristics with established design criteria and/or customer requirements, and sorts the devices according to the results. Generally, the devices are sorted according to their having passed or failed the tests. The passed devices are subjected to a sampling test (QA test) before the final shipment. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a system for automatically analyzing and managing loss factors occurring in a test process according to the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In this embodiment, the system includes a testing system <highlight><bold>10</bold></highlight>, a server system <highlight><bold>20</bold></highlight> and a terminal system <highlight><bold>30</bold></highlight>. The testing system <highlight><bold>10</bold></highlight> includes a plurality of testers <highlight><bold>12</bold></highlight> and handlers <highlight><bold>15</bold></highlight>. The tester <highlight><bold>12</bold></highlight> includes a digital processor (e.g., a CPU) and associated electronics, and is software driven. The tester <highlight><bold>12</bold></highlight> applies test signals to IC devices to be tested (not shown) and compares output signals from the IC devices with predetermined reference signals to provide test result signals. Typically, a test process is performed with IC devices socket-mounted on a test board. The test board is provided with circuits for sending and receiving electrical signals to and from the IC devices. The tester <highlight><bold>12</bold></highlight> is, for example, available from Advantest Corporation or Ando Corporation, both in Japan. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The handler <highlight><bold>15</bold></highlight> conveys IC devices to be tested from a carrier tray to a test tray. Further, the handler <highlight><bold>15</bold></highlight> places each of the IC devices in the test tray into an electrical socket located on the operating surface of the test board and electrically interconnects the tester <highlight><bold>12</bold></highlight> and the loaded IC devices. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The tester <highlight><bold>12</bold></highlight>, under the control of resident software routines, provides instruction signals to, and receives test data from, the test board circuits and thus determines the performance or quality of each IC device being tested. The tester <highlight><bold>12</bold></highlight> sends binning (i.e., assorting) instruction signals, via a data/command communication cable <highlight><bold>16</bold></highlight>, to the handler <highlight><bold>15</bold></highlight>. Based on the binning signals, the handler <highlight><bold>15</bold></highlight> sorts the tested IC devices and conveys them into an appropriate carrier tray (e.g., pass or fail tray). Though the system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes a separate handler, it is, of course, possible to use an integrated handler with the tester. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The throughput of the handler <highlight><bold>15</bold></highlight> is determined mainly by its mechanical conditions and commonly is described by the handler&apos;s &ldquo;index time.&rdquo; The index time is determined by distances for moving trays and devices within the handler as well as by the speed and acceleration of the movement, the number of physical sort categories and the transmission rate of the electrical tester/handler interface. Another parameter, which will influence the throughput of the handler, is the actual test time for the devices. The actual test time can be represented by the operation time of the CPU of a tester. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The server system <highlight><bold>20</bold></highlight> includes a server computer <highlight><bold>22</bold></highlight> for calculating loss factors and a database <highlight><bold>25</bold></highlight>. The server computer <highlight><bold>22</bold></highlight> performs an overall management and processing of time data generated from the test system <highlight><bold>10</bold></highlight> consisting of a pair of a tester <highlight><bold>12</bold></highlight> and a handler <highlight><bold>15</bold></highlight>. Generated time data and loss data calculated on the basis of the time data are stored into the database <highlight><bold>25</bold></highlight>, which is under control of the server computer <highlight><bold>20</bold></highlight>. The stored data will be explained in detail below. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The terminal system <highlight><bold>30</bold></highlight> comprises a plurality of computer terminals <highlight><bold>32</bold></highlight>. The computer terminals <highlight><bold>32</bold></highlight> analyze loss factor data and, based on the analyzed data, provide output data through user interfaces such as standard time data viewers, loss factor reporters, index time analyzers, etc. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The test system <highlight><bold>10</bold></highlight>, server computer <highlight><bold>22</bold></highlight> and terminal system <highlight><bold>30</bold></highlight> are connected to a network <highlight><bold>26</bold></highlight>, which may be, for example an Ethernet. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows overall sequences for automatically analyzing and managing loss factors occurring in a test process according to the present invention. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In the present invention, time data for the whole process from the beginning of operation of the test system to the end is generated. The time data can be used as raw data for analyzing loss factors occurring during the test process and should be reflected in real-time to the test process. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, raw data is generated in real-time as the test process progresses (step <highlight><bold>51</bold></highlight>). On the basis of the raw data, test time data and index time data are calculated (step <highlight><bold>52</bold></highlight>), and loss factors are calculated in the form of time-loss data (step <highlight><bold>53</bold></highlight>). The test process is performed by lots each of which contains a predetermined number of identical semiconductor IC devices. In order to control a mass test process for many test systems applied to different lots and different devices, the raw data, test time data and index time data are generated and calculated for each test cycle of each lot. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Based on time data generated in steps <highlight><bold>51</bold></highlight>, <highlight><bold>52</bold></highlight> and <highlight><bold>53</bold></highlight>, test process data are generated and stored according to the sequence of the test lot (step <highlight><bold>54</bold></highlight>). The test process data means integrally processed data for each of the plurality of lots, each of the semiconductor IC devices under test, and each of the test systems. Loss factors in a test process are managed by providing user interfaces according to the present invention which can analyze loss data (step <highlight><bold>55</bold></highlight>) and provide status viewer (step <highlight><bold>56</bold></highlight>), loss reporter (step <highlight><bold>57</bold></highlight>) and index time analyzer (step <highlight><bold>58</bold></highlight>) functions. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow chart of a raw data generating process. A plurality of semiconductor IC chips tested as a lot are determined to pass or fail according to test results. When a lot test begins by starting a test program (step <highlight><bold>60</bold></highlight>), the start time data of a tester is extracted (step <highlight><bold>61</bold></highlight>). The test program is a program described by a test description language (also referred to as &ldquo;TDL&rdquo;). The test description language is structured by a hardware description language such as HDL or VHDL. The test program has the form of source code. Operators or test engineers provide necessary test parameters in the test program to define the test operation in the hardware of the semiconductor test system. The test program controls the operation of the tester and is described with test sequence and binning processes. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> When each test cycle starts (step <highlight><bold>62</bold></highlight>), the start time data of a test cycle is extracted (step <highlight><bold>63</bold></highlight>). Test cycle start time data can be generated as raw data by e.g., extracting a start time of each test cycle from a test program. When each cycle ends (step <highlight><bold>64</bold></highlight>), termination time for each test cycle is extracted (step <highlight><bold>65</bold></highlight>), which can be produced by e.g., modifying the test program. Each test cycle can be identified by the test program. For instance, in the case of memory IC devices, DC, AC and functional tests constitute a single test cycle. When each test cycle ends, test results are confirmed to determine if a re-test should be performed (step <highlight><bold>66</bold></highlight>). </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> If DUTs pass the determination step <highlight><bold>66</bold></highlight>, it is determined whether the number of test cycles equals to a predetermined number &lsquo;N&rsquo; (step <highlight><bold>67</bold></highlight>), and if so the sequence goes to the next test cycle (step <highlight><bold>68</bold></highlight>), otherwise the sequence returns to the step <highlight><bold>62</bold></highlight> to continue the current test process. The steps <highlight><bold>63</bold></highlight>, <highlight><bold>64</bold></highlight>, <highlight><bold>65</bold></highlight> and <highlight><bold>66</bold></highlight> are repeated &lsquo;N&rsquo; times so long as the DUTs pass the determination step <highlight><bold>66</bold></highlight>. The number &lsquo;N&rsquo; is a positive integer and means the number of test cycles performed for the corresponding lot. This number is designated by the test program and may vary depending on the type of IC devices to be tested, the testers to be used and testing items. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> When DUTs can not pass the step <highlight><bold>66</bold></highlight> and the sequence goes to the re-test step, the start time of the re-test is extracted (step <highlight><bold>70</bold></highlight>), and of the re-test cycles begin (step <highlight><bold>71</bold></highlight>). Repetition of extracting re-test cycle start time (step <highlight><bold>72</bold></highlight>), extracting re-test termination time (step <highlight><bold>73</bold></highlight>), determination of the number of re-test cycles &lsquo;M&rsquo; (step <highlight><bold>74</bold></highlight>) and increasing the number of re-test cycle (step <highlight><bold>75</bold></highlight>) is similar to the process explained above for the first test procedure. The number &lsquo;M&rsquo; is designated and determined by similar manner as the number &lsquo;N&rsquo;. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> If the condition &lsquo;test cycle&equals;N&rsquo; and/or &lsquo;re-test cycle&equals;M&rsquo; are met, the sequence proceeds to the lot test termination step <highlight><bold>76</bold></highlight> and extracts and stores the termination time (steps <highlight><bold>77</bold></highlight> and <highlight><bold>78</bold></highlight>). </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The raw data generation can be made by modifying existing test programs in consideration of the operating system loaded on the testers. For example, for a semiconductor memory device testing system available from Advantest, test programs can be modified to include the following subroutines for generating raw data. The following subroutines can be implemented by ATL (Advanced Test Language) programming language.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>GENERAL&lsqb;5&rsqb; INTIM1 &equals; 0</entry>
</row>
<row>
<entry></entry>
<entry>STRING ATIM(6) &equals; &ldquo;00&rdquo;</entry>
</row>
<row>
<entry></entry>
<entry>STRING STTM1(20) &equals; &ldquo;00&rdquo;</entry>
</row>
<row>
<entry></entry>
<entry>STRING ENTER(1) &equals;&quest;&lt;&num;0A&gt;&quest;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>READ TIMER TO INTIM1 /* CPU TIME READ */</entry>
</row>
<row>
<entry></entry>
<entry>ATIM &equals; ASCII(INTIM1)</entry>
</row>
<row>
<entry></entry>
<entry>STTM1 &equals; GDAY(1) /* CYCLE END TIME READ */</entry>
</row>
<row>
<entry></entry>
<entry>SEARCH ASC CPUTIM : WTCPU1</entry>
</row>
<row>
<entry></entry>
<entry>CLEAR&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>APPEND&excl; 9 W ASC CPUTIM</entry>
</row>
<row>
<entry></entry>
<entry>WRITE&excl; 9 ENTER, ATIM, &ldquo; &rdquo;, STTM1</entry>
</row>
<row>
<entry></entry>
<entry>CLOSE&excl; 9</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>/* If CPUTIM.ASC file exists, append one cycle, and if not, create new file */</entry>
</row>
<row>
<entry></entry>
<entry>APPD2:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>SEARCH ASC CPUTIM2 : WTCPU2</entry>
</row>
<row>
<entry></entry>
<entry>CLEAR&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>APPEND&excl; 9 W ASC CPUTIM2</entry>
</row>
<row>
<entry></entry>
<entry>WRITE&excl; 9 W ASC CPUTIM2</entry>
</row>
<row>
<entry></entry>
<entry>CLOSE&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>GOTO SDISP</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>WTCPU1:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>CLEAR&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>OPEN&excl; 9 W ASC CPUTIM</entry>
</row>
<row>
<entry></entry>
<entry>WRITE&excl; 9 ENTER, ATIM, &ldquo; &rdquo;, STTIM1</entry>
</row>
<row>
<entry></entry>
<entry>CLOSE&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>GOTO APPD2</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>WTCPU2:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>CLEAR&excl; 9</entry>
</row>
<row>
<entry></entry>
<entry>OPEN&excl; 9 W ASC CPUTIM2</entry>
</row>
<row>
<entry></entry>
<entry>WRITE&excl; 9 ENTER, ATIM, &ldquo; &rdquo;, STTM1</entry>
</row>
<row>
<entry></entry>
<entry>CLOSE&excl; 9</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>SDISP:</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow chart of a test process in terms of the operations of a tester and a handler. For the steps corresponding to those of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the same reference numerals are used. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> When a lot test for a prior sequence is completed (step <highlight><bold>79</bold></highlight>), the lot is changed and a new lot test is started for the new lot (step <highlight><bold>60</bold></highlight>). Accordingly, the time between step <highlight><bold>79</bold></highlight> and step <highlight><bold>60</bold></highlight> is called the lot exchanging time. The starting of a lot test corresponds to the handler&apos;s starting step <highlight><bold>84</bold></highlight>. The major purpose of the handling system is to move the devices under test from the carrier tray into the test tray (step <highlight><bold>85</bold></highlight>), and to carry the DUTs to a heating/cooling chamber to control the temperature of the DUTs for the hot or cool test (step <highlight><bold>86</bold></highlight>). Generally, the heating raises the temperature of the DUTs to about 83&deg; C., while in the cool test the temperature of the DUTs is set to be &minus;5&deg; C. The time for heating or cooling the devices are referred to as &lsquo;soaking time.&rsquo; The DUTs heated or cooled are loaded to a test head where the test system and the DUTs are electrically interconnected. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> After loading, a loading completion signal is transmitted to the tester which starts a test program (step <highlight><bold>80</bold></highlight>) to begin a test cycle (step <highlight><bold>62</bold></highlight>). All of the testing items are applied to DUTs and the current test cycle is completed (step <highlight><bold>64</bold></highlight>). During the test cycle, a calibrating module operates, if necessary, and starting and ending times of the module are extracted (step <highlight><bold>81</bold></highlight>). </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The operation of the calibrating module means the running of a calibration program. For instance, when the DUTs are changed, the temperature of the tester deviates from a standard range, a timing of a test program is changed or when global parameters of the test program are varied, the calibration program may be executed. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> A time between the test cycle start step <highlight><bold>62</bold></highlight> and the test cycle completion step <highlight><bold>64</bold></highlight> is extracted as test time data. The calibration time data can be obtained by the duration between the calibration module start step <highlight><bold>81</bold></highlight> and the calibration module termination step <highlight><bold>82</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> When the test cycle terminates, depending on the number of test cycles performed, a new test cycle begins, or the sequence goes to the first test termination step <highlight><bold>83</bold></highlight>. The time between the first test termination step <highlight><bold>83</bold></highlight> and the lot test termination step <highlight><bold>76</bold></highlight> is generated as re-test time data. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> On the other hand, when the test cycle terminates, a termination signal is sent to the handler that physically sorts the IC devices tested into BIN categories according to their test results (step <highlight><bold>88</bold></highlight>). A time between the DUTs loading step <highlight><bold>87</bold></highlight> and BIN sorting step <highlight><bold>88</bold></highlight> is stored as an indexing time data. When the load test ends, the handler unloads the IC devices sorted into the BIN categories to the tray (step <highlight><bold>89</bold></highlight>). During the test, jamming time data, during which the testing equipment is temporarily troubled, is extracted. The jamming time refers to a temporal or transient failure of the equipment, which can be repaired by simple treatment. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a process for extracting time data. This time data extracting process is logic for calculating time data by itemizing the procedures of testing a lot in a single test system. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the loading time data is calculated from the time when a handler starts its operation to the time when the first test cycle starts. The calibration time means a sum of time values obtained by certain test time values which are greater by a constant value C1 than an average test time and subtracted by the average test time. As explained before, the theoretical value of the calibration time is an operation time of a calibration module (i.e., the difference between the start and ending times of the calibrating program). However, when the calibrating value can not produce the start and ending times, an approximate value to the calibration time can be calculated by first obtaining larger operation times by a predetermined value than an average CPU operation time (which is defined by the difference between the ending and start times of a test cycle) and then subtracting the average time from the obtained larger values. Here, the constant C1 is obtained empirically or statistically and &lsquo;2&rsquo; in this embodiment. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The jamming time data is selected from indexing times which are equal to or greater than a constant C2 and equal to or smaller than a constant C3. In an embodiment, the constant C2 is sixty (60) seconds and the constant C3 is five (5) minutes. These values are determined empirically or statistically. Indexing time greater than C3, e.g., five (5) minutes may be classified and stored as a failure time data. In this embodiment, the failure time refers to long-term failure which can not be repaired by simple treatment and occurs by mechanical problem of a tester or a handler. The jamming time data may be caused, for example, when the IC devices during transfer by the handler are dropped on the floor or the IC devices are caught within the equipment. The long-term failure may occur, e.g., either when the equipment does not work properly because of the end of the lifespan of components, or when operators handle the equipment incorrectly. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The re-test time data is generated between the termination time of a test cycle and the start time of a re-test cycle. The unloading time data is the time when the lot test terminates after the final test cycle ends. The exchange time data is obtained by the time when the current lot starts after the previous lot test ends. The socket-off time data is a converted time value of a loss resulting when sockets in a test board of a test head fail during a parallel test. For example, supposing that sixty-four (64) sockets are provided in a single test board and it takes sixty-four (64) minutes for testing one test board, then testing of one IC device under test takes one (1) minute. If six (6) of the sixty-four (64) sockets are socket-off-failed, the test will be done for fifty-eight (58) sockets. However, even in this case, the test duration is unchanged and takes sixty-four (64) minutes. Accordingly, the test time for one IC device under test becomes longer to be one (1) minute and six (6) seconds. This excess of six (6) seconds is a kind of loss. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The loss factor data explained before including loading time data, calibration time data, jamming time data, failure time data, re-test time data, unloading time data, exchange time data and socket off time data constitutes test process loss data. However, these time data are not restricted to those explained above, and those who have ordinary skill in the art can easily understand that the loss time data varies depending on the test system and IC devices to be tested. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The test time per cycle data is generated by summation of CPU operation time of a tester in each test cycle, and index time data is produced by subtracting the termination time of (n) cycle from the start time of (n&plus;1) cycle. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram of a system for automatically analyzing and managing loss factors according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> A tester <highlight><bold>12</bold></highlight> comprises a data generating program <highlight><bold>82</bold></highlight>, a data storage <highlight><bold>85</bold></highlight> and an interface <highlight><bold>86</bold></highlight>. The data generating program <highlight><bold>82</bold></highlight>: produces raw data; calculates, from the raw data, average test time and calibration time and index time data for each test cycle; and stores, in the form of a file, the calculated data into a data storage <highlight><bold>85</bold></highlight>. The tester <highlight><bold>12</bold></highlight> transfers the stored data file to a server <highlight><bold>22</bold></highlight> through the interface <highlight><bold>86</bold></highlight> and a network (e.g., &lsquo;26&rsquo; of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The server <highlight><bold>22</bold></highlight> includes a loss data calculating program <highlight><bold>90</bold></highlight> and first and second tables <highlight><bold>93</bold></highlight> and <highlight><bold>95</bold></highlight>. Among data from the tester <highlight><bold>12</bold></highlight>, average test time data and average index time data are stored into the first table <highlight><bold>93</bold></highlight>, while index time data for each test cycle is stored into the second table <highlight><bold>95</bold></highlight>. When data are input into the second table <highlight><bold>95</bold></highlight>, the loss data calculating program <highlight><bold>90</bold></highlight> runs and calculates the loss factor data as described before. The calculated data is re-stored into the second table <highlight><bold>95</bold></highlight> and then updates the loss time data. A database (e.g., &lsquo;25&rsquo; of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) may include the first and second tables <highlight><bold>93</bold></highlight> and <highlight><bold>95</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> A terminal computer <highlight><bold>32</bold></highlight> includes a data analyzing tool <highlight><bold>96</bold></highlight>, an user interface <highlight><bold>98</bold></highlight> and a display <highlight><bold>99</bold></highlight>. The tool <highlight><bold>96</bold></highlight> analyzes a standard test time, equipment operation ratio, loss time indicator, loss ratio and the cause of loss and displays the result through the user interface <highlight><bold>98</bold></highlight> and the display <highlight><bold>99</bold></highlight>. The present invention is suitable for a production-oriented testing scheme which is designed for maximum throughput, i.e., for a maximum number of IC devices to be tested in a given time frame, because various data are analyzed based on an increased number of testers and IC devices by the data analyzing tool <highlight><bold>96</bold></highlight> and integrated and complete management of the test data is made possible. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows an exemplary user interface suitable for use in analyzing and managing loss factors in IC test process. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The user interface shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is for analyzing equipment operation time, which can be displayed either based on testers and handlers or based on products, date, processes, lot sizes and so on. Users can reference time data, various loss time, achievement ratio, socket-off ratio and yield. Further, equipment operation hours either to the whole test process or to the specific testing step can be referenced. When a filtering function is employed, abnormal equipment having an extremely low achievement ratio can be easily and quickly detected and, therefore, the cause of the problem can be analyzed easily and quickly as such. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, loss codes and a graphical diagram represent each loss factor as a percentage and identify each by its own color. Therefore, it is easy for users to detect a main cause of the loss. For example, time loss in &lsquo;re-testing&rsquo; amounts to 10.0% of the whole loss factors which includes 69.6% of testing time, when lot &lsquo;9YA152BA&rsquo; is tested. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an exemplary user interface showing an index time analyzing screen. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The analysis of index time can be done based on handlers or testers. Users can reference detailed data for each test lot. The index time is displayed by minimum, maximum and average values which may be compared and analyzed. In this embodiment, since the average index time for each of a number of handlers are represented by a bar graph, the difference between the index time of the various to handlers can be distinguished at a glance. When users click and select a specific handler, testers using such a handler are listed so that the variation of the index time can be viewed according to each of the testers. Further, detailed lot data produced from each tester and handler are displayed by clicking and choosing a specific handler or tester. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is an exemplary user interface showing a screen for analyzing standard time. The standard time analysis screen help users analyze and reference test time, index time and time per device based on products, versions, testers and handlers. In the selection of test time, users can choose one of two which includes or omits the calibration time. Even when the users do not know the exact product IC, users can reference wanted data by selecting a product type (e.g., 64M DRAM, 128M DRAM), version, and configuration (e.g., X4, X8). For example, when 16-parallel testing is performed by using a T5365 tester and MR5500 handler, the standard test time is thirty-five (35) seconds and the standard index time is two (2) seconds. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In the drawings and specification, there have been disclosed typical preferred embodiments of this invention and, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation, the scope of the present invention being set forth in the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for automatically analyzing and managing loss factors occurring in a test process in which a plurality of semiconductor IC devices are tested as a lot with a number of testers, said lot containing a predetermined number of identical IC devices, and the lot test process being performed sequentially according to a plurality of test cycles, said system comprising: 
<claim-text>a means for verifying test results for each of said test cycles and for determining whether a re-test is to be performed; </claim-text>
<claim-text>an IC device loading/unloading means for loading IC devices to be tested and contained in the lot to a test head and for unloading the tested IC devices from the test head by sorting the tested IC devices according to the test results; </claim-text>
<claim-text>a raw data generating means for generating raw data on the basis of time data occurring when the test process is performed; </claim-text>
<claim-text>a data calculating means for calculating testing time data, index time data based on the raw data, and loss time data; </claim-text>
<claim-text>a data storage means for storing the raw data and the calculated data; and </claim-text>
<claim-text>a data analyzing and outputting means for analyzing the raw data and the calculated data according to the lots, the plurality of testers and the IC device loading/unloading means and for outputting the analyzed output through a user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each of said plurality of testers comprises a central processor operated according to instructions of a test program, and the generation of the raw data is output data of the test program. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each of said plurality of testers comprises a central processor operated according to instructions of a test program, said testing time data corresponds to operation time of the central processor for each of test cycles. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said index time data is obtained by the difference between a start time of an (n&plus;1)-th test cycle and a termination time of an n-th test cycle. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said index time data corresponds to an index time of said IC device loading/unloading means. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said data storage means comprises a first table for storing test time data and index time data for each lot, and a second table for storing testing time data and index time data for each test cycle of each lot. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the second table is continuously updated according to an increase of the number of test cycle. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the loss time data includes loading time data, jamming time data, re-test time data, unloading time data and exchange time data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said loading time data is obtained by a difference between a beginning of operation of said IC device loading/unloading means and a start time of a first test cycle. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said jamming time data is calculated by an index time which is greater than a first constant and less than a second constant, where the first and second constants are determined empirically. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said re-test time data is obtained by a indifference between a start time of each re-test cycle and a termination time of each test cycle. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said unloading time data is obtained by the difference between a termination time of final test cycle among the plurality of test cycles for each lot and a termination time of test for the lot. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the exchange time data is obtained for each test cycle by the difference between a termination time of an (n&minus;1)-th test cycle and a start time of an n-th test cycle. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the loss time data further comprises calibration time data which corresponds to a sum of time values obtained by certain test time values greater by a third constant value than an average test time and subtracted by the average test time. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the loss time data further comprises failure time data which is obtained by an index time greater than a fourth constant. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the loss time data further comprises socket-off time data which is a converted time value of a loss occurring when sockets in a test board of a test head fail during a parallel test. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said user interface provides a screen interface capable of displaying an equipment operation time based on the testers, handlers, IC devices to be tested, date, processes and lot sizes, and referencing the testing time data, the loss time data, an achievement ratio, a socket-off ratio, a yield and equipment operation time data for the test process. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the user interface provides a screen interface for displaying minimum, maximum and average values of the index time data for each test lot and for indicating variations of the index time data according to the handlers. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method for automatically analyzing and managing loss factors occurring in a test process in which a plurality of semiconductor IC devices are tested as a lot with a number of testers, said lot containing a predetermined number of identical IC devices, and the lot test process being performed sequentially according to a plurality of test cycles, said method comprising: 
<claim-text>generating raw data for each of the plurality of test cycles in real-time according to progress of the test process; </claim-text>
<claim-text>generating test time data and index time data for each test cycle based on the generated raw data; </claim-text>
<claim-text>calculating loss time data based on the raw data, test time data and index time data; </claim-text>
<claim-text>generating and storing test process data based on data obtained from the step of calculating loss time data; and </claim-text>
<claim-text>analyzing the test process data and outputting an analyzed result to a user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the step of generating raw data comprises: 
<claim-text>extracting start time data of a tester; </claim-text>
<claim-text>extracting start time and termination time of a test cycle; </claim-text>
<claim-text>determining if a re-test is required by confirming a test result when a test cycle terminates; </claim-text>
<claim-text>determining if the test process continues or returns to the step of extracting start time data of a tester based on a number of test cycles performed; </claim-text>
<claim-text>starting the re-test when the re-test is determined to be required; and </claim-text>
<claim-text>extracting final termination time data when a final test cycle ends. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the plurality of time data obtained by steps of extracting start time data of a tester and extracting start time and termination time of a test cycle are generated as output data of a test program for controlling an operation of the testers. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said step for calculating loss time data produces loading time data, jamming time data, re-test time data, unloading time data and exchange time data. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said step for calculating loss time data produces calibration time data, failure time data and socket-off time data. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A system for automatically analyzing and managing loss factors occurring in a test process in which a plurality of semiconductor IC devices are tested as a lot with a number of testers, said lot containing a predetermined number of identical IC devices, and the lot test process being performed sequentially according to a plurality of test cycles, said system comprising: 
<claim-text>a plurality of test systems each including a plurality of testers operated by a dedicated test program and IC devices loading/unloading means for loading IC devices to be tested into the tester and for unloading and sorting the tested IC devices depending on test results; </claim-text>
<claim-text>a server system including data storage means for integrally manipulating time data generated by the test systems according to the plurality of lots and test cycles and for storing the manipulated time data; and </claim-text>
<claim-text>terminal systems electrically interconnected to the server system and communicating with operators with a user interface, </claim-text>
<claim-text>wherein at least one of said plurality of testers and said server system comprise, 
<claim-text>raw data generation means for generating raw data based on the time data occurring during the test process, and </claim-text>
<claim-text>data calculating means for calculating test time data, index time data and loss time data based on the raw data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein each of said plurality of testers comprises a central processor operated according to instructions of a test program, and the generation of the raw data is output data of the test program. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein each of said plurality of testers comprises a central processor operated according to instructions of a test program, said test time data corresponds to operation time of the central processor for each of test cycles. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said index time data is obtained by the difference between a start time of an (n&plus;1)-th test cycle and a termination time of an n-th test cycle. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said index time data corresponds to an index time of said IC device loading/unloading means. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said data storage means comprises a first table for storing test time data and index time data for each lot, and a second table for storing test time data and index time data for each test cycle of each lot. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the second table is continuously updated according to an increase of the number of test cycle. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the loss time data includes loading time data, jamming time data, re-test time data, unloading time data and exchange time data. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said loading time data is obtained by a difference between a beginning of operation of said IC device loading/unloading means and a start time of a first test cycle. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein saidjamming time data is calculated by an index time which is greater than a first constant and less than a second constant, wherein the first and second constants are determined empirically. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said re-test time data is obtained by a difference between a start time of each re-test cycle and a termination time of each test cycle. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said unloading time data is obtained by a difference between a termination time of a final test cycle among the plurality of test cycles for each lot and a termination time of testing for the lot. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the exchange time data is obtained by the difference between a termination time of an (n&minus;1)-th test cycle for each test cycle and a start time of an n-th test cycle. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the loss time data further comprises calibration time data which corresponds to a sum of time values obtained by certain test time values greater by a third constant value than an average test time and subtracted by the average test time. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the loss time data further comprises failure time data which is obtained by an index time greater than a fourth constant. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the loss time data further comprises socket-off time data which is a converted time value of a loss occurring when sockets in a test board of a test head fail during a parallel test. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein said user interface provides a screen interface capable of displaying an equipment operation time based on the testers, handlers, IC devices to be tested, date, processes and lot sizes, and referencing the test time data, the time loss data, an achievement ratio, a socket-off ratio, a yield and equipment operation time data for the test process. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the user interface provides a screen interface for displaying minimum, maximum and average values of the index time data for each test lot and for indicating variations of index time data according to the handlers.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005376A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005376A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005376A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005376A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005376A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005376A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005376A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005376A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005376A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005376A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
