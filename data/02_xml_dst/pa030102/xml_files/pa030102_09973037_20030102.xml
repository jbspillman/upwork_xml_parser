<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030003998A1-20030102-D00000.TIF SYSTEM "US20030003998A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030003998A1-20030102-D00001.TIF SYSTEM "US20030003998A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030003998A1-20030102-D00002.TIF SYSTEM "US20030003998A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030003998A1-20030102-D00003.TIF SYSTEM "US20030003998A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030003998A1-20030102-D00004.TIF SYSTEM "US20030003998A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030003998</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09973037</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20011010</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-199990</doc-number>
</priority-application-number>
<filing-date>20010629</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>463</class>
<subclass>043000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Video game with additive translation dictionaries</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Motomu</given-name>
<family-name>Toriyama</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Takashi</given-name>
<family-name>Katano</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>SQUARE CO., Ltd.</organization-name>
<address>
<city>Tokyo</city>
<country>
<country-code>JP</country-code>
</country>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>GREENBLUM &amp; BERNSTEIN, P.L.C.</name-1>
<name-2></name-2>
<address>
<address-1>1941 ROLAND CLARKE PLACE</address-1>
<city>RESTON</city>
<state>VA</state>
<postalcode>20191</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">When starting a new game, saved translation dictionary data is selected and compared with other translation dictionary data. Based on the comparison result, translation dictionary parts differing from the saved translation dictionary parts are determined as un-obtained parts. Data corresponding to the un-obtained parts are then retrieved from the other translation dictionary data and stored in a predetermined area of a RAM as new translation dictionary data. Further, at a game start, translation dictionary data of saved data loaded at the beginning of a game and each of translation dictionary data in a memory card are compared. Based on the comparison result, translation dictionary parts differing from the saved translation dictionary parts are determined to be un-obtained parts. Data corresponding to the un-obtained parts are obtained from each of the translation dictionary data in the memory card and stored in a predetermined area of the RAM as new translation dictionary data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present disclosure relates to subject matter contained in Japanese Patent Application No. 2001-199990, filed on Jun. 29, 2001, the disclosure of which is expressly incorporated herein by reference in its entirety.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to video games. More specifically, the present invention relates to a video game processing device to which a memory card can be connected. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Role playing games (called &ldquo;RPG,&rdquo; hereinafter) are known as one of category video games using computers. Generally, in the RPG, a character plays a role instead of its player, and a story of the game develops while the player experiences pseudo adventure by manipulating the character (called &ldquo;player character&rdquo; hereinafter). In many cases, in each set zone formed in a virtual space, a player character and a character to fight against the player character (called &ldquo;enemy character&rdquo; hereinafter) are defined. The player character advances to each zone. There, the player character fights with an enemy character who prevents a goal in the story from being achieved. The story develops if the player character defeats the enemy character. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Notably, a player character is manipulated through a button on a keypad, a joystick, and so on. The player character moves and performs a predetermined operation in response to a manipulation given on the keypad. Further, many events such as a battle scene are arranged as the story develops. The game advances when the player performs selecting operations for those events. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Further, a device for processing a conventional RPG, to which a memory card can be connected is known, which allows for a game having been stopped during play to be restarted in the state that existed just before the interruption and allows the game to be started under the same condition, even in a video game processing device located in a different place. In such a device, various data and each kind of setting data created as the game advances may be stored in a memory card as saved data for several times as necessary. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> However, in conventional video games, the memory card is used in a uniform and therefore ineffective manner. Further, if the player could not have obtained or forgot to obtain information playing an important role for advancing the game, for example, he/she only has to play the game from the beginning or from the scene near the interruption by reading out saved data, which may spoil the fun. Thus, a video game is desired which makes a memory card available for many purposes in order to advance a game efficiently. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention was made in view of the above-described problem, and it is an object of the present invention for a game program to access a part of another information data within another Memory card slot (or from another memory card, or from another data carrying apparatus), to combine and form larger information data. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> To better understand the invention, an RPG scenario is provided below describing an exemplary use of the invention. In this scenario, a player&apos;s character is guided by the player to a hypothetical base&mdash;the base of FF X. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> FF X contains an incomprehensive language, spoken by some group of characters who might have a clue to a part of the story. The player can work out this language, gradually, by finding a part of &ldquo;dictionary&rdquo; within the game. For example, a character may say &ldquo;jgnnq.&rdquo; At the beginning of the story, the player has no idea what this character is trying to say. However, if the player finds the part of the dictionary defining &ldquo;jgnnq,&rdquo; the player will be able to understand part of the language. For example, the player may find dictionary no. 1, which says to convert &ldquo;g&rdquo; to &ldquo;e&rdquo; and &ldquo;n&rdquo; to &ldquo;1.&rdquo; From that point on, the player will be able to read part of their language, for example &ldquo;jgnnq&rdquo; can now be converted to &ldquo;jellq.&rdquo; If the player finds another dictionary (for example dictionary no. 3), the player will be able to understand more of the language by adding on (or combining the dictionaries) to the already known information. If dictionary no. 3 says to convert &ldquo;j&rdquo; to &ldquo;h&rdquo; and &ldquo;q&rdquo; to &ldquo;o&rdquo;, the player will be able to understand the four letters &ldquo;g, n, j, q&rdquo; as &ldquo;e, l, h, o.&rdquo; As a result, &ldquo;jgnnq&rdquo; will be read as &ldquo;hello&rdquo;. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In this scenario, the dictionary information in the application is called the &ldquo;translation dictionary data&rdquo;. However, this does not have to be a &ldquo;dictionary data,&rdquo; but could be any kind of data within the game. The data may be separately memorized within the memory card from other game data, or at least, should be able to access the information from the game program. The game program combines this partial data to form a larger data which could influence the progression of the game. For example, player A plays the game and finds dictionary no. 1 and 3, and saves his game on memory card block no. 15. Player B plays and finds dictionary no. 1 and 2, and saves his game on Memory card block no. 17. According to the invention, player B may come to a point in the game where he is able to combine his Memory card data with A&apos;s to have more dictionary data. If player B wishes to do so, the game program will read out the other &ldquo;translation dictionary data&rdquo; within his Memory card, from another Memory card such as A&apos;s, or from another data carrying apparatus, and compare it with player B&apos;s data of block no. 17. If the program finds new data such as Player A&apos;s data from block no. 15 of dictionary no. 3, the new data will be added to the Memory card block no. 17. Then, player B will be able to read the information of dictionary no. 1 through 3, without finding it for himself. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A first aspect of the present invention is a computer-readable recording medium on which a video game program is recorded in a video game processing device to which a memory card can be connected. The program causes a computer to write saved data including acquired information acquired as the game advances in the memory card in response to player&apos;s manipulation and compare each piece of acquired information of the saved data written in the memory card with acquired information maintained in an internal memory of the video game processing device in response to player&apos;s manipulation. The computer also, based on a comparison result, obtains a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the internal memory from the acquired information of the saved data written in the memory card. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to the first aspect, a recording medium can be provided whereby the memory card can be used for many purposes and the game can advance efficiently. Thus, the reduction of interest can be prevented. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to the first aspect, the acquired information included in the saved data may be translation dictionary data. Thus, the recording medium can be provided whereby only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing, which prevents spoiling the fun. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to the first aspect, the program may be recorded to cause the computer to write predetermined saved data in the memory card into the internal memory of the video game processing device. Thus, the recording medium can be provided by which the game can be re-started under the same condition, and only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> A second aspect of the present invention is a video game program in a video game processing device to which a memory card can be connected, the program causing a computer to execute the steps of writing saved data including acquired information acquired as the game advances in the memory card in response to player&apos;s manipulation, comparing each of acquired information of the saved data written in the memory card with acquired information maintained in an internal memory of the video game processing device in response to player&apos;s manipulation, and, based on a comparison result from the comparison step, obtaining a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the internal memory from the acquired information of the saved data written in the memory card. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> According to the second aspect, the memory card can be used for many purposes and a game can be advanced efficiently. Thus, the reduction of interest can be prevented. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to the second aspect, the acquired information included in the saved data may be translation dictionary data. Thus, only the not yet obtained or &ldquo;new&rdquo; part of required information can be obtained from the memory card easily without actually playing, which allows the prevention of the reduction of interest. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to the second aspect, the program may cause the computer to execute the step of writing predetermined saved data in the memory card into the internal memory of the video game processing device may be further executed. Thus, the game can be re-started under the same condition, and only the not yet obtained or &ldquo;new&rdquo; part of required information can be obtained from the memory card easily without actually playing. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> A third aspect of the present invention is a video game processing method in a video game processing device to which a memory card can be connected, including the steps of writing saved data including acquired information acquired as the game advances in the memory card in response to player&apos;s manipulation, comparing each of acquired information of the saved data written in the memory card with acquired information maintained in an internal memory of the video game processing device in response to player&apos;s manipulation, and, based on a comparison result from the comparison step, obtaining a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the internal memory from the acquired information of the saved data written in the memory card. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> According to the third aspect, the memory card can be used for many purposes and a game can advance efficiently. Thus, the reduction of interest can be prevented. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> According to the third aspect, the acquired information included in the saved data may be translation dictionary data. Thus, only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing, which allows the prevention of spoiling the fun. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The third aspect may further include the step of writing predetermined saved data in the memory card into the internal memory of the video game processing device. Thus, the game can be re-started under the same condition, and only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> A fourth aspect of the present invention is a video game processing device, including a memory unit for storing a video game program in the video game processing device to which a memory card can be connected, a computer for executing the program read out from the memory unit, and a display device for screen display, which is provided as an output unit of the computer. In this case, the computer executes the program so as to write saved data including acquired information acquired as the game advances in the memory card in response to player&apos;s manipulation, to compare each of acquired information of the saved data written in the memory card with acquired information maintained in an internal memory of the video game processing device in response to player&apos;s manipulation, and, based on a comparison result from the comparison, to obtain a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the internal memory from the acquired information of the saved data written in the memory card. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> According to the fourth aspect, the memory card can be used for many purposes and a game can be advanced efficiently. Thus, spoiling the fun can be prevented. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> According to the fourth aspect, the acquired information included in the saved data may be translation dictionary data. Thus, only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing, which allows the prevention of the reduction of interest. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> According to the fourth aspect, the computer may further write predetermined saved data in the memory card into the internal memory of the video game processing device. Thus, the game can be re-started under the same condition, and only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing an overall system according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram showing conceptually a distinctive part of operations according to one embodiment of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart used for describing overall operations of one embodiment of the present invention; and </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram showing one example of a displayed screen according to one embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> An embodiment of the present invention will be described below with reference to the attached drawings. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing an overall system of one embodiment of the present invention. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> First, a video game machine according to one embodiment of the present invention will be described. A game machine <highlight><bold>10</bold></highlight> includes a game machine body <highlight><bold>11</bold></highlight> and a keypad <highlight><bold>50</bold></highlight> connected to an input side of the game machine body <highlight><bold>11</bold></highlight>. Further, a television set <highlight><bold>100</bold></highlight> having a cathode ray tube (CRT), a speaker, and so on is connected to an output side of the game machine body <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The game machine body <highlight><bold>11</bold></highlight> includes a central processing unit (CPU) <highlight><bold>12</bold></highlight>, a read only memory (ROM) <highlight><bold>13</bold></highlight>, a random access memory (RAM) <highlight><bold>14</bold></highlight>, a hard disk drive <highlight><bold>15</bold></highlight>, a graphics processing portion <highlight><bold>16</bold></highlight>, a sound processing portion <highlight><bold>17</bold></highlight>, a disk drive <highlight><bold>18</bold></highlight>, a communications interface portion <highlight><bold>19</bold></highlight>, a memory card reader/writer <highlight><bold>20</bold></highlight>, an input interface portion <highlight><bold>21</bold></highlight> and a bus <highlight><bold>22</bold></highlight> for connecting the components to each other. Further, the game machine body <highlight><bold>11</bold></highlight> is connected to the keypad <highlight><bold>50</bold></highlight> to which a manipulation is input via the input interface potion <highlight><bold>21</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> A cross key <highlight><bold>51</bold></highlight>, a button group <highlight><bold>52</bold></highlight>, and so on are placed on the keypad <highlight><bold>50</bold></highlight>. The button group <highlight><bold>52</bold></highlight> includes a circle button <highlight><bold>52</bold></highlight><highlight><italic>a</italic></highlight>, a cross button <highlight><bold>52</bold></highlight><highlight><italic>b</italic></highlight>, a triangle button <highlight><bold>52</bold></highlight><highlight><italic>c</italic></highlight>, and a square button <highlight><bold>52</bold></highlight><highlight><italic>d</italic></highlight>. Further, a select button <highlight><bold>55</bold></highlight> is placed on a joint portion between a base portion on which the cross key <highlight><bold>51</bold></highlight> is placed and a base portion on which the button group <highlight><bold>52</bold></highlight> is placed. Notably, several buttons such as an R1 button <highlight><bold>56</bold></highlight> and an L1 button <highlight><bold>53</bold></highlight> are placed at the side of the keypad <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The keypad <highlight><bold>50</bold></highlight> includes switches for cooperating with the cross key <highlight><bold>51</bold></highlight>, the circle button <highlight><bold>52</bold></highlight><highlight><italic>a</italic></highlight>, the cross button <highlight><bold>52</bold></highlight><highlight><italic>b</italic></highlight>, the triangle button <highlight><bold>52</bold></highlight><highlight><italic>c</italic></highlight>, the square button <highlight><bold>52</bold></highlight><highlight><italic>d</italic></highlight>, the select button <highlight><bold>55</bold></highlight>, the R1 button <highlight><bold>56</bold></highlight>, the L1 button <highlight><bold>53</bold></highlight>, and so on, respectively. When pressure is applied to each button, a corresponding switch is turned ON. A detecting signal in response to ON or OFF of the switch is created in the keypad <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The detecting signal created in the keypad <highlight><bold>50</bold></highlight> is supplied to the input interface portion <highlight><bold>21</bold></highlight>, and by passing through the input interface <highlight><bold>21</bold></highlight> the detecting signal from the keypad <highlight><bold>50</bold></highlight> becomes detecting information indicating which button on the keypad <highlight><bold>50</bold></highlight> is turned ON. Accordingly, a manipulation instruction which a user gives through the keypad <highlight><bold>50</bold></highlight> is supplied to the game machine body <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The CPU <highlight><bold>12</bold></highlight> executes an operating system stored in the ROM <highlight><bold>13</bold></highlight> in order to control the entire device extensively. Further, the CPU <highlight><bold>12</bold></highlight> executes a video game program stored in the program area of the RAM <highlight><bold>14</bold></highlight>. Furthermore, the CPU <highlight><bold>12</bold></highlight> monitors a manipulation state of the keypad <highlight><bold>50</bold></highlight> through the input interface <highlight><bold>21</bold></highlight> in order to execute the video game program stored in the program area of the RAM <highlight><bold>14</bold></highlight> as necessary and to store various data derived from the developing processing of the game in a predetermined area of the RAM <highlight><bold>14</bold></highlight> as necessary. The ROM <highlight><bold>13</bold></highlight> includes an electrically erasable and programmable read only memory (EEPROM). Predetermined data in the RAM <highlight><bold>14</bold></highlight>, which requires to be maintained during power OFF, is stored in the EEPROM before the power is shut down. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The RAM <highlight><bold>14</bold></highlight> mainly has a program area, an image data area, an audio data area, and an area for storing other data. Program data, image data, audio data, and other data read from the disk <highlight><bold>30</bold></highlight> such as a DVD and a CD-ROM by the disk drive <highlight><bold>18</bold></highlight> are stored in those areas, respectively. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Further, the RAM <highlight><bold>14</bold></highlight> is used as a working area, and various data derived from developing processes of the game are stored in the area for storing other data. Notably, the program data, the image data, the audio data and other data read from the disk <highlight><bold>30</bold></highlight> may be stored in the hard disk drive <highlight><bold>15</bold></highlight>. The program data, the image data, the audio data, and other data stored in the hard disk drive <highlight><bold>15</bold></highlight> may be transferred to the RAM <highlight><bold>14</bold></highlight> as necessary. Further, various data derived from the developing processes of the game, which is stored in the RAM <highlight><bold>14</bold></highlight>, may be transferred and stored in the hard disk drive <highlight><bold>15</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The graphics processing portion <highlight><bold>16</bold></highlight> includes a frame buffer as a buffer memory for storing image data in the VRAM <highlight><bold>23</bold></highlight>. The graphics processing portion <highlight><bold>16</bold></highlight> creates video signals based on image data stored in the frame buffer in accordance with control information from the CPU <highlight><bold>12</bold></highlight> involved in the program execution, and then outputs the video signals to the television set <highlight><bold>100</bold></highlight>. Thus, the image data stored in the frame buffer is displayed on the screen display portion <highlight><bold>101</bold></highlight> of the television set <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The sound processing portion <highlight><bold>17</bold></highlight> has a function for creating audio signals such as background music, conversations between characters, and sound effects. The sound processing portion <highlight><bold>17</bold></highlight> outputs sound signals including audio signals from the speaker <highlight><bold>102</bold></highlight> of the television set <highlight><bold>100</bold></highlight> based on data stored in the RAM <highlight><bold>14</bold></highlight> in accordance with the control information from the CPU <highlight><bold>12</bold></highlight> involved in the program execution. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The television set <highlight><bold>100</bold></highlight> has the screen display portion <highlight><bold>101</bold></highlight> and the speaker <highlight><bold>102</bold></highlight> and performs video (image) display and audio output in accordance with contents of a video game based on video signals and/or sound signals from the game machine body <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The disk drive <highlight><bold>18</bold></highlight> is arranged so as to allow the disk (DVD or CD-ROM) <highlight><bold>30</bold></highlight> that is a recording medium to be attached removably therein. The disk drive <highlight><bold>18</bold></highlight> reads program data, image data, audio data, and other data of a video game stored in the disk <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The communications interface portion <highlight><bold>19</bold></highlight> is connected to the network <highlight><bold>110</bold></highlight> in order to obtain different kinds of data by communicating data between a data storage device such as a server located in another place and an information processing device. Notably, the program data, image data, audio data, and other data of the video game stored in the above-described RAM <highlight><bold>14</bold></highlight> may be obtained through the network <highlight><bold>110</bold></highlight> and the communications interface portion <highlight><bold>19</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The memory card reader/writer <highlight><bold>20</bold></highlight> is arranged to allow the memory card <highlight><bold>31</bold></highlight> to be attached removably. The memory card reader/writer <highlight><bold>20</bold></highlight> writes in the memory card <highlight><bold>31</bold></highlight> a smaller amount of data such as saved data on a video game in progress and environment-setting data for the video game. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> A video game program in a video game processing device to which a memory card can be connected is recorded in a recording medium according to one embodiment of the present invention, namely, the disk <highlight><bold>30</bold></highlight>, and can be read out by a computer (the CPU <highlight><bold>12</bold></highlight> and peripheral devices thereof). The computer can write saved data including acquired information acquired as the game advances in the memory card <highlight><bold>31</bold></highlight> in response to player&apos;s manipulation. The computer can also compare each piece of acquired information of the saved data written in the memory card <highlight><bold>31</bold></highlight> with acquired information maintained in the RAM <highlight><bold>14</bold></highlight>, in response to player&apos;s manipulation. Based on the comparison result, the computer can obtain a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the RAM <highlight><bold>14</bold></highlight> from the acquired information of the saved data written in the memory card <highlight><bold>31</bold></highlight>. Further, the computer can write predetermined saved data from the memory card <highlight><bold>31</bold></highlight> into the RAM <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Accordingly, the game machine body <highlight><bold>11</bold></highlight> includes functions required for implementing a conventional video game through software processing based on data stored in memories in the CPU <highlight><bold>12</bold></highlight> and in each part, and further includes, as distinctive functions, the functions of writing saved data including acquired information acquired as the game advances in the memory card <highlight><bold>31</bold></highlight> in response to player&apos;s manipulation, and comparing each piece of acquired information of the saved data written in the memory card <highlight><bold>31</bold></highlight> with acquired information maintained in the RAM <highlight><bold>14</bold></highlight> in response to player&apos;s manipulation. Based on a comparison result, a not yet obtained or &ldquo;new&rdquo; part of the acquired information maintained in the RAM <highlight><bold>14</bold></highlight> is obtained from the acquired information of the saved data written in the memory card <highlight><bold>31</bold></highlight>. Further, the game machine body <highlight><bold>11</bold></highlight> includes the function of writing predetermined saved data in the memory card <highlight><bold>31</bold></highlight> into the RAM <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Thus, a video game is implemented which makes a memory card available for many purposes in order to advance a game efficiently and can prevent spoiling the fun. These functions may be implemented by using dedicated hardware rather than software processing. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Next, an operation according to one embodiment, which is arranged as described above, will be described. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an explanatory diagram conceptually showing a distinctive part of the operation according to the above-described embodiment. Further, <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic flowchart, which is one example showing processing steps of an overall operation according to the above-described embodiment. Notably, respective steps in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> are given reference numerals such as steps S<highlight><bold>1</bold></highlight> to S<highlight><bold>21</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The operation according to the above-described embodiment will be described with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Several game-in-progress saved data are stored in the memory card <highlight><bold>31</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In this description, each game-in-progress saved data (simply called &ldquo;saved data&rdquo; hereinafter) includes interrupted-game data, character data, and translation dictionary data obtained as the game advances. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The game data includes information indicating a point where the game takes place, a current position of a player character and so on. The character data includes information indicating a state of each character, such as each parameter and different kinds of setting information. The translation dictionary data is data for translating a virtual language used in the game advancing process. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> On the other hand, data on a currently advancing game and translation dictionary data acquired as the game advances are stored in a predetermined data area in a main memory (RAM <highlight><bold>14</bold></highlight>) of the game machine body <highlight><bold>11</bold></highlight>. When a request for reading out the translation dictionary occurs in the game advancing process, corresponding parts of translation dictionary data of each saved data and the translation dictionary data in the main memory, respectively, are compared in order to obtain a not yet obtained or &ldquo;new&rdquo; part of the translation dictionary data in the main memory from the translation dictionary data in the memory card <highlight><bold>31</bold></highlight> based on the comparison result. Accordingly, only the not yet obtained or &ldquo;new&rdquo; part of required information can be easily obtained from the memory card without actually playing. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Next, an overall operation of one embodiment having such a feature will be described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. First of all, though omitted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, when the power is turned on, a boot program is read out. Then, each part is initialized and processing for starting a game is performed. In other words, program data, image data, audio data, and other data of a video game stored in the disk (DVD or CD-ROM) <highlight><bold>30</bold></highlight> is read by the disk drive <highlight><bold>18</bold></highlight>, and each data is stored in the RAM <highlight><bold>14</bold></highlight>. Further, if necessary, predetermined data stored in the EEPROM of the ROM <highlight><bold>13</bold></highlight>, the hard disk drive <highlight><bold>15</bold></highlight>, or a writable non-volatile memory such as the memory card <highlight><bold>31</bold></highlight> is read out and stored in the RAM <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Then, each setting is performed before actually starting the game and the process goes to step S<highlight><bold>1</bold></highlight>. In step S<highlight><bold>1</bold></highlight>, it is determined whether or not a new game start is selected. If it is determined that the new game start is not selected, the process goes to step S<highlight><bold>2</bold></highlight>, where it is determined whether or not a load start is selected. If it is determined that the load start is not selected, the process returns to step S<highlight><bold>1</bold></highlight> again. Then, steps S<highlight><bold>1</bold></highlight> and S<highlight><bold>2</bold></highlight> are repeated and the process enters into a waiting state. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> During the waiting state, if it is determined that the new game start is selected in step S<highlight><bold>1</bold></highlight>, the process goes to step S<highlight><bold>3</bold></highlight>, where a parameter &ldquo;a&rdquo; for control is set to 0. Then, the process goes to step S<highlight><bold>4</bold></highlight>, where predetermined data is created and written in the working area in the RAM <highlight><bold>14</bold></highlight>. Then, the process goes to S<highlight><bold>8</bold></highlight>, where the game is ready to start. Notably, here, translation dictionary data acquired as the game advances is, of course, not obtained. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Further, during the waiting state where steps S<highlight><bold>1</bold></highlight> and S<highlight><bold>2</bold></highlight> are repeated, if it is determined that the load start is selected in step S<highlight><bold>2</bold></highlight>, the process goes to S<highlight><bold>6</bold></highlight>, where the parameter &ldquo;a&rdquo; for control is set to 1 (one). Then, the process goes to step S<highlight><bold>7</bold></highlight>, where predetermined data selected among saved data stored in the memory card <highlight><bold>31</bold></highlight> is read and written in the working area of the RAM <highlight><bold>14</bold></highlight>. Then, the process goes to step S<highlight><bold>8</bold></highlight>, where the game is ready to start. Notably, here, the translation dictionary data acquired as the game advances is included in the read saved-data. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> When the process goes to step S<highlight><bold>8</bold></highlight> and the game advances, one scene such as a moving scene, a battle scene or other scenes occurs, where each corresponding processing is performed. For example, in the moving scene, the process enters a state for receiving movement manipulation. In accordance with received movement manipulation, movement processing is performed. Movement information is created based on position information of a player character derived in response to the movement processing. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In the battle scene, the process enters a state for receiving a battle manipulation. In step S<highlight><bold>8</bold></highlight>, battle processing is performed in accordance with received battle manipulation. Then, various information is created in accordance with battle processing. Further, in another scene (such as conversation, shopping or finding), processing corresponding to each scene is performed, and other various information are created in accordance with the processing. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> As described above, the various information created in accordance with each scene is stored in the RAM <highlight><bold>14</bold></highlight>, and action evaluation processing is performed based on the various information. Specifically, information requiring digitizing is digitized by using a prepared conversion table. If weighting is required, a predetermined coefficient is multiplied. Then, those values are added up so as to calculate a score. Then, the calculated score is added to an old score having been kept in a predetermined data area of the RAM <highlight><bold>14</bold></highlight>, which is then stored in the predetermined data area again. Thus, the score, that is evaluation information, is updated as necessary. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As the game advances in this way, and when the player character moves a predetermined setting zone and approaches a predetermined indicator placed within the screen, for example, the game is interrupted and the process goes to step S<highlight><bold>9</bold></highlight>. In step S<highlight><bold>9</bold></highlight>, it is determined whether or not a request for reading out translation dictionary data occurred. If it is determined that the request for reading out translation dictionary data did not occur, the process goes to step S<highlight><bold>10</bold></highlight>. In step S<highlight><bold>10</bold></highlight>, it is determined whether or not a save request occurred. If it is determined that the save request did not occur, the process goes to step S<highlight><bold>21</bold></highlight> without any processing. In step S<highlight><bold>21</bold></highlight>, it is determined whether or not the game is finished. If it is determined that the game is not finished, the process returns to step S<highlight><bold>8</bold></highlight> and the game continues to advance. Otherwise, the processing ends. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> On the other hand, in step S<highlight><bold>9</bold></highlight>, if it is determined that the request for reading out translation dictionary data occurred, the process goes to step S<highlight><bold>11</bold></highlight>, where the process gets ready to receive a selection of slots for connecting to the memory card. Then, in step S<highlight><bold>12</bold></highlight>, it is determined whether or not a confirmation manipulation has completed. The process goes to step S<highlight><bold>13</bold></highlight> only if it is determined that the confirmation manipulation has completed. Otherwise, the processing returns to step S<highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows one example of a displayed screen at the time when the request for reading out translation dictionary data has occurred. An indicator having a function for interrupting the game and then moving to data-writing/reading processing is designated as <highlight><bold>401</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Further, the player character is designated as <highlight><bold>402</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, when the player character <highlight><bold>402</bold></highlight> approaches to a predetermined distance to the indicator <highlight><bold>401</bold></highlight>, the game is interrupted temporally. If a request for reading out translation dictionary data occurs in response to player&apos;s manipulation, a game score, or the like, a window <highlight><bold>403</bold></highlight> is opened substantially at the center of the displayed screen as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which displays a comment and slot selections. The slot selecting manipulation is performed by moving a cursor <highlight><bold>404</bold></highlight> through the cross key <highlight><bold>51</bold></highlight> and then pressing the circle button <highlight><bold>52</bold></highlight><highlight><italic>a </italic></highlight>at a predetermined position near &ldquo;slot 1&rdquo; or &ldquo;slot 2&rdquo;. Then, it is determined from the action that the confirmation manipulation has been performed, and the process goes to step S<highlight><bold>13</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In step S<highlight><bold>13</bold></highlight>, each piece of translation dictionary data in the saved data stored in the memory card <highlight><bold>31</bold></highlight> is read out. Then, in step S<highlight><bold>14</bold></highlight>, it is determined whether or not the control parameter is (a&equals;0). If (a&equals;0), that is, if a new game start is instructed, each piece of translation dictionary data in the saved data is written in the RAM <highlight><bold>14</bold></highlight> once. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Then, one piece of translation dictionary data in the written saved data is selected and compared with the other translation dictionary data. If a different part is found and determined as a not yet or &ldquo;new&rdquo;, data corresponding to the part is obtained from the other translation dictionary data, and new translation dictionary data is created. The created translation dictionary data is stored in a predetermined area for storing translation dictionary data in the RAM <highlight><bold>14</bold></highlight>. Then, the process goes to step S<highlight><bold>21</bold></highlight>. There, it is determined whether or not the game is finished. If it is determined that the game is not finished, the process returns to step S<highlight><bold>8</bold></highlight> again. Then, the game continues to advance. Otherwise, the processing ends. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In step S<highlight><bold>14</bold></highlight>, if it is determined that the control parameter is not (a&equals;0), that is, if a load start is instructed, the process goes to step S<highlight><bold>16</bold></highlight>. In step S<highlight><bold>16</bold></highlight>, translation dictionary data in saved data loaded at the time of starting the game and each of translation dictionary data in the memory card <highlight><bold>31</bold></highlight> are compared. There, a different part is determined as a not yet or &ldquo;new&rdquo;. In step S<highlight><bold>17</bold></highlight>, the not yet or &ldquo;new&rdquo; data in accordance with the determination result is obtained from each piece of translation dictionary data and then new translation dictionary data is created. Then, the created translation dictionary data is stored in a predetermined area for storing translation dictionary data in the RAM <highlight><bold>14</bold></highlight>. The process goes to step S<highlight><bold>21</bold></highlight>, where it is determined whether or not the game is finished. If the game is not finished, the process returns to step S<highlight><bold>8</bold></highlight> again. Then, the game continues to advance. Otherwise, the processing ends. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> On the other hand, in step S<highlight><bold>10</bold></highlight>, if it is determined that a save request has occurred, the process goes to step S<highlight><bold>18</bold></highlight>, where the process gets ready to receive a selection of slots for connecting to the memory card. Then, in step S<highlight><bold>19</bold></highlight>, it is determined whether or not a confirmation manipulation has been completed. The process goes to step S<highlight><bold>20</bold></highlight> only if it is determined that the confirmation manipulation has been completed. Otherwise, the process returns to step S<highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In step S<highlight><bold>20</bold></highlight>, each piece of data (such as interrupted game data, character data, and translation dictionary data acquired as the game advances) at the current position of the player character is written in the memory card <highlight><bold>31</bold></highlight> as saved data such that the progress at that time can be reproduced. Once the data has been written in the memory card <highlight><bold>31</bold></highlight>, the process goes to step S<highlight><bold>21</bold></highlight>, where it is determined whether or not the game is finished. If it is determined that the game is not finished, the process returns to step S<highlight><bold>8</bold></highlight> again, and then, the game continues to advance. Otherwise, when it is determined that the game is finished, the processing terminates. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> As described, the first embodiment of the invention provides several advantages. For example, a memory card can be utilized for multiple purposes while a game can be efficiently advanced and the user&apos;s pleasure can be maintained. In addition, the game can be re-started under the same conditions as before, and only a not yet or &ldquo;new&rdquo; necessary part of translation dictionary data can be easily acquired from the memory card without actually playing the game. This also helps prevent spoiling the fun. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Next, another embodiment will be described. In the above described embodiment, reading out data from the memory card and creating data in the internal memory are executed in order to obtain translation dictionary data. However, the processing may be also applied to obtain other various data acquired as a game advances. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Further, in the above-described embodiment, a request for reading out translation dictionary data occurs when the player character approaches the indicator having a function for performing data writing/reading processing in response to player&apos;s predetermined manipulation, or when the game score is equal to or higher than a predetermined value. However, a function may be given to a predetermined button such that reading out the translation dictionary data from the memory card and creating the translation dictionary data in the internal memory can be performed as required. Further, it may be arranged that a request for reading out translation dictionary data occurs in relation to different kinds of information caused as the game advances rather than game scores. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Further, in the above-described embodiment, requested data is transferred without any processing when a request for reading out data simply occurs in the game machine body. However, information indicating prohibition of data readout may be given to saved data stored in the memory card such that a request for data readout from the game machine body can be denied in order to manage written saved data. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Notably, the present invention is not limited to each of the above-described embodiments. It is apparent that each of the embodiments may be modified as necessary without departing from the technical idea of the present invention. For example, steps in the method according to the present invention may be changed in order without departing from the principal or the scope of the present invention. Furthermore, similar reference numerals are given to similar components in each of figures. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-readable recording medium on which a video game program is recorded in a video game processing device to which a memory card can be connected, said program causing a computer to execute: 
<claim-text>writing saved data including acquired information acquired as the game advances in said memory card in response to a player&apos;s manipulation; </claim-text>
<claim-text>comparing each of acquired information of said saved data written in said memory card, with acquired information maintained in an internal memory of said video game processing device in response to the player&apos;s manipulation; and </claim-text>
<claim-text>obtaining a not yet obtained or &ldquo;new&rdquo; part of said acquired information maintained in said internal memory from said acquired information of said saved data written in said memory card, based on a comparison result from said comparison. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer readable recording medium according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said acquired information included in said saved data is translation dictionary data. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer readable recording medium according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, said program further causing said computer to execute writing predetermined saved data in said memory card into said internal memory of said video game processing device. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A video game program in a video game processing device to which a memory card can be connected, said program causing a computer to execute: 
<claim-text>writing saved data including acquired information acquired as the game advances in said memory card in response to a player&apos;s manipulation; </claim-text>
<claim-text>comparing each of acquired information of said saved data written in said memory card with acquired information maintained in an internal memory of said video game processing device in response to the player&apos;s manipulation; and </claim-text>
<claim-text>obtaining a not yet obtained or &ldquo;new&rdquo; part of said acquired information maintained in said internal memory from said acquired information of said saved data written in said memory card, based on a comparison result from said comparison. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The program according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said acquired information included in said saved data is translation dictionary data. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The program according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, said program further causing said computer to execute writing predetermined saved data in said memory card into said internal memory of said video game processing device. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A video game processing method to which a memory card can be connected, comprising: 
<claim-text>writing saved data including acquired information acquired as the game advances in said memory card in response to a player&apos;s manipulation; </claim-text>
<claim-text>comparing each of acquired information of said saved data written in said memory card with acquired information maintained in an internal memory of said video game processing device in response to the player&apos;s manipulation; and </claim-text>
<claim-text>obtaining a not yet obtained or &ldquo;new&rdquo; part of said acquired information maintained in said internal memory from said acquired information of said saved data written in said memory card, based on a comparison result from said comparison. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The video game processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said acquired information included in said saved data is translation dictionary data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The video game processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising writing predetermined saved data in said memory card into said internal memory of said video game processing device. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A video game processing device, comprising: 
<claim-text>a memory system that stores a video game program in said video game processing device to which a memory card can be connected; </claim-text>
<claim-text>a computer that executes said program read out from said memory system; and </claim-text>
<claim-text>a display device for screen display, which is provided as an output system of said computer, </claim-text>
<claim-text>wherein said computer executes said program so as to write saved data including acquired information acquired as the game advances in said memory card in response to player&apos;s manipulation, to compare each of acquired information of said saved data written in said memory card with acquired information maintained in an internal memory of said video game processing device in response to a player&apos;s manipulation, and, based on a comparison result from said comparison, to obtain a not yet obtained or &ldquo;new&rdquo; part of said acquired information maintained in said internal memory from said acquired information of said saved data written in said memory card. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The video game processing method according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said acquired information included in said saved data is translation dictionary data. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The video game processing device according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said computer further writes predetermined saved data in said memory card into said internal memory of said video game processing device.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030003998A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030003998A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030003998A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030003998A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030003998A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
