<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004975A1-20030102-D00000.TIF SYSTEM "US20030004975A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00001.TIF SYSTEM "US20030004975A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00002.TIF SYSTEM "US20030004975A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00003.TIF SYSTEM "US20030004975A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00004.TIF SYSTEM "US20030004975A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00005.TIF SYSTEM "US20030004975A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00006.TIF SYSTEM "US20030004975A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00007.TIF SYSTEM "US20030004975A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00008.TIF SYSTEM "US20030004975A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00009.TIF SYSTEM "US20030004975A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00010.TIF SYSTEM "US20030004975A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00011.TIF SYSTEM "US20030004975A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00012.TIF SYSTEM "US20030004975A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00013.TIF SYSTEM "US20030004975A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00014.TIF SYSTEM "US20030004975A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00015.TIF SYSTEM "US20030004975A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00016.TIF SYSTEM "US20030004975A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00017.TIF SYSTEM "US20030004975A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00018.TIF SYSTEM "US20030004975A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00019.TIF SYSTEM "US20030004975A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00020.TIF SYSTEM "US20030004975A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00021.TIF SYSTEM "US20030004975A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00022.TIF SYSTEM "US20030004975A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00023.TIF SYSTEM "US20030004975A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030004975A1-20030102-D00024.TIF SYSTEM "US20030004975A1-20030102-D00024.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004975</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09987839</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20011116</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-194075</doc-number>
</priority-application-number>
<filing-date>20010627</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>200000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Database management system with rebalance architectures</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Yukio</given-name>
<family-name>Nakano</family-name>
</name>
<residence>
<residence-non-us>
<city>Oyama</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Nobuo</given-name>
<family-name>Kawamura</family-name>
</name>
<residence>
<residence-non-us>
<city>Atsugi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>ANTONELLI TERRY STOUT AND KRAUS</name-1>
<name-2></name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A database system for storing table data as divided in a plurality of storages has a processing request acceptance section and an execution section which, at the time of rebalancing already stored data in response to addition of a storage, can execute inquiry operations concurrently. The system determines data to be moved from existing storages to the additional storage. When search, update and delete processing requests are issued during execution of the rebalance operation of copying the data to the additional storage and deleting the original data, both the DBMS acceptance section and DBMS executor section execute the operation corresponding to the requests. When an insert processing request is issued, the system determines a data insert destination on the basis of contents of a step of dividing the data from the existing storages to the additional storage. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCES TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application relates to copending patent application Ser. No. 09/702,351 entitled &ldquo;DATABASE MANAGEMENT METHODS AND EQUIPMENT, AND DATABASE MANAGEMENT PROGRAM STORAGE MEDIA&rdquo; filed by Nobuo Kawamura on Oct. 31, 2000.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a database for data management based on table, and more particularly to a database system suitable to rebalance data among shared database files at the time of changing the number of storages for storing therein table data as divided. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> B. Bergsten et al., &ldquo;Overview of Parallel Architectures for Databases&rdquo;, THE COMPUTER JOURNAL, Vol. 36, No, 8, 1993, pp. 734-740 teaches an architecture wherein the processing load of a relational database management system (RDBMS) is distributed into a plurality of processors for parallel execution. D. J. DeWitt et al., Parallel Database Systems: The future of Database Processing or a Passing Fad&quest;, SIGMOND RECORD, Vol. 19, No. 4, December 1990, pp. 104-112 discloses a database system wherein table data are stored as divided in a plurality of disks (storages) for distribution of disk access in RDBMS. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> One of such conventional table division systems is a hash division system in which a hash function is used for values of columns which make up a table for uniform division. In this system, since table data are uniformly stored in respective disks (storages), a load can be uniformly distributed thereinto. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> However, as the amount of data increases, this will involve lack of capacities of the storages or performance deterioration. To avoid this, it becomes necessary to increase the number of disks for storage of table data by increasing the number of divisions. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> U.S. Pat. Nos. 6,145,067; 5,917,999 and 5,564,116 disclose disk array systems wherein, when a storage is added, data rebalance among shared database files has to be carried out concurrently with data access (read, write). In the data rebalance technique of these disk array systems, however, it is necessary to share information on, e.g., position during data rebalance. In other words, in order that a node for accepting an access request obtains information during data rebalance, it is required to perform data transfer between associated nodes for data rebalance and then to inform its information to the node for acceptance of the access request, thus resulting in generation of a communication overhead. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Accordingly, even when the data rebalance technique in the aforementioned disk array systems is applied to a database system, it is difficult to effectively execute the data rebalance processing and data access parallelly or concurrently. That is, it is required in the database that the data rebalance and data access be executed concurrently while eliminating the need for sharing information such as a position during the data rebalance. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The problem in the prior art is that database processing such as search, update, delete or insert to a table cannot be executed during data rebalance execution caused by changing the number of storages for storing tables. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> It is therefore an object of the present invention to provide a database system, database management method and program, which, even during data rebalance execution of table data, can perform acceptance and execution of a database processing request such as search, update, delete or insert concurrently with the rebalance execution and with improved operability and performance of a database. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In accordance with an aspect of the present invention, the above object is attained by providing a database management system which includes a storage having a first storage area corresponding to a plurality of storages for saving a plurality of data items and a second storage area corresponding to a storage to be added to or disconnected from the plurality of storages, an acceptance section connected to the storage for accepting a data processing request, the data processing request including data processing in the plurality of storages and data rebalance between the storages, and a plurality of executors connected to the acceptance section for sequentially executing at least any of the data processing in the plurality of storages and the data rebalance. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The storage may have a storage area correspondence table indicative of combinations of predetermined data items to be shared by the plurality of storages and to be sharedly stored thereby according to the request of addition or disconnection to cause the data rebalance between the storages. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The acceptance section has a during-rebalance flag indicating that &lsquo;during rebalance&rsquo; of the plurality of storages by addition or disconnection to or from the plurality of storages. According to a data processing request to the data items stored in the plurality of storages, the acceptance section can refer to the during-rebalance flag and reflect data update even on the storages subjected to the data rebalance. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The system in accordance with the invention of the present application may include means, in response to a rebalance request of data to be rebalanced in a storage added according to an addition request, for adding data position information to data before subjected to the rebalance execution by the data rebalance request in the plurality of storages, and means for deleting the data added with the data position information before subjected to the rebalance execution in response to the rebalance request after the rebalance execution by the rebalance request. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In accordance with another aspect of the present invention, there is provided a database management method which can be realized in the above system. The method includes steps of allocating a plurality of data items in a table to a plurality of storages for their storage; storing the table data in the storages determined according to a specified division rule (method); when a request is issued to add a storage for storage of the table data, determining part of the data stored in the existing storages which is to be moved to the addition storage with use of information about the existing and additional storages according to the specified division method and performing data rebalance operation to move all the determined data to the additional storage; when a request for search, update delete to the table is issued during the data rebalance execution, searching for, updating or deleting the table data stored in the existing storages and in the additional storage; and when a request of insert in the table is issued, inserting the data determined by the specified data division method in the storages together with information about existing and additional storages. In accordance with a further aspect of the present invention, there is provided a parallel database method which includes steps of allocating a plurality of data items in a table as table data to a plurality of storages for their storage and storing the table data in storages determined by a specified division method; when a request is issued to search, update or delete the table is issued, performing parallel operation over the respective storages; when a request is issued to add a storage for storage of the table data, determining part of the data stored in existing storage parts which is to be moved to the additional storage according to a specified division method with use of information about the existing and additional storages; performing data rebalance operation to move all the determined data to the additional storage; when a request is issued to search, update or delete the table during the data rebalance operation, performing parallel operation in the existing storages over the table data stored therein to search for, update or delete the table data; after completing all the operations of the existing storages, performing parallel operation over the respective storages to search, update or delete the table in the additional storage; and when a request is issued to insert data in the table, inserting the data determined by the specified data division method in the existing and additional storages together with information about the existing and additional storages. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In accordance with a further aspect of the present invention, there is provided a database method which includes steps of allocating a plurality of data items in a table as the table data to a plurality of storages for their storage; storing the table data in the storages determined by a specified division method; when a request is issued to add a storage for storage of the table data therein, determining part of the data stored in existing storages which is to be moved to the additional storage according to the specified division method with use of information about the existing and additional storages, copying the determined data from the existing storages to the additional storage, and adding position information of the copied data on the additional storage to the data of the storages as a copy source; when, the copy of all the data to be moved o the additional storage is completed, performing data rebalance operation to delete all the data of the copy source; when a request is issued to search the table during the data rebalance execution, searching the existing storages for associated data stored therein; when a request is issued to update or delete the table, updating or deleting associated data stored in the existing storages; when position information indicative of a copy target to the additional storage is added to the data to be updated or deleted, updating or deleting even data of the copy target; when a request is issued to insert data in the table, storing the data in the existing storages determined by the specified division method; when the data to be added is judged as to be moved by the specified division method even to the additional storage, storing the data even in the additional storage as a move target; and adding storage position information to the additional storage to the data stored in the existing storages. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The aforementioned systems and methods can be selected and executed depending on the defined table.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary arrangement of a database system in accordance with the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an exemplary structure of a hardware section in the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is exemplary registration contents of a table showing hash function value storage position correlation; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4A and 4B</cross-reference> are diagrams for explaining a first example of accepting and executing a database processing request during rebalance operation of a database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a first exemplary detailed arrangement of the database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; prior to the rebalance operation thereof; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows an example of a stock table to be managed by the database management system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart for explaining a first example of processing operation of a DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart for explaining a second example of processing operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart for explaining a third example of processing operation of a DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a diagram for explaining the first operational example of the database management system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> associated with the rebalance operation; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> show a flowchart for explaining an example of the rebalance operation of the database management system of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram of an exemplary detailed arrangement of the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> after the rebalance operation; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram of a second exemplary detailed arrangement of the database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> prior to the rebalance operation; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a flowchart for explaining an example of search execution target determining operation of a DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a flowchart for explaining an example of update/delete execution target determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a flowchart for explaining an example of update execution target determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a flowchart for explaining an example of delete execution target determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a flowchart for explaining an example of insert execution target determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a flowchart for explaining another example of insert execution target determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a diagram of another exemplary arrangement of the database management system of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> associated with the rebalance operation; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 21A and 21B</cross-reference> shows a flowchart for explaining an example of rebalance operation of the database management system of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 22A and 22B</cross-reference> are diagrams for explaining a second example of accepting and executing a database processing request in the rebalance operation of the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; and </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> FIGS. <highlight><bold>23</bold></highlight> to <highlight><bold>25</bold></highlight> are diagrams for explaining the data processing of the rebalance operation necessary when the number of storages are reduced in accordance with the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE EMBODIMENTS </heading>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Embodiments of the present invention will be detailed by referring to the accompanying drawings. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary arrangement of a database system in accordance with an embodiment of the present invention, <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an example of a hardware section in the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows exemplary registration contents of a table of hash function value storage position correspondence in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, and <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows diagrams for explaining a first example of accepting and executing a database processing request in rebalance operation of a database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> database management system (which is also shown by DBMS in the drawings) <highlight><bold>300</bold></highlight> forming one section of the database system of the present invention, which includes a central processing unit (CPU), an input device, a display unit and so on, functions to perform database processing such as data search, update, delete, or insert (add) on the basis of a request from a plurality of user terminals <highlight><bold>330</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>330</bold></highlight><highlight><italic>c </italic></highlight>each having a computer function. The database management system <highlight><bold>300</bold></highlight> includes a DBMS acceptance node <highlight><bold>400</bold></highlight> and DBMS execution nodes <highlight><bold>410</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>410</bold></highlight><highlight><italic>c</italic></highlight>, which have each a computer function and are interconnected by a network <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The DBMS acceptance node <highlight><bold>400</bold></highlight> has a CPU <highlight><bold>401</bold></highlight> and a main memory <highlight><bold>402</bold></highlight> and also is connected to an external storage <highlight><bold>318</bold></highlight> in the form of a hard disk drive (HDD) or the like. When the CPU <highlight><bold>401</bold></highlight> executes a DBMS acceptance program <highlight><bold>310</bold></highlight><highlight><italic>a </italic></highlight>stored in the main memory <highlight><bold>402</bold></highlight>, the DBMS acceptance section <highlight><bold>310</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> can perform respective functions in the DBMS acceptance operation. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The DBMS execution nodes <highlight><bold>410</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>410</bold></highlight><highlight><italic>c </italic></highlight>have CPU&apos;s <highlight><bold>411</bold></highlight><highlight><italic>a </italic></highlight>to CPU <highlight><bold>411</bold></highlight><highlight><italic>c </italic></highlight>and main memories <highlight><bold>412</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>412</bold></highlight><highlight><italic>c </italic></highlight>respectively, and are also connected to external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>325</bold></highlight><highlight><italic>c </italic></highlight>respectively. When the CPU&apos;s <highlight><bold>411</bold></highlight><highlight><italic>a </italic></highlight>to CPU <highlight><bold>411</bold></highlight><highlight><italic>c </italic></highlight>execute respective DBMS execution programs (which is shown by DBMS execution PGM&apos;s in the drawings) <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>stored in the main memories <highlight><bold>412</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>412</bold></highlight><highlight><italic>c</italic></highlight>, the DBMS execution programs <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> can perform respective functions for the DBMS execution. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The DBMS acceptance program <highlight><bold>310</bold></highlight><highlight><italic>a </italic></highlight>and DBMS execution programs <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>are usually stored in a recording medium including an optical disc such as CD-ROM (compact disc-read only memory) or DVD (digital video disc/digital versatile disc). These programs are installed from these recording medium to the external storage <highlight><bold>318</bold></highlight> and external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>325</bold></highlight><highlight><italic>c </italic></highlight>to be loaded into the main memory <highlight><bold>402</bold></highlight> and main memories <highlight><bold>412</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>412</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> A DBMS acceptance section <highlight><bold>310</bold></highlight> and the DBMS execution programs <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>in the DBMS <highlight><bold>300</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, which correspond to the DBMS acceptance node <highlight><bold>400</bold></highlight> and DBMS execution nodes <highlight><bold>410</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>410</bold></highlight><highlight><italic>c </italic></highlight>shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, are interconnected by the network <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The DBMS acceptance section <highlight><bold>310</bold></highlight> has a request acceptor <highlight><bold>311</bold></highlight>, an analyzer <highlight><bold>312</bold></highlight>, a processing procedure generator <highlight><bold>313</bold></highlight>, an execution destination decider <highlight><bold>314</bold></highlight>, an execution request/result receiver <highlight><bold>315</bold></highlight>, a returner <highlight><bold>316</bold></highlight>, and a rebalance executor <highlight><bold>102</bold></highlight>. The DBMS executors <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>have searches <highlight><bold>321</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>321</bold></highlight><highlight><italic>c</italic></highlight>, updates <highlight><bold>322</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>322</bold></highlight><highlight><italic>c</italic></highlight>, deletes <highlight><bold>323</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>323</bold></highlight><highlight><italic>c</italic></highlight>, and inserts <highlight><bold>324</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>324</bold></highlight><highlight><italic>c </italic></highlight>respectively. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The DBMS acceptance section <highlight><bold>310</bold></highlight> accepts from user terminals a processing request <highlight><bold>330</bold></highlight> such as data processing and rebalance operation via the request acceptor <highlight><bold>311</bold></highlight>, analyzes the request in the analyzer <highlight><bold>312</bold></highlight> therein, and generates a processing procedure to realize the request in the processing procedure generator <highlight><bold>313</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Then the execution destination decider <highlight><bold>314</bold></highlight> determines which one of the DBMS executors should execute the generated processing procedure on the basis of data division conditions, the execution request/result receiver <highlight><bold>315</bold></highlight> issues an execution request to the determined DBMS executor and receives its execution result from the DBMS executor. The received result is returned from the returner <highlight><bold>316</bold></highlight> to the user. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The analyzer <highlight><bold>312</bold></highlight>, processing procedure generator <highlight><bold>313</bold></highlight> and execution destination decider <highlight><bold>314</bold></highlight> refer to a hash function value storage position correspondence table <highlight><bold>317</bold></highlight> or table definition information <highlight><bold>319</bold></highlight> stored in the external storage <highlight><bold>318</bold></highlight>, and acquire information for determination of a data storage destination or information about the table. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Stored in the table definition information <highlight><bold>319</bold></highlight> are, for example, storage area information <highlight><bold>340</bold></highlight> for management of storages having the table stored as divided therein, addition area information <highlight><bold>341</bold></highlight> for management of a storage for storage area addition, and a during-rebalance flag <highlight><bold>342</bold></highlight> indicative of &lsquo;during rebalance operation&rsquo;. Details of respective constituent elements of the table definition information <highlight><bold>319</bold></highlight> will be explained later in connection with a specific example with reference to FIGS. <highlight><bold>5</bold></highlight> to <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The DBMS executors <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c</italic></highlight>, in response to an instruction of search, update, delete or insert received from the DBMS acceptance section <highlight><bold>310</bold></highlight>, activate the searches <highlight><bold>321</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>321</bold></highlight><highlight><italic>c</italic></highlight>, updates <highlight><bold>322</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>322</bold></highlight><highlight><italic>c</italic></highlight>, deletes <highlight><bold>323</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>323</bold></highlight><highlight><italic>c </italic></highlight>or inserts <highlight><bold>324</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>324</bold></highlight><highlight><italic>c</italic></highlight>, execute its processing procedure, and return the execution result to the DBMS acceptance section <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> During the execution of the processing procedure, the DBMS executors <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>access table data <highlight><bold>326</bold></highlight> stored in the external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>325</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In such processing, when the execution destination decider <highlight><bold>314</bold></highlight> of the DBMS acceptance section <highlight><bold>310</bold></highlight> selects a plurality of executors (<highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c</italic></highlight>), the execution request/result receiver <highlight><bold>315</bold></highlight> of the DBMS acceptance section <highlight><bold>310</bold></highlight> may issue an execution request to all the selected DBMS executors (<highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c</italic></highlight>) simultaneously to execute parallel processing in the respective DBMS executors (<highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c</italic></highlight>). </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Explanation will now be made as to the data dividing operation in the DBMS <highlight><bold>300</bold></highlight>. In this example, when data are stored as divided, a hash function is applied to the data to be stored to generate values of from 0 to 9, and the data are distributed to respective storage destinations according to the generated values. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The table <highlight><bold>317</bold></highlight> showing its details in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is used to determine a storage position based on the hash function value. In this example, data is divided into up to 10 parts according to the number of external storages connected. The table also shows information about storage areas where data is stored at the time of the division by the hash function values. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> For example, when data is stored as divided into two storages, as shown items of &ldquo;area 0&rdquo; and &ldquo;area 1&rdquo; at the time of two divisions in the hash function value storage position correspondence table <highlight><bold>317</bold></highlight>, data about hash function values of 0, 4, 6, 7 and 9 are stored in the &ldquo;area 0&rdquo;, and data about hash function values of 1, 2, 3, 5 and 8 are stored in the &ldquo;area 1&rdquo;. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> When a storage area was added, even data to be moved by the rebalance executor <highlight><bold>102</bold></highlight> can be found from the hash function value storage position correspondence table <highlight><bold>317</bold></highlight>. When a single storage is added and two divisions are changed to three divisions, for example, &ldquo;area 2&rdquo; is added and data of hash function values of 2, 7 and 3 are stored in &ldquo;area <highlight><bold>2</bold></highlight>&rdquo;, as in the case of three divisions in the hash function value storage position correspondence table <highlight><bold>317</bold></highlight>. Thus it is only required to move the data of the hash function values of 2, 7 and 3 so far stored in &ldquo;area <highlight><bold>0</bold></highlight>&rdquo; and &ldquo;area 1&rdquo; to &ldquo;area 2&rdquo; as an addition area. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Similarly, in the case of changing from two divisions to five divisions, &ldquo;area 2&rdquo;, &ldquo;area 3&rdquo; and &ldquo;area 4&rdquo; are added, data of hash function values of 2 and 7; 3 and 6; and 4 and 5 are moved to &ldquo;area 2&rdquo;, &ldquo;area 3&rdquo; and &ldquo;area 4&rdquo; respectively. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> For data moving operation when such a storage area was added, that is, for rebalance and acceptance of a request of database processing (such as search, update, delete, or insert); the database management system <highlight><bold>300</bold></highlight> in the database system having such an arrangement as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> copes with it in such a manner as to be explained below. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> More specifically, when it is required to add a storage for table data such as an external storage <highlight><bold>325</bold></highlight><highlight><italic>c </italic></highlight>external storage, the rebalance executor <highlight><bold>102</bold></highlight> in the DBMS acceptance section <highlight><bold>310</bold></highlight> refers to the hash function value storage position correspondence table <highlight><bold>317</bold></highlight>, determines data to be moved from existing storages such as the external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>325</bold></highlight><highlight><italic>b </italic></highlight>to an additional storage (external storage <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>), and moves all the data determined as to be moved to the additional storage (external storage <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> When such processing as to search for, update or delete data in the table is required during execution of the data rebalance operation; the database management system executes the search, update or delete operation for the existing storages (external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>325</bold></highlight><highlight><italic>b</italic></highlight>) and the additional storage (external storage <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>) respectively. When it is required to insert data in the table, the database management system refers to the hash function value storage position correspondence table <highlight><bold>317</bold></highlight>, and inserts the data in the associated storage (any of the external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Assume that the database management system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is of a parallel database type which performs parallel processing operation over storages when it is required to search for, update and delete table data. If it is required to search for, update and delete the table data during execution of data rebalance operation, then the system performs parallel processing operation over existing storages (external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>325</bold></highlight><highlight><italic>b</italic></highlight>) to search fir, update and delete the table data stored therein. After fully completing the processing of the existing storages, the system sequentially performs the search, update and delete operations over the additional storage and external storage <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>. Further, when it is required to insert data in the table data, the system refers to the hash function value storage position correspondence table <highlight><bold>317</bold></highlight> including information on the existing storages (external storages <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>325</bold></highlight><highlight><italic>b</italic></highlight>) and information on the additional storage (external storage <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>), and inserts the data in one of the storages (external storages <highlight><bold>325</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>325</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>325</bold></highlight><highlight><italic>c</italic></highlight>) determined by the execution destination decider <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Explanation will be made in more detail by referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> as to how to control the data moving operation by the database management system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in accordance with the present invention when a storage area is added, that is, as to operation of accepting and executing a database processing request during rebalance operation. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Explanation will be made as to the rebalance operation as well as the search, update, delete and insert operations during the rebalance operation when there is a table wherein data indicative of the hash function values of 0, 4, 6, 7 and <highlight><bold>9</bold></highlight> are stored as divided in a storage <highlight><bold>120</bold></highlight> and data indicative of the hash function values of 1, 2, 3, 5 and 8 are stored as divided in a storage <highlight><bold>130</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In the arrangement shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, operation <highlight><bold>100</bold></highlight> of search, update and delete operation is carried out in the storages <highlight><bold>120</bold></highlight> and <highlight><bold>130</bold></highlight> over data <highlight><bold>121</bold></highlight> to <highlight><bold>125</bold></highlight> and <highlight><bold>131</bold></highlight> to <highlight><bold>135</bold></highlight>; and an insert operation <highlight><bold>101</bold></highlight> of such data <highlight><bold>133</bold></highlight> as to provide a hash function value of 3 is carried out in the storage <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> When a storage <highlight><bold>140</bold></highlight> was added as shown in <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> (a combination of the storages <highlight><bold>120</bold></highlight> and <highlight><bold>130</bold></highlight> is called an existing area and the storage <highlight><bold>140</bold></highlight> is called an additional area), a rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a </italic></highlight>selects data to be moved to the storage <highlight><bold>140</bold></highlight> from data stored in the storages <highlight><bold>120</bold></highlight> and <highlight><bold>130</bold></highlight> and moves the selected data to the storage <highlight><bold>140</bold></highlight> to provide hash function values of 7, 2 and 3. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> This data move operation is carried out in such a procedure as to first search for data of the storages <highlight><bold>120</bold></highlight> and <highlight><bold>130</bold></highlight> to be moved, insert it in the storage <highlight><bold>140</bold></highlight> and then delete the data of the storages <highlight><bold>120</bold></highlight> and <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In the database system, during the operation after the search for the data to be moved until the deletion of the old data already moved, the data is locked so that another user is prohibited from searching for, updating or deleting the data. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In the present embodiment, during the execution of the rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a</italic></highlight>, the data operation <highlight><bold>100</bold></highlight> of search, update or delete is carried out in both existing and additional areas. That is, the data operation is carried out in the storages <highlight><bold>120</bold></highlight>, <highlight><bold>130</bold></highlight> and <highlight><bold>140</bold></highlight>. In this connection, during such search, update or delete operation, the data in question is locked so that the rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a </italic></highlight>is prohibited from referring to the data unless otherwise specifically stated by the user. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The data insert operation <highlight><bold>101</bold></highlight> to provide a hash function value of 3 during the rebalance operation stores the data in question in the storage <highlight><bold>140</bold></highlight> as an additional area to be moved. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> When another user tries to search for, update or delete the data being moved through the rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a</italic></highlight>, he must wait until the data move operation is completed because access to the data is locked. However, after the completion of the data move operation releases the lock, he can resume the operation so far awaited. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Further, even when another user tries to move the data being searched for, updated or deleted through the rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a</italic></highlight>, he must wait because access to the data is locked, until the lock is released. Once the lock is released, however, he can resume the rebalance operation so far awaited. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Thus it can be prevented that data be unduly updated in its value or deleted. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> During the execution of the rebalance operation <highlight><bold>102</bold></highlight><highlight><italic>a</italic></highlight>, data to provide a hash function value of 7 is stored in the storage <highlight><bold>120</bold></highlight> or <highlight><bold>140</bold></highlight> and data to provide hash function values of 2 and 3 is stored in the storage <highlight><bold>120</bold></highlight> or <highlight><bold>140</bold></highlight>. However, since the operation <highlight><bold>100</bold></highlight> of search, update or delete refers to both the existing and additional areas, the operation <highlight><bold>100</bold></highlight> can carry out the search, update or delete operation regardless of whether the data is stored in the existing storages or additional storage. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Further, when data to be rebalanced is inserted in a rebalance destination, excessive rebalance operation to the existing areas can be avoided. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Through the above operation, it becomes possible to accept and concurrently execute search, update, delete and insert processing requests to table data during the rebalance operation. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Such processing operation will be explained in detail in connection with specific examples of FIGS. <highlight><bold>5</bold></highlight> to <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a first detailed example of the arrangement of the database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> prior to its rebalance operation, <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shoes exemplary contents of a stock table to be managed by the database management system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart for explaining a first example of the processing operation of a DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart for explaining a second example of the processing operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart for explaining a third example of the processing operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a diagram for explaining the arrangement and operation of the database management system in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> associated with the rebalance operation, <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart for explaining an exemplary rebalance operation of the database management system of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, and <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram of an exemplary specific arrangement of the database system after the rebalance operation. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> A DBMS acceptance section <highlight><bold>600</bold></highlight> and DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>in the database management system in the database system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> have substantially the same functions as the DBMS acceptance section <highlight><bold>310</bold></highlight> and DBMS executors <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>320</bold></highlight><highlight><italic>c </italic></highlight>in the database management system <highlight><bold>300</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Stored in a storage <highlight><bold>630</bold></highlight> connected to the DBMS acceptance section <highlight><bold>600</bold></highlight> are a hash function value storage position correspondence table <highlight><bold>635</bold></highlight> having the same contents as the hash function value storage position correspondence table <highlight><bold>317</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> as well as table definition information <highlight><bold>631</bold></highlight> defined for each table. The table definition information <highlight><bold>631</bold></highlight> has a storage area (shown by &ldquo;additional area&rdquo; in the drawings) <highlight><bold>632</bold></highlight> indicative of a table storage place, additional area information (shown by &ldquo;additional area&rdquo; in the drawing) <highlight><bold>633</bold></highlight>, and a during-rebalance flag <highlight><bold>634</bold></highlight> indicative of &ldquo;during rebalance&rdquo;. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Storages <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>connected to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>respectively have storage data <highlight><bold>621</bold></highlight> and <highlight><bold>622</bold></highlight> of stock tables in the form of a database. The DBMS executors execute search, update, delete or insert operation in response to an instruction received from the DBMS acceptance section <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In this example, it is assumed that the number of divisions is set at 10 as a maximum, a hash function used for the division is set to have values of residues obtained when identification numbers (product codes) of products in storage data <highlight><bold>621</bold></highlight> and <highlight><bold>622</bold></highlight> are divided by the maximum division number 10. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the database treated in this example is a stock table <highlight><bold>500</bold></highlight> associated with clothing which includes items of product code <highlight><bold>510</bold></highlight>, product name <highlight><bold>520</bold></highlight>, color <highlight><bold>530</bold></highlight>, unit price <highlight><bold>540</bold></highlight> and stock amount <highlight><bold>550</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> When the stock table <highlight><bold>500</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is applied to the database system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> and data is stored as divided in the storages <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>with use of the value of the product code <highlight><bold>510</bold></highlight>, the distribution of the hash function value storage position correspondence table <highlight><bold>635</bold></highlight>, i.e., the hash function value storage position correspondence table <highlight><bold>317</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> in the two-division case is applied to the hash function value calculated for the value of the product code <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> As a result, data indicative of hash function values of 0, 9, 4, 6 and 7 are stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>, and data indicative of hash function values of 1, 8, 5, 2 and 3 are stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>. Further, storages A and B are defined in the storage area <highlight><bold>632</bold></highlight> of the table definition information <highlight><bold>631</bold></highlight> in the storage <highlight><bold>630</bold></highlight>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> When a search, update or delete request is issued under this condition, the DBMS acceptance section <highlight><bold>600</bold></highlight> accepts the request at a request acceptor <highlight><bold>601</bold></highlight>, analyzes the accepted request at an analyzer <highlight><bold>602</bold></highlight>, generates a processing procedure at a processing procedure generator <highlight><bold>603</bold></highlight> to realize the analyzed request, and determines one or ones of the DBMS executors which execute(s) the generated processing procedure at an execution destination decider <highlight><bold>604</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> In details of the operation of the execution destination decider <highlight><bold>604</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the decider first refers to the value of the during-rebalance flag <highlight><bold>634</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> to judge whether or not the rebalance operation is being executed (step S<highlight><bold>701</bold></highlight>). When determining that the rebalance operation is not being executed, the decider determines the area defined in the storage area <highlight><bold>632</bold></highlight> as its execution destination (step S<highlight><bold>702</bold></highlight>). </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, since the storages A and B are defined in the storage area <highlight><bold>632</bold></highlight>, the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>are determined as the execution destinations. The operation when the judgement result at the step S<highlight><bold>701</bold></highlight> indicates that the rebalance operation is being executed will be explained later. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> For the execution destinations thus determined, an execution request/result receiver <highlight><bold>605</bold></highlight> in the DBMS acceptance section <highlight><bold>600</bold></highlight> issues an execution request to the execution destinations and receives their execution results therefrom. In details of the operation of the execution request/result receiver <highlight><bold>605</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the execution request/result receiver first refers to the value of the during-rebalance flag <highlight><bold>634</bold></highlight> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>711</bold></highlight>). </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> When the receiver determines that the rebalance operation is not being executed, it issues a simultaneous execution request to all the DBMS executors determined by the execution destination decider <highlight><bold>604</bold></highlight> (step S<highlight><bold>712</bold></highlight>) and receives execution results from the DBMS executors (step S<highlight><bold>713</bold></highlight>). </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The DBMS acceptance section <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> returns the last-received execution result through the operation of a returner <highlight><bold>606</bold></highlight>. In this connection, the operation when the judgement result at the step S<highlight><bold>711</bold></highlight> indicates that the rebalance operation is being executed will be explained later. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> When an insert request is issued to the database management system in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the DBMS acceptance section <highlight><bold>600</bold></highlight> performs the operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight>, and determines an execution destination as an insert destination at the execution destination decider <highlight><bold>604</bold></highlight>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> In details of the operation of the execution destination decider <highlight><bold>604</bold></highlight> to determine an insert execution destination, as shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the decider <highlight><bold>604</bold></highlight> first refers to the value of the during-rebalance flag <highlight><bold>634</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>721</bold></highlight>). </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> When determining that the rebalance operation is not being executed, the decider calculates a hash function value on the basis of the data to be inserted, and selects an insert execution destination from the areas defined in the storage area <highlight><bold>632</bold></highlight> with use of the hash function value obtained by referring to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>) (step S<highlight><bold>722</bold></highlight>). In this connection, the operation when the result judged at the step S<highlight><bold>721</bold></highlight> indicates the rebalance operation is being executed will be explained later. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the DBMS acceptance section refers to the value of the product code of the insert data and finds a hash function value. When the hash function values are 0, 9, 4, 6 and 7, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>; while, when the hash function values are 1, 8, 5, 2 and 3, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> For the insert destination thus selected, the DBMS acceptance section <highlight><bold>600</bold></highlight> issues an insert execution request and receives its result from and at the execution request/result receiver <highlight><bold>605</bold></highlight>, and returns the last-received result from the returner <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In the database management system of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, when a storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>is added as a storage area of the stock table as shown in <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> storage C is defined in the additional area information <highlight><bold>633</bold></highlight> of the storage <highlight><bold>630</bold></highlight>, a rebalance operation request is generated, and the operation of a rebalance executor <highlight><bold>1100</bold></highlight> is started. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Explanation will be made as to details of the rebalance operation of the rebalance executor <highlight><bold>1100</bold></highlight> with reference to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. More specifically, the rebalance executor set the during-rebalance flag <highlight><bold>634</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> at &ldquo;during execution of the rebalance operation&rdquo; (step S<highlight><bold>1101</bold></highlight>), finds the numbers of divisions before and after the area addition by referring to the storage area information <highlight><bold>632</bold></highlight> and additional area information <highlight><bold>633</bold></highlight>, and finds data to be moved by referring to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (step S<highlight><bold>1102</bold></highlight>). </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> A single area is added to change the system from the two-division type to a three-division type in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. Thus it will be appreciated that data indicative of the hash function values of 2, 7 and 3 is to be moved on the basis of the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>). </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The rebalance executor <highlight><bold>1100</bold></highlight> issues a data search request to the DBMS executor having the to-be-moved data thus found and stored therein (step S<highlight><bold>1103</bold></highlight>). In <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, since data indicative of the hash function value of 7 to be moved is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and data indicative of the hash function values of 2 and 3 are stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>, the rebalance executor issues a search request to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> The DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>when receiving the search request from the rebalance executor <highlight><bold>1100</bold></highlight> searches for one case of data and return its result to the DBMS acceptance section <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, the DBMS acceptance section <highlight><bold>600</bold></highlight> accepts the data corresponding to one case returned from the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>(step S<highlight><bold>1104</bold></highlight>), calculates a hash function value based on the value of the accepted data, finds a move destination by referring to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (step S<highlight><bold>1105</bold></highlight>), and issues an insert request to the DBMS executor as the move destination (step S<highlight><bold>1106</bold></highlight>). </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> The DBMS executor when receiving the insert request executes data insert operation and informs the DBMS acceptance section <highlight><bold>600</bold></highlight> of its insert completion (step S<highlight><bold>614</bold></highlight>). The DBMS acceptance section <highlight><bold>600</bold></highlight> accepts a notification indicative of the data insert completion (step S<highlight><bold>1107</bold></highlight>) and issues a delete request to delete the insert original data (step S<highlight><bold>1108</bold></highlight>). </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> For example, in the case of the rebalance executor <highlight><bold>1100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>searches for data <highlight><bold>1000</bold></highlight> having a product code value of 677 and returns it to the DBMS acceptance section <highlight><bold>600</bold></highlight>. Since the data move destination is the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>, the rebalance executor <highlight><bold>1100</bold></highlight> issues an insert request to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>to store data <highlight><bold>1001</bold></highlight> in the storage <highlight><bold>620</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> After the insert completion, the rebalance executor <highlight><bold>1100</bold></highlight> issues a request to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>to delete the data <highlight><bold>1000</bold></highlight> having a product code value of 677. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> When the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>receives the delete request from the rebalance executor <highlight><bold>1100</bold></highlight>, a delete <highlight><bold>613</bold></highlight><highlight><italic>a </italic></highlight>in the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>deletes the corresponding data. After completing the delete operation, the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>informs the DBMS acceptance section <highlight><bold>600</bold></highlight> of the delete completion. The DBMS acceptance section <highlight><bold>600</bold></highlight> accepts the data delete completion notification (step S<highlight><bold>1109</bold></highlight>), and extracts next search data and examines the presence or absence of the next search data (step S<highlight><bold>1110</bold></highlight>). </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> In the presence of the next data, the DBMS acceptance section <highlight><bold>600</bold></highlight> accepts data at the steps S<highlight><bold>1110</bold></highlight> to S<highlight><bold>1104</bold></highlight> and repetitively performs the insert and delete operations until the data becomes null. When the next data becomes null and the move operation of all the data is fully terminated, the DBMS acceptance section <highlight><bold>600</bold></highlight> adds contents of the additional area information <highlight><bold>633</bold></highlight> in the storage area <highlight><bold>632</bold></highlight> (S<highlight><bold>1111</bold></highlight>), deletes contents of the additional area information <highlight><bold>633</bold></highlight> (S<highlight><bold>1112</bold></highlight>), and erases the during-rebalance flag <highlight><bold>634</bold></highlight> (S<highlight><bold>1113</bold></highlight>). </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> After the rebalance operation is completed in this way, storage data <highlight><bold>621</bold></highlight><highlight><italic>a </italic></highlight>is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>, storage data <highlight><bold>622</bold></highlight> is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>, and storage data <highlight><bold>623</bold></highlight> is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Explanation will next be made as to the operation of the system when a data search, update and delete request and a data insert request are issued during the rebalance operation, that is, as to the database management method according to the present invention. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Explanation will first be made in connection with a case where a data search, update and delete request was issued. In the DBMS acceptance section <highlight><bold>600</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, in this case, the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight> performs their operations and the execution destination decider <highlight><bold>604</bold></highlight> performs its execution destination determining operation. In the execution destination determining operation, the DBMS acceptance section <highlight><bold>600</bold></highlight> refers to the during-rebalance flag and judges whether or not the rebalance operation is being executed as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> At this time, if the rebalance operation is being executed, then the DBMS acceptance section <highlight><bold>600</bold></highlight> determines the areas defined in the storage area <highlight><bold>632</bold></highlight> and additional area information <highlight><bold>633</bold></highlight> of the table definition information <highlight><bold>631</bold></highlight> in the storage <highlight><bold>630</bold></highlight> as execution destinations (step S<highlight><bold>703</bold></highlight>). In the example of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, since the storages <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>are defined in the storage area <highlight><bold>632</bold></highlight> as storages A and B and the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>is defined in the additional area <highlight><bold>633</bold></highlight> as the storage C, the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>are determined as execution destinations. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> For the execution destinations thus determined, the execution request/result receiver <highlight><bold>605</bold></highlight> in the DBMS acceptance section <highlight><bold>600</bold></highlight> performs its execution request/result receiving operation, which will be explained by referring to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> That is, the DBMS acceptance section <highlight><bold>600</bold></highlight> refers to the during-rebalance flag <highlight><bold>634</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>711</bold></highlight>). Since the rebalance operation is being executed, the DBMS acceptance section <highlight><bold>600</bold></highlight>, on the basis of the execution destination determined at the step S<highlight><bold>703</bold></highlight> in the execution destination determination process of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, first issues an execution request to the DBMS executors associated with the storages defined in the storage area <highlight><bold>632</bold></highlight> (step S<highlight><bold>714</bold></highlight>). </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> When accepting execution results from all the DBMS executors as the execution request destinations (step S<highlight><bold>715</bold></highlight>), the DBMS acceptance section <highlight><bold>600</bold></highlight> issues a execution request to the DBMS executor associated with the storage defined in the additional area <highlight><bold>633</bold></highlight> (step S<highlight><bold>716</bold></highlight>)and receives an execution result from the DBMS executor subjected to the execution request (step S<highlight><bold>717</bold></highlight>). </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The DBMS acceptance section <highlight><bold>600</bold></highlight> returns the last received result through the operation of the step S<highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the storages <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>are defined in the storage area <highlight><bold>632</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> and the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>is defined in the additional area <highlight><bold>633</bold></highlight>. Thus the DBMS acceptance section <highlight><bold>600</bold></highlight> first issues a search, update and delete execution request to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b</italic></highlight>, and after receiving all their results therefrom, the DBMS acceptance section issues the search, update and delete execution request to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>and receives its result. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> When an insert request is issued during the rebalance operation, the DBMS acceptance section <highlight><bold>600</bold></highlight> performs the operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight>, processing procedure generator <highlight><bold>603</bold></highlight> and execution destination decider <highlight><bold>604</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, and the operation of the execution destination decider <highlight><bold>604</bold></highlight> is as shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> That is, in the step S<highlight><bold>721</bold></highlight> wherein the during-rebalance flag is referred to to judge whether or not the rebalance operation is being executed, since the rebalance operation is being executed, the DBMS acceptance section <highlight><bold>600</bold></highlight> finds a hash function value based on the data to be inserted, refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight>, and selects an insert destination from the areas defined in the storage area information <highlight><bold>632</bold></highlight> and additional area <highlight><bold>633</bold></highlight> on the basis of the hash function values (step S<highlight><bold>723</bold></highlight>). </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the DBMS acceptance section <highlight><bold>600</bold></highlight> refers to the value of the product code for the data to be inserted and finds hash function values. When the hash function values are 0, 9, 4 and 6, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>. When the hash function values are 1, 8 and 5, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>. When the hash function values are 2, 7 and 3, the acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> And in the DBMS acceptance section <highlight><bold>600</bold></highlight>, the execution request/result receiver <highlight><bold>605</bold></highlight> performs its operation over the selected insert destination and the section <highlight><bold>600</bold></highlight> returns the last-received result from the returner <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Such data being searched for, updated, deleted or inserted is locked, so that it is prohibited that another user or rebalance operation performs search, update or delete operation thereover, unless otherwise specifically stated by the user. Similarly, data to be subjected to a move operation for each data case during the rebalance operation is also locked, so that another user is prohibited from performing search, update or delete operation thereover until the move operation is completed. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> All the storages having data stored therein have been checked in order to determine the execution destination of the search, update or delete operation in the present embodiment. When the search, update or delete operation is added with a condition, however, the check can be carried out over only limited one of the storages as the execution destination. When the storages as the execution destination are limited in the search, update or delete operation during the rebalance operation, it is only required to perform update or delete operation over the additional area, only when data to be rebalanced is stored in the storage of the execution destination. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Through the above operation, even when another user issues a search, update or delete processing request during rebalance operation, the system can accept the search, update or delete processing request to node table data during the rebalance operation and sequentially execute the DBMS executors. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> Explanation will next be made as to a database system in accordance with another embodiment of the present invention. In this database system, when data stored in existing storages determined by hash division is subjected to rebalance operation due to addition of a storage, for example, the system copies the data determined to be moved from the existing storages to the additional storage, adds position information of the data on the additional storage to the data within the storages as copy sources, and, after completing the copying operation of all the data to be moved to the additional storage, deletes all the data of the copy sources. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> And when a search request to the table data is issued during the execution of the data rebalance operation, the system performs searching operation over the data stored in the existing storages. When an update/delete request to the table data is issued during the rebalance operation, the system first processes the data stored in the existing storages as update/delete object. When position information indicative of a copy destination to the additional storage is added to the data to be updated and deleted, the system performs the same update/delete operation over the data of the copy destination. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Further, when an insert request to the table data is issued during the execution of the rebalance operation and the data in question is to be moved to the additional storage, the system stores the insert data in the existing storages and also even in the additional storage as a move destination, and adds storage position information to the additional storage to the data stored in the existing storages. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> The basic arrangement of the database system performing such operation as mentioned above is the same as that of the system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, or may be the same as that of the system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> By referring to FIGS. <highlight><bold>13</bold></highlight> to <highlight><bold>21</bold></highlight>, explanation will be made as to the operation of a database system as a second embodiment which has such an arrangement as mentioned above, and wherein data division is based on the hash function value storage position correspondence table <highlight><bold>317</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference> and the stock table of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is applied to the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram of a second detailed example of the arrangement of the database management system in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> prior to rebalance operation, <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a flowchart for explaining an example of search execution destination determining operation of a DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a flowchart for explaining an example of update/delete execution destination determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a flowchart for explaining an example of update execution destination determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a flowchart for explaining an example of delete execution destination determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a flowchart for explaining an example of insert execution destination determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a flowchart for explaining an example of insert execution destination determining operation of the DBMS acceptance section in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a diagram of the database management system of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> for explaining the rebalance operation thereof, <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a flowchart for explaining an example of the rebalance operation of the database management system of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, and <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a diagram for explaining a second example of accepting and executing a database processing request during the rebalance operation in the database system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> In the database system of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, when a search request is issued, a DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>performs respective operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight>, and determines an execution destination through the operation of the execution destination decider <highlight><bold>604</bold></highlight>. In the execution destination determining operation of this example, the areas defined in the storage area <highlight><bold>632</bold></highlight> are merely determined to be the execution destinations as detailed in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> (step S<highlight><bold>1301</bold></highlight>). </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, since the storages A and B are defined in the storage area <highlight><bold>632</bold></highlight>, the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>are determined as the execution destinations. And the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>issues a search execution request from the execution request/result receiver <highlight><bold>605</bold></highlight> to the execution destinations thus determined, receives their results, and returns the last-received result thereto from the returner <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Even with respect to data update or delete, when its request is issued, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>performs the respective operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight>, and determines an execution destination through the operation of the execution destination decider <highlight><bold>604</bold></highlight>. In the execution destination determining operation, as in the search request, the areas defined in the storage area <highlight><bold>632</bold></highlight> are merely determined as execution destinations as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference> (step S<highlight><bold>1401</bold></highlight>). </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, since the storages A and B are defined in the storage area <highlight><bold>632</bold></highlight>, the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>are determined as the execution destinations. And the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>issues an update/delete execution request from the execution request/result receiver <highlight><bold>605</bold></highlight> to the execution destinations thus determined, receives their results, and returns the last-received result from the returner <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> The DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>search for the data to be updated/deleted (steps S<highlight><bold>1501</bold></highlight> and SA<highlight><bold>1601</bold></highlight>) and execute the update/delete operation through the operations of updates <highlight><bold>612</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>612</bold></highlight><highlight><italic>b </italic></highlight>and deletes <highlight><bold>613</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>613</bold></highlight><highlight><italic>b </italic></highlight>(steps S<highlight><bold>1502</bold></highlight> and S<highlight><bold>1602</bold></highlight>) as shown in <cross-reference target="DRAWINGS">FIGS. 16 and 17</cross-reference>. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Further, the DBMS executor refers to the update/delete data and judges whether or not position information indicative of a copy destination is added to the data (steps S<highlight><bold>1503</bold></highlight> and S<highlight><bold>1603</bold></highlight>). If the position information indicative of the copy destination is added, then the DBMS executor executes the update/delete operation over data to be copied (steps S<highlight><bold>1506</bold></highlight> and S<highlight><bold>1606</bold></highlight>). </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Thereafter or in the steps S<highlight><bold>1503</bold></highlight> and S<highlight><bold>1603</bold></highlight>, when the position information is not added, the DBMS executor extracts the data to be next updated/deleted and judges whether or not the next data is present (steps S<highlight><bold>1504</bold></highlight> and S<highlight><bold>1604</bold></highlight>). In the presence of the next data, the DBMS executor repeats the operations of the steps S<highlight><bold>1501</bold></highlight> and S<highlight><bold>1601</bold></highlight> and subsequent steps until the data is fully searched for. In the absence of the next data, when the searching operation of all the data is completed, the DBMS executor informs the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>of the execution completion (steps S<highlight><bold>1505</bold></highlight> and S<highlight><bold>1605</bold></highlight>). </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> When an insert request is issued, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> performs the operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight>, and determines an insert destination through the operation of the execution destination decider <highlight><bold>604</bold></highlight>. In this example, the insert destination determining operation is as shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> More specifically, the DBMS acceptance section first refers to the during-rebalance flag <highlight><bold>634</bold></highlight> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>1701</bold></highlight>). In this case, the DBMS acceptance section determines that the rebalance operation is not being executed, finds a hash function value from the data to be inserted, refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>), and selects an insert destination from the areas defined in the storage area <highlight><bold>632</bold></highlight> on the basis of the hash function value (step S<highlight><bold>1702</bold></highlight>). </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the DBMS acceptance section refers to the value of a product code for the insert data and finds its hash function value. When the hash function values are 0, 9, 4, 6 and 7, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>. When the hash function values are 1, 8, 5, 2 and 3, the DBMS acceptance section selects the storage <highlight><bold>620</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> The DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>issues an insert execution request from the execution request/result receiver <highlight><bold>605</bold></highlight> to the selected insert destination and receives its result therefrom. The execution request issuance and result reception are carried out according to a procedure as shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> More specifically, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> refers to the during-rebalance flag <highlight><bold>634</bold></highlight> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>1801</bold></highlight>). When the rebalance operation is not executed, the DBMS acceptance section issues an insert execution request to the DBMS executor associated with the storage selected through the deciding operation of the execution destination decider <highlight><bold>604</bold></highlight> (step A<highlight><bold>1802</bold></highlight>), and receives its result therefrom (step S<highlight><bold>1803</bold></highlight>). And the DBMS acceptance section returns the last-received result. The operation of the DBMS acceptance section when determining that the rebalance operation is being executed will be explained later. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> As in the case of the example of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, when the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>as a storage area of the stock table is added to the database system of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> as shown in <cross-reference target="DRAWINGS">FIG. 20, a</cross-reference> storage C is defined in the additional area <highlight><bold>633</bold></highlight> of the storage <highlight><bold>630</bold></highlight> and the operation of a rebalance executor <highlight><bold>1901</bold></highlight> is started by a rebalance operation request. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In the rebalance operation, as shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, DBMS acceptance section first sets the during-rebalance flag <highlight><bold>634</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> in &lsquo;during rebalance&rsquo; during the execution of the rebalance operation (step S<highlight><bold>2001</bold></highlight>), refers to the storage area information <highlight><bold>632</bold></highlight> and additional area information <highlight><bold>633</bold></highlight>, finds the number of divisions before the area addition and the number of division after the area division, refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>), and finds data to be moved (step S<highlight><bold>2002</bold></highlight>). </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, since a single area is added to the two division tables to form three division tables, it will be appreciated that data having hash function values of 2, 7 and 3 is to be moved from the hash function value storage position correspondence table <highlight><bold>317</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Next, the DBMS acceptance section issues a data search request to the DBMS executor having the move data found at the step S<highlight><bold>2002</bold></highlight> (step S<highlight><bold>2003</bold></highlight>). In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, since the hash function value of 7 for the move data is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and the hash function values of 2 and 3 are stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>, the DBMS acceptance section issues the search request to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> The DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>when receiving the search request from the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>search for one case of data and return its result to the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a</italic></highlight>. The DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>receives one case of result in the rebalance executor <highlight><bold>1901</bold></highlight> (step S<highlight><bold>2004</bold></highlight>), calculates a hash function value based on the received data value, refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>), finds a move destination (DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>)(step S<highlight><bold>2005</bold></highlight>), and issues an insert request to the move destination (step S<highlight><bold>2006</bold></highlight>). </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> The DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>when receiving the insert request inserts the data in the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>through the operation of an insert <highlight><bold>614</bold></highlight><highlight><italic>c</italic></highlight>, and informs the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>of data insert position information and insert operation completion. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> The DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>receives the data insert position information and insert operation completion at the rebalance executor <highlight><bold>1901</bold></highlight> (step S<highlight><bold>2007</bold></highlight>), and adds move-destination data insert position information to the move source data (step S<highlight><bold>2008</bold></highlight>). </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>searches for data (&lsquo;trainer&rsquo;) <highlight><bold>1911</bold></highlight> having a product code value of 677, returns it to the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a</italic></highlight>. Since the data move destination is the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>issues an insert request to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>and data <highlight><bold>1921</bold></highlight> is stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>. And after completion of the insert operation, the move-destination position information <highlight><bold>1921</bold></highlight> is added to the data <highlight><bold>1911</bold></highlight> of the move source of the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> After the operation of the step S<highlight><bold>2008</bold></highlight>, the rebalance executor <highlight><bold>1901</bold></highlight> of the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> reads next search data and judges whether or not the next data is present (step S<highlight><bold>2009</bold></highlight>). In the presence of the next data, the rebalance executor repeats the data acceptance, move-destination specifying, data inserting and move-destination position information adding operations of the steps S<highlight><bold>2004</bold></highlight> to S<highlight><bold>2008</bold></highlight> until the operation of the data is fully completed. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> When the next data becomes null move operation of all the data is completed in a step S<highlight><bold>2009</bold></highlight>, the DBMS acceptance section issues a delete request of the data added with the move-destination position information to the DBMS executor having so far stored therein the move data (step S<highlight><bold>2010</bold></highlight>). </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> The DBMS executor when receiving the delete request searches for and deletes the target data. After completion of the delete operation, the DBMS executor informs the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>of the delete completion. Thus the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>receives the delete completion of the data (step S<highlight><bold>2011</bold></highlight>), adds the additional area information <highlight><bold>633</bold></highlight> to the storage area information <highlight><bold>632</bold></highlight> (step S<highlight><bold>2012</bold></highlight>), deletes the additional area information <highlight><bold>633</bold></highlight> (step S<highlight><bold>2013</bold></highlight>), and erases the during-rebalance flag (step S<highlight><bold>2014</bold></highlight>). </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> When the rebalance operation is completed in this way, data <highlight><bold>621</bold></highlight> (stock table) so far stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and data <highlight><bold>622</bold></highlight> (stock table) so far stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> are rebalanced as in the case of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> so that the storage data <highlight><bold>621</bold></highlight><highlight><italic>a </italic></highlight>is placed in the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>, the storage data <highlight><bold>622</bold></highlight><highlight><italic>a </italic></highlight>is placed in the storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>, and the storage data <highlight><bold>623</bold></highlight> is placed in the storage <highlight><bold>620</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> Explanation will then be made in connection with a case where a search or update, delete and insert processing request is issued during such rebalance operation. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> When a search processing request is issued during the rebalance operation, first of all, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIGS. 13 and 20</cross-reference> accepts a request at the request acceptor <highlight><bold>601</bold></highlight>, analyzes the request at the analyzer <highlight><bold>602</bold></highlight>, generates a processing procedure at the processing procedure generator <highlight><bold>603</bold></highlight> and determines an execution destination at the execution destination decider <highlight><bold>604</bold></highlight>. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> In the execution-destination determining operation, the areas defined in the storage area <highlight><bold>632</bold></highlight> of the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> are determined as the execution destinations as shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> (step S<highlight><bold>1301</bold></highlight>). </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, since the storages A and B are defined in the storage area <highlight><bold>632</bold></highlight>, the DBMS acceptance section issues a search execution request to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> That is, the execution request/result receiver <highlight><bold>605</bold></highlight> issues the search execution request to the execution destinations determined by the execution destination decider <highlight><bold>604</bold></highlight>, and receives their results. And the returner <highlight><bold>606</bold></highlight> returns the last received result received by the execution request/result receiver <highlight><bold>605</bold></highlight>. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> Next, when an update or delete processing request is issued during the rebalance operation, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>accepts the request at the request acceptor <highlight><bold>601</bold></highlight>, analyzes the request at the analyzer <highlight><bold>602</bold></highlight>, generates a processing procedure at the processing procedure generator <highlight><bold>603</bold></highlight>, and determines an execution destination at the execution destination decider <highlight><bold>604</bold></highlight>. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> In the execution destination determining operation, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, the areas defined in the storage area <highlight><bold>632</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> are defined as the execution destinations (step S<highlight><bold>1401</bold></highlight>). </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, since the storages A and B are defined in the storage area <highlight><bold>632</bold></highlight>, the DBMS acceptance section issued an update or delete execution request to the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> The DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>search for (steps S<highlight><bold>1501</bold></highlight> and S<highlight><bold>1601</bold></highlight>), updates or deletes (steps S<highlight><bold>1502</bold></highlight> and S<highlight><bold>1602</bold></highlight>) data specified by the deletes <highlight><bold>613</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>613</bold></highlight><highlight><italic>b</italic></highlight>, as shown in <cross-reference target="DRAWINGS">FIGS. 16 and 17</cross-reference>. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> Further, DBMS acceptance section refers to the update or delete data, judges whether or not position information indicative of a copy destination is added to the update or delete data (steps S<highlight><bold>1503</bold></highlight> and S<highlight><bold>1603</bold></highlight>). When the position information is added, the DBMS acceptance section updates or deletes data at the copy destination (steps S<highlight><bold>1506</bold></highlight> and S<highlight><bold>1606</bold></highlight>). </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Thereafter or in the steps S<highlight><bold>1503</bold></highlight> and S<highlight><bold>1603</bold></highlight>, if the position information is not added, the DBMS acceptance section reads next data specified to be updated or deleted and judges whether or not the next data is present (steps S<highlight><bold>1504</bold></highlight> and S<highlight><bold>1604</bold></highlight>). </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> In the presence of the next data, the DBMS acceptance section repeats the operations of the steps S<highlight><bold>1501</bold></highlight> and S<highlight><bold>1601</bold></highlight> and subsequent steps until all the data is searched for. In the absence of the next data, when the searching operation of all the data is completed, the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>inform the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>of the execution completion (steps S<highlight><bold>1505</bold></highlight> and S<highlight><bold>1605</bold></highlight>). </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> When the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>receives the execution completion notification from the DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>in this way, the DBMS acceptance section returns the last received result. That is, the execution request/result receiver <highlight><bold>605</bold></highlight> receives the results and the returner <highlight><bold>606</bold></highlight> returns the result last received at the execution request/result receiver <highlight><bold>605</bold></highlight>. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> When an insert request is issued, the DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIGS. 13 and 20</cross-reference> performs the respective operations of the request acceptor <highlight><bold>601</bold></highlight>, analyzer <highlight><bold>602</bold></highlight> and processing procedure generator <highlight><bold>603</bold></highlight>, and determines an insert destination at the execution destination decider <highlight><bold>604</bold></highlight>. In this example, the insert destination determining operation is as shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> More specifically, the DBMS acceptance section first refers to the during-rebalance flag <highlight><bold>634</bold></highlight> and determines whether or not the rebalance operation is being executed (step S<highlight><bold>1701</bold></highlight>). Because the rebalance operation is being executed, the DBMS acceptance section finds a hash function value based on the data to be inserted (step S<highlight><bold>1701</bold></highlight>), refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight> (hash function value storage position correspondence table <highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>), determines an insert destination (1) (to be arbitrarily inserted) from the storage area <highlight><bold>632</bold></highlight> on the basis of the hash function value (step S<highlight><bold>1703</bold></highlight>), and determines an insert destination (2) (to be arbitrarily inserted) from the areas defined in the storage area <highlight><bold>632</bold></highlight> and the area defined in the additional area <highlight><bold>633</bold></highlight> (step S<highlight><bold>1704</bold></highlight>). </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, when the hash function values are 0, 9, 4, 6 and 7, the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>is selected as the insert destination (1); while, when the hash function values are 1, 8, 5, 2 and 3, the storage <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>is selected. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> When the hash function values are 0, 9, 4 and 6, the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>is selected. When the hash function values are 1, 8 and 5, the storage <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>is selected. When the hash function values are 2, 7 and 3, the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>is selected. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> The DBMS acceptance section <highlight><bold>600</bold></highlight><highlight><italic>a </italic></highlight>issues an insert execution request from the execution request/result receiver <highlight><bold>605</bold></highlight> to the insert destination thus selected, and receives their results. The issuance of the execution request and acceptance of the results are as shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> More specifically, the execution request/result receiver <highlight><bold>605</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> first refers to the during-rebalance flag <highlight><bold>634</bold></highlight> in the table definition information <highlight><bold>631</bold></highlight> of the storage <highlight><bold>630</bold></highlight> and judges whether or not the rebalance operation is being executed (step S<highlight><bold>1801</bold></highlight>). </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> Since the rebalance executor is now being executed, the DBMS acceptance section examines whether the storage as the insert destination (1) coincides with the storage as the insert destination (2) (step S<highlight><bold>1804</bold></highlight>). When finding a coincidence therebetween, the DBMS acceptance section issues an insert execution request to the determined insert destination (step S<highlight><bold>1805</bold></highlight>), and receives its result (step S<highlight><bold>1806</bold></highlight>). </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> When insert destination (1) is different from the insert destination (2) in the examination result of the step S<highlight><bold>1804</bold></highlight>, the DBMS acceptance section issues an insert execution request first to the insert destination (2) (step S<highlight><bold>1807</bold></highlight>) and, after completion of the insert operation at the associated DBMS executor, receives insert destination data storage position information therefrom (step S<highlight><bold>1808</bold></highlight>). </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Next, the DBMS acceptance section adds the data storage position information received at the time of completion of insert operation to the insert destination (2) to the insert data, issues an insert execution request to the insert destination (1) (step S<highlight><bold>1809</bold></highlight>), and, after the associated DBMS executor completes the insert operation, receives its result (step S<highlight><bold>1810</bold></highlight>). </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, when the hash function values are 0, 9, 4 and 6, the insert destination (1) is the same as the insert destination (2), that is, the same storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>. When the hash function values are 1, 8 and 5, the inserts (1) and (2) are the same as the insert storage <highlight><bold>620</bold></highlight><highlight><italic>b</italic></highlight>. Thus the DBMS acceptance section issues an insert request to the respective DBMS executors <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>and receives their insert results. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> When the hash function value is 7, the insert destination (1) is the storage <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and the insert destination (2) is the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>. Thus the DBMS acceptance section issues an insert request first to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>corresponding to the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>, receives insert position information data, and issues an insert request of data added with the insert position data received by the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>a </italic></highlight>corresponding to the storage <highlight><bold>620</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> Similarly, the hash function values are 2 and 3, the insert destination (1) is the storage <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>and the insert destination (2) is the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>. Thus the DBMS acceptance section first issues an insert request to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>associated with the storage <highlight><bold>620</bold></highlight><highlight><italic>c</italic></highlight>, receives insert position information data, and the issues an insert request of data added with the insert position data received at the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>c </italic></highlight>to the DBMS executor <highlight><bold>610</bold></highlight><highlight><italic>b </italic></highlight>associated with the storage <highlight><bold>620</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> During such search, update, delete or insert operation, since data being processed is locked, another user or rebalance operation is prohibited from performing the search, update, delete or insert operation unless otherwise specifically stated by the user. Similarly, since even data to be moved for each data case during the rebalance operation is also locked, another user is prohibited from performing the search, update, delete or insert operation until the move operation is completed. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> The execution destination of the search, update, delete or insert operation has been determined for all the storages having the date stored therein in this example. However, in the case of the search, update, delete or insert operation having a condition added thereto, the limited execution destination can be executed. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> The rebalance operation and the search, update, delete or insert operation during the rebalance operation in the aforementioned second embodiment will be summarized as follows with reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> First in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>A, it is assumed that hash function values of 0, 4, 6, 7 and 9 are stored in a storage <highlight><bold>2120</bold></highlight> and hash function values of 1, 2, 3, 5 and 8 are stored in a storage <highlight><bold>2130</bold></highlight> respectively as divided. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> When there are database tables thus divided, a search operation <highlight><bold>2100</bold></highlight> is executed by the storages <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight>, an update/delete operation <highlight><bold>2100</bold></highlight> is executed by the storages <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight>, and such insert operation of data <highlight><bold>2131</bold></highlight> as to provide a hash function values of 3 is executed by the storage <highlight><bold>2130</bold></highlight>. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> When a storage <highlight><bold>2140</bold></highlight> is added as shown in <cross-reference target="DRAWINGS">FIG. 22B</cross-reference> (a combination of the storage <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight> being called an existing are and the storage <highlight><bold>2140</bold></highlight> being called an additional area), a rebalance operation <highlight><bold>2103</bold></highlight> selects data <highlight><bold>2121</bold></highlight> to be moved to the storage <highlight><bold>2140</bold></highlight> from the data stored in the storages <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight>, copies the selected data <highlight><bold>2121</bold></highlight> to the storage <highlight><bold>2140</bold></highlight>, and adds storage position information <highlight><bold>2122</bold></highlight> of data <highlight><bold>2142</bold></highlight> copied to the copy source data <highlight><bold>2121</bold></highlight>. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> The copy of the data <highlight><bold>2121</bold></highlight> is carried out by the search operation of the move data of the storages <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight> and by the insert operation to the data <highlight><bold>2142</bold></highlight>. During a time from the copy of the move target data <highlight><bold>2121</bold></highlight> to the add of the storage position information to the data <highlight><bold>2121</bold></highlight>, the data <highlight><bold>2121</bold></highlight> is locked so that another user is prohibited from performing the search, update, or delete operation. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> The search operation <highlight><bold>2100</bold></highlight> during such rebalance operation is executed in the existing areas. That is, the search operation is executed in the storages <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight>. Further update/delete operation <highlight><bold>2101</bold></highlight> during the rebalance operation is also executed in the existing area. When the copy destination position information is added to the data to be updated/deleted, however, the update/delete operation is executed even over data indicated by the copy destination position information. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> That is, when the update/delete operation is executed in the storage <highlight><bold>2120</bold></highlight> and <highlight><bold>2130</bold></highlight> to update/delete the data <highlight><bold>2121</bold></highlight> and <highlight><bold>2131</bold></highlight> added with the copy destination position information <highlight><bold>2122</bold></highlight> and <highlight><bold>2132</bold></highlight>, the update/delete operation is executed even over the data <highlight><bold>2141</bold></highlight> and <highlight><bold>2142</bold></highlight> of the storage <highlight><bold>2140</bold></highlight> indicated by the copy destination position information <highlight><bold>2122</bold></highlight> and <highlight><bold>2132</bold></highlight>. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> In this connection, the data being searched/updated/deleted is locked so that the rebalance operation is prohibited from referring to the data unless otherwise specifically stated by another user. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Next, in the insert operation <highlight><bold>2102</bold></highlight> of such data <highlight><bold>2131</bold></highlight> as to provide a hash function value of 3 during the rebalance operation, the data <highlight><bold>2141</bold></highlight> is stored in the storage <highlight><bold>2140</bold></highlight> and the data <highlight><bold>2131</bold></highlight> added with the data position information <highlight><bold>2132</bold></highlight> is stored in the storage <highlight><bold>2130</bold></highlight>. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> When another user tries to perform search/update/delete operation over the data being moved during the rebalance operation, he has to wait until the move operation of the data is completed because the data is locked to prohibit access thereto. However once the lock is release due to the move completion of the data, his operation so far awaited can be resumed. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Further, even when the rebalance operation tries to move the data being searched/updated/deleted, the lock of the data causes prohibition of access to the data. Thus the move operation has to be awaited until the user release the lock. Once the lock is released, the rebalance operation so far awaited can be resumed. Thus it can be prevented that the value of the data be unduly updated or the data be deleted. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> Further, since the data moved through the rebalance operation remains in the existing areas even during the rebalance operation, only execution in the existing areas enables search operation of all the data. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> In this manner, in the database system of the second embodiment, the data moved by the rebalance operation is added. Therefore, when the update/delete operation is executed over the data indicated by the position information at the time of updating/deleting the data added with the position information, the update/delete operation can be realized even over the data moved by the rebalance operation. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> Further, when data to be rebalanced is stored in the same format as data being rebalanced, generation of excessive rebalance operation can be prevented. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> As a result, the system can accept search, update, delete and insert processing requests to the table being rebalanced during the rebalance operation and can execute them concurrently. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> In the database management system of the arrangement allowing realization of both of the aforementioned first and second embodiments, when the function operation of either one of the first and second embodiments is selected on the basis of the presence or absence of a column type or index included in the table, the rebalance operation and the search, update, delete and insert operations optimum for the attribute of the table can be executed. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Similarly, it is also possible to reduce the number of storages for data storage. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> In the database management system of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, such storage areas of a stock table as shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference> and the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>is disconnected. Thus when the storage C is defined in a disconnection area information <highlight><bold>636</bold></highlight> of the storage <highlight><bold>630</bold></highlight> and a rebalance processing request is generated, the operation of a rebalance operation executor <highlight><bold>1101</bold></highlight> is started. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> The details of the rebalance operation of the rebalance operation executor <highlight><bold>1101</bold></highlight> are nearly the same as when the aforementioned explanation based on <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, but data to be moved corresponds to all the data stored in the disconnection area. Further, the number of area divisions is reduced from three to two so that, on the basis of the hash function value storage position correspondence table <highlight><bold>635</bold></highlight>, data indicative of hash function values of 2, 7 and 3 stored in the storage <highlight><bold>620</bold></highlight><highlight><italic>c </italic></highlight>and having a hash function value of 7 is moved to the storage <highlight><bold>620</bold></highlight><highlight><italic>a</italic></highlight>, and data indicative of hash function values of 2 and 3 is moved to the storage <highlight><bold>620</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> When the rebalance operation is completed, the data are stored in the storages <highlight><bold>620</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>620</bold></highlight><highlight><italic>b </italic></highlight>as shown in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> The operation when data search, update or delete request is issued during the rebalance operation is nearly the same as the aforementioned description. The operation when an insert request is issued during the rebalance operation is nearly the same as the aforementioned description, except for the operation of the insert destination decider. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> The operation of the insert destination decider find a hash function based on data to be inserted, refers to the hash function value storage position correspondence table <highlight><bold>635</bold></highlight>, and selects an insert destination from one of the areas defined in the storage area information <highlight><bold>632</bold></highlight> by the hash function other than the area defined in the disconnection area information <highlight><bold>636</bold></highlight>. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> As has been explained in connection with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>25</bold></highlight>, the database system and database management method in this example performs its data management operation according to a procedure which follows. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> (a) In the database system for allocating the data of the table having a plurality of data items to a plurality of storages and storing the table data in storages determined by a specified division rule (method) such as, e.g., hash function, when a storage is required to be added for storage of the table data, the system determines data to be moved to the additional storage according to the hash function with use of information on the existing and additional storages, performs the data rebalance operation to move all the determined data to the additional storage. Further, when a search, update or delete request to the table data is issued during the data rebalance operation, the system executes the search, update or delete operation over the existing and additional storages for storage of the data in question. When an insert request to the table data is issued, the system determines one of the existing and additional storages for the data to be inserted according to the division rule using the hash function and inserts the data in question in the determined storage. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> (b) In the parallel database system for performing parallel operation over the respective storages when a search, update or delete request to the table data is issued, in particular, when a storage is required to be added for storage of the table data, the system determines data to be moved from the existing storages to the additional storage according to the division rule using the hash function or the like with use of information on the existing and additional storage, and performs rebalance operation over all the determined data to be moved to the additional storage. When search, update and delete requests to the table data are issued during the data rebalance operation, the system performs parallel operation of search, update and delete in the existing and additional storages. When the operation of the existing storage is fully completed, the system performs parallel operations of search, update and delete over the additional storage. Further, when an insert request to the table data is issued, the system inserts the data in the storage determined according to the data division rule using the hash function including information about the existing and additional storages. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> (c) When a storage is required to be added for storage of the table data, the system first copies data to be determined as moved according to the division rule using the hash function or the like from the existing storage to the additional storage, and adds position information of the copied data on the additional storage to the data of the storage as the copy source. And when completing the copying operation of all the data to be moved in this way, the system executes the data rebalance operation to delete all the data of the copy source. Further, when a search request to the table data is issued during the execution of the data rebalance operation, the system performs search operation over the data stored in the existing storages. When an update or delete request is issued, the system performs update or delete operation over the data stored in the existing storages. When the data as the update or delete object is added with position information indicative of a copy destination to the additional storage, the system performs the same update or delete operation over the data of the copy destination. Further, when an insert request to the table data is issued, the system stores the data in the storage determined according to the division rule specified only for the existing storages. Further, in a division method which is applied to the storages including the additional storage, when the data is to be moved to the additional storage, the system stores the data even in the additional storage and adds storage position information thereof to the additional storage to the data stored in the existing storages. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> Any one of the above techniques (a) to (c) is selected and executed depending on a table to be processed. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> In this way, the database system and database management method in this example, at the time of performing rebalance operation over the data stored in the existing storages due to addition of a storage to be rebalanced in table data of a relational database management system of storing as divided into a plurality of storages, can execute database services such as search, update, delete and insert concurrently. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> The present invention is not limited to the embodiments explained with reference to FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>25</bold></highlight> but may be modified in various ways so long as it does not depart from its gist or subject matter. For example, although the database system and database management system have used three storages in the present embodiment, the number of such storages may be two or four or more. Even with regard to the data division rule (method) to the respective storages, the present invention is not limited only to the use of the hash function as in the present embodiment, but a key range division method or a round robin division method may be employed. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> In the present embodiment, the DBMS <highlight><bold>300</bold></highlight> has been configured with computers as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> as its hardware configuration. However, like the user terminals <highlight><bold>330</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>330</bold></highlight><highlight><italic>c</italic></highlight>, the DBMS may be configured with computers provided with input devices such as keyboards and display devices such as CRT (cathode ray tube). Though explanation has been made in connection with the case where an optical disk is used as the recording medium in the present embodiment, a flexible disk (FD) may be used as the recording medium. Even with respect to program installation, the program can be downloaded from a communication device via a network and then installed. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A database management system connected to a plurality of storages for storing a plurality of data items, comprising: 
<claim-text>a storage having a first storage area corresponding to a plurality of storages for storing a plurality of data items and having a second storage area corresponding to a storage to be added to or disconnected from said plurality of storages; </claim-text>
<claim-text>an acceptance section connected to the storage for accepting a data processing request, said data processing request including data processing in said plurality of storages and data rebalance between said plurality of storages; and </claim-text>
<claim-text>a plurality of executors connected to said acceptance section for sequentially executing at least any of the data processing in the plurality of storages and the data rebalance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A database management system as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said storage has a storage area correspondence table showing combinations of predetermined data items to be sharedly shared by said plurality of storages according to said request of addition or disconnection to cause the data rebalance between the storages. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A database management system as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said acceptance section has a rebalance flag indicating that said plurality of storages are being rebalanced due to addition or disconnection to said plurality of storages, and said acceptance section, in response to a data processing request to said data items stored in said plurality of storages, refers to said rebalance flag and reflects data update even on the storages subjected to the data rebalance. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A database management system as set forth in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, further comprising mean, in response to a rebalance request of data to be rebalanced in a storage added according to said addition request, for adding data position information to data before subjected to the rebalance execution by said data rebalance request in said plurality of storages, and means for deleting the data added with the data position information and before subjected to execution of the rebalance execution after the execution of the rebalance execution by the rebalance request. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A database management system as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising means, in response to a rebalance request of data to be rebalanced in a storage added according to said addition request, for adding data position information to data before subjected to the rebalance execution by said data rebalance request in said plurality of storages, and means, in response to said data processing request of update or delete to data in said plurality of storages, for deleting data corresponding to the data to be updated or deleted but added with said data position information after the rebalance execution. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A database management program installed in a database management system connected a plurality of storages for storing a plurality of data items via an interface, said program being capable of being read by a computer, said program comprising the steps of: 
<claim-text>setting first information indicative of a plurality of storages for storing the plurality of data items in a first storage area; </claim-text>
<claim-text>setting second information indicative of a storage to be subjected to a request of add or disconnect to said plurality of storages in a second storage area; </claim-text>
<claim-text>accepting a database processing request at an acceptance section connected to said storages, sad database processing request including processing of data in the plurality of storages and data rebalance between said plurality of storages; and </claim-text>
<claim-text>sequentially executing at least any of the data processing in the plurality of storages and the data rebalance in a plurality of executors. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A database management program as set forth in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising a step of storing in said storages a storage area correspondence table showing combinations of predetermined data items to be sharedly stored by said plurality of storages in response to said request of addition or disconnection to cause data rebalance between the storages. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A database management program as set forth in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising a step of setting rebalance information indicating that said plurality of storages being rebalanced due to addition or disconnection to the plurality of storages in a rebalance flag, and a step of, in response to a data processing request to said data items stored in said plurality of storages, referring to said rebalance flag and reflecting data update even on the storages subjected to the data rebalance. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A database management program as set forth in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising a step of, in response to a rebalance request of data to be rebalanced in a storage added according to said addition request, adding data position information to data before subjected to the rebalance execution by said data rebalance request in said plurality of storages, and a step of deleting the data added with the data position information and before subjected to execution of the rebalance execution after the execution of the rebalance execution by the rebalance request. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A database management program as set forth in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising a step of, in response to a rebalance request of data to be rebalanced in a storage added according to said addition request, adding data position information to data before subjected to the rebalance execution by said data rebalance request in said plurality of storages, and a step of, in response to said data processing request of update or delete to data in said plurality of storages, deleting data corresponding to the data to be updated or deleted but added with said data position information after the rebalance execution. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A database system connected to a plurality of storages for storing a table of data having a plurality of data items, said table data being determined according to a predetermined division rule and stored in the storages, said system comprising: 
<claim-text>rebalance operation means for determining data to be moved between the storages due to any one of addition and disconnection of a storage to be connected according to said division rule and moving the determined data; </claim-text>
<claim-text>means for accepting a search request, update request, delete request or insert request to said table data during execution of the rebalance operation of the rebalance operation means; </claim-text>
<claim-text>means, in response to the accepted search, update or delete request, for performing search, update or delete operation over said storages; and </claim-text>
<claim-text>means, in response to the accepted insert request, for determining a storage destination of data to be inserted from said storage according to said division rule and inserting the data to be inserted in the determined storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A database system as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising means, in response to said accepted search, update and delete requests, for parallelly executing search, update and delete operations over existing storages, and after completion of the parallel execution of the existing storages, for parallelly executing search, update and delete operations over an additional storage. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A database system as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising means, in response to the accepted insert request, for determining a storage destination of data to be inserted from said additional storage according to said division rule and for inserting the insert object data in the determined storage. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A database system connected to a plurality of storages for storing a table of data having a plurality of data items, said table data being determined according to a predetermined division rule and stored in the storages, said system comprising: 
<claim-text>rebalance operation means for determining data to be moved from existing storages to an additional storage according to said division rule, copying the determined data from said existing storages to said additional storage, previously adding copy position information in the additional storage to copy source data in the existing storages, and after completing the copy operation of all the data determined to be moved to said additional storage, deleting all the copy source data in said existing storages; </claim-text>
<claim-text>means for accepting search, update, delete and insert requests for said table data during execution of rebalance operation of said rebalance operation means; </claim-text>
<claim-text>means, in response to the accepted search request, for performing search operation over data stored in said existing storages; </claim-text>
<claim-text>means, in response to the accepted update and delete requests, for performing update and delete operations over the data stored in said existing storages, and, when said copy position information is added to data to be updated and deleted, for performing update and delete operations even over data as a copy destination in said additional storage; and </claim-text>
<claim-text>means, in response to the accepted insert request, for storing data to be inserted in one of said existing storages determined according to said division rule before addition thereof in said additional storage, and when said additional storage is a storage destination of said insert object data according to said division rule after addition of said additional storage, for storing said insert object data in said additional storage, and adding storage position information of said insert object data in said additional storage to the insert object data in said existing storages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A database management method for a database system connected to a plurality of storages for storing a table of data having a plurality of data items, said table data being determined according to a predetermined division rule and stored in the storages, said method comprising the steps of: 
<claim-text>determining data to be moved between the storages according to said division rule due to any one of addition and disconnection of a storage to be connected and moving the determined data for rebalance operation; </claim-text>
<claim-text>accepting search, update, delete and insert requests to said table data during execution of said rebalance operation in said rebalance operation step; </claim-text>
<claim-text>in response to the accepted search, update and delete requests, executing search, update and delete operations for said storages; and </claim-text>
<claim-text>in response to the accepted insert request, determining a storage destination of data to be inserted from said storages according to said division rule. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A database management method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, further comprising a step of, in response to said accepted search, update and delete requests, parallelly executing search, update and delete operations over the existing storages and, after completing the parallel operation, parallelly executing the search, update and delete operations over said additional storage. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A database management method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further comprising a step of, in response to the accepted insert request, determining a storage destination of the data to be inserted from said existing and additional storages according to said division rule and inserting said insert object data in the determined storage. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A database management method for a database system connected to a plurality of storages for storing a table of data having a plurality of data items, said table data being determined according to a predetermined division rule and stored in the storages, said method comprising the steps of: 
<claim-text>determining data to be moved from existing storages to an additional storage according to said division rule due to addition of a storage for storing said table data and copying the determined data from said existing storages to said additional storage; </claim-text>
<claim-text>previously adding copy position information in said additional storage to data as a copy source in said existing storages and, after completing the copy operation of all the data determined to be moved to said additional storage, deleting all the data as the copy source in said existing storages for rebalance operation; </claim-text>
<claim-text>accepting search, update, delete and insert requests to said table data during execution of said rebalance operation step; </claim-text>
<claim-text>in response to the accepted search request, performing search operation over the data stored in said existing storages; </claim-text>
<claim-text>in response to the accepted update and delete requests, performing update and delete operations over the data stored in said existing storages and, when said copy position information is added to data to be updated and deleted, performing update and delete operations even over a copy destination data in said additional storage; and </claim-text>
<claim-text>in response to the accepted insert request, storing the insert object data in one of the existing storages determined according to said division rule before adding said insert object data in said additional storage and, when said additional storage is a storage destination of said insert object data according to said division rule after adding said additional storage, storing said insert object data even in said additional storage and adding storage position information of said insert object data in said additional storage in the insert object data in said existing storages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A database management method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising a step of selecting and executing operations of said steps in said database management method set forth in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> according to definition of said table. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A program read into a computer for executing steps for database management, comprising the steps of: 
<claim-text>determining data to be moved between storages according to said division rule due to any one of addition and disconnection of a storage connected and to be connected and moving the determined data for rebalance operation; </claim-text>
<claim-text>accepting search, update, delete and insert requests over said table data during execution of said rebalance operation of said rebalance operation step; </claim-text>
<claim-text>in response to the accepted search, update and delete requests, performing search, update and delete operations over said storages; and </claim-text>
<claim-text>in response to the accepted insert request, determining a storage destination of the insert object data from said storages according to said division rule and inserting said insert object data in the determined storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A program as set forth in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising steps, in response to said accepted search, update and delete requests, for parallelly executing search, update and delete operations over existing storages, and after completion of the parallel execution of the existing storages, for parallelly executing search, update and delete operations over an additional storage. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A program as set forth in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising means, in response to the accepted insert request, for determining a storage destination of data to be inserted from said additional storage according to said division rule and for inserting the insert object data in the determined storage. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A program read into a computer for executing steps for database management, comprising the steps of: 
<claim-text>determining data to be moved from existing storages to an additional storage according to said division rule, copying the determined data from said existing storages to said additional storage, previously adding copy position information in the additional storage to copy source data in the existing storages, and after completing the copy operation of all the data determined to be moved to said additional storage, deleting all the copy source data in said existing storages; </claim-text>
<claim-text>accepting search, update, delete and insert requests for said table data during execution of rebalance operation of said rebalance operation means; </claim-text>
<claim-text>in response to the accepted search request, performing search operation over data stored in said existing storages; </claim-text>
<claim-text>in response to the accepted update and delete requests, performing update and delete operations over the data stored in said existing storages, and, when said copy position information is added to data to be updated and deleted, performing update and delete operations even over data as a copy destination in said additional storage; and </claim-text>
<claim-text>in response to the accepted insert request, storing data to be inserted in one of said existing storages determined according to said division rule before addition thereof in said additional storage, and when said additional storage is a storage destination of said insert object data according to said division rule after addition of said additional storage, for storing said insert object data in said additional storage, and adding storage position information of said insert object data in said additional storage to the insert object data in said existing storages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A program read into a computer and run over a database under control of a computer to execute steps for database management, comprising the steps of: 
<claim-text>at the time of starting the program, confirming presence or absence of an area for storing information for identification of an additional storage for storing table data and information indicative of &lsquo;in rebalance operation&rsquo; during which data is moved to said additional storage, and, in the absence of the area, securing said area.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004975A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004975A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004975A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004975A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004975A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004975A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004975A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004975A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004975A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004975A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004975A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004975A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004975A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004975A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004975A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004975A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004975A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030004975A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030004975A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030004975A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030004975A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030004975A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030004975A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030004975A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030004975A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
