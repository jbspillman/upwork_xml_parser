<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001850A1-20030102-D00000.TIF SYSTEM "US20030001850A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00001.TIF SYSTEM "US20030001850A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00002.TIF SYSTEM "US20030001850A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00003.TIF SYSTEM "US20030001850A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00004.TIF SYSTEM "US20030001850A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00005.TIF SYSTEM "US20030001850A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00006.TIF SYSTEM "US20030001850A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00007.TIF SYSTEM "US20030001850A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00008.TIF SYSTEM "US20030001850A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00009.TIF SYSTEM "US20030001850A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00010.TIF SYSTEM "US20030001850A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00011.TIF SYSTEM "US20030001850A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00012.TIF SYSTEM "US20030001850A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00013.TIF SYSTEM "US20030001850A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00014.TIF SYSTEM "US20030001850A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00015.TIF SYSTEM "US20030001850A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00016.TIF SYSTEM "US20030001850A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00017.TIF SYSTEM "US20030001850A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00018.TIF SYSTEM "US20030001850A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00019.TIF SYSTEM "US20030001850A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00020.TIF SYSTEM "US20030001850A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00021.TIF SYSTEM "US20030001850A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00022.TIF SYSTEM "US20030001850A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00023.TIF SYSTEM "US20030001850A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00024.TIF SYSTEM "US20030001850A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00025.TIF SYSTEM "US20030001850A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00026.TIF SYSTEM "US20030001850A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00027.TIF SYSTEM "US20030001850A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00028.TIF SYSTEM "US20030001850A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00029.TIF SYSTEM "US20030001850A1-20030102-D00029.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00030.TIF SYSTEM "US20030001850A1-20030102-D00030.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00031.TIF SYSTEM "US20030001850A1-20030102-D00031.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00032.TIF SYSTEM "US20030001850A1-20030102-D00032.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00033.TIF SYSTEM "US20030001850A1-20030102-D00033.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00034.TIF SYSTEM "US20030001850A1-20030102-D00034.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00035.TIF SYSTEM "US20030001850A1-20030102-D00035.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00036.TIF SYSTEM "US20030001850A1-20030102-D00036.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00037.TIF SYSTEM "US20030001850A1-20030102-D00037.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00038.TIF SYSTEM "US20030001850A1-20030102-D00038.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00039.TIF SYSTEM "US20030001850A1-20030102-D00039.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00040.TIF SYSTEM "US20030001850A1-20030102-D00040.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00041.TIF SYSTEM "US20030001850A1-20030102-D00041.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00042.TIF SYSTEM "US20030001850A1-20030102-D00042.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00043.TIF SYSTEM "US20030001850A1-20030102-D00043.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00044.TIF SYSTEM "US20030001850A1-20030102-D00044.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00045.TIF SYSTEM "US20030001850A1-20030102-D00045.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00046.TIF SYSTEM "US20030001850A1-20030102-D00046.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00047.TIF SYSTEM "US20030001850A1-20030102-D00047.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00048.TIF SYSTEM "US20030001850A1-20030102-D00048.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00049.TIF SYSTEM "US20030001850A1-20030102-D00049.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00050.TIF SYSTEM "US20030001850A1-20030102-D00050.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00051.TIF SYSTEM "US20030001850A1-20030102-D00051.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00052.TIF SYSTEM "US20030001850A1-20030102-D00052.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00053.TIF SYSTEM "US20030001850A1-20030102-D00053.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00054.TIF SYSTEM "US20030001850A1-20030102-D00054.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00055.TIF SYSTEM "US20030001850A1-20030102-D00055.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00056.TIF SYSTEM "US20030001850A1-20030102-D00056.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00057.TIF SYSTEM "US20030001850A1-20030102-D00057.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00058.TIF SYSTEM "US20030001850A1-20030102-D00058.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00059.TIF SYSTEM "US20030001850A1-20030102-D00059.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00060.TIF SYSTEM "US20030001850A1-20030102-D00060.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00061.TIF SYSTEM "US20030001850A1-20030102-D00061.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00062.TIF SYSTEM "US20030001850A1-20030102-D00062.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00063.TIF SYSTEM "US20030001850A1-20030102-D00063.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00064.TIF SYSTEM "US20030001850A1-20030102-D00064.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00065.TIF SYSTEM "US20030001850A1-20030102-D00065.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00066.TIF SYSTEM "US20030001850A1-20030102-D00066.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00067.TIF SYSTEM "US20030001850A1-20030102-D00067.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00068.TIF SYSTEM "US20030001850A1-20030102-D00068.TIF" NDATA TIF>
<!ENTITY US20030001850A1-20030102-D00069.TIF SYSTEM "US20030001850A1-20030102-D00069.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001850</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>09988157</doc-number>
</application-number>
<application-number-series-code>09</application-number-series-code>
<filing-date>20011119</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>236148/86</doc-number>
</priority-application-number>
<filing-date>19861006</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>9802/87</doc-number>
</priority-application-number>
<filing-date>19870121</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>31470/87</doc-number>
</priority-application-number>
<filing-date>19870216</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>40310/87</doc-number>
</priority-application-number>
<filing-date>19870225</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>54036/87</doc-number>
</priority-application-number>
<filing-date>19870311</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>503000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Graphic processing system having bus connection control functions</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>09988157</doc-number>
<kind-code>A1</kind-code>
<document-date>20011119</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08921241</doc-number>
<document-date>19970829</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>08921241</doc-number>
<document-date>19970829</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08355151</doc-number>
<document-date>19941206</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>5717440</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>08355151</doc-number>
<document-date>19941206</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08280211</doc-number>
<document-date>19940725</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>08280211</doc-number>
<document-date>19940725</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08142118</doc-number>
<document-date>19931028</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>08142118</doc-number>
<document-date>19931028</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08037540</doc-number>
<document-date>19930326</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>08037540</doc-number>
<document-date>19930326</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>07662626</doc-number>
<document-date>19910228</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>07662626</doc-number>
<document-date>19910228</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>07105292</doc-number>
<document-date>19871006</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>5046023</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Koyo</given-name>
<family-name>Katsura</family-name>
</name>
<residence>
<residence-non-us>
<city>Hitachiota-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Shigeru</given-name>
<family-name>Matsuo</family-name>
</name>
<residence>
<residence-non-us>
<city>Hitachi-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Jun</given-name>
<family-name>Sato</family-name>
</name>
<residence>
<residence-non-us>
<city>Musashino-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Takashi</given-name>
<family-name>Sone</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Yoshikazu</given-name>
<family-name>Yokota</family-name>
</name>
<residence>
<residence-non-us>
<city>Kodaira-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Masahiko</given-name>
<family-name>Kikuchi</family-name>
</name>
<residence>
<residence-non-us>
<city>Hitachi-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>ANTONELLI TERRY STOUT AND KRAUS</name-1>
<name-2></name-2>
<address>
<address-1>SUITE 1800</address-1>
<address-2>1300 NORTH SEVENTEENTH STREET</address-2>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22209</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A graphic processing system having a main memory for storing a program and information corresponding to pixels, a main processor for executing a program transferred from the main memory or from external to control the system, display/output devices for outputting graphic information attained by a control of pixels arranged in a plurality of dimensions, a frame buffer for storing information corresponding to pixels output to the display/output devices, and a graphic processor for receiving a command and parameter information from the main memory and/or the main processor, for generating character and graphic data in accordance with a predetermined processing procedure, and for performing a transfer control including an execution of a drawing processing to transfer generated data through first and second address buses and first and second data buses to the main memory and/or frame buffer. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a graphic processing apparatus for displaying and printing out characters and graphics, and in particular, to a graphic processing apparatus capable of effecting a drawing processing at a high speed not only in a frame buffer but also in a system memory (main memory). </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> There has been a method (called a bit map method) to display characters and graphics on a CRT screen according to a raster scan method by use of a memory (bit map memory) storing information associated with each pixel of the display apparatus. Furthermore, this method including the bit map memory has also been applied to a case where control is effected to output data to a printer. Conventionally, processing to generate characters and graphic data in the bit map memory is primarily achieved by means of the software; however, there has arisen a problem that the processing speed is low because of a great amount of data to be processed. On the other hand, particularly, in a field where graphic forms are to be generated at a high speed, there has been partly used a method including dedicated hardware, which is however attended with a disadvantage that the cost of the graphic processing apparatus is increased. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> To cope with such a situation, the function to generate characters and graphic data has become to be integrated in an LSI chip. Such an LSI has been proposed in the &ldquo;CRT Controller Having a Plenty of Commands Such As Paint Out and Copy and Enabling to Specify Drawing Position by Coordinates&rdquo; written by Kazuo Minorikawa in the &ldquo;Nikkei Electronics&rdquo;, May 21, 1984, pp. 221-254; and in the U.S. Ser. Nos. 686,039 and 727,850. This LSI enables to greatly increase the speed of the graphic processing at a relatively low cost. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> According to the paper above, the drawing processing can be executed in a frame buffer at a high speed; however, the drawing processing cannot be achieved in a system memory (main memory) connected to a CPU. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> For example, other output means such as a control circuit of a printer is connected to a system bus in many cases, where a buffer for use with a print operation is reserved in the system memory. At the present stage of technology, in the case where graphic data is to be outputted to a printer, since the drawing operation cannot be accomplished by the CRT controller above, the drawing is effected by the software. As a result, though the graphic data to be displayed in the CRT screen is drawn at a high speed, the drawing of the graphic data to be outputted to a printer is executed at a low speed. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> On the other hand, it can be considered as means to improve the processing performance, to subdivide the frame buffer in color plane units, thereby effecting a concurrent processing by use of a plurality of graphic processors. According to the method described in the papers above using the CRT controller, in order to achieve a copy processing of the same fundamental information (for example, font data of a character) onto a plurality of planes, it is necessary to before-hand store fundamental information in the frame buffer corresponding to the respective planes. Namely, the memory utilization efficiency is lowered because same information is arranged in a plurality of memories. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> According to the prior art technology as described above, in addition to the low speed of the drawing operation in the system memory, a plurality of same information such as a character font must be provided in the case where the frame buffer is subdivided into color plane units to achieve a parallel processing thereon by a plurality of processors. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The JP-A-60-136793 has disclosed a graphic processing apparatus including a graphic generate function implemented as an LSI to achieve a graphic processing at a high speed by use of a bit map method. In the JP-A-60-136793, a plurality of pixel information are stored in a word of a memory, a predetermined word is read from the memory while an address identifying a pixel in sequence is being generated, particular pixel data is updated in the word, and the word data thus attained is written again in the word, thereby effecting a drawing operation. That is, the processing of a word is effected through a sequence of processing of a read operation, an arithmetic operation, and a write operation so as to achieve a drawing operation. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Furthermore, the JP-A-60-40588 describes a technology to write pixel information of a bit in a raster direction. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The JP-A-61-130991 (Japanese Patent Application No. 59-251907) has disclosed a graphic processing apparatus in which X and Y coordinates are calculated so as to effect a drawing operation while calculating an X-coordinate memory address corresponding to the attained coordinate values. According to the known example, the arithmetic unit to execute the coordinate calculation and an arithmetic unit to achieve the memory address calculation are controlled by a common microprogram. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In the &ldquo;LSI Handbood&rdquo;, OHM-Sha, Ltd., Nov. 30, 1984, page 556 and subsequent pages, there has been disclosed a method in which in consideration of the fact that when a relatively complex processing is required to be executed in a unit of a pixel like in a graphics processing, it is not necessarily advantageous in the improvement of the utilization efficiency of the processor and in the enhancement of the speed of the image processing to accomplish all processing by the microprocessor, the generation of basic graphic forms, the operation to paint out a graphic form, the drawing of lines, etc. are achieved by an apparatus such as a display controller dedicated to the image processing. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Incidentally, when a bold line is to be drawn by a line drawing command in the prior art image processing apparatus such as a display controller, a line having a width determined by a size of a pixel is required to be many times drawn to attain the bold line. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> As a processor for a graphic controller, there has been known a processor described in pages 522-589 of the &ldquo;Hitachi Microcomputer {fraction (8/16)}-Bit Microcomputer Peripheral LSI&rdquo; (HD63484) published from the Hitachi, Ltd. in November 1985. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Representative drawing functions of the processor interpret and execute 38 kinds of graphic drawing commands, for example, to draw a line, to draw a circle, to paint a graphic form, to copy a graphic image, and the like. Moreover, the processor has several kinds of drawing and arithmetic operation modes. Particularly, when a conditional replacement is used, color drawing functions can be developed, for example, to specify a particular background color, to designate a drawing inhibit color, and to draw an image with a priority assigned to color data. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> It is therefore an object of the present invention to provide a graphic processing system which enables the graphic processor to access the system memory so as to increase the speed of the drawing operation on the system memory and in which, when a parallel processing is executed by a plurality of processors, fundamental information such as a character font to be commonly used is located in the system memory so as to be shared among the processors. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Another object of the present invention is to provide a graphic processing apparatus in which processing of a pixel is accomplished on through a write operation so as to generate and to draw graphic data including a line, an arc, and the like. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Still another object of the present invention is to provide a graphic processing apparatus in which a microprogram to achieve the coordinate calculation and a microprogram to execute the memory address calculation are separated from each other so as to improve the describability or the describing capability of a program. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Further, another object of the present invention is to provide a graphic processing apparatus including a multi-way branch method improving the efficiency of a microprogram. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Another object of the present invention is to provide a graphic processing apparatus having an efficient method of debugging a microprogram in which a microprogram in execution is halted at a desired address, internal information of the graphic processing apparatus is read out, and thereafter the halted microprogram is restarted for the execution thereof. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Still another object of the present invention is to provide an graphic processing apparatus which is capable of effecting a drawing operation by use of as the basic unit a picture element (PEL), namely, a dot having an arbitrary shape and an arbitrary size configured in association with a plurality of picture cells (pixels). </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Another object of the present invention is to provide an graphic processing apparatus in which during the drawing operation using the pel as the basic unit, a high-speed drawing operation and a drawing operation through a control effected on a pel region for a drawing area can be effected. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Another object of the present invention is to provide an image processing apparatus capable of achieving a data processing of a plurality of color pixel information in the unit of a word so as to increase the speed of the drawing processing. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> According to a feature of the present invention, there is provided a graphic processing system having a graphic processor (GDP) which interprets a command transferred from a first data bus connected to a main processor (CPU) and effects an access (for example, a drawing) by use of a second address bus and a second data bus connected to a frame buffer. In the graphic processing system, there is provided bus connection control means capable of effecting a connection or a disconnection between the first address bus and the first data bus each connected to the main processor and the main memory and the second address bus and the second data bus each connected to the frame buffer. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In order to enable the graphic processor to achieve a drawing in the system memory, an address sent to the second address bus connected to the frame buffer is transferred via the bus connection control means and the first address bus to the system memory, and at the same time, the first data bus is connected to the second data bus so as to effect a data read/write operation requested by the GDP to read/write data in/from the system memory. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Furthermore, in a system including a plurality of graphic processors and a plurality of frame buffers for the respective color planes, the bus connection control means is controlled such that based on an address supplied from one of the graphic processors, basic information is read from the system memory and the obtained data is loaded in the processors at the same time. A high-speed drawing operation can be accomplished on the main memory by use of a second processor dedicated to the drawing operation. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> According to a second feature of the present invention, drawing processor means which sequentially calculates drawing addresses and outputs drawing data so as to effect a drawing control outputs an address in word units together with information identifying pixels in a word, and then outputted information is interpreted by memory write control means, thereby achieving a write operation only in a portion of the memory corresponding to the identified pixels. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> That is, the memory write control means generates a different write control signal for each memory element corresponding to each pixel of a word. The circuit configuration is implemented such that a write control signal is outputted for a word in the case of a write operation in the unit of a word, and a write control signal is delivered for a predetermined pixel in the case of a write operation in the unit of a pixel. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> According to the third feature of the present invention, there is provided a drawing processing apparatus in which a microprogram to control the coordinate operation and a microprogram to control the memory address operation are separately arranged. The microprogram controlling the coordinate operation causes the microprogram controlling the memory address operation to operate and thereafter the microprogram controlling the memory address operation independently effects execution of the microprogram. When an operation request is issued during the operation of the microprogram controlling the memory address operation, there is used a means provided to cause the microprogram controlling the coordinate operation to stop the operation thereof until the processing of the microprogram controlling the memory address operation is finished. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> According to another aspect of the features of the present invention there are provided means for storing information used to effect a multi-way branch in a microprogram controlling the coordinate operation and means for storing the number of the significant bits of said means such that when loading a jump address in an address register, only for the bits specified by the means storing the significant bit count, the data of means storing information of the multi-way branch is used in place of the jump address. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to another aspect of the present invention, there are provided means for storing an address used to stop the microprogram controlling the coordinate operation and means for comparing the content of the means storing the stop address with an address of the microprogram so as to output a signal when a signal agreement results such that the agreement signal is used to set or reset the address register. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> According to the third feature above, since the microprogram controlling the coordinate operation is separated from that controlling the memory address operation, the microprogram controlling the coordinate operation needs to only include a description of a drawing algorithm, which improves the descriptivity or the describing capability of the program. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The provisions of the means storing information to effect a multi-way branch in the microprogram and means indicating the significant bits of the means enable a variable number of branches to be specified. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Owing to the means comparing the content of the means storing an address to stop the microprogram with an address of the microprogram so as to output an agreement signal when a signal agreement results, a unique value can be generated and loaded in the address register of the microprogram in response to the agreement signal, thereby stopping the microprogram to effect a debug. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> According to the outline of the fourth feature of the present invention, there is provided a graphic processing apparatus including pel data store means for storing pel data in the form of binary information asociated with a dot having an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels and arithmetic means for achieving a logic operation to draw data undergone a color development based on the pel data according to a position of the indication point of the current pointer. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> According to the constitution described above, a predetermined pel data is selected from various pel data defined in the pel data store means so as to effect a logic operation to achieve a drawing operation depending on the position of the indication point of the current pointer, thereby accomplishing an efficient operation to draw a bold line. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> According to the fifth feature of the present invention, on receiving information including a plurality of bits representing a character or a graphic form in which a pixel comprises a bit, a plurality of bits are extracted therefrom so as to be subjected to a color development by use of a barrel shifter, the attained bits are expanded into bit information equivalent to a plurality of color pixels corresponding to color pixels in which a pixel comprise N bits, and depending on said bit information, the contents of a first color register and a second color register holding color pixel information equivalent to the plurality of pixels each comprising N bits are selectively outputted. Furthermore, color pixel information of two words each including a plurality of color pixel information is stored in a source data register, pixel data is extracted in the word units in association with the destination data by use of a barrel shifter, a color operation comparison is achieved depending on a color compare mode on color information specified by a combination of an output signal from the barrel shifter and the destination data or a combination of the output signal from the barrel shifter and the color compare register and color information specified by the destination data and the color compare register, and then depending on the output signal and a predetermined color processing signal, write color pixel information in the unit of a word is generated from the output signal from the barrel shifter and the 1 destination data.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The present invention will be apparent from the following detailed description taken in conjunction 5 with the accompanying drawings in which: </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. is a schematic block diagram illustrating an embodiment of the present invention; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>4</bold></highlight> are schematic block diagrams respectively illustrating alternative system configurations; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>6</bold></highlight> are operation flow diagrams associated with a memory access; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic block diagram illustrating, another embodiment of the present invention; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> FIGS. <highlight><bold>8</bold></highlight>-<highlight><bold>10</bold></highlight> are schematic block diagrams respectively illustrating internal configurations of a graphic processing apparatus; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11, 19</cross-reference>, <highlight><bold>20</bold></highlight>A-<highlight><bold>20</bold></highlight>C AND <highlight><bold>21</bold></highlight>-<highlight><bold>24</bold></highlight> are explanatory diagrams useful to explain functions of internal registers of the graphic processing apparatus; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> FIGS. <highlight><bold>25</bold></highlight>-<highlight><bold>41</bold></highlight> are explanatory diagrams useful to explain command functions of the graphic processing apparatus; </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 42</cross-reference> is a schematic block diagram illustrating still another embodiment of the present invention; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> FIGS. <highlight><bold>43</bold></highlight>A-<highlight><bold>43</bold></highlight>B are explanatory diagrams useful to explain a memory array; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 44</cross-reference> is an explanatory diagram useful to explain an access state signal to be used to access a bus; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 45</cross-reference> is an explanatory diagram useful to explain an address multiplex operation; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is a schematic diagram illustrating further another embodiment of the present invention; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> FIGS. <highlight><bold>47</bold></highlight>A-<highlight><bold>47</bold></highlight>B are schematic diagrams illustrating examples of a vector drawing and a raster-directional drawing, respectively; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 48</cross-reference> is a schematic diagram illustrating another embodiment of the present invention; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> FIGS. <highlight><bold>49</bold></highlight>A-<highlight><bold>49</bold></highlight>B are timing charts related to a memory read/write operation and a write operation in pixel units, respectively; </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 50</cross-reference> is a schematic block diagram illustrating a graphic processing apparatus as an embodiment according to the present invention; </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> FIGS. <highlight><bold>51</bold></highlight>-<highlight><bold>54</bold></highlight> are schematic block diagrams illustrating details of an arithmetic unit; </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> FIGS. <highlight><bold>55</bold></highlight>A-<highlight><bold>55</bold></highlight>C are flow charts and a graph schematically illustrating a 2-level microprograming example; </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 56, 57</cross-reference>, and <highlight><bold>58</bold></highlight>A-<highlight><bold>58</bold></highlight>B are an explanatory diagram, a logic circuit diagram, and schematic diagram of register operations, respectively, illustraing details of a multi-jump operation; </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> FIGS. <highlight><bold>59</bold></highlight>-<highlight><bold>60</bold></highlight> are a circuit diagram and a timing chart schematically illustrating a method to stop a microprogram by setting a break point, respectively; </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 61</cross-reference> is a schematic block diagram illustrating the primary constitution of a half portion of a graphic display processor as another embodiment of the image processing apparatus according to the present invention; </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 62</cross-reference> is a schematic block diagram illustrating a remaining half portion of the graphic display processor; </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 63</cross-reference> is an explanatory diagram useful to explain the definition of a logic pel and a drawing region; </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 64</cross-reference> is an explanatory diagram useful to explain a drawing state in a mode in which when a pel region exceeds a drawing region under a drawing region control in the pel mode, the pel drawing operation is finished; </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 65</cross-reference> is an explanatory diagram useful to explain a drawing state in a mode in which when a pel region exceeds a drawing region under a drawing region control in a pel mode, the pel drawing operation is continued without effecting the drawing of the portion where the drawing region is exceeded; </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 66</cross-reference> is a first flow chart illustrating the pel drawing operation; </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 67</cross-reference> is a second flow chart illustrating the pel drawing operation; </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 68</cross-reference> is a third flow chart illustrating the pel drawing operation; </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 69</cross-reference> is a fourth flow chart illustrating the pel drawing operation; </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 70</cross-reference> is a fifth flow chart illustrating the pel drawing operation; </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 71</cross-reference> is an explanatory diagram useful to explain an operation to set a maximum point (XMX, YMX) in the upper right corner of the pel region; </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 72</cross-reference> is an explanatory diagram useful to explain an operation to set a minimum point (XMN, YMN) in the lower left corner of the pel region; </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 73</cross-reference> is an explanatory diagram useful to explain a word processing associated with a pel drawing operation; </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference> is a schematic block diagram illustrating the primary portion of another emboiment according to the present invention; </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 75</cross-reference> is a schematic diagram for explaining the principle of the color development of a character font associated with the embodiment of <cross-reference target="DRAWINGS">FIG. 74</cross-reference>; and </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 76</cross-reference> is an explanatory diagram useful to explain the principle of the operation to process a plurality of color pixel information in the embodiment of <cross-reference target="DRAWINGS">FIG. 74</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Referring now to the drawings, the preferred embodiments of the present invention will be described. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic diagram showing an example of the overall configuration of a graphic display apparatus according to the present invention. The configuration of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> includes a graphic display processor (GDP) <highlight><bold>10</bold></highlight> to be used as second processor means, a central processing unit (CPU) <highlight><bold>11</bold></highlight> to be disposed as first processor means, a main memory <highlight><bold>12</bold></highlight> as first store means, a direct memory access controller (DMAC) <highlight><bold>13</bold></highlight>, a frame buffer <highlight><bold>14</bold></highlight> as second store means, a display device (CRT) <highlight><bold>16</bold></highlight> as output means, an address decoder <highlight><bold>17</bold></highlight>, and a bus switch <highlight><bold>20</bold></highlight> as bus connection control means. The GDP <highlight><bold>10</bold></highlight> may be generally called &ldquo;graphic data processor&rdquo;. Although not shown in the configuration diagram, a system bus connected to the CPU <highlight><bold>11</bold></highlight> may be connected to other input/output means such as a display equipment and a printer so as to achieve input/output operations, for example, to display or print out data by use of pixel information stored in the main memory <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The CPU <highlight><bold>11</bold></highlight> executes programs stored in the main memory <highlight><bold>12</bold></highlight> or programs transferred from an external device (not shown) so as to manage and to control the overall system. The DMAC <highlight><bold>13</bold></highlight> controls direct memory accesses between the main memory <highlight><bold>12</bold></highlight> and the GDP <highlight><bold>10</bold></highlight>, the frame buffer <highlight><bold>14</bold></highlight>, or another input/output device (not shown). The graphic display processor <highlight><bold>10</bold></highlight> receives from a data bus connected to the central processing unit <highlight><bold>11</bold></highlight> a command and parameter information transferred from the central processing unit <highlight><bold>11</bold></highlight> or the main memory <highlight><bold>12</bold></highlight> and then accesses, according to a predetermined processing procedure, the frame buffer <highlight><bold>14</bold></highlight> or the main memory <highlight><bold>12</bold></highlight> via an address bus and a data bus each connected to the frame buffer <highlight><bold>14</bold></highlight> so as to generate a character and a graphic form. The graphic display processor <highlight><bold>10</bold></highlight> can also read a command and parameter information from the frame buffer <highlight><bold>14</bold></highlight>. Furthermore, the graphic display processor <highlight><bold>10</bold></highlight> effects a control on a generation of a synchronization timing signal controlling the display device <highlight><bold>16</bold></highlight> and on an operation to read information to be sequentially displayed from the frame buffer <highlight><bold>14</bold></highlight> in synchronism with a predetermined timing. The graphic display processor <highlight><bold>10</bold></highlight> effects generation of a signal controlling the bus switch <highlight><bold>20</bold></highlight> which controls a direct memory access between the central processing unit <highlight><bold>11</bold></highlight> or the direct memory access controller <highlight><bold>13</bold></highlight> and the frame buffer <highlight><bold>14</bold></highlight> and generation of a control signal used by the graphic display processor <highlight><bold>10</bold></highlight> to access the main memory <highlight><bold>12</bold></highlight> for a generation of characters and graphics. The address decoder <highlight><bold>17</bold></highlight> decodes an address on the address bus and generates a frame buffer bus request signal to be sent to the bus switch <highlight><bold>20</bold></highlight>. The bus switch <highlight><bold>20</bold></highlight> effects a change-over operation between the address buses, respectively, connected to the graphic display processor <highlight><bold>10</bold></highlight> and the central processing unit <highlight><bold>11</bold></highlight> so as to supply an address of the frame buffer <highlight><bold>14</bold></highlight> via the address bus thus selected. Alternatively, the bus switch <highlight><bold>20</bold></highlight> effects a change-over operation between the address buses, respectively, connected to the central processing unit <highlight><bold>11</bold></highlight> and the graphic display processor <highlight><bold>10</bold></highlight> so as to supply an address of the main memory <highlight><bold>12</bold></highlight> via the address bus thus selected. Namely, the bus switch develops a function as a bi-directional switch and is controlled by a control signal from the graphic display processor <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>4</bold></highlight> are schematic diagrams respectively, showing alternative configuration examples of the graphic processing apparatus. These configurations are also applicable to display devices such as a CRT, a liquid crystal display (LED), an EL display, a plasma display, an ECD display as well as to printing devices such as a thermal printer, a liquid crystal printer, an LED printer, and a laser beam printer. In the case of the printers, the portion of the display device <highlight><bold>16</bold></highlight> as an output device is replaced with a printing device. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a configuration diagram of a graphic display apparatus in which a bus connected to a central processing unit <highlight><bold>11</bold></highlight> is separated from a bus connected to a frame buffer <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The configuration of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> includes a graphic display processor (GDP) <highlight><bold>10</bold></highlight>, a central processing unit (CPU) <highlight><bold>11</bold></highlight>, a main memory <highlight><bold>12</bold></highlight>, a direct memory access controller (DMAC) <highlight><bold>13</bold></highlight>, a frame buffer <highlight><bold>14</bold></highlight>, a parallel/serial convert circuit <highlight><bold>15</bold></highlight>, and a display device (CRT) <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> This configuration is simple and is hence suitable for a small-sized system. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a configuration diagram of an example of a graphic display apparatus including a bus switch <highlight><bold>21</bold></highlight> effecting a change-over operation between the address buses respectively connected to the graphic display processor <highlight><bold>10</bold></highlight> and the central processing unit <highlight><bold>11</bold></highlight> so as to supply an address of the frame buffer <highlight><bold>14</bold></highlight> via the address bus thus determined. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> The configuration of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> includes a graphic display processor (GDP) <highlight><bold>10</bold></highlight>, a central processing unit (CPU) <highlight><bold>11</bold></highlight>, a main memory <highlight><bold>12</bold></highlight>, a direct memory access controller (DMAC) <highlight><bold>13</bold></highlight>, a frame buffer <highlight><bold>14</bold></highlight>, a parallel/serial convert circuit <highlight><bold>15</bold></highlight>, a display device (CRT) <highlight><bold>16</bold></highlight>, an address decoder <highlight><bold>17</bold></highlight>, and a bus switch <highlight><bold>21</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In the configuration example of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> or <highlight><bold>3</bold></highlight>, the frame buffer <highlight><bold>14</bold></highlight> is assigned to a portion of the address space of the central processing unit <highlight><bold>11</bold></highlight> such that a signal requesting the right to use the bus of the frame buffer <highlight><bold>14</bold></highlight> is generated through a decode operation of the address decoder <highlight><bold>17</bold></highlight>, thereby accomplishing a data transfer between the central processing unit <highlight><bold>11</bold></highlight> and the frame buffer <highlight><bold>14</bold></highlight> or directly between the memory access controller <highlight><bold>13</bold></highlight> and the frame buffer <highlight><bold>14</bold></highlight> without necessitating an intervention from the graphic display processor <highlight><bold>10</bold></highlight>. As a result, there is attained an effect that the central processing unit <highlight><bold>11</bold></highlight> is enabled to arbitrarily access the frame buffer <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a configuration diagram showing an example of a graphic display apparatus having a bus switch <highlight><bold>22</bold></highlight> which achieves a change-over operation between the address bus connected to the central processing unit <highlight><bold>11</bold></highlight> and the address bus connected to the graphic display processor <highlight><bold>10</bold></highlight> so as to supply an address of the main memory <highlight><bold>12</bold></highlight> via the address bus thus selected. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The configuration of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> comprises a graphic display processor (GDP) <highlight><bold>10</bold></highlight>, a central processing unit (CPU) <highlight><bold>11</bold></highlight>, a main memory <highlight><bold>12</bold></highlight>, a direct memory access controller (DMAC) <highlight><bold>13</bold></highlight>, a frame buffer <highlight><bold>14</bold></highlight>, a parallel/serial convert circuit <highlight><bold>15</bold></highlight>, a display device (CRT) <highlight><bold>16</bold></highlight>, and a bus switch <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In the configuration of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> or <highlight><bold>4</bold></highlight>, if a character font is arranged in a region of the main memory <highlight><bold>12</bold></highlight>, the graphic display processor <highlight><bold>10</bold></highlight> can effect a color expansion processing of a bit map character. Furthermore, if pattern information including binary information or multi-value information is disposed in a region of the main memory <highlight><bold>12</bold></highlight>, the graphic display processor <highlight><bold>10</bold></highlight> can execute a pattern expansion processing. Alternatively, a bit map may be copied between the main memory <highlight><bold>12</bold></highlight> and the frame buffer <highlight><bold>14</bold></highlight>. The copy of the bit map can be achieved also between bit maps in which the memory width or the number of bits per pixel varies therebetween. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> A detailed description will now be given of a control example in the case where the central processing unit <highlight><bold>11</bold></highlight> directly accesses the frame buffer <highlight><bold>14</bold></highlight> without using the graphic display processor <highlight><bold>10</bold></highlight>. It should be noted that the direct access capability to directly access the frame buffer <highlight><bold>14</bold></highlight> is not limited to the central processing unit <highlight><bold>11</bold></highlight>, in other words, the present access method is applicable to any semiconductor devices such as direct memory access controller <highlight><bold>13</bold></highlight> which are connected to the address bus and the data bus related to the central processing unit <highlight><bold>11</bold></highlight> and which have a data transfer function. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic diagram showing a sequence used when the central processing unit <highlight><bold>11</bold></highlight> accesses the frame buffer <highlight><bold>14</bold></highlight> via the bus switch <highlight><bold>20</bold></highlight> or the bus switch <highlight><bold>21</bold></highlight>. The address decoder <highlight><bold>17</bold></highlight> decodes an address of the address bus connected to the central processing unit <highlight><bold>11</bold></highlight> so as to assert a signal requesting a bus right of the frame buffer <highlight><bold>14</bold></highlight> to the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>21</bold></highlight>. On receiving the signal requesting the bus right, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>21</bold></highlight> asserts a halt signal HALT to the graphic display processor <highlight><bold>10</bold></highlight>. Although the graphic display processor <highlight><bold>10</bold></highlight> effects a drawing, a display, a refresh control, and an attribute output on the frame buffer <highlight><bold>14</bold></highlight>, the graphic display processor <highlight><bold>10</bold></highlight> can before-hand set priority to the HALT input and asserts to an external device a BUSY signal indicating a period of time during which the HALT signal is not effective. For a HALT input in a period of time other than the period associated with the BUSY signal, the graphic display processor <highlight><bold>10</bold></highlight> stops the internal operation thereof to set the address bus and the data bus to the try state. During the period other than that associated with the BUSY signal, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>21</bold></highlight> connects the system bus to the frame buffer bus, which enables the central processing unit <highlight><bold>11</bold></highlight> to access the frame buffer <highlight><bold>14</bold></highlight>. When an access is achieved, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>21</bold></highlight> delivers an ACK signal to the central processing unit <highlight><bold>11</bold></highlight>, thereby completing the sequence of operations. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> A description has been given of the case where the graphic processing apparatus includes one graphic display processor <highlight><bold>10</bold></highlight>. When a plurality of graphic display processors <highlight><bold>10</bold></highlight> or graphic display processors having different functions are connected to the same frame buffer bus, each graphic display processor is so configured to output a drawing request signal DRREQ, thereby enabling a bus arbitration to be effected. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a schematic diagram showing a sequence applied to the case where the graphic display processor <highlight><bold>10</bold></highlight> accesses the main memory <highlight><bold>12</bold></highlight> via the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> If a command Main Memory Access Mode (MMA) is beforehand set to the graphic display processor <highlight><bold>10</bold></highlight>, the 256 megabytes of the upper-half of the address space (512 megabytes in total) possessed by the graphic display processor <highlight><bold>10</bold></highlight> can be allocated as space of the main memory <highlight><bold>12</bold></highlight>. In this case, the graphic display processor <highlight><bold>10</bold></highlight> asserts the system bus request signal BREQ. On receiving the bus request signal, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> asserts a bus request signal BR to the central processing unit <highlight><bold>11</bold></highlight> (e.g. Hitachi&apos;s HD68000). At the same time, a HALT signal is delivered to the graphic display processor <highlight><bold>10</bold></highlight> so as to cause the drawing processor to be stopped. When the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> receives a bus grant signal BG from the central processing unit <highlight><bold>11</bold></highlight>, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> confirms that the system bus has been opened and then asserts a BGACK (bus grant acknowledge) signal to the central processing unit <highlight><bold>11</bold></highlight>. Simultaneously, a HALT signal is negated for the graphic display processor <highlight><bold>10</bold></highlight> so as to allow an access to the system bus. In the drawing period, the graphic display processor <highlight><bold>10</bold></highlight> outputs a HOLD signal to indicate a period during which an access to the system bus is achieved. During the HOLD period, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> executes an access to the main memory <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> When a drawing on the main memory <highlight><bold>12</bold></highlight> is not finished in one cycle, the bus switch <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> asserts a RETRY signal to the graphic display processor <highlight><bold>10</bold></highlight> so as to enable the drawing operation to be executed again. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic diagram showing an example of a graphic display apparatus including a plurality of graphic display processors <highlight><bold>10</bold></highlight>. The configuration includes n graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n (n&gE;2), a central processing unit <highlight><bold>11</bold></highlight>, a main memory <highlight><bold>12</bold></highlight>, a direct memory access controller <highlight><bold>13</bold></highlight>, n frame buffers <highlight><bold>14</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>14</bold></highlight>-n, n parallel/serial convert circuit <highlight><bold>15</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>15</bold></highlight>-n, a display device (CRT, not shown), and n bus switches <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>20</bold></highlight>-n. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> According to the embodiment of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, when data of a pixel is represented by a plurality of bits (for a multicolor or a multitone display), the frame buffer <highlight><bold>14</bold></highlight> is subdivided in the color plane units and a plurality of graphic display processors <highlight><bold>10</bold></highlight> are arranged so as to enable a parallel processing to be accomplished. The graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n can access the main memory <highlight><bold>12</bold></highlight> owing to an effect of the bus switches <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>20</bold></highlight>-n, respectively. As a consequence, such fundamental information as a character font to be commonly used can be loaded in the main memory <highlight><bold>12</bold></highlight>, which enables to improve the memory utilization efficiency. Furthermore, in the case where a common processing is executed, for example, to develop a character font in the respective frame buffers <highlight><bold>14</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>14</bold></highlight>-n, the command processing can be synchronized by use of an EXEC (execute) signal and therefore data read from the main memory <highlight><bold>12</bold></highlight> can be simultaneously obtained by the graphic data processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n. As a result, the same data need undergo only one read operation and hence the processing efficiency can be increased. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Next, a detailed explanation will be given of the internal configuration of the graphic display processor (GDP) <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a schematic diagram showing the internal configuration of the graphic display processor <highlight><bold>10</bold></highlight> including a drawing processor <highlight><bold>101</bold></highlight>, a display processor <highlight><bold>102</bold></highlight>, a timing processor <highlight><bold>103</bold></highlight>, a CPU interface <highlight><bold>106</bold></highlight>, an interrupt control circuit <highlight><bold>105</bold></highlight>, a DMA control circuit <highlight><bold>104</bold></highlight>, a display interface <highlight><bold>108</bold></highlight>, and a bus control circuit <highlight><bold>107</bold></highlight>. The drawing processor <highlight><bold>101</bold></highlight> controls a graphic generation of a line, a plane, and the like, a data transfer between a CPU and a display memory, and the like; namely, the drawing processor <highlight><bold>101</bold></highlight> outputs a drawing address to effect a read/write operation in the display memory. The display processor <highlight><bold>102</bold></highlight> outputs display addresses of the display memory for a sequential display effected according to a rastar scan operation. The timing processor <highlight><bold>103</bold></highlight> generates various timing signals such as a synchronization signal and a display timing signal of the CRT and a signal to be used to change over between a display operation and a drawing operation. The CPU interface <highlight><bold>106</bold></highlight> supervises the interface with respect to the central processing unit (CPU) <highlight><bold>11</bold></highlight> such as an operation to synchronize the CPU data bus with the graphic display processor <highlight><bold>10</bold></highlight>. The interrupt control circuit <highlight><bold>105</bold></highlight> generates an interrupt request signal ({overscore (IRQ)}) to the CPU. The direct memory access (DMA) control circuit <highlight><bold>104</bold></highlight> controls communication of control signals with respect to the DMA controller (DMAC) <highlight><bold>13</bold></highlight>. The display interface <highlight><bold>108</bold></highlight> supervises the interface between the display memory and the display device, for example, the change-over control between a display operation and a drawing operation. The bus control circuit <highlight><bold>107</bold></highlight> controls the bus access right for the frame buffer so as to determine whether or not a bus usage is allowed for a signal requested from an external device. In the graphic display processor <highlight><bold>10</bold></highlight>, the functions are divided among the three processors related to the drawing, display, and timing functions to achieve a parallel operation, thereby improving the processing efficiency. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Next, a detailed description will be given of functions of the input/output terminals of the graphic display processor <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="7"><number>&lsqb;0098&rsqb;</number> (1) Bidirectional Data Bus (D<highlight><bold>0</bold></highlight>-D<highlight><bold>15</bold></highlight>: Input/Output) </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Input/output signals used to a data transfer between the system bus and the graphic display processor <highlight><bold>10</bold></highlight>. The terminal includes a three-state buffer and is set to a high-impedance state in operations other than an operation to read an internal register of the graphic display processor <highlight><bold>10</bold></highlight> from the side of the central processing unit <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="7"><number>&lsqb;0100&rsqb;</number> (2) Reset ({overscore (RES)}: Input) </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Input signal to reset the internal state of the graphic display processor <highlight><bold>10</bold></highlight> from an external device. When a signal at a &ldquo;Low&rdquo; level is inputted to this terminal, the internal state is reset to stop the display and drawing operations. </paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> (3) Read/Write (R/{overscore (W)}: Input) </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Input signal to control the direction of a data transfer between the system bus on the central processing unit <highlight><bold>11</bold></highlight> and the graphic display processor <highlight><bold>10</bold></highlight>: When this signal is at a &ldquo;High&rdquo; level, a read operation is effected (to transfer data from the graphic display processor <highlight><bold>10</bold></highlight> to the side of the central processing unit <highlight><bold>11</bold></highlight>); whereas when this signal is at a &ldquo;Low&rdquo; level, a write operation is executed (to transfer data from the side of the central processing unit <highlight><bold>11</bold></highlight> to the graphic display processor <highlight><bold>10</bold></highlight>). In the DMA transfer mode, however, when the R/{overscore (W)} signal is at a &ldquo;High&rdquo; level, data is transferred from the main memory side to the graphic display processor <highlight><bold>10</bold></highlight>; whereas when the R/{overscore (W)} signal is at a &ldquo;Low&rdquo; level, data is transferred from the GDP <highlight><bold>10</bold></highlight> to the side of the main memory <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0104" lvl="7"><number>&lsqb;0104&rsqb;</number> (4) Chip Select ({overscore (CS)}: Input) </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Select input used by the central processing unit <highlight><bold>11</bold></highlight> to access the graphic display processor <highlight><bold>10</bold></highlight>. Only when a &ldquo;Low&rdquo;-level signal is supplied to the {overscore (CS)} terminal, a read/write operation can be achieved on an internal register of the graphic display processor <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0106" lvl="7"><number>&lsqb;0106&rsqb;</number> (5) Register Select (RS <highlight><bold>1</bold></highlight>-<highlight><bold>2</bold></highlight>: Input) </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Input signals to select an internal register of the graphic display processor <highlight><bold>10</bold></highlight>. When the RS <highlight><bold>1</bold></highlight> and RS <highlight><bold>2</bold></highlight> are both at a &ldquo;Low&rdquo; level, an address register is selected for a write operation and a status register is selected for a read operation. For RS <highlight><bold>1</bold></highlight>&equals;&ldquo;Low&rdquo; and RS <highlight><bold>2</bold></highlight>&equals;&ldquo;High&rdquo;, an FIFO register is selected; where as for RS <highlight><bold>1</bold></highlight>&equals;&ldquo;High&rdquo; and RS <highlight><bold>2</bold></highlight>&equals;&ldquo;Low&rdquo;, a control register specified by the address register is selected. </paragraph>
<paragraph id="P-0108" lvl="7"><number>&lsqb;0108&rsqb;</number> (6) Data Transfer Acknowledge ({overscore (DTACK)}: Output) </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Output signal indicating a completion of a data transfer. When establishing an interface with an asynchronous bus, the data transfer is controlled by use of this signal. </paragraph>
<paragraph id="P-0110" lvl="7"><number>&lsqb;0110&rsqb;</number> (7) Interrupt Request ({overscore (IRQ)}: Output) </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Output signal for an interrupt request indicating the central processing unit <highlight><bold>11</bold></highlight> a condition such as a command termination or a detection of an undefined command. This terminal is of an open drain output and hence a wired OR operation can be effected with an interrupt request outputted from another device. </paragraph>
<paragraph id="P-0112" lvl="7"><number>&lsqb;0112&rsqb;</number> (8) DMA Transfer Request ({overscore (DREQ)}: Output) </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Output signal to request a data transfer to the DMAC <highlight><bold>13</bold></highlight> when a data transfer is achieved in the DMA transfer mode. For the DMA transfer operation, a cycle steal or a burst mode can be selected. </paragraph>
<paragraph id="P-0114" lvl="7"><number>&lsqb;0114&rsqb;</number> (9) DMA Transfer Acknowledge ({overscore (DMCK)}: Input) </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Answer input from the DMAC <highlight><bold>13</bold></highlight> in response to the {overscore (DREQ)} signal. When a signal at a &ldquo;Low&rdquo; level is inputted to this terminal, an access of data is achieved. </paragraph>
<paragraph id="P-0116" lvl="7"><number>&lsqb;0116&rsqb;</number> (10) Horizontal Synchronization/External Horizontal Synchronization ({overscore (HSYNC/EXHSYNC)}: Input/Output) </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> When set to an output, this terminal outputs a horizontal synchronization signal of the CRT display device <highlight><bold>16</bold></highlight>. When set to an input, the horizontal synchronization signal is inputted from an external device such as a TV set and the internal horizontal synchronization operation is effected in synchronism with the input signal. </paragraph>
<paragraph id="P-0118" lvl="7"><number>&lsqb;0118&rsqb;</number> (11) Vertical Synchronization ({overscore (VSYNC)}: Output) </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Output signal to apply a vertical synchronization to the CRT display device <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0120" lvl="7"><number>&lsqb;0120&rsqb;</number> (12) External Vertical Synchronization ({overscore (EXVSYNC)}: Input/Output) </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Input/output signals to effect a parallel operation of a plurality of graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n and a synchronization operation with respect to another external device. In the master mode, this terminal is used for an output, whereas in the slave mode, the terminal is used for an input. In the noninterlace operation, the synchronization is achieved by use of a signal identical to {overscore (VSYNC)}: whereas in the interlace mode, a signal obtained by extracting the {overscore (VSYNC)} only from the odd fields is used for the synchronization. </paragraph>
<paragraph id="P-0122" lvl="7"><number>&lsqb;0122&rsqb;</number> (13) Display Timing &frac12; ({overscore (DISP<highlight><bold>1</bold></highlight>)}, {overscore (DISP<highlight><bold>2</bold></highlight>)}: Output) </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Output signal to indicate a display timing of a screen. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> {overscore (DISP<highlight><bold>1</bold></highlight>)} is a signal output obtained by ORing the screens set as the base screen during the display period. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> {overscore (DISP<highlight><bold>2</bold></highlight>)} outputs a signal indicating a display period of a superimposed screen. </paragraph>
<paragraph id="P-0126" lvl="7"><number>&lsqb;0126&rsqb;</number> (14) Cursor Display ({overscore (CUD)}: Output) </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Output signal to display a cursor on a screen of the CRT display device <highlight><bold>16</bold></highlight>. By controlling a cursor define register, a graphic cursor or a cross-hair cursor can be selected. </paragraph>
<paragraph id="P-0128" lvl="7"><number>&lsqb;0128&rsqb;</number> (15) Memory Data (MD<highlight><bold>0</bold></highlight>-<highlight><bold>31</bold></highlight>: Input/output) </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Input/output terminal comprising 32 bits used to transfer data between the graphic display processor <highlight><bold>10</bold></highlight> and the frame buffer <highlight><bold>14</bold></highlight>. During the display cycle, this terminal is used to output an attribute signal. </paragraph>
<paragraph id="P-0130" lvl="7"><number>&lsqb;0130&rsqb;</number> (15) Memory Address (MA<highlight><bold>0</bold></highlight>-<highlight><bold>27</bold></highlight>: Output) </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Terminal to output an address of the frame buffer <highlight><bold>14</bold></highlight>. When a dynamic RAM is used for the frame buffer <highlight><bold>14</bold></highlight>, a refresh address can be outputted to this terminal during the horizontal synchronization period. </paragraph>
<paragraph id="P-0132" lvl="7"><number>&lsqb;0132&rsqb;</number> (17) Memory Address Strobe (MAS: Output) </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Strobe signal indicating periods during which outputs of MA<highlight><bold>0</bold></highlight>-<highlight><bold>27</bold></highlight> are effective. </paragraph>
<paragraph id="P-0134" lvl="7"><number>&lsqb;0134&rsqb;</number> (18) Frame Buffer Bus Status (FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>: Output) </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Output signal to indicate a status of the frame memory bus for each memory cycle. Externally, the type of the bus cycle can be known by decoding this signal. Details are listed in that following Table.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="21PT" align="center"/>
<colspec colname="2" colwidth="21PT" align="center"/>
<colspec colname="3" colwidth="14PT" align="center"/>
<colspec colname="4" colwidth="14PT" align="center"/>
<colspec colname="5" colwidth="147PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
<row>
<entry>F</entry>
<entry>F</entry>
<entry>F</entry>
<entry>F</entry>
<entry></entry>
</row>
<row>
<entry>B</entry>
<entry>B</entry>
<entry>B</entry>
<entry>B</entry>
</row>
<row>
<entry>S</entry>
<entry>S</entry>
<entry>S</entry>
<entry>S</entry>
</row>
<row>
<entry>3</entry>
<entry>2</entry>
<entry>1</entry>
<entry>0</entry>
<entry>Contents</entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>The graphic display processor is not accessing</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>the frame buffer.</entry>
</row>
<row>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>Indicates a memory write for each pixel in the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>write only mode.</entry>
</row>
<row>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>Indicates a memory read in a drawing for each</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>word (16 bits).</entry>
</row>
<row>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>Indicates a memory write in a drawing for each</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>word (16 bits).</entry>
</row>
<row>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>Indicates a memory read in a drawing for each</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>long word (32 bits).</entry>
</row>
<row>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>Indicates a memory write in a drawing for</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>each long word (32 bits).</entry>
</row>
<row>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>Undefined.</entry>
</row>
<row>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>Indicates an execute cycle of ADOUT command.</entry>
</row>
<row>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>Indicates a display address output of a base</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>screen (other than the superimposed screen).</entry>
</row>
<row>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>Indicates a display address output of a</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>superimposed screen.</entry>
</row>
<row>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>Undefined.</entry>
</row>
<row>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>Undefined.</entry>
</row>
<row>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>Indicates a refresh address output of DRAM.</entry>
</row>
<row>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>Indicates a refresh address output of</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>DRAM and an attribute output from the MD</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>terminal.</entry>
</row>
<row>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>Outputted in a drawing cycle for a memory</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>cycle when CDEND is executed.</entry>
</row>
<row>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>Indicates that GDP is stopped in a drawing</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>of outside of an area during an execution</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>of PUT with data DMA in the burst mode.</entry>
</row>
<row><entry namest="1" nameend="5" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0136" lvl="7"><number>&lsqb;0136&rsqb;</number> (19) Execute (EXEC: Input/Output) </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Input/output signals to synchronize the drawing operation for each command when n graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n are used in the color plane units. This terminal is of the open drain and the signal for each of the graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n is connected in a wired OR circuit. The graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n each set this terminal to &ldquo;Low&rdquo; during an execution of a command, and when the command is completed, the terminal is set to &ldquo;High&rdquo;. Consequently, the terminal undergone the wired-OR connection is set to &ldquo;High&rdquo; when all graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n finish the execution of a command. Although the graphic display processors <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>10</bold></highlight>-n each cannot proceed to execution of the next command while this terminal is in the &ldquo;Low&rdquo; level, the execution of the next command can be commenced immediately after a state that the terminal is in the &ldquo;High&rdquo; level is detected. </paragraph>
<paragraph id="P-0138" lvl="7"><number>&lsqb;0138&rsqb;</number> (20) Clock <highlight><bold>1</bold></highlight>, <highlight><bold>2</bold></highlight> (CLK <highlight><bold>1</bold></highlight>, <highlight><bold>2</bold></highlight>: Input) </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Inputs clock signals to be a reference of the internal operation of the graphic display processor <highlight><bold>10</bold></highlight>. Clock signal CLK <highlight><bold>2</bold></highlight> receives a signal which is delayed in phase by 90&deg; from a signal received by clock signal CLK <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0140" lvl="7"><number>&lsqb;0140&rsqb;</number> (21) 2 Clock (2 CLK: Output) </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Outputs a clock signal obtained by dividing the clock signal CLK <highlight><bold>1</bold></highlight> by two. </paragraph>
<paragraph id="P-0142" lvl="7"><number>&lsqb;0142&rsqb;</number> (22) Memory Cycle (MCYC: Output) </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> Signal output indicating a memory access timing of the frame buffer <highlight><bold>14</bold></highlight>. This signal is obtained by dividing the 2CLK by two. </paragraph>
<paragraph id="P-0144" lvl="7"><number>&lsqb;0144&rsqb;</number> (23) Bus Request (BREQ: Output) </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Request signal for a bus utilization right when the graphic display processor <highlight><bold>10</bold></highlight> accesses the system memory <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0146" lvl="7"><number>&lsqb;0146&rsqb;</number> (24) Hold (HOLD: Output) </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> When the bus master state is set as a result of a bus request issued from the graphic display processor <highlight><bold>10</bold></highlight> to the system bus, the graphic display processor <highlight><bold>10</bold></highlight> outputs &ldquo;High&rdquo; to this terminal while the bus is being occupied. </paragraph>
<paragraph id="P-0148" lvl="7"><number>&lsqb;0148&rsqb;</number> (25) Retry (RETRY: Input) </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> Input terminal to instruct reexecution of a drawing access. In the case where the graphic display processor <highlight><bold>10</bold></highlight> accesses the system memory <highlight><bold>12</bold></highlight>, when the cycle time of the system memroy <highlight><bold>12</bold></highlight> is longer than that of the graphic display processor <highlight><bold>10</bold></highlight>, if &ldquo;High&rdquo; is inputted to this terminal, the same memory access can be reexecuted in the subsequent memory cycle. </paragraph>
<paragraph id="P-0150" lvl="7"><number>&lsqb;0150&rsqb;</number> (26) Busy (BUSY: Output) </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Indicates a period of a memory cycle during which the graphic display processor <highlight><bold>10</bold></highlight> cannot release the frame buffer <highlight><bold>14</bold></highlight>. A &ldquo;High&rdquo;-level signal is outputted while a refresh address is being outputted or during a period of the display memory cycle in the display priority mode. </paragraph>
<paragraph id="P-0152" lvl="7"><number>&lsqb;0152&rsqb;</number> (27) Halt (HALT: Input) </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Input signal to inhibit a frame buffer access of the graphic display processor <highlight><bold>10</bold></highlight>. When the BUSY is at a &ldquo;Low&rdquo; level, the HALT is accepted and the graphic display processor <highlight><bold>10</bold></highlight> therefore does not execute a memory access. When the BUSY signal is at a &ldquo;High&rdquo; level, this signal input is ignored. Consequently, the drawing memory cycle can be inhibited in the display priority mode, whereas the drawing and display memory cycles can be inhibited in the drawing priority mode by use of this signal. Furthermore, when the graphic display processor <highlight><bold>10</bold></highlight> accesses the system memory <highlight><bold>12</bold></highlight>, a &ldquo;High&rdquo;-level signal is inputted from an external circuit to this terminal after a BREQ signal is outputted, and then a &ldquo;Low&rdquo;-level signal is supplied to the HALT terminal in response to the utilization approval signal on the system bus, thereby notifying that the bus can be used. </paragraph>
<paragraph id="P-0154" lvl="7"><number>&lsqb;0154&rsqb;</number> (28) Draw Request (DRREQ: Output) </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> Draw request signal for the frame buffer <highlight><bold>14</bold></highlight>. When a plurality of graphic display processors <highlight><bold>10</bold></highlight> share the frame buffer <highlight><bold>14</bold></highlight>, this signal is judged by an external bus arbitrate circuit to assign a bus usage right. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a configuration diagram showing an internal structure of the drawing processor <highlight><bold>101</bold></highlight> in the graphic display processor <highlight><bold>10</bold></highlight>. The drawing processor <highlight><bold>101</bold></highlight> includes an FIFO <highlight><bold>1015</bold></highlight> to communicate commands and parameters with the central processing unit <highlight><bold>11</bold></highlight> and the like, a command register <highlight><bold>1014</bold></highlight> to set a command, a logical address execution unit <highlight><bold>1013</bold></highlight>, a first microprogram ROM <highlight><bold>1011</bold></highlight> and a first microinstruction decoder <highlight><bold>1012</bold></highlight> each controlling the logical address execution unit <highlight><bold>1013</bold></highlight>, a physical address execution unit <highlight><bold>1019</bold></highlight>, a color data execution unit <highlight><bold>1020</bold></highlight>, a second microprogram ROM <highlight><bold>1016</bold></highlight> and a second microinstruction decoder <highlight><bold>1017</bold></highlight> each controlling the physical address execution unit <highlight><bold>1019</bold></highlight> and the color data execution unit <highlight><bold>1020</bold></highlight>, and an internal RAM <highlight><bold>1018</bold></highlight> storing line type information, pel information and the like. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> A command received from the central processing unit (CPU) <highlight><bold>11</bold></highlight> is loaded in the command register <highlight><bold>1015</bold></highlight> and then a microprogram corresponding thereto is read from the first microprogram ROM <highlight><bold>1011</bold></highlight>. The first microinstruction decoder <highlight><bold>1012</bold></highlight> decodes the command so as to control the logical address execution unit <highlight><bold>1013</bold></highlight>. On the other hand, a portion of the microinstruction is used as an address to read the microprogram ROM <highlight><bold>1016</bold></highlight>. The obtained microprogram is decoded by the second microinstruction decoder <highlight><bold>1017</bold></highlight> so as to control the logical address execution unit <highlight><bold>1019</bold></highlight> calculating a memory address of the frame buffer <highlight><bold>14</bold></highlight> corresponding to the logical address and the color data execution unit <highlight><bold>1020</bold></highlight> calculating graphic data. Furthermore, the internal RAM <highlight><bold>1018</bold></highlight> includes an addressing space unique to the internal RAM <highlight><bold>1018</bold></highlight> and a frame buffer addressing space which can be accessed as a part of the frame buffer space. Since the internal RAM <highlight><bold>1018</bold></highlight> can be accessed at a higher speed as compared with the frame buffer <highlight><bold>14</bold></highlight>, the internal RAM <highlight><bold>1018</bold></highlight> is suitable for a storage of information to be frequently accessed. Such information includes line type information specifying a line type when drawing a line, pel information specifying a width of a line, pattern information specifying a pattern when a plane drawing is effected, and a stack temporarily saving internal information. According to the present embodiment, line type information and pel information are controlled in the addressing space unique to the internal RAM <highlight><bold>1018</bold></highlight>, while pattern information and the stack are controlled in the frame addressing space for the following reason. Namely, a higher access can be achieved through the addressing unique to the internal RAM <highlight><bold>1018</bold></highlight> as compared with the frame buffer addressing. On the other hand, since pattern information and the stack each cannot exceed the capacity thereof, in the case where pattern information and the stack cannot be established in the internal RAM <highlight><bold>1018</bold></highlight>, the frame buffer addressing is used to control pattern information and the stack so as to enable an expansion into the frame buffer <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> However, there can also be considered utilization methods of the internal RAM <highlight><bold>1018</bold></highlight> other than the method of the embodiment such as a method in which only the addressing unique to the internal RAM <highlight><bold>1018</bold></highlight> is used to access a pattern and a stack at a higher speed and a method including only the frame buffer addressing so as to enable an expansion of the capacity of line type and pel information. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> Next, a description will be given of the frame buffer addressing of the internal RAM <highlight><bold>1018</bold></highlight>. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a schematic block diagram showing the bus control circuit and portions related to the interface with the frame buffer <highlight><bold>14</bold></highlight> of the drawing processor <highlight><bold>101</bold></highlight> in the graphic display processor (GDP) <highlight><bold>10</bold></highlight>. The bus control circuit <highlight><bold>107</bold></highlight> generates a control signal to access the frame buffer <highlight><bold>14</bold></highlight> connected to the system bus of the central processing unit <highlight><bold>11</bold></highlight> and a control signal to access the system memory <highlight><bold>12</bold></highlight> from the graphic display processor <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> When the internal RAM <highlight><bold>1018</bold></highlight> is to be accessed through the frame buffer addressing, the internal RAM address register (IRAR) <highlight><bold>2006</bold></highlight> is first loaded with the first address of an area to be accessed in the frame buffer <highlight><bold>14</bold></highlight>. In the 32-bit IRAR <highlight><bold>2006</bold></highlight>, the 12 low-order bits are not set. When accessing the frame buffer <highlight><bold>14</bold></highlight>, the drawing processor <highlight><bold>101</bold></highlight> sets the address in the memory address register (MAR) <highlight><bold>2004</bold></highlight> in the bit units. In this situation, the content of the register <highlight><bold>2004</bold></highlight> is compared with that of the IRAR <highlight><bold>2006</bold></highlight> by the agreement detector (IRCMP) <highlight><bold>2007</bold></highlight>. The comparator <highlight><bold>2007</bold></highlight> compares only the 20 high-order bits of the 32 bits. As a result, if the comparator <highlight><bold>2007</bold></highlight> outputs an agreement or coincidence signal, the address set to the memory address register <highlight><bold>2004</bold></highlight> is regarded as an address to be used to access the internal RAM <highlight><bold>1018</bold></highlight>. In response to the agreement signal, in place of address information associated with the addressing unique to the internal RAM <highlight><bold>1018</bold></highlight>, an address obtained by combining the address value of the memory address register <highlight><bold>2004</bold></highlight> with the 12 low-order bits is used to access the internal RAM <highlight><bold>1018</bold></highlight>. On the other hand, to prevent an access to the frame buffer <highlight><bold>14</bold></highlight>, an instruction is delivered to the draw request generator <highlight><bold>2013</bold></highlight> to inhibit the access. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a schematic diagram showing control registers and the RAM in the graphic display processor (GDP) <highlight><bold>10</bold></highlight> which are accessible from the central processing unit (CPU) <highlight><bold>11</bold></highlight>. These internal registers are classified into two groups according to the access method as follows. </paragraph>
<paragraph id="P-0163" lvl="7"><number>&lsqb;0163&rsqb;</number> (1) Registers Directly Accessible From the Central Processing Unit (CPU) <highlight><bold>11</bold></highlight> </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a schematic diagram showing a detailed structure of the registers and the RAM directly accessible from the central processing unit <highlight><bold>11</bold></highlight>. When the RS<highlight><bold>1</bold></highlight>, RS<highlight><bold>2</bold></highlight>, {overscore (CS)}, and R/{overscore (W)} are all at the &ldquo;Low&rdquo; level, a write operation is enabled on the address register. For the address/write FIFO counter register, when the RS<highlight><bold>1</bold></highlight>, RS<highlight><bold>2</bold></highlight>, and {overscore (CS)} are at the &ldquo;Low&rdquo; level and the R/{overscore (W)} is at the &ldquo;High&rdquo; level, a read operation is allowed on the address register and the write FIFO counter. When the RS<highlight><bold>1</bold></highlight> is at the &ldquo;Low&rdquo; level, the RS<highlight><bold>2</bold></highlight> is at the &ldquo;High&rdquo; level, the {overscore (CS)} the &ldquo;Low&rdquo; level, and the R/{overscore (W)} is at the &ldquo;High&rdquo; level, a read operation is enabled on the status register. For RS<highlight><bold>1</bold></highlight>&equals;&ldquo;Low&rdquo;, RS<highlight><bold>2</bold></highlight>&equals;&ldquo;High&rdquo; {overscore (CS)}&equals;&ldquo;Low&rdquo;, and R/{overscore (W)}&equals;&ldquo;Low&rdquo;, a write operation is enabled on the status register clear register. The FIFO can be accessed under a condition of RS<highlight><bold>1</bold></highlight>&equals;&ldquo;High&rdquo;, RS<highlight><bold>2</bold></highlight>&equals;&ldquo;Low&rdquo;, and {overscore (CS)}&equals;&ldquo;Low&rdquo;. Any other register can be accessed for RS<highlight><bold>1</bold></highlight>&equals;&ldquo;High&rdquo;, RS<highlight><bold>2</bold></highlight>&equals;&ldquo;High&rdquo;, and {overscore (CS)}&equals;&ldquo;Low&rdquo; after the pertinent register number is specified through the address register. </paragraph>
<paragraph id="P-0165" lvl="7"><number>&lsqb;0165&rsqb;</number> (2) Registers Accessible Via the FIFO </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> Registers controlling the drawing operation and the RAM are accessed via the First In First Out (FIFO). </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> The write FIFO includes 32 words, whereas the read FIFO comprises eight words. Internally, each time a command is processed, the next command is transferred to the command register. <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a schematic diagram showing in detail the structure of the drawing parameter registers. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> Next, a description will be given of the function of each register with reference to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0169" lvl="7"><number>&lsqb;0169&rsqb;</number> (1) Address Register (AR) </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The address register is used to specify an address (000-lFF) of the control register in the graphic display processor (GDP) <highlight><bold>10</bold></highlight>. When a read or write operation is effected on the control register, an address of the pertinent control register must be first written in the AR. Furthermore, when an INC bit of this register is set to 0, the address register is not updated, whereas if the INC bit is set to 1, the address register is so updated to be incremented by two each time the control register is accessed. That is, when successively accessing the control register, the address register needs only to be set at the start point. </paragraph>
<paragraph id="P-0171" lvl="7"><number>&lsqb;0171&rsqb;</number> (2) Address/Write FIFO Counter Register (AWFCR) </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> Used to read the contents of the address register and the unused word count of the write FIFO. By use of the register, the central processing unit <highlight><bold>11</bold></highlight> can attain the setting value of the address register and the unused word count of the write FIFO counter, and hence a command or a parameter containing the number of words indicated by the word count can be successively transferred to the write FIFO. </paragraph>
<paragraph id="P-0173" lvl="7"><number>&lsqb;0173&rsqb;</number> (3) Status Register (SR) </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> Indicates an internal status of the graphic display processor <highlight><bold>10</bold></highlight>. Each bit has the meaning as follows. </paragraph>
<paragraph id="P-0175" lvl="7"><number>&lsqb;0175&rsqb;</number> 1 Update (UDT) </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Indicates an enable period during which the timing and display control registers can be rewritten. </paragraph>
<paragraph id="P-0177" lvl="7"><number>&lsqb;0177&rsqb;</number> Command DMA Complete (CDC) </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> This bit is set when a DEND command terminating a DMA command is executed in the command DMA mode. </paragraph>
<paragraph id="P-0179" lvl="7"><number>&lsqb;0179&rsqb;</number> DMA Error (DER) </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> Set when a GET, RD command is executed in the command DMA mode so as to indicate that the command DMA mode cannot be continued. </paragraph>
<paragraph id="P-0181" lvl="7"><number>&lsqb;0181&rsqb;</number> Memory Protection Violation (MPV) </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Indicates that a stack region is exceeded while accessing the stack region of the frame buffer by a PAINT command. </paragraph>
<paragraph id="P-0183" lvl="7"><number>&lsqb;0183&rsqb;</number> Stop (STP) </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> Indicates that a STOP command has been executed. </paragraph>
<paragraph id="P-0185" lvl="7"><number>&lsqb;0185&rsqb;</number> Command Error (CER) </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> Indicates that an undefined command is attempted for an execution or that a ZOOM command or an ROT command is executed between a coordinate space represented in binary notation and a coordinate space represented by color information. </paragraph>
<paragraph id="P-0187" lvl="7"><number>&lsqb;0187&rsqb;</number> Area Detect (ARD) </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> Indicates that an area has been detected according to a specification of the drawing area test mode. </paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> Command End (CED) </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Indicates that a command execution is ended or that a command has not been executed. </paragraph>
<paragraph id="P-0191" lvl="2"><number>&lsqb;0191&rsqb;</number> Read FIFO Full (RFF) </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Indicates that the read FIFO contains data including 8 words (16 bytes) and a data read command cannot be further executed. When the data is read from the read FIFO, the RFF is cleared. </paragraph>
<paragraph id="P-0193" lvl="7"><number>&lsqb;0193&rsqb;</number> Read FIFO Ready (RFR) </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> Indicates that a data is prepared in the read FIFO. When the data is entirely read from the read FIFO, the RFR is cleared. </paragraph>
<paragraph id="P-0195" lvl="7"><number>&lsqb;0195&rsqb;</number> Write FIFO Ready (WFR) </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> Indicates that a write operation is enabled on the write FIFO. When data comprising 32 words (64 bytes) are written in the write FIFO, the WFR is cleared. </paragraph>
<paragraph id="P-0197" lvl="7"><number>&lsqb;0197&rsqb;</number> Write FIFO Empty (WFE) </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Indicates that the write FIFO is empty. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> When the write FIFO is loaded with data, the WFE is cleared. </paragraph>
<paragraph id="P-0200" lvl="7"><number>&lsqb;0200&rsqb;</number> (3) Status Register Clear Register (SRCR) </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> Used to clear the bits of the status register. When a bit corresponding to a bit to be cleared in the status register is set to 1, the pertinent bit is reset. However, the RFF, RFR, WFR, and WFE bits cannot be reset by use of this register. </paragraph>
<paragraph id="P-0202" lvl="7"><number>&lsqb;0202&rsqb;</number> (4) FIFO Entry (FE) </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> The FE is a register to write a command/parameter in the graphic display processor <highlight><bold>10</bold></highlight> and to read data therefrom. Each graphic display processor (GDP) <highlight><bold>10</bold></highlight> includes a 16-byte read FIFO and a 64-byte write FIFO. When a read operation is effected, the read FIFO is selected, whereas when a write operation is achieved, the write FIFO is selected. When a command/parameter is written in the write FIFO, the command is sequentially executed, and after an execution of a read command, the read data is sequentially prepared in the read FIFO. </paragraph>
<paragraph id="P-0204" lvl="7"><number>&lsqb;0204&rsqb;</number> (5) Command Control Register (CCR) </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> Controls a command processing. Each bit of the CCR has the meaning as follows.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>ABORT (ABT)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>ABT</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>Enables a command processing.</entry>
</row>
<row>
<entry>1</entry>
<entry>Interrupts a command processing under</entry>
</row>
<row>
<entry></entry>
<entry>execution and clears the read FIFO/write FIFO.</entry>
</row>
<row>
<entry></entry>
<entry>Since an access to the read FIFO/write FIFO</entry>
</row>
<row>
<entry></entry>
<entry>is inhibited, the command write operation must</entry>
</row>
<row>
<entry></entry>
<entry>be achieved after setting &ldquo;0&rdquo; to the ABT.</entry>
</row>
<row>
<entry></entry>
<entry>When this bit is set to &ldquo;1&rdquo;, the status register</entry>
</row>
<row>
<entry></entry>
<entry>is also initialized.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Pause (PSE)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>PSE</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>Enables a command execute processing and</entry>
</row>
<row>
<entry></entry>
<entry>restarts a command execute processing.</entry>
</row>
<row>
<entry>1</entry>
<entry>Temporarily stops a command processing under</entry>
</row>
<row>
<entry></entry>
<entry>execution and sets a wait state until the PSE is</entry>
</row>
<row>
<entry></entry>
<entry>set to &ldquo;0&rdquo;. This does not influence an access</entry>
</row>
<row>
<entry></entry>
<entry>to the status register and the FIFO.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Data DMA mode (DDM)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>DDM</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>Set when a data DMA transfer is not effected.</entry>
</row>
<row>
<entry></entry>
<entry>Note: {overscore (DREQ)} is not outputted even when a DMA</entry>
</row>
<row>
<entry></entry>
<entry>data transfer command is written.</entry>
</row>
<row>
<entry>1</entry>
<entry>Set when a data DMA transfer is effected. This</entry>
</row>
<row>
<entry></entry>
<entry>bit must be set in any case before the DMA data</entry>
</row>
<row>
<entry></entry>
<entry>transfer command is written.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Command DMA mode (CDM)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>CDM</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>Set when a command DMA transfer is stopped or</entry>
</row>
<row>
<entry></entry>
<entry>an execute processing is inhibited.</entry>
</row>
<row>
<entry>1</entry>
<entry>Starts a command DMA transfer processing.</entry>
</row>
<row>
<entry></entry>
<entry>Incidentally, since the transfer is executed</entry>
</row>
<row>
<entry></entry>
<entry>in the cycle steal mode regardless of the setting</entry>
</row>
<row>
<entry></entry>
<entry>of the DRC, any register in the graphic display</entry>
</row>
<row>
<entry></entry>
<entry>processor (GDP) 10 can be accessed from the side</entry>
</row>
<row>
<entry></entry>
<entry>of the central processing unit (CPU) 11;</entry>
</row>
<row>
<entry></entry>
<entry>consequently, the command DMA transfer can be</entry>
</row>
<row>
<entry></entry>
<entry>stopped by clearing the CDM to &ldquo;0&rdquo;or by use</entry>
</row>
<row>
<entry></entry>
<entry>of a {overscore (DONE )} input.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>DMA transfer request control (DRC)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>DRC</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>Sends the {overscore (DREQ)} in the form of a level signal</entry>
</row>
<row>
<entry></entry>
<entry>(burst mode). However, this bit can be set</entry>
</row>
<row>
<entry></entry>
<entry>only by an execution of a data DMA transfer</entry>
</row>
<row>
<entry></entry>
<entry>command.</entry>
</row>
<row>
<entry>1</entry>
<entry>Sends the {overscore (DREQ)} in the form of pulse signals for</entry>
</row>
<row>
<entry></entry>
<entry>each transfer of a word (byte) (cycle steal mode).</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0206" lvl="7"><number>&lsqb;0206&rsqb;</number> Graphic Bit Mode (GBM) </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> Bits to set a bit configuration of pixel data to be manipulated by the graphic display processor (GDP) <highlight><bold>10</bold></highlight>. Any one of six kinds of bit configuration can be selected, which easily enables to implement a color (gradation or tone) configuration. </paragraph>
<paragraph id="P-0208" lvl="7"><number>&lsqb;0208&rsqb;</number> Area Mode (AREA) </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> Controls the drawing region and includes the modes described in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>.  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Continuity mode (CNT)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>CNT</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>The cycle steal mode is set when the graphic</entry>
</row>
<row>
<entry></entry>
<entry>display processor 10 accesses the main memory</entry>
</row>
<row>
<entry></entry>
<entry>12.</entry>
</row>
<row>
<entry>1</entry>
<entry>The burst mode is set when the graphic display</entry>
</row>
<row>
<entry></entry>
<entry>processor 10 accesses the main memory 12.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<tbody valign="top">
<row>
<entry>Main memory access mode (MMA)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49PT" align="center"/>
<colspec colname="2" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry>MMA</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>0</entry>
<entry>The main memory 12 is not accessed as a portion</entry>
</row>
<row>
<entry></entry>
<entry>of the frame buffer 14.</entry>
</row>
<row>
<entry>1</entry>
<entry>A half of the memory space of the frame buffer</entry>
</row>
<row>
<entry></entry>
<entry>14 is allocated to the main memory 12 and an</entry>
</row>
<row>
<entry></entry>
<entry>access is made to the main memory 12.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0210" lvl="7"><number>&lsqb;0210&rsqb;</number> Data Configuration Transform (DCT) </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> Bits specifying a transformation of the data configuration for a data transfer between the central processing unit <highlight><bold>11</bold></highlight> and the graphic display processor <highlight><bold>10</bold></highlight>. When this setting is selected, there is established a connection between the central processing unit <highlight><bold>11</bold></highlight> and the graphic display processor <highlight><bold>10</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows the kinds of transform operations. </paragraph>
<paragraph id="P-0212" lvl="7"><number>&lsqb;0212&rsqb;</number> Fraction Set (FRS) </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> Bit used to set the position of the fixed decimal point for the current pointer. Four positions can be set for the decimal point as follows so as to enable easily select a drawing precision of a graphic form.  
<table-cwu id="TABLE-US-00004">
<number>4</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63PT" align="center"/>
<colspec colname="2" colwidth="154PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>FRS</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>00</entry>
<entry>Only the integer part is subjected to an</entry>
</row>
<row>
<entry></entry>
<entry>arithmetic operation without specifying the</entry>
</row>
<row>
<entry></entry>
<entry>decimal point.</entry>
</row>
<row>
<entry>01</entry>
<entry>The least significant bit of the current pointer</entry>
</row>
<row>
<entry></entry>
<entry>is assumed to be a fractional part.</entry>
</row>
<row>
<entry>10</entry>
<entry>Least significant two bits of the current pointer</entry>
</row>
<row>
<entry></entry>
<entry>are treated as a fractional part.</entry>
</row>
<row>
<entry>11</entry>
<entry>Least significant three bits of the current</entry>
</row>
<row>
<entry></entry>
<entry>pointer are treated as a fractional part.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> When a rewrite operation is achieved for each pixel in a system operating with a word comprising a plurality of pixels, this bit is used to specify a mode enabling the 1-pixel-unit rewrite operation only through a write operation without necessitating the read modify write operation. This provision enables a pixel to be updated in a memory cycle, which increases the drawing speed.  
<table-cwu id="TABLE-US-00005">
<number>5</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56PT" align="center"/>
<colspec colname="2" colwidth="161PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>WTM</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>0</entry>
<entry>The MA terminal outputs an address in the word</entry>
</row>
<row>
<entry></entry>
<entry>units and does not achieve a write only mode</entry>
</row>
<row>
<entry></entry>
<entry>operation.</entry>
</row>
<row>
<entry>1</entry>
<entry>The MA terminal outputs a pixel address (outputs</entry>
</row>
<row>
<entry></entry>
<entry>an address in the unit of 1 bit, 2 bits, 4 bits,</entry>
</row>
<row>
<entry></entry>
<entry>8 bits, or 16 bits corresponding to the graphic</entry>
</row>
<row>
<entry></entry>
<entry>bit mode (GBM)) and achieves a write only mode</entry>
</row>
<row>
<entry></entry>
<entry>operation. However, this is the case only when</entry>
</row>
<row>
<entry></entry>
<entry>the drawing operation mode is the substitution</entry>
</row>
<row>
<entry></entry>
<entry>mode.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0215" lvl="7"><number>&lsqb;0215&rsqb;</number> Memory Data Size (MDS) </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> Bits to set the data bus width of the frame buffer <highlight><bold>14</bold></highlight>. When a portion of the address space of the frame buffer <highlight><bold>14</bold></highlight> is allocated to the main memory <highlight><bold>12</bold></highlight>, the data bus width can be separately set on the side of the frame buffer <highlight><bold>14</bold></highlight> and on the side of the main memory <highlight><bold>12</bold></highlight>, which enables to cope with various changes in the system configuration.  
<table-cwu id="TABLE-US-00006">
<number>6</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="21PT" align="left"/>
<colspec colname="2" colwidth="28PT" align="center"/>
<colspec colname="3" colwidth="154PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>Bit 0</entry>
<entry>0</entry>
<entry>The frame buffer 14 is set to the 16-bit</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>configuration. MD0-MD15 are used to access the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>frame buffer 14.</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>1</entry>
<entry>The frame buffer 14 is set to the 32-bit</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>configuration. MD0-MD31 are used to access the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>frame buffer 14.</entry>
</row>
<row>
<entry></entry>
<entry>Bit 1</entry>
<entry>0</entry>
<entry>The main memory 12 is set to the 16-bit</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>configuration. MD0-MD15 are used to access the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>main memory 12.</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>1</entry>
<entry>The main memory 12 is set to the 32-bit</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>configuration. MD0-MD31 are used to access</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>the main memory 12.</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0217" lvl="7"><number>&lsqb;0217&rsqb;</number> Timing Control Registers </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> A group of register defining output conditions of the synchronization signal, the cursor display control signal, and the screen control signal. </paragraph>
<paragraph id="P-0219" lvl="7"><number>&lsqb;0219&rsqb;</number> Display Control Registers </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> A group of registers controlling a memory address output for a display operation. </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> Next, based on <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the functions of drawing parameter registers will be described. </paragraph>
<paragraph id="P-0222" lvl="7"><number>&lsqb;0222&rsqb;</number> Color Register <highlight><bold>0</bold></highlight> (CL<highlight><bold>0</bold></highlight>) </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> Used when binary information such as a pattern, a line style, font data, etc. is converted into color data. The color data is set corresponding to &ldquo;0&rdquo; of binary data. </paragraph>
<paragraph id="P-0224" lvl="7"><number>&lsqb;0224&rsqb;</number> Color Register <highlight><bold>1</bold></highlight> (CL <highlight><bold>1</bold></highlight>) </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> Like the color register <highlight><bold>0</bold></highlight>, this register is used when binary information is converted into color data. The color data is set corresponding to &ldquo;1&rdquo; of binary data. </paragraph>
<paragraph id="P-0226" lvl="7"><number>&lsqb;0226&rsqb;</number> Color Comparison Register (CCMP) </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> Defines an evaluation color in a drawing operation. When a color comparison mode (to be described later) is selected, the particular color specified by this register can be set as a drawing inhibit color or a changeable color. </paragraph>
<paragraph id="P-0228" lvl="7"><number>&lsqb;0228&rsqb;</number> Edge Color Register (EDG) </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> Defines a boundary color of a boundary defining a region by a PAINT command. Two cases are possible, namely, the case where the color specified by this register is set as the boundary color and the case where other than the color specified by this register is set as the boundary color. </paragraph>
<paragraph id="P-0230" lvl="7"><number>&lsqb;0230&rsqb;</number> Read Mask Register (RMASK) </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> Selects data of a particular color plane from color data and specifies a color plane when color data is converted into binary information. </paragraph>
<paragraph id="P-0232" lvl="7"><number>&lsqb;0232&rsqb;</number> Write Mask Register (WMASK) </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> In a drawing operation, this register is used to specify a color plane for which a rewrite operation is not effected. A plurality of planes may be specified for the rewrite operation. Combining this register with the read mask register, a copy can be achieved between planes. </paragraph>
<paragraph id="P-0234" lvl="7"><number>&lsqb;0234&rsqb;</number> Pattern Control Register (PTNC) </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> Defines an area in which a paint-out pattern of a PAINT command or FILL command is stored. Since the area can be set in the frame buffer, the size of the area can be arbitrarily set. This register comprises the following registers. </paragraph>
<paragraph id="P-0236" lvl="7"><number>&lsqb;0236&rsqb;</number> (i) Pattern Pointer (PPX, PPY) </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> Indicates a reference point of a pattern area. The pattern area is associated with a unique pattern coordinate system, which is different from the drawing coordinate system. </paragraph>
<paragraph id="P-0238" lvl="7"><number>&lsqb;0238&rsqb;</number> (ii) Pattern Start Position (PSX, PSY) </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> Indicates the coordinates of the start point of the pattern area in the pattern coordinate system. </paragraph>
<paragraph id="P-0240" lvl="7"><number>&lsqb;0240&rsqb;</number> (iii) Pattern End Position (PEX, PEY) </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> Indicates the end point of the pattern area according to the pattern coordinate system. </paragraph>
<paragraph id="P-0242" lvl="7"><number>&lsqb;0242&rsqb;</number> (iv) Pattern Zooming Counter (PZCX, PZCY) </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> Indicates a count value of the zooming factor when the pattern is referenced. The count value is obtained through a counting operation in the ranges of 0&lE;PZCX&lE;PZX and 0&lE;PZCY&lE;PZY and when the zooming factor is reached, the pattern pointer is moved. </paragraph>
<paragraph id="P-0244" lvl="7"><number>&lsqb;0244&rsqb;</number> (v) Pattern Zooming Factor (PZX, PZY) </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> Defines a zooming factor used to reference a pattern. The zooming factor varies from 1 to 16 according to the specified value ranging from 0 to 15. </paragraph>
<paragraph id="P-0246" lvl="7"><number>&lsqb;0246&rsqb;</number> Area Definition Register (ARD) </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> Defines a drawing area. The area is controlled according to the area mode. </paragraph>
<paragraph id="P-0248" lvl="7"><number>&lsqb;0248&rsqb;</number> Drawing Mode Register (DMR) </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> Specifies the operation mode, color compare mode, color mode, or pel drawing mode for a drawing operation. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> FIGS. <highlight><bold>16</bold></highlight>-<highlight><bold>20</bold></highlight> show the configuration of the drawing mode registers. DM<highlight><bold>0</bold></highlight> is a register to be referenced in a drawing operation other than an operation initiated by an MCOPY command, whereas DM<highlight><bold>1</bold></highlight> is used to define an operation between a transfer source data and pattern data. DM<highlight><bold>0</bold></highlight> is referenced for an operation between a result of the operation and the transfer destination data. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> With these two registers, 256 kinds of logic operations can be defined in an MCOPY command. </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> CMW<highlight><bold>0</bold></highlight> and CMW<highlight><bold>1</bold></highlight> are registers to define memory widths of the two drawing coordinate systems. <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows that the graphic display processor <highlight><bold>10</bold></highlight> controls two coordinate systems to achieve a data transfer between coordinate systems each having the different screen size. This means that a data transfer between windows can be easily accomplished in a system controlling a multi-window. </paragraph>
<paragraph id="P-0253" lvl="7"><number>&lsqb;0253&rsqb;</number> Pattern Definition Register (PDR) </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> Defines the memory width of a pattern area. When the upper-most bit in 0, the pattern area is treated with color data; whereas when the most significant bit is 1, the pattern area is assumed to contain binary data. </paragraph>
<paragraph id="P-0255" lvl="7"><number>&lsqb;0255&rsqb;</number> Pattern Memory Address Register (PTNA) </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> Controls a memory address of the frame buffer for the pattern pointer (PPX, PPY). </paragraph>
<paragraph id="P-0257" lvl="7"><number>&lsqb;0257&rsqb;</number> Pel Memory Aaddress Register (PLA) </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> The graphic display processor <highlight><bold>10</bold></highlight> can reserve a pel area defining a shape corresponding to a pixel when a line drawing is achieved. The pel function facilitates a line drawing with a bold line. <cross-reference target="DRAWINGS">FIG. 22</cross-reference> shows definitions of a pel area. The PLA is used to set an address associated with the origin of the pel. </paragraph>
<paragraph id="P-0259" lvl="7"><number>&lsqb;0259&rsqb;</number> Pel Control Register (PLC) </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> Defines the size of a pel area. In <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, the pel origin corresponds to the current pointer in the drawing coordinate system, the size is defined by PLX <highlight><bold>1</bold></highlight>, PLX <highlight><bold>2</bold></highlight>, PLY<highlight><bold>1</bold></highlight>, and PLY <highlight><bold>2</bold></highlight> centered on the current pointer, and the shape of a pixel is defined in this range. Each bit of this data corresponds to a pixel of the frame buffer <highlight><bold>14</bold></highlight>. A portion of 0 is ignored, whereas a portion of 1 undergoes a drawing operation based on line style information (to be described later). Namely, the drawing operation is accomplished by rendering a bit of line style information selected to draw a pixel to correspond to the portion of &ldquo;1&rdquo; of the pel. <cross-reference target="DRAWINGS">FIG. 23</cross-reference> shows the relationships between pels on line styles. Since the current pointer moves in the unit of a pixel regardless of the shape and size of the pel, a duplicated write operation is repeatedly performed depending on the shape. </paragraph>
<paragraph id="P-0261" lvl="7"><number>&lsqb;0261&rsqb;</number> Line Style Control Register (LSC) </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> Defines a line style information area for a line drawing operation. By changing the line style, a dotted line or the like can be defined. </paragraph>
<paragraph id="P-0263" lvl="7"><number>&lsqb;0263&rsqb;</number> (i) Line Style Pointer (LSP) </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> Indicates a reference point for a line style. The pointer is moved corresponding to the current pointer. </paragraph>
<paragraph id="P-0265" lvl="7"><number>&lsqb;0265&rsqb;</number> (ii) Line Style Start Point (LSS) </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> Indicates the start point of the line style. </paragraph>
<paragraph id="P-0267" lvl="7"><number>&lsqb;0267&rsqb;</number> (iii) Line Style End Point (LSE) </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> Indicates the end point of the line style. </paragraph>
<paragraph id="P-0269" lvl="7"><number>&lsqb;0269&rsqb;</number> (iv) Line Style Zooming Counter (LSZC) </paragraph>
<paragraph id="P-0270" lvl="0"><number>&lsqb;0270&rsqb;</number> Indicates the count value of the zooming factor when the line style is referenced. The count value is counted in a range of 0&lE;LSZC&lE;LSZ and the line style pointer is moved when the zooming factor is reached. </paragraph>
<paragraph id="P-0271" lvl="7"><number>&lsqb;0271&rsqb;</number> (v) Line Style Zooming Factor (LSZ) </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> Defines the zooming factor when the line style is referenced. The zooming factor varies from 1 to 16 according to the specified value ranging frame 0 to 15. </paragraph>
<paragraph id="P-0273" lvl="7"><number>&lsqb;0273&rsqb;</number> Font Area Definition Register (FADR) </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> Defines a character font area for a bit map character drawing. The character font is defined in an address space of the frame buffer; however, when the MMA bit of the command control register (CCR) is set to &ldquo;1&rdquo;, the character font may be located in the main memory. </paragraph>
<paragraph id="P-0275" lvl="7"><number>&lsqb;0275&rsqb;</number> (i) Font Base Address (FBAH, FBAL) </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> Defines a memory address of the reference point of the font area. </paragraph>
<paragraph id="P-0277" lvl="7"><number>&lsqb;0277&rsqb;</number> (ii) Number of Font Bits (FBN) </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> Defines the number of bits constituting the font of a character. </paragraph>
<paragraph id="P-0279" lvl="7"><number>&lsqb;0279&rsqb;</number> (iii) Font Memory Width (FAMW) </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> Defines the memory width of the font area. </paragraph>
<paragraph id="P-0281" lvl="7"><number>&lsqb;0281&rsqb;</number> (iv) Character Interval (DX, DY) </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> Defines the interval between characters. </paragraph>
<paragraph id="P-0283" lvl="7"><number>&lsqb;0283&rsqb;</number> (v) Character Zooming Factor (ZX, ZY) </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> Defines the zooming/reduction factor of a character when a character is drawn by a CHR command. When the specified values exceed DX and DY, the character is zoomed, whereas when the values are less than DX and DY, the character is reduced. Since the values can be independently defined for the X and Y values, a character drawing may be achieved in which the zooming applies to the X direction and the reduction applies to the Y direction. </paragraph>
<paragraph id="P-0285" lvl="7"><number>&lsqb;0285&rsqb;</number> (vi) Font Slant Factor (XX) </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> Defines the slant ratio of a character when the character is drawn by a CHR command. Refer to the description of the CHR command later in this text. </paragraph>
<paragraph id="P-0287" lvl="7"><number>&lsqb;0287&rsqb;</number> Internal RAM Address Register (IRAR) </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> The graphic display processor <highlight><bold>10</bold></highlight> includes a 512-byte RAM, which can be accessed as an address space of the frame buffer. The internal RAM address register is loaded with the first address of an area allocated in the frame buffer. As compared with the frame buffer, the internal RAM can be accessed at a higher speed. As a consequence, when the pattern area is small, the processing speed can be increased by locating the pattern in the internal RAM. On the other hand, when the pattern area is desired to be expanded, the pattern memory address (PTNA) needs to only be changed, which enables to select either mode only by the software. <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows the relationships among the frame buffer <highlight><bold>14</bold></highlight>, the internal RAM <highlight><bold>1011</bold></highlight>, the main memory <highlight><bold>12</bold></highlight>, and the frame buffer address space. </paragraph>
<paragraph id="P-0289" lvl="7"><number>&lsqb;0289&rsqb;</number> Stack Start Address Register (SSAR) </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> Stacks coordinate points at intermediate points of processing in the frame buffer during an execution of a PAINT command. This register defines the start address of the stack area. </paragraph>
<paragraph id="P-0291" lvl="7"><number>&lsqb;0291&rsqb;</number> Stack Area Definition Register (SADR) </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> Defines the size of the stack area. The area can be set in a step of 2<highlight><superscript>n</superscript></highlight>. </paragraph>
<paragraph id="P-0293" lvl="7"><number>&lsqb;0293&rsqb;</number> Stack Pointer (SP) </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> Sets an address where the stack operation is effected. </paragraph>
<paragraph id="P-0295" lvl="7"><number>&lsqb;0295&rsqb;</number> Drawing Pointer <highlight><bold>0</bold></highlight> (DP<highlight><bold>0</bold></highlight>) </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> This register indicates a drawing memory address of the coordinate system <highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0297" lvl="7"><number>&lsqb;0297&rsqb;</number> Current Pointer <highlight><bold>0</bold></highlight> (CP<highlight><bold>0</bold></highlight>X, CP<highlight><bold>0</bold></highlight>Y) </paragraph>
<paragraph id="P-0298" lvl="0"><number>&lsqb;0298&rsqb;</number> Indicates a drawing coordinate point in the coordinate system <highlight><bold>0</bold></highlight>. This coordinate point corresponds to the DP<highlight><bold>0</bold></highlight>. </paragraph>
<paragraph id="P-0299" lvl="7"><number>&lsqb;0299&rsqb;</number> Drawing Pointer <highlight><bold>1</bold></highlight> (DP<highlight><bold>1</bold></highlight>) </paragraph>
<paragraph id="P-0300" lvl="0"><number>&lsqb;0300&rsqb;</number> Indicates a drawing memory address in the coordinate system <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0301" lvl="7"><number>&lsqb;0301&rsqb;</number> Current Pointer <highlight><bold>1</bold></highlight> (CP<highlight><bold>1</bold></highlight>X, CP<highlight><bold>1</bold></highlight>Y) </paragraph>
<paragraph id="P-0302" lvl="0"><number>&lsqb;0302&rsqb;</number> Indicates a drawing coordinate point in the coordinate system <highlight><bold>1</bold></highlight>. The coordinate point correspond to the DP<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0303" lvl="7"><number>&lsqb;0303&rsqb;</number> Drawing Start Point (DSP) </paragraph>
<paragraph id="P-0304" lvl="0"><number>&lsqb;0304&rsqb;</number> Indicates a coordinate point on a circle from which a drawing operation is initiated by an ARC or EARC command. </paragraph>
<paragraph id="P-0305" lvl="7"><number>&lsqb;0305&rsqb;</number> Drawing End Point (DEP) </paragraph>
<paragraph id="P-0306" lvl="0"><number>&lsqb;0306&rsqb;</number> Indicates a coordinate point on a circle at which a drawing operation of an ARC or EARC command is finished. </paragraph>
<paragraph id="P-0307" lvl="0"><number>&lsqb;0307&rsqb;</number> Next, description will be given of commands used in the graphic display processor (GDP) <highlight><bold>10</bold></highlight>. FIGS. <highlight><bold>25</bold></highlight>-<highlight><bold>28</bold></highlight> shows the commands of the GDP <highlight><bold>10</bold></highlight>, which can execute a part of commands described, for example, in the &ldquo;Nikkei Electronics&rdquo;, May 21, 1984, pp. 221-254, a part of commands referenced in the Japanese Patent Application No. 60-201549 of the present assignee, now laid open as JP-A-62-62390, but not be admitted as prior art and the commands which will be described later in this text. </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> shows an example of the operation associated with a PLINE command, which is used to draw an interval indicated by parameters Z<highlight><subscript>s</subscript></highlight>, Z<highlight><subscript>e</subscript></highlight>, and Z of a line between a point represented by parameters X<highlight><subscript>1 </subscript></highlight>and Y<highlight><subscript>1 </subscript></highlight>and a point indicated by parameters X<highlight><subscript>2 </subscript></highlight>and Y<highlight><subscript>2</subscript></highlight>. The parameters Z<highlight><subscript>s </subscript></highlight>and Z<highlight><subscript>e </subscript></highlight>limit the values of X and Y coordinates. Which one of the coordinate values is to be limited is denoted by the parameter Z. For Z&equals;0, the drawing operation is accomplished in an interval from Z<highlight><subscript>s </subscript></highlight>to Z<highlight><subscript>e </subscript></highlight>with respect to the X coordinate value; while for Z&equals;1, the drawing operation is achieved in an interval from Z<highlight><subscript>s </subscript></highlight>to Z<highlight><subscript>e </subscript></highlight>with respect to the Y coordinate value. This command enables the graphic display processor (GDP) <highlight><bold>10</bold></highlight> to effect a drawing operation of a straight line having a start point and an end point each not represented by integers, which has been attended with difficulties in the conventional graphic display processor. Furthermore, one of the two coordinate systems can be specified for the drawing operation by the parameter D. </paragraph>
<paragraph id="P-0309" lvl="0"><number>&lsqb;0309&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> shows an example of the operation of an FTRAP command. This command is used to point out by use of a graphic form stored in the pattern RAM an area surrounded with four lines including a line between a point designated by parameters X<highlight><subscript>1 </subscript></highlight>and Y<highlight><subscript>1 </subscript></highlight>and a point denoted by parameters X<highlight><subscript>2 </subscript></highlight>and Y<highlight><subscript>2</subscript></highlight>, a line between a point indicated by parameters X<highlight><subscript>3 </subscript></highlight>and Y<highlight><subscript>3 </subscript></highlight>and a point represented by parameters X<highlight><subscript>4 </subscript></highlight>and Y<highlight><subscript>4</subscript></highlight>, a horizontal line associated with parameter Y<highlight><subscript>s</subscript></highlight>, and a horizontal line expressed by parameter Y<highlight><subscript>e</subscript></highlight>. By using this command in combination, a graphic form constituted from a plurality of arbitrary polygons can be painted out with a graphic pattern. Moreover, one of the two coordinate systems can be specified for the drawing operation by the parameter D. </paragraph>
<paragraph id="P-0310" lvl="0"><number>&lsqb;0310&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> shows an operation example of an FARC-LN command. The FARC-LN command is used to paint out with a graphic form stored in the pattern RAM an area surrounded with four lines including an arc of a quarter of a circle which has a center at a point indicated by parameters X<highlight><subscript>c </subscript></highlight>and Y<highlight><subscript>c </subscript></highlight>and a radius specified by parameter r, the arc included in an area designated by parameter Zone, a line between a point associated with parameters X<highlight><subscript>1 </subscript></highlight>and Y<highlight><subscript>1 </subscript></highlight>and a point expressed by parameters X<highlight><subscript>2 </subscript></highlight>and Y<highlight><subscript>2</subscript></highlight>, a horizontal line indicated by parameter Y<highlight><subscript>s</subscript></highlight>, and a horizontal line denoted by parameter Y<highlight><subscript>e</subscript></highlight>. One of the two coordinate systems can be specified for the drawing operation by the parameter D. </paragraph>
<paragraph id="P-0311" lvl="0"><number>&lsqb;0311&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 32</cross-reference> shows an operation example of an FPCRCL command. The FPCRCL command is used to paint out with a graphic form stored in the pattern area an internal area of a circle having a center at a point represented by parameters X<highlight><subscript>c </subscript></highlight>and Y<highlight><subscript>c </subscript></highlight>and a radius specified by parameter r, the internal area surrounded with horizontal lines denoted by parameters Y<highlight><subscript>s </subscript></highlight>and Y<highlight><subscript>e</subscript></highlight>, respectively. One of the two coordinate system can be specified for the drawing operation by the parameter D. </paragraph>
<paragraph id="P-0312" lvl="0"><number>&lsqb;0312&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 33</cross-reference> shows an operation example of an FEARC-LN command. The FEARC-LN command is used to paint out with a graphic form stored in the pattern area an area surrounded by four lines including an elliptic arc of a quarter of an ellipse having a center at a point specified by parameters X<highlight><subscript>c </subscript></highlight>and Y<highlight><subscript>c</subscript></highlight>, an X-axis radius indicated by paramter A, and a Y-axis radius represented by parameter B, the elliptic arc included in a zone specified by parameter Zone; a line between points respectively designated by parameters X<highlight><subscript>2 </subscript></highlight>and Y<highlight><subscript>2 </subscript></highlight>and horizontal lines indicated by parameters Y<highlight><subscript>s </subscript></highlight>and Y<highlight><subscript>e</subscript></highlight>, respectively. One of the two coordinate systems can be specified for the drawing operation by parameter D. </paragraph>
<paragraph id="P-0313" lvl="0"><number>&lsqb;0313&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> shows an operation example of an FPELS command. The FPELS command is used to draw with a graphic form stored in the pattern area an area in an ellipse having a center indicated by parameters X<highlight><subscript>c </subscript></highlight>and Y<highlight><subscript>c</subscript></highlight>, an X-axis radius specified by parameter A, and a Y-axis radius denoted by parameter B, the area surrounded with horizontal lines designated by parameters Y<highlight><subscript>s </subscript></highlight>and Y<highlight><subscript>e</subscript></highlight>, respectively. One of the two coordinate system can be specified for the drawing operation by parameter D. </paragraph>
<paragraph id="P-0314" lvl="0"><number>&lsqb;0314&rsqb;</number> When the five commands including FTRAP, FARC-LN, FPCRCL, FEARC-LN, and FPELPS are used in combination, a graphic form constituted with arbitrary lines, arcs, and/or elliptic arcs can be painted out with a graphic pattern. </paragraph>
<paragraph id="P-0315" lvl="0"><number>&lsqb;0315&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 35</cross-reference> shows an operation example of a TEXT command. The TEXT command is used in a system where a portion of the frame buffer <highlight><bold>14</bold></highlight> is assigned as a character font region to expand character font data associated with an input command code at a location indicated by parameters X and Y in a display area of the frame buffer <highlight><bold>14</bold></highlight>. For this command, the following internal registers of the graphic display processor (GDP) <highlight><bold>10</bold></highlight> must be set in advance, namely the registers FSAH and FSAL to set the start address of the font area, the register FAMW to set the memory width of the font area, the registers FSX and FSY to set the actual character width for the expansion, the register FBN to set the total bit count of a character, the register DX to set the character interval in the X direction, and the register DY to set the character interval in the Y direction. Thereafter, the central processing unit (CPU) <highlight><bold>11</bold></highlight>, following this command with the coordinate values X and Y for the development, sequentially transfers n characters of character codes CN subsequent to the parameter n set with the number of characters to be developed. The graphic display processor (GDP) <highlight><bold>10</bold></highlight> then calculates the address of each character font to develop the character font. </paragraph>
<paragraph id="P-0316" lvl="0"><number>&lsqb;0316&rsqb;</number> Furthermore, when a particular bit of the command code is specified, this command can change the expand size for each character. <cross-reference target="DRAWINGS">FIG. 36</cross-reference> shows an operation example of the TEXT command. In the frame buffer <highlight><bold>14</bold></highlight>, there is beforehand set a table in which a font table and a expand size of a character are specified. The table includes FSA indicating the number of bits in the left margin for each character in the X direction and FSB designating the number of bits from the left end to the right end of the character. The difference from the operation of the character expansion method described above is that the expand size in the X direction is not specified by the parameter FSX, namely, the size is represented as X-directional develop size&equals;FSB&minus;FSA. </paragraph>
<paragraph id="P-0317" lvl="0"><number>&lsqb;0317&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 37</cross-reference> shows an example of the color expansion with a TEXT command, namely, a method to convert font data including binary data into color data comprising multivalue information. The color register <highlight><bold>0</bold></highlight> which is one of the internal registers of the graphic display processor (GDP) <highlight><bold>10</bold></highlight> is loaded with color data associated with 0 of the font data, whereas the color register <highlight><bold>1</bold></highlight> is loaded with color data corresponding to 1 of the font data. The graphic display processor (GDP) <highlight><bold>10</bold></highlight> sequentially searches the font data read to write color data corresponding thereto in the frame buffer <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0318" lvl="0"><number>&lsqb;0318&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 38</cross-reference> shows an operation example of a CHR command. The CHR command is used in a system where a portion of the frame buffer <highlight><bold>14</bold></highlight> is assigned as a character font area to expand character font data corresponding to an input command code at a location indicated by parameters X and Y in the display area of the frame buffer <highlight><bold>14</bold></highlight>. Rotation of a character can be specified in 90&deg; units by parameter SD. The following internal registers of the graphic display processor (GDP) <highlight><bold>10</bold></highlight> must be set in advance, namely, the registers FSAH and FSAL to set the start address of the font area, the register FAMW to set the memory width of the font area, the registers FSX and FSY to set the actual character width for the expansion, the register FBN to set the total bit count per character, the registers ZX and ZY to set the numbers of dots for the size of the actual character to be expanded in the frame buffer <highlight><bold>14</bold></highlight>, and the register XX to set the number of dots for the slant of the character. Whether the character is to be inclined to the right or to the left is specified by the sign of XX. The central processing unit (CPU) <highlight><bold>11</bold></highlight> thereafter transfers, following the command and the coordinate values X and Y for the expansion, character codes CN to be expanded. The graphic display processor (GDP) <highlight><bold>10</bold></highlight> in turn calculates the address of each character font to expand the font. Color expansion of a CHR command can be effected in the same fashion as the color expansion, for example, of the TEXT command. </paragraph>
<paragraph id="P-0319" lvl="0"><number>&lsqb;0319&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 39</cross-reference> shows an operation example of an MCOPY command. When the MCOPY command is executed, a logic operation is first achieved between data stored in the pattern area and data of a rectangular area having sides parallel to the respective coordinate axes and two diagonal points in the frame buffer <highlight><bold>14</bold></highlight>, one of the diagonal points indicated by parameters X<highlight><subscript>s </subscript></highlight>and Y<highlight><subscript>s </subscript></highlight>and the other one of the diagonal points represented by parameters L<highlight><subscript>x </subscript></highlight>and L<highlight><subscript>y</subscript></highlight>. Thereafter, while achieving a logical operation with data in a rectangular area having sides parallel to the respective coordinate axes and a start point specified by an absolute coordinate position represented by parameters X<highlight><subscript>d </subscript></highlight>and Y<highlight><subscript>d </subscript></highlight>with respect to the origin, the resultant data is transferred to the rectangular area. <cross-reference target="DRAWINGS">FIG. 40</cross-reference> shows scan directions of a transfer source area of an MCOPY command. The direction to scan the transfer source area is specified by the signs of parameters LX and LY and the parameter S. <cross-reference target="DRAWINGS">FIG. 41</cross-reference> shows scan directions of a transfer destination area of an MCOPY command. The scanning direction of the transfer destination area is designated by the parameter DSD. One of the two coordinate systems can be specified for the transfer destination by the parameter D. The coordinate system specified for the transfer source by the parameter S<highlight><subscript>o </subscript></highlight>may be the same as or different from that of the transfer destination. </paragraph>
<paragraph id="P-0320" lvl="0"><number>&lsqb;0320&rsqb;</number> The graphic display processor <highlight><bold>10</bold></highlight> of the embodiment described above can process the command system having sophisticated functions as described above, which enables to greatly reduce the processing load imposed on the central processing unit (CPU) <highlight><bold>11</bold></highlight>. As a result, a high-performance graphic display apparatus can be implemented. Furthermore, when the graphic display processor <highlight><bold>10</bold></highlight> is provided in the form of an LSI, the cost of the graphic processing apparatus can also be minimized. </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 42</cross-reference> shows another embodiment of the present invention which includes a graphic display processor (GDP) <highlight><bold>10</bold></highlight>, a memory control circuit <highlight><bold>11</bold></highlight>A, and a memory <highlight><bold>12</bold></highlight>. The GDP <highlight><bold>10</bold></highlight> receives a command and a parameter transferred from a CPU (not shown) and effects necessary controls for a graphic generation and a display on a CRT. The GDP <highlight><bold>10</bold></highlight> internally has a drawing processor <highlight><bold>100</bold></highlight> and a display processor <highlight><bold>101</bold></highlight>. The drawing processor <highlight><bold>100</bold></highlight> interprets a command, executes various graphic processing algorithms, generates an address to read or write a memory, and effects an arithmetic processing of graphic data. The display processor <highlight><bold>101</bold></highlight> generates a memory read address in synchronism with a raster scan of a CRT (not shown). Another output device, for example, a printer connected as an output device also achieves the similar operation. The memory control circuit <highlight><bold>11</bold></highlight>A includes a timing generation circuit <highlight><bold>110</bold></highlight>, an address generate circuit <highlight><bold>111</bold></highlight>, a data buffer <highlight><bold>112</bold></highlight>, and a video control circuit <highlight><bold>113</bold></highlight>. The timing generation circuit <highlight><bold>110</bold></highlight> generates timing signals ({overscore (RAS)}, {overscore (CAS)}, {overscore (OE)}, {overscore (WE<highlight><bold>0</bold></highlight>-WE<highlight><bold>7</bold></highlight>)}) necessary to access the memory <highlight><bold>12</bold></highlight> based on bus status signals (FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>) and pixel address signals (PA<highlight><bold>0</bold></highlight>-PA<highlight><bold>1</bold></highlight>) supplied from the GDP <highlight><bold>10</bold></highlight> and other control signals. The address generation circuit <highlight><bold>111</bold></highlight> generates, from an address from the GDP <highlight><bold>10</bold></highlight>, a multiplexer address necessary to control the dynamic memory <highlight><bold>12</bold></highlight>. The data buffer <highlight><bold>112</bold></highlight> is provided to buffer a data transfer between the GDP <highlight><bold>10</bold></highlight> and the memory <highlight><bold>12</bold></highlight>. The video control circuit <highlight><bold>113</bold></highlight> receives display data read from the memory <highlight><bold>12</bold></highlight> and generates video signals required for the CRT, a printer, or the like. Although the memory <highlight><bold>12</bold></highlight> of this embodiment comprises eight dynamic memory chips <highlight><bold>120</bold></highlight>-<highlight><bold>127</bold></highlight>, the configuration may be easily expanded for another memory element (such as a static RAM) and for the case where a greater number of memories are used. Control signals different from those of the present embodiment may also be necessary in such cases; however, the configuration is naturally applicable like in the case of this embodiment. </paragraph>
<paragraph id="P-0322" lvl="0"><number>&lsqb;0322&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 43A</cross-reference> shows an example of a logical array of the memory <highlight><bold>12</bold></highlight>, whereas <cross-reference target="DRAWINGS">FIG. 43B</cross-reference> is an example of a configuration of a memory word. The memory is constituted with the lower address on the upper-left corner and the upper address on the lower-right corner in the two-dimensional structure. This embodiment is an example of a 4 bits/pixel configuration in which four bits are allocated to each pixel and is applicable to a 16-color display or a multitone display with 16 tone levels. A memory word comprises, for example, 32 bits; however, the memory addresses are assigned in the 16-bit units. Data of horizontally successive eight pixels are assigned to a word. In <cross-reference target="DRAWINGS">FIG. 42</cross-reference>, each of the memory elements <highlight><bold>120</bold></highlight>-<highlight><bold>127</bold></highlight> corresponds to four bits of a word. Conventionally, a read operation and a write operation are simultaneously accomplished on a memory word; however, in this embodiment, the different write control signals ({overscore (WE<highlight><bold>0</bold></highlight>)}-{overscore (WE<highlight><bold>7</bold></highlight>)}) are supplied for each memory element so as to enable a write operation for each pixel. Namely, in the case where the bus status signal (FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>) specifies a write operation for each pixel, the pixel address (PA<highlight><bold>0</bold></highlight>-<highlight><bold>1</bold></highlight>) and the memory address (MA<highlight><bold>0</bold></highlight>) are decoded to generate the signals {overscore (WE<highlight><bold>0</bold></highlight>)}-{overscore (WE<highlight><bold>7</bold></highlight>)}. </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 44</cross-reference>, description will be given of an example of the bus status signal (FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight>) delivered from the GDP <highlight><bold>10</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 44</cross-reference>, there are 16 states (including three undefined states) of access status of the memory (frame buffer) bus. FBS&equals;&ldquo;0000&rdquo; indicates that no action is taken on the frame bus. The memory write operation can be achieved in three different units, namely, in a unit of 32 bits (FBS&equals;&ldquo;0111&rdquo;), 16 bits (FBS&equals;&ldquo;0101&rdquo;), and a pixel (FBS&equals;&ldquo;0001&rdquo;). The memory control circuit <highlight><bold>11</bold></highlight>A decodes the status signal to output a &ldquo;Low&rdquo; level signal to all of {overscore (WE<highlight><bold>0</bold></highlight>)}<highlight><bold>2</bold></highlight>-{overscore (WE<highlight><bold>7</bold></highlight>)} in the case of a write operation of the 32-bit unit so as to instruct a write operation in all of the memory chips <highlight><bold>120</bold></highlight>-<highlight><bold>127</bold></highlight>. In a write operation in the 16-bit unit, the upper or lower 16 bits are specified by the MA<highlight><bold>0</bold></highlight> signal so as to activate {overscore (WE<highlight><bold>0</bold></highlight>)}-{overscore (WE<highlight><bold>3</bold></highlight>)} or {overscore (WE<highlight><bold>4</bold></highlight>)}-{overscore (<highlight><bold>7</bold></highlight>)}. Futhermore, in a pixel-unit write operation, one of {overscore (WE<highlight><bold>0</bold></highlight>)}-{overscore (WE<highlight><bold>7</bold></highlight>)} is set to be active by use of a pixel address (PA<highlight><bold>0</bold></highlight>-PA<highlight><bold>1</bold></highlight>) and a bit (MA<highlight><bold>0</bold></highlight>) of the memory address. </paragraph>
<paragraph id="P-0324" lvl="0"><number>&lsqb;0324&rsqb;</number> The terminals of the GDP <highlight><bold>10</bold></highlight> may be configured in the same fashion as those of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The CPU bus control terminal delivers control signals controlling a data bus connected to the CPU bus. The DMA control terminal handles control signals associated with the direct memory access controller (DMAC). The bus switch control signal is a group of signals controlling an externally connected bus switch in an application where the CPU bus is connected to the frame buffer bus. The FB bus control signal is used to control the frame buffer bus. The display control signal includes signal inputs and outputs required when a video control and a synchronization control are effected. The system is provided with an input clock system and three output clock systems. Incidentally, for the address bus (MA<highlight><bold>0</bold></highlight>-MA<highlight><bold>27</bold></highlight>) for the frame buffer, the memory address output and the pixel address output are multiplexed according to the operation mode. </paragraph>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 45</cross-reference> is a schematic diagram showing multiplexed outputs of the memory address. Since the memory address is assigned in the unit of 16 bits, these terminals are used to output memory addressed for the 32 bits/pixel and 16 bits/pixel operation. To the contrast, a 1-bit pixel address is outputted to the MA<highlight><bold>26</bold></highlight> terminal in the 8 bits/pixel operation. In the case of a pixel comprising 4 bits, 2 bits, or 1 bit, respectively, an address signal including 2, 3, or 4 bits is outputted to terminals MA<highlight><bold>25</bold></highlight>-MA<highlight><bold>26</bold></highlight>, MA<highlight><bold>24</bold></highlight>-MA<highlight><bold>26</bold></highlight>, or MA<highlight><bold>23</bold></highlight>-MA<highlight><bold>26</bold></highlight>, respectively. The MA<highlight><bold>27</bold></highlight> output is used as a change-over signal to change over between the address space of the CPU and the address space of the system memory and is to be outputted in any cases. Due to the provision of the multiplexing operation, as the number of bits per pixel decreases, the maximum memory space is reduced; however, the size of the available screen range becomes to be fixed, which is favorable for the practice. </paragraph>
<paragraph id="P-0326" lvl="0"><number>&lsqb;0326&rsqb;</number> Among the primary commands to be processed by the GDP <highlight><bold>10</bold></highlight>, the line drawing commands, CHR, ZOOM, and ROT each effect a memory access in the pixel unit. Furthermore, among the command processing modes including the replacement mode, the logic operation mode, the arithmetic operation mode, and the conditional replacement mode, a data operation is necessary in other than the replacement mode, namely, in cases of pixel-unit operation and word-unit operation, two memory accesses are required for a read operand and a write operation. On the other hand, the operation in the replacement mode can be executed only by use of a write cycle, and hence the processing speed can be increased. </paragraph>
<paragraph id="P-0327" lvl="0"><number>&lsqb;0327&rsqb;</number> FIGS. <highlight><bold>49</bold></highlight>A-<highlight><bold>49</bold></highlight>B are timing charts of memory read and write operations, respectively. </paragraph>
<paragraph id="P-0328" lvl="0"><number>&lsqb;0328&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 49A</cross-reference> shows the case of the conventional update processing of a pixel where two cycles of the general read and write operations are used. MCYC is a clock signal (not shown in <cross-reference target="DRAWINGS">FIG. 42</cross-reference>) indicating the period for each memory cycle. FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight> are coded signals representing a bus status (refer to <cross-reference target="DRAWINGS">FIG. 44</cross-reference>), MA<highlight><bold>0</bold></highlight>-<highlight><bold>27</bold></highlight> stand for address outputs, and D<highlight><bold>0</bold></highlight>-<highlight><bold>31</bold></highlight> are data input/output terminals. In order to update data of a pixel, a word including pixel data to be processed is read from the memory in the first memory cycle. In the second memory cycle, for the data thus read, a specified operation is accomplished at a specified pixel location in the GDP and the result is written again in the memory. Namely, two cycles are used to effect a data update processing of a pixel. <cross-reference target="DRAWINGS">FIG. 49B</cross-reference> shows a write cycle to effect a pixel-unit write operation. In this case, FBS<highlight><bold>0</bold></highlight>-<highlight><bold>3</bold></highlight> indicates a pixel-unit write cycle and the MA terminal outputs information (PA) specifying a pixel. These signals are decoded by a device externally disposed with respect to the GDP <highlight><bold>10</bold></highlight> so as to generate write signals for the pixel-unit write operation. As a consequence, a write operation of a pixel can be achieved in a memory cycle, and hence a higher processing speed can be developed as compared with the case associated with the method of <cross-reference target="DRAWINGS">FIG. 49A</cross-reference>. </paragraph>
<paragraph id="P-0329" lvl="0"><number>&lsqb;0329&rsqb;</number> The drawing mode register in the GDP <highlight><bold>10</bold></highlight> may also be configured in the similar fashion to that of the embodiment described above. The drawing mode register comprises 32 bits to specify one of various operation modes in a drawing operation and is mapped as one of the parameter registers so as to be externally rewritten and read out by use of the WPR and PPR commands, respectively. These bits are allocated to specify the operation mode, the color compare mode, the binary value generate mode, the color mode, the logic pel mode, the character area mode, the drawing area mode, and the pick mode. Since the operation modes concerning the present embodiment need only be implemented as described in conjunction with <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, the detailed description thereabout will be omitted. </paragraph>
<paragraph id="P-0330" lvl="0"><number>&lsqb;0330&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows the contents of the five bits specified as an operation mode. The system allows to specify 16 kinds of logic operations and four kinds of arithmetic operations. In this diagram, S indicates drawing data (transfer source data for a command associated with a text and image transfer), D stands for memory data in the write destination, and D&prime; represents write data. For example, when OPM&equals;00001 is specified as an operation mode, a logical product is obtained between the drawing data and the memory data in the write destination and a write operation is achieved. For a specification of OPM&equals;00011, only a write operation of the drawing data is accomplished, namely, the substitution (replacement) mode is effected. The column on the right end of each part of the diagram related to assignment of a cycle dedicated to a write operation indicates whether or not the operation is executed in the pixel-unit write cycle when the write dedication mode is specified. Since an operation mode which requires the write destination memory data (D) for the operation necessitates the memory data in any case, the update of the pixel data is achieved by use of two memory cycles for the read and write operations regardless of the specification of the write dedication mode. In contrast, when the write dedication mode is specified in such an operation mode not requiring the write destination memory data (D) as D&prime;&equals;0, D&prime;&equals;S, D&prime;&equals;NOT(S), or D&prime;&equals;1, the pixel-unit write cycle is effected. </paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> As described above, according to the embodiment, the pixel-unit access necessitates only a write cycle in the substitution mode, which leads to an effect that the operation speed is increased. </paragraph>
<paragraph id="P-0332" lvl="0"><number>&lsqb;0332&rsqb;</number> Next, another embodiment of the present invention will be described. <cross-reference target="DRAWINGS">FIG. 46</cross-reference> shows another embodiment of the present invention including a GDP&prime;<highlight><bold>20</bold></highlight> which is so designed to output pixel mask information (MS<highlight><bold>0</bold></highlight>-<highlight><bold>7</bold></highlight>) in place of a pixel address. Namely, pixel mask information indicates pixel positions to be drawn in the eight pixels (32 bits in the case of the 4 bits/pixel configuration). Depending on pixel mask information, the control circuit <highlight><bold>21</bold></highlight> can control {overscore (WE<highlight><bold>0</bold></highlight>)}-{overscore (WE<highlight><bold>7</bold></highlight>)}, which therefore enables to achieve a write operation in a plurality of arbitrary pixels of a word. Although this embodiment is associated with the 4 bits/pixel configuration, if a pixel is desired to be constituted from at least eight bits, it is only necessary to use bits in a portion of pixel mask information. Furthermore, when pixel mask information includes 32 bits, this mask configuration is naturally applicable to the 1 bit/pixel and 2 bits/pixel operations. According to the embodiment, as described above, a write operation of a plurality of bits is enabled in a word, which further increases the processing speed. </paragraph>
<paragraph id="P-0333" lvl="0"><number>&lsqb;0333&rsqb;</number> FIGS. <highlight><bold>47</bold></highlight>A-<highlight><bold>47</bold></highlight>B are explanatory diagrams useful to explain two kinds of drawing operations and respectively, show an example of drawing in an arbitrary direction (vector drawing operation) and an example of a drawing in the raster direction. The vector drawing operation is related to the case where the drawing point is sequentially moved to an arbitrary direction so as to effect line drawing operations to generate a direct line in an arbitrary direction, an arc, an elliptic arc, and an arbitrary curve. Namely, the vector drawing is achieved in principle through a pixel-unit processing, namely, the pixel-unit write operation according to the present invention is applicable thereto. On the other hand, in the raster-directional drawing operation, the drawing is effected in the horizontal direction along which the pixels are arranged, and hence this drawing operation is applied to plane drawing operations, for example, to draw a line in the horizontal direction, to paint out an area, and to copy data of an area. The raster-directional drawing enables the word-unit write operation in any areas excepting the marginal regions on the right and left ends. Although the boundary of the drawing operation does not necessarily match the boundary of a word in such marginal regions, if the embodiment of <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is applied to this case, the drawing operation can also be effected by use of the write cycle. Also in the case of the vector drawing, a plurality of horizontally successive pixels are located in a word. In this case, the drawing can also be achieved only by use of the write cycle if the embodiment of <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is applied thereto. </paragraph>
<paragraph id="P-0334" lvl="0"><number>&lsqb;0334&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 48</cross-reference> is a schematic diagram showing further another embodiment of the present invention in which an automatic detection is effected to detect the case where a plurality of successive pixels are contained in a word so as to achieve a write operation of a plurality of pixels of a word through a single operation. A drawing processor (GDP) <highlight><bold>30</bold></highlight> includes therein drawing control means <highlight><bold>31</bold></highlight>, an address buffer <highlight><bold>32</bold></highlight>, a data buffer <highlight><bold>33</bold></highlight>, an agreement detect circuit <highlight><bold>34</bold></highlight>, a mask generate circuit <highlight><bold>35</bold></highlight>, and an access request control circuit <highlight><bold>36</bold></highlight>. The drawing control means <highlight><bold>31</bold></highlight> sequentially calculates the drawing pixel position according to a predetermined algorithm so as to accomplish an operation on the drawing data. The address buffer <highlight><bold>32</bold></highlight> is provided to temporarily store memory address information outputted from the drawing control means <highlight><bold>31</bold></highlight>. The data buffer <highlight><bold>33</bold></highlight> is used to buffer a data transfer between the drawing control means <highlight><bold>31</bold></highlight> and the memory. The agreement detect circuit <highlight><bold>34</bold></highlight> compares an address stored in the address buffer <highlight><bold>32</bold></highlight> for the present processing with a memory address outputted from the drawing control means <highlight><bold>31</bold></highlight> for the next processing so as to determine an agreement therebetween, thereby outputting a signal indicating whether or not the memory addresses coincide with each other. The mask generate circuit <highlight><bold>35</bold></highlight> decodes a pixel address supplied from the drawing control means <highlight><bold>31</bold></highlight> to generate pixel mask information and is controlled by an output from the agreement detect circuit <highlight><bold>34</bold></highlight>. While the agreement is being detected therebetween, the mask generate circuit <highlight><bold>35</bold></highlight> operates to set only the bits corresponding to the pixel positions for the next processing in the previous pixel mask information. If the memory addresses are different from each other, the previous pixel mask information is delivered to an external device, and then the mask generate circuit <highlight><bold>35</bold></highlight> operates to clear mask information and to set therein only the bits associated with the subsequent drawing positions. The access request control circuit <highlight><bold>36</bold></highlight> outputting an access request signal to the memory does not achieve a memory write operation while an agreement is being detected for the memory address of the processing address. The access request signal is generated for a write operation when a memory address different from the previous memory address is specified. Namely, the memory write operation is not effected while the processing of pixels in a word is being continuously effected; whereas when the objective memory address is changed, a write processing is achieved for the previous memory address. Consequently, for example, like in the case where a straight line in an arbitrary direction is to be generated, when a pixel-unit processing is accomplished, if the pixels to be processed are horizontally successive in a word, the processing can be executed only through a memory write operation. According to the embodiment, as described above, also in the case where operations are achieved in accordance with a pixel-unit processing algorithm, a write operation of a plurality of pixels in a word can be accomplished through a memory access. As a result, there arises an advantageous effect that the number of memory accesses can be reduced. </paragraph>
<paragraph id="P-0335" lvl="0"><number>&lsqb;0335&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 50</cross-reference> is a block diagram schematically showing a graphic processing apparatus according to the present invention. </paragraph>
<paragraph id="P-0336" lvl="0"><number>&lsqb;0336&rsqb;</number> The graphic processing apparatus of <cross-reference target="DRAWINGS">FIG. 50</cross-reference> mainly includes a logical address execution unit <highlight><bold>310</bold></highlight> to effect an operation of a drawing coordinate point in the form of X and Y coordinate values, a physical address execution unit <highlight><bold>320</bold></highlight> to calculate a memory address corresponding to the coordinate values, and a color data execution unit <highlight><bold>330</bold></highlight> to effect an operation on drawing data. </paragraph>
<paragraph id="P-0337" lvl="0"><number>&lsqb;0337&rsqb;</number> The logical address execution unit <highlight><bold>310</bold></highlight> performs an operation primarily based on a drawing algorithm to determine a drawing point on a screen and comprises a logical microprogram ROM <highlight><bold>210</bold></highlight>, a logical microinstruction register <highlight><bold>260</bold></highlight>, a logical microinstruction decoder <highlight><bold>270</bold></highlight>, a logical microprogram ROM address register (LRAR) <highlight><bold>220</bold></highlight>, an address incrementer (INC) <highlight><bold>230</bold></highlight>, a stack <highlight><bold>240</bold></highlight>, an instruction register <highlight><bold>250</bold></highlight>, a multijump control (MJC) <highlight><bold>180</bold></highlight>, a break point register.(BPR) <highlight><bold>160</bold></highlight>, and an agreement (coincidence) detect circuit <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0338" lvl="0"><number>&lsqb;0338&rsqb;</number> The physical address execution unit <highlight><bold>320</bold></highlight> and the color data execution unit <highlight><bold>330</bold></highlight> are controlled by a physical microprogram ROM <highlight><bold>100</bold></highlight>A and include a physical microinstruction register <highlight><bold>120</bold></highlight>A, a physical microinstruction decoder <highlight><bold>130</bold></highlight>, a physical microprogram ROM address register <highlight><bold>110</bold></highlight>A, and a wait control <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0339" lvl="0"><number>&lsqb;0339&rsqb;</number> The configuration further includes an intermediate buffer <highlight><bold>170</bold></highlight> for transfer data between the logical address execution unit <highlight><bold>310</bold></highlight> and the physical address execution unit <highlight><bold>320</bold></highlight> and an internal RAM <highlight><bold>340</bold></highlight> for storing operation parameters, line kind information, and pattern information for a paint out operation. </paragraph>
<paragraph id="P-0340" lvl="0"><number>&lsqb;0340&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 51</cross-reference> is a schematic diagram showing in detail the logical address execution unit <highlight><bold>310</bold></highlight>, which comprises an FIFO buffer <highlight><bold>3101</bold></highlight>, a multijump register (MJR) <highlight><bold>3100</bold></highlight>, a group of general-purpose registers (TROX, TROY, TRLX, TRLY, TR<highlight><bold>2</bold></highlight>X, TR<highlight><bold>2</bold></highlight>Y, TR<highlight><bold>3</bold></highlight>X, and TR<highlight><bold>3</bold></highlight>Y), a drawing coordinate current pointer including CPDX <highlight><bold>3103</bold></highlight> and CPDY <highlight><bold>3104</bold></highlight> indicating the respective drawing coordinate values, a transfer source coordinate current pointer including CPSX <highlight><bold>3105</bold></highlight> and CPSY <highlight><bold>3106</bold></highlight> indicating the respective transfer source coordinate values, area control registers XMIN <highlight><bold>3107</bold></highlight>, YMIN <highlight><bold>3108</bold></highlight>, XMAX <highlight><bold>3111</bold></highlight>, and YMAX <highlight><bold>3112</bold></highlight>; an area judge comparator including ACMPN <highlight><bold>3109</bold></highlight> and ACMPX <highlight><bold>3110</bold></highlight>, an end point register including XEND <highlight><bold>3113</bold></highlight> and YEND <highlight><bold>3114</bold></highlight>, an end point comparator ECMP <highlight><bold>3115</bold></highlight>, a source latch section including source latches (SFT, HEXSFT, and SLAV) <highlight><bold>3117</bold></highlight> and SLAU <highlight><bold>3116</bold></highlight>, a destination latch DLA <highlight><bold>3119</bold></highlight>, a constant generator LITERAL <highlight><bold>3123</bold></highlight>, a read bus section including UBA <highlight><bold>3120</bold></highlight> and VBA <highlight><bold>3121</bold></highlight>, and a write bus <highlight><bold>3122</bold></highlight>. </paragraph>
<paragraph id="P-0341" lvl="0"><number>&lsqb;0341&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 52</cross-reference> is a schematic diagram showing in detail the intermediate buffer <highlight><bold>170</bold></highlight> and the physical address execution unit <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0342" lvl="0"><number>&lsqb;0342&rsqb;</number> There are provided an internal RAM buffer RBUF <highlight><bold>3204</bold></highlight>, a group of general-purpose registers TDRO <highlight><bold>3205</bold></highlight>, TDR<highlight><bold>1</bold></highlight> <highlight><bold>3206</bold></highlight>, TDR<highlight><bold>2</bold></highlight> <highlight><bold>3207</bold></highlight>, and TDR<highlight><bold>3</bold></highlight> <highlight><bold>3208</bold></highlight>; a register DRAD <highlight><bold>3212</bold></highlight> to store a memory address in the drawing coordinate system, a register DRAS <highlight><bold>3213</bold></highlight> to store a memory address in the transfer source coordinate system, a register PTNA to store a memory address of the pattern coordinate system of a pattern storing a graphic form to paint out a graphic image, a register PLA <highlight><bold>3215</bold></highlight> to indicate a pel area for a bold-line drawing operation, general purpose registers TA<highlight><bold>0</bold></highlight> <highlight><bold>3216</bold></highlight> and TA<highlight><bold>1</bold></highlight> <highlight><bold>3217</bold></highlight>, a register CMWD to store a memory width of the drawing coordinate system, a register CMWS <highlight><bold>3219</bold></highlight> to store a memory width of the transfer source coordinate system, a register PMW <highlight><bold>3220</bold></highlight> to store a memory width of the pattern coordinate system, pattern control registers PS <highlight><bold>3221</bold></highlight>, PE <highlight><bold>3222</bold></highlight>, and PP <highlight><bold>3223</bold></highlight>, a pattern pointer counter PCNT <highlight><bold>3224</bold></highlight> to update a pattern pointer PP <highlight><bold>3223</bold></highlight>, source latches SLBU <highlight><bold>3225</bold></highlight> and SLBV <highlight><bold>3226</bold></highlight>, an arithmetic unit AU <highlight><bold>3227</bold></highlight>, a barrel shifter BRLSFT <highlight><bold>3228</bold></highlight>, a data expander DE <highlight><bold>3229</bold></highlight>, a multiplexer MPX <highlight><bold>3230</bold></highlight>, a destination latch BLB <highlight><bold>3231</bold></highlight>, read buses UBB <highlight><bold>3232</bold></highlight>, VBB <highlight><bold>3233</bold></highlight>, UBC <highlight><bold>3235</bold></highlight>, and VBC <highlight><bold>3236</bold></highlight>; write buses WBB <highlight><bold>3234</bold></highlight> and WBC <highlight><bold>3237</bold></highlight>, and bus switches <highlight><bold>3201</bold></highlight>, <highlight><bold>3202</bold></highlight>, <highlight><bold>3203</bold></highlight>, <highlight><bold>3209</bold></highlight>, <highlight><bold>3210</bold></highlight>, and <highlight><bold>3211</bold></highlight>. </paragraph>
<paragraph id="P-0343" lvl="0"><number>&lsqb;0343&rsqb;</number> FIGS. <highlight><bold>53</bold></highlight>-<highlight><bold>54</bold></highlight> are schematic diagrams showing in detail the color data execution unit <highlight><bold>330</bold></highlight>, which includes a multiplexer <highlight><bold>3304</bold></highlight>, color registers CL<highlight><bold>0</bold></highlight> <highlight><bold>3305</bold></highlight> and CL<highlight><bold>1</bold></highlight> <highlight><bold>3306</bold></highlight>, a color compare register CLCMP <highlight><bold>3307</bold></highlight>, an edge color register EDG <highlight><bold>3308</bold></highlight>, a drawing mode register DM <highlight><bold>3309</bold></highlight>, mask registers GMASK <highlight><bold>3311</bold></highlight>, SMASK <highlight><bold>3312</bold></highlight>, EMASK <highlight><bold>3313</bold></highlight>, TMASK <highlight><bold>3314</bold></highlight>, WMASK <highlight><bold>3315</bold></highlight>, and RMASK <highlight><bold>3316</bold></highlight>, a color comparator <highlight><bold>3317</bold></highlight>, a zero flag expander ZE <highlight><bold>3318</bold></highlight>, a carrier flag expander CMPMSEL <highlight><bold>3320</bold></highlight>, a destination latch (DLC) <highlight><bold>3321</bold></highlight>, an arithmetic logic unit ALU <highlight><bold>3322</bold></highlight>, write data buffers WDBR(M) <highlight><bold>3223</bold></highlight> and WDBR(S) <highlight><bold>3224</bold></highlight>, a read data buffer RDBR <highlight><bold>3325</bold></highlight>, an internal RAM address define register IRAR <highlight><bold>3327</bold></highlight>, an agreement detector <highlight><bold>3328</bold></highlight>, a stack area define register SSDR <highlight><bold>3329</bold></highlight>, an agreement (or coincidence) detector <highlight><bold>3330</bold></highlight>, a stack first address register SSAR <highlight><bold>3331</bold></highlight>, memory address registers MAR(M) <highlight><bold>3332</bold></highlight> and MAR(S) <highlight><bold>3333</bold></highlight>, an agreement (coincidence) detector <highlight><bold>3334</bold></highlight>, a mask bus MSKB <highlight><bold>3310</bold></highlight>, a a color data bus CLB <highlight><bold>3301</bold></highlight>, a memory input/output bus <highlight><bold>3237</bold></highlight>, an address output bus <highlight><bold>3335</bold></highlight>, a memory address bus MAB <highlight><bold>3338</bold></highlight>, and an input/output buffer <highlight><bold>3336</bold></highlight>. </paragraph>
<paragraph id="P-0344" lvl="0"><number>&lsqb;0344&rsqb;</number> Next, description will be given of operations of the embodiment configured as described above. First, one of the features of the present invention, namely, a 2-level microprogram will be described. </paragraph>
<paragraph id="P-0345" lvl="0"><number>&lsqb;0345&rsqb;</number> In the configuration of <cross-reference target="DRAWINGS">FIG. 50</cross-reference>, an instruction code from an external device such as a central processing unit (not shown) is written via an FIFO buffer <highlight><bold>350</bold></highlight> in the instruction register <highlight><bold>250</bold></highlight> and is thereafter loaded in the LRAR <highlight><bold>220</bold></highlight> so as to read the logical microprogram ROM <highlight><bold>210</bold></highlight>. A logical microinstruction is then read according to an address set to the LRAR <highlight><bold>220</bold></highlight> and is stored in the logical microinstruction register <highlight><bold>260</bold></highlight>. The logical microinstruction is thereafter decoded by the logical microinstruction decoder <highlight><bold>270</bold></highlight> and the decoded result controls the logical address execution unit <highlight><bold>310</bold></highlight> to calculate a logical address. On the other hand, the value of the LRAR <highlight><bold>220</bold></highlight> is updated by the address incrementer INC <highlight><bold>230</bold></highlight> and then logical microinstructions are sequentially read depending on the updated value. Furthermore, when using a subroutine, a return address from the subroutine is beforehand set to the stack <highlight><bold>240</bold></highlight>. </paragraph>
<paragraph id="P-0346" lvl="0"><number>&lsqb;0346&rsqb;</number> On the other hand, in order to calculate a physical address corresponding a logical address, the logical microinstruction read the logical microprogram ROM <highlight><bold>100</bold></highlight>. The logical microinstruction controls the physical address execution unit <highlight><bold>320</bold></highlight> and the color data execution unit <highlight><bold>330</bold></highlight>. A portion of the logical microinstruction is loaded in the PRAR <highlight><bold>110</bold></highlight> so as to generate an address where a physical microinstruction is read. The physical microinstruction thus read according to the content of the PRAR <highlight><bold>110</bold></highlight> is loaded in the physical microinstruction register <highlight><bold>120</bold></highlight>. The physical microinstruction is thereafter decoded by the physical microinstruction decoder <highlight><bold>130</bold></highlight> so as to control the physical address execution unit <highlight><bold>320</bold></highlight>, thereby calculating a physical address and simultaneously reading data from the display memory based on the physical address. The color data execution unit <highlight><bold>330</bold></highlight> effects thereafter a color data operation and writes the resultant data in the display memory. </paragraph>
<paragraph id="P-0347" lvl="0"><number>&lsqb;0347&rsqb;</number> FIGS. <highlight><bold>55</bold></highlight>A-<highlight><bold>55</bold></highlight>B show a program example of a 2-level structure in which the microprogram is divided into a microprogram to effect a logical address operation and a microprogram to achieve a physical address operation. <cross-reference target="DRAWINGS">FIG. 55C</cross-reference> shows an example to draw a line (a&gt;b), which is implemented by a logical microprogram example of <cross-reference target="DRAWINGS">FIG. 55A and a</cross-reference> physical microprogram example of <cross-reference target="DRAWINGS">FIG. 55B</cross-reference>. As a feature of the present invention, the program flow of the <cross-reference target="DRAWINGS">FIG. 55A</cross-reference> includes only an algorithm to calculate the logical address, which enables to improve the describability or description capability of a microprogram and allows to delete a wrong description. When activated by a logical microprogram, the physical microprogram can independently proceed with the program sequence. During an execution of the physical microprogram, if an initiation request is further issued from a logical microprogram, the wait control section <highlight><bold>140</bold></highlight> supplies an operation stop signal (a wait signal) to the logical microprogram so as to keep the logical microprogram in the wait state until the physical microprogram stops the operation thereof. </paragraph>
<paragraph id="P-0348" lvl="0"><number>&lsqb;0348&rsqb;</number> Furthermore, as another feature of the present invention, the physical microprogram includes many description items not depending on the drawing algorithm, and hence the description, for example, of <cross-reference target="DRAWINGS">FIG. 55B</cross-reference> is applicable not only to a drawing of a straight line but also to a drawing of a circle and an ellipse. Consequently, as compared with a method proposed by the JP-A-61-130991 (Japanese Patent Application No. 59-251907) in which a logical microprogram and a physical microprogram are described in a microprogram, the method of the present embodiment can substantially reduce the microprogram capacity. </paragraph>
<paragraph id="P-0349" lvl="0"><number>&lsqb;0349&rsqb;</number> Next, another feature of the present invention, namely, the multijump control will be described. </paragraph>
<paragraph id="P-0350" lvl="0"><number>&lsqb;0350&rsqb;</number> In the logical microprogram ROM <highlight><bold>210</bold></highlight> including a description of a drawing algorithm, there exist some cases where a multiple branch or multijump must be accomplished depending on the difference of the parameters. In such a case, as compared with a processing in which a two-destination branch is effected a plurality of times, the processing of this method enabling branches to multiple destinations can develop a higher processing speed. Next, a description will be given of a method of the multijump processing adopted by this embodiment. </paragraph>
<paragraph id="P-0351" lvl="0"><number>&lsqb;0351&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 56</cross-reference> shows a processing flow of a multijump operation according to the method in which the number of jump destinations is first determined. A feature of this method resides in that the number of jump destinations can be set in the 2<highlight><superscript>n </superscript></highlight>units and that the interval between the jump destination addresses can be changed. For example, in the case of four jump destinations, the address interval therebetween can be set to a value in a step of 2<highlight><superscript>n </superscript></highlight>ranging from 4 to 512. By changing the address interval between the jump destinations depending on the volume of a program of each jump destination, the address space can be effectively utilized. </paragraph>
<paragraph id="P-0352" lvl="0"><number>&lsqb;0352&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 57 and 58</cross-reference>A-<highlight><bold>58</bold></highlight>B are explanatory diagrams useful to explain the method above. The number of jumps is set to a multijump control register <highlight><bold>1801</bold></highlight> provided in the multijump control circuit <highlight><bold>180</bold></highlight>. Information of the jump is set to a multijump register MJR <highlight><bold>3100</bold></highlight>. Thereafter, when the logical microprogram sets a jump address to the LRAR <highlight><bold>220</bold></highlight>, only for the bits of the multijump control register <highlight><bold>1801</bold></highlight> to which &ldquo;1&rdquo; is beforehand set, the data of the multijump register MJR <highlight><bold>3100</bold></highlight> is loaded in the LRAR <highlight><bold>220</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 58</cross-reference>A, two bits of the MJR <highlight><bold>3100</bold></highlight> are set to bit <highlight><bold>2</bold></highlight> and bit <highlight><bold>3</bold></highlight> of the LRAR <highlight><bold>220</bold></highlight> for a jump with four destinations. <cross-reference target="DRAWINGS">FIG. 58B</cross-reference> shows a jump with 16 jump destinations. After the jump address is set to the LRAR <highlight><bold>220</bold></highlight>, the set signal undergoes a timing adjustment in a shift register <highlight><bold>1802</bold></highlight> to reset the multijump control register <highlight><bold>1801</bold></highlight>. This enables, when setting the next jump address to the LRAR <highlight><bold>220</bold></highlight>, the jump address from the microinstruction to be set for all bits, thereby achieving an unconditional jump in an ordinary fashion. </paragraph>
<paragraph id="P-0353" lvl="0"><number>&lsqb;0353&rsqb;</number> Next, description will be given of a method to stop a microprogram by setting a break point which efficient means to achieve a debug on the microprogram. </paragraph>
<paragraph id="P-0354" lvl="0"><number>&lsqb;0354&rsqb;</number> A logical microprogram including a description of a drawing algorithm requires a great effort to debug the microprogram due to the complex description thereof. For the program debug in this situation, an efficient debug means is implemented by stopping a program during an execution at an arbitrary point and by reading out an internal state. </paragraph>
<paragraph id="P-0355" lvl="0"><number>&lsqb;0355&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 59</cross-reference> is a schematic diagram for explaining a method to stop the microprogram as described above. Prior to execution of a program to be checked, an address at which the program execution is stopped is set to the break point register BPR <highlight><bold>160</bold></highlight>. When the program to be debugged is executed and the content of the LRAR <highlight><bold>220</bold></highlight> becomes to be equal to that of the BPR <highlight><bold>160</bold></highlight>, the agreement detect circuit <highlight><bold>34</bold></highlight> outputs an agreement signal. The agreement signal is subjected to a timing adjustment by the shift register <highlight><bold>1501</bold></highlight> and the obtained signal is sent to the LRAR <highlight><bold>220</bold></highlight>. In the LRAR <highlight><bold>220</bold></highlight>, an arbitrary address can be substituted by setting the agteement signal or by connecting the agreement signal to a reset terminal. <cross-reference target="DRAWINGS">FIG. 60</cross-reference> is a timing chart showing the operation above. The replacement address is assumed to be the first address of a fetch program associated with the subsequent command. Namely, after the execution of the program thus stopped, a command is transferred to read an internal register, thereby attaining internal information. If a command which can be executed at an arbitrary address is further transmitted thereafter, it is possible to reexecute the program beginning from an address next to the address when the program is stopped. </paragraph>
<paragraph id="P-0356" lvl="0"><number>&lsqb;0356&rsqb;</number> The graphic display processor <highlight><bold>10</bold></highlight> of this embodiment is applicable to the graphic processing system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In this configuration, the central processing unit (CPU) <highlight><bold>12</bold></highlight> transfers commands and parameters from the system memory <highlight><bold>12</bold></highlight> to the graphic display processor <highlight><bold>10</bold></highlight>, which in turn interprets the command to achieve execution of a drawing operation in the frame buffer <highlight><bold>14</bold></highlight>. The graphic form thus drawn is converted into serial data in the display data converter <highlight><bold>15</bold></highlight> and is then displayed on the display equipment <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0357" lvl="0"><number>&lsqb;0357&rsqb;</number> FIGS. <highlight><bold>61</bold></highlight>-<highlight><bold>62</bold></highlight> are block diagram showing a graphic display processor as an embodiment of a graphic processing apparatus according to the present invention. The graphic display processor GDP of this configuration functions, not limited to, as a display controller accomplishing a display control and a drawing operation in a display system including a CRT display equipment. </paragraph>
<paragraph id="P-0358" lvl="0"><number>&lsqb;0358&rsqb;</number> The graphic display processor GDP operates under a control system in which a command supplied from a microprocessor MPU is executed according to a microprogram control method and includes various execute means (not shown) required for the ordinary microprogram control such as a command register, a parameter register, a control storage storing predetermined microinstructions, and execute means to execute an instruction based on a sequence of microinstructions read from the control storage and parameters. </paragraph>
<paragraph id="P-0359" lvl="0"><number>&lsqb;0359&rsqb;</number> The internal bus of the graphic display processor GDP of FIGS. <highlight><bold>61</bold></highlight>-<highlight><bold>62</bold></highlight> primarily comprises a 3-bus structure including a first bus UAB, a second bus VAB, and a third bus WAB. There are further included a color bus CLB dedicated to color data, a read data bus RDB dedicated to graphic data read from the frame buffer memory FBM, and a mask bus MSKB dedicated to various mask data for logic operations. Although not limited to, each internal bus is of a 32-bit width. </paragraph>
<paragraph id="P-0360" lvl="0"><number>&lsqb;0360&rsqb;</number> The graphic display processor GDP is provided with as an interface section for the microprocessor MPU a read/write FIFO RWF operating in the first-in first-out fashion. The read/write FIFO RWF is linked to an FIFO buffer FBUF having a data input/output terminal connected to the first bus UAB and the second bus VAB. Furthermore, as an interface section for the frame buffer memory FBM, a read data buffer register RDBR and a write data buffer register WDBR are linked to data input/output terminals of the frame buffer memory FBM. A memory address register MAR is linked to an address input terminal of the frame buffer memory FBM. Incidentally, the data output terminal of the read data buffer register RDBR is connected to the first bus UAB and the read data bus RDB; moreover, the memory address register MAR is supplied with address data from a drawing pointer DP so as to address the frame buffer memory FBM based on the address data. </paragraph>
<paragraph id="P-0361" lvl="0"><number>&lsqb;0361&rsqb;</number> The drawing mode of the graphic display processor GDP includes here, not particularly limited to, an operation mode to specify a data operation such as a bit block transfer, a conditional operation mode to specify a conditional operation such as a color operation, a color mode to specify an expansion of binary data including monochrome font data into color data, an area mode to specify a drawing area control, and a logical pel mode specifying a pel drawing by a line drawing command. For each drawing mode, a code including a predetermined number of bits is set to the drawing mode register DMR. Particularly, the drawing modes directly related to this embodiment include the logical pel mode (PEL), the color mode (COL), and the area mode (AREA). </paragraph>
<paragraph id="P-0362" lvl="0"><number>&lsqb;0362&rsqb;</number> The color mode is an operation mode effective in the case where the source data (to be described later) contains binary data and the destination data includes color data in which the source data undergoes a color expansion based on the color data set to the color registers CLR<highlight><bold>0</bold></highlight> and CLR<highlight><bold>1</bold></highlight>. This operation mode is specified, although not limited to, by two bits in the code setting the drawing mode. For COL&equals;00, depending on &ldquo;0&rdquo; and &ldquo;1&rdquo; of the source data, an operation to expand color is achieved by use of the colors set to the color registers CLR<highlight><bold>0</bold></highlight> and CLR<highlight><bold>1</bold></highlight>, respectively. For COL&equals;01, the color of the color register CLR<highlight><bold>1</bold></highlight> is expanded when the source data is &ldquo;1&rdquo;, whereas the color expansion is inhibited when the source data is &ldquo;0&rdquo;. For COL&equals;10, the color of the color register CLRO is expanded when the source data is &ldquo;0&rdquo;, whereas the color expansion is inhibited when the source data is &ldquo;1&rdquo;. For COL&equals;11, the color expansion is indicated not to be executed regardless of the content of the source data, namely, &ldquo;1&rdquo; or &ldquo;0&rdquo;. Selection between color data set to the color registers CLR<highlight><bold>0</bold></highlight> and CLR<highlight><bold>1</bold></highlight>, that is, the color expansion is effected by a multiplexer, whereas the source data as an object of the color expansion is developed (expanded) from pixel-unit data into bit-unit data constituting the pixel and the resultant data is supplied to the multiplexer MPX. </paragraph>
<paragraph id="P-0363" lvl="0"><number>&lsqb;0363&rsqb;</number> The data expansion above can be effected by means of a configuration including a data latch circuit DLU <highlight><bold>2</bold></highlight> having an input terminal connected to the first bus UAB, a data latch circuit DLV <highlight><bold>2</bold></highlight> having an input terminal linked to the second bus VAB, a barrel shifter to shift the data stored in the data latch circuits DLU <highlight><bold>2</bold></highlight> and DLV <highlight><bold>2</bold></highlight> by a predetermined number of bits and to output the resultant data, a data expand section DE capable of developing the outputs from the barrel shifter BRLSFT, particularly, binary information into multivalue information (for example of the 4 bits/pixel configuration) in the bit units constituting a pixel, and a data latch circuit DL <highlight><bold>2</bold></highlight> to latch data outputted from the data expansion section DE. This configuration is utilized not only for the data expansion of data to be subjected to a color development by the multiplexer MPX but also functions as a data transfer route to supply color pattern data to the color bus CLB, furthermore, the configuration is also used to form various mask data. </paragraph>
<paragraph id="P-0364" lvl="0"><number>&lsqb;0364&rsqb;</number> The pel drawing operation according to the present embodiment is achieved to draw a bold line by the line drawing command. Namely, by using as the basic drawing unit a pel (or a logical pel) defined as a pattern or set of drawing dots having an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels, a drawing operation is accomplished with pel data at a position of an indication point designated by the current pointers CPX and CPY, which represent a pel drawing point in association with pixels in the drawing coordinate system. The logical pel mode indicating the pel drawing operation is specified, although not limited to, by two bits in the code setting of the drawing mode. PEL&equals;00 specifies not to execute the pel drawing operation, whereas PEL&equals;01 designates a color bold-line drawing operation (for example, to draw a dot-dash line with a bold line as shown in <cross-reference target="DRAWINGS">FIG. 20B</cross-reference>) by use of a predetermined line style corresponding to line style information (data) indicated by the pel origin. PEL&equals;11 denotes a bold line drawing (for example, by use of a stripe pattern as shown in <cross-reference target="DRAWINGS">FIG. 20C</cross-reference>) with a predetermined pattern of a color corresponding to the pattern data. Incidentally, PEL&equals;10 is reserved and is substantially regarded as identical to the specification of PEL&equals;00. </paragraph>
<paragraph id="P-0365" lvl="0"><number>&lsqb;0365&rsqb;</number> The shape and size of each pel are defined as various pel data in an internal memory IDM comprising a random access memory (RAM). For a logical pel defined by the pel data, if the shape thereof is approximately a circle indicated by the hatching, for example, as shown in <cross-reference target="DRAWINGS">FIG. 63, a</cross-reference> pel area PLA of a rectangular shape surrounding the pel shape is defined according to the pel origin PCP and the distances centered thereon PLX<highlight><bold>1</bold></highlight>, PLX<highlight><bold>2</bold></highlight>, PLY<highlight><bold>1</bold></highlight>, and PLY<highlight><bold>2</bold></highlight>; furthermore, for the definition of the shape of the pel, the bits (having a one-to-one correspondence with respect to the pixels) included in the shape (hatching area) in the pel area are set to &ldquo;1&rdquo;, whereas the bits (having the one-to-one correspondence with respect to the pixels) not included in the pel shape of the pel area are set to &ldquo;0&rdquo;. </paragraph>
<paragraph id="P-0366" lvl="0"><number>&lsqb;0366&rsqb;</number> The internal memory IDM has a data input/output terminal linked to the memory data buffer MDBUF and an address input terminal linked to the memory address buffer MABUF, so that the addressing of the pel data is effected via a pel address pointer PLAP. Pel data read from the internal memory IDM is temporarily stored in the memory data buffer MDBUF, while the data corresponding to the distances PLX<highlight><bold>1</bold></highlight>, PLY<highlight><bold>1</bold></highlight>, PLX<highlight><bold>2</bold></highlight>, and PLY<highlight><bold>2</bold></highlight> are used to effect an initial setting operation of the pel area PLA based on the data (corresponding to the pel origin PCP) indicated by the current pointers CPX and CPY prior to the start of the pel drawing operation. Namely, the data indicated by the current pointers CPX and CPY corresponding to the pel origin PCP and the data associated with the distances PLX<highlight><bold>1</bold></highlight>, PLX<highlight><bold>2</bold></highlight>, PLY<highlight><bold>1</bold></highlight>, and PLY<highlight><bold>2</bold></highlight> are respectively fed via the data latch circuits DLU <highlight><bold>1</bold></highlight> and DLV <highlight><bold>1</bold></highlight> to the arithmetic logic unit ALU to effect an addition and/or a subtraction therebetween, thereby attaining the data determining the pel area PLA in the X-Y coordinate system as the drawing system, namely, the pel area maximum data on the X-coordinate axis XMX, the pel area minimum data on the X-coordinate axis XMN, the pel area maximum data on the Y-coordinate axis YMX, and the pel area minimum data on the Y-coordinate axis YMN. These initial setting data of the pel area PLA are respectively loaded via the data latch circuit DL<highlight><bold>1</bold></highlight> in the corresponding minimum pel area set registers XMN and YMN and the corresponding maximum pel area set registers XMX and YMX. Incidentally, the arithmetic logic unit ALU is also used to effect a data operation other than the data operation for the initial setting of the pel area PLA, and there is provided a temporary register TDR to temporarily store the operation result data from the arithmetic logic unit ALU. </paragraph>
<paragraph id="P-0367" lvl="0"><number>&lsqb;0367&rsqb;</number> The line style data to be used for PEL&equals;01 and the pattern data to be processed for PEL&equals;11 are, although not limited to, stored in the internal memory IDM. Addressing of the line style data is accomplished depending on the output from the line style address pointer LSAP, whereas addressing of the pattern data is carried out according to the output from the pattern address pointer PTAP. </paragraph>
<paragraph id="P-0368" lvl="0"><number>&lsqb;0368&rsqb;</number> The line style data is binary data comprising a bit &ldquo;1&rdquo; which is an active bit in the line style specification and a bit &ldquo;0&rdquo; which is a negative bit in the line style specification. For the specification of PEL&equals;01 of the logical pel mode, the line style address pointer LSAP sequentially addresses the line style data in a bit-by-bit fashion corresponding to the logical pel origin PCP. The line style data thus addressed so as to be read from the internal memory IDM is fed to the line style control section LSC, which generates control signals &oslash;c&Lgr;r 0 and &oslash;c&Lgr;r 1 for the multiplexer to select outputs of the color registers CLR<highlight><bold>0</bold></highlight> and CLR<highlight><bold>1</bold></highlight>, respectively. Although not particularly limited to, when the bit of the line style data is &ldquo;0&rdquo;, the control signals &oslash;c&Lgr;r 0 and &oslash;c&Lgr;r 1 are set to the select and nonselect levels, respectively; whereas when the line style data bit is &ldquo;1&rdquo;, the control signals &oslash;c&Lgr;r 0 and &oslash;c&Lgr;r 1 are set to the nonselect and select levels, respectively. In the mode of PEL&equals;01 (the bold line drawing mode with the specified line style), although not particularly limited to, the &ldquo;COL&equals;10&rdquo; mode or the &ldquo;COL&equals;01&rdquo; mode is required to be set, for example, in the case where color data corresponding to the color for the drawing is stored in the color register CLR<highlight><bold>1</bold></highlight>, if the &ldquo;COL&equals;01&rdquo; mode is beforehand set, a bold line of the predetermined line style can be drawn in a color associated with the color data stored in the color register CLR<highlight><bold>1</bold></highlight>. On the other hand, in the case where the color data corresponding to the color for the drawing is stored in the color register CLR<highlight><bold>0</bold></highlight>, if the &ldquo;COL&equals;10&rdquo; mode is set, the background other than the bold line of the predetermined line style can be drawn in a color associated with the color data stored in the color register CLR<highlight><bold>0</bold></highlight>, and the portion of the bold line of the line style is set to the negative state, in other words, in the reverse state. </paragraph>
<paragraph id="P-0369" lvl="0"><number>&lsqb;0369&rsqb;</number> The pattern data comprises binary data as monochrome font data or multivalue data as color font data and is stored in the internal memory IDM such that predetermined pattern data is addressed by use of an output from the pattern address pointer PTAP. The &ldquo;PEL&equals;11&rdquo; mode in this embodiment is, not particularly limited to, a mode in which the line style cannot be specified and a successive bold-line drawing operation is accomplished with a predetermined pattern. If the pattern data includes binary data, a data expansion is accomplished on the data through the data expansion section DE and the like to attain a necessary number of bits for a color expansion. The expanded data is processed by the multiplexer MPX so as to select color data for the color registers CLR<highlight><bold>0</bold></highlight> and CLR<highlight><bold>1</bold></highlight> in accordance with &ldquo;1&rdquo; and &ldquo;0&rdquo; of each bit thereof, thereby effecting the color expansion. Pattern data including multivalue data is directly supplied from the data latch circuit DL<highlight><bold>2</bold></highlight> via a bit position alignment by the barrel shifter BRLSFT and the like to the color bus CLB. </paragraph>
<paragraph id="P-0370" lvl="0"><number>&lsqb;0370&rsqb;</number> Here, although not particularly limited to, the bold-line drawing in the logical pel mode can be processed at a higher speed, as compared with the processing achieved in the pixel unit, by assuming 32-bit color data to correspond to a 1-word boundary; consequently, there is provided the data expansion section DF to expand, for example, pel data in the form of binary data corresponding to a pixel into data having a number of bits corresponding to the color data bits such as 4 bits/pixel. In this case, various mask data are necessary for the 1-word boundary data to be processed. Namely, referring to <cross-reference target="DRAWINGS">FIG. 63</cross-reference>, when the 1-word boundary data exceeds the left end of the pel area PLA along the X-coordinate axis, there is required a start mask data to mask the bits corresponding to the portion beyond the left end. When the 1-word boundary data exceeds the right end of the pel area PLA along the X-coordinate axis, there is required an end mask data to mask the bits associated with the portion beyond the right end. Furthermore, a pel mask data is necessary to mask the bits outside the pel shape in the pel area PLA. For example, in the start and end mask data, although not particularly limited to, the bits corresponding to the outside of the pel area PLA are set to &ldquo;0&rdquo; and the bits associated with the inside of the pel area PLA are set to &ldquo;1&rdquo;. In addition, in the pel mask data, although not particularly limited to, the bits corresponding to the inside of the pel shape are set to &ldquo;1&rdquo; and the bits associated with the outside of the pel shape are set to &ldquo;0&rdquo;. The pel mask data, the start mask data, and the end mask data are generated through the data expansion effected according to various pel data read from the internal memory IDM so as to be stored in the pel mask register PMR, the start mask register SMR, and the end mask register EMR. </paragraph>
<paragraph id="P-0371" lvl="0"><number>&lsqb;0371&rsqb;</number> The area mode (AREA) is an operation mode to effect a drawing area control in the X-Y coordinate system (the drawing coordinated system) and is also applicable to the window clipping. The operation mode can be specified by two bits predetermined in the code setting of the drawing mode. For AREA&equals;01, when a graphic form to be drawn exceeds the drawing area DRA, for example, as shown in <cross-reference target="DRAWINGS">FIG. 64</cross-reference>, the drawing operation is finished, whereas for AREA&equals;10, when the graphic form to be drawn exceeds the drawing area, for example, as shown in <cross-reference target="DRAWINGS">FIG. 65</cross-reference>, the exceeded portion is not drawn and the drawing of the graphic form is continued to the end of the drawing operation. AREA&equals;00 indicates that the drawing area control is not achieved, whereas AREA&equals;11 is reserved and is substantially regarded as identical to the &ldquo;AREA&equals;00&rdquo; mode. </paragraph>
<paragraph id="P-0372" lvl="0"><number>&lsqb;0372&rsqb;</number> The drawing area DRA in the X-Y coordinate system is defined by the drawing area maximum data on the X-coordinate axis XMAX, the drawing area minimum data on the X-coordinate axis XMIN, the drawing area maximum data on the Y-coordinate axis YMAX, and the drawing area minimum data on the Y-coordinate axis YMIN. These drawing area define data are respectively stored in the corresponding maximum drawing area set registers XMAX and YMAX and the corresponding minimum drawing area set registers XMIN and YMIN. </paragraph>
<paragraph id="P-0373" lvl="0"><number>&lsqb;0373&rsqb;</number> In the pixel-unit drawing operation, the drawing area control in the area mode is effected depending on the result of a comparison made by the area comparator ACOMPX <highlight><bold>3110</bold></highlight> between the values of the current pointers CPX and CPY and the drawing area maximum data XMAX <highlight><bold>3111</bold></highlight> and YMAX <highlight><bold>3112</bold></highlight> and the result of a comparison made by the area comparator ACOMPN <highlight><bold>3109</bold></highlight> between the values of the current pointers CPX and CPY and the drawing area minimum data XMIN and YMIN (<cross-reference target="DRAWINGS">FIG. 61</cross-reference>). Furthermore, in the case where the drawing is accomplished through a word-unit processing like in the logical pel mode, the drawing area control is achieved by resetting the pel area PLA. Namely, when the pel area PLA exceeds the drawing area DRA, the pel area initially set is reset so as to be contained in the drawing area DRA. Consequently, based on the pel area thus reset, the pel mask data, the start mask data, and the end mask data are formed as described above, which prevents, also in the drawing operation in the word-unit processing, the drawing from being effected in the area outside of the drawing area DRA. Judgment to determine whether or not the pel area PLA initially set exceeds the drawing area DRA is accomplished by the area comparators ACOMPX and ACOMPN. </paragraph>
<paragraph id="P-0374" lvl="0"><number>&lsqb;0374&rsqb;</number> The operations associated with the color mode and the logical pel mode are executed by the arithmetic logic unit LU. The mask data stored in the pel mask register PMR, the start mask register SMR, and the end mask register EMR are supplied via the mask bus MSKB to the logic unit LU, furthermore, the color pel data and pattern data undergone the color expansion by the multiplexer and the color pattern data fed from the data latch circuit DL <highlight><bold>2</bold></highlight> can also be supplied via the color bus CLB to the logic unit LU. In addition, the destination data read from the frame buffer memory FBM can also be delivered thereto via the read data bus RDB. The logic unit LU accomplishes an operation control as follows, namely, a drawing mode set code stored in the drawing mode register DMR is decoded by a decoder and in response to the decoded result, control signals are sequentially delivered from a control storage and the like, thereby effecting the operation control. In the configuration, the operation result from the logic unit LU can be fed via the write data buffer register WDBR to the frame buffer memory FBM based on the address control from the drawing pointer DP; furthermore, the operation result can also be supplied to the system side via the read data buffer register RDBR and the first bus UAB. </paragraph>
<paragraph id="P-0375" lvl="0"><number>&lsqb;0375&rsqb;</number> Next, the pel drawing operation of the graphic display processor GDP will be described by primarily referring to the flow charts of FIGS. <highlight><bold>66</bold></highlight>-<highlight><bold>70</bold></highlight>. </paragraph>
<paragraph id="P-0376" lvl="0"><number>&lsqb;0376&rsqb;</number> First, when a drawing operation is specified by a line drawing command, it is judged (in step S<highlight><bold>1</bold></highlight>) to determine whether or not the pel drawing is to be executed. If the &ldquo;PEL&equals;00&rdquo; mode has been specified in this situation, the pel drawing is not achieved and a line drawing is effected in the ordinary pixel units. </paragraph>
<paragraph id="P-0377" lvl="0"><number>&lsqb;0377&rsqb;</number> In order to draw a dot pattern based on a predetermined logical pel data when the pel drawing is selected, the value of each pointer (the current pointers CPX and CPY, the drawing pointer DP, the pel address pointer PLAP, and the pattern address pointer PTAP) is saved in the stack area of the internal memory IDM (step S<highlight><bold>2</bold></highlight>). </paragraph>
<paragraph id="P-0378" lvl="0"><number>&lsqb;0378&rsqb;</number> To set the pel area PLA, the distance values PLX <highlight><bold>2</bold></highlight> and PLY <highlight><bold>2</bold></highlight> between the pel origin PCP and the upper-right corner of the pel area PLA are respectively added to the current pointers CPX and CPY indicating the pel origin PCP, and then the results of the additions are stored in the current pointers CPX and CPY (step S<highlight><bold>3</bold></highlight>). If the values of the current pointers CPX and CPY after the current point is moved to the coordinate point of the upper-right corner of the drawing area PLA are judged in step S<highlight><bold>4</bold></highlight> not to exceed the drawing area DRA, the values of the current pointers CPX and CPY are assumed to be the pel area maximum data XMX and YMX so as to set the maximum point of the pel area PLA (step S<highlight><bold>5</bold></highlight>). </paragraph>
<paragraph id="P-0379" lvl="0"><number>&lsqb;0379&rsqb;</number> If the current pointers CPX and CPY are judged to exceed the drawing area DRA in the step S<highlight><bold>4</bold></highlight>, a step S<highlight><bold>6</bold></highlight> is effected. If the step S<highlight><bold>6</bold></highlight> judges that the &ldquo;AREA&equals;01&rdquo; mode has been set, a subroutine (step S<highlight><bold>7</bold></highlight>) is achieved to restore the pointers stacked in the step S<highlight><bold>2</bold></highlight> according to the rule of the operation mode, thereby finishing the drawing operation. </paragraph>
<paragraph id="P-0380" lvl="0"><number>&lsqb;0380&rsqb;</number> When AREA&equals;10 is specified for the area mode, the pel drawing must be executed unless the pel area PLA completely exceeds the drawing area DRA, consequently, steps S<highlight><bold>8</bold></highlight> and S<highlight><bold>9</bold></highlight> are effected to achieve an area check on the upper-right corner (maximum point) of the pel area PLA. Namely, it is judged whether or not the maximum point in the upper-right corner of the pel area PLA exceeds the minimum point (SMIN, YMIN) in the lower-left corner. When the minimum point is judged to be exceeded, the further operation of the pel drawing is not necessary, and hence the subroutine (step S<highlight><bold>10</bold></highlight>) is executed to restore the pointers stacked in the step S<highlight><bold>2</bold></highlight> so as to return the control to the start of the control routine, which then effects a drawing processing for the next dot pattern. </paragraph>
<paragraph id="P-0381" lvl="0"><number>&lsqb;0381&rsqb;</number> As a result of the judgment in the steps S<highlight><bold>8</bold></highlight> and S<highlight><bold>9</bold></highlight>, if the maximum point in the upper-right corner of the pel area PLA is found not to exceed the minimum point (XMIN, YMIN) in the lower-left corner of the drawing area DRA, the distance PLX<highlight><bold>2</bold></highlight> is initialized (in step S<highlight><bold>11</bold></highlight>) to a value identical to the data of the current pointer CPX to which the distance PLX<highlight><bold>2</bold></highlight> has been added. If the pel area maximum data XMX is judged to exceed the maximum data XMAX of the drawing area (step S<highlight><bold>12</bold></highlight>), the pel area maximum data XMX is reset to a value equal to the value of the drawing area maximum data XMAX according to the rule of the &ldquo;AREA&equals;10&rdquo; mode (step S<highlight><bold>13</bold></highlight>). Subsequently, the pel area maximum data YMX is similarly initialized to the data of the current pointer CPY to which the distance PLY<highlight><bold>2</bold></highlight> has been added (step S<highlight><bold>14</bold></highlight>). If the pel area maximum data YMX is judged in this situation to exceed the drawing area maximum data YMAX (step S<highlight><bold>15</bold></highlight>), the pel area maximum data YMX is reset according to the rule of the &ldquo;AREA&equals;10&rdquo; mode to a value identical to the value of the pertinent maximum data YMAX of the drawing area (step S<highlight><bold>16</bold></highlight>). For example, as shown in <cross-reference target="DRAWINGS">FIG. 63</cross-reference>, when the pel area PLA is entirely contained in the drawing area DRA, the pel area maximum data XMX and YMX initially set in the steps S<highlight><bold>11</bold></highlight> and S<highlight><bold>14</bold></highlight> determine the pel area maximum point; however, as shown in <cross-reference target="DRAWINGS">FIG. 71</cross-reference>, if the pel area (indicated by a solid line) PLA to be initialized exceeds the drawing area DRA, the pel area maximum data XMX and YMX reset in the steps S<highlight><bold>13</bold></highlight> and S<highlight><bold>16</bold></highlight> determine the pel area maximum point so as to generate a pel area PLA indicated by a double-dot-and-dash line in <cross-reference target="DRAWINGS">FIG. 71</cross-reference>. </paragraph>
<paragraph id="P-0382" lvl="0"><number>&lsqb;0382&rsqb;</number> When the area check of the upper-right corner of the pel area PLA completes the setting of the maximum point of the pel area, an operation is then accomplished depending on the result of the maximum point setting to obtain a difference between the pel area maximum data XMX and the data of the current pointer CPX to which the distance PLX <highlight><bold>2</bold></highlight> has been added (step S<highlight><bold>20</bold></highlight>). If the difference is judged to be other than &ldquo;0&rdquo; in step S<highlight><bold>21</bold></highlight>, namely, if the pel area maximum data has been reset in the step S<highlight><bold>13</bold></highlight>, a number of pixels corresponding to the difference are converted into a number of bits for color data (step S<highlight><bold>22</bold></highlight>). In step S<highlight><bold>23</bold></highlight> thereafter, an end mask is generated in consideration of the reset value of the pel area maximum data XMX. </paragraph>
<paragraph id="P-0383" lvl="0"><number>&lsqb;0383&rsqb;</number> Next, in order to set the minimum point at the lower-left corner of the pel area PLA, the current pointers CPX and CPY set to correspond to the initial maximum point of the pel area in the step S<highlight><bold>3</bold></highlight> are restored to the values of the pel origin PCP in step S<highlight><bold>24</bold></highlight>; furthermore, the distances PLX <highlight><bold>1</bold></highlight> and PLY <highlight><bold>1</bold></highlight> between the pel origin PCP and the lower-left corner of the pel area PLA are subtracted from the current pointer values CPX and CPY indicating the pel origin PCP so as to store the results of the subtractions in the current pointers CPX and CPY, respectively (step S<highlight><bold>25</bold></highlight>). If the values CPX and CPY of the current pointer moved to the coordinate point of the lower-left corner of the drawing area DRA are judged not to exceed the drawing area DRA in step S<highlight><bold>26</bold></highlight>, the values of the current pointers CPX and CPY are assumed to be the pel area minimum data XMN and YMN, thereby setting the minimum point of the pel area PLA (step S<highlight><bold>27</bold></highlight>). </paragraph>
<paragraph id="P-0384" lvl="0"><number>&lsqb;0384&rsqb;</number> If the current pointers CPX and CPY are judged to exceed the drawing area DRA in the step S<highlight><bold>26</bold></highlight>, a step S<highlight><bold>28</bold></highlight> is executed. In the step S<highlight><bold>28</bold></highlight>, if the &ldquo;AREA&equals;01&rdquo; mode is judged to have been set, a subroutine (step S<highlight><bold>29</bold></highlight>) is effected to restore the pointers stacked in the step S<highlight><bold>2</bold></highlight> according to the rule of the pertinent operation mode, thereby completing the drawing operation. </paragraph>
<paragraph id="P-0385" lvl="0"><number>&lsqb;0385&rsqb;</number> If AREA&equals;10 is specified for the area mode, the pel drawing is required to be executed unless the pel area PLA completely exceeds the drawing area DRA; consequently, steps S<highlight><bold>30</bold></highlight> and S<highlight><bold>31</bold></highlight> are achieved to execute an area check for the lower-left corner (minimum point) of the pel area PLA, namely, it is judged whether or not the minimum point at the lower-left corner of the pel area PLA exceeds the maximum point (XMAX, YMAX) at the upper-right corner of the drawing area DRA. When the maximum point is judged to have been exceeded, the further operation of the pel drawing is not necessary, and hence the subroutine (step S<highlight><bold>32</bold></highlight>) is effected to restore the pointers stacked in the step S<highlight><bold>2</bold></highlight> and the control is returned to the start of the control routine so as to proceed to the drawing processing of the next dot pattern. </paragraph>
<paragraph id="P-0386" lvl="0"><number>&lsqb;0386&rsqb;</number> As a result of the judgment in the steps S<highlight><bold>30</bold></highlight> and S<highlight><bold>31</bold></highlight>, if the minimum point at the lower-left corner of the pel area PLA does not exceed the maximum point (XMAX, YMAX) at the upper-right corner of the drawing area DRA, the pel area minimum data XMN is initialized to a value equal to the data of the current pointer CPX from which the distance PLXl has been subtracted (step S<highlight><bold>33</bold></highlight>). If the pel area minimum data XMN is judged in this situation to exceed the drawing area minimum data XMIN (step S<highlight><bold>34</bold></highlight>), the pel area minimum data XMN is reset according to the rule of the &ldquo;AREA&equals;10&rdquo; mode to a value equal to the value of the drawing area minimum data XMIN (step S<highlight><bold>35</bold></highlight>). Subsequently, the pel area minimum data YMN is also initialized to the data of the current pointer CPY from which the distance PLY<highlight><bold>1</bold></highlight> has been subtracted (step S<highlight><bold>36</bold></highlight>). If the pel area minimum data YMN is judged in this situation to exceed the drawing area minimum data YMIN (step S<highlight><bold>37</bold></highlight>), the pel area minimum data YMN is reset according to the rule of the &ldquo;AREA&equals;10&rdquo; mode to the value of the drawing area minimum data YMIN (step S<highlight><bold>38</bold></highlight>). For example, as shown in <cross-reference target="DRAWINGS">FIG. 63</cross-reference>, when the pel area PLA is completely contained in the drawing area DRA, the pel area minimum data XMN and YMN initially set in the steps S<highlight><bold>33</bold></highlight> and S<highlight><bold>36</bold></highlight> determine the pel area minimum point; whereas when the pel area (indicated by the solid line) PLA to be initialized exceeds the drawing area DRA as shown in <cross-reference target="DRAWINGS">FIG. 72</cross-reference>, the pel area minimum data XMN and YMN reset in the steps S<highlight><bold>35</bold></highlight> and S<highlight><bold>38</bold></highlight> determine the minimum point of the pel area PLA so as to form a pel area PLA indicated by a double-dot-line in <cross-reference target="DRAWINGS">FIG. 72</cross-reference>. </paragraph>
<paragraph id="P-0387" lvl="0"><number>&lsqb;0387&rsqb;</number> When the setting of the minimum point of the pel area is finished with the area check of the lower-left corner of the pel area, there is then effected an operation to obtain a difference, according to the result, between the pel area minimum data XMN and the data of the current pointer CPX from which the distance PLXl has been subtracted (step <highlight><bold>539</bold></highlight>). In step S<highlight><bold>40</bold></highlight>, when the result is judged to be other than &ldquo;0&rdquo;, namely, if the pel area minimum data XMN has been reset in the step S<highlight><bold>35</bold></highlight>, a number of pixels corresponding to the difference is converted into a number of bits for color data (step S<highlight><bold>41</bold></highlight>), and then in step S<highlight><bold>42</bold></highlight>, a start mask is generated in consideration of the reset value of the pel area minimum data XMN. </paragraph>
<paragraph id="P-0388" lvl="0"><number>&lsqb;0388&rsqb;</number> After the pel area PLA is set through the initial setting or resetting operation as described above, the respective pointers such as the current pointers CPX and CPY are moved to a point A located at the left end of the word boundary including the point (XMN, YMN) of the lower-left corner of the pel area PLA, as shown in <cross-reference target="DRAWINGS">FIG. 73</cross-reference> (step S<highlight><bold>45</bold></highlight>). In the case of using pattern data (the &ldquo;PEL&equals;11&rdquo; mode is beforehand specified; step S<highlight><bold>46</bold></highlight>), a subroutine is executed to move the pattern data from the internal memory IDM (step S<highlight><bold>47</bold></highlight>). When the &ldquo;PEL&equals;01&rdquo;<highlight><bold>0</bold></highlight> mode is specified, a line style data is moved from the internal memory IDM. </paragraph>
<paragraph id="P-0389" lvl="0"><number>&lsqb;0389&rsqb;</number> Thereafter, it is judged in step S<highlight><bold>48</bold></highlight> to determine whether or not the value of the current pointer CPY is greater than that of the pel area maximum data YMX, in other words, whether or not the drawing processing has been completed for a word boundary including the upper-right corner (XMX, YMX) of the pel area PLA (whether or not the drawing of a pel pattern has been finished). If the final drawing processing of a dot pattern (a pel pattern) has been ended, the subroutine restoring the pointers stacked in the step S<highlight><bold>2</bold></highlight> is executed (step S<highlight><bold>49</bold></highlight>), and then an incrementation is effected, thereby terminating the pel drawing of the dot pattern. </paragraph>
<paragraph id="P-0390" lvl="0"><number>&lsqb;0390&rsqb;</number> In the step S<highlight><bold>48</bold></highlight>, if it is judged that the final drawing processing of a dot pattern has not yet been finished, pel data in the form of binary data defining a pel shape is read from the internal memory IDM (step S<highlight><bold>51</bold></highlight>). The pel data undergoes a bit position alignment in the barrel shifter BRLSFT and a data expansion (for example 4 bits/pixel) in the data expand section DE so as to form pel mask data for the boundary of the pertinent word. After the pel mask data is generated, it is judged (step S<highlight><bold>53</bold></highlight>) to determine whether or not pattern data is used, in other words, whether the &ldquo;PEL&equals;01&rdquo; mode or the &ldquo;PEL&equals;11&rdquo; mode is selected. If the &ldquo;PEL&equals;11&rdquo; mode has been specified, reading (extracting) of pattern data is executed (step S<highlight><bold>54</bold></highlight>). </paragraph>
<paragraph id="P-0391" lvl="0"><number>&lsqb;0391&rsqb;</number> Next, the program judges to determine whether or not the value attained by adding the number of pixels of the 1-word boundary to the value of the current pointer CPX is greater than the pel area maximum data XMX (step S<highlight><bold>55</bold></highlight>). In step S<highlight><bold>55</bold></highlight>, if the pel area maximum data XMX is exceeded, it is indicated that an operation with data of the 1-word boundary can complete the 1-line drawing in the X-direction in the pel area as indicated by the area {circle over (1)} of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>. In this case, a judgment is made to determine whether or not the pattern data is to be used (step S<highlight><bold>56</bold></highlight>). When the pattern data is necessary, the pattern data is aligned to the destination data via the barrel shifter (step S<highlight><bold>57</bold></highlight>) and the pel mask data, the start mask data, and the end mask data are generated according to the predetermined operation mode, and then the results of the operation are written in the frame buffer memory FBM according to the address control of the drawing pointer (step S<highlight><bold>58</bold></highlight>). As described above, when the l-line drawing in the X direction in the pel area is completely finished through the operation by use of the 1-word boundary data, the value of the current pointer CPX is then moved to a point at the left end of the 1-word boundary corresponding to the point A along the Y-coordinate direction and the value of the current pointer CPY is moved by one point in the positive Y-coordinate direction (step S<highlight><bold>59</bold></highlight>). Thereafter, the control is returned to the step S<highlight><bold>48</bold></highlight> so as to continue the drawing processing in the similar manner for the next X-directional line with respect to the Y direction in the pel area. </paragraph>
<paragraph id="P-0392" lvl="0"><number>&lsqb;0392&rsqb;</number> On the other hand, if the value obtained by adding the number of pixels of the 1-word boundary to that of the current pointer CPX indicating the point A is less than the pel area maximum data XMX in the judgment of the step S<highlight><bold>55</bold></highlight>, the operation with the 1-word boundary data cannot finish the drawing processing of a line in the X direction in the pel area as indicated by the areas {circle over (2)}, {circle over (3)}, and {circle over (4)} of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>. </paragraph>
<paragraph id="P-0393" lvl="0"><number>&lsqb;0393&rsqb;</number> In this case, therefore, in order to accomplish the drawing processing on the 1-word boundary designated by the area {circle over (2)} of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the usage of the pattern data is judged (step S<highlight><bold>60</bold></highlight>). If the pattern data is required, the pattern data is aligned to the destination data via the barrel shifter BRLSFT (step <highlight><bold>61</bold></highlight>) and the pel mask data and the start mask data are generated in accordance with a predetermined operation mode, and then the results of the operation are written in the frame buffer memory FBM according to the address control of the drawing pointer DP (step S<highlight><bold>62</bold></highlight>). Next, the value of the current pointer CPX is moved by a 1-word boundary in the positive X direction (step S<highlight><bold>63</bold></highlight>) so as to generate a pel mask data of the 1-word boundary associated with the value of the current pointer CPX thus moved (step S<highlight><bold>64</bold></highlight>). After the pel mask data is generated, a judgment is made to determine whether or not the pattern data is necessary, in other words, whether the &ldquo;PEL&equals;01&rdquo; mode or the &ldquo;PEL&equals;11&rdquo; mode is selected (step S<highlight><bold>65</bold></highlight>). When the &ldquo;PEL&equals;11&rdquo; mode is specified, reading or extraction of the pattern data is achieved (step S66). When the pel mask data for the next 1-word boundary and the necessary pattern data are prepared as a result, the program judges to determine whether or not the value attained by adding the number of pixels of the 1-word boundary to the value of the current pointer CPX is greater than the pel area maximum data XMX (step S<highlight><bold>67</bold></highlight>). When the result of the judgment in the step S<highlight><bold>67</bold></highlight> indicates that the pel area maximum data XMX is exceeded, as conceptually shown by the area {circle over (4)} of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the data of the 1-word boundary exceeds the pel area PLA (i.e. the pertinent operation is the final operation in the drawing processing). If the pel area maximum data is not exceeded, as conceptually shown by the area {circle over (3)} of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the data of the 1-word boundary is entirely contained in the pel area PLA (the pertinent operation is not the final operation in the drawing of the line). </paragraph>
<paragraph id="P-0394" lvl="0"><number>&lsqb;0394&rsqb;</number> When the pel area maximum data is not exceeded as a result of the judgment in the step S<highlight><bold>67</bold></highlight>, it is judged to determine whether the pattern data is to be used or not (step S<highlight><bold>68</bold></highlight>). If this is the case, the pattern data is aligned to the destination data via the barrel shifter BRLSFT (step S<highlight><bold>69</bold></highlight>), the pel mask data is generated according to the predetermined operation mode, and the result of the operation is written in the frame buffer memory FBM based on the address control of the drawing pointer DP (step S<highlight><bold>70</bold></highlight>). Thereafter, control is returned to the step S<highlight><bold>63</bold></highlight> to repeatedly perform the processing until the step S<highlight><bold>67</bold></highlight> determines that the pel area maximum data XMX is exceeded. </paragraph>
<paragraph id="P-0395" lvl="0"><number>&lsqb;0395&rsqb;</number> When the judgment of the step S<highlight><bold>67</bold></highlight> indicates that the pel area maximum data XMX is exceeded, a judgment is made to determine whether or not the pattern data is used (step S<highlight><bold>71</bold></highlight>). If the pattern data is required, the pattern data is aligned to the destination data via the barrel shifter BRLSFT (step S<highlight><bold>72</bold></highlight>), the pel mask data and the end mask data are generated according to the predetermined operation mode, and the results of the operations are written in the frame buffer memory FBM based on the address control of the drawing pointer DP (step S<highlight><bold>73</bold></highlight>). When the drawing processing of a line in the X direction in the pel area is completed as described above, the value of the current pointer CPX is then moved along the Y direction to a point at the left end of the 1-word boundary corresponding to the point A and the value of the current pointer CPY is moved by one point in the positive X direction (step S<highlight><bold>59</bold></highlight>), and then control is returned to the step S<highlight><bold>48</bold></highlight> to continue the drawing processing in the similar fashion for the next X-directional line with respect to the positive Y direction. </paragraph>
<paragraph id="P-0396" lvl="0"><number>&lsqb;0396&rsqb;</number> Incidentally, the pattern reading or extraction subroutine (steps S<highlight><bold>54</bold></highlight> and S<highlight><bold>66</bold></highlight>) comprises the drawing position alignment and the color expansion processing in the case where the pattern data includes binary data. </paragraph>
<paragraph id="P-0397" lvl="0"><number>&lsqb;0397&rsqb;</number> As can be seen from the description above, the following effects can be attained according to the embodiment. </paragraph>
<paragraph id="P-0398" lvl="7"><number>&lsqb;0398&rsqb;</number> (1) Since a logical pel is defined with an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels so as to effect a dot drawing operation based on pel data depending on the position of the indication point of the current pointer, a bold line defined by the size of the pel can be easily drawn at a high speed. </paragraph>
<paragraph id="P-0399" lvl="7"><number>&lsqb;0399&rsqb;</number> (2) In the pel drawing operation, the setting of the &ldquo;PEL&equals;01&rdquo; mode or the &ldquo;PEL&equals;11&rdquo; mode enables a bold-line drawing by use of an arbitrary line style or pattern. </paragraph>
<paragraph id="P-0400" lvl="7"><number>&lsqb;0400&rsqb;</number> (3) If the &ldquo;COL&equals;10&rdquo; mode or the &ldquo;COL&equals;01&rdquo; mode is specified when the &ldquo;PEL&equals;01&rdquo; mode is set in the pel drawing operation, a bold-line drawing in a color and a bold-line drawing in the reverse mode (i.e. the relationship between the bold line and the background is reversed on the screen) can be achieved. </paragraph>
<paragraph id="P-0401" lvl="7"><number>&lsqb;0401&rsqb;</number> (4) Provisions of the data expansion section DE for expanding binary data in the drawing coordinate system into a number of bits necessary for the multivalue data and the logical unit for effecting a logical operation of the source data and the destination data in the word units enable to increase the processing speed of the drawing processing. </paragraph>
<paragraph id="P-0402" lvl="7"><number>&lsqb;0402&rsqb;</number> (5) When the pel drawing operation is accomplished by the word-unit processing, the control of the drawing range for the drawing area is carried out by resetting the pel area, which enables substantially control the pertinent area by generating the start mask data and the end mask data. This simplifies the drawing area control in the pel mode, in other words, in the boldline drawing operation. </paragraph>
<paragraph id="P-0403" lvl="7"><number>&lsqb;0403&rsqb;</number> (6) For the drawing area control in the pel mode, the user can select either the &ldquo;AREA&equals;01&rdquo; mode in which the pel drawing is terminated when the pel area exceeds the drawing area or the &ldquo;AREA&equals;10&rdquo; mode in which when the pel area exceeds the drawing area, the pel drawing is continued without effecting the drawing of the portion outside the drawing area, which enables to multifunctionally effect the area control function. </paragraph>
<paragraph id="P-0404" lvl="0"><number>&lsqb;0404&rsqb;</number> The invention of the present inventors has been concretely described with reference to an embodiment thereof; however, the present invention is not restricted by the embodiment. The embodiment can be changed or modified in various fashions without departing from the scope and spirit of the invention. </paragraph>
<paragraph id="P-0405" lvl="0"><number>&lsqb;0405&rsqb;</number> For example, according to the embodiment above, the &ldquo;PEL&equals;01&rdquo; mode effecting a bold-line drawing with a predetermined line style or the &ldquo;PEL&equals;11&rdquo; mode achieving a bold-line drawing with a predetermined pattern can be selected in the pel mode; however, the operation mode to accomplish a bold-line drawing with a pel is not limited to these modes, for example, it is possible to set an operation mode in which a bold-line drawing operation is effected with a combination of a pattern and a line style. Furthermore, although the embodiment has been described in conjunction with the case where the pel data to define a logical pel is set in the internal memory, the pel data may be so configured to be supplied from the system side. Moreover, in the embodiment above, although various registers are provided in addition to the internal memory IDM, such registers e.g. a temporary register may be implemented by use of an area of the internal memory IDM. In addition, the constitution of the internal bus is not restricted by the configuration mainly including three buses in the embodiment and can be appropriately changed according to purposes. Accordingly, the linkage relationships between the respective functional blocks of the embodiment can also be changed. </paragraph>
<paragraph id="P-0406" lvl="0"><number>&lsqb;0406&rsqb;</number> The invention of the present inventors has been described on the case where the invention is applied to one of the utilization fields as the background thereof, namely, to a graphic display processor; however, the present invention is not restricted by this case and is applicable, for example, to various semiconductor integrated circuits for the graphic control and the display control and to the graphic terminal equipment. The present invention can be applicable to any systems using a logical pel as a dot having an arbitrary shape and an arbitrary size configured corresponding to at least a plurality of pixels. </paragraph>
<paragraph id="P-0407" lvl="0"><number>&lsqb;0407&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference> is a schematic block diagram showing another embodiment having a circuit function effecting the color expansion of characters and the like and the color pixel processing in a drawing processor to which the present invention is applied. The drawing processor according to the present invention is formed, although not particularly limited to, on a semiconductor substrate such as a monocrystalline silicon produced by use of the known manufacturing technology of the semiconductor integrated circuit. </paragraph>
<paragraph id="P-0408" lvl="0"><number>&lsqb;0408&rsqb;</number> The configuration includes source registers SLBU <highlight><bold>3225</bold></highlight> and SLBV <highlight><bold>3226</bold></highlight> each to be loaded with two-word data. For example, data buses UBB <highlight><bold>3232</bold></highlight> and VBB <highlight><bold>3233</bold></highlight> each comprise a 16-bit bus, which effects a data transfer in the 16-bit units. In each of the source data registers SLBU <highlight><bold>3225</bold></highlight> and SLBV <highlight><bold>3226</bold></highlight>, when constituted from a 16-bit register, the two-word source data is stored in two cycles. </paragraph>
<paragraph id="P-0409" lvl="0"><number>&lsqb;0409&rsqb;</number> For example, as shown in <cross-reference target="DRAWINGS">FIG. 75</cross-reference>, the graphic display processor GDP decodes a character code sent from a microprocessor to access via an address bus IAB <highlight><bold>3235</bold></highlight> a character area of the frame buffer memory FB so as to fetch via a data bus IDB <highlight><bold>3237</bold></highlight> a bit pattern in the unit of 16 bits associated with a monochrome display in which a pixel comprises a bit. Namely, in <cross-reference target="DRAWINGS">FIG. 75</cross-reference>, information read out onto the data bus IDB <highlight><bold>3237</bold></highlight> linked to the frame buffer memory FB as a result of an access made by use of the memory addresses MAR&apos;s <highlight><bold>3332</bold></highlight> and <highlight><bold>3333</bold></highlight> via the address bus IAB <highlight><bold>3225</bold></highlight> is fetched into a read data register RDBR <highlight><bold>3325</bold></highlight>. The signal of the read data register RDBR <highlight><bold>3325</bold></highlight> is temporarily stored via a bus UBB <highlight><bold>3232</bold></highlight> to a temporary register (not shown). The subsequent 1-word data is also loaded in the read data register RDBR <highlight><bold>3325</bold></highlight> and is then fetched into the source data register SLBU <highlight><bold>3225</bold></highlight> via the bus <highlight><bold>3232</bold></highlight>. At the same time, the previous 1-word data stored in the temporary register is transferred via a bus VBB <highlight><bold>3233</bold></highlight> to the source data register SLBV <highlight><bold>3226</bold></highlight>. As a result, 2-word character pattern information is read into the source data registers SLBU <highlight><bold>3225</bold></highlight> and SLBV <highlight><bold>3226</bold></highlight>. </paragraph>
<paragraph id="P-0410" lvl="0"><number>&lsqb;0410&rsqb;</number> In the case, for example, where four bits constitute a unit color pixel, information of four first bits as the fundamental of 1-word pixel information is obtained from character information comprising 32 bits in total so as to be fetched into a barrel shifter BRSFT <highlight><bold>3228</bold></highlight>. For the barrel shifter BRLSFT <highlight><bold>3228</bold></highlight>, control signals are generated by the microprogram ROM. For a character A represented in the form of 5 bits&times;7 bits, the microprogram ROM generates a control signal to obtain the first 4 bits (0010), a control signal to attain the next 4 bits (0010), and so on. Namely, bit pattern information is fetched in the unit of foru bits (i.e. a boundary processing is accomplished). The circuits above correspond to the inter-working register of <cross-reference target="DRAWINGS">FIG. 75</cross-reference>. </paragraph>
<paragraph id="P-0411" lvl="0"><number>&lsqb;0411&rsqb;</number> Four-bit character pattern information thus obtained is fed to a data expand circuit DE <highlight><bold>3229</bold></highlight>, which executes a data expansion to form each pixel with four bits. Namely, each of four bits (0010) above is expanded to be 0000, 0000, 1111, and 0000 corresponding to the content thereof. </paragraph>
<paragraph id="P-0412" lvl="0"><number>&lsqb;0412&rsqb;</number> The color registers CL<highlight><bold>0</bold></highlight> <highlight><bold>3305</bold></highlight> and CL<highlight><bold>1</bold></highlight> <highlight><bold>3306</bold></highlight> each are loaded with color pixel information of four pixels. For example, color pixel information of four pixels specified by 0001 is stored in the color register CL<highlight><bold>0</bold></highlight> <highlight><bold>3305</bold></highlight>, whereas color information of four pixels specified by 1101 is stored in the color register CL<highlight><bold>1</bold></highlight> <highlight><bold>3306</bold></highlight>. Each pixel information is processed such that character patterns 1 and 0 (black and white) correspond to, for example, red and blue, respectively. Respective color information of the color registers CL<highlight><bold>0</bold></highlight> <highlight><bold>3305</bold></highlight> and CL<highlight><bold>1</bold></highlight> <highlight><bold>3306</bold></highlight> is supplied to a multiplexer MPX <highlight><bold>3304</bold></highlight> in the unit of a bit. The multiplexer MPX <highlight><bold>3304</bold></highlight> operates depending on an output bit from the bit expansion circuit DE <highlight><bold>3329</bold></highlight>, namely, if the output bit is 0, the bits on the side of the color register CL<highlight><bold>0</bold></highlight> <highlight><bold>3305</bold></highlight> are delivered; whereas if the output bit is 1, the bits on the side of the color register CL<highlight><bold>1</bold></highlight> <highlight><bold>3306</bold></highlight> are outputted. As a result, a character pattern of 0 is converted into color pixel information of 0001, whereas a character pattern of 1 is transformed into color pixel information of 1101. In an image processing of the most basic type, image information above is directly written in the frame buffer memory FB so that a character is drawn in two colors for which a pixel is specified by 0001 or 1101. Namely, a character A is drawn in a color designated by 1101 with a background thereof drawn in a color specified by 0001. </paragraph>
<paragraph id="P-0413" lvl="0"><number>&lsqb;0413&rsqb;</number> In this embodiment, a character pattern in which a pixel comprises a bit is written in the character area of the frame buffer memory FB, and hence a great number of characters and symbols (also including registered graphic forms) can be stored in the area having a small storage capacity. Since the data processing is here achieved in the unit of a word (in the unit of four pixels when a word includes 16 bits and a pixel comprises 4 bits), the monochrome character font can be expanded at a high speed. </paragraph>
<paragraph id="P-0414" lvl="0"><number>&lsqb;0414&rsqb;</number> The color operation processing of the color character information and the source data beforehand drawn in the frame buffer memory FB is also accomplished in the unit of a word. For example, the source data stored in the frame buffer memory FB is, when an address specification is made by use of the memory address registers MAR&apos;s <highlight><bold>3332</bold></highlight> and <highlight><bold>3333</bold></highlight>, read in the word unit into the read data register RDBR <highlight><bold>3325</bold></highlight> in the similar manner as described above and is stored in source data registers (not shown) similar to the source data registers SLBU <highlight><bold>3225</bold></highlight> and SLBV <highlight><bold>3226</bold></highlight>. At the same time, for the boundary processing with the destination data, the 2-word data is read out like in the color expansion of the character pattern. Namely, as shown in <cross-reference target="DRAWINGS">FIG. 76</cross-reference>, when the source data SD is astride two words as indicated by {circle over (1)}-{circle over (5)}, 1-word source data SD<highlight><bold>1</bold></highlight> including pixels 1-3 and another 1-word source data SD<highlight><bold>2</bold></highlight> containing pixels {circle over (4)}-{circle over (5)} are obtained. On the other hand, if the destination data DD comprises a word including pixels {circle over (1)}-{circle over (2)} and a word including pixels {circle over (3)}-{circle over (5)}, the pixels {circle over (1)}-{circle over (2)} of the source data SD<highlight><bold>1</bold></highlight> is shifted by the barrel shifter BRLSFT <highlight><bold>3228</bold></highlight> so as to be aligned to the destination data DD<highlight><bold>1</bold></highlight>. When processing color pixel information, the bit expand circuit DE <highlight><bold>3229</bold></highlight> outputs the output signal from the barrel shifter BRLSFT <highlight><bold>3228</bold></highlight>. The output signal is selectively fed to the buses VBB <highlight><bold>3233</bold></highlight>, WBB <highlight><bold>3234</bold></highlight>, and CLB <highlight><bold>3301</bold></highlight> via a register DLB <highlight><bold>3231</bold></highlight>. For example, in a color operation, the output signal is delivered to the color bus CLB <highlight><bold>3301</bold></highlight> and is supplied therefrom to an arithmetic unit AU <highlight><bold>3317</bold></highlight> and a logic unit <highlight><bold>3322</bold></highlight>. If a predetermined operation is necessary for color character information generated through the color expansion of the character font, character information undergone the color expansion is fed from the multiplexer MPX <highlight><bold>3304</bold></highlight> to the color bus CLB <highlight><bold>3301</bold></highlight>. </paragraph>
<paragraph id="P-0415" lvl="0"><number>&lsqb;0415&rsqb;</number> The arithmetic unit AU <highlight><bold>3317</bold></highlight> effects various color operations in the word unit. For example, detection of an agreement, judgment of the relationship in the magnitude, and the like are accomplished with respect to color information specified by a color compare register CLCMP <highlight><bold>3307</bold></highlight>. Alternatively, the arithmetic unit AU <highlight><bold>3317</bold></highlight> performs a compare operation between the destination data and the source data. Furthermore, a comparison is made between the destination data and color information specified by the color compare register CLCMP <highlight><bold>3307</bold></highlight>. A zero expansion circuit ZE <highlight><bold>3318</bold></highlight> expands the agreement result in the pixel unit into four bits as described above. For example, no operation is carried out for pixels having the same color as the background color and a data reading or extraction is accomplished for the color specified by the color compare register CLCM <highlight><bold>3307</bold></highlight>. A carry expansion circuit CE <highlight><bold>3319</bold></highlight> executes a processing of a carry signal associated with the compare operation. An output signal from the arithmetic unit <highlight><bold>3317</bold></highlight> is delivered via a selector CMPMSEL <highlight><bold>3320</bold></highlight> according to the color compare mode to a mask bus MSKB. </paragraph>
<paragraph id="P-0416" lvl="0"><number>&lsqb;0416&rsqb;</number> The logic unit LU <highlight><bold>3322</bold></highlight> carries out various logical operations in the bit unit, for example, a logical operation processing with the background so as to generate write information in the word unit for the frame buffer memory FB. Write information thus generated is written in the write registers WDBR&apos;s <highlight><bold>3323</bold></highlight> and <highlight><bold>3324</bold></highlight>. Incidentally, the configuration includes a write bus RDB <highlight><bold>3326</bold></highlight>. In this case, a write inhibition may be set for the pixel specified by the mask registers MSK&apos;s <highlight><bold>3311</bold></highlight>-<highlight><bold>3315</bold></highlight>. This enables in a word-unit write operation in the configuration of <cross-reference target="DRAWINGS">FIG. 76</cross-reference> to achieve a mask processing on the positions marked by X where a significant pixel does not exist. While a write operation is being accomplished in the frame buffer memory FB in the word unit, the arithmetic unit AU <highlight><bold>3317</bold></highlight> effects the next color operation and the logic unit LU <highlight><bold>3322</bold></highlight> generates write information for the frame buffer memory FB. While the arithmetic unit AU <highlight><bold>3317</bold></highlight> and the logic unit LU <highlight><bold>3322</bold></highlight> are executing the color operation and the logic operation processing, respectively, the barrel shifter BRLSFT <highlight><bold>3228</bold></highlight> fetches the next pixel to be processed. In other words, the operation to fetch data of a plurality of pixels for the color processing including the boundary processing by the barrel shifter BRLSFT <highlight><bold>3228</bold></highlight>, the color operation processing of the data, and the logical operation processing of the data are effected in a pipeline method; consequently, the color drawing operation can be achieved at a high speed together with the parallel processing of the plurality of pixels (four pixels). </paragraph>
<paragraph id="P-0417" lvl="0"><number>&lsqb;0417&rsqb;</number> The effects of operations attained from the embodiment described in conjunction with FIGS. <highlight><bold>74</bold></highlight>-<highlight><bold>76</bold></highlight> are as follows. </paragraph>
<paragraph id="P-0418" lvl="7"><number>&lsqb;0418&rsqb;</number> (1) When information of a plurality of bits representing a character or a graphic form in which a pixel comprises a bit, a plurality of bits to be subjected to a color expansion are attained by use of a barrel shifter so as to expand the bits into bit information associated with a plurality of color pixels in which a pixel comprises N bits; furthermore, based on bit information thus attained, the system causes a first color register and a second color register respectively holding color pixel information of the plurality of pixels in which a pixel comprises N bits to selectively output the contents thereof, thereby generating at a high speed data of a plurality of pixels constituting a color character or the like. In other words, there is obtained an effect that the color expansion of the character font can be achieved at a high speed. </paragraph>
<paragraph id="P-0419" lvl="7"><number>&lsqb;0419&rsqb;</number> (2) Since a pixel comprises a bit in the character pattern written in the character area of the frame buffer, a great number of characters or symbols (including registered graphic forms) can be stored in the area having a small storage capacity. </paragraph>
<paragraph id="P-0420" lvl="7"><number>&lsqb;0420&rsqb;</number> (3) Two-word color pixel information in which a word includes color pixel information of a plurality of color pixels is stored in a source data register, the pixel data is fetched therefrom in the word unit by aligning the data to the destination data, a color compare operation is accomplished according to the color compare mode between the pixel data thus obtained and the destination data or color information specified by the color compare register CLCMP or between the destination data and color information specified by the color compare register CLCMP, and then write color pixel information in the word unit is generated from the output signal from the barrel shifter and the destination data in response to the output signal as a result of the compare operation and a predetermined color processing signal. This results in an advantageous effect that the speed of the color drawing operation is increased. </paragraph>
<paragraph id="P-0421" lvl="7"><number>&lsqb;0421&rsqb;</number> (4) The operation to fetch pixel data to be processed by the barrel shifter, the color operation processing of the pixel data, and the logic operation to generate write signals to be written in the frame buffer memory are effected in the pipeline method, which leads to an effect that the color drawing operation can be accomplished at a high speed together with the processing of the color image signals in the word unit. </paragraph>
<paragraph id="P-0422" lvl="0"><number>&lsqb;0422&rsqb;</number> As for variations of the present embodiment, the configurations of the registers and operation circuits as well as the bus system can be modified in various fashions if the similar operations are implemented. </paragraph>
<paragraph id="P-0423" lvl="0"><number>&lsqb;0423&rsqb;</number> The present invention is widely applicable to various information processing apparatuses such as the graphic display processor which achieves processing of graphic data. </paragraph>
<paragraph id="P-0424" lvl="0"><number>&lsqb;0424&rsqb;</number> While the present invention has been described with reference to the particular illustrative embodiments, it is not restricted by those embodiments but only by the appended claims. It is to be appreciated that those skilled in the art can change and modify the embodiment without departing from the scope and spirit of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A graphic processing system comprising: 
<claim-text>first store means for storing a program and information corresponding to pixels; </claim-text>
<claim-text>first processor means for processing an execution of the program transferred from said first store means and/or a program transferred from an external device so as to control the entire system; </claim-text>
<claim-text>output means for outputting image information by control of pixels arranged in a plurality of dimensions; </claim-text>
<claim-text>second store means for storing information corresponding to pixels outputted from said output means; and </claim-text>
<claim-text>second processor means responsive to a command and parameter information transferred from said first store means and/or said first processor means for generating character and graphic data in accordance with a predetermined processing procedure, and controlling a transfer of data to said first store means and/or said second store means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A graphic processing system comprising: 
<claim-text>a first address bus and a second address bus; </claim-text>
<claim-text>first store means connected to said first address bus and said first data bus for storing a program and information corresponding to pixels; </claim-text>
<claim-text>first processor means connected to said first address bus and said first data bus for processing an execution of said program transferred from said first store means and/or a program transferred from the external so as to control the overall system; </claim-text>
<claim-text>output means for outputting image information by a control of pixels arranged in a plurality of dimensions; </claim-text>
<claim-text>second store means connected to said second address bus and said second data bus for storing information corresponding to pixels outputted from said output means; </claim-text>
<claim-text>bus connection control means for performing a connection control to effect connection or disconnection between said first address bus and said second address bus and between said first data bus and said second data bus; and </claim-text>
<claim-text>second processor means for processing image information and for effecting a transfer control of said image information; and </claim-text>
<claim-text>said second processor means responsive to a command and parameter information transferred through said first address bus from said first store means and/or said first processor means for controlling said bus connection control means in accordance with a predetermined processing procedure; </claim-text>
<claim-text>thereby said second processor means establishing a connection between said first address bus and said second address bus and between said first data bus and said second data bus so as to access said first store means; and </claim-text>
<claim-text>alternatively effecting a disconnection between said first address bus and said second address bus and between said first data bus and said second data bus so as to access said second store means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein said second processor means receives and processes a command and parameter information transferred through said first address bus from said first store means and/or said first processor means to generate character and graphic data and to control said bus connection control means, in accordance with a predetermined processing procedure; 
<claim-text>said second processor means thereby establishing a connection between said first address bus and said second address bus and between said first data bus and said second data bus so as to transfer said character and graphic data to said first store means; </claim-text>
<claim-text>said second processor means alternatively thereby effecting a disconnection between said first address bus and said second address bus and between said first data bus and said second data bus so as to transfer said character and graphic data to said second store means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further including a plurality of sets, each comprising said second processor means, said second address bus, said second data bus, said second store means, and said bus connection control means wherein 
<claim-text>a read access from said first store means is executed by use of address information supplied from one of said plurality of second processor means and </claim-text>
<claim-text>said plurality of bus connection control means are controlled such that said read data can be concurrently read in said plurality of second processor means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for sequentially generating an address corresponding to the pixel to access said store means so as to generate graphic information decomposed in the pixel unit wherein 
<claim-text>said processor means includes auxiliary store means for storing pattern information comprising a plurality of pixels and draws pattern information stored in said auxiliary store means in an area with reference to said pixel address each time an address of each said pixel obtained by decomposing a line in the pixel unit is sequentially generated, whereby a bold line is drawn by repetitiously effecting the drawing of the pattern information. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for sequentially generating an address corresponding to the pixel to access said store means so as to generate graphic information decomposed in the pixel unit wherein 
<claim-text>said processor means includes: 
<claim-text>auxiliary store means for storing pattern information to be referenced when a drawing is executed; </claim-text>
<claim-text>means for generating a drawing pixel address; and </claim-text>
<claim-text>decode means for decoding information in a portion of said pixel address so as to output a signal to select said auxiliary store means, whereby 
<claim-text>when said auxiliary store means is selected, an output of the drawing address for said first store means is inhibited. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for accessing said store means to effect a graphic processing wherein 
<claim-text>said store means includes an area for storing parameters of two kinds defining corresponding relationships between an X-Y coordinate origin and a pixel address of said store means, said origin defining at least a first X-Y coordinate space and a second X-Y coordinate space and </claim-text>
<claim-text>said processor means comprises transfer address generating means for generating an address to transfer area data defined in said first X-Y coordinate space to an area defined in said second X-Y coordinate space. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further including means for enabling to independently define a number of horizontal pixels for each of said first X-Y coordinate space and said second X-Y coordinate space. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further including means for enabling to independently define a number of bits per pixel for each of said first X-Y coordinate space and said second X-Y coordinate space. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for sequentially generating an address corresponding to the pixel to access said store means to generate graphic information decomposed in the pixel unit wherein 
<claim-text>said processor means including: 
<claim-text>means for defining a straight line by use of two X-Y coordinate parameters and </claim-text>
<claim-text>means for controlling a drawing to be performed only in a range defined only by two parameters including a drawing start pixel number and a drawing end pixel number of the straight line. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for accessing said store means to generate graphic information wherein 
<claim-text>said processor means including: 
<claim-text>first means for defining two arbitrary straight lines by use of four X-Y coordinate parameters; </claim-text>
<claim-text>second means for defining two straight lines parallel to an X axis by use of two Y-coordinate parameters; and </claim-text>
<claim-text>third means for combining an output from said first means and an output from said second means to effect a drawing operation in an area surrounded with said four straight lines outputted. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for accessing said store means to generate graphic information wherein 
<claim-text>said processor means includes: 
<claim-text>first means for respectively defining, based on X-Y coordinate parameters in the pixel unit stored in said store means, a right-half or a left-half of a circle based on a center coordinate and a radius, a straight line based on two X-Y coordinate parameters, and two straight lines parallel to an X axis based on two Y-coordinate parameters; and </claim-text>
<claim-text>second means for generating a control signal to effect a drawing operation within an area surrounded by the arc and the three straight lines defined by said first means. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A graphic processing system comprising: 
<claim-text>store means for storing information in a pixel unit; and </claim-text>
<claim-text>processor means for accessing said store means to generate graphic information wherein 
<claim-text>said store means stores character font patterns and information including a horizontal reference start position and a horizontal reference end position for each said character and </claim-text>
<claim-text>said processor means includes means for generating a control signal to effect a drawing of said a specified character font pattern read from said store means only in a range surrounded by a horizontal reference start position and a horizontal reference end position. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A graphic processing system comprising: 
<claim-text>first means for storing information in a pixel unit including a predetermined plurality of bits arranged in two dimensions such that a plurality of images adjacent to each other correspond to a word; </claim-text>
<claim-text>second means for sequentially calculating at least a write address and outputting a write data to effect a write control; and </claim-text>
<claim-text>third means responsive to an output from said second means for controlling a write operation on said first means wherein 
<claim-text>said second means includes: 
<claim-text>means for generating information to be added as information identifying a pixel to be written to a word-unit address so as to identify a pixel in a word and </claim-text>
<claim-text>means for generating a control signal indicating a word-unit write operation or a pixel-unit write operation and </claim-text>
<claim-text>said third means includes: 
<claim-text>means for controlling, in a word-unit write operation, to write 1-word write data in said first means and </claim-text>
<claim-text>means for decoding, in a pixel-unit write operation, said information identifying a pixel so as to write pixel data only in predetermined positions in said first means, thereby enabling both write operations in the word unit and in the pixel unit. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A graphic processing system comprising: 
<claim-text>first means for storing information in a pixel unit including a predetermined number of bits arranged in two dimensions such that a plurality of images adjacent to each other correspond to a word; </claim-text>
<claim-text>second means for sequentially calculating at least a write address and outputting write data to effect a vector write control; and </claim-text>
<claim-text>third means responsive to an output from said second means for controlling a write operation on said first means wherein 
<claim-text>said second means includes: 
<claim-text>means for generating information to be added as information identifying a pixel to be written to a word-unit address to identify a pixel in a word and </claim-text>
<claim-text>means for generating a control signal indicating a word-unit write operation or a pixel-unit write operation and </claim-text>
<claim-text>said third means includes: 
<claim-text>means for controlling, in a word-unit write operation, to write 1-word write data in said first means, whereby </claim-text>
<claim-text>in a pixel-unit write operation, a control is effected such that said information identifying a pixel is decoded so as to write pixel data only in predetermined positions in said first means. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A graphic processing system comprising: 
<claim-text>first means for storing information in a pixel unit including a plurality of bits arranged in two dimensions such that a plurality of images adjacent to each other correspond to a word; </claim-text>
<claim-text>second means for sequentially calculating a read address and/or a write address, outputting write data, and specifying an operation mode so as to effect a read operation, a computation, and a write operation control on pixel data; and </claim-text>
<claim-text>third means responsive to an output from said second means for controlling a read operation and/or a write operation on said first means wherein 
<claim-text>said second means includes: 
<claim-text>means for generating information to be added as information identifying a pixel to be read and/or to be written to a word-unit address so as to identify a pixel in a word and </claim-text>
<claim-text>means for generating a control signal indicating a word-unit read operation and/or word-unit write operation or a pixel-unit read operation and/or a pixel-unit write operation and </claim-text>
<claim-text>said third means includes: 
<claim-text>means for controlling, in a word-unit write operation, to write 1-word write data in said first means and </claim-text>
<claim-text>means for decoding, in a pixel-unit write operation, said information identifying a pixel so as to write pixel data only in predetermined positions in said first means, </claim-text>
<claim-text>said third means controlling execution of a pixel-unit write operation when an operation mode indicates a mode specifying a replacement of a new pixel and to read a predetermined word from said first means when the operation mode indicates a mode specifying a computation between a new pixel and an old pixel so as to effect the computation only on predetermined pixel positions in said second means, thereby writing the word in said first means. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein 
<claim-text>said third means includes means for generating a control signal which enables a pixel-unit write operation when a curve including a straight line in an arbitrary direction is generated and which enables a word-unit write operation when a drawing is carried out to paint a plane. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein 
<claim-text>said second means includes means for specifying a number of bits constituting a pixel and </claim-text>
<claim-text>a number of bits of an information output specifying pixel positions in the word are variable corresponding to the number of bits constituting said pixel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A graphic processing system according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein 
<claim-text>said first means includes an operation function in a memory element thereof, thereby effecting an operation between a new pixel and an old pixel by specifying a pixel-unit write operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A graphic processing system comprising: 
<claim-text>first means for storing information in a word unit arranged in two dimensions such that a plurality of images adjacent to each other correspond to a word; </claim-text>
<claim-text>second means for sequentially calculating a drawing address and outputting drawing data to effect a drawing control; and </claim-text>
<claim-text>third means responsive to an output from said second means for controlling a read operation and a write operation on said first means wherein 
<claim-text>said second means outputs information to be added to a word-unit address so as to specify at least a pixel in a word </claim-text>
<claim-text>said third means writing drawing data only for at least a pixel specified by an output from said second means. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A graphic processing device controlling generation and transfer of graphic data on a display memory storing the graphic data comprising: 
<claim-text>first means for sequentially calculating a drawing coordinate in accordance with a predetermined algorithm; </claim-text>
<claim-text>second means for calculating a display memory address corresponding to the drawing coordinate so as to execute a drawing operation; </claim-text>
<claim-text>a first microprogram control device having a first microprogram controlling said first means; </claim-text>
<claim-text>a second microprogram control device having a second microprogram controlling said second means, said first microprogram control device and said second microprogram control device being individually provided; and </claim-text>
<claim-text>means for initiating said second microprogram by use of said first microprogram controlling said first means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said second microprogram controlling said second means can independently operate a program after said second microprogram is initiated by said first microprogram controlling said first means. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further including means for stopping said first microprogram controlling said first means if said second microprogram controlling said second means is already in an execution when said first microprogram controlling said first means initiates said second microprogram controlling said second means. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further including: 
<claim-text>third means for registering an address of the first microprogram controlling said first means; </claim-text>
<claim-text>fourth means for setting information to effect a multiway branch of said program; </claim-text>
<claim-text>fifth means for specifying significant bit positions of said fourth means; </claim-text>
<claim-text>means operative, when the first microprogram controlling said first means sets a jump address to said third means, for substituting information of said fourth means in place of said jump address for the bit positions specified by said fifth means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further including: 
<claim-text>sixth means for making an entry of an address at which the first microprogram controlling said first means is stopped; </claim-text>
<claim-text>seventh means for comparing said third means and said sixth means and for outputting a signal when an agreement results in the comparison, the signal outputted from said seventh means being a set signal or a reset signal of said third means; and </claim-text>
<claim-text>means for making an entry of data unique to said third means when the agreement signal is outputted. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A graphic processing device comprising: 
<claim-text>pel data store means for storing a pel data representing as a drawing unit, a set of drawing dots having an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels; </claim-text>
<claim-text>a current pointer for indicating a drawing position of a pel; and </claim-text>
<claim-text>operate means for effecting a logic operation for a drawing operation based on pel data according to a position of the indication point of said current pointer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference> wherein said operate means effects an operation processing so as to perform a pel drawing operation with a predetermined pattern based on pattern information or with a predetermined line style based on line style information. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A graphic processing device comprising: 
<claim-text>pel data store means for storing binary information of a pel data representing as a drawing unit, a set of drawing dots having an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels; </claim-text>
<claim-text>a current pointer indicating a pel drawing position in a predetermined bit unit; </claim-text>
<claim-text>color expansion means for effecting a color expansion of a 1-boundary pel data for a pel drawing operation corresponding to a position of the indication point of said current pointer; and </claim-text>
<claim-text>operation means for effecting a logic operation for a drawing operation based on the pel data undergone the color expansion. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A graphic processing device comprising: 
<claim-text>pel data store means for storing a pel data representing as a drawing unit, a set of drawing dots having an arbitrary shape and an arbitrary size configured corresponding to a plurality of pixels; </claim-text>
<claim-text>a current pointer indicating a pel drawing position; </claim-text>
<claim-text>area compare means for judging whether or not a drawing area contains a pel area corresponding to pel data associated with the indication point of said current pointer; </claim-text>
<claim-text>data expansion means for generating mask data to control a pel drawing operation outside the drawing area based on the result of the comparison in said area compare means; and </claim-text>
<claim-text>operation means for effecting a logic operation for a drawing operation based on the pel data and the mask data according to a position of the indication point of the current pointer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A graphic processing device according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein said operation means undergoes a management control with respect to the drawing area in accordance with an operation mode in which when the pel area exceeds the drawing area, the pel drawing operation is terminated and in accordance with another operation mode in which when the pel area exceeds the drawing area, the pel drawing operation is continued without effecting a drawing operation of pixels corresponding to a portion outside the drawing area. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A graphic processing device comprising: 
<claim-text>source registers for storing color pixel information of two words, each said word including a plurality of color pixel information; </claim-text>
<claim-text>a barrel shifter for receiving said color pixel information of two words to fetch pixel data in a unit of a word, said pixel data aligned to destination data; </claim-text>
<claim-text>an operation circuit for effecting a color operation comparison in accordance with a color compare mode between an output signal from said barrel shifter and the destination data, between the output signal and color information specified by a color compare register, or between the destination data and the color information specified by the color compare register; and </claim-text>
<claim-text>a logic circuit for generating write color pixel information in the word unit from an output signal from said barrel shifter and the destination data depending on an output signal from said operate circuit and a predetermined color processing signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A graphic processing device according to claim <highlight><bold>31</bold></highlight> wherein said a word comprises M bits and said pixel includes N bits.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001850A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001850A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001850A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001850A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001850A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001850A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001850A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001850A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001850A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001850A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001850A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001850A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001850A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030001850A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030001850A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030001850A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030001850A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030001850A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030001850A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030001850A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030001850A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030001850A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030001850A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030001850A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030001850A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030001850A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030001850A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030001850A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030001850A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030001850A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00030">
<image id="EMI-D00030" file="US20030001850A1-20030102-D00030.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00031">
<image id="EMI-D00031" file="US20030001850A1-20030102-D00031.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00032">
<image id="EMI-D00032" file="US20030001850A1-20030102-D00032.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00033">
<image id="EMI-D00033" file="US20030001850A1-20030102-D00033.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00034">
<image id="EMI-D00034" file="US20030001850A1-20030102-D00034.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00035">
<image id="EMI-D00035" file="US20030001850A1-20030102-D00035.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00036">
<image id="EMI-D00036" file="US20030001850A1-20030102-D00036.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00037">
<image id="EMI-D00037" file="US20030001850A1-20030102-D00037.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00038">
<image id="EMI-D00038" file="US20030001850A1-20030102-D00038.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00039">
<image id="EMI-D00039" file="US20030001850A1-20030102-D00039.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00040">
<image id="EMI-D00040" file="US20030001850A1-20030102-D00040.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00041">
<image id="EMI-D00041" file="US20030001850A1-20030102-D00041.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00042">
<image id="EMI-D00042" file="US20030001850A1-20030102-D00042.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00043">
<image id="EMI-D00043" file="US20030001850A1-20030102-D00043.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00044">
<image id="EMI-D00044" file="US20030001850A1-20030102-D00044.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00045">
<image id="EMI-D00045" file="US20030001850A1-20030102-D00045.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00046">
<image id="EMI-D00046" file="US20030001850A1-20030102-D00046.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00047">
<image id="EMI-D00047" file="US20030001850A1-20030102-D00047.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00048">
<image id="EMI-D00048" file="US20030001850A1-20030102-D00048.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00049">
<image id="EMI-D00049" file="US20030001850A1-20030102-D00049.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00050">
<image id="EMI-D00050" file="US20030001850A1-20030102-D00050.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00051">
<image id="EMI-D00051" file="US20030001850A1-20030102-D00051.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00052">
<image id="EMI-D00052" file="US20030001850A1-20030102-D00052.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00053">
<image id="EMI-D00053" file="US20030001850A1-20030102-D00053.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00054">
<image id="EMI-D00054" file="US20030001850A1-20030102-D00054.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00055">
<image id="EMI-D00055" file="US20030001850A1-20030102-D00055.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00056">
<image id="EMI-D00056" file="US20030001850A1-20030102-D00056.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00057">
<image id="EMI-D00057" file="US20030001850A1-20030102-D00057.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00058">
<image id="EMI-D00058" file="US20030001850A1-20030102-D00058.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00059">
<image id="EMI-D00059" file="US20030001850A1-20030102-D00059.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00060">
<image id="EMI-D00060" file="US20030001850A1-20030102-D00060.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00061">
<image id="EMI-D00061" file="US20030001850A1-20030102-D00061.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00062">
<image id="EMI-D00062" file="US20030001850A1-20030102-D00062.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00063">
<image id="EMI-D00063" file="US20030001850A1-20030102-D00063.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00064">
<image id="EMI-D00064" file="US20030001850A1-20030102-D00064.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00065">
<image id="EMI-D00065" file="US20030001850A1-20030102-D00065.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00066">
<image id="EMI-D00066" file="US20030001850A1-20030102-D00066.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00067">
<image id="EMI-D00067" file="US20030001850A1-20030102-D00067.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00068">
<image id="EMI-D00068" file="US20030001850A1-20030102-D00068.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00069">
<image id="EMI-D00069" file="US20030001850A1-20030102-D00069.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
