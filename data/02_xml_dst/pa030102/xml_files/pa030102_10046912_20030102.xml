<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005351A1-20030102-D00000.TIF SYSTEM "US20030005351A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005351A1-20030102-D00001.TIF SYSTEM "US20030005351A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005351A1-20030102-D00002.TIF SYSTEM "US20030005351A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005351</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10046912</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020117</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-38804</doc-number>
</priority-application-number>
<filing-date>20010630</filing-date>
<country-code>KR</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F011/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>714</class>
<subclass>004000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method of upgrading software in a network environment and a network device for performing the same</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Yong-Jun</given-name>
<family-name>Lim</family-name>
</name>
<residence>
<residence-non-us>
<city>Seoul</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>SAMSUNG ELECTRONICS CO., LTD.</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>SUGHRUE MION, PLLC</name-1>
<name-2></name-2>
<address>
<address-1>2100 Pennsylvania Avenue, NW</address-1>
<city>Washington</city>
<state>DC</state>
<postalcode>20037-3213</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of upgrading software and a network device for performing the same are provided so that the operation of a network device is not catastrophically affected by a failure occurring while software is being upgraded in a network environment. The method includes upgrading software through the network and checking whether at least one failure occurs during the upgrade, operating the network device based on an old version of the software used before the upgrade is performed when it is determined that at least one failure has occurred, and operating the network device based on a new version of the software to which the old version is upgraded when it is determined that a failure has not occurred. Accordingly, even if the upgrade of the software is not performed normally, the network device can reattempt the upgrade of the software without being serviced or without using an external memory device. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a method of upgrading software in a network environment and a network device for performing the upgrade, and more particularly, to a method of upgrading software, through which a network device can be protected when an unexpected failure occurs in a network or a network device during an upgrade of the software, and a network device for performing the same. The present application is based on Korean Application No. 2001-38804, filed Jun. 30, 2001, which is incorporated herein by reference. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> As network environments develop, the need of network service providers, network operators, and network device users to upgrade software for network devices increases. Network devices include mobile and portable telephones and personal computers that can transmit and receive data through a network. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> However, when an unexpected failure occurs in a network device or a network during a software upgrade of the network device, the upgrade is not completed normally. Moreover, a catastrophic influence may be exerted on the network device. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In other words, when a failure occurs in a network while a new version of software is being downloaded through the network to upgrade the software of a network device, the new version of the software cannot be downloaded normally. Here, the problem can be overcome by trying to download the new version again. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> However, when an unexpected failure occurs in a network device from which the old version of the software has been erased, while a new version of the software is being stored in a storage area to upgrade the software, the network device cannot normally store the new version of the software. As a result, the network device cannot perform functions that use the software. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In the case where the software to be upgraded does not greatly affect the operation of a network device, even when an unexpected failure occurs in the network device as described above, a problem can be prevented by connecting an interface block provided in the network device to an external memory device and newly downloading the software. However, in this case, it is inefficient that the external memory device must be managed to store the new version of the software or to store the version of the software which is currently stored in the network device. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In the case where the software to be upgraded greatly affects the operation of a network device, as in an operating system (OS), when an unexpected failure occurs in the network device as described above, the network device is catastrophically affected and does not operate at all. Here, the problem cannot be solved solely by using an external memory device, as described above. A corresponding chip or the network device must be replaced. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> To solve the above-described problems, it is a first object of the present invention to provide a method of upgrading software, through which the operation of a network device is not catastrophically affected by a failure occurring while software is being upgraded in a network environment, and a network device for performing the same. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> It is a second object of the present invention to provide a method of upgrading software, through which a network device can operate normally even if a software upgrade is not accomplished normally in a networked environment due to a failure, and a network device for performing the same. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> To achieve the above objects of the invention, there is provided a method for upgrading software of a network device through a network. The method includes the steps of upgrading software through the network and checking whether at least one failure occurs during the upgrade, operating the network device based on an old version of the software used before the upgrade is performed when it is determined that at least one failure has occurred, and operating the network device based on a new version of the software to which the old version is upgraded when it is determined that a failure has not occurred. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Preferably, the upgrading of software includes the steps of downloading the new version of the software through the network, copying the old version of the software stored in a first area of the network device to a second area of the network device, erasing the old version of the software from the first area of the network device, and storing the new version of the software in the first area. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Preferably, the failure is a failure in the network device which is checked during the erasing and storing steps. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> To achieve the above objects of the invention in one embodiment, there is provided a network device capable of upgrading software through a network. The network device includes a monitoring unit for monitoring at least one failure while software is being upgraded; a first memory for storing software necessary for operating the network device; a second memory for storing information transferred through the network; a controller for performing control to store information, which is downloaded through the network to upgrade the software, in the second memory, and store an old version of the software in an empty area of the first memory before the old version of the software stored in the first memory is upgraded with the information stored in the second memory; and a decoder for selecting a memory, which is used for upgrading the software, from the first memory and the second memory according to a control signal received from the controller and the result of monitoring received from the monitoring unit, and setting an address. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In another embodiment, there is provided a network device capable of upgrading software through a network. The network device includes a monitoring unit for monitoring whether at least one failure occurs while software is being upgraded; a first memory for storing software necessary for operating the network device; a second memory for storing data necessary for operating the network device; a third memory for storing information transferred through the network; a controller for performing control to store information, which is downloaded through the network to upgrade the software, in the third memory, and store an old version of the software in an empty area of the second memory before the old version of the software stored in the first memory is upgraded to the information stored in the third memory; and a decoder for selecting a memory, which is used for upgrading the software, according to a control signal received from the controller and the result of monitoring received from the monitoring unit, and setting an address.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The above objects and advantages of the present invention will become more apparent by describing in detail preferred embodiments thereof with reference to the attached drawings in which: </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a network device according to a preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart of a method of upgrading software according to a preferred embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> network device according to the present invention includes a monitoring unit <highlight><bold>100</bold></highlight>, a network interface unit <highlight><bold>104</bold></highlight>, a chip selection/address decoder <highlight><bold>105</bold></highlight>, a controller <highlight><bold>106</bold></highlight>, a conditional access system (CAS) <highlight><bold>107</bold></highlight>, a flash memory <highlight><bold>108</bold></highlight> for storing code data, a non-volatile memory <highlight><bold>109</bold></highlight> for storing data, and a system memory <highlight><bold>110</bold></highlight> for storing execution data. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The monitoring unit <highlight><bold>100</bold></highlight> monitors at least one failure while software of a network device is being upgraded. The monitoring unit <highlight><bold>100</bold></highlight> includes a watchdog monitor <highlight><bold>101</bold></highlight>, a power failure monitor <highlight><bold>102</bold></highlight>, and a network connection monitor <highlight><bold>103</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The watchdog monitor <highlight><bold>101</bold></highlight> monitors generation of a clock signal through which the operation of the network device can be monitored to monitor whether the network device operates normally, and sends the monitoring results to the chip selection/address decoder <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The power failure monitor <highlight><bold>102</bold></highlight> monitors whether a power voltage supplied from a power supply (not shown) within the network device drops below a predetermined level, and sends the monitoring result to the chip selection/address decoder <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The network connection monitor <highlight><bold>103</bold></highlight> monitors the state of data transmitted and received through the network interface unit <highlight><bold>104</bold></highlight>, and sends the monitoring results to the chip selection/address decoder <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The network interface unit <highlight><bold>104</bold></highlight> performs interfacing to allow data communications between a party, which provides the new version of the software to be upgraded through a network (not shown), and the network device shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In particular, the network interface unit <highlight><bold>104</bold></highlight> can be realized by decoding received software and checking received data for errors. Data error checking can be performed by way of checksum. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The CAS <highlight><bold>107</bold></highlight> transmits data and receives data between the party providing software through the network and the network device shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and performs authentication of the network device for a software upgrade. In other words, the CAS <highlight><bold>107</bold></highlight> verifies whether the network device has the authority to upgrade the corresponding software. Here, upgrading of software can be performed according to the determination of a software provider or at the request of a network device user. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The flash memory <highlight><bold>108</bold></highlight> for code data stores software such as an operating system (OS) necessary for operating the network device. When software stored in the flash memory <highlight><bold>108</bold></highlight> is upgraded, if the flash memory <highlight><bold>108</bold></highlight> has an empty area, the old version of the software can be stored in the empty area through the operation of the chip selection/address decoder <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The non-volatile memory <highlight><bold>109</bold></highlight> for data stores data necessary for operating the network device. In particular, when software stored in the flash memory <highlight><bold>108</bold></highlight> is upgraded, the old version of the software that has been stored in the flash memory <highlight><bold>108</bold></highlight> can be stored in an empty area existing in the non-volatile memory <highlight><bold>109</bold></highlight> through the operation of the chip selection/address decoder <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The system memory <highlight><bold>110</bold></highlight> stores information transmitted through the network when the network device is operated. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The controller <highlight><bold>106</bold></highlight> controls the network device to be able to upgrade software. In other words, once the new version of the software to be upgraded is downloaded through the network interface unit <highlight><bold>104</bold></highlight> and the CAS <highlight><bold>107</bold></highlight>, the controller <highlight><bold>106</bold></highlight> sends a control signal to the chip selection/address decoder <highlight><bold>105</bold></highlight> so that the new version of the software can be stored in the system memory <highlight><bold>110</bold></highlight>. Accordingly, the chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal for the system memory <highlight><bold>110</bold></highlight> and an address to indicate an area of the system memory <highlight><bold>110</bold></highlight> in which the software is to be stored so that the received new version of the software can be stored in a desired area of the system memory <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Next, the controller <highlight><bold>106</bold></highlight> sends a control signal to the chip selection/address decoder <highlight><bold>105</bold></highlight> so that the old version of the software stored in the flash memory <highlight><bold>108</bold></highlight> can be stored in an empty area of the flash memory <highlight><bold>108</bold></highlight> or in an empty area of the non-volatile memory <highlight><bold>109</bold></highlight>. Accordingly, when the old version of the software is stored in the empty area of the flash memory <highlight><bold>108</bold></highlight>, the chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal and an address so that a path for storing can be set. In other words, the chip selection/address decoder <highlight><bold>105</bold></highlight> does not change the chip selection signal but changes the address. When the old version of the software is stored in the empty area of the non-volatile memory <highlight><bold>109</bold></highlight>, the chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal and an address so that a path for storing can be set. In other words, the chip selection/address decoder <highlight><bold>105</bold></highlight> changes both the chip selection signal and the address. Here, when the start address of the empty area of the non-volatile memory <highlight><bold>109</bold></highlight> is the same as the start address of an area where the old version of the software is stored in the flash memory <highlight><bold>108</bold></highlight>, the chip selection/address decoder <highlight><bold>105</bold></highlight> changes only the chip selection signal. Therefore, the old version of the software stored in the flash memory <highlight><bold>108</bold></highlight> is copied to another area. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The controller <highlight><bold>106</bold></highlight> also sends a control signal to the chip selection/address decoder <highlight><bold>105</bold></highlight> so that the new version of the software stored in the system memory <highlight><bold>110</bold></highlight> can be stored in an area where the old version of the software is stored in the flash memory <highlight><bold>108</bold></highlight>, thereby upgrading the software. The area where the old version of the software is stored is an area where the original old version of the software is stored in the flash memory <highlight><bold>108</bold></highlight> before the copying is performed. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal and an address in response to a control signal sent by the controller <highlight><bold>106</bold></highlight> so that the new version of the software stored in the system memory <highlight><bold>110</bold></highlight> can be stored in the flash memory <highlight><bold>108</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> While software is being upgraded, the chip selection/address decoder <highlight><bold>105</bold></highlight> continuously monitors the result of monitoring provided from the monitoring unit <highlight><bold>100</bold></highlight>. When a signal indicating a failure is received from the network connection monitor <highlight><bold>103</bold></highlight> while the new version of the software is being downloaded to the system memory <highlight><bold>110</bold></highlight>, the chip selection/address decoder <highlight><bold>105</bold></highlight> is initialized. When a signal indicating a failure is received from the watchdog monitor <highlight><bold>101</bold></highlight> or the power failure monitor <highlight><bold>102</bold></highlight> while information stored in the system memory <highlight><bold>110</bold></highlight> is being stored in the flash memory, the chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal and an address to select a memory necessary for restarting the network device based on the old version of the software. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart of a method of upgrading software according to an embodiment of the present invention. In an initial state in step <highlight><bold>201</bold></highlight>, when the network connection between a software provider and a network device as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is set in step <highlight><bold>202</bold></highlight>, the version of software to be provided by the software provider is compared with the version of the software provided in the network device in step <highlight><bold>203</bold></highlight>. If the version of the software provided in the network device is not old, upgrading of the software is not necessary and the operation goes back to step <highlight><bold>201</bold></highlight> so that the network device is maintained at the initial state. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> If the version of the software provided in the network device is old, upgrading of the software is started in step <highlight><bold>204</bold></highlight>. User authentication is performed in step <highlight><bold>205</bold></highlight>. In other words, authentication is performed through data transmission between the software provider and the network device for user authentication, as described with respect to the CAS <highlight><bold>107</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The authentication is accomplished by a conventional method. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> If the user authentication fails in step <highlight><bold>205</bold></highlight>, the network device does not have the authority to upgrade the software and the operation goes back to step <highlight><bold>201</bold></highlight>. In contrast, if the user authentication succeeds in step <highlight><bold>205</bold></highlight>, the software is downloaded to the system memory <highlight><bold>110</bold></highlight> and a check is made as to whether a network disconnection has occurred and whether an error has occurred in the data of the received software in step <highlight><bold>206</bold></highlight>. Data error checking for the received software can be performed by way of checksum. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> When it is determined that a network disconnection or data error occurred in step <highlight><bold>207</bold></highlight>, the operation goes back to step <highlight><bold>201</bold></highlight>, and upgrading of software is not performed. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In contrast, when it is determined that neither a network disconnection nor a data error occurred in step <highlight><bold>207</bold></highlight>, a check is made as to whether downloading is completed in step <highlight><bold>208</bold></highlight>. If it is determined that downloading is not complete in step <highlight><bold>208</bold></highlight>, steps <highlight><bold>206</bold></highlight> and <highlight><bold>207</bold></highlight> are repeated. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> If it is determined that the downloading is completed in step <highlight><bold>208</bold></highlight>, the old version of the software is copied to another area in step <highlight><bold>209</bold></highlight>. Another area may be an empty area of the flash memory <highlight><bold>108</bold></highlight> or an empty area of the non-volatile memory <highlight><bold>109</bold></highlight>, as described in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In step <highlight><bold>210</bold></highlight>, the software is upgraded to a new version, and it is checked whether a failure such as a power failure or system hang-up occurs in the network device during the upgrading. Here, for a software upgrade, a path to an area in which the old version of the software is stored is changed to a path to the area to which the old version has been copied. In other words, when the old version has been copied to an empty area of the flash memory <highlight><bold>108</bold></highlight>, the chip selection/address decoder <highlight><bold>105</bold></highlight> sets a chip selection signal and an address to designate the empty area of the flash memory <highlight><bold>108</bold></highlight>. Next, the original old version of the software is erased from the flash memory <highlight><bold>108</bold></highlight>, and then the new version of the software stored in the system memory <highlight><bold>110</bold></highlight> is copied to the area from which the original old version was erased in the flash memory <highlight><bold>108</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The monitoring unit <highlight><bold>100</bold></highlight> checks whether a failure such as a power failure or system hang-up occurs in the network device during the upgrading. When it is determined that at least one failure has occurred in the network device in step <highlight><bold>211</bold></highlight>, the network device is restarted based on the old version of the software in step <highlight><bold>212</bold></highlight>. Then, the operation returns to step <highlight><bold>201</bold></highlight>. In contrast, when it is determined that no failures have occurred in the network device in step <highlight><bold>211</bold></highlight>, a check is made as to whether the software upgrade is completed in step <highlight><bold>213</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> When it is determined that the software upgrade is not completed in step <highlight><bold>213</bold></highlight>, steps <highlight><bold>210</bold></highlight> and <highlight><bold>211</bold></highlight> are repeated. In contrast, when it is determined that the software upgrade is completed in step <highlight><bold>213</bold></highlight>, the network device is restarted based on the new version of the software in step <highlight><bold>214</bold></highlight>. Then, the operation returns to step <highlight><bold>201</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> According to the present invention, while software is being upgraded to a new version through a network, if a sudden failure such as a hang-up or latch-up of a network device or a failure in power occurs before the software upgrade is completed normally, the network device is restarted based on an old version of the software so that the network device can attempt the upgrade of the software again without being serviced or without using an external memory device. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A network device capable of upgrading software through a network, comprising: 
<claim-text>monitoring means for monitoring at least one failure while the software is being upgraded; </claim-text>
<claim-text>a first memory for storing data necessary for operating the network device; </claim-text>
<claim-text>a second memory for storing information transferred through the network; </claim-text>
<claim-text>a controller for performing control to store the information, which is downloaded through the network to upgrade the software, in the second memory, and store an old version of the software in an empty area of the first memory before the old version of the software stored in the first memory is upgraded with the information stored in the second memory; and </claim-text>
<claim-text>a decoder for selecting either the first memory or the second memory, which is used for upgrading the software, according to a control signal received from the controller and a result of monitoring received from the monitoring means, and setting an address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The network device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the controller provides a control signal to the decoder to copy the old version of the software to the empty area of the first memory, erase the old version of the software stored in an original area of the first memory, and copy the information stored in the second memory to the original area of the first memory. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The network device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the monitoring means monitors whether at least one failure occurs in a network device such as a power failure or hang-up of the network device. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The network device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the monitoring means monitors whether at least one failure occurs in the network. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The network device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein when the decoder receives a signal, indicating that at least one failure has occurred, from the monitoring means while the software is being upgraded, the decoder returns to the initial state of the network device. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The network device of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein when at least one failure occurs while the old version of the software is being upgraded, after the old version of the software is copied to the empty area of the first memory, the decoder operates so that the network device can be restarted based on the old version of the software. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A network device capable of upgrading software through a network, comprising: 
<claim-text>monitoring means for monitoring whether at least one failure occurs while the software is being upgraded; </claim-text>
<claim-text>a first memory for storing first data necessary for operating the network device; </claim-text>
<claim-text>a second memory for storing second data necessary for operating the network device; </claim-text>
<claim-text>a third memory for storing information transferred through the network; </claim-text>
<claim-text>a controller for performing control to store information, which is downloaded through the network to upgrade the software, in the third memory, and store a copy of an old version of the software in an empty area of the second memory before the old version of the software stored in the first memory is upgraded to the information stored in the third memory; and </claim-text>
<claim-text>a decoder for selecting one of the first memory, the second memory, and the third memory, which is used for upgrading the software, according to a control signal received from the controller and the result of monitoring received from the monitoring means, and setting an address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method for upgrading software of a network device through a network, the method comprising the steps of: 
<claim-text>upgrading the software through the network and checking whether at least one failure occurs during the upgrade; </claim-text>
<claim-text>when it is determined that at least one failure has occurred, operating the network device based on an old version of the software used before the upgrade was performed; and </claim-text>
<claim-text>when it is determined that at least one failure has not occurred, operating the network device based on a new version of the software to which the old version was upgraded. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the upgrading of the software comprises the steps of: 
<claim-text>downloading the new version of the software through the network; </claim-text>
<claim-text>copying the old version of the software stored in a first area of the network device to a second area of the network device; </claim-text>
<claim-text>erasing the old version of the software from the first area of the network device; and </claim-text>
<claim-text>storing the new version of the software in the first area of the network device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the at least one failure is a failure in the network device which is checked during the erasing and storing steps. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the at least one failure comprises a power failure in the network device or hang-up of the network device. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the at least one failure comprises a network failure. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the at least one failure comprises a network failure.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005351A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005351A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005351A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
