<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002521A1-20030102-D00000.TIF SYSTEM "US20030002521A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00001.TIF SYSTEM "US20030002521A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00002.TIF SYSTEM "US20030002521A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00003.TIF SYSTEM "US20030002521A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00004.TIF SYSTEM "US20030002521A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00005.TIF SYSTEM "US20030002521A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00006.TIF SYSTEM "US20030002521A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00007.TIF SYSTEM "US20030002521A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00008.TIF SYSTEM "US20030002521A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00009.TIF SYSTEM "US20030002521A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00010.TIF SYSTEM "US20030002521A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00011.TIF SYSTEM "US20030002521A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00012.TIF SYSTEM "US20030002521A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00013.TIF SYSTEM "US20030002521A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00014.TIF SYSTEM "US20030002521A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00015.TIF SYSTEM "US20030002521A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00016.TIF SYSTEM "US20030002521A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00017.TIF SYSTEM "US20030002521A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00018.TIF SYSTEM "US20030002521A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00019.TIF SYSTEM "US20030002521A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00020.TIF SYSTEM "US20030002521A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00021.TIF SYSTEM "US20030002521A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00022.TIF SYSTEM "US20030002521A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00023.TIF SYSTEM "US20030002521A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00024.TIF SYSTEM "US20030002521A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030002521A1-20030102-D00025.TIF SYSTEM "US20030002521A1-20030102-D00025.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002521</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10055649</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020122</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04J003/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>465000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Bootstrapping for joining the peer-to-peer environment</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60263573</doc-number>
<document-date>20010122</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60268893</doc-number>
<document-date>20010214</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60286225</doc-number>
<document-date>20010424</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60308932</doc-number>
<document-date>20010731</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Bernard</given-name>
<middle-name>A.</middle-name>
<family-name>Traversat</family-name>
</name>
<residence>
<residence-us>
<city>San Francisco</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Li</given-name>
<family-name>Gong</family-name>
</name>
<residence>
<residence-us>
<city>Los Altos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>William</given-name>
<middle-name>J.</middle-name>
<family-name>Yeager</family-name>
</name>
<residence>
<residence-us>
<city>Menlo Park</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Mohamed</given-name>
<middle-name>M.</middle-name>
<family-name>Abdelaziz</family-name>
</name>
<residence>
<residence-us>
<city>Santa Clara</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>J.</middle-name>
<family-name>Duigou</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Eric</given-name>
<family-name>Pouyoul</family-name>
</name>
<residence>
<residence-us>
<city>San Francisco</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Jean-Christophe</given-name>
<family-name>Hugly</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>William</given-name>
<middle-name>N.</middle-name>
<family-name>Joy</family-name>
</name>
<residence>
<residence-us>
<city>Aspen</city>
<state>CO</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>J.</middle-name>
<family-name>Clary</family-name>
</name>
<residence>
<residence-us>
<city>Monte Sereno</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Robert C. Kowert</name-1>
<name-2>Conley, Rose, &amp; Tayon, P.C.</name-2>
<address>
<address-1>P.O. Box 398</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78767</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method for providing resources to networked devices for participating in a peer-to-peer environment. In one embodiment, a peer computing system on a network may include one or more bootstrap nodes that may provide, to devices coupled to the network, mechanisms for accessing resources for participating in the peer-to-peer environment. The bootstrap nodes may be peer nodes. The resources may give the devices access to services each of which may implement peer-to-peer platform protocols. The devices may be pre-configured to access one or more predefined peer nodes for information on bootstrap nodes. Alternatively, devices may use a bootstrapping mechanism to locate bootstrap nodes on the network. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">PRIORITY INFORMATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims benefit of priority to the following provisional applications, each of which is hereby incorporated by reference in its entirety: </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Ser. No. 60/263,573 filed Jan. 22, 2001 titled Peer-to-Peer Network Computing Platform; </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Ser. No. 60/268,893 filed Feb. 14, 2001 titled Peer-to-Peer Network Computing Platform; </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Ser. No. 60/286,225 filed Apr. 24, 2001 titled Peer-to-Peer Network Computing Platform; and </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Ser. No. 60/308,932 filed Jul. 31, 2001 titled Trust Mechanism For A Peer-To-Peer Network Computing Platform.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> This invention relates to peer-to-peer networking, and more particularly to a peer-to-peer network computing platform. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The Internet has three valuable fundamental assets&mdash;information, bandwidth, and computing resources&mdash;all of which are vastly underutilized, partly due to the traditional client-server computing model. No single search engine or portal can locate and catalog the ever-increasing amount of information on the Web in a timely way. Moreover, a huge amount of information is transient and not subject to capture by techniques such as Web crawling. For example, research has estimated that the world produces two exabytes or about 2&times;10<highlight><superscript>18 </superscript></highlight>bytes of information every year, but only publishes about 300 terabytes or about 3&times;10<highlight><superscript>12 </superscript></highlight>bytes. In other words, for every megabyte of information produced, only one byte gets published. Moreover, Google claims that it searches about only 1.3&times;10&circ; 8 web pages. Thus, finding useful information in real time is increasingly difficult. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Although miles of new fiber have been installed, the new bandwidth gets little use if everyone goes to one site for content and to another site for auctions. Instead, hot spots just get hotter while cold pipes remain cold. This is partly why most people still feel the congestion over the Internet while a single fiber&apos;s bandwidth has increased by a factor of 10&circ; 6 since 1975, doubling every 16 months. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> New processors and storage devices continue to break records in speed and capacity, supporting more powerful end devices throughout the network. However, computation continues to accumulate around data centers, which have to increase their workloads at a crippling pace, thus putting immense pressure on space and power consumption. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Finally, computer users in general are accustomed to computer systems that are deterministic and synchronous in nature, and think of such a structure as the norm. For example, when a browser issues a URL request for a Web page, the output is typically expected to appear shortly afterwards. It is also typically expected that everyone around the world will be able to retrieve the same page from the same Web server using the same URL. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The term peer-to-peer networking or computing (often referred to as P2P) may be applied to a wide range of technologies that greatly increase the utilization of information, bandwidth, and computing resources in the Internet. Frequently, these P2P technologies adopt a network-based computing style that neither excludes nor inherently depends on centralized control points. Apart from improving the performance of information discovery, content delivery, and information processing, such a style also can enhance the overall reliability and fault-tolerance of computing systems. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Peer-to-peer (P2P) computing, embodied by applications like Napster, Gnutella, and Freenet, has offered a compelling and intuitive way for Internet users to find and share resources directly with each other, often without requiring a central authority or server. As much as these diverse applications have broken new ground, they typically address only a single function, run primarily only on a single platform, and are unable to directly share data with other, similar applications. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Many peer-to-peer systems are built for delivering a single type of service. For example, Napster provides music file sharing, Gnutella provides generic file sharing, and AIM provides instant messaging. Given the diverse characteristics of these services and the lack of a common underlying P2P infrastructure, each P2P software vendor tends to create incompatible systems none of them able to interoperate with one another. This means each vendor creates its own P2P user community, duplicating efforts in creating software and system primitives commonly used by all P2P systems. Moreover, for a peer to participate in multiple communities organized by different P2P implementations, the peer must support multiple implementations, each for a distinct P2P system or community, and serve as the aggregation point. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Many P2P systems today offer their features or services through a set of APIs that are delivered on a particular operating system using a specific networking protocol. For example, one system might offer a set of C&plus;&plus; APIs, with the system initially running only on Windows, over TCP/IP, while another system offers a combination and C and Java APIs, running on a variety of UNIX systems, over TCP/IP but also requiring HTTP. A P2P developer is then forced to choose which set of APIs to program to, and consequently, which set of P2P customers to target. Because there is little hope that the two systems will interoperate, if the developer wants to offer the same service to both communities, they have to develop the same service twice for two P2P platforms or develop a bridge system between them. Both approaches are inefficient and impractical considering the dozens of P2P platforms in existence. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Many P2P systems, especially those being offered by upstart companies, tend to choose one operating system as their target deployment platform. The cited reason for this choice is to target the largest installed base and the fastest path to profit. The inevitable result is that many dependencies on platform-specific features are designed into (or just creep into) the system. This is often not the consequence of technical desire but of engineering reality with its tight schedules and limited resources. This approach is clearly shortsighted. Even though the earliest demonstration of P2P capabilities are on platforms in the middle of the computing hardware spectrum, it is very likely that the greatest proliferation of P2P technology will occur at the two ends of the spectrum&mdash;large systems in the enterprise and consumer-oriented small systems. In fact, betting on any particular segment of the hardware or software system is not future proof. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1A and 1B</cross-reference> are examples illustrating the peer-to-peer model. <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> shows two peer devices <highlight><bold>104</bold></highlight>A and <highlight><bold>104</bold></highlight>B that are currently connected. Either of the two peer devices <highlight><bold>104</bold></highlight> may serve as a client of or a server to the other device. <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> shows several peer devices <highlight><bold>104</bold></highlight> connected over the network <highlight><bold>106</bold></highlight> in a peer group. In the peer group, any of the peer devices <highlight><bold>104</bold></highlight> may serve as a client of or a server to any of the other devices. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Prior art peer-to-peer systems are generally built for delivering a single type of service, for example a music file sharing service, a generic file sharing service, or an instant messaging service. Given the diverse characteristics of these services and given the lack of a common underlying peer-to-peer infrastructure, each vendor tends to form various peer-to-peer &ldquo;silos&rdquo;. In other words, the prior art peer-to-peer systems typically do not interoperate with each other. This means each vendor has to create its own peer-to-peer user community, duplicating efforts in creating primitives commonly used by peer-to-peer systems such as peer discovery and peer communication. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Discovery in a peer-to-peer environment may be based on centralized discovery with a centralized index. This method is used by such peer-to-peer applications as Napster and AIM. Discovery based on a centralized index may be efficient, deterministic, and well suited for a static environment. Such a method of discovery may also provide centralized control, provide a central point of failure, and provide easy denial of services. However, such a method of discovery may be expensive to scale and may degrade with aging. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Discovery in a peer-to-peer environment may also be based on net crawling. This method is used by such peer-to-peer applications as Gnutella and FreeNet. Discovery based on net crawling may be simple, adaptive, deterministic, inexpensive to scale, well suited for a dynamic environment, and may be difficult to attack. Such a method of discovery may also improve with aging. However, such a method of discovery may provide slower discovery than centralized control. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In a peer-to-peer environment, assume there is a peer-to-peer community offering a search capability for its members, where one member can post a query and other members can hear and respond to the query. One member is a Napster user and has implemented a feature so that, whenever a query is received seeking an MP3 file, this member will look up the Napster directory and then respond to the query with information returned by the Napster system. Here, a member without any knowledge of Napster may benefit because another member implemented a bridge to connect their peer-to-peer system to Napster. This type of bridging is very useful, but when the number of services is large, pair-wise bridging becomes more difficult and undesirable. Thus, it may be desirable to provide a platform bridge that may be used to connect various peer-to-peer systems together. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In another example, one engineering group requires a sizable storage capability, but also with redundancy to protect data from sudden loss. A common solution is to purchase a storage system with a large capacity and mirrored disks. Another engineering group later decides to purchase the same system. Both groups end up with a lot of extra capacity, and have to pay higher prices for the mirroring feature. Thus, it may be desirable to provide a mechanism by which each group may buy a simple storage system without the mirroring feature, where the disks can then discover each other automatically, form a storage peer group, and offer mirroring facilities using their spare capacity. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> As yet another example, many devices such as cell phones, pagers, wireless email devices, Personal Digital Assistants (PDAs), and Personal Computers (PCs) may carry directory and calendar information. Currently, synchronization among the directory and calendar information on these devices is very tedious, if not impossible. Often, a PC becomes the central synchronization point, where every other device has to figure out a way to connect to the PC (using serial port, parallel port, IRDA, or other method) and the PC must have the device driver for every device that wishes to connect. Thus, it may be desirable to provide a mechanism by which these devices may interact with each other, without extra networking interfaces except those needed by the devices themselves, utilizing a common layer of communication and data exchange. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The tasks of searching, discovering, and/or routing in a peer-to-peer network may be complicated. There may be many different types of content, and there may not be a generic mechanism to best accomplish those tasks for all types of content. A peer-to-peer environment may provide one or more applications and/or higher-level services to perform these high-level tasks. However, it may be desirable to provide simple, small, mechanisms for bootstrapping devices into the peer-to-peer environment if the devices do not initially have knowledge of or access to the higher-level applications and/or the services. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A system and a method for providing resources to networked devices for participating in a peer-to-peer environment are described. In one embodiment a peer computing system may include a plurality of peer nodes operable to couple to a network. The plurality of peer nodes may be configure to implement a peer-to-peer environment on the network in accordance with one or more peer-to-peer platform protocols for enabling the plurality of peer nodes to discovery each other, communicate with each other, and cooperate with each other to form peer groups and share network resources in the peer-to-peer environment. One or more of the plurality of peer nodes may be operable to provide one or more mechanisms for accessing a set of peer-to-peer platform resources to one or more devices on the network. The resources may facilitate participating in a peer-to-peer environment on the network to discover peer nodes, communicate with peer nodes, and cooperate with peer nodes to form peer groups and share content. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The peer computing system may include one or more devices on the network that may be operable to obtain the mechanisms from the one or more peer nodes and access the set of resources using the mechanisms to enable the devices to participate as a peer node in the peer-to-peer environment. The set of resources may include a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol and a membership service for use by the devices in applying for membership in the peer groups in accordance with a peer membership protocol, among others. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In one embodiment, devices may be pre-configured to communicate with predetermined bootstrap nodes providing mechanisms for accessing resources for participating in the peer-to-peer environment. The bootstrap nodes may be peer nodes. Each bootstrap node providing mechanisms for accessing resources may be specific to a particular peer group. Rendezvous nodes may cache the bootstrap nodes&apos; advertisements. One or more of the bootstrap nodes may also be rendezvous nodes. The bootstrap nodes may be network devices particular to the device obtaining mechanisms. For example, a device obtaining mechanisms may be a cellular device and a peer node providing the mechanisms may be a cellular hub of the cellular device&apos;s service provider. As another example, a device may be a handheld device such as a PDA and a peer node providing the mechanisms may be a node on a wireless network. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In one embodiment, the provided mechanisms may allow the devices to access peer-to-peer platform core services implemented on remote peer nodes. In one embodiment, the mechanisms may provide each device with the ability to locally implement a subset of a core service&apos;s functionality. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In one embodiment, a device that has obtained mechanisms may retain the mechanisms in memory. Hence, in the future, if the device desires to participate in the peer-to-peer environment, the bootstrapping process may be bypassed. Alternatively, the device may not retain the mechanisms in memory. The device may obtain the mechanisms from one or more bootstrap nodes if the resources are needed again. For example, if the device terminates participation in the peer-to-peer environment and then later desires to again participate, the device may again obtain the mechanisms for accessing the set of resources from a bootstrap node. This ensures that the device gets a new version of each mechanism if there is a new version available. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> illustrates a prior art example of two devices that are currently connected as peers; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> illustrates a prior art example of several peer devices connected over the network in a peer group; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates one embodiment of peer-to-peer platform software architecture at the conceptual level; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an exemplary content identifier according to one embodiment; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a point-to-point pipe connection between peers according to one embodiment; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a peer-to-peer platform message format according to one embodiment; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the content of a peer advertisement according to one embodiment; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the content of a peer group advertisement according to one embodiment. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the content of a pipe advertisement according to one embodiment; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the content of a service advertisement according to one embodiment; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates the content of a content advertisement according to one embodiment; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates the content of an endpoint advertisement according to one embodiment; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates protocols and bindings in a peer-to-peer platform according to one embodiment; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates discovery through a rendezvous proxy according to one embodiment; </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates discovery through propagate proxies according to one embodiment; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates using messages to discover advertisements according to one embodiment; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates one embodiment of using peer resolver protocol messages between a requesting peer and a responding peer; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates one embodiment of using peer information protocol messages between a requesting peer and a responding peer; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> illustrates several core components and how they interact for discovery and routing according to one embodiment; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates one embodiment of message routing in a peer-to-peer network that uses the peer-to-peer platform; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates traversing a firewall in a virtual private network when access is initiated from outside only according to one embodiment; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> illustrates email exchange through an email gateway according to one embodiment; </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> illustrates traversing a firewall when access is initiated from the inside according to one embodiment; </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> illustrates embodiments of a peer-to-peer platform proxy service, and shows various aspects of the operation of the proxy service; </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> illustrates a method of using a proxy service for peer group registration according to one embodiment; </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> illustrates peer group registration across a firewall according to one embodiment; </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> illustrates a method of providing peer group membership through a proxy service according to one embodiment; </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 27A and 27B</cross-reference> illustrate a method of providing privacy in the peer-to-peer platform according to one embodiment; </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 28A and 28B</cross-reference> illustrate one embodiment of a method for using a peer-to-peer platform proxy service as a certificate authority. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> illustrates a device obtaining access to peer-to-peer platform resources for taking part in the peer-to-peer environment from one or more bootstrap nodes according to one embodiment. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> illustrates a bootstrap node providing access to peer-to-peer platform resources to devices for taking part in the peer-to-peer environment according to one embodiment. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is a flowchart illustrating a method obtaining access to peer-to-peer platform resources for taking part in the peer-to-peer environment according to one embodiment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word &ldquo;may&rdquo; is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words &ldquo;include&rdquo;, &ldquo;including&rdquo;, and &ldquo;includes&rdquo; mean including, but not limited to. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Embodiments of an open network computing platform designed for peer-to-peer computing are described. The network computing platform may be referred to as a peer-to-peer platform. The peer-to-peer platform may be used to build a wide range of distributed services and applications in which every device is addressable as a peer, and where peers can bridge from one domain into another. The peer-to-peer platform may enable developers to focus on their own application development while easily creating distributed computing software that is flexible, interoperable, and available on any peer on the expanded Web. The peer-to-peer platform may enable software developers to deploy interoperable services and content, further spring-boarding the peer-to-peer revolution on the Internet. The peer-to-peer platform addresses the problems of prior art peer-to-peer systems by providing a generic and service-agnostic peer-to-peer platform that may be preferably defined by a small number of protocols. Each protocol is preferably easy to implement and easy to be adopted into peer-to-peer services and applications. Thus, service offerings from one vendor may be used, perhaps transparently, by the user community of another vendor&apos;s system. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The peer-to-peer platform extends P2P computing to enable a wide range of distributed computing applications and overcome the limitations typically found in prior art P2P applications. The peer-to-peer platform is a network computing technology that provides a set of simple, small, and flexible mechanisms that can support P2P computing on any platform, anywhere, and at any time. The peer-to-peer platform generalizes P2P functionality and provides core technology that addresses the limitations of prior art P2P computing technologies. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The peer-to-peer platform is a modular platform that provides simple and essential building blocks for developing a wide range of distributed services and applications. The peer-to-peer platform specifies a set of protocols rather than an API. Thus, the peer-to-peer platform can be implemented in any language on any Operating System to provide solutions ranging from providing a simple protocol-based wrapper that enables a small device to join a network of peers to developing a fully integrated application that supports metering, monitoring, high-level security and communication across server-class systems. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In one embodiment, the peer-to-peer platform architecture may include, but is not limited to, protocols, advertisements, and core services. Network protocol bindings may be used to preferably ensure interoperability with existing content transfer protocols, network transports, routers, and firewalls. The peer-to-peer platform may be used to combine network nodes (peers) into a simple and coherent peer-to-peer network computing platform. The platform is preferably directed at providing several benefits including, but not limited to, no single point of failure, asynchronous messaging, the ability for peers to adapt to their network environment, and moving content towards its consumers. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates one embodiment of peer-to-peer platform software architecture at the conceptual level. The peer-to-peer platform may include several layers. In one embodiment, the software stack may be described using three layers; a peer-to-peer platform (core) layer <highlight><bold>120</bold></highlight>, a service layer <highlight><bold>140</bold></highlight> and an application layer <highlight><bold>150</bold></highlight>. In one embodiment, the peer-to-peer platform may include a core layer <highlight><bold>120</bold></highlight> that defines and encapsulates minimal primitives that are common to peer-to-peer networking, including, but not limited to, peers <highlight><bold>110</bold></highlight>, peer groups <highlight><bold>122</bold></highlight>, peer discovery <highlight><bold>124</bold></highlight>, peer communication (e.g. pipes) <highlight><bold>126</bold></highlight>, peer monitoring <highlight><bold>128</bold></highlight>, and associated security primitives <highlight><bold>130</bold></highlight>. This layer may be shared by all peer-to-peer devices so that interoperability becomes possible. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> A peer may be defined as any entity that runs some or all of one or more protocols provided by the peer-to-peer platform core layer. As such, a peer may manifest in the form of a processor, a process or a device. A peer may be anything with a digital heartbeat that supports the peer-to-peer platform core, including sensors, servers, PCs, computers up to and including supercomputers, PDAs, manufacturing and medical equipment, phones and cellular phones. In order to interact with other peers (e.g. to form or join peer groups), the peer needs to be connected to some kind of network (wired or wireless), such as IP, Bluetooth, or Havi, among others. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The peer-to-peer platform may provide mechanisms through which peers may discover each other, communicate with each other, and cooperate with each other to form peer groups. Peers may discover each other on the network to form transient or persistent relationships called peer groups. A peer group is a collection of peers connected by a network that share a common set of interests and that have agreed upon a common set of rules to publish, share and access any computer content (code, data, applications, or other collections of computer representable resources), and communicate among themselves. Peer groups may also be statically predefined. The peers in a peer group may cooperate to provide a common set of services. A peer group may be viewed as an abstract region of the network, and may act as a virtual subnet. The concept of a region virtualizes the notion of routers and firewalls, subdividing the network in a self-organizing fashion without respect to actual physical network boundaries. In one embodiment, peer groups implicitly define a region scope that may limit peer propagation requests. Conceptually, a peer group may be viewed as a virtual entity that speaks the set of peer group protocols. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> A peer group may theoretically be as large as the entire connected universe. Naming anything uniquely is a challenge in such a large namespace. In one embodiment, the peer-to-peer platform may support and/or provide sophisticated naming and binding services. In one embodiment, the peer-to-peer platform may use a universal unique identifier (UUID), for example, a 64- or 128-bit datum, to refer to an entity (e.g. a peer, peer group, pipe, content, etc.). For example, UUIDs may be embedded in advertisements for internal use. UUIDs preferably may be used to guarantee that each entity has a unique UUID within a local runtime environment and serves as a canonical way of referring to an entity, but because a global state is not assumed, it may not be possible to provide a guarantee of uniqueness across an entire community that may consist of millions of peers. This may not be a problem because a UUID may be used within the peer-to-peer platform as an internal identifier. This may become significant only after the UUID is securely bound to other information such as a name and a network address. In one embodiment, Uniform Resource Name (URN) format may be used for the expression of UUIDs. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The core layer <highlight><bold>120</bold></highlight> provides core support for peer-to-peer services and applications. In a multi-platform, secure execution environment, the core mechanisms of peer groups, peer pipes and peer monitoring may be provided. Peer groups <highlight><bold>122</bold></highlight> may establish a set of peers and naming within a peer group with mechanisms to create policies for creation and deletion, membership, advertising and discovery of other peer groups and peer nodes, communication, security, and content sharing. Pipes provide virtual communication channels among peers. Messages sent in pipes may support transfer of data, content, and code in a protocol-independent manner, allowing a range of security, integrity, and privacy options. In one embodiment, messages may be structured with a markup language such as XML. Peer monitoring <highlight><bold>128</bold></highlight> enables control of the behavior and activity of peers in a peer group and can be used to implement peer management functions including access control, priority setting, traffic metering, and bandwidth balancing. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The core layer <highlight><bold>120</bold></highlight> may include protocols and building blocks to enable key mechanisms for peer to peer networking, including discovery, transport (including firewall handling and limited security), and the creation of peers and peer groups. The core layer <highlight><bold>120</bold></highlight> is preferably thin and small, and preferably provides interesting and powerful primitives for use by services and applications in the other layers. The core layer <highlight><bold>120</bold></highlight> may support choices such as anonymous vs. registered users and encrypted vs. clear text content without imposing specific policies on developers. Policy choices may be made, or when necessary, implemented, at the service layer <highlight><bold>140</bold></highlight> and/or application layer <highlight><bold>150</bold></highlight>. For example, administration services such as accepting or rejecting a peer&apos;s membership in a peer group may be implemented using the functionality provided by the core layer <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The core components of the peer-to-peer protocol may be used to implement discovery mechanisms for searching, publishing and recovering of core abstractions (e.g. peers, peer group, pipes, endpoints, and advertisements). These mechanisms are preferably simple, administration free, and do not require special peers to act as &ldquo;master&rdquo; peers. These mechanisms may allow processes in the peer-to-peer network, in absence of help from other applications and/or services, to bootstrap and find out the information necessary to access applications and services that can help. Also, the core may &ldquo;return&rdquo; to this standalone behavior and still function if helper applications or services fail. In one embodiment, safety mechanisms may be put in place in order to avoid a major overflow of &ldquo;web-crawling&rdquo;. In one embodiment, applications and/or services that support the peer-to-peer protocol may access, control, and/or override the core components, even to the extreme of implementing a centralized, client-server model based on the core components. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> At the highest abstraction level, the peer-to-peer platform may be viewed as a set of protocols provided at the core layer <highlight><bold>120</bold></highlight>. In one embodiment, a common thread among peer-to-peer platform peers is protocols, not APIs or software implementations. The peer-to-peer platform protocols preferably guarantee interoperability between compliant software components executing on potentially heterogeneous peer runtimes. Thus the peer-to-peer platform is preferably agnostic to programming languages. The term compliant may refer to a single protocol only. That is some peers may not implement all the core protocols. Furthermore, some peers may only use a portion (client-side or server-side only) of a protocol. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Each protocol may be defined by one or more messages exchanged among participants of the protocol. Each message may have a predefined format, and may include various data fields. In one embodiment the protocols may utilize messaging such as XML messages. The peer-to-peer platform connects peer nodes with each other. The peer-to-peer platform is preferably platform-independent by virtue of being a set of protocols. As such, the peer-to-peer platform may not require APIs and remains independent of programming languages, so that it can be implemented in C/C&plus;&plus;, Java, Java 2ME, Perl, Python or other languages. This means heterogeneous devices with completely different software stacks can preferably interoperate through the peer-to-peer platform protocols. To underpin this set of protocols, the peer-to-peer platform may define a number of concepts including peer, peer group, advertisement, message, pipe, and more. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In one embodiment, peer-to-peer protocols may be embodied as markup language (e.g. XML) messages that may be sent between two peers. In one embodiment, the peer-to-peer platform messages may define the protocols used to discover and connect peers and peer groups, and to access resources offered by peers and peer groups, among others. The use of markup language (e.g. XML) messages to define protocols may allow many different kinds of peers to participate in a protocol. Each peer may be free to implement the protocol in a manner best suited to its abilities and role. For example, not all peers are capable of supporting a Java runtime environment. In one embodiment, the protocol definition does not require nor imply the use of Java on a peer. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Several peer-to-peer platform protocols that may be provided by embodiments of the peer-to-peer platform are described later in this document. The protocols defined in this document may be realized over networks including, but not limited to, the Internet, a corporate intranet, a dynamic proximity network, a home networking environment, LANs, and WANs. The protocols defined in this document may also be realized within a single computer. Thus, the peer-to-peer platform is preferably transport protocol independent. The size and complexity of the network peers that may support these protocols preferably includes a wide range of peer implementations including peers implemented on, but not limited to, simple light switches, PDAs, cell phones, pagers, laptop and notebook computers, smart appliances, personal computers, workstations, complex, highly-available servers, mainframe computers and even supercomputers. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The peer-to-peer platform may further include a peer-to-peer services layer <highlight><bold>140</bold></highlight>. This layer may provide capabilities that may not be absolutely necessary for a peer-to-peer network to operate but that may be desirable to provided added functionality beyond the core layer <highlight><bold>120</bold></highlight> in the peer-to-peer environment. The service layer <highlight><bold>140</bold></highlight> may deal with higher-level concepts such as search and indexing, directory, storage systems, file sharing, distributed file systems, resource aggregation and renting, protocol translation, authentication and PKI (public key infrastructure) systems. These services, which may make use of the protocols and building blocks provided by the core layer <highlight><bold>120</bold></highlight>, may be useful by themselves but also may be included as components in an overall P2P system. Thus, services may include one or more services <highlight><bold>144</bold></highlight> provided by the peer-to-peer platform. These platform-provided services <highlight><bold>144</bold></highlight> may include indexing, searching and file sharing services, for example. The services layer <highlight><bold>140</bold></highlight> may provide hooks for supporting generic services (such as searching, sharing and added security) that are used in many P2P applications. Thus, services may also include one or more services <highlight><bold>142</bold></highlight> not provided as part of the peer-to-peer platform but rather provided by the peer-to-peer platform community. These services <highlight><bold>142</bold></highlight> may be user-defined and may be provided, for example, to member peers in a peer group as a peer group service. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Services may expand upon the capabilities of the core layer <highlight><bold>120</bold></highlight> and may be used to facilitate application development. Facilities provided as services in the service layer <highlight><bold>140</bold></highlight> may include mechanisms for search and indexing, directory, storage systems, file sharing, distributed file systems, resource aggregation and renting, protocol translation, authentication, PKI services, and caching code and content to enable cross-application bridging and translation of files, among others. Searching capabilities may include distributed, parallel searches across peer groups that are facilitated by matching an XML representation of a query to be processed with representations of the responses that can be provided by each peer. These facilities may be used for simple searches, for example searching a peer&apos;s repository, or more complex searches of dynamically generated content that is unreachable by conventional search engines. P2P searches may be conducted across a company&apos;s intranet, for example, to quickly locate relevant information within a secure environment. By exercising tight control over peer group membership and enabling encrypted communication between peers, a company may extend this capability to its extranet, including business partners, consultants, and suppliers as peers. The same mechanisms that facilitate searches across the peer group may be used as a bridge to incorporate Internet search results, and to include data outside of the peer&apos;s own repository, for example searching a peer&apos;s disk. The peer services layer <highlight><bold>140</bold></highlight> may be used to support other custom, application-specific functions. For example, a secure peer messaging system may be built to allow anonymous authorship and a persistent message store. The peer services layer <highlight><bold>140</bold></highlight> provides the mechanisms to create such secure tools; the application developers themselves may determine specific tool policies. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The peer-to-peer platform may also include a peer-to-peer application layer <highlight><bold>150</bold></highlight>. The application layer <highlight><bold>140</bold></highlight> may support the implementation of integrated applications such as file sharing, resource sharing, monetary systems, distributed storage, peer-to-peer instant messaging, entertainment, content management and delivery, peer-to-peer email systems, distributed auction systems, among others. Applications may be &ldquo;vertical&rdquo; or they may be developed to interoperate with other distributed applications. One or more applications <highlight><bold>154</bold></highlight> may be provided as part of the peer-to-peer platform. For example, one embodiment of the peer-to-peer platform may include a shell application <highlight><bold>160</bold></highlight> as a development environment built on top of the platform. The shell application may provide interactive access to the peer-to-peer platform via a simple command line interface <highlight><bold>162</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Applications may also include community applications <highlight><bold>152</bold></highlight> not provided by the peer-to-peer platform. These community applications <highlight><bold>152</bold></highlight> may be user-defined and may be provided, for example, to member peers in a peer group as a peer group application. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In one embodiment, the boundary between services and applications is not rigid. An application to one customer can be viewed as a service to another customer. An application may use services. Services may serve as protocols that may be shared among various applications. An application may provide a user interface, a way to define a set of files to share, a way to initiate a search, a way to display the results, and a way to initiate a file transfer, for example. Such an application may make use of a set of services, for example a reliable point-to-point file transfer service, a distributed search service, a discovery service to locate other peers, among others. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Applications may be built using peer services as well as the core layer <highlight><bold>120</bold></highlight>. The peer-to-peer platform may support the fundamental levels broadly, and rely on the P2P development community to provide additional peer services and applications. Peer applications enabled by both the core layer <highlight><bold>120</bold></highlight> and peer services layer <highlight><bold>140</bold></highlight> may include P2P auctions that link buyers and sellers directly, with buyers able to program their bidding strategies using a simple scripting language, for example. Resource-sharing applications, such as SETI&commat;home, may be built more quickly and easily, with heterogeneous, worldwide peer groups supported from day one. Instant messaging, mail, and calendaring services may facilitate communication and collaboration within peer groups that are secure and independent of service provider-hosted facilities. Virtually any other type of application may be build on top of the core layer <highlight><bold>120</bold></highlight> and services layer <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Some features, such as security, may manifest in all three layers and throughout a P2P system, albeit in different forms according to the location in the software architecture. The system is preferably modular, and allows developers to pick and choose a collection of services and applications that suits their needs. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> A typical peer-to-peer platform network may provide an inherently nondeterministic topology/response structure. In a peer-to-peer platform network, a specific resource request may not return for minutes, hours, or even days; in fact, it may never return at all. In addition, people from different parts of the world requesting the same resource are likely to get different copies of the resource from completely different locations. Peers may obtain content from multiple servers, ideally reaching a nearby one that is up and running. The original source peer need not service every resource request; in fact, it does not even have to be up and running. The nondeterministic structure may also help provide the optimized use of network bandwidth. The concentrated localized traffic congestion typical of today&apos;s Web doesn&apos;t affect P2P networking. The nondeterministic structure may also help provide a lowered cost of content distribution. The P2P network can absorb contents and replicate it for easy access. The nondeterministic structure may also help provide leveraged computing power from every node in the network. With asynchronous operations, a user may issue many requests for many resources or services simultaneously and have the network do the work. The nondeterministic structure may also help provide unlimited scalability. A properly designed P2P application may span the entire known connected universe without hitting scalability limits; this is typically not possible with centralized schemes. Note, however, that the peer-to-peer platform also may support deterministic, synchronous applications. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> As an example of a nondeterministic, asynchronous application, consider a network-based music request service that operates over a peer-to-peer platform-based P2P network. A peer submits multiple requests for music files and then checks back later to see if the music request service in the peer group has found them. A few requested files have been found, but others cannot be located. The service&apos;s response in regards to the files that cannot be located may be something like &ldquo;Music selection and availability changes continuously; please retry your request later.&rdquo; This is an acceptable nondeterministic outcome. Even though the service couldn&apos;t find a file, the same file may be available later if the same request is resubmitted, because peers that host the desired files may have come online in the meantime. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The peer-to-peer platform provides the ability to replicate information toward end users. Popular content tends to be replicated more often, making it easier to find as more copies are available. Peers do not have to always go back to the same peer to obtain the information they want, as is typical in the client/server model. Peers may obtain information from neighboring peers that have already cached the information. Each peer may become a provider to all other peers. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> In one embodiment the peer-to-peer platform may enable peers to find content that is closest to them. This content may include data (e.g. files) or even services and applications. For example, if a peer node in an office peer-to-peer network using the peer-to-peer platform is moved, the peer-to-peer platform may allow the peer to automatically locate content (e.g. using a discovery service that participates in the discovery protocol) including services (e.g. a printer service and an email service) hosted by other peers closest to the peer&apos;s new location, without requiring any manual reconfiguration. Further, at least some content may be copied or moved to the peer in its new location and/or to other peers proximate to the new location. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> In one embodiment, the UUIDs may be used in providing flexible configuration and seamless relocation of peer nodes on a peer-to-peer network, and may assist in locating and accessing content including services nearest to a peer node when the peer node is moved. For example, a businessperson based in New York may participate in a peer-to-peer network based on the peer-to-peer protocols using a notebook computer or other portable computing device connected to a LAN as a peer node. The businessperson may access an instance of an email and/or other services locally hosted by other peer nodes in a peer group on the LAN. If the businessperson travels to Paris, for example, and takes the notebook computer, the notebook computer may be connected to a different LAN at the Paris location and participate in the peer-to-peer network. Because the peer node has a unique ID in the peer-to-peer network (the UUID) rather than just a static network address, the peer node may seamlessly access instances of an email service and other services locally hosted on the LAN, or alternatively hosted on a peer node at the peer node&apos;s original location or elsewhere, using the UUID to establish its identity. The peer node may rejoin the peer group in New York to access one or more instances of services and other content hosted on the peer group, and may also join a peer group at the Paris location to access one or more other instances of services and content. Thus, the peer-to-peer protocols and UUIDs may provide the ability for peer nodes to move to different peer groups and/or peer regions and access services and other content independent of network addresses and without requiring reconfiguration of the peer node. For example, when the exemplary peer node moves to Paris, connects to the network (at a different network address) and accesses an instance of an email service (either locally or remotely hosted, for example in the New York peer group), the email service may identify the peer node by its unique ID and route the peer&apos;s email to the peer node at the new network address without requiring reconfiguration of the peer node. Thus, peer nodes may be relocated and access services and other content that are locally hosted or services and other content hosted in their original peer group if the services and other content are not required to be locally hosted. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The peer-to-peer platform preferably provides a decentralized environment that minimizes single points of failure and is not dependent on any centralized services. Both centralized and decentralized services may be developed on top of the peer-to-peer platform. With the addition of each new network peer, the network platform preferably becomes more robust as it expands. In the environment, services may be implemented to interoperate with other services giving rise to new P2P applications. For example, a P2P communications service like instant messaging may easily be added to a resource-sharing P2P application if both support at least the necessary peer-to-peer platform protocols. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The peer-to-peer platform may provide interoperability. The peer-to-peer platform may be used by developers independent of preferred programming languages, development environments, or deployment platforms. Embodiments of the peer-to-peer platform may enable interconnected peers to easily locate each other, communicate with each other, participate in community-based activities, and offer services to each other seamlessly across different P2P systems and different communities. The peer-to-peer platform may also provide platform independence. Embodiments of the peer-to-peer platform may be independent of programming languages (such as C/C&plus;&plus;, Java, Perl, and KVM), system platforms (such as the Microsoft Windows, UNIX&reg;, Solaris, Linux and Macintosh platforms), and networking platforms (such as TCP/IP, Bluetooth and Havi). Thus, heterogeneous devices with completely different software stacks may interoperate through the peer-to-peer platform protocols. Embodiments of the peer-to-peer platform may be implementable on any device with a digital heartbeat, including, but not limited to, sensors, consumer electronics, Personal Digital Assistants (PDAs), appliances, network routers, desktop computers, data-center servers, and storage systems. Embodiments of the peer-to-peer platform may enable peers, independent of software and hardware platform, to benefit and profit from being connected to millions of other peers. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> In one embodiment, the peer-to-peer platform may run on any of various operating systems including embedded operating systems (with the appropriate level of Java runtime support, if required) such as Windows95, 98, 2000, ME, and NT, Solaris, Unix, Macintosh, Linux, Java 2 Platform, Micro Edition (J2ME) and PersonalJava Technology. The peer-to-peer platform may be implemented in any of a variety of development environments using any of a variety of programming languages, or combinations of programming languages, including, but not limited to, Java, Java 2ME, C/C&plus;&plus;, Perl, Python and KVM. In one embodiment, the peer-to-peer platform may be implemented in Java. In one embodiment, a peer-to-peer platform may be implemented in C/C&plus;&plus; on some devices, for example, to support devices without Java support. In one embodiment, a peer-to-peer platform may be implemented in KVM on some devices, for example, so that all KVM capable devices such as PDAs and cell phones can be peer-to-peer platform peers. Programming languages other than those listed may also be used in various embodiments. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> A minimal device with the ability to generate a text string may theoretically participate in a peer-to-peer platform network (though not necessarily in every P2P application). The simplistic device may need a surrogate peer on the P2P network. This surrogate peer may perform discovery, advertisement, and communications on behalf of the simplistic device (or many simplistic devices). The location of the surrogate may be hard-wired into the simplistic device. In this way, the simplistic device with the help of the surrogate can be a full-fledged peer on the peer-to-peer platform network. For example, a GPS locator, strapped to a sea turtle and sending out peer-to-peer platform messages wirelessly with location information, may become a peer on a peer-to-peer platform network. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The peer-to-peer platform is preferably independent of transport protocols. For example, the peer-to-peer platform may be implemented on top of TCP/IP, HTTP, Bluetooth, HomePNA, and other protocols. Thus, a system built on top of the peer-to-peer platform preferably functions in the same or similar fashion when the system is expanded to a new networking environment or to a new class of devices, as long as there is a correct transport protocol handler for the new networking protocol. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In one embodiment, the peer-to-peer platform may use XML as the encoding format. XML may provide convenience in parsing and extensibility. Other embodiments of the peer-to-peer platform may use other encoding formats. The use of XML does not imply that all peer-to-peer platform peer nodes must be able to parse and to create XML documents. For example, a cell phone with limited resources may be programmed to recognize and to create certain canned XML messages and can still participate in a peer-to-peer platform network of peers. In one embodiment, a lightweight XML parser may be used that supports a subset of XML. This may help reduce the size of the peer-to-peer platform. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> There may be areas in a peer-to-peer environment where there is not one correct way to do something or where what should be done depends on the nature and context of the overriding application. For example, in the area of security, every P2P application may choose a different authentication scheme, a different way to ensure communication security, a different encryption algorithm for data security, a different signature scheme for authenticity, and a different access control policy. Therefore, for these areas, the peer-to-peer platform may preferably focus on mechanisms instead of policy, so that application developers can have the maximum freedom to innovate and offer competitive solutions. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Implementations of the peer-to-peer platform may be illustrated with a few application or usage scenarios. For example, assume there is a peer-to-peer community offering a search capability for its members, where one member can post a query and other members can hear and respond to the query. One member is a Napster user and has implemented a feature so that, whenever a query is received seeking an MP3 file, this member will look up the Napster directory and then respond to the query with information returned by the Napster system. Here, a member without any knowledge of Napster may benefit because another member implemented a bridge to connect their peer-to-peer system to Napster. The peer-to-peer platform may provide a platform bridge that may be used to connect the various peer-to-peer systems together. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In another example, one engineering group requires a sizable storage capability, but also with redundancy to protect data from sudden loss. Using the peer-to-peer platform, each group may buy a simple storage system without a mirroring feature, where the disks can then discover each other automatically, form a storage peer group, and offer mirroring facilities using their spare capacity. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> As yet another example, many devices such as cell phones, pagers, wireless email devices, Personal Digital Assistants (PDAs), and Personal Computers (PCs) may carry directory and calendar information. Using the peer-to-peer platform, these devices may be able to interact with each other, without extra networking interfaces except those needed by the devices themselves, using the peer-to-peer platform as the common layer of communication and data exchange. </paragraph>
<paragraph id="P-0101" lvl="7"><number>&lsqb;0101&rsqb;</number> Peers </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Network nodes (peers) of various kinds may join the peer-to-peer networking platform by implementing one or more of the platform&apos;s protocols. Each peer operates independently and asynchronously of any other peer, providing a degree of reliability and scalability not typically found in current distributed systems. Some peers may have more dependencies with other peers due to special relationships (e.g. gateways or routers). In one embodiment, a peer does not need to understand all of the protocols of the peer-to-peer platform. The peer can still perform at a reduced level if it does not support one or more of the protocols. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Peers may publish and provide network resources (e.g. CPU, storage and routing resources) that may be used by other peers. Peers typically interact with a small number of other peers (network neighbors or buddy peers). Peers that provide the same set of services tend to be inter-changeable. Thus, it may not matter which peers a peer interacts with. Generally, assumptions should not be made about peer reliability or connectivity, as a peer may appear or leave the network at any time. Peers may have persistent storage. A peer may optionally cache information. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Peers may have multiple network interfaces, though preferably a peer does not need to publish all of its interfaces for use with the peer-to-peer protocols. Each published interface may be advertised as a peer endpoint. In one embodiment, a peer endpoint is an identifier (e.g. a URN or URI) that uniquely identifies a peer network interface. Peer endpoints may be used by peers to establish direct point-to-point connection between two peers. Peers may not have direct point-to-point network connection between themselves, either due to lack of physical network connections, or network configuration (NATs, firewalls, proxies, etc.), and thus a peer may have to use one or more intermediary peers to route a message from an endpoint to another peer endpoint. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> The term rendezvous peer may be used to designate a peer that is designated to be a rendezvous point for discovering information about other peers, peer groups, services and pipes. Rendezvous peers preferably cache information that may be useful to peers including new peers. Rendezvous peers may provide an efficient mechanism for peers that are far away to find (e.g. discover) each other. Rendezvous peers may make peer discovery more practical and efficient. Preferably, a peer group is not required to have a rendezvous peer. In one embodiment, any or even all members of a peer group may become rendezvous peers in a peer group. In one embodiment, each peer group may have different policies to authorize a peer to become a rendezvous peer. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The term router peer may be used to describe a peer that crosses one or more regions and that is designated to be a router between the regions. Router peers may be used to route messages between different network protocols (e.g. TCP/IP, Irda) or to peers that are behind firewalls. In one embodiment, any or all peer members may become routers. In one embodiment, peer groups may have different policies to authorize a peer to become a router peer for other peers. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Peers may be identified by their unique ID (UUID) rather than by a fixed address. When a peer boots, it attempts to contact other peers. In one embodiment, contacted peers may include variable-sized caches that map nearby peers&apos; UUID to their current address. This allows embodiments of the peer-to-peer platform to be run over a dialup connection, for example. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> In one embodiment, a peer may be assigned a unique string as a name. Any naming scheme may be used. In one embodiment, names are not unique unless a coordinated naming service is used to guarantee name uniqueness. A naming service is typically a centralized service that guarantees the uniqueness of name and can be used to register name mapping. Examples of naming services are DNS and LDAP. Use of a naming service is preferably optional. </paragraph>
<paragraph id="P-0109" lvl="7"><number>&lsqb;0109&rsqb;</number> Peer Groups </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Preferably, the peer-to-peer platform describes how to create and discover peer groups, but does not dictate when, where, or why to create a peer group, the type of the group, or the membership of the group. A peer group may provide a common membership definition. Each peer group may establish its own membership policy in a range from open (any peer can join) up to highly secure and protected (a peer may join only if it possesses sufficient credentials). </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> In one embodiment, peers wishing to join a peer group may first locate a current member, and then request to join the peer group. The peer-to-peer platform may define how to discover peer groups, e.g. using a peer discovery protocol. The application to join may be rejected or accepted by the collective set of current members in accordance with the peer group&apos;s membership policy. In one embodiment, a peer group core membership service may be used to enforce a vote among one or more group members. Alternatively, one or more group representative member peers may be elected or appointed to accept or reject new membership applications. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> In one embodiment, the peer-to-peer platform is not concerned with what sequence of events a peer or a peer group comes into existence. Moreover, in one embodiment, the peer-to-peer platform does not limit how many groups a peer can belong to. In one embodiment, nested and/or overlapping peer groups may be formed. In one embodiment, there may be a special group, called the World Peer Group, which may include all peer-to-peer platform peers. The world peer group preferably provides the minimum seed for every peer to potentially find each other and form new groups. In one embodiment, the world peer group has an open membership policy (e.g. has a null membership authenticator service). Some peers inside the world peer group may not be able to discover or communicate with each other&mdash;e.g., they may be separated by a network partition. In one embodiment, participation in the World Peer Group is by default. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> The peer-to-peer platform may use the concept of a peer group as an implicit scope of all messages originated from within the group. Peer groups may serve to subdivide the network into abstract regions providing an implicit scoping mechanism. Peer groups may provide a limited scoping environment to ensure scalability. Peer groups may be formed and self organized based upon the mutual interest of peers. In one embodiment, no particular rules are imposed on the way peer groups are formed, but peers with the same interests may tend to join the same peer groups. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> In one embodiment, a scope may be realized with the formation of a corresponding peer group. Peer group boundaries may define the search scope when searching for a group&apos;s content. For example, a peer in San Francisco looking to buy a used car is normally not interested in cars available outside of the Bay Area. In this case, the peer may want to multicast a message to a subset of the current worldwide peer group, and a subgroup may be formed especially for this purpose. In one embodiment, the multicast may be done without the formation of a new peer group. In one embodiment, all messages may carry a special scope field, which may indicate the scope for which the message is intended. Any peer who receives this message may propagate the message based on the scope indicator. Using this approach, it is preferable that a sending peer is bootstrapped with some well-defined scopes and also has the ability to discover additional scopes. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Peer groups may also be formed based upon the proximity of the member peers. Proximity-based peer groups may serve to subdivide the network into abstract regions. Regions may serve as a placeholder for general communication and security configurations that deal with existing networking infrastructure, communication scopes and security requirements. Peer groups may provide a scoping mechanism to reduce traffic overload. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Peer groups may provide a secure cooperative environment. Peer group boundaries permit member peers to access and publish protected contents. Peer groups form virtual secure regions which boundaries limit access to the peer group resources. Secure services may be provided to peers within a secured peer group. Their boundaries may or may not reflect any underlying physical network boundaries such as those imposed by routers and firewalls. The concept of a region may virtualize the notion of routers and firewalls, subdividing the network into secure regions in a self-organizing fashion without respect to actual physical network boundaries. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Peer groups may also create a monitoring environment. Peer groups may permit peers to monitor a set of peers for any special purpose (heartbeat, traffic introspection, accountability, etc.). Peer groups may also provide a controlled and self-administered environment. Peer groups may provide a self-organized structure that is self-managed and that may be locally managed. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Peer groups using the peer-to-peer platform preferably provide several capabilities including, but not limited to, the ability to, find nearby peers, find named peers anywhere on the network, find named peer groups anywhere on the network, join and resign from a peer group, establish pipes between peer group members and find and exchange shared content. </paragraph>
<paragraph id="P-0119" lvl="7"><number>&lsqb;0119&rsqb;</number> Content </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Peers may be grouped into peer groups to share content. A content is published and shared among the peer members of a peer group. In one embodiment, content may be shared among group members, but not between groups. In this embodiment, no single item of content may belong to more than one group. If the same content is published in two different peer groups, two different contents may be created. In one embodiment, a content item may be published to make the item&apos;s existence known and available to group members through the use of advertisements. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> An instance of content is a copy of a content. Each content copy may be replicated on different peers in the peer group. Each copy preferably has the same content identifier as well as a similar value. Replicating contents within a peer group may help any single item of content be more available. For example, if an item has two instances residing on two different peers, only one of the peers needs to be alive and respond to the content request. In one embodiment, the peer-to-peer platform protocols do not specify how or when contents are replicated. In one embodiment, whether and how to copy an item of content may be a policy decision that may be encapsulated in higher-level applications and services, for example a content management service. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> A content may be any computer content (e.g. code, data, applications, active content such as services, or other collection of computer-representable resources). Examples of content include, but are not limited to, a text file, a structured document (e.g. a PDF or a XML file), a Java &ldquo;jar&rdquo; or loadable library, code or even an executable process (checkpointed state). No size limitation is assumed. Each content instance may reside on a different peer in the peer group. The instances may differ in their encoding type. HTML, XML and WML are examples of encoding types. Each instance may have the same content identifier as well as a similar set of elements and attributes, and may even exist on the same peer. An encoding metadata element may be used to differentiate instances of content. Making new instances of content on different peers may help any single item of content be more available. For example, if an item has two instances residing on two different peers, only one of the peers needs to be alive and respond to the content request. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Items of content that represent a network service may be referred to as active content. These items may have additional core elements above and beyond the basic elements used for identification and advertisement. In one embodiment, active content items may be recognized by Multi-Purpose Internet Mail Extensions (MIME) content type and subtype. In one embodiment, all peer-to-peer platform active contents may have the same type. In one embodiment, the subtype of an active content may be defined by network service providers and may be used to imply the additional core elements belonging to active content documents. In one embodiment, the peer-to-peer platform may give latitude to service providers in this regard, yielding many service implementation possibilities. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In one embodiment, each item of content may have a unique canonical name. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an exemplary canonical content name (which may be referred to as a content identifier or content ID) according to one embodiment. The unique identifier may include a peer group universal unique identifier (UUID) <highlight><bold>170</bold></highlight>, and also may include another name <highlight><bold>174</bold></highlight> that may be computed, parsed, and maintained by peer group members. In one embodiment, the UUID may be a 128-bit field. In one embodiment, the name may be a byte array. In one embodiment, the particular name implementation within a peer group is not mandated by the peer-to-peer platform. The name may be, for example, a hash code, a URI, a URN, or a name generated by any suitable means of uniquely identifying content within a peer group. In one embodiment, a length of remainder field <highlight><bold>172</bold></highlight> may specify the length of the name field <highlight><bold>174</bold></highlight> for this content in this particular implementation. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In one embodiment, once a content item has been published to the peer-to-peer network, it may not be assumed that that the content can be later retrieved from the network. The content may be only available from peers that are not currently reachable or not currently part of the network. In one embodiment, once a content item has been published to the peer-to-peer network, it may not be assumed that the content can be deleted. Replication/republication of content by peers on the network may be unrestricted and the content may propagate to peers that are not reachable from the publishing peer. </paragraph>
<paragraph id="P-0126" lvl="7"><number>&lsqb;0126&rsqb;</number> Pipes </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Pipes may provide the primary channels for communication among peers and are a mechanism for establishing communication between peers. Pipes may be used as communication channels for sending and receiving messages between services or applications over peer endpoints. Pipes may connect peers that have a direct physical link and peers that do not have a direct physical link. In the latter case, one or more intermediary peer endpoints may be used to route messages between the two pipe endpoints. A pipe instance is, logically speaking, a resource within a peer group. The actual implementation of a pipe instance is typically through a pipe service. In one embodiment, at each endpoint, software to send, or receive, as well as to manage optional associated pipe message queues is assumed, but not mandated. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> Pipes in the peer-to-peer platform are preferably asynchronous, unidirectional, stateless and unreliable to provide the lowest overhead. Pipes are preferably unidirectional, and thus in one embodiment there are input pipes and output pipes. Asynchronous pipes may enable developers to build large-scale interconnected distributed services and applications. Pipes are preferably indiscriminate and may thus support binary code, data strings, Java technology-based objects, and/or applets, among others. The peer-to-peer platform preferably does not define how the internals of a pipe work. Any number of unicast and multicast protocols and algorithms, and combinations thereof, may be used. In one embodiment, one pipe may be chained together with each section of the chain using a different transport protocol. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> The pipe endpoints may be referred to as input pipes (receiving end) and output pipes (sending end). Pipes may provide the illusion of a virtual in and out mailbox that is independent of any single peer location. Services and applications may communicate through pipes without knowing on which physical peer a pipe endpoint is bound. When a message is sent into a pipe, the message is sent to all peer endpoints currently connected (listening) to the pipe. The set of currently connected pipe endpoints (input pipes) may be obtained using the pipe binding protocol. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Unlike conventional mechanisms, peer-to-peer platform pipes may have ends that may be moved around and bound to different peers at different times, or not connected at all. In one embodiment, pipes may be virtual, in that a pipe&apos;s endpoint may be bound to one or more peer endpoints. In one embodiment, pipe endpoints may be non-localized to a physical peer, and may be dynamically bound at creation time or runtime via the pipe binding protocol. The pipe binding process may include discovering and connecting the two or more endpoints of a pipe. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Using pipes, developers may build highly available services where pipe connections may be established independently of a peer location. This dynamic binding of pipes helps to provide redundant implementation of services over a P2P network. A peer may logically &ldquo;pick up&rdquo; a pipe at any point in time. For example, a peer that wants to use a spell checker service man connect to a peer group&apos;s spell checker pipe that is implemented as a redundant peer group service. The peer may be serviced as long as there is at least one single instance of a spell checker service still running somewhere within the peer group. Thus, using pipes as described herein, a collection of peers together may provide a high level of fault tolerance, where a new peer at a different location may replace a crashed peer, with the new peer taking over the existing pipe to keep the communication going. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> In one embodiment, enhanced pipes with additional properties such as reliability, security, and quality of service may be supported. In embodiments where the peer-to-peer platform runs on top of transports that have such properties, an implementation may optimize and utilize the transports. For example, when two peers communicate with each other and both have TCP/IP support, then an implementation may use the bidirectional capabilities of TCP/IP to create bidirectional pipes. Other data transfer methods that may be implemented by pipes as provided at the service layer to provide different quality of service include, but are not limited to: synchronous request-response (the endpoint sends a message, and receives a correlated answer), streaming (efficient control-flow data transfer) and bulk transfer (bulk reliable data transfer of binary data). </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Pipes may offer several modes of communication. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a point-to-point pipe connection between peers <highlight><bold>200</bold></highlight>C and <highlight><bold>200</bold></highlight>D according to one embodiment. In one embodiment, a point-to-point pipe connects exactly two peer endpoints together, an input pipe <highlight><bold>202</bold></highlight>A that receives messages sent from an output pipe <highlight><bold>204</bold></highlight>A. The pipe appears as an output pipe to the sender and as an input pipe to the receiver, with traffic going in one direction only&mdash;from the sender to the receiver. In one embodiment, no reply or acknowledgement operation is supported. In one embodiment, additional information in the message payload (for example, a unique ID) may be required to thread message sequences. The message payload may also contain a pipe advertisement that can be used to open a pipe to reply to the sender (send/response). </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> also illustrates a propagate pipe with peer <highlight><bold>200</bold></highlight>A as a propagation source and peers <highlight><bold>200</bold></highlight>B and <highlight><bold>200</bold></highlight>C with listening input pipes according to one embodiment. A propagate pipe may connect two or more peer endpoints together, from one output pipe <highlight><bold>204</bold></highlight>B to one or more input pipes (e.g. <highlight><bold>202</bold></highlight>B and <highlight><bold>202</bold></highlight>C). The result is that any message sent into the output pipe is sent to all input pipes. Messages flow into the input pipes from the output pipe (propagation source). A propagate message may be sent to all listening input pipes. This process may create multiple copies of the message to be sent. On transports that provide multicast (e.g. TCP/IP), when the propagate scope maps to underlying physical subnets in a one-to-one fashion, transport multicast be may used as an implementation for propagate. Propagate may be implemented using point-to-point communication on transports that do not provide multicast such as HTTP. </paragraph>
<paragraph id="P-0135" lvl="7"><number>&lsqb;0135&rsqb;</number> Messages </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> In one embodiment, the peer-to-peer platform may use asynchronous messages as a basis for providing Internet-scalable peer-to-peer communication. The information transmitted using pipes may be packaged as messages. Messages define an envelope to transfer any kinds of data. A message may contain an arbitrary number of named subsections which can hold any form of data. In one embodiment, the messages may be in a markup language. In one embodiment, the markup language is XML. Each peer&apos;s messaging layer may deliver an ordered sequence of bytes from the peer to another peer. The messaging layer may send information as a sequence of bytes in one atomic message unit. In one embodiment, messages may be sent between peer endpoints. In one embodiment, an endpoint may be defined as a logical destination (e.g. embodied as a URN) on any networking transport capable of sending and receiving Datagram-style messages. Endpoints are typically mapped into physical addresses by the messaging layer at runtime. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> In one embodiment, a message may be a Datagram that may include an envelope and a stack of protocol headers with bodies and an optional trailer. The envelope may include, but is not limited to, a header, a message digest, (optionally) the source endpoint, and the destination endpoint. In one embodiment, each protocol header may include, but is not limited to, a tag naming the protocol in use and a body length. Each protocol body may be a variable length amount of bytes that is protocol tag dependent. Each protocol body may include, but is not limited to, one or more credentials used to identify the sender to the receiver. Such a message format preferably supports multiple transport standards. An optional trailer may include traces and accounting information. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> The messaging layer may use the transport specified by the URN to send and receive messages. In one embodiment, both reliable connection-based transports such as TCP/IP and unreliable connectionless transports like UDP/IP may be supported. Other existing message transports such as IRDA, and emerging transports like Bluetooth may also be supported using the peer endpoint addressing scheme. Peer-to-peer platform messages are preferably useable on top of asynchronous, unreliable, and unidirectional transport. The peer-to-peer platform protocols preferably use a low-level message transport layer (e.g. XML) as a basis for providing Internet-scalable peer-to-peer communication. The peer-to-peer platform preferably does not assume that the networking transport is IP-based. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> The message digest in the envelope may be used to guarantee the data integrity of messages. Messages may also be encrypted and signed for confidentiality and refutability. In one embodiment, each protocol body may include one or more credentials used to identify the sender to the receiver. A credential is a key that, when presented in a message body, may be used to identify a sender and to verify that sender&apos;s right to send the message to the specified endpoint. The credential may be an opaque token that is preferably presented each time a message is sent. In one embodiment, the sending address placed in the message envelope may be crosschecked with the sender&apos;s identity in the credential. Credentials may be stored in the message body on a per-protocol &lt;tag&gt; basis. In one embodiment, the exact format and content of the credentials are not specified by the peer-to-peer platform. For example, a credential may be a signature that provides proof of message integrity and/or origin. As another example, a message body may be encrypted, with the credential providing further information on how to decrypt the content. In one embodiment, each credential&apos;s implementation may be specified as a plug-in configuration, which preferably allows multiple authentication configurations to coexist on the same network. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> When an unreliable networking transport is used, each message may be delivered more than once to the same destination or may not arrive at the destination. Two or more messages may arrive in a different order than sent. In one embodiment, high-level communication services layered upon the core protocols may perform message re-ordering, duplicate message removal, and processing acknowledgement messages that indicate some previously sent message actually arrived at a peer. Regardless of transport, messages may be unicast (point to point) between two peers or may be propagated (like a multicast) to a peer group. Preferably, no multicast support in the underlying transport is required. In one embodiment, peers receiving a corrupted or compromised message may discard the message. Messages may be corrupted or intentionally altered in transmission on the network. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> The peer-to-peer platform preferably does not mandate how messages are propagated. For example, when a peer sends out a peer discovery message, the peer discovery protocol preferably does not dictate if the message should be confined to the local area network only, or if it must be propagated to every comer of the world. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The peer-to-peer platform messages <highlight><bold>252</bold></highlight> are preferably defined with the envelope <highlight><bold>250</bold></highlight> as illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In one embodiment, the messages are defined in a markup language. In one embodiment, the markup language is XML. The following is an exemplary message in XML:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;SampleMessage&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;SampleMessageVersion&gt; version number &ldquo;1.0&rdquo;&lt;/SampleMessageVersion&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageDest&gt; destination peer id &lt;/SampleMessageDest&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageSrc&gt; source peer id &lt;/SampleMessageSrc&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageDigest&gt; digest &lt;/SampleMessageDigest&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageTagName&gt; tag &lt;/SampleMessageTagName&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageTagData&gt; body &lt;/SampleMessageTagData&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="98PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>. . . . . . . . . . . . . </entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="231PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;SampleMessageTagName&gt; tag &lt;/SampleMessageTagName&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageTagData&gt; body &lt;/SampleMessageTagData&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SampleMessageTrailer&gt; String&lt;/SampleMessageTrailer&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="245PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/SampleMessage&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> The version number may be a string. The destination and source peer identifier may be represented as peer-to-peer platform identifiers. In one embodiment, the digest is either an MD5 or SHA1 hash or a digital signature. The digest may serve as a placeholder for either. A message may have as many tag parts as needed. In one embodiment, the tag name may be a string and the body may be a byte array containing a string without XML escape characters (&ldquo;&lt;&rdquo;, &ldquo;&gt;&rdquo;) or a base64 encoded string. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In one embodiment, the message format may support binary data and/or multi-part messages with MIME-types. The message format may allow for arbitrary message header fields, including optional header fields. The message format may allow for data verification of message content and the cryptographic signing of messages. The message format may provide an arbitrary number of named subsections that may contain any form of data of any (reasonable) size. The message format may be &ldquo;email-safe&rdquo; such that its contents may be extracted reliably after standard textual transformations committed my E-mail client and server software. </paragraph>
<paragraph id="P-0145" lvl="7"><number>&lsqb;0145&rsqb;</number> Services </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Peers may cooperate and communicate to publish, discover and invoke network services. A service denotes a set of functions that a provider offers. In one embodiment, a peer-to-peer platform peer can offer a service by itself or in cooperation with other peers. In one embodiment, a peer may publicize a service by publishing a service advertisement for the service. Other peers may then discover this service using the peer discovery protocol (through the advertisement) and make use of it. A peer may publish as many services as it can provide. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> In one embodiment, services may either be pre-installed into a peer or loaded from the network. The process of finding, downloading and installing a service from the network may include performing a search on the network for the service, retrieving the service, and then installing the service. Once a service is installed and activated, pipes may be used to communicate with the service. In one embodiment, peer-to-peer platform-enabled services may publish pipe advertisements as their main invocation mechanism. The service advertisement may specify one or more pipe advertisements that may be used by a peer to create output pipes to invoke the service. The service advertisement may also include a list of predetermined messages that may be sent by a peer to interact with the service. The service advertisement may describe all messages that a client may send or receive. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Several methods may be provided by various embodiments to publish a service. Services may be published before creating a new peer group by adding the service advertisement to the peer group advertisement. Services may also be published by adding the services in a separate peer service advertisement. The discovery service may also allow new advertisements to be added at runtime. The new advertisement will belong to a predefined peer group. Other methods of publishing services may be provided. Note that service advertisements may be placed in the peer group advertisement of any group. Since all peers belong to the global peer group, a peer may publish the service in the global peer group advertisement to make it available to any peer. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In one embodiment, services advertised in a peer group advertisement are instantiated for a peer when the peer joins the group. In one embodiment, all the services are instantiated. In another embodiment, none, one or more of the advertised services may be instantiated when the peer joins the peer group. Service advertisements in the peer group advertisement may include resolver, discovery, membership, peer information and pipe service advertisements. In one embodiment, services advertised in a peer group advertisement are loaded on the peer when the peer boots. In one embodiment, this automated loading is not mandatory but is part of the Java Binding. One embodiment may provide a mechanism to force a service in a peer group advertisement to be instantiated by a peer. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> In one embodiment, when a peer boots, any services advertised in the peer advertisement are loaded. The peer advertisement corresponds to the platform advertisement. These services may include the minimal set of services to bootstrap the creation of new peers: discovery service, membership service, resolver service, peer information service and pipe service. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> In one embodiment, when a peer switches from one peer group to another, the first group&apos;s services remain active. In one embodiment, a peer may call a stop method on the service application interface to stop an instance of a local service. A peer that is a member of one peer group that refers to a service may join a second peer group that also refers to the service while still a member of the first. Whether the service is instantiated once or twice may depend on the service implementation. Some service implementations may use a static instantiation that is done once. In this case, all groups share the same instance. Other service implementations are local to a peer group and are not aware of the state of any other peer groups on the same node. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> In one embodiment, services may use a &ldquo;time to live&rdquo; indicator that defines when the service was created, and would also define the lifetime of the service. After its lifetime has expired, the stale service may be purged. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> A service may be well defined and widely available so that a peer can use it directly. Other services may require special code in order to actually access the service. For example, the way to interface with the service provider may be encoded in a piece of software. In this case, it is preferable if a peer can locate an implementation that is suitable for the peer&apos;s specific runtime environment. In one embodiment, if multiple implementations of the same service are available, then peers hosted on Java runtimes can use Java programming language implementations while native peers to use native code implementations. In one embodiment, service implementations may be pre-installed into a peer node or loaded from the network. In one embodiment, once a service is installed and activated, pipes may be used to communicate with the service. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> In one embodiment, each service may have a unique identifier. In one embodiment, a service may have a name that may include a canonical name string that may indicate the type and/or purpose of the service. A service may also provide optional information (e.g. a set of descriptive keywords) that further describes the service. The unique identifier, name and optional information may be stored within a service advertisement. The advertisement may also include other information needed to configure and instantiate a service. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> In one embodiment, the peer-to-peer platform may recognize two levels of services, peer services and peer group services. A service that executes only on a single peer may be referred to as a peer service. A peer service is accessible only on the peer that is publishing the service. If that peer happens to fail, then service also fails. This level of service reliability may be acceptable for an embedded device, for example, providing a calendar and email client to a single user. Multiple instances of the service may be run on different peers, but each instance publishes its own advertisement. A service that is composed of a collection of cooperating instances (potentially cooperating with each other) of the service running on multiple peers in a peer group may be referred to as a peer group service. A peer group service may employ fault tolerance algorithms to provide the service at a higher level of availability than that a peer service can offer. If any one peer fails, the collective peer group service may not be affected, because the service may still be available from at least one other peer member. Peer group services may be published as part of the peer group advertisement. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> In one embodiment, the peer-to-peer platform may include a set of default peer group services such as peer discovery, as well as a set of configurable services such as routing. In one embodiment, a peer-to-peer platform peer may not be required to have one or all of these services. For example, a cell phone peer may be pre-configured with enough information to contact a fixed server provided by the telecom operator. This may be enough to bootstrap the cell phone peer without requiring it to independently carry with it additional services. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> In one embodiment, although the concept of a service is orthogonal to that of a peer and a peer group, a peer group formed using the peer-to-peer platform may require a minimum set of services needed to support the operation of the group. Some services may be well known and may be referred to as peer-to-peer platform core services. Embodiments of the peer-to-peer platform may define a set of core peer group services that may be used to form and support peer groups. In one embodiment, the core peer group services may provide the minimum services required to form a peer group (e.g. membership and discovery services). The peer-to-peer platform core services are preferably 100% decentralized and thus may enable pure peer-to-peer network computing. In one embodiment, it is not required that all core services be implemented by every peer group. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> In one embodiment, the peer-to-peer platform may define peer group core services including, but not limited to, a discovery service, a membership service, an access service, a pipe service, a resolver service and a monitoring service. A discovery service may be used to search for peer group resources such as peers, peer groups, and pipes. The search criteria may include a resource name. Discovery and discovery services are described more fully later in this document. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> In one embodiment, most peer groups will have at least a membership service. Current peer group members may use the membership service during the login process to reject or accept a new peer group membership application. The membership service may be a &ldquo;null&rdquo; authenticator service that imposes no real membership policy. Peers wishing to join a peer group first locate a current member, and then request to join. The application to join may be either rejected or accepted by the collective set of current members. The membership service may enforce a vote of peers or alternatively elect a designated group representative to accept or reject new membership applications. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> An access service may be used to validate, distribute, and authenticate a group member&apos;s credentials. The access service may define the type of credential used in the message-based protocols used within the peer group. The access service may be used to validate requests made by one peer to another. The peer receiving the request provides the requesting peer&apos;s credentials and information about the request being made to the access service to determine if the access is permitted. In one embodiment, not all actions within the peer group need to be checked with the access service, only those actions which only some peers are permitted to use. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> A pipe service may be used to establish and manage pipe connections between the different peer group members. A resolver service may be used to send query string to peers to find information about a peer, a peer group, a service or a pipe. A monitoring service is used to allow one peer to monitor other members of the same peer group. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> In on embodiment, not all the above services are required to be implemented by a peer group. Each service may implement one or more of the peer-to-peer platform protocols. A service preferably implements one protocol for simplicity and modularity reasons, but some services may not implement any protocols. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> Other services may be user-defined and provide application dependent services such as content searching and indexing. A user-defined service may provide additional APIs. User-defined services may be implemented that may offer the ability to mix-in centralization as a means of increasing performance. In one embodiment, the peer-to-peer platform core services may provide a reference implementation for user-defined services. Examples of user defined services may include, but are not limited to: </paragraph>
<paragraph id="P-0164" lvl="2"><number>&lsqb;0164&rsqb;</number> Efficient long-distance peer lookup and rendezvous using a peer naming and discovery service. </paragraph>
<paragraph id="P-0165" lvl="2"><number>&lsqb;0165&rsqb;</number> Simple, low-cost information search and indexing using a content sharing service. </paragraph>
<paragraph id="P-0166" lvl="2"><number>&lsqb;0166&rsqb;</number> Interoperability with existing centralized networking infrastructure and security authorities in corporate, public, private, or university networks using administration services. </paragraph>
<paragraph id="P-0167" lvl="2"><number>&lsqb;0167&rsqb;</number> A resolver service may be implemented to find active (running on some peer) and inactive (not yet running) service instances. </paragraph>
<paragraph id="P-0168" lvl="2"><number>&lsqb;0168&rsqb;</number> An FTP service that allows file transfers among peers over pipes using FTP. </paragraph>
<paragraph id="P-0169" lvl="7"><number>&lsqb;0169&rsqb;</number> Advertisements </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> In one embodiment, the peer-to-peer protocols may use advertisements to describe and publish the existence of peer resources. An advertisement may be defined as a structured, language neutral metadata structure that names, describes, and publishes the existence of a peer-to-peer platform resource, such as a peer, a peer group, a pipe, or a service. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> In one embodiment, advertisements may be used in the peer-to-peer platform as language-neutral metadata structures. In one embodiment, each software platform binding may describe how advertisements are converted to and from native data structures such as Java objects or &lsquo;C&rsquo; structures. Each protocol specification may describe one or more request and response message pairs. In one embodiment, advertisements may be the most common document exchanged in messages. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> Information exchanged between peers may include advertisement documents. The peer-to-peer platform preferably includes advertisement documents to represent all of the peer-to-peer platform resources managed by the core platform, such as peers, peer groups, pipes and services. In one embodiment, the peer-to-peer platform may define a set of core advertisements. The peer-to-peer platform may define core advertisement types including, but not limited to, one or more of peer advertisements, peer group advertisements, pipe advertisements, service advertisements, content advertisements, and endpoint advertisements. In one embodiment, user-defined advertisement subtypes (for example, using XML schemas) may be formed from these basic types. Subtypes of the core advertisements may be used to add an unlimited amount of extra, richer metadata to a peer-to-peer network. The peer-to-peer platform protocols, configurations and core software services however, preferably operate only on the core advertisements. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> In one embodiment, an advertisement is a markup language structured document that names, describes, and publishes the existence of a peer-to-peer platform resource. In one embodiment, peer-to-peer platform advertisements may be represented in the Extensible Markup Language (XML) and are therefore software platform neutral. XML provides a powerful means of representing data and metadata throughout a distributed system. XML provides universal (software-platform neutral) data because XML is language agnostic, self-describing, strongly-typed and ensures correct syntax. XML advertisements may be strongly typed and validated using XML schemas. XML also allows advertisements to be translated into other encodings such as HTML and WML. This feature allows peers that do not support XML to access advertised resources. In one embodiment, each document may be converted to and from a platform specific representation such as a Java object. In one embodiment, peers supporting the various protocols requiring that advertisements be exchanged in messages may accept only valid XML documents that descend from the base XML advertisement types. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> Advertisements represented in a markup language such as XML, like any markup language document, may be composed of a series of hierarchically arranged elements. Each element may include its data and/or additional elements. An element may also have attributes. Attributes are name-value string pairs. An attribute may be used to store metadata, which may be used to describe the data within the element. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> In one embodiment, a peer advertisement may be used to describe a peer. A peer advertisement may describe the peer resources. One use of a peer advertisement is to hold specific information about the peer, such as its name, peer identifier, registered services and available endpoints. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates the content of a peer advertisement according to one embodiment. The following is an example of one embodiment of a peer advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Name &gt; name of the peer&lt;/Name&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Keywords&gt;search keywords &lt;/Keywords&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Pid&gt; Peer identifier &lt;/Pid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Services&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt; Service advertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry>. . . </entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Service advertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/ Services&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Endpoints&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;endpoint advertisement &gt;</entry>
</row>
<row>
<entry></entry>
<entry>. . . </entry>
</row>
<row>
<entry></entry>
<entry>&lt;/endpoint advertisement &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Endpoint&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;InitialApp&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt; Service advertisement &gt;</entry>
</row>
<row>
<entry></entry>
<entry>. . . </entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Service advertisement &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/InitialApp&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/PeerAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Embodiments of a peer advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0177" lvl="2"><number>&lsqb;0177&rsqb;</number> Name: an optional string that can be associated with a peer. In one embodiment, the name is not required to be unique unless the name is obtained from a centralized naming service that guarantees name uniqueness. </paragraph>
<paragraph id="P-0178" lvl="2"><number>&lsqb;0178&rsqb;</number> Keywords: an optional string that may be used to index and search for a peer. In one embodiment, the string is not guarantee to be unique. Two peers may have the same keywords. The keywords string may contain spaces. </paragraph>
<paragraph id="P-0179" lvl="2"><number>&lsqb;0179&rsqb;</number> Peer identifier: uniquely identifies the peer. In one embodiment, this may be a required element. Each peer has a unique identifier. </paragraph>
<paragraph id="P-0180" lvl="2"><number>&lsqb;0180&rsqb;</number> Service: a service advertisement element for each service published on the peer. Services started on a peer may publish themselves to the peer. In one embodiment, not all services running on the peer need to publish themselves. </paragraph>
<paragraph id="P-0181" lvl="2"><number>&lsqb;0181&rsqb;</number> Endpoint: an endpoint URI (e.g. tcp://129.144.136.190:9701 or http://129.144.36.190:9702) for each endpoint available on the peer. </paragraph>
<paragraph id="P-0182" lvl="2"><number>&lsqb;0182&rsqb;</number> InitialApp: Optional application/service started when the peer is booted. A service advertisement is used to describe the service. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> In one embodiment, a peer group advertisement may be used to describe, for a peer group, the group specific information (name, peer group identifier, etc.), the membership process, and the available peer group services. The peer group advertisement defines the core set of services to be used by that peer group. In one embodiment, it may not enforce that each peer must run each service locally. Rather it defines the set of services that are made available to the peer group. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> In one embodiment, the initial creator of the peer group may define what advertisements go into the peer group advertisement at creation time. Other peers may get a copy of the peer group advertisement when they discover advertisements via the discovery service. In one embodiment, peer group advertisements are immutable objects and new services may not be added due to java binding. Other embodiments may allow new services to be added. In one embodiment, a peer group may provide a registration service that allows the dynamic registration of services. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the content of a peer group advertisement according to one embodiment. The following is an example of one embodiment of a peer group advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding &ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerGroupAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Name&gt; name of the peer group&lt;/Name&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Keywords&gt;search keywords &lt;/Keywords&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Gid&gt; Peer group Id &lt;/Gid</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Services&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Service advertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry>. . . </entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Service advertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Services&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;InitialApp&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Service advertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry>. . .</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Service advertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/InitialApp&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/PeerGroupAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> Embodiments of a peer group advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0187" lvl="2"><number>&lsqb;0187&rsqb;</number> Name: an optional name that may be associated with a peer group. In one embodiment, the name is not required to be unique unless the name is obtained from a centralized naming service that guarantee name uniqueness. </paragraph>
<paragraph id="P-0188" lvl="2"><number>&lsqb;0188&rsqb;</number> Keywords: an optional string that may be used to index and search for a peer group. In one embodiment, the string is not guarantee to be unique. Two peer groups may have the same keywords. </paragraph>
<paragraph id="P-0189" lvl="2"><number>&lsqb;0189&rsqb;</number> Peer group Id: uniquely identifies the peer group. In one embodiment, this is a required element. Each peer group has a unique id. </paragraph>
<paragraph id="P-0190" lvl="2"><number>&lsqb;0190&rsqb;</number> Service: a service advertisement element for each peer group service available in the peer group. In one embodiment, not all peer group services need to be instantiated when a peer joins a peer group. In one embodiment, at least a membership service should be available, so the membership service may implement a null authenticator membership. </paragraph>
<paragraph id="P-0191" lvl="2"><number>&lsqb;0191&rsqb;</number> InitialApp: optional application/service started when a peer is joining a peer group. A service advertisement may be used to describe the service. The initial application may be started when a peer is joining a group. Alternatively, it may be left to the joining peer to decide to either start or not start the peer group initial application. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Once a peer joins a group, that peer may receive (depending again upon membership configuration) a full membership-level peer group advertisement. The full membership advertisement, for example, might include the configuration (required of all members) to vote for new member approval. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> In one embodiment, a pipe advertisement may be used to describe an instance of a pipe communication channel. A pipe advertisement may be used by a pipe service to create associated input and output pipe endpoints. In one embodiment, a pipe advertisement document may be published and obtained either by using a discovery service (e.g. the core discovery service) or by embedding it within other advertisements such as the peer or peer group advertisement. Each pipe advertisement may include an optional symbolic name that names the pipe and a pipe type to indicate the type of the pipe (point-to-point, propagate, secure, etc). <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the content of a pipe advertisement according to one embodiment. The following is an example of one embodiment of a pipe advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00004">
<number>4</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo;encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PipeAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Name&gt; name of the pipe&lt;/Name&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Id&gt; Pipe Id &lt;/Id&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Type&gt; Pipe Type &lt;/Type&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/PipeAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> Embodiments of a pipe advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0195" lvl="2"><number>&lsqb;0195&rsqb;</number> Name: an optional name that may be associated with a pipe. In one embodiment, the name is not required to be unique unless the name is obtained from a centralized naming service that guarantee name uniqueness. </paragraph>
<paragraph id="P-0196" lvl="2"><number>&lsqb;0196&rsqb;</number> Pipe identifier: uniquely identifies the pipe. In one embodiment, this is a required element. Each pipe has a unique id. </paragraph>
<paragraph id="P-0197" lvl="2"><number>&lsqb;0197&rsqb;</number> Type: This is an optional pipe type that may be provided to specify the quality of services implemented by the pipe. Pipe types may include, but are not limited to: </paragraph>
<paragraph id="P-0198" lvl="3"><number>&lsqb;0198&rsqb;</number> RELIABLE (guaranteed delivery and ordering, and deliver only once) </paragraph>
<paragraph id="P-0199" lvl="3"><number>&lsqb;0199&rsqb;</number> UNRELIABLE (may not arrive at the destination, may be delivered more than once to the same destination, may arrive in different order) </paragraph>
<paragraph id="P-0200" lvl="3"><number>&lsqb;0200&rsqb;</number> SECURE (reliable and encrypted transfer) </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> In one embodiment, a service advertisement may be used to describe a peer-to-peer platform-enabled service. Service advertisements preferably describe how to activate and/or use the service. In one embodiment, a peer-to-peer platform-enabled service is a service that uses pipes as primary invocation mechanism. To invoke the service, a peer may a message to the associated service pipe. In one embodiment, the core peer group services that each peer group preferably implements in order to respond to the messages described for the peer-to-peer platform protocols are peer-to-peer platform-enabled services and thus may be published using service advertisements. The service advertisement document may be published and obtained using the peer information protocol for peer services, or alternatively using the peer group discovery protocol for peer group services. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> In one embodiment, a pipe advertisement and access method fields may provide a placeholder for any kind of service invocation schema that defines the valid set of XML messages accepted by the service and the associated message flow. Thus, the peer-to-peer platform protocols may be agnostic of service invocation and interoperate with any existing framework. A service advertisement access method field may refer to a WSDL (e.g. www.w3.org/TR/wsdl), ebXML (e.g. www.ebxml.org), UPNP (e.g. www.upnp.org) or a client-proxy schema, among others. For example, a WSDL access method may define messages that are abstract descriptions of the data being exchanged and the collections of operations supported by the service using a WSDL schema. In one embodiment, a service advertisement may include multiple access method tags, as there may be multiple ways to invoke a service. Thus, the peer may ultimately decide which invocation mechanism to use. For example, small devices may want to use a small-footprint mechanism or a service framework they already have the code for, and larger devices may decide to download a client-proxy code. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> In one embodiment, the access method for services is a schema of valid XML messages accepted by the service. In one embodiment, a service advertisement may contain a URL or URI tag to point to a jar file, DLL, or loadable library. A peer may use this to download the code to run the service, for example if the peer joins the peer group and doesn&apos;t have the required code to run the service. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> In one embodiment, once a service advertisement is sent out into the world there is no method of pulling it back in. However, each individual peer may have the ability to purge the set of cached advertisements that reside locally, and a rendezvous peer may purge its cache periodically (e.g. daily). </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the content of a service advertisement according to one embodiment. The following is an example of one embodiment of a service advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00005">
<number>5</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&ldquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ServiceAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Name&gt; name of the Service&lt;/Name&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Version&gt; Version Id &lt;/Version&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Keywords&gt;search keywords &lt;/Keywords&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Id&gt;Service identifier &lt;/Id&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Pipe&gt; Pipe endpoint to access the service &lt;/Pipe&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Params&gt; service configuration parameters &lt;/Params&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;URI&gt; service provider location&lt;/URI&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Provider&gt; Service Provider&lt;/Provider&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;AccessMethods&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>. . . </entry>
</row>
<row>
<entry></entry>
<entry>&lt;/AcessMethods&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/ServiceAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> Embodiments of a service advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0207" lvl="2"><number>&lsqb;0207&rsqb;</number> Name: an optional name that may be associated with a service. In one embodiment, the name is not required to be unique unless the name is obtained from a centralized naming service that guarantees name uniqueness. </paragraph>
<paragraph id="P-0208" lvl="2"><number>&lsqb;0208&rsqb;</number> Keywords: an optional string that may be used to index and search for a service. In one embodiment, the string is not guaranteed to be unique. Two services may have the same keywords. </paragraph>
<paragraph id="P-0209" lvl="2"><number>&lsqb;0209&rsqb;</number> Service Id: uniquely identifies a service. In one embodiment, each service has a unique id. In one embodiment, this element may be required. </paragraph>
<paragraph id="P-0210" lvl="2"><number>&lsqb;0210&rsqb;</number> Version: specifies the service version number. In one embodiment, this element may be required. </paragraph>
<paragraph id="P-0211" lvl="2"><number>&lsqb;0211&rsqb;</number> Provider: gives information about the provider of the service. This will typically be a vendor name. In one embodiment, this element may be required. </paragraph>
<paragraph id="P-0212" lvl="2"><number>&lsqb;0212&rsqb;</number> Pipe: an optional element that specifies a pipe advertisement to be used to create an output pipe to connect to the service. In one embodiment, services are not required to use pipes. </paragraph>
<paragraph id="P-0213" lvl="2"><number>&lsqb;0213&rsqb;</number> Params: a list of configuration parameters available to the peer when invoking the service. In one embodiment, the parameter field is optional. Parameters may be defined as a list of strings. </paragraph>
<paragraph id="P-0214" lvl="2"><number>&lsqb;0214&rsqb;</number> URI: This is an optional parameter that may be used to specify the location of where the code for the service may be found. </paragraph>
<paragraph id="P-0215" lvl="2"><number>&lsqb;0215&rsqb;</number> Access Methods: In one embodiment, at least one access method is required to specify how to invoke the service. Multiple access method tags may be used when multiple access methods are available. The access method tag allows any kind of service invocation representation to be specified. For example the access method may be a placeholder for a WSDL or uPnP document that describes a web service access method. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> In one embodiment, a content advertisement may be used to describe a content document stored somewhere in a peer group. In one embodiment, there are no restrictions on the type of contents that can be represented. A content may be a file, a byte array, code or process state, for example. In one embodiment, each item of content may have a unique identifier also known as its canonical name. The unique identifier may include a peer group universal unique identifier (UUID), and also may include another name that may be computed, parsed, and maintained by peer group members. In one embodiment, the content&apos;s name implementation within the peer group is not mandated by the peer-to-peer platform. The name may be a hash code, a URI, or a name generated by any suitable means of uniquely identifying content within a peer group. The entire canonical content name may be referred to as a content identifier or content ID. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an exemplary content identifier according to one embodiment. </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates a content advertisement according to one embodiment. A size element is preferably provided for all content items and gives the total size of the content. In one embodiment, the size is in bytes. In one embodiment, the size is a long (unsigned 64-bits). A content advertisement may also include a MIME (Multi-Purpose Internet Mail Extensions) type that describes the MIME type (encoding may be deduced from the type) of the in-line or referenced data. A content advertisement may also include a RefID element. If the advertised content is another advertisement (based upon its type), the RefID is the content ID of the referenced content. If the advertised content is not another advertisement, the RefID element may be omitted. </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> The following is an example of one embodiment of a content advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00006">
<number>6</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ContentAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Mimetype&gt; name of the pipe&lt;/Mimetype&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Size&gt; Pipe Id &lt;/Size&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Encoding&gt; Pipe Type &lt;/Encoding&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ID&gt; Content ID&lt;/ID&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;RefID&gt; Content ID &lt;/RefID&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Document&gt; document &lt;/Document&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/ContentAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> Embodiments of a content advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0220" lvl="2"><number>&lsqb;0220&rsqb;</number> ID: in one embodiment, all contents have a unique id. </paragraph>
<paragraph id="P-0221" lvl="2"><number>&lsqb;0221&rsqb;</number> Size: the total size of the content. In one embodiment, a long (unsigned 64-bits) represented as a string. &ldquo;&minus;1&rdquo; indicates that the size is unknown. </paragraph>
<paragraph id="P-0222" lvl="2"><number>&lsqb;0222&rsqb;</number> Mimetype: the mime type of the content. The type may be unknown. </paragraph>
<paragraph id="P-0223" lvl="2"><number>&lsqb;0223&rsqb;</number> Encoding: specifies the encoding used. </paragraph>
<paragraph id="P-0224" lvl="2"><number>&lsqb;0224&rsqb;</number> RefID: if the advertised content is about another content, the RefID specifies the content ID of the referenced content. </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> In one embodiment, an endpoint advertisement may be used to describe peer transport protocols. In one embodiment, a peer may support one or more transport protocols. In one embodiment, peers may have multiple network interfaces. Typically, there will be one peer endpoint for each configured network interface and/or protocol (e.g. TCP/IP, HTTP). An endpoint advertisement may be included as a tag field in a peer advertisement to describe the endpoints available on the peer. In one embodiment, an endpoint advertisement document may be published and obtained either by using the core discovery service or by embedding it within other advertisements such as the peer advertisement. Each endpoint advertisement may include transport binding information about each network interface or transport protocol. Endpoints may be represented with a virtual endpoint address that may include all necessary information to create a physical communication channel on the specific endpoint transport. For example, &ldquo;tcp://123.124.20.20:1002&rdquo; or &ldquo;http:/34.125.23.10:6002&rdquo; are strings representing endpoint addresses. <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates the content of an endpoint advertisement according to one embodiment. The following is an example of one embodiment of an endpoint advertisement in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00007">
<number>7</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo;encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;EndpointAdvertisement&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="35PT" align="left"/>
<colspec colname="1" colwidth="182PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Name&gt; name of the endpoint&lt;/Name&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Keywords&gt; search string &lt;/Keywords&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Address&gt; endpoint logical address &lt; /Address&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/EndpointAdvertisement&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> Embodiments of an endpoint advertisement may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0227" lvl="2"><number>&lsqb;0227&rsqb;</number> Name: an optional name that may be associated with an endpoint. In one embodiment, the name is not required to be unique unless the name is obtained from a centralized naming service that guarantee name uniqueness. </paragraph>
<paragraph id="P-0228" lvl="2"><number>&lsqb;0228&rsqb;</number> Keywords: an optional string that may be used to index and search for an endpoint. In one embodiment, the string is not guarantee to be unique. Two endpoints may have the same keywords. </paragraph>
<paragraph id="P-0229" lvl="7"><number>&lsqb;0229&rsqb;</number> Peer-to-peer Platform Protocols </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> The peer-to-peer platform protocols may be used to provide and support ad hoc, pervasive, and multi-hop peer-to-peer (P2P) network computing. Using the protocols, peers can cooperate to form self-organized and self-configured peer groups independently of their positions in the network (e.g. edges, firewalls), and without the need of a centralized management infrastructure. The peer-to-peer platform protocols may have very low overhead, make few assumptions about the underlying network transport and limited requirements of the peer environment, and may be used to deploy a wide variety of P2P applications and services in a highly unreliable and changing network environment. </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> In one embodiment, the peer-to-peer platform may include core protocols including, but not limited to, a peer membership protocol, a peer discovery protocol, a peer resolver protocol, a peer information protocol, a pipe binding protocol, and a peer endpoint protocol. These protocols may be implemented using a common messaging layer. This messaging layer binds the protocols to various network transports. In one embodiment, the peer-to-peer platform protocols may be specified as a set of markup language (e.g. XML) messages exchanged between peers. Each software platform binding describes how a message is converted to and from a native data structures such as a Java object or &lsquo;C&rsquo; structure. In one embodiment, the use of markup language messages to define protocols allows many different kinds of peers to participate in a protocol. Each peer is free to implement the protocol in a manner best suited to its abilities and role. Peer-to-peer platform messages are described previously in this document. </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> In one embodiment, each of the protocols is independent of the others. Preferably, a peer is not required to implement all of the networking protocols. A peer preferably needs to implement only the protocol that it requires. For example, a device may have all the advertisements it uses pre-stored in memory, so that peer does not need to implement the Peer Discovery Protocol. As another example, a peer may use a pre-configured set of peer routers to route all its messages, hence the peer does not need to implement the Peer Endpoint protocol. Instead, the peer sends messages to the routers to be forwarded. As yet another example, a peer may not need to obtain or wish to provide status information to other peers, hence the peer does not to implement the peer information protocol. The same can be said about all of the other protocols. In one embodiment, a peer may implement only a portion (client-side or server-side only, for example) of a protocol. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> Peers may use the peer-to-peer platform protocols to advertise their resources and to discover network resources (services, pipes, etc.) available from other peers. Peers may form and join peer groups to create special relationships. The peer-to-peer platform protocols may allow peers to communicate without needing to understand or manage the potentially complex and dynamic network topologies that are becoming common. Peers may cooperate to route messages allowing for full peer connectivity. The peer-to-peer platform protocols allow peers to dynamically route messages across multiple network hops to any destination in the network (potentially traversing firewalls). Each message may include either a complete or a partial ordered list of gateway peers through which the message might be routed. If route information is incorrect, an intermediate peer may assist in dynamically finding a new route. A peer-to-peer platform protocol message that is routed through multiple hops is preferably not assumed to be reliably delivered, even if only reliable transports such as TCP/IP are used through all hops. A congested peer may drop messages at any time rather than routing them. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> The peer-to-peer platform protocols may be implemented on a variety of networks including, but not limited to, the Internet, corporate intranets, dynamic proximity networks, home networking environments, LANs and WANs. The peer-to-peer platform protocols may allow the peer-to-peer platform to be easily implemented on unidirectional links and asymmetric transports. In particular, many forms of wireless networking do not provide equal capability for devices to send and receive. The peer-to-peer platform permits any unidirectional link to be used when necessary, improving overall performance and network connectivity in the system. Thus, the peer-to-peer platform protocols may be easy to implement on any transport. Implementations on reliable and bidirectional transports such as TCP/IP or HTTP may provide efficient bidirectional communications. Even on bidirectional transports, communication ability between any pair of peers may at times not work equally well in both directions. That is, communications between two peers will in many cases be able to operate bidirectionally, but at times the connection between two peers may be only unidirectional, allowing one peer to successfully send messages to the other while no communication is possible in the reverse direction. The peer-to-peer platform unidirectional and asymmetric transport also plays well in multi-hop network environments where the message latency may be difficult to predict. Furthermore, peers in a P2P network tend to have nondeterministic behaviors and thus may appear or leave the network very frequently. </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> In one embodiment, the peer-to-peer platform protocols do not require a broadcast or multicast capability of the underlying network transport. Messages intended for receipt by multiple peers (propagation) may be implemented using point-to-point communications. The peer-to-peer platform protocols preferably do not require periodic messages of any kind at any level to be sent within the network, and thus preferably do not require periodic polling, link status sensing, or neighbor detection messages, and may not rely on these functions from any underlying network transport in the network. This entirely on-demand behavior of the protocols and lack of periodic activity may allow the number of overhead messages generated by the peer-to-peer platform to scale all the way down to near or at zero, when all peers are stationary with respect to each other and all routes needed for current communication have already been discovered. </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> In one embodiment, the peer-to-peer platform protocols are defined as idempotent protocol exchanges. The same messages may be sent/received more than once during the course of a protocol exchange. Preferably, no protocol states are required to be maintained at both ends. Due to the unpredictability of P2P networks, assumptions may not be made about the time required for a message to reach a destination peer, and thus the peer-to-peer platform protocols preferably do not impose any timing requirements for message receipt. </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> The peer-to-peer platform protocols may take advantage of additional optimizations, such as the easy ability to reverse a source route to obtain a route back to the origin of the original route. </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates protocols and bindings in a peer-to-peer platform according to one embodiment. When the peer-to-peer platform protocols are implemented using a particular programming language and over a particular transport protocol, the implementation is an instance of a peer-to-peer platform binding <highlight><bold>220</bold></highlight>, where the peer-to-peer platform protocols are bound to the language and the transport layer. In one embodiment, protocol and peer software implementation issues may be defined in documents specific to the binding. A binding document describes how the protocols are bound to an underlying network transport (such as TCP/IP or UDP/IP) or to a software platform such as Java 222 or a native software platform 224 such as UNIX. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> The following describes the transport binding of the peer-to-peer platform protocols over TCP/IP including the message wire format of peer-to-peer platform endpoint messages over a TCP/IP socket connection according to one embodiment. Each TCP/IP message may include a header and a body. In one embodiment, the format of the header is: </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Type Source IP address Source Port Size Option Unused </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> The type may include information used to either unicast or multicast the request. The type may indicate whether this is a propagate message, a unicast message, an ACK or a NACK. The port may allow each peer to decide to bind its transport service to a specific port number. The TCP binding preferably does not require that a specific port be used. The size may indicate the body size (not including the header). The option may be used to specify the kind of socket connections (uni- or bi-directional) in use. The TCP/IP binding does not require the maintenance of any states. The normal operation is for one peer to send a TCP/IP packet to another one, and to close the socket after the packet is sent. This is the minimum functionality required to implement unidirectional pipes. In one embodiment, if the receiving end decides to keep the connection active (socket &ldquo;keep alive&rdquo;), it may return an indicator to the sender to tell the sending end that it is keeping the connection alive. The sending end may reuse the same socket to send a new packet. </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> The following describes the transport binding of the peer-to-peer platform protocols over HTTP including the wire message format for the HTTP binding of the peer-to-peer platform protocols. An HTTP request format message may include a header and a body using an HTML format. For example:  
<table-cwu id="TABLE-US-00008">
<number>8</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;HTML&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Code&gt; Header &lt;/Code&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Msg&gt; Body &lt;/Msg&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/HTML&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> The header allows the receiving end to determine which message type is received. Message types may include request succeeded, request failed, empty (no body) and response (the body is not empty and contains data). The body may be represented as a string in the HTML request document. Connection states that may be used include, but are not limited to: </paragraph>
<paragraph id="P-0244" lvl="2"><number>&lsqb;0244&rsqb;</number> Peer Connection: Before a message can be sent to a HTTP server peer, the HTTP client may be required to send a request for connection to the other peer. The request for connection message may use the empty header type. The message may be sent using a GET request to the following server URL: http://ip-name:port/reg/client-peerid/. ip-name specifies the IP of the server peer and the port is the corresponding server port number (<highlight><bold>8080</bold></highlight> for example). The server replies with an empty message containing either a request succeeded or request failed header type. The peer connection message may be used to create a client session on the receiving peer. The receiving peer may decide to reject the connection and refuse the client connection. This corresponds to a client registration. </paragraph>
<paragraph id="P-0245" lvl="2"><number>&lsqb;0245&rsqb;</number> Message Sending: To send a message to another peer server, the client sends a message of the response type with a message body part. The server replies with an ok or failed message. The message is sent to the following URL using the PUT method: http://ip-name:port/snd/. The server replies with a message including a request succeeded or request failed header type. </paragraph>
<paragraph id="P-0246" lvl="2"><number>&lsqb;0246&rsqb;</number> Message Retrieving: To retrieve messages from a peer server, the client may send a GET request message with the empty header tag to the following URL: http://ipname:port/rec/client-peerid/. The server replies with may respond with a message failed message or with a Content message including the messages retrieved. </paragraph>
<paragraph id="P-0247" lvl="7"><number>&lsqb;0247&rsqb;</number> Peer Discovery Protocol </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> In one embodiment, the peer-to-peer platform may include a peer discovery protocol that may allow a peer to find advertisements on other peers. The peer discovery protocol may be used to discover any published peer resources including other peers, peer groups, pipes, services and any other resource that has an advertisement in the peer-to-peer network. This protocol may be used to find members of any kind of peer group, presumably to request membership. In one embodiment, the peer discovery protocol is the default discovery protocol for all peer groups, including the world peer group. The discovery protocol may be used as a default discovery protocol that allows all peer-to-peer platform peers to understand each other at a very basic level. </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> The peer discovery protocol may provide, at the lowest level, the minimum building blocks for propagating discovery requests between peers. Thus, the peer discovery protocol may provide the essential discovery infrastructure for building high-level discovery services. In many situations, discovery information is better known by a high-level service, because the service may have a better knowledge of the topology (firewall traversal), and the connectivity between peers. The peer discovery protocol may provide a basic mechanism to discover advertisements while providing hooks so high-level services and applications can participate in the discovery process. Services may be able to give hints to improve discovery (i.e. decide which advertisements are the most valuable to cache). </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> In one embodiment, the peer discovery protocol may be based on web crawling and the use of rendezvous peers. Rendezvous peers are peers that offer to cache advertisements to help others peers discover resources, and propagate requests they cannot answer to other known rendezvous peers. Rendezvous peers and their use in the discovery process are discussed later in this document. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> In one embodiment, custom discovery services may choose to leverage the peer discovery protocol. If a peer group does not have its own discovery service, the peer discovery protocol is preferably used as the method for probing peers for advertisements. Rendezvous peers may keep a list of known peers and peer groups. This list may or may not be exhaustive or timely. A custom discovery service (if it knew that the region&apos;s rendezvous did keep a timely exhaustive list), for example, may discover all peers in the region by sending a single message to the rendezvous peer. </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> In one embodiment, peer discovery may be done with, or alternatively without, specifying a name for the peer to be located and/or the group to which peers belong. When no name is specified, all discovered advertisements of the requested type may be returned. If a probing peer provides the name of the peer to be located, a simple translation may be requested that returns that peer&apos;s advertisement. Once a peer is discovered, ping, status, and capability messages may be sent to its &ldquo;main&rdquo; endpoint(s) using a peer information protocol. Peers may export more than one endpoint. Preferably, each peer designates at least one primary endpoint to handle the low-level housekeeping protocols such as the peer discovery protocol and the peer information protocol. </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> In one embodiment, the peer discovery protocol may be used to probe network peer groups looking for peers that belong to specified peer groups. This process may be referred to as screening. Peers may be screened for membership by presenting each candidate member with a peer group name (string matched with the peer group advertisement canonical name). Preferably, peers claiming to belong to this group may respond, while other peers do not respond. The peer discovery protocol may be used to discover any type of core advertisement including, but not limited to: peer advertisements, peer group advertisements, pipe advertisements and service advertisements. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> Peer groups need customizable and adaptable discovery policies. In one embodiment, the peer-to-peer platform may be policy-agnostic, and may only provide the basics for discovery. The basics may include one or more core discovery protocols including, but not limited to, a propagate protocol (broadcast within a scope range (subnet or peer group members)), a rendezvous protocol (unicast to a trusted discovery peer) and an invite protocol (reverse discovering). </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> A discovery policy may be implemented in a discovery service based on the core discovery protocol. In one embodiment, a discovery service in the core peer-to-peer platform may be used to discover abstractions and/or entities in the peer-to-peer network including, but not limited to, peers, peer groups, peer group policies (group defined services) and pipe endpoints. </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> In some embodiments of a peer-to-peer platform, the discovery service may rely on trusted peers (discovery proxies). The discovery service may leverage local neighbors (local propagate). The discovery service may use rendezvous peers (indexes). The discovery service may leave traces in discovery proxies (cache). The discovery service may use net crawling as a last resort (propagate between trusted discovery proxies). In one embodiment, a discovery service may not discover some entities in the peer-to-peer network including, but not limited to, content (large scale; in one embodiment, a content management service may be used for content discovery), metadata (maintain relationship between data), users, and applications. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> Embodiments of a peer-to-peer platform discovery service may leverage surrounding peers and peer groups, provide meetings points for far away peers and groups, use an asynchronous protocol and provide reverse discovery. The discovery service preferably may be used to find new neighbor peers and provide the ability for a peer to learn about other peer&apos;s abilities. Embodiments of a discovery service in the peer-to-peer platform may provide extensibility, spontaneous configuration, adaptive connectivity, a dynamic (i.e. no fixed) network topology, and the ability to reach the &ldquo;edge of the Internet&rdquo; (firewall, and NAT). </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> Embodiments of a discovery method in the peer-to-peer platform preferably do not require centralized naming (e.g. no DNS). A discovery service preferably may provide predefined meeting points that may be used in platform bootstrapping. The discovery service preferably may support a dynamic environment (peers may come and go). The discovery service preferably may support an unreliable environment (peers may fail). The discovery service preferably may help to adapt to a changing environment through viral behavior. The discovery service preferably may be used to improve performance as a system ages (increase locality). The discovery service preferably may be used in support of security (change of physical location). The discovery service preferably may be used that provides administration less discovery (zero-admin). </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> Embodiments of the peer-to-peer platform discovery service may allow a peer to learn about other peers that discover it. In one embodiment, the peer-to-peer platform discovery service may provide application-managed rendezvous. In one embodiment of the peer-to-peer platform, a peer discovery protocol may support a discovery query message and a discovery response message to be used in the peer discovery process. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> Peer groups need customizable and adaptable discovery policies. One approach to implementing a discovery policy is to start simple and build more complex policies. Embodiments of the peer-to-peer platform discovery service may support discovery methods including, but not limited to: </paragraph>
<paragraph id="P-0261" lvl="2"><number>&lsqb;0261&rsqb;</number> Propagate Discovery </paragraph>
<paragraph id="P-0262" lvl="3"><number>&lsqb;0262&rsqb;</number> Unicast to predefined rendezvous </paragraph>
<paragraph id="P-0263" lvl="3"><number>&lsqb;0263&rsqb;</number> Leverage transport dependent multicast (e.g. IP) </paragraph>
<paragraph id="P-0264" lvl="2"><number>&lsqb;0264&rsqb;</number> Unicast Discovery </paragraph>
<paragraph id="P-0265" lvl="3"><number>&lsqb;0265&rsqb;</number> Unicast to known rendezvous for forward propagation </paragraph>
<paragraph id="P-0266" lvl="3"><number>&lsqb;0266&rsqb;</number> May be used for reverse Discovery </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> The peer-to-peer platform preferably does not mandate exactly how discovery is done. Discovery may be completely decentralized, completely centralized, or a hybrid of the two. Embodiments of the peer-to-peer platform may support discovery mechanisms including, but not limited to: </paragraph>
<paragraph id="P-0268" lvl="2"><number>&lsqb;0268&rsqb;</number> LAN-based discovery. This is done via a local broadcast over the subset. </paragraph>
<paragraph id="P-0269" lvl="2"><number>&lsqb;0269&rsqb;</number> Discovery through invitation. If a peer receives an invitation (either in-band or out-of-band), the peer information contained in the invitation may be used to discover a (perhaps remote) peer. </paragraph>
<paragraph id="P-0270" lvl="2"><number>&lsqb;0270&rsqb;</number> Cascaded discovery. If a peer discovers a second peer, the first peer may, with the permission of the second peer, view the horizon of the second peer to discover new peers, groups, and services. </paragraph>
<paragraph id="P-0271" lvl="2"><number>&lsqb;0271&rsqb;</number> Discovery via rendezvous points. A rendezvous point is a special peer that keeps information about the peers it knows about. A peer that can communicate via a rendezvous peer, for example via a peer-to-peer protocol pipe, may learn of the existence of other peers. Rendezvous points may be helpful to an isolated peer by quickly seeding it with lots of information. In one embodiment, a web site or its equivalent may provide information of well-known peer-to-peer protocol rendezvous points. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> In one embodiment, a peer-to-peer platform web of trust may be used. In a web of trust, a peer group creator may select initial discovery proxies, and may delegate to new peer members. Any peer, when trusted, can become a discovery proxy. Discovery proxies may propagate requests between each other for net-crawling discovery. New peers may be untrusted or low-trust peers, and may be typically difficult to find and have limited discovery range (this may help protect against misbehaviors and denial of service attacks). Trusted members are easier to discover. Peers may increase their discovery range as they become more trusted (discovery credential). Some peers may not need to discover beyond their initial net peer group range. </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> In one embodiment, a peer may go through a proximity network, which also may be referred to as a subnet or region, to try to find (discover) surrounding peers. The Internet includes the concept of subnets that are physically defined by physical routers that define regions in which computer systems are connected to one another. Within one of these regions, the peer-to-peer protocol uses multicast or other propagate mechanism to find peers. In one embodiment, a propagate discovery mechanism may be provided where one peer can propagate a discovery request through a local subnet. Peers that are in the subnet may respond to the discovery request. The propagate discovery mechanism may provide primarily close range discovery. In one embodiment, only peers that are in the same physical subnet (region) may respond. &ldquo;Propagate&rdquo; is at the conceptual level. Multicast is implemented by TCP/IP to provide propagate capabilities. Other transports may use other methods to implement propagate. For example, Bluetooth provides a different implementation of propagate which is not multicast. </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> The core discovery protocol may provide a format for a local peer to send a propagate message (a request to find information about other peers or peer groups in its local region or subnet) and also a format for a response message. A propagate may ask who&apos;s there (what peers are in the subnet). One or more peers may decide to respond. Other peers on the subnet may choose not to respond if they don&apos;t want to be discovered by the requesting peer. The response message may indicate that a peer is there and that the requesting peer may communicate with it if it wants more information. In one embodiment, the core peer-to-peer platform may define the format of the discovery requests and responses as part of the peer discovery protocol. In one embodiment, the messages may be XML messages. </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> One embodiment of a peer-to-peer platform may provide a bootstrapping process for peers. In one embodiment, a new peer may not know any peers or peer groups when bootstrapped. When bootstrapping, the peer may issue a peer discovery propagate message. The new peer is looking for one or more peers in the subnet. The new peer needs to reach some level of connectivity in order to support higher-level operations. From discovered peers, the new peer may acquire information needed to allow the new peer to go further in its bootstrapping process. For example, the new peer may send messages to another peer requesting information on services that the other peer may be aware of that the new peer needs for bootstrapping. </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> When the new peer discovers another peer or peers, it may attempt to discover peer groups. This process may be similar to the peer discovery process described above. The new peer may send (e.g. propagate) another discovery message that is configured to discover peer groups. Peers in the proximity network (region) that are aware of a peer group or peer groups may respond to the peer group discovery message, and may return information on the peer group(s) (e.g. peer group advertisements) of which they are aware. The new peer may use this information to determine a peer group or peer groups that it may be interested in joining. </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> In one embodiment, a peer group may be configured so that only a subset of peers within a group may have the capabilities to respond to peer group discovery messages and to provide information about the peer group to inquiring peers. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> Peer and peer group discovery may both be implemented by the peer discovery protocol. Peer and peer group discover are more or less at the same level in the P2P platform. In one embodiment, peer discovery may use a message that indicates the discovery is looking for peers, and peer group discovery may use a similar message that indicates the discovery is looking for peer groups. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> In one embodiment, the peer discovery protocol may be required to be implemented in a peer platform, and thus all peers will have the service running. When one peer sends (e.g. propagates) a request, then a receiving peer must send a response, unless it is configured to not respond to at least some requests from at least some peers based upon configuration parameters. In another embodiment, peers may be implemented without the peer discovery protocol. In other words, in this embodiment, peers are not required to implement the peer discovery platform. For example, on some smart devices, peer information and/or peer group information may be preconfigured into the device, and so bootstrapping may be performed on these devices without having to initiate a peer discovery. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> Embodiments of the peer-to-peer platform may implement a discovery mechanism that is more suited for long-range discovery than the propagate method described above. In one embodiment, rendezvous peers may be used in discovery. A rendezvous peer may be described as a meeting point where peers and/or peer groups may register to be discovered, and may also discover other peers and/or peer groups, and retrieve information on discovered peers and/or peer groups. In one embodiment, a peer (any peer) in a peer group may decide to become or may be appointed or elected as a rendezvous peer in the group. The rendezvous peer may be advertised as a meeting point, and may be predefined on peers so that, for example, the peers, when starting up, may know to go to the rendezvous peer to find information about the peer-to-peer network. Rendezvous peers may act as information brokers or centralized discovery points so that peers can find information in an easy and efficient manner. As a peer group grows, a peer may become a rendezvous peer in the group. In one embodiment, a network of rendezvous peers may be constructed that may help to provide long-range discovery capabilities. A rendezvous peer may be aware of at least some of the other rendezvous peers in the network, and a discovery message from a peer may be forwarded from a first rendezvous peer to a second, and so on, to discover peers and/or peer groups that are &ldquo;distant&rdquo; on the network from the requesting peer. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> Rendezvous peers may offer to cache advertisements to help others peers discover resources, and may propagate (forward) requests they cannot answer to other known rendezvous peers. Preferably, a rendezvous peer implements at least one of these two functions. The services provided by a rendezvous peer may be different than message routing. Message routing is performed at a lower level involving multi-hops connections to send a message between any peers in the network. In one embodiment, the forwarding of a request between two rendezvous peers may involve routing to propagate a request between two rendezvous, but this is transparent to the rendezvous service and done underneath. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> In one embodiment, rendezvous peers may forward requests between each other. A rendezvous may be typically connected to a few other rendezvous peers. There may be as many rendezvous peers as peers in a peer group. Not every peer may be a rendezvous (e.g. if a peer has no caching capabilities or is isolated behind a firewall). In one embodiment, only rendezvous peers may forward a discovery request to another rendezvous peer. This restriction may serve to limit and control the exponential growth of request propagations within the network. Rendezvous peers may thus provide a simple throttle mechanism to control the propagation of requests. In one embodiment, sophisticated rendezvous peers may be deployed to filter and distribute requests for the best usage of network resources. </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> In one embodiment, a peer may be pre-configured with a pre-defined set of rendezvous peers. These bootstrapping rendezvous may help the peer discover enough network resources (peers, rendezvous, services) as it needs to support itself. In one embodiment, the pre-configured rendezvous are optional. A peer may be able to bootstrap itself by finding rendezvous or enough network resources in its proximity environment. If a peer does not know the information, it may ask the surrounding peers (hop of 1) if they know the answer. One or more peers may already have the answer. If no surrounding peers know the answer, the peer may ask its rendezvous peers to find advertisements. Peers are recognized as rendezvous peers in their peer advertisements. When a peer discovers a new peer, it can determine if this peer is a rendezvous. A peer may not be required to use all the rendezvous peers that it has discovered. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> Rendezvous peers may forward requests between themselves. The discovery process continues until one rendezvous peer has the answer or the request dies. There is typically a Time To Live (TTL) associated with the request, so it is not infinitely propagated. As an example, suppose a peer A is attempting to discover a resource R on the network. Peer A issues a discovery request specifying the type (peer, peer group, pipe, service) of advertisements it is looking for. To initiate the Discovery, peer A sends a discovery request message as a single propagate packet to all its available endpoints. The packet may contain the requested peer advertisement, so the receiving peer can respond to the requester. Each discovery request identifies the initiator, and a unique request identification specified by the initiator of the request. When another peer receives the discovery request (assume peer B in this example), if it has the requested R advertisement, it will return to peer A the advertisement for R in a discovery response message. If Peer A does not get response from its surrounding peers (hop of 1), Peer A may send the request to its known rendezvous peers. If the rendezvous peers do not have the advertisement, they can propagate the request to all other rendezvous peers they know. When a rendezvous receives a respond to a request, the rendezvous MAY cache the R advertisement for future usage, before sending it to the requestor. </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> In one embodiment, the peer rendezvous capabilities may be embedded in the core discovery protocol of the peer-to-peer platform. Rendezvous peers may be protocol-based, and may broker more information than name servers that typically only broker names of entities. In one embodiment, a rendezvous peer may maintain indexes for entities in the peer-to-peer platform including peers, peer groups, and advertisements. Indexes may be dynamic indexes which may grow as the peer group community grows and more peers join. As a group joins, some peers may decide to become rendezvous peers to help peers connect with other peers in the group. </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> The rendezvous peer is at the peer level. A rendezvous peer is not a &ldquo;service&rdquo;. A rendezvous peer may be used as part of an infrastructure to construct services such as a DNS or other centralizing and index services. In one embodiment, services may interact with a rendezvous peer to obtain and/or manipulate information stored on the rendezvous peer to perform some task to make the system act more efficiently. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> In a network of peers, some peers may elect themselves, through the discovery protocol, to become rendezvous peers. A rendezvous peer may act as a broker or discovery message router to route discovery messages to the right place. In other words, a rendezvous may act to route discovery requests to the right rendezvous peers. For example, a rendezvous peer may receive a message requesting information about peers that are interested in baseball. The rendezvous peer may know of another rendezvous peer that specializes in information about baseball. The first rendezvous peer may forward or route the message to the second rendezvous peer. In one embodiment, rendezvous peers may maintain connections to other rendezvous peers in order to provide discovery and routing functionality. </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> Rendezvous peers may support long-range discovery. For example, a first peer is at a remote location from a second peer. For one of these peers to find the other with a mechanism such as web crawling may be time consuming, since there maybe a lot of &ldquo;hops&rdquo; between the two peers. Rendezvous peers may provide a shortcut for one of the peers to discover the other. The rendezvous peer, thus, may serve to make the discovery process, in particular long-range discover, more efficient. </paragraph>
<paragraph id="P-0289" lvl="0"><number>&lsqb;0289&rsqb;</number> A peer-to-peer network may be dynamic. Peers and peer groups can come and go. Dynamic identifiers (addresses) may be used. Thus, routes between peers need to be dynamic. Rendezvous peers may provide a method for route discovery between peers that allows routing in the peer-to-peer network to be dynamic. In this method, the rendezvous peers may perform route discovery for peers when the peers send discovery messages to the rendezvous peers or when a peer is attempting to connect to another peer or peer group that is not in the local region of the peer. This method may be transparent to the requesting peer. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> In one embodiment, the rendezvous peers may be able to cache advertisements. An advertisement may be defined as metadata or descriptions of a resource. An advertisement may include information necessary for an entity to connect to or use the resource, for example a service advertisement may include information for connecting to and using the service. Advertisements may be published to allow other entities to discover them. The rendezvous peer may provide the ability for services and applications to store and cache temporary, e.g. via a lease mechanism, advertisements. This may used, for example, when one service needs to connect to another service, and needs the pipe endpoint or communication channel that may be used to connect to the service. The pipe endpoint may be included in a service advertisement published on a rendezvous peer. Thus, in one embodiment, the rendezvous peer provides the ability for peers, peer groups, services and applications to advertise pipe endpoints and to discover pipe endpoints of services and applications. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> In one embodiment, the rendezvous protocol may use an index cache (e.g. on a peer serving as a rendezvous proxy). <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates discovery through a rendezvous peer according to one embodiment. Rendezvous proxy <highlight><bold>206</bold></highlight> may cache peer <highlight><bold>200</bold></highlight> and peer group <highlight><bold>210</bold></highlight> information for peer groups <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B. Peers <highlight><bold>200</bold></highlight> in each peer group <highlight><bold>210</bold></highlight> may then discover each other through rendezvous proxy <highlight><bold>206</bold></highlight>. Rendezvous proxy <highlight><bold>206</bold></highlight> may itself be a peer and may be a member in one or more peer groups <highlight><bold>210</bold></highlight>. In one embodiment, access to rendezvous proxies <highlight><bold>206</bold></highlight> may be restricted to peers with rendezvous access privileges. In this embodiment, non-trusted peers (peers without access privileges) may access rendezvous proxies <highlight><bold>206</bold></highlight> through trusted peers <highlight><bold>200</bold></highlight> within their peer group <highlight><bold>210</bold></highlight>, or alternatively through other local peers in other peer groups. In one embodiment, the rendezvous protocol may be used across subnets (configurable at the peer group level). In one embodiment, the rendezvous protocol may be used across/through firewalls (e.g. gateways). </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> In one embodiment, the peer-to-peer platform may include a propagate policy for use in discovery. <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates discovery through propagate proxies according to one embodiment. In one embodiment, discovery proxy <highlight><bold>208</bold></highlight> may control propagation of discovery messages. In <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, discovery proxy <highlight><bold>208</bold></highlight> may receive discovery messages from peers <highlight><bold>200</bold></highlight> in peer group <highlight><bold>210</bold></highlight>A and propagate the messages to peers in other groups such as peer group <highlight><bold>210</bold></highlight>B. In one embodiment, access to discovery proxies <highlight><bold>208</bold></highlight> may be restricted to peers with discovery proxy access privileges. In this embodiment, non-trusted peers (peers without access privileges) may access discovery proxies through trusted peers <highlight><bold>200</bold></highlight> within their peer group <highlight><bold>210</bold></highlight>, or alternatively through other local peers in other peer groups. In one embodiment, propagation may be controlled using TTL (time to live). In another embodiment, propagation may be controlled using message counts. In one embodiment, the propagate policy may be used for subnet TCP/multicast (platform configurable). In one embodiment, the propagate policy may support HTTP gateways (platform configurable). In one embodiment, the propagate policy may be used through firewalls (e.g. need peer activation behind firewalls). </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> In one embodiment, the peer-to-peer platform may include an invite policy. In one embodiment, the invite policy may support the adding of new peers and peer groups (e.g. publish advertisements). </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> In one embodiment, the peer-to-peer platform may allow the persistent local peer caching of discovery information. In this embodiment, a peer may be allowed to cache advertisements discovered via the peer discovery protocol for later usage. Caching may not be required by the peer-to-peer platform, but caching may be a useful optimization. The caching of advertisements by a peer may help avoid performing a new discovery each time the peer is accessing a network resource. In a highly transient environment, performing the discovery may be necessary. In a static environment, caching may be more efficient. </paragraph>
<paragraph id="P-0295" lvl="0"><number>&lsqb;0295&rsqb;</number> In one embodiment, the peer-to-peer platform may support trusted discovery peers. In one embodiment, the peer-to-peer platform may use discovery credentials. In one embodiment, the peer-to-peer platform may allow credential delegation. In one embodiment, the peer-to-peer platform may support propagate proxies. In one embodiment, a propagate proxy may support TTL/message counts. TTL stands for Time To Live (how long the request lives in the system). In one embodiment, a propagate proxy may support net crawling. In one embodiment, a propagate proxy may provide &ldquo;smart above&rdquo; routing. </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> In one embodiment, a peer preferably does not initiate a new discovery request until the minimum allowable interval between discoveries is reached. This limitation on the maximum rate of discoveries may be similar to the mechanism required by Internet nodes to limit the rate at which ARP requests are sent for any single target IP address. The maximum rate may be defined by each specific implementation transport bindings and exported to the application. </paragraph>
<paragraph id="P-0297" lvl="0"><number>&lsqb;0297&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates using messages to discover advertisements according to one embodiment. A message or messages may be used to get all known, reachable advertisements within a region on the network. This list is preferably not guaranteed to be exhaustive, and may be empty. Named peers may also be located using the peer discovery protocol. A message may include a peer group credential of the probing (requesting) peer that may identify the probing peer to the message recipient. The destination address may be any peer within a region (a propagate message <highlight><bold>230</bold></highlight>) or alternatively a rendezvous peer (a unicast message <highlight><bold>232</bold></highlight>). The response message <highlight><bold>234</bold></highlight> may return one or more advertisements (e.g. peer advertisements and/or peer group advertisements) that may include &ldquo;main&rdquo; endpoint addresses which may be converted to a string in the standard peer endpoint format (e.g. URI or URL) and also may include a network transport name. It is preferably not guaranteed that a response to a query request will be made. Preferably, the peer discovery protocol does not require a reliable transport. Multiple discovery query requests may be sent. None, one or multiple responses may be received. </paragraph>
<paragraph id="P-0298" lvl="0"><number>&lsqb;0298&rsqb;</number> In one embodiment, a discovery query message may be used to send a discovery request to find advertisements (e.g. for peers or peer groups). The discovery query may be sent as a query string (attribute, value) form. A null query string may be sent to match any results. A threshold value may be included to indicate the maximum number of matches requested by a peer. The following is an example of one embodiment of a discovery query message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00009">
<number>9</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;DiscoveryQuery&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt; /Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;QueryId&gt; query id&lt;/QueryId&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Type&gt; request type (e.g. PEER, GROUP,</entry>
</row>
<row>
<entry></entry>
<entry>PIPE, SERVICE, CONTENT)</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Type&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Threshold&gt; requested number of responses</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Threshold&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerAdv&gt; peer advertisement of requestor</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/PeerAdv&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Attr&gt; attribute &lt;/Attr&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Value&gt; value &lt;/Value&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/DiscoveryQuery&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0299" lvl="0"><number>&lsqb;0299&rsqb;</number> Embodiments of a discovery query message may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0300" lvl="2"><number>&lsqb;0300&rsqb;</number> Credential: The credential of the sender </paragraph>
<paragraph id="P-0301" lvl="2"><number>&lsqb;0301&rsqb;</number> QueryId: Query identifier </paragraph>
<paragraph id="P-0302" lvl="2"><number>&lsqb;0302&rsqb;</number> Type: specifies which advertisements are returned </paragraph>
<paragraph id="P-0303" lvl="2"><number>&lsqb;0303&rsqb;</number> Threshold: requested number of responses </paragraph>
<paragraph id="P-0304" lvl="2"><number>&lsqb;0304&rsqb;</number> PeerAdv: peer advertisement of requestor </paragraph>
<paragraph id="P-0305" lvl="2"><number>&lsqb;0305&rsqb;</number> Attr: specifies the query attribute </paragraph>
<paragraph id="P-0306" lvl="2"><number>&lsqb;0306&rsqb;</number> Value: specifies the query value </paragraph>
<paragraph id="P-0307" lvl="0"><number>&lsqb;0307&rsqb;</number> In one embodiment, the value tag is only present if the Attr tag field is present. Both the Attr and Value tag may be omitted. </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> In one embodiment, a discovery response message may be used to send a discovery response message to answer a discovery query message. The following is an example of one embodiment of a discovery response message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00010">
<number>10</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;DiscoveryResponse&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;QueryId&gt; query id&lt;/QueryId&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Type&gt; request type (e.g. PEER, GROUP, PIPE,</entry>
</row>
<row>
<entry></entry>
<entry>SERVICE, CONTENT)</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Type&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Attr&gt; Attribute &lt;/Attr&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Value&gt; value &lt;/Value&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Responses&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>(peer, peer group, pipe, service or</entry>
</row>
<row>
<entry></entry>
<entry>content advertisement response)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Responses&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;. . . . . . . . . . . . . &gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Responses&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>(peer, peer group, pipe, service or</entry>
</row>
<row>
<entry></entry>
<entry>content advertisement response)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Responses&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/DiscoveryResponse&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0309" lvl="0"><number>&lsqb;0309&rsqb;</number> Embodiments of a discovery response message may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0310" lvl="2"><number>&lsqb;0310&rsqb;</number> Credential: The credential of the sender </paragraph>
<paragraph id="P-0311" lvl="2"><number>&lsqb;0311&rsqb;</number> QueryId: Query identifier </paragraph>
<paragraph id="P-0312" lvl="2"><number>&lsqb;0312&rsqb;</number> Type: specifies which advertisements are returned </paragraph>
<paragraph id="P-0313" lvl="2"><number>&lsqb;0313&rsqb;</number> Attr: specifies the query attribute </paragraph>
<paragraph id="P-0314" lvl="2"><number>&lsqb;0314&rsqb;</number> Value: specifies the query value </paragraph>
<paragraph id="P-0315" lvl="2"><number>&lsqb;0315&rsqb;</number> Responses: advertisement responses. The advertisement may be a peer, peer group, pipe, content or service advertisement. </paragraph>
<paragraph id="P-0316" lvl="0"><number>&lsqb;0316&rsqb;</number> In one embodiment, the value tag is only present if the Attr tag field is present. Both the Attr and Value tag may be omitted. </paragraph>
<paragraph id="P-0317" lvl="0"><number>&lsqb;0317&rsqb;</number> In one embodiment, if an XML advertisement document is embedded into another XML document, the XML document separators must be dealt with. This may be done using the standard XML escaping rules. For example, &lsquo;&lt;&rsquo; becomes &lsquo;&amp;lt;&rsquo; &lsquo;&gt;&rsquo; becomes &lsquo;&amp;gt;&rsquo; and &lsquo;&amp;&rsquo; becomes &lsquo;&amp;amp&rsquo;. </paragraph>
<paragraph id="P-0318" lvl="7"><number>&lsqb;0318&rsqb;</number> Reverse Discovery </paragraph>
<paragraph id="P-0319" lvl="0"><number>&lsqb;0319&rsqb;</number> Reverse discovery means that, in a peer-to-peer network, when a first entity (e.g. a peer) discovers a second entity (e.g. another peer), the second entity may also discover the first entity from the discovery initiated by the first entity. This may also be referred to as &ldquo;mutual discovery&rdquo;. In most traditional systems, discovery is typically one-directional. In the peer-to-peer world, reverse discovery is important because, by definition, all &ldquo;peers&rdquo; are equal (i.e. it is typically not a hierarchical system). In one embodiment, there may be different levels of discovery for peers. For example, a peer may be configured to remain anonymous when discovering other peers or to always support reverse discovery. In one embodiment, a peer initiating a discovery may also be configured to deny discovery to another peer if the other peer is configured or chooses to remain anonymous. In one embodiment, a peer may also be configured to or may choose to deny discovery by other peers that wish to remain anonymous. </paragraph>
<paragraph id="P-0320" lvl="7"><number>&lsqb;0320&rsqb;</number> Invitations </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> One embodiment of the discovery protocol may also provide methods by which a peer can &ldquo;advertise&rdquo; itself, for example when joining a peer-to-peer network. For example, a peer may send an email message, by telephone, by &ldquo;traditional&rdquo; mail, or by other methods to other peers it discovers or is preconfigured to know about to advertise its presence and willingness to be contacted by other peers. This is done outside of the discovery method, and may be performed by any external medium. A peer who receives an invitation from a peer may have a capability to add or enter the new peer to a list or database of peers that it knows about. When the peer later restarts, these peers may be among the preconfigured peers that the peer knows about. In one embodiment, a peer may have a &ldquo;notify&rdquo; or &ldquo;invitation&rdquo; interface to allow a user to initiate invitations. In one embodiment, the peer-to-peer platform may provide import and export capabilities for invitations. In one embodiment, the invitations may be implemented as documents external to the peer-to-peer system that may be exported from one peer and imported into another peer. In one embodiment, the invitations may be in a format that enables the exporting and importing. In one embodiment, the invitations may be in XML format. In one embodiment, an interface may be provided to allow the manual entering of invitation information. Importing the invitation may create a peer-to-peer platform document that may then be used by the peer. The format of exported documents may depend on the platform on which the peer is implemented. </paragraph>
<paragraph id="P-0322" lvl="7"><number>&lsqb;0322&rsqb;</number> Peer Resolver Protocol </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> In one embodiment, the peer-to-peer platform may include a peer resolver protocol that may allow a peer to send preferably simple, generic search queries to one or more peer services. In one embodiment, only those peers that have access to data repositories and that offer advanced search capabilities typically implement this protocol. Each service may register a handler in the peer group resolver service to process resolver query requests. Resolver queries may be demultiplexed to each service. Each service may respond to a peer via a resolver response message. It is important to point the differences between the peer discovery protocol and the peer resolver protocol. The peer discovery protocol is used to search for advertisements to bootstrap a peer, and discover new network resources. The peer resolver protocol is a generic service that services query protocols. The peer resolver protocol may be used by a service on a peer to interact with a service on another peer. </paragraph>
<paragraph id="P-0324" lvl="0"><number>&lsqb;0324&rsqb;</number> The peer resolver protocol may enable each peer to send and receive generic queries to find or search for peer, peer group, pipe or service specific information such as the state of a service or the state of a pipe endpoint. Preferably, each resolver query has a unique service handler name to specify the receiving service, and a query string to be resolved by the service. The peer resolver protocol preferably provides a generic mechanism for peers to send queries and receive responses. The peer resolver protocol preferably removes the burden for registered message handlers by each service and set message tags to ensure uniqueness of tags. The peer resolver protocol preferably ensures that messages are sent to correct addresses and peer groups. The peer resolver protocol preferably performs authentication and verification of credentials and the dropping of rogue messages. Preferably, there is no guarantee that a response to a resolver query request will be made. Preferably, a peer is not required to respond to a resolver query request. Preferably, a reliable transport is not required by the peer resolver protocol. In one embodiment, multiple resolver query messages may be sent. None, one or multiple responses may be received. </paragraph>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates one embodiment of using peer resolver protocol messages between a requesting peer <highlight><bold>200</bold></highlight>A and a responding peer <highlight><bold>200</bold></highlight>B. In one embodiment, a resolver query message <highlight><bold>236</bold></highlight> may be used to send (unicast) a resolver query request to a service on another member <highlight><bold>200</bold></highlight>B of a peer group. In one embodiment, the resolver query may be sent as a query string to a specific service handler. Preferably, each query has a unique identifier. The query string may be any string that may be interpreted by the targeted service handler. A resolver response message <highlight><bold>238</bold></highlight> may be sent (unicast) to the requesting peer <highlight><bold>200</bold></highlight>A by the service handler. The following is an example of one embodiment of a resolver query message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00011">
<number>11</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&Prime;1.0&Prime; encoding&equals;&Prime;UTF-8&Prime;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ResolverQuery&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;HandlerName&gt; name of handler &lt;/HandlerName&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;QueryId&gt; incremental query Id &lt;/QueryId&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Query&gt; query string &lt;/Query&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/ResolverQuery&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0326" lvl="0"><number>&lsqb;0326&rsqb;</number> Embodiments of a resolver query message may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0327" lvl="2"><number>&lsqb;0327&rsqb;</number> Credential: The credential of the sender </paragraph>
<paragraph id="P-0328" lvl="2"><number>&lsqb;0328&rsqb;</number> QueryId: Query identifier </paragraph>
<paragraph id="P-0329" lvl="2"><number>&lsqb;0329&rsqb;</number> HandlerName: service the query needs to be passed </paragraph>
<paragraph id="P-0330" lvl="2"><number>&lsqb;0330&rsqb;</number> Query: query string </paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> A resolver response message may be returned in response to a resolver query message. The following is an example of one embodiment of a resolver response message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00012">
<number>12</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&Prime;1.0&Prime; encoding&equals;&Prime;UTF-8&Prime;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ResolverResponse&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;HandlerName&gt; name of handler &lt;/HandlerName&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;QueryId&gt; query Id &lt;/QueryId&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Response&gt; response &lt;/Response&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/ResolverResponse&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0332" lvl="0"><number>&lsqb;0332&rsqb;</number> Embodiments of a resolver response message may include, but are not limited to, the following fields: </paragraph>
<paragraph id="P-0333" lvl="2"><number>&lsqb;0333&rsqb;</number> Credential: The credential of the sender </paragraph>
<paragraph id="P-0334" lvl="2"><number>&lsqb;0334&rsqb;</number> QueryId: Query Id (long as a String) </paragraph>
<paragraph id="P-0335" lvl="2"><number>&lsqb;0335&rsqb;</number> HandlerName: service the query needs to be passed </paragraph>
<paragraph id="P-0336" lvl="2"><number>&lsqb;0336&rsqb;</number> Response: response String </paragraph>
<paragraph id="P-0337" lvl="7"><number>&lsqb;0337&rsqb;</number> Peer Information Protocol </paragraph>
<paragraph id="P-0338" lvl="0"><number>&lsqb;0338&rsqb;</number> Once a peer is located, its capabilities and status may be of interest. In one embodiment, the peer-to-peer platform may include a peer information protocol that may allow a peer to learn about other peers&apos; capabilities and status. For example, a peer can send a ping message to see if another peer is alive. A peer may also query another peer&apos;s properties where each property has a name and a value string. Preferably, a peer is not required to respond to a peer information protocol request. </paragraph>
<paragraph id="P-0339" lvl="0"><number>&lsqb;0339&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates one embodiment of using peer information protocol messages between a requesting peer <highlight><bold>200</bold></highlight>A and a responding peer <highlight><bold>200</bold></highlight>B. In one embodiment, to see if peer <highlight><bold>200</bold></highlight>B is alive (i.e. responding to messages), peer <highlight><bold>200</bold></highlight>A may be sent a ping message <highlight><bold>240</bold></highlight>. The ping message <highlight><bold>240</bold></highlight> may include a destination address that is peer <highlight><bold>200</bold></highlight>B&apos;s &ldquo;main&rdquo; endpoint returned during discovery, for example. The message may also include a group membership credential of the requesting peer <highlight><bold>200</bold></highlight>A that may identify the probing peer <highlight><bold>200</bold></highlight>A to the message recipient <highlight><bold>200</bold></highlight>B. The message may also contain an identifier unique to the sender. This identifier is preferably returned in the response message <highlight><bold>242</bold></highlight>. Response message <highlight><bold>242</bold></highlight> may include information about peer <highlight><bold>200</bold></highlight>B, including information on the status of the peer <highlight><bold>200</bold></highlight>B. If peer <highlight><bold>200</bold></highlight>B responds with a message <highlight><bold>242</bold></highlight>, this may indicate to peer <highlight><bold>200</bold></highlight>A that peer <highlight><bold>200</bold></highlight>B is &ldquo;alive&rdquo; and thus currently responding to messages. </paragraph>
<paragraph id="P-0340" lvl="0"><number>&lsqb;0340&rsqb;</number> In one embodiment, messages may be used to get a list of named control &ldquo;properties&rdquo; exported by a peer. A property is a &ldquo;knob&rdquo; used to get information or configuration parameters from the peer. All properties are preferably named (by a string), and are preferably &ldquo;read-only&rdquo;. In one embodiment, higher-level services may offer &ldquo;read-write&rdquo; capability to the same information, given proper security credentials. Each property preferably has a name and a value string. Read-write widgets may allow the string value to be changed, while read-only widgets do not. In one embodiment, the peer information protocol only gives read access. The destination address is a peer&apos;s main endpoint that may have been returned in a discovery response message. </paragraph>
<paragraph id="P-0341" lvl="0"><number>&lsqb;0341&rsqb;</number> Preferably, a reliable transport is not required by the peer information protocol. In one embodiment, multiple peer information messages may be sent. None, one or multiple responses may be received. </paragraph>
<paragraph id="P-0342" lvl="0"><number>&lsqb;0342&rsqb;</number> In one embodiment, a ping message may be sent to a peer to check if the peer is alive and/or to get information about the peer. The ping option may define the response type returned. In one embodiment, a full response (peer advertisement) or a simple acknowledge response (alive and uptime) may be returned. The following is an example of one embodiment of a ping message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00013">
<number>13</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&Prime;1.0&Prime; encoding&equals;&Prime;UTF-8&Prime;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Ping&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source Peer Id &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;TargetPid&gt; Target Peer Id &lt;/TargetPid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Option&gt; type of ping requested&lt;/Option&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Ping&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0343" lvl="0"><number>&lsqb;0343&rsqb;</number> In one embodiment, a peer information response message may be used to send a response message in response to a ping message. The following is an example of one embodiment of a peer information response message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00014">
<number>14</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="196PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerInfo&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="49PT" align="left"/>
<colspec colname="1" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source Peer Id &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;TargetPid&gt; Target Peer Id &lt;/TargetPid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Uptime&gt; uptime&lt;/Uptime&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;TimeStamp&gt; timestamp &lt;/TimeStamp&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerAdv&gt; Peer Advertisement &lt;/PeerAdv&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="196PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/PeerInfo&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0344" lvl="7"><number>&lsqb;0344&rsqb;</number> Peer Membership Protocol </paragraph>
<paragraph id="P-0345" lvl="0"><number>&lsqb;0345&rsqb;</number> In one embodiment, the peer-to-peer platform may include a peer membership protocol that may allow a peer to join or leave peer groups, and to manage membership configurations, rights and responsibilities. This protocol may allow a peer to obtain group membership requirements (such as an understanding of the necessary credential for a successful application to join the group), to apply for membership and receive a membership credential along with a full group advertisement, to update an existing membership or application credential, and to cancel a membership or an application credential. In one embodiment, authenticators and/or security credentials may be used to provide the desired level of protection. </paragraph>
<paragraph id="P-0346" lvl="0"><number>&lsqb;0346&rsqb;</number> In one embodiment, the process of joining a peer group may include obtaining a credential that is used to become a group member. In one embodiment, the process of joining a peer group may include obtaining a &ldquo;form&rdquo; listing the set of requirements asked of all group members. In one embodiment, this form may be a structured document (e.g. a peer group advertisement) that lists the peer group membership service. </paragraph>
<paragraph id="P-0347" lvl="0"><number>&lsqb;0347&rsqb;</number> In one embodiment, the peer membership protocol may define messages including, but not limited to, an apply message, a join message, an acknowledgement (ACK) message, a renew message, and a cancel message. A peer membership protocol apply message may be sent by a potential new group member to the group membership application authenticator. The authenticator&apos;s endpoint is preferably listed in the peer group advertisement of every member. In one embodiment, a successful response from the group&apos;s authenticator may include an application credential and a group advertisement that preferably lists, at a minimum, the group&apos;s membership service. In one embodiment, the apply message may include, but is not limited to, the current credential of the candidate group member and the peer endpoint for the peer group membership authenticator to respond to with an acknowledgement (ACK) message. </paragraph>
<paragraph id="P-0348" lvl="0"><number>&lsqb;0348&rsqb;</number> The following is an example of one embodiment of a peer membership protocol apply message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00015">
<number>15</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;MembershipApply&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential of requestor &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source pipe identifier &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Authenticator&gt; Authenticator pipe</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/Authenticator&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/MembershipApply&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0349" lvl="0"><number>&lsqb;0349&rsqb;</number> A peer membership protocol join message may be sent by a peer to the peer group membership authenticator to join a group. The peer preferably passes an application credential (from an apply response ACK message) for authentication purposes. A successful response from the group&apos;s authenticator preferably includes a full membership credential and a full group advertisement that lists, at a minimum, the group&apos;s membership configurations requested of full members in good standing. The message may include a credential (application credential of the applying peer: see ACK message). This credential may be used as the application form when joining. The message may also include the peer endpoint for the authenticator to respond to with an ACK message. </paragraph>
<paragraph id="P-0350" lvl="0"><number>&lsqb;0350&rsqb;</number> The following is an example of one embodiment of a peer membership protocol join message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00016">
<number>16</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;MembershipJoin&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential of requestor &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source pipe identifier &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Membersship&gt; membership pipe</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/Membership&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Identity&gt; identity&lt;/Identity&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/MembershipJoin&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0351" lvl="0"><number>&lsqb;0351&rsqb;</number> A peer membership protocol ACK message is an acknowledge message that may be used for both join and apply operations. A peer membership protocol ACK message may be sent back by the membership authenticator to indicate whether or nor the peer was granted application rights to the peer group if the peer is applying, or full membership to the peer group if peer is attempting to join. In one embodiment, an ACK message may also be sent in response to peer membership protocol renew messages and cancel messages. The message may include a credential (an application or membership credential allocated to the peer by the peer group authenticator). The message may also include a more complete peer group advertisement that may provide access to further configurations. In one embodiment, not all configuration protocols are visible until the peer has been granted membership or application rights. Some configurations may need to be protected. Also, depending on the peer credential, the peer may not have access to all the configurations. </paragraph>
<paragraph id="P-0352" lvl="0"><number>&lsqb;0352&rsqb;</number> The following is an example of one embodiment of a peer membership protocol ack message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00017">
<number>17</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;MembershipAck&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source pipe identifier &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Membersship&gt; membership pipe</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/Membership&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerGroupAdv&gt; peer group</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/PeerGroupAdv&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PeerGroupCredential&gt; credential</entry>
</row>
<row>
<entry></entry>
<entry>granted &lt;/PeerGroupCredential&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/MembershipAck&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0353" lvl="0"><number>&lsqb;0353&rsqb;</number> A peer membership protocol renew message may be sent by a peer to renew its credential (membership or application) access to the peer group. An ACK (acknowledgement) message may be returned with a new credential and lease if the new is accepted. The renew message may include, but is not limited to, a credential (a membership or application credential of the peer) and the peer endpoint to which an ACK response message may be sent. </paragraph>
<paragraph id="P-0354" lvl="0"><number>&lsqb;0354&rsqb;</number> The following is an example of one embodiment of a peer membership protocol renew message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00018">
<number>18</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;MembershipRenew&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source pipe identifier &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Membersship&gt; membership pipe</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/Membership&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/MembershipRenew&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0355" lvl="0"><number>&lsqb;0355&rsqb;</number> A peer membership protocol cancel message may be sent by a peer to cancel the peer&apos;s membership or application rights in a peer group. The message may include, but is not limited to, a credential (a membership or application credential of the peer) and the peer endpoint to send an ACK message. In one embodiment, an ACK to a cancel may include a response status indicating the cancel was accepted. </paragraph>
<paragraph id="P-0356" lvl="0"><number>&lsqb;0356&rsqb;</number> The following is an example of one embodiment of a peer membership protocol cancel message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00019">
<number>19</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;MembershipCancel&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; Credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;SourcePid&gt; Source pipe identifier &lt;/SourcePid&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Membersship&gt; membership pipe</entry>
</row>
<row>
<entry></entry>
<entry>advertisement &lt;/Membership&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/MembershipCancel&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0357" lvl="7"><number>&lsqb;0357&rsqb;</number> Pipe Binding Protocol </paragraph>
<paragraph id="P-0358" lvl="0"><number>&lsqb;0358&rsqb;</number> In one embodiment, the peer-to-peer platform may include a pipe binding protocol that may allow a peer to find the physical location of a pipe endpoint and to bind a pipe advertisement to the pipe endpoint, thus indicating where messages actually go over the pipe. A pipe is conceptually a virtual channel between two pipe endpoints (input and output pipes) and may serve as a virtual link between two or more peer software components (e.g. services or applications). </paragraph>
<paragraph id="P-0359" lvl="0"><number>&lsqb;0359&rsqb;</number> A pipe may be viewed as an abstract, named message queue that supports a number of abstract operations such as create, open, close, delete, send, and receive. The pipe virtual link (pathway) may be layered upon any number of physical network transport links such as TCP/IP. Each end of the pipe may work to maintain the virtual link and to reestablish it, if necessary, by binding endpoints or finding the pipe&apos;s currently bound endpoints. </paragraph>
<paragraph id="P-0360" lvl="0"><number>&lsqb;0360&rsqb;</number> Actual pipe implementations may differ, but peer-to-peer platform-compliant implementations preferably use the pipe binding protocol to bind pipes to pipe endpoints. In one embodiment, during the abstract create operation, a local peer binds a pipe endpoint to a pipe transport. In another embodiment, bind may occur during the open operation. Unbind occurs during the close operation. In one embodiment, each peer that &ldquo;opens&rdquo; a group pipe may make an endpoint available (binds) to the pipe&apos;s transport. Messages are preferably only sent to one or more endpoints bound to the pipe. Peers that have not opened the pipe preferably do not receive or send any messages on that pipe. In one embodiment, when some peer software wants to accept incoming pipe messages, the receive operation may remove a single message in the order it was received, not in the order it was sent. In one embodiment, a peek operation may be used as a mechanism to see if any message(s) has arrived in the pipe&apos;s queue. </paragraph>
<paragraph id="P-0361" lvl="0"><number>&lsqb;0361&rsqb;</number> In one embodiment, the pipe binding protocol may define messages including, but not limited to, a query message and a response message. In one embodiment, a pipe binding protocol query message may be sent by a peer pipe endpoint to find a pipe endpoint bound to the same pipe advertisement. The following is an example of one embodiment of a pipe binding protocol query message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00020">
<number>20</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry>&lt;PipeBindingQuery&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Credential&gt; query credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Peer&gt; optional tag. If present, it may include the</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>peer identifier of the only peer that should answer</entry>
</row>
<row>
<entry></entry>
<entry>the request.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Peer&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Cached&gt; true if the reply can come from a cache &lt;/Cached&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;PipeId&gt; pipe identifier to be resolved &lt;/PipeId&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;/PipeBindingQuery&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0362" lvl="0"><number>&lsqb;0362&rsqb;</number> In one embodiment, the requester may ask that the information not be obtained from a cache. This is to obtain the most up-to-date information from a peer to address stale connection. The Peer field specifies a peer identifier. This peer is the one that should respond to the query. There is preferably no guarantee that a response to a pipe binding request will be made. Preferably, a peer is not required to respond to a binding request. Preferably, a reliable transport is not required. In one embodiment, multiple binding query messages may be sent. None, one or multiple responses may be received. </paragraph>
<paragraph id="P-0363" lvl="0"><number>&lsqb;0363&rsqb;</number> In one embodiment, a pipe binding protocol response message may be sent to the requesting peer by each peer bound to the pipe in response to a query message. The following is an example of one embodiment of a pipe binding protocol response message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00021">
<number>21</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry>&lt;PipeBindingAnswer&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;Credential&gt; credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;Pipeld&gt; pipe id resolved &lt;/PipeId&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;Peer&gt; peer URI where a corresponding InputPipe has been</entry>
</row>
<row>
<entry>created</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;/Peer&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;Found&gt; true: the InputPipe does exist on the specified peer</entry>
</row>
<row>
<entry>(ACK)</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;false: the InputPipe does not exist on the specified peer</entry>
</row>
<row>
<entry>(NACK)</entry>
</row>
<row>
<entry>&emsp;&emsp;&emsp;&lt;/Found&gt;</entry>
</row>
<row>
<entry>&lt;/PipeBindingAnswer&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0364" lvl="7"><number>&lsqb;0364&rsqb;</number> End-point Routing Protocol </paragraph>
<paragraph id="P-0365" lvl="0"><number>&lsqb;0365&rsqb;</number> In one embodiment, the peer-to-peer platform may include an endpoint routing protocol. The endpoint routing protocol may be used by peers to send messages to router peers requesting available routes for sending message(s) to destination peers. </paragraph>
<paragraph id="P-0366" lvl="0"><number>&lsqb;0366&rsqb;</number> A peer-to-peer platform network is typically an ad hoc, multi-hops, and adaptive network by nature. Connections in the network may be transient, and message routing may be nondeterministic. Routes may be unidirectional and change rapidly. Peers may appear and leave frequently. Two communicating peers may not be directly connected to each other. Two communicating peers may need to use router peers to route messages depending on the network topology. For example, the two peers may be on different network transports, or the peers may be separated by a firewall or a NAT (Network Address Translation) router. A peer behind a firewall may send a message directly to a peer outside a firewall. But a peer outside the firewall cannot establish a connection directly with a peer behind the firewall. </paragraph>
<paragraph id="P-0367" lvl="0"><number>&lsqb;0367&rsqb;</number> The endpoint routing protocol may define a set of request/query messages that is processed by a routing service to help a peer route messages to its destination. When a peer is asked to send a message to a given peer endpoint address, it may look in its local cache to determine if it has a cached route to this peer. If the peer does not find a route, it may send a route resolver query message to available peer routers requesting route information. A peer may have access to as many peer routers as it can find, or optionally a peer may be pre-configured to access certain routers. </paragraph>
<paragraph id="P-0368" lvl="0"><number>&lsqb;0368&rsqb;</number> Peer routers provide the low-level infrastructures to route a message between two peers in the network. Any number of peers in a peer group may elect themselves to become peer routers for other peers. Peers routers offer the ability to cache route information, as well as bridging different physical (different transport) or logical (firewall and NAT) networks. A peer may dynamically find a router peer via a qualified discovery search. A peer may find out if a peer it has discovered is a peer router via the peer advertisement properties tag. </paragraph>
<paragraph id="P-0369" lvl="0"><number>&lsqb;0369&rsqb;</number> When a peer router receives a route query, if it knows the destination (a route to the destination), it may answer the query by returning the route information as an enumeration of hops. The message may be sent to the first router and that router may use the route information to route the message to the destination peer. The route may be ordered from the next hop to the final destination peer. At any point the routing information may be obsoleted, requiring the current router to find a new route. </paragraph>
<paragraph id="P-0370" lvl="0"><number>&lsqb;0370&rsqb;</number> The peer endpoint may add extra routing information to the messages sent by a peer. When a message goes through a peer, the endpoint of that peer may leave its trace on the message. The trace may be used for loop detection and to discard recurrent messages. The trace may also be used to record new route information by peer routers. </paragraph>
<paragraph id="P-0371" lvl="0"><number>&lsqb;0371&rsqb;</number> In one embodiment, the endpoint routing protocol may provide the last resort routing for a peer. More intelligent routing may be implemented by more sophisticated routing services in place of the core routing service. High-level routing services may manage and optimize routes more efficiently than the core service. In one embodiment, the hooks necessary for user defined routing services to manipulate and update the route table information (route advertisements) used by the peer router may be provided by the endpoint routing protocol. Thus, preferably complex route analysis and discovery may be performed above the core by high-level routing services, and those routing services may provide intelligent hints to the peer router to route messages. </paragraph>
<paragraph id="P-0372" lvl="0"><number>&lsqb;0372&rsqb;</number> Router peers may cache route information. Router peers may respond to queries with available route information. Route information may include a list of gateways along the route. In one embodiment, any peer may become a router peer by implementing the endpoint routing protocol. The following is an example of one embodiment of route information in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00022">
<number>22</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;EndpointRouter&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Credential&gt; credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Src&gt; peer identifier of the source &lt;/Src&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Dest&gt; peer identifier of the destination &lt;/Dest&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;TTL&gt; time to live &lt;/TTL&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Gateway&gt; ordered sequence of gateway &lt;/Gateway&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;.................</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Gateway&gt; ordered sequence of gateway &lt;/Gateway&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/EndpointRouter&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0373" lvl="0"><number>&lsqb;0373&rsqb;</number> The time-to-live parameter specifies how long this route is valid. The creator of the route can decide how long this route will be valid. The gateways may be defined as an ordered sequence of peer identifiers that define the route from the source peer to the destination peer. The sequence may not be complete, but preferably at least the first gateway is present. The first gateway is sufficient to initially route the messages. The remaining gateway sequence is preferably optional. </paragraph>
<paragraph id="P-0374" lvl="0"><number>&lsqb;0374&rsqb;</number> The endpoint routing protocol may provide messages including, but not limited to, a route request message and a route answer message from the router peer. In one embodiment, a peer may send a route request message to a router peer to request route information. Route information may be cached or not cached. In some cases, the route query request message may indicate to bypass the cache content and thus to search dynamically for a route. Preferably, it is not guaranteed that a route response will be received after a query is sent. The following is an example of one embodiment of a route query request message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00023">
<number>23</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;EndpointRouterQuery&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Credential&gt; credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Dest&gt; peer identifier of the destination &lt;/Dest&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Cached&gt; true: if the reply can be a cached reply</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;&thinsp;false: if the reply must not come from a cache</entry>
</row>
<row>
<entry></entry>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;/Cached&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/EndpointRouterQuery&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0375" lvl="0"><number>&lsqb;0375&rsqb;</number> In one embodiment, a router peer may send a route answer message to a peer in response to a route information request. The following is an example of one embodiment of a route answer message in XML, and is not intended to be limiting:  
<table-cwu id="TABLE-US-00024">
<number>24</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;&quest;xml version&equals;&ldquo;1.0&rdquo; encoding&equals;&ldquo;UTF-8&rdquo;&quest;&gt;</entry>
</row>
<row>
<entry>&lt;EndpointRouterAnswer&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Credential&gt; credential &lt;/Credential&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Dest&gt; peer id of the destination &lt;/Dest&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;RoutingPeer&gt; Peer identifier of the router that knows a route to</entry>
</row>
<row>
<entry>DestPeer</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;/RoutingPeer&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;RoutingPeerAdv&gt; Advertisement of the routing peer &lt;/Rou-</entry>
</row>
<row>
<entry>tingPeerAdv&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Gateway&gt; ordered sequence of gateways &lt;/Gateway&gt;</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;...................</entry>
</row>
<row>
<entry>&emsp;&emsp;&ensp;&thinsp;&lt;Gateway&gt; ordered sequence of gateways &lt;/Gateway&gt;</entry>
</row>
<row>
<entry>&lt;/EndpointRouterAnswer&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0376" lvl="7"><number>&lsqb;0376&rsqb;</number> Routing </paragraph>
<paragraph id="P-0377" lvl="0"><number>&lsqb;0377&rsqb;</number> A peer-to-peer platform preferably provides a mechanism or mechanisms for searching and accessing peers, peer groups, content, services and other information in a dynamic topology of peers and peer groups, where peers and peer groups can come and go. In one embodiment, peers and peer groups may come and go potentially with limited or no control and notification. Peers may connect to a peer-to-peer network through various wired and wireless protocols, including &ldquo;not connected&rdquo; protocols such as may be used by mobile consumer devices such as pagers and PDAs. Peers may also have to cross boundaries, for example boundaries created by firewalls and NAT (Network Address Translation) routers, to connect to other peers. </paragraph>
<paragraph id="P-0378" lvl="0"><number>&lsqb;0378&rsqb;</number> An application that supports the peer-to-peer platform preferably is able to help in routing and discovering. Some of the information needed to accomplish routing and discovering may be only known by the application. For example, the application may support a special type of data as content, and so the application may best &ldquo;know&rdquo; how to discover items of this special content. Also, the application may have a better knowledge of the topology (related to the nature of the application and/or peer group) than the core peer-to-peer platform. </paragraph>
<paragraph id="P-0379" lvl="0"><number>&lsqb;0379&rsqb;</number> In one embodiment, in order to bootstrap the system, and also in order to have a fallback mechanism if an application cannot or does not support one or more of the tasks, the core peer-to-peer protocols may provide a discovery and router mechanism for discovering peers and other core abstractions such as advertisements, pipes, and peer groups. The discovery and routing mechanism of the peer-to-peer platform preferably uses as few protocols as possible, is simple, and makes use of underlying optimizations when available. Hooks into the core discovery and router mechanism may be provided so that applications and services may participate in the discovery and router mechanisms, for example, by passing information to the core discovery and router mechanism. In one embodiment, an application or service may be allowed to override the core discovery and router mechanism with its own custom mechanism. </paragraph>
<paragraph id="P-0380" lvl="0"><number>&lsqb;0380&rsqb;</number> In one embodiment, the core discovery and router mechanism may be based on web crawling. Web crawling may be well suited for use in self-organizing networks such as peer-to-peer networks. In one embodiment, peers may be configured to participate or not to participate in the discovery and router mechanism, and may be configured as to the level of involvement in the process In one embodiment, a peer may decide whether to participate in a discovery or routing task depending on the peer&apos;s configuration in the peer-to-peer network. In one embodiment, the configuration may be determined using an automated detection of the position of the peer on the network and a network configuration wizard tool. </paragraph>
<paragraph id="P-0381" lvl="0"><number>&lsqb;0381&rsqb;</number> Web crawling may not create bottlenecks such as may be created by the mechanism of a client knowing a server and always going to the same server to find and retrieve information (e.g. DNS, NFS etc.). Even if a server is replicated, like DNS, it is still a centralized server. If all the known instances of the server are not reachable, a client may lose access to the server, even if another (but unknown) server is, indeed, available. In a point-to-point network, the information a peer is looking for is generally &ldquo;close by&rdquo; or may eventually be &ldquo;close by&rdquo;, so web crawling may not go too far. </paragraph>
<paragraph id="P-0382" lvl="0"><number>&lsqb;0382&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> illustrates several core components and how they interact for discovery and routing according to one embodiment. Application <highlight><bold>300</bold></highlight> may use discovery <highlight><bold>308</bold></highlight> to find peers, peer groups, advertisements, and other entities on the peer-to-peer network, and may also publish pipe, peer, peer group, service, and other advertisements for access by other peers, applications and services on the peer-to-peer network. In one embodiment, the endpoint <highlight><bold>310</bold></highlight> may be responsible for exchanging messages between peers that are directly &ldquo;connected&rdquo; to each other (i.e. the peers can reach each other without any routing and/or discovering). When available, multicast may be used to discover peers that the endpoint can reach (multicast is a mechanism which has been introduced in IP in order to optimize this kind of process). In addition to that, or when multicast is not available, A rendezvous and invitation mechanism may also be provided. The rendezvous and invitation method may be used, for example, if multicast is not available. For example, HTTP does not provide multicast capabilities. </paragraph>
<paragraph id="P-0383" lvl="0"><number>&lsqb;0383&rsqb;</number> The endpoint router <highlight><bold>312</bold></highlight> may manage a cache of routes, for example routes to remote peers. In one embodiment, the endpoint router <highlight><bold>312</bold></highlight> may be configured from caching no routes to caching all routes it is aware of, depending on what the configuration wizard has decided with user control. The endpoint router <highlight><bold>312</bold></highlight> may also forward (route) messages depending on what is found in the cache, and what has been configured. For instance, the endpoint router <highlight><bold>312</bold></highlight> may be configured to route search (propagate) requests or to not route the requests. </paragraph>
<paragraph id="P-0384" lvl="0"><number>&lsqb;0384&rsqb;</number> In one embodiment, the generic resolver <highlight><bold>308</bold></highlight> is a protocol that implements a sort of RPC (query/response) protocol on top of the endpoint <highlight><bold>310</bold></highlight>. Discovery <highlight><bold>306</bold></highlight> and pipe resolver <highlight><bold>304</bold></highlight> may use the generic resolver. In one embodiment, discovery <highlight><bold>306</bold></highlight> may be responsible for searching, caching and generating core advertisements (e.g. peer, peer group, and pipe advertisements). Discovery <highlight><bold>306</bold></highlight> may use the generic resolver <highlight><bold>308</bold></highlight> to send query messages and to receive answers. In one embodiment, discovery <highlight><bold>306</bold></highlight> may be aware of rendezvous peers and may have an invitation mechanism that may be used to assist the generic resolver <highlight><bold>308</bold></highlight>. In one embodiment, the pipe resolver <highlight><bold>304</bold></highlight> may be responsible for localizing the receiving end of a pipe <highlight><bold>302</bold></highlight> given a pipe advertisement. In one embodiment, the pipe resolver <highlight><bold>304</bold></highlight> does not search for a pipe advertisement. In one embodiment, the pipe resolver <highlight><bold>304</bold></highlight> may be configured to manage a cache of the locations of the receiving ends (i.e. receiving peers) of the pipe <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0385" lvl="0"><number>&lsqb;0385&rsqb;</number> The pipe protocol may use the endpoint <highlight><bold>310</bold></highlight> for transferring messages (with the potential help of the endpoint router <highlight><bold>312</bold></highlight>) between the sending end of the pipe <highlight><bold>302</bold></highlight>, and the receiving end of the pipe <highlight><bold>302</bold></highlight>. In one embodiment, a pipe <highlight><bold>302</bold></highlight> may be viewed as an endpoint <highlight><bold>310</bold></highlight> that has not been bound to a particular peer. In one embodiment, a pipe <highlight><bold>302</bold></highlight> may be moved seamlessly from one peer to another. In one embodiment, a pipe <highlight><bold>302</bold></highlight> may also provides uniqueness that may not be provided by an endpoint <highlight><bold>310</bold></highlight> since a pipe identifier is unique in time and space, and an endpoint <highlight><bold>310</bold></highlight>, being a network address, may not be. </paragraph>
<paragraph id="P-0386" lvl="0"><number>&lsqb;0386&rsqb;</number> A discovery and router mechanism based on web crawling may be time-expensive, and higher level protocols (such as applications) may have information that the core is not aware of that may help in the web crawling process. In one embodiment, to enable applications to participate in the process, components of the core mechanism may provide hooks that enable the applications to assist in the process (e.g. by providing information). Some transport protocols such as HTTP may be configured for and/or dynamically learn about web rendezvous peers it can use. An application may be provided access to the list of rendezvous peers. In one embodiment, an application may be allowed to set/unset routes in an endpoint router <highlight><bold>312</bold></highlight>. Each route may be qualified to route or not route propagate messages such as web crawling messages and/ or unicast messages. The endpoint router <highlight><bold>312</bold></highlight> may be viewed as a route cache manager, which is may be controlled by an endpoint <highlight><bold>310</bold></highlight> and/or other entities that may need to control it. In one embodiment, an endpoint router <highlight><bold>312</bold></highlight> may be able to discover unknown routes from applications. In one embodiment, discovery <highlight><bold>308</bold></highlight> may be configured (statically and/or dynamically) to control the nature and the amount of data that it manages. In one embodiment, discovery <highlight><bold>308</bold></highlight> may be taught where to go search, or where not to go search. In one embodiment, discovery <highlight><bold>308</bold></highlight> may make an &ldquo;upcall&rdquo; to a search/retrieve mechanism. In one embodiment, a pipe resolver <highlight><bold>304</bold></highlight> may manage a cache of input pipes (receiving ends). In one embodiment, pipe resolver <highlight><bold>304</bold></highlight> may be accessed by applications to set/unset entries in the cache. </paragraph>
<paragraph id="P-0387" lvl="7"><number>&lsqb;0387&rsqb;</number> Router peers </paragraph>
<paragraph id="P-0388" lvl="0"><number>&lsqb;0388&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates one embodiment of message routing in a peer-to-peer network that uses the peer-to-peer platform. Peers <highlight><bold>200</bold></highlight> in peer groups <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B may communicate with each other through one or more router peers <highlight><bold>244</bold></highlight>. In one embodiment, message routing may route messages to &ldquo;unreachable&rdquo; peers, i.e. may allow messages sent from a peer <highlight><bold>200</bold></highlight> to reach peers <highlight><bold>200</bold></highlight> that are otherwise unreachable. Networks may be partitioned by firewalls, NAT (Network Address Translation) routers, etc. Message routing may allow messages to be delivered in partitioned networks. Message routing may also allow peers <highlight><bold>200</bold></highlight> separated by one or more partitions to participate in the same peer group(s) <highlight><bold>210</bold></highlight>. Message routing preferably provides optimized message delivery, for example by optimizing routes between peers <highlight><bold>200</bold></highlight>. Message routing preferably allows for an adaptive peer-to-peer network (e.g. peers may move to remote locations and still receive messages). Message routing preferably provides load balancing. In one embodiment, any peer may be a router peer <highlight><bold>244</bold></highlight>. </paragraph>
<paragraph id="P-0389" lvl="0"><number>&lsqb;0389&rsqb;</number> One embodiment may provide for HTTP routing servers. In one embodiment, HTTP routers may provide for message routes that traverse firewalls. In one embodiment, HTTP routers may provide NAT support. In one embodiment, HTTP routers may act as message gateways (TTL). TTL stands for Time To Live (how long the request lives in the system). </paragraph>
<paragraph id="P-0390" lvl="0"><number>&lsqb;0390&rsqb;</number> The widespread use of NAT (Network Address Translation) and firewalls may affect the operation of many P2P systems. It also may affect the peer-to-peer platform. In particular, a peer outside a firewall or a NAT gateway cannot discover peers inside the firewall or the NAT gateway. In the absence of getting system administrators to let the peer-to-peer platform traffic through (say by opening a special incoming port at the firewall or gateway), possible methods to deal with this problem include, but are not limited to: </paragraph>
<paragraph id="P-0391" lvl="2"><number>&lsqb;0391&rsqb;</number> In one embodiment, peers inside firewalls may be asked to initiate connections to peers outside the firewall. </paragraph>
<paragraph id="P-0392" lvl="2"><number>&lsqb;0392&rsqb;</number> In one embodiment, peer nodes may be set up that operate like mailbox offices where traffic to a peer inside the firewall is queued up to be picked up at a designated relay peer outside the firewall. The peer inside the firewall can initially reach outside the firewall, select a relay peer, and widely advertise this fact. Later, it can periodically contact the relay peer to retrieve messages. </paragraph>
<paragraph id="P-0393" lvl="0"><number>&lsqb;0393&rsqb;</number> One embodiment of the peer-to-peer platform may provide router peers. The router peers may be at a lower level than rendezvous peers. The router peers may provide &ldquo;pure&rdquo; message routing. By looking at the destination and source addresses, the router peer may determine where a message needs to be sent. In one embodiment, a router peer may call or access a rendezvous peer to &ldquo;discover&rdquo; information about peers, etc. In other words, the router peer may access information from a rendezvous peer to use the information in routing messages. </paragraph>
<paragraph id="P-0394" lvl="0"><number>&lsqb;0394&rsqb;</number> In one embodiment, router peers may provide the lowest message routing layer in the peer-to-peer platform. Routing may involve complex topologies. For example, the routing peers may provide a method to route across a firewall, particularly from peers outside the firewall to peers inside the firewall. A peer cannot send a message directly to another peer behind a firewall, since by definition there may be no direct route from a peer outside the firewall to a peer inside the firewall. A router peer may route messages to a gateway peer (a mailbox server where messages for peers behind the firewall may be temporarily stored). In one embodiment, the gateway peer may be a router peer acting as a gateway. The peers behind the firewall may periodically poll the mailboxes provided by the gateway peer to determine if someone has tried to contact them (i.e. are there any messages in my mailbox&quest;). Note that a &ldquo;pipe&rdquo; provides an abstraction at a higher level than the message routing provided by router peers, and thus, a pipe may be an abstraction across the network topology between peers, for example peers on opposite sides of a firewall, through which the peers may communicate. At the lowest level, one or more router peers may discover and establish the actual communications route between the peers. This level, however, may be transparent to the peers, who only &ldquo;see&rdquo; the pipes. </paragraph>
<paragraph id="P-0395" lvl="0"><number>&lsqb;0395&rsqb;</number> In one embodiment, a router peer may build a route table. The router peer may keep information about routes that it discovers and store them in the route table. This allows the router peer to build a knowledge base (the route table) about the network topology as more messages flow on the system. This information may be used by the router peer to discover and establish optimal routes between entities in the network, and may increase its ability to reach other peers. </paragraph>
<paragraph id="P-0396" lvl="0"><number>&lsqb;0396&rsqb;</number> A router peer may access another router peer it is aware of to get route information. The route information may be described as a stacked set of destinations (and the routes to the destinations). In one embodiment, the information the router peer stores on a particular route may be incomplete, because the router peer may only know about the route up to a certain point. For example, the router peer may know about a first portion of a route up to another router peer, which knows about the next portion of the route, and so on. </paragraph>
<paragraph id="P-0397" lvl="0"><number>&lsqb;0397&rsqb;</number> In one embodiment, each peer has a unique peer ID that is independent of, and is not assigned to, fixed addresses. Peers may move around. Therefore, the peer-to-peer network topology may be dynamic, and may change every time a peer goes away or moves. Thus, the routing method provided by the router peers is preferably dynamic to support the dynamic topology. When a peer moves and reconnects, the peer is recognized as the same peer that was previously connected elsewhere in the network. This process may use the unique ID of the peer to indicate that the peer is the same one that was previously connected elsewhere. In one example, when a peer moves, it may go through a discovery process to discover peers and rendezvous peers in its new local subnet or region. If the peer wishes to join a peer group that it used at its previous location, it may then attempt to discover other peers that have knowledge of the peer group or other peers in the peer group. The message may be passed through several router peers until it may reach a router peer that has knowledge about the peer group (e.g. a route to the peer group) to return to the requesting peer. For example, a user with a laptop may fly from a home office to another city. When the user connects to the network in the other city, a route may be established, through the services provided by router peers, to the home office network peer group. The user may then access email and other services provided by the peer group. From the user&apos;s standpoint, this process may seem automatic. For example, the user may not be required to &ldquo;dial in&rdquo; or connect remotely to an ISP to access the office as is required in typical networks using static addressing. </paragraph>
<paragraph id="P-0398" lvl="0"><number>&lsqb;0398&rsqb;</number> In one embodiment, when a peer becomes a router peer, it may access a stored route table as a starting point. In one embodiment, the peer may start from scratch with an empty route table. In one embodiment, the peer, when it becomes a router peer, may initiate a discovery of other router peers and/or rendezvous peers to get as much connectivity information to key peers in the network as possible. </paragraph>
<paragraph id="P-0399" lvl="0"><number>&lsqb;0399&rsqb;</number> In one embodiment, every peer may have knowledge of at least one router peer. In one embodiment, there may be a &ldquo;universal router&rdquo; that many or all peers may be aware of that may be accessed when a peer cannot find anyone. The universal router may be able to put the peer into contact with somebody (e.g. another peer) to help in the bootstrapping process. </paragraph>
<paragraph id="P-0400" lvl="7"><number>&lsqb;0400&rsqb;</number> Security </paragraph>
<paragraph id="P-0401" lvl="0"><number>&lsqb;0401&rsqb;</number> The security requirements of a P2P system are very similar to any other computer system. The three dominant requirements are confidentiality, integrity, and availability. These translate into specific functionality requirements that include authentication, access control, audit, encryption, secure communication, and non-repudiation. Such requirements are usually satisfied with a suitable security model or architecture, which is commonly expressed in terms of subjects, objects, and actions that subjects can perform on objects. For example, UNIX has a simple security model. Users are subjects. Files are objects. Whether a subject can read, write, or execute an object depends on whether the subject has permission as expressed by the permissions mode specified for the object. However, at lower levels within the system, the security model is expressed with integers, in terms of UID, GID, and the permission mode. Here, the low-level system mechanisms do not (need to) understand the concept of a user and do not (need to) be involved in how a user is authenticated and what UID and GID they are assigned. </paragraph>
<paragraph id="P-0402" lvl="0"><number>&lsqb;0402&rsqb;</number> In one embodiment, the peer-to-peer platform protocols may be compatible with widely accepted transport layer security mechanisms for message-based architectures such as Secure Sockets Layer (SSL) and Internet Protocol Security (IPSec). However, secure transport protocols such as SSL and IPSec only provide the integrity and confidentiality of message transfer between two communicating peers. In order to provide secure transfer in multi-hops network, a trust association may be established among all the intermediary peers. Security is compromised if anyone of the communication links is not secured. </paragraph>
<paragraph id="P-0403" lvl="0"><number>&lsqb;0403&rsqb;</number> The peer-to-peer platform security model may be implemented to provide a P2P web of trust. The web of trust may be used to exchange public keys among its members. Each peer group policy may permit some members to be trusted to the extent that they have the authority to sign public keys for other members as well as to do things like authenticate, add new members, and remove or revoke membership. </paragraph>
<paragraph id="P-0404" lvl="0"><number>&lsqb;0404&rsqb;</number> Embodiments may implement security classes for the RSA public key exchange, the RC4 byte stream cipher, and the SHA-1 hash algorithm, among others. These classes may enable privacy by the means of a P2P TLS implementation; integrity with signed hashes; non-repudiation using the web of trust; and MACs for data authenticity. Combinations of these classes may form security suites, and the peer-to-peer platform provides the mechanism to add new customized suites as required. </paragraph>
<paragraph id="P-0405" lvl="0"><number>&lsqb;0405&rsqb;</number> In some embodiments, for peer group authentication a separate Pluggable Authentication Module (PAM) may be provided. Embodiments may provide anonymous or guest login, and login with user name and password. A login session may be in clear or cipher-text as per the peer group security policy. </paragraph>
<paragraph id="P-0406" lvl="0"><number>&lsqb;0406&rsqb;</number> The security module may be available to the core level, and thus services, applications and advanced services and applications may plug in their own security components and protocols. For example, the web of trust may be defined by a policy that requires authorized peer group members to be well-known certificate authorities, and that peers exchange X509v3 CA signed certificates. </paragraph>
<paragraph id="P-0407" lvl="0"><number>&lsqb;0407&rsqb;</number> Given that the peer-to-peer platform is defined around the concepts of peers and peer groups, one embodiment may include a security architecture in which peer IDs and group IDs are treated as low-level subjects (just like UID and GID), codats are treated as objects just like files), and actions are those operations on peers, peer groups, and codats. </paragraph>
<paragraph id="P-0408" lvl="0"><number>&lsqb;0408&rsqb;</number> The term &ldquo;codat&rdquo; as used herein refers to any computer content&mdash;code, data, applications, or other collection of computer representable resources. The peer-to-peer protocol preferably does not distinguish among different types of resources that can be stored on a computer and shared among peers in a peer group. Examples of &ldquo;codat&rdquo; include text files, photographs, applets, executable files, serialized Java objects, SOAP messages, etc. Codats are the elementary unit of information that is exchanged among peers. In this embodiment, given that codats may have arbitrary forms and properties, it may not be clear what sets of actions should be defined for them. In one embodiment, the codats may carry or include definitions of how they should be accessed. Such codats are analogous to objects, which define for themselves access methods others can invoke. </paragraph>
<paragraph id="P-0409" lvl="0"><number>&lsqb;0409&rsqb;</number> One or more of several other characteristics of the peer-to-peer platform may further affect the security requirements of the peer-to-peer platform. In one embodiment, the peer-to-peer platform may be focused on mechanisms and not policy. For example, UUIDs are used throughout, but they by themselves have no external meaning. Without additional naming and binding services, UUIDs are just numbers that do not correspond to anything like a user or a principal. Therefore, the peer-to-peer platform preferably does not define a high-level security model such as information flow, Bell-LaPadula, or Chinese Wall. In one embodiment, when UUIDs are bound to external names or entities to form security principals, authenticity of the binding may be ensured by placing in the data field security attributes, for example, digital signatures that testify to the trustworthiness of the binding. Once this binding is established, authentication of the principal, access control based on the principal as well as the prevailing security policy, and other functions such as resource usage accounting may be performed. </paragraph>
<paragraph id="P-0410" lvl="0"><number>&lsqb;0410&rsqb;</number> The peer-to-peer platform is preferably neutral to cryptographic schemes and security algorithms. As such, the peer-to-peer platform preferably does not mandate any specific security solution. In such cases, a framework may be provided where different security solutions can be plugged in. In one embodiment, hooks and placeholders may be provided so that different security solutions may be implemented. For example, every message may have a designated credential field that may be used to place security-related information. In one embodiment, exactly how to interpret such information is not defined in the peer-to-peer platform, and may be left to services and applications. </paragraph>
<paragraph id="P-0411" lvl="0"><number>&lsqb;0411&rsqb;</number> In one embodiment, the peer-to-peer platform may sometimes satisfy security requirements at different levels of the system. To allow maximum flexibility and avoid redundancy, the peer-to-peer platform preferably does not force a particular implementation on developers. Instead, preferably, enhanced platforms based on the peer-to-peer platform may provide the appropriate security solutions to their targeted deployment environment. To illustrate the last point, two security concerns (communications security and anonymity) are examined. </paragraph>
<paragraph id="P-0412" lvl="0"><number>&lsqb;0412&rsqb;</number> Peers communicate through pipes. As an example, suppose both confidentiality and integrity in the communications channel are desired. In one embodiment, Virtual Private Networks (VPNs) may be used to move all network traffic. In one embodiment, a secure version of the pipe may be created, similar to a protected tunnel, such that any message transmitted over this pipe is automatically secured. In one embodiment, regular communications mechanisms may be used, and specific data payloads may be protected with encryption techniques and digital signatures. Embodiments of the peer-to-peer platform may accommodate one or more of these and other possible solutions. </paragraph>
<paragraph id="P-0413" lvl="0"><number>&lsqb;0413&rsqb;</number> Anonymity does not mean the absence of identity. Indeed, sometimes a certain degree of identification is unavoidable. For example, a cell phone number or a SIM card identification number cannot be kept anonymous, because it is needed by the phone company to authorize and set up calls. As another example, the IP number of a computer cannot be hidden from its nearest gateway or router if the computer wants to send and receive network traffic. In general, anonymity can be built on top of identity, but not vice versa. There may be multiple ways to ensure anonymity. In the examples above, it is difficult to link a prepaid SIM card sold over the retail counter for cash to the actual cell phone user. Likewise, a cooperative gateway or router may help hide the computer&apos;s true IP address from the outside world by using message relays or NAT (Network Address Translation). </paragraph>
<paragraph id="P-0414" lvl="0"><number>&lsqb;0414&rsqb;</number> In one embodiment, a peer-to-peer platform-based naming service may bind a peer to a human user. The user&apos;s anonymity may be ensured through the naming service, or the authentication service, or a proxy service, or any combination of these. The peer-to-peer platform is preferably independent of the solution chosen by a particular application. </paragraph>
<paragraph id="P-0415" lvl="0"><number>&lsqb;0415&rsqb;</number> At many places, the peer-to-peer platform is preferably independent of specific security approaches. In one embodiment, the peer-to-peer platform may provide a comprehensive set of security primitives to support the security solutions used by various peer-to-peer platform services and applications. Embodiments of the peer-to-peer platform may provide one or more security primitives including, but not limited to: </paragraph>
<paragraph id="P-0416" lvl="2"><number>&lsqb;0416&rsqb;</number> A simple crypto library supporting hash functions (e.g., MD5), symmetric encryption algorithms (e.g., RC4 ), and asymmetric crypto algorithms (e.g., Diffie-Hellman and RSA). </paragraph>
<paragraph id="P-0417" lvl="2"><number>&lsqb;0417&rsqb;</number> An authentication framework that is modeled after PAM (Pluggable Authentication Module, first defined for the UNIX platform and later adopted by the Java security architecture). </paragraph>
<paragraph id="P-0418" lvl="2"><number>&lsqb;0418&rsqb;</number> A simple password-based login scheme that, like other authentication modules, can be plugged into the PAM framework. </paragraph>
<paragraph id="P-0419" lvl="2"><number>&lsqb;0419&rsqb;</number> A simple access control mechanism based on peer groups, where a member of a group is automatically granted access to all data offered by another member for sharing, whereas non-members cannot access such data. </paragraph>
<paragraph id="P-0420" lvl="2"><number>&lsqb;0420&rsqb;</number> A transport security mechanism that is modeled after SSL/TLS, with the exception that it is impossible to perform a handshake, a crypto strength negotiation, or a two-way authentication on a single pipe, as a pipe is unidirectional. </paragraph>
<paragraph id="P-0421" lvl="2"><number>&lsqb;0421&rsqb;</number> The demonstration services called InstantP2P and CMS (content management service) also make use of additional security features provided by the underlying Java platform. </paragraph>
<paragraph id="P-0422" lvl="0"><number>&lsqb;0422&rsqb;</number> In one embodiment, peers, configurations, peer groups, and pipes form the backbone of the peer-to-peer platform. Security in some embodiments of the peer-to-peer platform may use credentials and authenticators (code (e.g. computer-executable instructions) that may be used to receive messages that either request a new credential or request that an existing credential be validated). A credential is a token that when presented in a message body is used to identify a sender and can be used to verify that sender&apos;s right to send the message to the specified endpoint and other associated capabilities of the sender. The credential is an opaque token that must be presented each time a message is sent. The sending address placed in the message envelope may be crosschecked with the sender&apos;s identity in the credential. In one embodiment, each credential&apos;s implementation may be specified as a plug-in configuration, which allows multiple authentication configurations to co-exist on the same network. </paragraph>
<paragraph id="P-0423" lvl="0"><number>&lsqb;0423&rsqb;</number> Preferably, all messages include, at a minimum, a peer group credential that identifies the sender of the message as a full member peer in the peer group in good standing. Membership credentials may be used that define a member&apos;s rights, privileges, and role within the peer group. Content access and sharing credentials may also be used that define a member&apos;s rights to the content stored within the group. </paragraph>
<paragraph id="P-0424" lvl="0"><number>&lsqb;0424&rsqb;</number> In one embodiment, the peer-to-peer platform may provide different levels of security. In one embodiment, APIs may be provided to access well known security mechanisms such as RCA. In one embodiment, the peer-to-peer platform may provide a distributed security mechanism in a peer-to-peer environment. In one embodiment, this distributed security may not depend on certificates administered by a central authority. The distributed security mechanism may allow a peer group &ldquo;web of trust&rdquo; to be generated. In the distributed security mechanism, peers may serve as certificate authorities (security peers). Each peer group may include one or more peers that may serve as a certificate authority in the group. In one embodiment, the creator of a peer group may become the default security authority in the group. In one embodiment, if there is more than one creator, the creator peers may choose one of the peers to be the security authority in the group. In one embodiment, the peer or peers that create a peer group may define the security methods that are to be used within the group (anywhere from no security to high levels of security). In one embodiment, more than one peer in a peer group may serve as a security peer. Since peers are not guaranteed to be up at all times, having multiple security peers in a peer group may help insure that at least one security peer is available at all times. In one embodiment, the peer group&apos;s certificate peer may verify keys to provide a weak level of trust. In one embodiment, peer-to-peer platform advertisements may include information to describe the security mechanism(s) to be used in a peer group. For example, the advertisement may include information to do public key exchange, information to indicate what algorithms are to be used, etc. The advertisement may also include information that may be used to enforce secure information exchange on pipes (e.g. encryption information). </paragraph>
<paragraph id="P-0425" lvl="0"><number>&lsqb;0425&rsqb;</number> In one embodiment, peer group security may establish a &ldquo;social contract&rdquo;. The role of security is distributed across peer groups, and across members of peer groups, that all agree to participate by the rules. A peer group may establish the set of rules by which security in the group is enforced. A peer may join the peer group with a low level of security clearance (low trust). If the peer stays in the group and behaves (follows the rules), the peer may build up its level of trust within the group, and may eventually be moved up in its security level. Within peer groups operating under a social contract, certificates and/or public keys may be exchanged without the participation of a strict certificate authority; i.e. the members may exchange certificates based upon their trust in each other. In one embodiment, a peer group may use an outside challenge (e.g. a secret group password) that may be encrypted/decrypted with public/private keys, as a method to protect and verify messages within the group. In one embodiment, peer groups may be configured to use other types of security, including a high level of security, for example using a strict certificate authority, and even no security. In one embodiment, peer-to-peer platform messages exchanged within a group may have a &ldquo;placeholder&rdquo; for security credentials. This placeholder may be used for different types of credentials, depending upon the security implementation of the particular group. In one embodiment, all peer-to-peer messages within the group may be required to have the embedded credential. One embodiment may support private secure pipes. </paragraph>
<paragraph id="P-0426" lvl="7"><number>&lsqb;0426&rsqb;</number> Peer-to-peer Platform Firewalls and Security </paragraph>
<paragraph id="P-0427" lvl="0"><number>&lsqb;0427&rsqb;</number> The peer-to-peer platform may provide one or more methods for traversing firewalls. <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates traversing a firewall <highlight><bold>248</bold></highlight> in a virtual private network when access is initiated from outside only according to one embodiment. Peers <highlight><bold>200</bold></highlight> on either side of the firewall <highlight><bold>248</bold></highlight> may each belong to one or more peer groups. In one embodiment, entry may be restricted to peers <highlight><bold>200</bold></highlight> with access privileges. In this example, peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B have access privileges, but peer <highlight><bold>200</bold></highlight>C does not. Thus, peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B may access peers <highlight><bold>200</bold></highlight>D and <highlight><bold>200</bold></highlight>E through firewall <highlight><bold>248</bold></highlight>. In one embodiment, HTTP &ldquo;tunnels&rdquo; may be used, with proxies <highlight><bold>246</bold></highlight> in the &ldquo;DMZ&rdquo; of the firewall <highlight><bold>248</bold></highlight>. </paragraph>
<paragraph id="P-0428" lvl="0"><number>&lsqb;0428&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> illustrates email exchange through a firewall <highlight><bold>248</bold></highlight> via an email gateway <highlight><bold>260</bold></highlight> according to one embodiment. In this example, peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B outside the firewall <highlight><bold>248</bold></highlight> may exchange messages to peers <highlight><bold>200</bold></highlight>C and <highlight><bold>200</bold></highlight>D via the email gateway <highlight><bold>260</bold></highlight>. In one embodiment, there may be an SMTP (Simple Mail Transfer Protocol) service <highlight><bold>262</bold></highlight> on each peer <highlight><bold>200</bold></highlight>. In one embodiment, 100% peer-to-peer access may not be guaranteed. In one embodiment, inside the firewall <highlight><bold>248</bold></highlight>, mail account administration may impose restrictions. In one embodiment, email addresses may not be required for all peers <highlight><bold>200</bold></highlight> outside of the firewall <highlight><bold>248</bold></highlight>. </paragraph>
<paragraph id="P-0429" lvl="0"><number>&lsqb;0429&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> illustrates several methods of traversing a firewall <highlight><bold>248</bold></highlight> when access is initiated from the inside according to one embodiment. One or more peers <highlight><bold>200</bold></highlight> may be inside the firewall <highlight><bold>248</bold></highlight>, and one or more peers <highlight><bold>200</bold></highlight> may be outside the firewall <highlight><bold>248</bold></highlight>. In one embodiment, each peer <highlight><bold>200</bold></highlight> that needs to traverse firewall <highlight><bold>248</bold></highlight> may include a mini-HTTP server. In this embodiment, an HTTP proxy may be used to provide peer-to-peer HTTP tunnels <highlight><bold>264</bold></highlight> through firewall <highlight><bold>248</bold></highlight>. In one embodiment, Secure Shell (SSH) tunnels <highlight><bold>266</bold></highlight> may be used to traverse firewall <highlight><bold>248</bold></highlight>. One embodiment may support SOCKS connections <highlight><bold>268</bold></highlight> if SOCKS is supported in the firewall <highlight><bold>248</bold></highlight>. SOCKS is typically used to telnet/ftp to the &ldquo;outside&rdquo;. Other embodiments may include other methods of traversing firewalls. </paragraph>
<paragraph id="P-0430" lvl="0"><number>&lsqb;0430&rsqb;</number> In one embodiment, peer-to-peer platform core protocols may be used for firewall traversal. In one embodiment, the impact on the peer-to-peer protocol core may be minimized in the traversal method. In one embodiment, peers preferably use the &ldquo;pure&rdquo; core protocols for traversal whenever possible. In embodiments where the core protocols need to be extended for traversal, a &ldquo;divide and conquer&rdquo; technique is preferably used. In a divide and conquer technique, any new configurations (policies) are preferably isolated behind the firewall. A proxy or proxies may then be used to mediate with and bridge to the core protocols. </paragraph>
<paragraph id="P-0431" lvl="0"><number>&lsqb;0431&rsqb;</number> Preferably, peers on either side of the firewall may initiate peer group contact with full peer-to-peer protocol implementation including, but not limited to, the ability to initiate peer group discovery, the ability to join/leave peer groups, and the ability to create end-to-end pipes (cipher text data exchange when required). </paragraph>
<paragraph id="P-0432" lvl="0"><number>&lsqb;0432&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> illustrates one embodiment of a peer-to-peer platform proxy service <highlight><bold>270</bold></highlight>, and shows various aspects of the operation of the proxy service. One or more peers <highlight><bold>200</bold></highlight> may be inside a firewall <highlight><bold>248</bold></highlight>, and one or more peers <highlight><bold>200</bold></highlight> may be outside the firewall <highlight><bold>248</bold></highlight>. Peer-to-peer platform proxy service <highlight><bold>270</bold></highlight> is also shown outside the firewall <highlight><bold>248</bold></highlight>. Proxy service <highlight><bold>270</bold></highlight> may be used to enable peer <highlight><bold>200</bold></highlight> and peer group contact across firewall <highlight><bold>248</bold></highlight>. Firewall <highlight><bold>248</bold></highlight> may include an email gateway <highlight><bold>260</bold></highlight>. In one embodiment, the proxy service <highlight><bold>270</bold></highlight> may be used to bridge peer-to-peer platform protocols <highlight><bold>272</bold></highlight> with HTTP <highlight><bold>274</bold></highlight>, email <highlight><bold>276</bold></highlight> and/or SOCKS <highlight><bold>278</bold></highlight>. The proxy service <highlight><bold>270</bold></highlight> may allow peers <highlight><bold>200</bold></highlight> to send requests to communicate across firewall <highlight><bold>248</bold></highlight>. Through the proxy service <highlight><bold>270</bold></highlight>, peer-to-peer platform messages may be posted for delivery across the firewall <highlight><bold>248</bold></highlight>. In one embodiment, the proxy service <highlight><bold>270</bold></highlight> may allow secure pipes to be established across the firewall <highlight><bold>248</bold></highlight> as necessary. </paragraph>
<paragraph id="P-0433" lvl="0"><number>&lsqb;0433&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> illustrates a method of using a proxy service for peer group registration according to one embodiment. The proxy service may permit firewall-independent peer group membership. Three peer regions <highlight><bold>212</bold></highlight> are shown, with two (region <highlight><bold>212</bold></highlight>A and <highlight><bold>212</bold></highlight>B) on one side of firewall <highlight><bold>248</bold></highlight> and one (region <highlight><bold>212</bold></highlight>C) on the other side of firewall <highlight><bold>248</bold></highlight>. A peer group <highlight><bold>210</bold></highlight> may be established that extends across the firewall <highlight><bold>248</bold></highlight> into regions <highlight><bold>212</bold></highlight>A, <highlight><bold>212</bold></highlight>B and <highlight><bold>212</bold></highlight>C. One or more peers <highlight><bold>200</bold></highlight> in each region <highlight><bold>212</bold></highlight> may be members of the peer group <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0434" lvl="0"><number>&lsqb;0434&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> illustrates peer group registration across a firewall according to one embodiment. Peer region <highlight><bold>212</bold></highlight>A is shown outside of a firewall <highlight><bold>248</bold></highlight> and peer region <highlight><bold>212</bold></highlight>B is behind the firewall <highlight><bold>248</bold></highlight>. Peer region <highlight><bold>212</bold></highlight>A includes a peer-to-peer platform proxy service <highlight><bold>270</bold></highlight> and several peers <highlight><bold>200</bold></highlight>. In one embodiment, a peer <highlight><bold>200</bold></highlight> may be serving as a proxy peer that provides the proxy service <highlight><bold>270</bold></highlight>. Peer region <highlight><bold>212</bold></highlight>B includes several peers <highlight><bold>200</bold></highlight> behind the firewall <highlight><bold>248</bold></highlight>. At some point, peer <highlight><bold>200</bold></highlight>D in peer region <highlight><bold>212</bold></highlight>B may form a peer group <highlight><bold>210</bold></highlight>. An advertisement for the peer group <highlight><bold>210</bold></highlight> may be registered on the proxy service <highlight><bold>270</bold></highlight> in the region <highlight><bold>212</bold></highlight>A. One or more peers <highlight><bold>200</bold></highlight> in region <highlight><bold>212</bold></highlight>A may be notified of the newly registered peer group <highlight><bold>200</bold></highlight> by the proxy service <highlight><bold>270</bold></highlight>. In one embodiment, the proxy service may also notify other known peer-to-peer platform proxy services in this or other regions <highlight><bold>212</bold></highlight>, who in turn may notify other proxy services, and so on. Peers <highlight><bold>200</bold></highlight> in region <highlight><bold>212</bold></highlight>A may then apply for membership in peer group <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0435" lvl="0"><number>&lsqb;0435&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> illustrates a method of providing peer group membership through a peer-to-peer platform proxy service according to one embodiment. Peer regions <highlight><bold>212</bold></highlight>A and <highlight><bold>212</bold></highlight>B are shown outside of a firewall <highlight><bold>248</bold></highlight>, and peer region <highlight><bold>212</bold></highlight>C is behind the firewall <highlight><bold>248</bold></highlight>. The two peer group regions <highlight><bold>212</bold></highlight> outside the firewall <highlight><bold>248</bold></highlight> each include a proxy service <highlight><bold>270</bold></highlight>. At least one of the peers (peer <highlight><bold>200</bold></highlight>F, in this example) in region <highlight><bold>212</bold></highlight>C behind the firewall belongs to a peer group <highlight><bold>210</bold></highlight>. The peer group <highlight><bold>210</bold></highlight> may be registered with the proxy services <highlight><bold>270</bold></highlight> in the regions <highlight><bold>212</bold></highlight>A and <highlight><bold>212</bold></highlight>B outside the firewall <highlight><bold>248</bold></highlight>. A peer <highlight><bold>200</bold></highlight> in either of the regions outside the firewall may join the peer group <highlight><bold>200</bold></highlight> by proxy through the proxy service <highlight><bold>270</bold></highlight> in its region <highlight><bold>212</bold></highlight>. Peers <highlight><bold>200</bold></highlight> in the regions <highlight><bold>212</bold></highlight> outside the firewall <highlight><bold>248</bold></highlight> that are members of the peer group <highlight><bold>210</bold></highlight> may also leave the peer group <highlight><bold>210</bold></highlight> through the proxy service <highlight><bold>270</bold></highlight>. Membership information (e.g. included in peer group advertisements) for the peer group <highlight><bold>200</bold></highlight> may be synchronized on all known proxy services <highlight><bold>270</bold></highlight> outside the firewall <highlight><bold>248</bold></highlight>. In one embodiment, a proxy service <highlight><bold>270</bold></highlight> may be a member peer of all locally registered peer groups <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0436" lvl="0"><number>&lsqb;0436&rsqb;</number> Several levels of authentication may be provided in one or more embodiments of the peer-to-peer platform. Anonymous login may be provided in one embodiment. In one embodiment, a plain text login (user or user and password) may be provided. In one embodiment, login with privacy may be provided. In this embodiment, public key exchange may be used and/or a symmetric master key. The login process preferably returns a credential to the joining peer so that the peer may bypass the login process until the credential expires. One embodiment may provide a public key chain that may be used by registered users to eliminate public key exchanges and thus provides unauthenticated access. On embodiment may provide secure public key exchange with signed certificates. </paragraph>
<paragraph id="P-0437" lvl="0"><number>&lsqb;0437&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 27A and 27B</cross-reference> illustrate a method of providing privacy in the peer-to-peer platform according to one embodiment. <cross-reference target="DRAWINGS">FIG. 27A</cross-reference> shows a peer region <highlight><bold>212</bold></highlight> with peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B and a peer-to-peer platform proxy service <highlight><bold>270</bold></highlight>. Peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B may fetch and cache public keys from a public key chain <highlight><bold>280</bold></highlight> of the proxy service <highlight><bold>270</bold></highlight>. The cached public keys preferably have expiration dates. Peers <highlight><bold>200</bold></highlight>A and/or <highlight><bold>200</bold></highlight>B may compute a master secret key for one or more of the public keys. Using the keys, cipher text may be exchanged between peers <highlight><bold>200</bold></highlight>A and <highlight><bold>200</bold></highlight>B in privacy as illustrated in <cross-reference target="DRAWINGS">FIG. 27B</cross-reference>. </paragraph>
<paragraph id="P-0438" lvl="0"><number>&lsqb;0438&rsqb;</number> The peer-to-peer platform may include one or more methods for providing data integrity in the peer-to-peer environment. These methods may be used to insure that what is sent is what is received. One embodiment may use a standard hash on data (e.g. Secure Hash Algorithm (SHA-1 ) as defined by the Secure Hash Standard of the Federal Information Processing Standards Publication 180-1). A weak form and/or a strong form may be used in embodiments. In one embodiment, the weak form may use a public key ring and symmetric master to sign data. This method may work best between two peers each having he other&apos;s public key. In one embodiment, the strong form may use a symmetric key algorithm such as RSA (Rivest-Shamir-Adleman) and certificate authorities. In one embodiment, the peer-to-peer platform may provide a proxy public certificate authority service. The authority service may create, sign and distribute certificates (e.g. X509 certificates) for all peers on a public key chain. The proxy service&apos;s public key is preferably resident on each proxied peer. Other embodiments may utilize other integrity methods. </paragraph>
<paragraph id="P-0439" lvl="0"><number>&lsqb;0439&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 28A and 28B</cross-reference> illustrate one embodiment of a method for using a peer-to-peer platform proxy service as a certificate authority. <cross-reference target="DRAWINGS">FIG. 28A</cross-reference> illustrates a peer region <highlight><bold>212</bold></highlight> with several peers <highlight><bold>200</bold></highlight> and a proxy service <highlight><bold>270</bold></highlight>. The proxy service <highlight><bold>270</bold></highlight> may distribute signed certificates in response to peer requests as required. The peers <highlight><bold>200</bold></highlight> may validate the proxy service <highlight><bold>270</bold></highlight> signature using a proxy service public key. As illustrated in <cross-reference target="DRAWINGS">FIG. 28</cross-reference>B, when exchanging content with other peers <highlight><bold>200</bold></highlight>, a peer <highlight><bold>200</bold></highlight> may sign the content with the destination peer&apos;s public key and distribute the cipher text. </paragraph>
<paragraph id="P-0440" lvl="7"><number>&lsqb;0440&rsqb;</number> Bootstrapping Mechanism </paragraph>
<paragraph id="P-0441" lvl="0"><number>&lsqb;0441&rsqb;</number> The peer-to-peer platform preferably provides a bootstrapping mechanism that devices on the network may use to discover basic core abstractions (e.g. peer, peer groups, advertisements, pipes). This mechanism may be used for bootstrapping a system, and so may be referred to as a bootstrapping mechanism. For example, a executable code and/or data may be downloaded to a device to allow the device to participate in a peer-to-peer network that implements the peer-to-peer platform, and the device may use the bootstrapping mechanism to obtain core abstractions of the peer-to-peer environment since the &ldquo;fresh&rdquo; system may not have knowledge of or access to higher-level services for obtaining the core abstractions. </paragraph>
<paragraph id="P-0442" lvl="0"><number>&lsqb;0442&rsqb;</number> The bootstrapping mechanism may include code, data, policies, and/or protocols. The bootstrapping mechanism preferably may include a minimal set of operations to allow a device to participate in the peer-to-peer environment and preferably may be implemented and used on a wide variety of platforms (e.g. PDAs, pagers, smart appliances, laptops, workstations, clusters of servers, etc.) and in a variety of network topologies. For example, some peers may not use TCP/IP, and some may not be connected to the Internet. The bootstrapping mechanism may be used as a fallback mechanism when nothing else is useable (e.g. in case of a failure of higher lever services). The bootstrapping mechanism is preferably highly configurable. In one embodiment, configuration &ldquo;wizards&rdquo; may be used for automatic configuration of the bootstrapping mechanism. </paragraph>
<paragraph id="P-0443" lvl="0"><number>&lsqb;0443&rsqb;</number> In one embodiment, other services (e.g. higher-level services and/or optional services) and applications may control the bootstrapping mechanism. In one embodiment, the core protocols may provide an API or APIs to allow the service and/or application to dynamically teach and/or reconfigure the core policies. In one embodiment, a service or application may dynamically overload (i.e. replace) the core policies. For example, this may be done when the design of the application is so dependant on a specific algorithm that it cannot handle the default core policies. </paragraph>
<paragraph id="P-0444" lvl="0"><number>&lsqb;0444&rsqb;</number> The bootstrapping mechanism in the peer-to-peer platform may allow the peer-to-peer platform to be used straight &ldquo;out of the box&rdquo;, and/or to be easily configured and installed, for use with a peer-to-peer platform-enabled application. </paragraph>
<paragraph id="P-0445" lvl="0"><number>&lsqb;0445&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> illustrates a device obtaining mechanisms for accessing peer-to-peer platform resources for taking part in the peer-to-peer environment from one or more bootstrap nodes according to one embodiment. Bootstrap nodes may also be peer nodes. Peer nodes <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B and device <highlight><bold>800</bold></highlight> may be coupled to a network. Peer nodes <highlight><bold>210</bold></highlight>A may include one or more mechanisms that allow devices to access resource <highlight><bold>804</bold></highlight>A, and peer node <highlight><bold>210</bold></highlight>B may include one or more mechanisms that allow devices to access resource <highlight><bold>804</bold></highlight>B. Resources <highlight><bold>804</bold></highlight>A and <highlight><bold>804</bold></highlight>B may be core services (e.g. a peer discovery service and/or a peer membership service). Core services may include, but are not limited to, a peer discovery protocol, a peer membership service, a peer resolver service, and a peer information service. </paragraph>
<paragraph id="P-0446" lvl="0"><number>&lsqb;0446&rsqb;</number> In one embodiment, device <highlight><bold>800</bold></highlight> may use the mechanisms obtained from peer nodes <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B for accessing resources <highlight><bold>804</bold></highlight>A and <highlight><bold>804</bold></highlight>B implemented on peer nodes. In one embodiment, device <highlight><bold>800</bold></highlight> may only implement a subset of the functionality of resources <highlight><bold>804</bold></highlight>A and <highlight><bold>804</bold></highlight>B using the mechanisms. </paragraph>
<paragraph id="P-0447" lvl="0"><number>&lsqb;0447&rsqb;</number> Device <highlight><bold>800</bold></highlight> may retain the mechanisms obtained from peer nodes <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B in memory. Hence, in the future, if device <highlight><bold>800</bold></highlight> desires to participate in the peer-to-peer environment, the bootstrapping process may be bypassed. Alternatively, device <highlight><bold>800</bold></highlight> may not retain the mechanisms in memory. Device <highlight><bold>800</bold></highlight> may obtain the mechanisms from peer nodes <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B if resources <highlight><bold>804</bold></highlight>A and <highlight><bold>804</bold></highlight>B are needed again. For example, if device <highlight><bold>800</bold></highlight> terminates participation in the peer-to-peer environment and then later desires to again participate, device <highlight><bold>800</bold></highlight> may again obtain the mechanisms for accessing resources <highlight><bold>804</bold></highlight>A and <highlight><bold>804</bold></highlight>B from peer nodes <highlight><bold>210</bold></highlight>A and <highlight><bold>210</bold></highlight>B respectively. This ensures that device <highlight><bold>800</bold></highlight> gets a new version of each mechanism from peer nodes <highlight><bold>21</bold></highlight> OA and <highlight><bold>210</bold></highlight>B if there is a new version available. </paragraph>
<paragraph id="P-0448" lvl="0"><number>&lsqb;0448&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> illustrates a bootstrap node for providing peer-to-peer platform resources to devices to enable the devices to participate in the peer-to-peer environment according to one embodiment. Bootstrap nodes may also be peer nodes. Peer node <highlight><bold>210</bold></highlight> and devices <highlight><bold>800</bold></highlight>A and <highlight><bold>800</bold></highlight>B may be coupled to a network. Peer node <highlight><bold>210</bold></highlight> may include one or more mechanisms for accessing peer-to-peer platform resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D. The mechanisms for accessing resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D may include executable code and/or advertisements for resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D. Peer-to-peer platform resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D may include core services (e.g. a peer discovery service and/or a peer membership service). Devices <highlight><bold>800</bold></highlight>A and <highlight><bold>800</bold></highlight>B may access resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D using the mechanisms provided by peer node <highlight><bold>210</bold></highlight>. Peer node <highlight><bold>210</bold></highlight> may provide access to resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D to only particular, predefined devices or only members of a particular peer group. Alternatively, peer node <highlight><bold>210</bold></highlight> may provide access to resources <highlight><bold>804</bold></highlight>C and <highlight><bold>804</bold></highlight>D to any of one or more devices coupled to the network. </paragraph>
<paragraph id="P-0449" lvl="0"><number>&lsqb;0449&rsqb;</number> For example, devices <highlight><bold>800</bold></highlight>A and <highlight><bold>800</bold></highlight>B may start an initialization process with a minimal set of peer-to-peer platform resources. Devices <highlight><bold>800</bold></highlight>A and <highlight><bold>800</bold></highlight>B may use bootstrapping mechanisms <highlight><bold>802</bold></highlight>A and <highlight><bold>802</bold></highlight>B respectively to contact peer node <highlight><bold>210</bold></highlight> to obtain mechanisms for accessing a peer membership service. Devices <highlight><bold>800</bold></highlight>A and <highlight><bold>800</bold></highlight>B may then use the membership service to form a peer group. </paragraph>
<paragraph id="P-0450" lvl="0"><number>&lsqb;0450&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is a flowchart illustrating a method for obtaining access to peer-to-peer platform resources to enable participation in the peer-to-peer environment according to one embodiment. A device may desire to participate in a peer-to-peer environment. The device may not include one or more resources necessary for participation. The device may include a bootstrapping mechanism and, in one embodiment, be pre-configured to communicate with a predetermined bootstrap node on the network for obtaining access to the necessary resources. Alternatively, the device may not be pre-configured and may instead discover one or more peer nodes from which to access the resources. The bootstrapping mechanism on the device may send a request to the bootstrap node for the resources as indicated at <highlight><bold>900</bold></highlight>. The bootstrap node may send a response that may include one or more mechanisms to access the necessary resources as indicated at <highlight><bold>902</bold></highlight>. The device may use the mechanisms for accessing the resources to participate in the peer-to-peer environment as indicated at <highlight><bold>904</bold></highlight>. </paragraph>
<paragraph id="P-0451" lvl="0"><number>&lsqb;0451&rsqb;</number> Note that the method described in <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is exemplary and not intended to be limiting. The method may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc. </paragraph>
<paragraph id="P-0452" lvl="7"><number>&lsqb;0452&rsqb;</number> Peer Monitoring and Metering </paragraph>
<paragraph id="P-0453" lvl="0"><number>&lsqb;0453&rsqb;</number> Peer monitoring may include the capability to closely keep track of a (local or remote) peer&apos;s status, to control the behavior of a peer, and to respond to actions on the part of a peer. These capabilities may be useful, for example, when a peer network wants to offer premium services with a number of desirable properties such as reliability, scalability, and guaranteed response time. For example, a failure in the peer system is preferably detected as soon as possible so that corrective actions can be taken. It may be preferable to shut down an erratic peer and transfer its responsibilities to another peer. </paragraph>
<paragraph id="P-0454" lvl="0"><number>&lsqb;0454&rsqb;</number> Peer metering may include the capability to accurately account for a peer&apos;s activities, in particular its usage of valuable resources. Such a capability is essential if the network economy is to go beyond flat-rate services. Even for providers offering flat rate services, it is to their advantage to be able to collect data and analyze usage patterns in order to be convinced that a flat rate structure is sustainable and profitable. </paragraph>
<paragraph id="P-0455" lvl="0"><number>&lsqb;0455&rsqb;</number> In one embodiment, the peer-to-peer platform may provide monitoring and metering through the peer information protocol, where a peer can query another peer for data such as up time and amount of data handled. Security is important in peer monitoring and metering. In one embodiment, a peer may choose to authenticate any command it receives. In one embodiment, a peer may decide to not answer queries from suspect sources. </paragraph>
<paragraph id="P-0456" lvl="7"><number>&lsqb;0456&rsqb;</number> Peer-to-Peer Platform Shell Application </paragraph>
<paragraph id="P-0457" lvl="0"><number>&lsqb;0457&rsqb;</number> One embodiment of the peer-to-peer platform may include a shell application as a development environment built on top of the platform. In one embodiment, the shell application may provide interactive access to the peer-to-peer platform via a simple command line interface. With the shell, shell scripts may be written. The shell may be executed in a networked environment. A user command in the shell may generate a sequence of message exchanges between a set of peers, with some computation occurring on remote peer nodes, and with the answer being returned to the user of the shell. Using the shell, peer-to-peer core building blocks such as peers, peer groups, pipes, and codats may be manipulated. Codats are units of contents that can hold both code and data. For example, a user, through the shell, can publish, search, and execute codats, discover peers or peer groups, create pipes to connect two peers, and send and receive messages. </paragraph>
<paragraph id="P-0458" lvl="0"><number>&lsqb;0458&rsqb;</number> In one embodiment, an interpreter in the shell may operate in a loop: it accepts a command, interprets the command, executes the command, and then waits for another command. The shell may display a prompt to notify users that it is ready to accept a new command. </paragraph>
<paragraph id="P-0459" lvl="0"><number>&lsqb;0459&rsqb;</number> In one embodiment with a Java-based implementation of the peer-to-peer platform, one or more of the shell commands may not be built in per se. The commands may be Java language programs and are dynamically loaded and started by the shell framework when the corresponding commands are typed in. Therefore, adding a new shell command may be performed by writing a program in the Java language. </paragraph>
<paragraph id="P-0460" lvl="0"><number>&lsqb;0460&rsqb;</number> In one embodiment, the shell may provide a &ldquo;pipe&rdquo; capability to redirect a command output pipe into another command input pipe. In one embodiment, shell commands may be given a standard input, output and error pipes that a user can connect, disconnect and reconnect to other shell commands. Commands can support other pipes if needed. In one embodiment of the shell, a user may dynamically disconnect and reconnect pipes between commands, as in the following example: </paragraph>
<paragraph id="P-0461" lvl="2"><number>&lsqb;0461&rsqb;</number> xxxx&gt;cat&gt;p1 myfile </paragraph>
<paragraph id="P-0462" lvl="2"><number>&lsqb;0462&rsqb;</number> xxxx&gt;grep&lt;p1 abcd </paragraph>
<paragraph id="P-0463" lvl="2"><number>&lsqb;0463&rsqb;</number> xxxx&gt;grep&lt;p1 efgh </paragraph>
<paragraph id="P-0464" lvl="0"><number>&lsqb;0464&rsqb;</number> In the above example, the first command &ldquo;cat&gt;p1 myfile&rdquo; cats myfile into the output pipe p1. The second command then connects pipe pl to grep&apos;s input pipe and searches for the string abcd. The third command then disconnects p1, redirects it to the new grep command&apos;s input pipe and searches for the string efgh. </paragraph>
<paragraph id="P-0465" lvl="0"><number>&lsqb;0465&rsqb;</number> In one embodiment, the peer-to-peer platform shell supports piping in both directions. A special operator such as &ldquo;&gt; &lt;&rdquo; may used for creating crossing pipes between two commands. For example, with the following command &ldquo;cmd1&lt; &gt;cmd2&rdquo;, the output pipe of the first command is connected to the standard input pipe of the second command, and at the same time the output pipe of the second command is connected to the standard input pipe of the first command. Of course, this operator has to be used carefully to avoid infinite data loops. </paragraph>
<paragraph id="P-0466" lvl="0"><number>&lsqb;0466&rsqb;</number> In one embodiment, applications other than peer-to-peer platform applications may be run from the shell. For content management, MIME type information included with a codat may be used to let local applications associated with well-known content types handle them automatically. The peer-to-peer platform may support the development of adaptors to allow the execution of external programs with appropriate security safeguards. An adapter may essentially map data and connect applications for remote launches. Some examples might be: </paragraph>
<paragraph id="P-0467" lvl="2"><number>&lsqb;0467&rsqb;</number> UNIX&reg; stdio to peer-to-peer platform stdio adapter&mdash;such an adaptor may enable piping of peer-to-peer platform commands to UNIX&reg; commands on UNIX&reg; platforms. </paragraph>
<paragraph id="P-0468" lvl="2"><number>&lsqb;0468&rsqb;</number> Peer-to-peer platform stream to a media player adapter&mdash;such an adaptor may be platform- and application-specific, but may handle any necessary real-time data conversion between a peer-to-peer platform pipe and the format required by the player. These need not be unidirectional. For example, one might adapt the output of a video capture application to become a peer-to-peer platform stream. </paragraph>
<paragraph id="P-0469" lvl="2"><number>&lsqb;0469&rsqb;</number> HTML to peer-to-peer platform stdio&mdash;such an adaptor may be used to post and get information to/from Web pages to allow peer-to-peer platform peers to interact with existing Web sites. For example, a peer-to-peer platform command can launch a search for titles and prices on Amazon and pipe the results to other peer-to-peer platform services. </paragraph>
<paragraph id="P-0470" lvl="7"><number>&lsqb;0470&rsqb;</number> Conclusion </paragraph>
<paragraph id="P-0471" lvl="0"><number>&lsqb;0471&rsqb;</number> Various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon An article of manufacture. Generally speaking, An article of manufacture may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and/or a wireless link. </paragraph>
<paragraph id="P-0472" lvl="0"><number>&lsqb;0472&rsqb;</number> Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the invention embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A device comprising: 
<claim-text>a processor; </claim-text>
<claim-text>a network interface configured to couple the device to a network; and </claim-text>
<claim-text>a memory comprising program instructions, wherein the program instructions are executable within the device to: 
<claim-text>obtain one or more mechanisms for accessing a set of peer-to-peer platform resources from one or more peer nodes on the network, wherein the one or more peer nodes participate in a peer-to-peer environment on the network to discover each other, communicate with each other, and cooperate with each other to form peer groups and share content, and wherein the one or more mechanisms for accessing the set of peer-to-peer platform resources includes: </claim-text>
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes; and </claim-text>
<claim-text>access the set of peer-to-peer platform resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include a mechanism for accessing a peer resolver service for sending search queries to other peer nodes in the peer-to-peer environment in accordance with a peer resolver protocol. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include a mechanism for accessing a peer information service for obtaining information about peer nodes&apos; capabilities and status in accordance with a peer information protocol. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include a mechanism for accessing a pipe binding service for finding a physical location of a pipe endpoint and binding the pipe endpoint to a peer node in accordance with a pipe binding protocol, wherein a pipe endpoint corresponds to a network interface of a peer node. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the one or more mechanisms include a mechanism for accessing an endpoint routing service for obtaining network route information to peer nodes in accordance with a n endpoint routing protocol. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the program instructions are further operable to: 
<claim-text>terminate participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>maintain the one or more mechanisms in memory of the device; and </claim-text>
<claim-text>access the one or more maintained mechanisms to again participate in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the program instructions are further operable to: 
<claim-text>terminate participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>obtain one or more updated mechanisms for accessing the set of peer-to-peer platform resources from the one or more peer nodes; and </claim-text>
<claim-text>access the set of peer-to-peer platform resources using the one or more updated mechanisms to again participate in the peer-to-peer environment; </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein to obtain the one or more mechanisms, the program instructions are further executable to locate one or more peer nodes on the peer-to-peer network. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein, to obtain the one or more mechanisms, the program instructions are further executable to: 
<claim-text>send a message to a particular peer node of the one or more peer nodes requesting the one or more mechanisms; and </claim-text>
<claim-text>receive the one or more mechanisms from the peer node in response to the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the device is configured to execute the program instructions to: 
<claim-text>obtain the one or more mechanisms during an initialization process of the device; and </claim-text>
<claim-text>access the set of resources using the one or more mechanisms during the initialization process of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A peer node comprising: 
<claim-text>a processor; </claim-text>
<claim-text>network interface configured to couple the peer node to a network; </claim-text>
<claim-text>a memory operable to store program instructions, wherein the program instructions are executable by the processor to: 
<claim-text>receive a request from a device on the network, wherein the request specifies one or more mechanisms for accessing a set of peer-to-peer platform resources for use by the device in participating in a peer-to-peer environment. </claim-text>
<claim-text>provide one or more mechanisms for accessing a set of peer-to-peer platform resources to the device on the network in response to the request; and </claim-text>
<claim-text>wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The peer node as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The peer node as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The peer node as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the one or more mechanisms include one or more of a mechanism for accessing a peer resolver service for sending search queries to other peer nodes in the peer-to-peer environment in accordance with a peer resolver protocol, a mechanism for accessing a peer information service for obtaining information about peer nodes&apos; capabilities and status in accordance with a peer information protocol, a mechanism for accessing a pipe binding service for finding a physical location of a pipe endpoint and binding the pipe endpoint to a peer node in accordance with a pipe binding protocol, wherein a pipe endpoint corresponds to a network interface of a peer node, and a mechanism for accessing an endpoint routing service for obtaining network route information to peer nodes in accordance with an endpoint routing protocol. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The peer node as recited in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the program instructions are further executable to: 
<claim-text>maintain version information for each of the one or more mechanisms; and </claim-text>
<claim-text>if a particular mechanism of the one or more mechanisms is updated to a new version, provide the new version of the mechanism to the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A peer computing system, comprising: 
<claim-text>a plurality of peer nodes operable to couple to a network, wherein the plurality of peer nodes are configure to implement a peer-to-peer environment on the network in accordance with one or more peer-to-peer platform protocols for enabling the plurality of peer nodes to discovery each other, communicate with each other, and cooperate with each other to form peer groups and share network resources in the peer-to-peer environment; </claim-text>
<claim-text>one of the plurality of peer nodes operable to maintain one or more mechanisms for accessing a set of peer-to-peer platform resources on the network, wherein the one or more mechanisms are obtainable by devices on the network to enable the devices to participate in the peer-to-peer environment, wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes on the network; and </claim-text>
</claim-text>
<claim-text>a device operable to: 
<claim-text>couple to the network; </claim-text>
<claim-text>obtain the one or more mechanisms from the peer node on the network; and </claim-text>
<claim-text>access the set of resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the plurality of peer nodes are members peers in a peer group that provides a common set of services to member peers of the peer group. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the one or more mechanisms include one or more of a mechanism for accessing a peer resolver service for sending search queries to other peer nodes in the peer-to-peer environment in accordance with a peer resolver protocol, a mechanism for accessing a peer information service for obtaining information about peer nodes&apos; capabilities and status in accordance with a peer information protocol, a mechanism for accessing a pipe binding service for finding a physical location of a pipe endpoint and binding the pipe endpoint to a peer node in accordance with a pipe binding protocol, wherein a pipe endpoint corresponds to a network interface of a peer node, and a mechanism for accessing an endpoint routing service for obtaining network route information to peer nodes in accordance with an endpoint routing protocol. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the one of the plurality of peer nodes is further operable to: 
<claim-text>maintain version information for each of the one or more mechanisms; and </claim-text>
<claim-text>if a particular mechanism of the one or more mechanisms is updated to a new version, provide the new version of the mechanism to the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the device is operable to: 
<claim-text>terminate participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>maintain the one or more mechanisms in memory of the device; and </claim-text>
<claim-text>access the one or more maintained mechanisms to again participate in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the device is operable to: 
<claim-text>terminate participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>obtain one or more updated mechanisms for accessing the set of peer-to-peer platform resources from the one of the plurality of peer nodes; and </claim-text>
<claim-text>access the set of peer-to-peer platform resources using the one or more updated mechanisms to again participate in the peer-to-peer environment; </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein to obtain the one or more mechanisms, the device is operable to locate the one of the plurality of peer nodes. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein, to obtain the one or more mechanisms, the device is operable to: 
<claim-text>send a message to the one of the plurality of peer nodes requesting the one or more mechanisms; and </claim-text>
<claim-text>receive the one or more mechanisms from the one of the plurality of peer nodes in response to the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the device is operable to: 
<claim-text>obtain the one or more mechanisms during an initialization process of the device; and </claim-text>
<claim-text>access the set of resources using the one or more mechanisms during the initialization process of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A peer computing system, comprising: 
<claim-text>means for a plurality of peer nodes on a network to implement a peer-to-peer environment on the network in accordance with one or more peer-to-peer platform protocols for enabling the plurality of peer nodes to discovery each other, communicate with each other, and cooperate with each other to form peer groups and share network resources in the peer-to-peer environment; </claim-text>
<claim-text>means for maintaining one or more mechanisms for accessing a set of peer-to-peer platform resources on the network, wherein the one or more mechanisms are obtainable by devices on the network to enable the devices to participate in the peer-to-peer environment, wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes on the network; and </claim-text>
</claim-text>
<claim-text>means for obtaining the one or more mechanisms on the network; and </claim-text>
<claim-text>means for accessing the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the plurality of peer nodes are members peers in a peer group that provides a common set of services to member peers of the peer group. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>means for maintaining version information for each of the one or more mechanisms; and </claim-text>
<claim-text>if a particular mechanism is updated to a new version of the mechanism, means for providing the new version of the mechanism to the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>means for terminating participation of a device in the peer-to-peer environment; </claim-text>
<claim-text>means for maintaining the one or more mechanisms in memory of the device; and </claim-text>
<claim-text>means for accessing the one or more maintained mechanisms to allow the device to again participate in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>means for terminating participation of a device in the peer-to-peer environment; </claim-text>
<claim-text>means for obtaining one or more updated mechanisms for allowing the device to access the set of peer-to-peer platform resources; and </claim-text>
<claim-text>means for accessing the set of peer-to-peer platform resources using the one or more updated mechanisms to allow the device to again participate in the peer-to-peer environment; </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the means for obtaining the one or more mechanisms comprise means for locating a peer node on the network providing the one or more mechanisms. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein means for obtaining one or more mechanisms comprises: 
<claim-text>means for sending a message to one of the plurality of peer nodes requesting the one or more mechanisms; and </claim-text>
<claim-text>means for receiving the one or more mechanisms from the one of the plurality of peer nodes in response to the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The peer computing system as recited in <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, further comprising: 
<claim-text>means for obtaining the one or more mechanisms during an initialization process of a device; and </claim-text>
<claim-text>means for accessing the set of resources using the one or more mechanisms during the initialization process of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A method comprising: 
<claim-text>a device obtaining one or more mechanisms for accessing a set of peer-to-peer platform resources from one or more peer nodes on the network, wherein the one or more peer nodes participate in a peer-to-peer environment on the network to discover each other, communicate with each other, and cooperate with each other to form peer groups and share content, and wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes; and </claim-text>
</claim-text>
<claim-text>the device accessing the set of peer-to-peer platform resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising: 
<claim-text>the device terminating participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>the device maintaining the one or more mechanisms in memory of the device; and </claim-text>
<claim-text>the device accessing the one or more mechanisms to again participate in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising: 
<claim-text>the device terminating participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>the device obtaining one or more updated mechanisms for accessing the set of peer-to-peer platform resources from the one or more peer nodes; and </claim-text>
<claim-text>the device accessing the set of peer-to-peer platform resources using the one or more updated mechanisms to participate in the peer-to-peer environment; </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein obtaining the one or more mechanisms comprises the device locating one or more peer nodes on the peer-to-peer network. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein obtaining the one or more mechanisms comprises: 
<claim-text>the device sending a message to a particular peer node of the one or more peer nodes requesting the one or more mechanisms; and </claim-text>
<claim-text>the device receiving the one or more mechanisms from the peer node in response to the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, further comprising: 
<claim-text>the device obtaining the one or more mechanisms during an initialization process of the device; and </claim-text>
<claim-text>the device accessing the set of resources using the one or more mechanisms during the initialization process of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A method comprising: 
<claim-text>a peer node on a network receiving a request from a device on the network, wherein the request specifies one or more mechanisms for accessing a set of peer-to-peer platform resources for use by the device in participating in a peer-to-peer environment. </claim-text>
<claim-text>the peer node providing the one or more mechanisms to the device in response to the request; and </claim-text>
<claim-text>wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, further comprising: 
<claim-text>the peer node maintaining version information for each of the one or more mechanisms; and </claim-text>
<claim-text>if a particular mechanism of the one or more mechanisms is updated to a new version, the peer node providing the new version of the mechanism to the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. A method, comprising: 
<claim-text>a plurality of peer nodes on a network, implementing a peer-to-peer environment on the network in accordance with one or more peer-to-peer platform protocols for enabling the plurality of peer nodes to discovery each other, communicate with each other, and cooperate with each other to form peer groups and share network resources in the peer-to-peer environment; </claim-text>
<claim-text>one of the plurality of peer nodes maintaining one or more mechanisms for accessing a set of peer-to-peer platform resources on the network, wherein the one or more mechanisms are obtainable by devices on the network to enable the devices to participate in the peer-to-peer environment, wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes on the network; and </claim-text>
</claim-text>
<claim-text>a device on the network obtaining the one or more mechanisms from the peer node on the network; and </claim-text>
<claim-text>the device accessing the set of resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, wherein the one or more mechanisms include one or more advertisements for the set of resources. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, wherein the one or more mechanisms include one or more code mechanisms for accessing the set of resources. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, wherein the plurality of peer nodes are members peers in a peer group that provides a common set of services to member peers of the peer group. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, further comprising: 
<claim-text>the one of the plurality of peer nodes maintaining version information for each of the one or more mechanisms; and </claim-text>
<claim-text>if a particular mechanism of the one or more mechanisms is updated to a new version, the one of the plurality of peer nodes providing the new version of the mechanism to the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, further comprising: 
<claim-text>the device terminating participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>the device maintaining the one or more mechanisms in memory of the device; and </claim-text>
<claim-text>the device accessing the one or more mechanisms to again participate in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, further comprising: 
<claim-text>the device terminating participation of the device in the peer-to-peer environment; </claim-text>
<claim-text>the device obtaining one or more updated mechanisms for accessing the set of peer-to-peer platform resources from the one or more peer nodes; and </claim-text>
<claim-text>the device accessing the set of peer-to-peer platform resources using the one or more updated mechanisms to participate in the peer-to-peer environment; </claim-text>
</claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference>, wherein obtaining the one or more mechanisms comprises: 
<claim-text>the device sending a message to the one of the plurality of peer nodes requesting the one or more mechanisms; and </claim-text>
<claim-text>the device receiving the one or more mechanisms from the one of the plurality of peer nodes in response to the request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. An article of manufacture comprising program instructions, wherein the program instructions are computer-executable to implement: 
<claim-text>a device obtaining one or more mechanisms for accessing a set of peer-to-peer platform resources from one or more peer nodes on the network, wherein the one or more peer nodes participate in a peer-to-peer environment on the network to discover each other, communicate with each other, and cooperate with each other to form peer groups and share content, and wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes; and </claim-text>
</claim-text>
<claim-text>the device accessing the set of peer-to-peer platform resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. An article of manufacture comprising program instructions, wherein the program instructions are computer-executable to implement: 
<claim-text>a peer node on a network receiving a request from a device on the network, wherein the request specifies one or more mechanisms for accessing a set of peer-to-peer platform resources for use by the device in participating in a peer-to-peer environment. </claim-text>
<claim-text>the peer node providing the one or more mechanisms to the device in response to the request; and </claim-text>
<claim-text>wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. An article of manufacture comprising program instructions, wherein the program instructions are computer-executable to implement: 
<claim-text>a plurality of peer nodes on a network, implementing a peer-to-peer environment on the network in accordance with one or more peer-to-peer platform protocols for enabling the plurality of peer nodes to discovery each other, communicate with each other, and cooperate with each other to form peer groups and share network resources in the peer-to-peer environment; </claim-text>
<claim-text>one of the plurality of peer nodes maintaining one or more mechanisms for accessing a set of peer-to-peer platform resources on the network, wherein the one or more mechanisms are obtainable by devices on the network to enable the devices to participate in the peer-to-peer environment, wherein the one or more mechanisms include: 
<claim-text>a mechanism for accessing a discovery service for discovering resources in the peer-to-peer environment in accordance with a peer discovery protocol; and </claim-text>
<claim-text>a mechanism for accessing a membership service for applying for membership in accordance with a peer membership protocol in one or more peer groups each comprising a set of cooperating peer nodes on the network; and </claim-text>
</claim-text>
<claim-text>a device on the network obtaining the one or more mechanisms from the peer node on the network; and </claim-text>
<claim-text>the device accessing the set of resources using the one or more mechanisms to participate as a peer node in the peer-to-peer environment.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002521A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002521A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002521A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002521A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002521A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002521A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002521A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002521A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002521A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002521A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002521A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002521A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002521A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002521A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002521A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002521A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002521A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002521A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002521A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002521A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002521A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030002521A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030002521A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030002521A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030002521A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030002521A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
