<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005104A1-20030102-D00000.TIF SYSTEM "US20030005104A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00001.TIF SYSTEM "US20030005104A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00002.TIF SYSTEM "US20030005104A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00003.TIF SYSTEM "US20030005104A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00004.TIF SYSTEM "US20030005104A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00005.TIF SYSTEM "US20030005104A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00006.TIF SYSTEM "US20030005104A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00007.TIF SYSTEM "US20030005104A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005104A1-20030102-D00008.TIF SYSTEM "US20030005104A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005104</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10063968</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020530</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2,349,083</doc-number>
</priority-application-number>
<filing-date>20010530</filing-date>
<country-code>CA</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/173</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>223000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>222000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Server configuration tool</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Timothy</given-name>
<middle-name>G.</middle-name>
<family-name>Deboer</family-name>
</name>
<residence>
<residence-non-us>
<city>Toronto</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Timothy</given-name>
<middle-name>M.</middle-name>
<family-name>Francis</family-name>
</name>
<residence>
<residence-non-us>
<city>Keswick</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Sheldon</given-name>
<middle-name>B.</middle-name>
<family-name>Wosnick</family-name>
</name>
<residence>
<residence-non-us>
<city>Richmond Hill</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Siu</given-name>
<middle-name>Chung</middle-name>
<family-name>Yuen</family-name>
</name>
<residence>
<residence-non-us>
<city>Scarborough</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>IBM</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>IBM CORPORATION, T.J. WATSON RESEARCH CENTER</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 218</address-1>
<city>YORKTOWN HEIGHTS</city>
<state>NY</state>
<postalcode>10598</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Embodiments of the present invention separates raw server configuration data (data describing how the server is to operate&mdash;e.g., network port number, security settings, software drivers, etc.) from server instance data (data which describes where to run a server and how to process user code&mdash;e.g., which directories to access, where the user code is located, etc.). Embodiments of the present invention may have raw server configuration data and server instance data stored as, for example, text files. A file embodying raw server configuration data may be copied and reused on multiple computer systems. Similarly, a file embodying server instance data may also be copied and reused on multiple computer systems. Embodiments of the present invention process the raw server configuration data file and the server instance file to generate an overall server configuration file which configures a server to operate in the desired manner so that user code can be successfully deployed on the configured server. The overall configuration file created may include server environment parameters that are required to initialize or start a server. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to servers and their configuration and, more particularly, to a server configuration tool. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Background of the Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computer servers are widely used in many computer installations. A computer server, forming part of a network of computer servers (hereinafter &ldquo;servers&rdquo;) and computer clients (hereinafter &ldquo;clients&rdquo;), will receive requests for data, provide a wide variety of data processing services and transmit data to clients and other servers. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Servers, operating or being deployed on a computer system, provide a multitude of functions and services to other servers and other computer clients. A computer system may operate to act as a single server or may enable a number of servers to operate, independently. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Some well known types of servers include, for example, print servers (which provide printing services to other servers and/or clients), web servers (which provide web page services to connected computers), file servers (which provide file access and file storage services), application servers (which may provide business logic or application delivery services), database servers (which provide for the storage of databases and/or database management services) as well as many others. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Generically, a server will enable another computer (whether another server or a client) to process (e.g., running or execution, storage, handling, etc.) user code. User code can be any type of data such as executable code, files, databases and the like. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> As will be understood by those of ordinary skill in the art, there numerous type of environments in which a server may be deployed. Examples of different operating environment variables which may affect the operation of a server include: whether a server may be one of many servers operating on a single computer system; the location in the network of a server; the location of files on the computer system or the network; the operating system being employed on the computer system in which the server is deployed; the user code the server is to process; as well as many parameters and variables. In order to reflect the variety of environments in which a server may be deployed, a server is typically configured in order to operate properly on the computer system on which the server will be deployed (i.e., located and executed). </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> However, there are large numbers of computer systems and servers which are employed in large networks. For example, an electronic business (e-business) network may include literally hundreds, and perhaps thousands of servers interconnected via some network such as, for example, the Internet. Accordingly, each server in this e-business network (and other networks) needs to be configured (which is usually performed through use of a configuration file which comprises, typically, text describing the configuration) so that the server operates as required. The configuration of a server is dependent upon both the computer system in which the server is operating and the user code which is to be deployed on the server. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> As can be expected, due to the numerous changes made to both hardware and software in typical network environments, existing servers often need to be reconfigured and new servers need to configured and deployed. Accordingly, information technology (IT) departments in many large organizations spend inordinate amounts of time maintaining the configuration of the various servers. Presently, this maintenance work is typically performed manually and individually on each computer system. Some attempts have been made to reduce this maintenance workload by configuring each individual computer system identically. Unfortunately this approach to reduce workload reduces the flexibility of the network in which those identical computer systems operate. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In another shortcoming of present server configuration tools, when user code needs to be deployed on multiple servers (which may require the configuring hundreds of servers) on multiple computers, the task of deploying individual configurations for each server (in order to maintain network flexibility) is time consuming, prone to errors and costly. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In a further shortcoming, configurations for similarly (although not identically) deployed servers cannot be easily transferred between servers. This difficulty results from the required manual editing of the configuration file which must be performed on the server receiving a copy of a configuration file. This editing is tedious and, due to its technical nature, requires a technician with a fairly sophisticated understanding of the server, the computer system in which the server is deployed and the user code on which the server will operate. Locating and hiring personnel to perform and support such a task can be difficult for many organizations. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Additionally, known configuration tools require a user to manually transfer a server configuration and the server application (e.g., a web server application) to a remote server which requires configuration. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Accordingly, a server configuration tool which addresses, at least in part, some of these shortcomings is desired. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF INVENTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The present invention is directed to a server configuration tool which addresses, at least in part, the various shortcomings described above. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Embodiments of the present invention separate raw server configuration data (data, which has yet to be processed as described herein, describing behavior data or how the server is to operate (server operation parameters)&mdash;e.g., network port number, security settings, software drivers, etc.) from server instance data (data which describes operating environment data such as where to run a server and how to process user code (server processing parameters)&mdash;e.g., which directories to access, where the user code is located, etc.). Embodiments of the present invention may have raw server configuration data and server instance data stored as, for example, text files. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> A file embodying raw server configuration data may be copied and reused on multiple computer systems. Similarly, a file embodying server instance data may also be copied and reused on the same computer system. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Embodiments of the present invention process the raw server configuration data file and the server instance file, effectively merging the two files, to generate an overall server configuration file which configures a server to operate in the desired manner so that user code can be successfully deployed on the configured server. However, as will be appreciated, the configuration data may, in some embodiments, comprise a plurality of data files. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In a further embodiment of the present invention, the raw server configuration data file and server instance file can be processed to generate an output file which includes other information for initializing or starting a server. This other information may include, for example, classpath, system properties and the like. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Through separation of the server raw server configuration data from the server instance data tremendous benefits can be achieved. For example, if a particular project (which is one or more pieces of user code) is to be deployed on multiple servers with each server operating on a differently configured computer system, the raw server configuration data may be used on these multiple servers with changes only made to various server instance data files. Thereafter, processing the raw server configuration data file and the modified server instance will result in a server reconfigured to operate as required with the same project. Similarly, if a server, which has been properly configured on a particular computer system so that a particular project operates as desired, needs to be reconfigured to operate on the same computer system but for a different project, then only the server configuration data file needs be modified. The various raw server configuration data files can then be processed with a single instance data file. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Advantageously, embodiments of the present invention reduce the amount of maintenance that must be performed in order to deploy: new projects; modified projects; new computer systems; modified computer systems; new servers; or modified servers. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In a further advantage, embodiments of the present invention enable wide reuse of portions of the configuration data (e.g., reuse of raw server configuration files and/or server instance configuration files) while maintaining flexibility in the overall network system. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In a further advantage, embodiments of the present invention enable differently skilled personnel, resulting in wider talent pool, to configure various aspects of a server/project combination. For example, personnel with an understanding of a project or particular user code can provide assistance in the generation of server instance data while other personnel, having an understanding of servers and computer system, can provide assistance in the generation of the raw server configuration data file. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In a further advantage, embodiments of the present invention can include or be used with, or incorporate, a publishing or remote file transfer to transmit or transfer a configuration data file and, if desired, the associated server application (e.g., a web server application) to remote computer systems. As will be apparent, embodiments of the present invention incorporating this feature enable administrators to remotely administer (i.e., configure and operate) a computer system. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In accordance with an aspect of the present invention there is provided a method for generating server configuration data for configuring a server, said method comprising: receiving raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and generating server configuration data from said received raw server configuration and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In accordance with another aspect of the present invention there is provided a computer readable media storing data and instructions, said data and instructions, when executed by a computer system adapts said computer system to: receive raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and generate server configuration data from said received raw server configuration and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In accordance with still another aspect of the present invention there is provided a computer system for configuring another computer system, said computer system adapted to: receive raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and generate server configuration data from said received raw server configuration and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In accordance with still another aspect of the present invention there is provided A method for generating a server configuration file comprising: merging first data and second data, said first data comprising raw server configuration data and said second data comprising server instance data. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the figures which illustrate an example embodiment of this invention: </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically illustrates a computer system embodying aspects of the invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> schematically illustrates, in greater detail, a portion of the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates, in functional block form, a portion of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of exemplary operations of the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> is a flowchart which illustrates, in greater detail, a portion of the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, which comprises <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference>, is an example of a raw server configuration file used by the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and processed by the operations performed and illustrated in <cross-reference target="DRAWINGS">FIGS. 4 and 4</cross-reference>A; and </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an example of a server instance configuration file used by the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and processed by the operations performed and illustrated in <cross-reference target="DRAWINGS">FIGS. 4 and 4</cross-reference>A.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> An embodiment of the invention, computer system <highlight><bold>100</bold></highlight>, is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Computer system <highlight><bold>100</bold></highlight>, illustrated for exemplary purposes as a networked computing device, is in communication with other networked computing devices (not shown) via network <highlight><bold>110</bold></highlight>. As will be appreciated by those of ordinary skill in the art, network <highlight><bold>110</bold></highlight> may be embodied using conventional networking technologies and may include one or more of the following: local area networks, wide area networks, intranets, public Internet and the like. As is discussed with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, computer system <highlight><bold>100</bold></highlight> may interact with other networked computer systems (not shown) providing application analysis of a distributed application. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Throughout the description herein, an embodiment of the invention is illustrated with aspects of the invention embodied solely on computer system <highlight><bold>100</bold></highlight>. As will be appreciated by those of ordinary skill in the art, aspects of the invention may be distributed amongst one or more networked computing devices which interact with computer system <highlight><bold>100</bold></highlight> via one or more data networks such as, for example, network <highlight><bold>110</bold></highlight>. However, for ease of understanding, aspects of the invention have been embodied in a single computing device&mdash;computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Computer system <highlight><bold>100</bold></highlight> includes processing system <highlight><bold>102</bold></highlight> which communicates with various input devices <highlight><bold>104</bold></highlight>, output devices <highlight><bold>106</bold></highlight> and network <highlight><bold>110</bold></highlight>. Input devices <highlight><bold>104</bold></highlight>, two of which are shown, may include, for example, a keyboard, a mouse, a scanner, an imaging system (e.g., a camera, etc.) or the like. Similarly, output devices <highlight><bold>106</bold></highlight> (only one of which is illustrated) may include displays, information display unit printers and the like. Additionally, combination input/output (I/O) devices may also be in communication with processing system <highlight><bold>102</bold></highlight>. Examples of conventional I/O devices include removable and fixed recordable media (e.g., floppy disk drives, tape drives, CD-ROM drives, DVD-RW drives, etc.), touch screen displays and the like. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Exemplary processing system <highlight><bold>102</bold></highlight> is illustrated in greater detail in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. As illustrated, processing system <highlight><bold>102</bold></highlight> includes several components&mdash;central processing unit (CPU) <highlight><bold>202</bold></highlight>, memory <highlight><bold>204</bold></highlight>, network interface (I/F) <highlight><bold>208</bold></highlight> and I/O I/F <highlight><bold>210</bold></highlight>. Each component is in communication with the other components via a suitable communications bus <highlight><bold>206</bold></highlight> as required. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> CPU <highlight><bold>202</bold></highlight> is a processing unit, such as an Intel Pentium&trade;, IBM PowerPC&trade;, Sun Microsystems UltraSparc&trade; processor or the like, suitable for the operations described herein. As will be appreciated by those of ordinary skill in the art, other embodiments of processing system <highlight><bold>102</bold></highlight> could use alternative CPUs and may include embodiments in which one or more CPUs are employed. CPU <highlight><bold>202</bold></highlight> may include various support circuits to enable communication between itself and the other components of processing system <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Memory <highlight><bold>204</bold></highlight> includes both volatile and persistent memory for the storage of: operational instructions for execution by CPU <highlight><bold>202</bold></highlight>, data registers, application storage and the like. Memory <highlight><bold>204</bold></highlight> preferably includes a combination of random access memory (RAM), read only memory (ROM) and persistent memory such as that provided by a hard disk drive. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Network I/F <highlight><bold>208</bold></highlight> enables communication between computer system <highlight><bold>100</bold></highlight> and other network computing devices (not shown) via network <highlight><bold>110</bold></highlight>. Network I/F <highlight><bold>208</bold></highlight> may be embodied in one or more conventional communication devices. Examples of a conventional communication device include an Ethernet card, a token ring card, a modem or the like. Network I/F <highlight><bold>208</bold></highlight> may also enable the retrieval or transmission of instructions for execution by CPU <highlight><bold>202</bold></highlight> from or to a remote storage media or device via network <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> I/O I/F <highlight><bold>210</bold></highlight> enables communication between processing system <highlight><bold>102</bold></highlight> and the various I/O devices <highlight><bold>104</bold></highlight>, <highlight><bold>106</bold></highlight>. I/O I/F <highlight><bold>210</bold></highlight> may include, for example, a video card for interfacing with an external display such as output device <highlight><bold>106</bold></highlight>. Additionally, I/O I/F <highlight><bold>210</bold></highlight> may enable communication between processing system <highlight><bold>102</bold></highlight> and a removable media <highlight><bold>212</bold></highlight>. Although removable media <highlight><bold>212</bold></highlight> is illustrated as a conventional diskette other removable memory devices such as Zip&trade; drives, flash cards, CD-ROMs, static memory devices and the like may also be employed. Removable media <highlight><bold>212</bold></highlight> may be used to provide instructions for execution by CPU <highlight><bold>202</bold></highlight> or as a removable data storage device. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The computer instructions/applications stored in memory <highlight><bold>204</bold></highlight> and executed by CPU <highlight><bold>202</bold></highlight> (thus adapting the operation of computer system <highlight><bold>100</bold></highlight> as described herein) are illustrated in functional block form in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As will be appreciated by those of ordinary skill in the art, the delineation between aspects of the applications illustrated as functional blocks in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is somewhat arbitrary as the various operations attributed to a particular application as described herein may, in alternative embodiments, be subsumed by another application. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> As illustrated, for exemplary purposes only, memory <highlight><bold>202</bold></highlight> stores operating system (OS) <highlight><bold>302</bold></highlight>, communications suite <highlight><bold>304</bold></highlight>, server <highlight><bold>306</bold></highlight>, configuration processing tool <highlight><bold>310</bold></highlight>, server raw server configuration data file <highlight><bold>308</bold></highlight>, server instance configuration data file <highlight><bold>312</bold></highlight> and complete server configuration file <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> OS <highlight><bold>302</bold></highlight> is an operating system suitable for operation with a selected CPU <highlight><bold>202</bold></highlight> and the operations described herein. Multitasking, multithreaded OSes such as, for example, IBM AIX&trade;, Microsoft Windows NT&trade;, Linux or the like, are expected in many embodiments to be preferred. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Communication suite <highlight><bold>304</bold></highlight> provides, through, interaction with OS <highlight><bold>302</bold></highlight> and network I/F <highlight><bold>208</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>), suitable communication protocols to enable communication with other networked computing devices via network <highlight><bold>110</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Communication suite <highlight><bold>304</bold></highlight> may include one or more of such protocols such as TCP/IP, ethernet, token ring and the like. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In the exemplary embodiment, the various input files (data files <highlight><bold>308</bold></highlight> and <highlight><bold>312</bold></highlight>), output file <highlight><bold>314</bold></highlight>, configuration processing tool <highlight><bold>310</bold></highlight> and server <highlight><bold>306</bold></highlight> are illustrated as residing on a single computer system <highlight><bold>100</bold></highlight>. However, as those of ordinary skill in the art will appreciate, and as alluded to above, alternative embodiments of the present invention may have the various components which comprise aspects of the present invention distributed amongst various computer systems which communicate through the services provided by communication suite <highlight><bold>304</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Server <highlight><bold>306</bold></highlight> is a conventional server (e.g., print server, file server, database server, application server, etc.) which requires configuration to operate as desired on computer system <highlight><bold>100</bold></highlight>. The configuration of server <highlight><bold>306</bold></highlight> is provided by complete server configuration file <highlight><bold>314</bold></highlight> (described below). Aspects of server <highlight><bold>306</bold></highlight> which require configuration include configuration data which can be considered specific to computer system <highlight><bold>100</bold></highlight> (referred to herein as &ldquo;system settings&rdquo;) and configuration data which can be considered specific to the user code or project data (referred to herein as &ldquo;project settings&rdquo;) which is to be processed by server <highlight><bold>306</bold></highlight>. System settings may include, for example, security settings, network settings, Multipurpose Internet Mail Extensions (MIME) entries, Java&trade; virtual machine settings, communication protocol settings and the like. Project settings may include, for example, data relating to data logging settings, location of user code or project directories, log file locations, application identity and location to be executed for the processing of a project and other similar settings. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Configuration processing tool <highlight><bold>310</bold></highlight> (hereinafter &ldquo;configuration tool <highlight><bold>310</bold></highlight>&rdquo;) is adapted to receive configuration data, arranged in the exemplary embodiment as raw server configuration data file <highlight><bold>308</bold></highlight> (hereinafter &ldquo;raw server configuration file <highlight><bold>308</bold></highlight>&rdquo;) and server instance data file <highlight><bold>312</bold></highlight> (hereinafter &ldquo;instance file <highlight><bold>312</bold></highlight>&rdquo;), for processing. The received data files are processed (described in greater detail below with reference to operations <highlight><bold>400</bold></highlight> illustrated as a flow chart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) to generate an overall or complete server configuration file <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Configuration tool <highlight><bold>310</bold></highlight> may present the user with a graphical user interface (GUI) or be text or command line based. Initialization and execution of configuration tool <highlight><bold>310</bold></highlight> may be commenced by selecting an icon (e.g., in a GUI environment), entering the name of the file(s) embodying configuration tool <highlight><bold>310</bold></highlight> on a command line, calling or launching configuration tool <highlight><bold>310</bold></highlight> using an application program interface (API) or other known methods. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Raw server configuration data file <highlight><bold>308</bold></highlight> is, in the exemplary embodiment, a text file which contains data related to the computer system <highlight><bold>100</bold></highlight> which executes server <highlight><bold>306</bold></highlight> (i.e., server operation parameters). Raw server configuration data file <highlight><bold>308</bold></highlight> describes behavior data. An example of a raw server configuration file <highlight><bold>308</bold></highlight> is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Specific portions of the example raw server configuration file <highlight><bold>308</bold></highlight> are highlighted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> by a bolded and underlined font. The importance and meaning of these highlighted portions are described below with reference to <cross-reference target="DRAWINGS">FIGS. 4 and 6</cross-reference>. It should be noted that <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an excerpt from a complete configuration file. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The raw server configuration file <highlight><bold>308</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is formatted in accordance with the extensible Markup Language (XML) Metadata Interchange (XMI) format. However, other data formats could equally be employed in alternative embodiments. For example, raw server configuration file <highlight><bold>308</bold></highlight> could, in alternative embodiments, include a standard ASCII text file with some proprietary format, an HTML file, XML file or the like. Additionally, while the exemplary embodiment of raw server configuration file <highlight><bold>308</bold></highlight> is an ASCII text file, a binary file could also be employed. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Instance file <highlight><bold>312</bold></highlight>, like raw server configuration file <highlight><bold>308</bold></highlight>, provides data which is used to configure server <highlight><bold>306</bold></highlight> to properly process a project or user code. Instance file <highlight><bold>312</bold></highlight> describes operating environment data. Instance file <highlight><bold>312</bold></highlight>, as described above, contains data which is generally system environment specific (i.e., server processing parameters). Accordingly, examples of instance file <highlight><bold>312</bold></highlight> may include data pertaining to: which directories to access to process a project; applications to be used to properly process a project; the location of the project; location of event logging files; information required to publish or transfer server configuration and application data; server environment parameters (e.g. classpath, system properties variables, etc.) and the like. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> An exemplary instance file <highlight><bold>312</bold></highlight> is illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. As shown in the illustration, the exemplary instance file <highlight><bold>312</bold></highlight> includes a comment portion <highlight><bold>602</bold></highlight> (which is ignored during processing by configuration tool <highlight><bold>310</bold></highlight>) and a token and settings portion <highlight><bold>604</bold></highlight>. The token and settings portion <highlight><bold>604</bold></highlight> includes a list of tokens <highlight><bold>606</bold></highlight>A, <highlight><bold>606</bold></highlight>B, . . . , <highlight><bold>606</bold></highlight><highlight><italic>i </italic></highlight>(collectively and individually &ldquo;tokens <highlight><bold>606</bold></highlight>&rdquo;) and the values or settings <highlight><bold>608</bold></highlight>A, <highlight><bold>608</bold></highlight>B, . . . , <highlight><bold>608</bold></highlight><highlight><italic>i </italic></highlight>(collectively and individually &ldquo;token settings <highlight><bold>608</bold></highlight>&rdquo;) associated with those tokens. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The names or identities of the tokens <highlight><bold>606</bold></highlight> are defined by a user (e.g., the owner or creator of the project which is to be processed by a configured server <highlight><bold>306</bold></highlight>). Names or identities of tokens <highlight><bold>606</bold></highlight> may be selected to provide some assistance to persons reading or editing instance file <highlight><bold>31</bold></highlight> <highlight><bold>2</bold></highlight> to understand the purpose of the associated token <highlight><bold>606</bold></highlight>. For example, token <highlight><bold>606</bold></highlight>A (INSTANCE_WEBSPHERE_INSTALL_PATH), which is associated with the token value <highlight><bold>608</bold></highlight>A (&ldquo;d&bsol;:&bsol;apps&bsol;WebSphere&bsol;AppServer&rdquo;), provides a token which will be used by configuration tool <highlight><bold>310</bold></highlight> to generate in the overall configuration data file <highlight><bold>314</bold></highlight> the location of the application (the application server included in the WebSphere&reg; product from IBM Corporation) that is to be processed by server <highlight><bold>306</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> While files <highlight><bold>308</bold></highlight>, <highlight><bold>312</bold></highlight> and <highlight><bold>314</bold></highlight> are illustrated and described in the exemplary embodiment as a text file, persons of ordinary skill in the art will appreciate that, in alternative embodiments, these files could be formatted in other manners. For example, instance file <highlight><bold>312</bold></highlight> could be a binary file, a lookup table, a database or other manners for associating a first data element (e.g., a token) with a second data element (e.g., a value or setting). Additionally, files <highlight><bold>308</bold></highlight>, <highlight><bold>312</bold></highlight> and/or <highlight><bold>314</bold></highlight> could be, for example, a non-text file, a binary stream of data as well as others. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The operation of computer system <highlight><bold>100</bold></highlight>, and specifically configuration tool <highlight><bold>310</bold></highlight> and the use of input data files <highlight><bold>308</bold></highlight>, <highlight><bold>312</bold></highlight>, is best understood with reference to operations <highlight><bold>400</bold></highlight> (performed by computer system <highlight><bold>100</bold></highlight>) illustrated in flow chart form in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Initially, a raw server configuration file <highlight><bold>308</bold></highlight> is created. Raw server configuration file <highlight><bold>308</bold></highlight> may be created by the administrator of computer system <highlight><bold>100</bold></highlight> or server <highlight><bold>306</bold></highlight> or copied (and, if necessary, modified) from another system <highlight><bold>100</bold></highlight> (S<highlight><bold>402</bold></highlight>). Similarly, an instance file <highlight><bold>312</bold></highlight> is also created (or copied). An instance file will, typically (and not always) be created/modified by the owner/administrator of the project or user code which is to be processed by server <highlight><bold>306</bold></highlight> (S<highlight><bold>404</bold></highlight>). As will be appreciated, operations S<highlight><bold>402</bold></highlight> and S<highlight><bold>404</bold></highlight> can be reversed in order. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Raw server configuration file <highlight><bold>308</bold></highlight> and instance file <highlight><bold>312</bold></highlight> (input files) are then provided to configuration tool <highlight><bold>310</bold></highlight>. As indicated above, configuration tool <highlight><bold>310</bold></highlight> may present to a user of configuration tool <highlight><bold>310</bold></highlight> a GUI. In such an embodiment of the present invention, a simple &ldquo;File Open&rdquo; dialog box (familiar to those of skill in the art), selecting a graphic representation (e.g. icon) of a server instance and clicking on a &ldquo;start&rdquo; server icon may be employed. If configuration tool <highlight><bold>310</bold></highlight> is invoked using a command line interface (CLIF), configuration tool <highlight><bold>310</bold></highlight> may be provided with the location and identities of the input files as part of the command line variables used to execute configuration tool <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In any event, configuration tool <highlight><bold>310</bold></highlight>, upon receipt of input files <highlight><bold>308</bold></highlight> and <highlight><bold>312</bold></highlight>, processes the files (S<highlight><bold>406</bold></highlight>) and generates and outputs overall server configuration file <highlight><bold>314</bold></highlight> (and, optionally, other server environment data for initializing server <highlight><bold>306</bold></highlight>) (S<highlight><bold>408</bold></highlight>) which configures server <highlight><bold>306</bold></highlight>, when deployed, in the ordinary manner (S<highlight><bold>410</bold></highlight>). Server <highlight><bold>306</bold></highlight> is then initialized or started using overall server configuration file <highlight><bold>314</bold></highlight>. The processing performed by configuration tool <highlight><bold>310</bold></highlight> of input files <highlight><bold>308</bold></highlight> and <highlight><bold>312</bold></highlight> results in a merging of the data contained therein which is then output as output file <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The merging performed in the exemplary embodiment described hereinafter copies raw server configuration file <highlight><bold>308</bold></highlight> into output file <highlight><bold>314</bold></highlight> and, thereafter, replaces portions (referred to as tokens which may be, for example, a string sequence or other identifier) in output file with data from server instance file <highlight><bold>312</bold></highlight>. As will be appreciated, other processes could be employed to perform the merging operation. For example, in place of tokens position data (which could be relative position or absolute position data) could be employed. Position data, would act as a pointer to data in raw configuration data which needs to be replaced or modified by data found in server instance file, could be in the form of a tree position, line position (within a text file, for example) or other similar forms. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The processing in operation S<highlight><bold>406</bold></highlight> is better understood with reference to the flowchart in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. As illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, in operation S<highlight><bold>406</bold></highlight> configuration tool <highlight><bold>310</bold></highlight> initially parses server instance file <highlight><bold>312</bold></highlight> to identify whether any tokens present (such tokens are identified in the exemplary in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> by the bolded and underlined font which is used) (S<highlight><bold>414</bold></highlight>). Server instance file <highlight><bold>312</bold></highlight> (which, in the exemplary embodiment is an XMI file) may be parsed using known XMI parsers. Alternative parsers could obviously be employed in alternative embodiments. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In the present embodiment, the XMI file (illustrated in the exemplary <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) has a predefined syntax that allows a parser to read the file and generate a model representation of the configuration data. The information within the model can then be modified by changing the data in the model. The overall configuration file is generated in XMI using the modified data. However, as those of ordinary skill in the art will appreciate, the structure or format of input and output files can be altered. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> If a token <highlight><bold>606</bold></highlight> is identified (S<highlight><bold>416</bold></highlight>), configuration tool <highlight><bold>310</bold></highlight> determines if the identified token is relates to the configuration file (S<highlight><bold>418</bold></highlight>). If the token identified in server instance file <highlight><bold>312</bold></highlight> is for the configuration file <highlight><bold>308</bold></highlight>, configuration tool <highlight><bold>310</bold></highlight> locates the identified token in configuration file <highlight><bold>308</bold></highlight> (S<highlight><bold>420</bold></highlight>). Once the token identified in server instance file <highlight><bold>312</bold></highlight> is also located in raw server configuration file <highlight><bold>308</bold></highlight> (tokens in configuration file <highlight><bold>308</bold></highlight> being bolded and underlined) (S<highlight><bold>420</bold></highlight>), the portion of raw server configuration file <highlight><bold>308</bold></highlight> which includes the identified token <highlight><bold>606</bold></highlight> is copied to the output file (overall configuration file <highlight><bold>314</bold></highlight>) with the token <highlight><bold>606</bold></highlight> being replaced with the value/setting <highlight><bold>608</bold></highlight> located in instance file <highlight><bold>312</bold></highlight> (S<highlight><bold>422</bold></highlight>). The end of file check operation of S<highlight><bold>428</bold></highlight> is then performed. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> If, in S<highlight><bold>416</bold></highlight>, configuration tool does not identify as it parses instance file <highlight><bold>312</bold></highlight>, configuration tool <highlight><bold>310</bold></highlight> determines if the end of file <highlight><bold>312</bold></highlight> has been reached (S<highlight><bold>428</bold></highlight>). If the end of instance file <highlight><bold>312</bold></highlight> has been reached, operation S<highlight><bold>406</bold></highlight> ceases. If the end of instance file <highlight><bold>312</bold></highlight> has not been reached (S<highlight><bold>428</bold></highlight>), configuration tool <highlight><bold>310</bold></highlight> continues to parse instance file <highlight><bold>312</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> If, S<highlight><bold>418</bold></highlight> (after a token <highlight><bold>606</bold></highlight> has been identified in instance file <highlight><bold>312</bold></highlight>) configuration tool <highlight><bold>310</bold></highlight> determines that the identified token does not relate to the configuration of a server, configuration tool <highlight><bold>310</bold></highlight> determines whether the identified token is a server environment parameter (S<highlight><bold>424</bold></highlight>). If the identified token is a server environment parameter, this data is stored in memory (or, alternatively, as a data object such as, for example, a file) for use in starting server <highlight><bold>306</bold></highlight> (S<highlight><bold>426</bold></highlight>). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> After performing operations S<highlight><bold>424</bold></highlight> and <highlight><bold>5426</bold></highlight>, the end of file check of operations S<highlight><bold>428</bold></highlight> is performed. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The result of operations S<highlight><bold>414</bold></highlight>-S<highlight><bold>422</bold></highlight> is the generation of a configuration file <highlight><bold>314</bold></highlight> which, although based on two separate files which are, respectively, associated with server raw server configuration data and server instance data, are processed to generate a configuration file which can be employed to conventionally configure a server <highlight><bold>306</bold></highlight>. As indicated above, operations <highlight><bold>400</bold></highlight> can, in addition to generating final configuration file(s), be employed to also generate some server environment parameters for initializing or starting a server. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Those of ordinary skill in the art will appreciate that the operations described in <cross-reference target="DRAWINGS">FIGS. 4 and 4</cross-reference>A may be rearranged, combined or otherwise altered while still falling within the sphere and scope of the present invention. For example, while the operations describe, for each token identified in a server instance file, search for a corresponding token in the raw server configuration file, this operation could be reversed. That is, an alternative embodiment could be embodied wherein for each token identified in a raw server configuration file, a search for a corresponding token in the server instance file could be performed. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> From the foregoing description, persons of ordinary skill of the art will appreciate the advantages that embodiments of the present invention will provide. For example, as a result of the separation of the raw server configuration data from the server instance data, the present invention for a particular project or user code, enables the server configuration data to be used on multiple servers with changes made only to various server instance data files (i.e., the server configuration data files require no modification). Similarly, if a server needs to be reconfigured (the server having been properly configured on a particular computer system so that a particular project operates as desired) to operate on the same computer system but for a different project, then only the raw server configuration data file needs be modified. Thereafter, processing the server instance data file and the modified raw server configuration will result in a new server configuration file which operates to reconfigured the server so that the server operates as required. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Advantageously, embodiments of the present invention reduce the amount of maintenance that must be performed in order to deploy: new projects; modified projects; new computer systems, modified computer systems; new servers; or modified servers. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> In a further advantage, &ldquo;stock&rdquo; or frequently used raw server configuration files and frequently used server instance files can be stored in a database (or other storage facility) and combined into a very large number of server configurations. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In a further advantage, embodiments of the present invention enable wide reuse of portions of the configuration data (e.g., reuse of raw server configuration files and/or server instance configuration files) while maintaining flexibility in the overall network system. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In a further advantage, embodiments of the present invention enable differently skilled personnel, resulting in wider talent pool, to configure various aspects of a server/project combination. For example, personnel with an understanding of a project or particular user code can provide assistance in the generation of server configuration data while other personnel, having an understanding of servers and computer system, can provide assistance in the generation of the server instance data file. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> As will be appreciated by those skilled in the art, modifications to the above-described embodiment can be made without departing from the essence of the invention. For example, the server instance data may contain publishing data so that the server configuration and the server application data (e.g. a web application) can be automatically transferred to a remote server. This will enable a server to be initialized or started automatically immediately after the transfer since the computer system receiving the transferred configuration and application data will have received all the data necessary to start the server. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> While one (or more) embodiment(s) of this invention has been illustrated in the accompanying drawings and described above, it will be evident to those skilled in the art that changes and modifications may be made therein without departing from the essence of this invention. All such modifications or variations are believed to be within the sphere and scope of the invention as defined by the claims appended hereto. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for generating server configuration data for configuring a server, said method comprising the steps of: 
<claim-text>receiving raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and </claim-text>
<claim-text>generating server configuration data from said received raw server and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said merging step further comprises the steps of: 
<claim-text>copying said raw server configuration data to form said server configuration data; and </claim-text>
<claim-text>wherein said configuration token in said server configuration data is replaced by a value associated with a selected token from said server instance data, said selected token corresponding to said configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said generating step further comprises the steps of: 
<claim-text>identifying in said raw server configuration data and said server instance data corresponding configuration and server instance tokens. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said identifying step further comprises the steps of: 
<claim-text>locating in said server instance data, server instance tokens; and </claim-text>
<claim-text>for each server instance token located; </claim-text>
<claim-text>determining if said raw server configuration data includes a corresponding configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising the step of for each server instance token located: 
<claim-text>prior to said determining, assessing if said server instance token located comprises a token associated with a configuration parameter; and </claim-text>
<claim-text>if said server instance token located comprises a token associated with a configuration parameter, performing said determining. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of: 
<claim-text>transmitting said server configuration data to a remote computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of providing said raw server configuration data as server operation parameters and said server instance data as server processing parameters. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further comprising the step of providing said server instance data as server environment parameters. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said merging steps comprises: 
<claim-text>copying said raw server configuration data so as to form said server configuration data; </claim-text>
<claim-text>identifying a portion of said server configuration data that requires modification; </claim-text>
<claim-text>replacing said portion identified with a value associated with a corresponding portion in said server instance data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of providing said raw server configuration data as one or more data files and said server instance data as one or more data files. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of providing the server configuration data generated as a modification of said raw server configuration data. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of claims <highlight><bold>1</bold></highlight> further comprising the step of starting a server on a computer system employing said server configuration data. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A computer readable media storing data and instructions, said data and instructions, when executed by a computer system adapts said computer system to: 
<claim-text>receive raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and </claim-text>
<claim-text>generate server configuration data from said received raw server configuration and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said data and instructions adapting said computer system to merge said raw server configuration data and said server instance data comprises data and instructions adapting said computer system to: 
<claim-text>copy said raw server configuration data to form said server configuration data; and </claim-text>
<claim-text>wherein said configuration token in said server configuration data is replaced by a value associated with a selected token from said server instance data, said selected token corresponding to said configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said data and instructions adapting said computer system to generate server configuration data comprises data and instructions to adapt said computer system to: 
<claim-text>identify in said raw server configuration data and said server instance data corresponding configuration and server instance tokens. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said data and instructions adapting said computer system to identify in said raw server configuration data and said server instance data corresponding configuration and server instance tokens comprises data and instructions to adapt said computer system to: 
<claim-text>locate in said server instance data, server instance tokens; and </claim-text>
<claim-text>for each server instance token located; </claim-text>
<claim-text>determine if said raw server configuration data includes a corresponding configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said data and instructions adapting said computer system to determine for each server instance token located further comprises data and instructions to adapt said computer system to: 
<claim-text>prior to said determining, assess if said server instance token located comprises a token associated with a configuration parameter; and </claim-text>
<claim-text>if said server instance token located comprises a token associated with a configuration parameter, performing said determining. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein said data and instructions further adapt said computer system to: 
<claim-text>transmit said server configuration data to a remote computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said raw server configuration data comprises server operation parameters and said server instance data comprises server processing parameters. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said server instance data further comprises server environment parameters. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said raw server configuration data comprises one or more data files and said server instance data comprises one or more data files. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the server configuration data generated comprises a modification of said raw server configuration data. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer readable media of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> further comprising data and instructions adapting said computer system to start a server on a computer system employing said server configuration data. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A computer system for configuring another computer system, said computer system adapted to: 
<claim-text>receive raw server configuration data and server instance data, said raw server configuration data comprising a configuration token, and said server instance data comprising one or more instance tokens, each of said one or more instance tokens associated with an instance value; and </claim-text>
<claim-text>generate server configuration data from said received raw server configuration and server instance data, wherein said server configuration data comprises merging said raw server configuration data and said server instance data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein said adaptation to generate server configuration data comprises an adaptation to: 
<claim-text>copy said raw server configuration data to form said server configuration data; and </claim-text>
<claim-text>wherein said configuration token in said server configuration data is replaced by a value associated with a selected token from said server instance data, said selected token corresponding to said configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein said adaptation to generate server configuration data comprises an adaptation to: 
<claim-text>identify in said raw server configuration data and said server instance data corresponding configuration and server instance tokens. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein said adaptation to identify in said raw server configuration data and said server instance data corresponding configuration and server instance tokens comprises an adaptation to: 
<claim-text>locate in said server instance data, server instance tokens; and </claim-text>
<claim-text>for each server instance token located; </claim-text>
<claim-text>determine if said raw server configuration data includes a corresponding configuration token. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein said adaptation to determine for each server instance token located further comprises an adaptation to: 
<claim-text>prior to said determining, assess if said server instance token located comprises a token associated with a configuration parameter; and </claim-text>
<claim-text>if said server instance token located comprises a token associated with a configuration parameter, performing said determining. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein said computer system is further adapted to: 
<claim-text>transmit said server configuration data to a remote computer system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein said raw server configuration data comprises server operation parameters and said server instance data comprises server processing parameters. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said server instance data further comprises server environment parameters. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein said raw server configuration data comprises one or more data files and said server instance data comprises one more data files. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the server configuration data generated comprises a modification of said raw server configuration data. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The computer system of claims <highlight><bold>24</bold></highlight> further adapted to start a server on a computer system employing said server configuration data. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A method for generating a server configuration file comprising the step of: 
<claim-text>merging first data and second data, wherein said first data comprising raw server configuration data and said second data comprising server instance data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> further comprising the step of providing said raw server configuration data as behavior data and said server instance data as operating environment data. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> further comprising the step of providing said behavior data as one or more of: port numbers; host name; MIME types; security parameters; memory resource parameters; and CPU resource parameters; and said operating environment data as one or more of: path names; environment variables; publishing data; and server specific variables dependent upon computer system specific variables. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein said merging step further comprises the step of: 
<claim-text>replacing a token in said raw server configuration data with values associated with a token in said server instance data, said token in said server instance data corresponding to said token in said raw server configuration data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein said merging step further comprises the step of generating a separate server configuration file.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005104A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005104A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005104A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005104A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005104A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005104A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005104A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005104A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005104A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
