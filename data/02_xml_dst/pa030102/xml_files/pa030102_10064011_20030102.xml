<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005093A1-20030102-D00000.TIF SYSTEM "US20030005093A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005093A1-20030102-D00001.TIF SYSTEM "US20030005093A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005093A1-20030102-D00002.TIF SYSTEM "US20030005093A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005093A1-20030102-D00003.TIF SYSTEM "US20030005093A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005093A1-20030102-D00004.TIF SYSTEM "US20030005093A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005093</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10064011</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020604</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2,349,654</doc-number>
</priority-application-number>
<filing-date>20010604</filing-date>
<country-code>CA</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/177</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>220000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Server configuration versioning tool</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Timothy</given-name>
<middle-name>G.</middle-name>
<family-name>Deboer</family-name>
</name>
<residence>
<residence-non-us>
<city>Toronto</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Timothy</given-name>
<middle-name>M.</middle-name>
<family-name>Francis</family-name>
</name>
<residence>
<residence-non-us>
<city>Keswick</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Sheldon</given-name>
<middle-name>B.</middle-name>
<family-name>Wosnick</family-name>
</name>
<residence>
<residence-non-us>
<city>Richmond Hill</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Siu</given-name>
<middle-name>Chung</middle-name>
<family-name>Yuen</family-name>
</name>
<residence>
<residence-non-us>
<city>Scarborough</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>IBM</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>IBM CORPORATION, T.J. WATSON RESEARCH CENTER</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 218</address-1>
<city>YORKTOWN HEIGHTS</city>
<state>NY</state>
<postalcode>10598</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Embodiments of the invention enable the association of server configuration data with an application or project. Additionally, embodiments of the invention may enable multiple versions of server configuration data (which in some embodiments are versioned separately from the associated application or project) to be stored. Advantageously embodiments of the invention enable a server to be configured in accordance with versioned configuration data (often stored in one or more configuration files) such that the server performs in a well understood manner. This advantageous feature enables, amongst others, a developer to more quickly identify the source of any problems which may have been introduced as a result of modifications made to the application being tested. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to configuration of servers and, more particularly, to a server configuration versioning tool. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Background of the Invention </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Computer servers are widely used in many computer installations. A computer server, forming part of a network of computer servers (hereinafter &ldquo;servers&rdquo;) and computer clients (hereinafter &ldquo;clients&rdquo;), will receive requests for data, provide a wide variety of data processing services and transmit data to clients and other servers. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Servers, operating or being deployed on a computer system, provide a multitude of functions and services to other servers and other computer clients. A computer system may operate to act as a single server or may enable a number of servers to operate, independently. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Some well known types of servers include, for example, print servers (which provide printing services to other servers and/or clients), web servers (which provide web page services to connected computers), file servers (which provide file access and file storage services), application servers (which may provide business logic or application delivery services), database servers (which provide for the storage of databases and/or database management services) as well as many others. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Generically, a server will enable another computer (whether another server or a client) to process (e.g., running or execution, storage, handling, etc.) user code. User code can be any type of data such as executable code, applications, files, databases and the like. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> As will be understood by those of ordinary skill in the art, there numerous type of environments in which a server may be deployed. Examples of different operating environment variables which may affect the operation of a server include: whether a server may be one of many servers operating on a single computer system; the location in the network of a server; the location of files on the computer system or the network; the operating system being employed on the computer system in which the server is deployed; the user code the server is to process; as well as many parameters and variables. In order to reflect the variety of environments in which a server may be deployed, a server is typically configured in order to operate properly on the computer system on which the server will be deployed (i.e., located and executed). </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> As is known to those skilled in the art, the proper operation of an application which is to processed or executed by a server depends on the configuration of the processing server. That is, an application may be designed to operate on a particular server (e.g., a Tomcat or WebSphere&reg; web server) provided that particular server is properly configured. A server, otherwise capable of processing or executing an application, may, when improperly configured, fail to properly process the application. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In the present development environment, applications are developed in the development environment where the application is coded and then tested (with these steps being repeated as necessary) until an application is deemed to be ready for deployment in a customer or operating setting. Also during the development phase the application, a developer typically will &ldquo;version&rdquo; the application using version control software. That is, the developer will store the various components (e.g., source code files, object code, EJBs, JSPs, etc.) in a repository (e.g., a database) which allows for the application (or a portion thereof) at a specified point in time to be saved. The version control software provides for the automated management solution for controlling, maintaining and tracking software development. Versioning control software (also known as source control management&mdash;SCM) typically enables files to be &ldquo;checked out&rdquo; and &ldquo;checked in&rdquo;. Thus, when an application is being developed by a team of developers, the versioning control software will allow different versions of the application to be saved and retrieved. SCM software, in some instances, will also allow multiple changes to be made concurrently by different developers, and then merged correctly. Other features of versioning control software are known to those skilled in the art. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> As an application progresses through the development process, an application developer may test the application-under-development on a server configured by the developer or another member of the team to which the developer belongs. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> As a result of this present application development environment, application developers are focused on the various artifacts (e.g., Enterprise Java Beans&mdash;EJBs, servlets, JavaServer Pages&mdash;JSPs, HTML files, etc.) that form the application and are not, generally, concerned with the server side operation and configuration. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> After (many) modifications due to developer based testing, an application may be transferred to a person or team dedicated to testing or licensed to a customer. The deployment setting then involves the configuration and operation of the server for the developed application. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> A recipient of the developed application (whether a test person/team or a customer) will then deploy the application on a server configured by the recipient. As can be expected, differences in server configuration between the developer&apos;s server and the recipient&apos;s server can result in bugs or other operational difficulties being identified. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> As such, there is presently no known method to ensure that an application which has been deployed on a server will execute in the server environment (i.e., the server configuration) with which the application is known to operate as desired. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Additionally, as many applications are now typically developed in a team environment, a single developer may, after modifying some code, test the code by processing it on a team&apos;s server. However, if the server has be reconfigured (by, for example, another member of the development team), the modified code may not operate as expected. The developer may waste enormous amounts of time in identifying the problem which may be a result of the reconfiguration of the team server. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In a further shortcoming of the present application development and deployment environment is the difficulty experienced by application testing teams and application customers in identifying bugs or other causes for any operational difficulties experienced as a result of executing or processing the application. As indicated above, operational difficulties may be the result of coding errors (or bugs) or the configuration of the server upon which the application is operating. Accordingly, identifying the exact source of any problem can be time consuming. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Accordingly, a server configuration versioning tool which addresses, at least in part, some of these shortcomings is desired. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF INVENTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention is directed to a server configuration versioning tool which addresses, at least in part, the various described shortcomings. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Embodiments of the invention enable a developer to associate a server configuration with an application or project. Additionally, embodiments of the invention may enable multiple versions of a server configuration (which in some embodiments are versioned separately from the associated application or project) to be stored. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Advantageously embodiments of the invention enable a developer to configure a server in accordance with versioned configuration data (often stored in one or more configuration files) which is known to have configured a server such that the server performs in a well understood manner. This advantageous feature enables a developer to more quickly identify the source of any problems which may have been introduced as a result of modifications made to the application being tested. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In a further advantage, an application can be transferred to another party (e.g., another developer, a test team, a customer, etc.) with associated server configuration data. As such, a developer can be reasonably assured of the configuration of server on which the application is to be executed or processed. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In a further advantage of the present invention, a developer, having been informed, by another party of operational problems of the application, can be assured that the other party&apos;s server is configured in a particular manner. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In a further advantage of the present invention, two parties (e.g., a developer and a tester, a developer and a customer, etc.) are more quickly able to ascertain the cause of operational problems due to their ability to more quickly and accurately reproduce the execution environment in which the application is operating. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Other advantages of embodiments of the present invention will be apparent to those of ordinary skill in the art. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In accordance with an aspect of the present invention there is provided a method for executing an application on a server, said method comprising: transferring to said server a package, said server for execution on a computer platform, said package comprising said application and server configuration data, said server configuration data comprising data to configure said server for said application; configuring said server with said server configuration data; and executing said server and said application. In accordance with another aspect of the present invention there is provided a method of preparing an application said method comprising: packaging files composing said application with server configuration data, said server configuration data comprising one or more server configuration files, each of said one or more server configuration files adapted to configure a server to execute said application. In accordance with still another aspect of the present invention there is provided A versioning tool for performing a method of preparing an application said method comprising: packaging files composing said application with server configuration data, said server configuration data comprising one or more server configuration files, each of said one or more server configuration files adapted to configure a server to execute said application. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In accordance with still another aspect of the present invention there is provided a method of versioning server configuration files, said method comprising: within a package comprising an application associating a version of a server configuration file with said application, said version of a server configuration file adapted to configure a server to process said application. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In accordance with still another aspect of the present invention there is provided a computer readable medium storing data and instructions, said data and instructions adapting a computer system to: transfer to said server a package, said server for execution on a computer platform, said package comprising said application and server configuration data, said server configuration data comprising data to configure said server for said application; configure said server with said server configuration data; and execute said server and said application. Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The figures illustrate an example embodiment for this invention. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically illustrates a computer system embodying aspects of the invention. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> schematically illustrates, in greater detail, a portion of the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates, in functional block form, a portion of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of exemplary operations of the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> An embodiment of the invention, computer system <highlight><bold>100</bold></highlight>, is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Computer system <highlight><bold>100</bold></highlight>, illustrated for exemplary purposes as a networked computing device, is in communication with other networked computing devices (not shown) via network <highlight><bold>110</bold></highlight>. As will be appreciated by those of ordinary skill in the art, network <highlight><bold>110</bold></highlight> may be embodied using conventional networking technologies and may include one or more of the following: local area networks, wide area networks, intranets, public Internet and the like. As is discussed with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, computer system <highlight><bold>100</bold></highlight> may interact with other networked computer systems (not shown) providing application analysis of a distributed application. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Throughout the description herein, an embodiment of the invention is illustrated with aspects of the invention embodied solely on computer system <highlight><bold>100</bold></highlight>. As will be appreciated by those of ordinary skill in the art, aspects of the invention may be distributed amongst one or more networked computing devices which interact with computer system <highlight><bold>100</bold></highlight> via one or more data networks such as, for example, network <highlight><bold>110</bold></highlight>. However, for ease of understanding, aspects of the invention have been embodied in a single computing device&mdash;computer system <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Computer system <highlight><bold>100</bold></highlight> includes processing system <highlight><bold>102</bold></highlight> which communicates with various input devices <highlight><bold>104</bold></highlight>, output devices <highlight><bold>106</bold></highlight> and network <highlight><bold>110</bold></highlight>. Input devices <highlight><bold>104</bold></highlight>, two of which are shown, may include, for example, a keyboard, a mouse, a scanner, an imaging system (e.g., a camera, etc.) or the like. Similarly, output devices <highlight><bold>106</bold></highlight> (only one of which is illustrated) may include displays, information display unit printers and the like. Additionally, combination input/output (I/O) devices may also be in communication with processing system <highlight><bold>102</bold></highlight>. Examples of conventional I/O devices include removable and fixed recordable media (e.g., floppy disk drives, tape drives, CD-ROM drives, DVD-RW drives, etc.), touch screen displays and the like. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Exemplary processing system <highlight><bold>102</bold></highlight> is illustrated in greater detail in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. As illustrated, processing system <highlight><bold>102</bold></highlight> includes several components&mdash;central processing unit (CPU) <highlight><bold>202</bold></highlight>, memory <highlight><bold>204</bold></highlight>, network interface (I/F) <highlight><bold>208</bold></highlight> and I/O I/F <highlight><bold>210</bold></highlight>. Each component is in communication with the other components via a suitable communications bus <highlight><bold>206</bold></highlight> as required. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> CPU <highlight><bold>202</bold></highlight> is a processing unit, such as an Intel Pentium&trade;, IBM PowerPC&trade;, Sun Microsystems UltraSparc&trade; processor or the like, suitable for the operations described herein. As will be appreciated by those of ordinary skill in the art, other embodiments of processing system <highlight><bold>102</bold></highlight> could use alternative CPUs and may include embodiments in which one or more CPUs are employed. CPU <highlight><bold>202</bold></highlight> may include various support circuits to enable communication between itself and the other components of processing system <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Memory <highlight><bold>204</bold></highlight> includes both volatile and persistent memory for the storage of: </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> operational instructions for execution by CPU <highlight><bold>202</bold></highlight>, data registers, application storage and the like. Memory <highlight><bold>204</bold></highlight> preferably includes a combination of random access memory (RAM), read only memory (ROM) and persistent memory such as that provided by a hard disk drive. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Network I/F <highlight><bold>208</bold></highlight> enables communication between computer system <highlight><bold>100</bold></highlight> and other network computing devices (not shown) via network <highlight><bold>110</bold></highlight>. Network I/F <highlight><bold>208</bold></highlight> may be embodied in one or more conventional communication devices. Examples of a conventional communication device include an Ethernet card, a token ring card, a modem or the like. Network I/F <highlight><bold>208</bold></highlight> may also enable the retrieval or transmission of instructions for execution by CPU <highlight><bold>202</bold></highlight> from or to a remote storage media or device via network <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> I/O I/F <highlight><bold>210</bold></highlight> enables communication between processing system <highlight><bold>102</bold></highlight> and the various I/O devices <highlight><bold>104</bold></highlight>, <highlight><bold>106</bold></highlight>. I/O I/F <highlight><bold>210</bold></highlight> may include, for example, a video card for interfacing with an external display such as output device <highlight><bold>106</bold></highlight>. Additionally, I/O I/F <highlight><bold>210</bold></highlight> may enable communication between processing system <highlight><bold>102</bold></highlight> and a removable media <highlight><bold>212</bold></highlight>. Although removable media <highlight><bold>212</bold></highlight> is illustrated as a conventional diskette other removable memory devices such as Zip&trade; drives, flash cards, CD-ROMs, static memory devices and the like may also be employed. Removable media <highlight><bold>212</bold></highlight> may be used to provide instructions for execution by CPU <highlight><bold>202</bold></highlight> or as a removable data storage device. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The computer instructions/applications stored in memory <highlight><bold>204</bold></highlight> and executed by CPU <highlight><bold>202</bold></highlight> (thus adapting the operation of computer system <highlight><bold>100</bold></highlight> as described herein) are illustrated in functional block form in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As will be appreciated by those of ordinary skill in the art, the delineation between aspects of the applications illustrated as functional blocks in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is somewhat arbitrary as the various operations attributed to a particular application as described herein may, in alternative embodiments, be subsumed by another application. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> As illustrated, for exemplary purposes only, memory <highlight><bold>202</bold></highlight> stores operating system (OS) <highlight><bold>302</bold></highlight>, communications suite <highlight><bold>304</bold></highlight>, development application <highlight><bold>306</bold></highlight>, application behavior event and data logger <highlight><bold>308</bold></highlight>, database <highlight><bold>310</bold></highlight> (storing data corresponding to the behavior of development application <highlight><bold>306</bold></highlight> and object model <highlight><bold>314</bold></highlight>) and two application analysis tools <highlight><bold>312</bold></highlight>A and <highlight><bold>312</bold></highlight>B. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> OS <highlight><bold>302</bold></highlight> is an operating system suitable for operation with a selected CPU <highlight><bold>202</bold></highlight> and the operations described herein. Multitasking, multithreaded OSes such as, for example, IBM AIX&trade;, Microsoft Windows NT&trade;, Linux or the like, are expected in many embodiments to be preferred. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Communication suite <highlight><bold>304</bold></highlight> provides, through, interaction with OS <highlight><bold>302</bold></highlight> and network I/F <highlight><bold>208</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>), suitable communication protocols to enable communication with other networked computing devices via network <highlight><bold>110</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Communication suite <highlight><bold>304</bold></highlight> may include one or more of such protocols such as TCP/IP, ethernet, token ring and the like. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Integrated development environment (IDE) <highlight><bold>306</bold></highlight> enables the development of an application for eventual deployment on a server. The application can include many different components including (but not limited to), for example, servlets, EJBs, JSPs, HTML files, applets, source code, object code and the like. An exemplary IDE is TM provide by the IBM&trade; product, VisualAge&trade; for Java&trade; which enables a developers to create many of the exemplary components identified above. Competing and similar products are available from other companies such as Borland Inc., Microsoft Corp. and the like. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> IDE <highlight><bold>306</bold></highlight> may also enable the creation of a project. A project may comprise one or more components. Additionally, IDE <highlight><bold>306</bold></highlight> may include debugging features, testing clients and many other tools needed by developers in the present day development environment. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> IDE <highlight><bold>306</bold></highlight> may also include a file versioning tool which could be adapted to perform the functions described herein. For example, the IBM VisualAge product includes a feature identified as External Version Control which provides file versioning features. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> However, in the exemplary embodiment, IDE <highlight><bold>306</bold></highlight> is separate from the server configuration versioning tool (SCVT) <highlight><bold>310</bold></highlight> which is described in greater detail below. As will be appreciated by those of ordinary skill in the art upon reading the entire description, separation IDE <highlight><bold>306</bold></highlight> and SCVT <highlight><bold>310</bold></highlight> enables a user of an embodiment of the present invention to use an IDE <highlight><bold>306</bold></highlight> of their choosing and combine the selected IDE <highlight><bold>306</bold></highlight> with an SCVT <highlight><bold>310</bold></highlight> also of the user&apos;s choosing. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> SCVT <highlight><bold>310</bold></highlight> provides a mechanism for associating one more server configuration files with a project, component, file or application or the like (hereinafter referred to collectively as an &ldquo;application&rdquo;) under development. It will be appreciated that the term &ldquo;server configuration file&rdquo; includes any format for server configuration data. Many servers are presently configured using one or more text files. However, a &ldquo;server configuration file&rdquo;, as used herein, is not limited to this structure but, rather, refers, to any data which is used to configure a server for operation with a particular application, project or the like. Additionally, data for configuring a single server may, in fact, reside in several files. However, in the present description and for ease of understanding, all data, whether stored in a single or multiple files, for configuring a single server is referred to herein as a &ldquo;server configuration file&rdquo;. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In addition to the foregoing functions, SCVT <highlight><bold>310</bold></highlight> provides for the versioning of each server configuration file associated with an application. The versioning of server configuration files, much like versioning of source code, provides an indicia (typically a timestamp or text) associated with a version of a selected server configuration file so that a user can place a particular version of server configuration file into context. For example, a first version of server configuration file may be associated with an indicia, such as the timestamp (e.g., May 1, 2001). A second version of the same server configuration file may be associated with a second timestamp (e.g., Jun. 1, 2001). Accordingly, a developer testing changes to an application which previously operated properly using the May 1, 2001 version of the server configuration file may choose to configure a server using that version rather than risk the possibility that the Jun. 1, 2001 version of the server configuration file would induce some operational problems in the recently modified version of the application. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Additionally, SCVT <highlight><bold>310</bold></highlight> provides server configuration files associated with different server environments to be associated with a particular application. For example, an application may be developed which is designed to operate with a plurality of web servers (e.g., Tomcat and WebSphere). Accordingly, different server configurations are likely required in this exemplary instance. SCVT <highlight><bold>310</bold></highlight> provides a developer to store versions of server configuration files which are specific to the server (or other environment parameter). Accordingly and as explained in greater detail below, a developer, through the advantages provided by SCVT <highlight><bold>310</bold></highlight>, can transfer an application with an associated configuration file to a recipient (e.g., a tester, a customer, another computer system, etc.)&mdash;the associated configuration file designed to ensure proper operation of the application on the server operated by the recipient. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In the exemplary embodiment described herein, SCVT <highlight><bold>310</bold></highlight> is embodied by conventional version control software adapted to perform the functions and operations described herein However, and as will be appreciated by those of ordinary skill in the art from the description contained herein, SCVT <highlight><bold>310</bold></highlight> could be embodied as a separate tool performing functions and operations described herein which do not form part of conventional version control software. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Application data <highlight><bold>308</bold></highlight> is data associated with the application under development. In many instances application data <highlight><bold>308</bold></highlight> will include source code, libraries and the like, known to those skilled in the art. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Server configuration file <highlight><bold>312</bold></highlight> comprises data (often in the form of one or more files) for configuring a server. As will be understood, a server configuration file <highlight><bold>312</bold></highlight> is often specific to the server, the environment in which the server is to operate (e.g., computer system related parameters) and the application which is to be processed by the server. Server configuration file <highlight><bold>312</bold></highlight> may be modified or created through use of, for example, a standard editor. Other tools (e.g., configuration wizards, etc.) for the editing or modification of server configuration file <highlight><bold>312</bold></highlight> may also be employed. As alluded to above, a change in an application may require modification of an associated server configuration file <highlight><bold>312</bold></highlight>. Accordingly, it is to be expected that a server configuration file <highlight><bold>312</bold></highlight> associated with a particular application which is undergoing development is likely to require modification as development progresses. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Version data repository <highlight><bold>314</bold></highlight> stores both application data <highlight><bold>308</bold></highlight> and server configuration data <highlight><bold>312</bold></highlight>. Additionally, version data repository <highlight><bold>314</bold></highlight> also stores metadata relating to application data <highlight><bold>308</bold></highlight> and server configuration data <highlight><bold>312</bold></highlight>. Repository <highlight><bold>314</bold></highlight> may be embodied, for example, in a conventional relational database or a proprietary data storage format. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The metadata may include (but is not limited to), for example, data describing a particular file or component (e.g., text data), version data (e.g., a version number or version text descriptor), timestamp data, indicator data indicating whether a piece of data (e.g., a file) has been checked out (and if so, by whom) and the like. In the exemplary embodiment, the metadata also includes association data which associates application data <highlight><bold>308</bold></highlight> with one or more server configuration files which form part of server configuration data <highlight><bold>312</bold></highlight>. This association data may be in the form of, for example, a relation or linking between a one or more server configuration files and corresponding application data. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The linkage or association between an application and a single instance of a server configuration file is, in the exemplary embodiment, maintained within the server configuration file itself. That is, part of the configuration of a server is the list of applications that are installed on that server, and that list can be used within the development environment to make the linkage clear to the user and to the server which is configured by the server configuration file. In the exemplary embodiment, the association between the different versions of an application and the different versions of a server configuration file is typically managed by SCVT <highlight><bold>310</bold></highlight>. For example, version 1.3 of the application may be associated with version 1.0 of a server configuration file, while version 2.0 of an application may be associated with version 2.7 of the server configuration file. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In an alternative embodiment, the linkage or association between an application and one or more server configuration files could be embedded within the application itself. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The operation of computer system <highlight><bold>100</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) and, more particularly, the operation and interaction of IDE <highlight><bold>306</bold></highlight>, SCVT <highlight><bold>310</bold></highlight>, application data <highlight><bold>308</bold></highlight> with server configuration data <highlight><bold>312</bold></highlight> is better understood with reference to operations <highlight><bold>400</bold></highlight>, performed by these various components of computer system <highlight><bold>100</bold></highlight>, which is illustrated in flowchart form in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Initially, in operations <highlight><bold>400</bold></highlight>, a user will provide to computer system <highlight><bold>100</bold></highlight>, and more particularly SCVT <highlight><bold>310</bold></highlight>, a server configuration file which has been newly created or recently modified (S<highlight><bold>402</bold></highlight>). The server configuration file may have been created using known tools (e.g., an editor or the like) or checked out or otherwise previously retrieved from application data repository <highlight><bold>314</bold></highlight>. SCVT <highlight><bold>310</bold></highlight> may be provided with server configuration file in different manners. For example, if SCVT <highlight><bold>310</bold></highlight> provides a command line interface, a server configuration file may be provided by file name (or other indicia) in conjunction with an executable representing SCVT <highlight><bold>310</bold></highlight>. Alternatively, if SCVT <highlight><bold>310</bold></highlight> provides a graphical user interface (which is common in many environments), SCVT <highlight><bold>310</bold></highlight> may be provided with a file name (or other indicia) through various inputs (e.g., keystrokes, mouse clicks, voice control, etc.). In a future alternative, SCVT <highlight><bold>310</bold></highlight> may be provided with the server configuration file by providing a suitable application programming interface. In this latter alternative, SCVT <highlight><bold>310</bold></highlight> may be called by another program (rather than by a user). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The received server configuration file, which forms server configuration data <highlight><bold>312</bold></highlight>, is stored in data repository <highlight><bold>314</bold></highlight>. Additionally, SCVT <highlight><bold>310</bold></highlight> receives additional data associated with the server configuration file received in S<highlight><bold>402</bold></highlight>. This additional configuration data received forms part of the metadata described above. This may include textual description data (e.g., &ldquo;Configuration File for Tomcat Server&rdquo;, &ldquo;Prepared by Tim Francis&rdquo;, etc.), timestamp data, version identifying data (e.g., &ldquo;WebSphere Configuration File, Version 1.6&rdquo;, etc.), or the like. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In addition to the foregoing metadata, SCVT <highlight><bold>310</bold></highlight> receives application association data (S<highlight><bold>404</bold></highlight>). Application association data associates a particular server configuration file (or a version thereof) with a particular application (or version thereof). As will be appreciated, a particular server configuration file (or version thereof) may be associated with one or more applications (or versions thereof and/or one or versions of an application. Similarly, a particular application (or version thereof) may be associated with one or more server configurations (or versions thereof). Additionally, neither an application (or version thereof) or server configuration file (or version thereof) need be associated with the other. That is, for example, a server configuration file could be stored in repository <highlight><bold>314</bold></highlight>. However, additional benefits are achieved by SCVT <highlight><bold>310</bold></highlight> when association data is received. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The association data, once received by SCVT <highlight><bold>310</bold></highlight>, is also stored in repository <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The examples described above suggest explicit association data being received by SCVT <highlight><bold>310</bold></highlight>. However, in an alternative embodiment, the association data may be implicit. For example, in an IDE, a developer may include a server configuration file as part of a project. In this instance, the association data received by SCVT <highlight><bold>310</bold></highlight> results from the storage and packaging of the entire project including the server configuration file. The association between the application which forms part of the project and a server configuration file, which also form part of the same project, results in this implicit association. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In a further operation, S<highlight><bold>406</bold></highlight>, SCVT <highlight><bold>310</bold></highlight> receives data to select one or more server configuration files (stored within repository <highlight><bold>314</bold></highlight>) and the particular versions thereof. This data is then used during the building or compiling of an application which is to be transferred. As a result of operation S<highlight><bold>406</bold></highlight> an application and one or more versions of server configuration files are bundled to form a single package. For example, an application may be associated with configuration files for two different servers (e.g., a WebSphere web server and a Tomcat web server). Each web server may be deployed on several different platforms (a platform being a combination of the underlying physical hardware and the operating system executing thereon). Accordingly, a package for an application may select the latest version of server configuration files for each web server for all supported platforms. In an exemplary situation of six platforms being supported for both web servers, twelve different configuration files may be packaged with an application so that each possible combination can be easily supported. The package thus formed can then be stored on a medium for transfer (e.g., a network accessible drive, CD-ROMs, DVD-ROMs, etc.) The package formed in S<highlight><bold>406</bold></highlight> can then be transferred to another party (e.g., a test team, a customer, another computer system, etc.)When a package is accessed (by a user, for example), a selection of one or more configuration files bundled therein may then be made. For example, a user having a specific platform (e.g., a Linux operating system on an IBM iSeries&trade; server) running IBM WebSphere web server, and attempting to install and execute an application which has been packaged (as described above) and transferred (by CD-ROM, Internet connection, etc.) to the user, may select one of the configuration files contained within the package. The selected configuration file will, having been designed to operate on the user specific platform and with the associated application contained within the package, in most instances operate as designed by the development team. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> From the foregoing, persons of ordinary skill in the art will appreciate that embodiments of the present invention enable a developer to associate a server configuration with an application or project. Additionally, embodiments of the invention may enable multiple versions of a server configuration (which in some embodiments are versioned separately from the associated application or project) to be stored. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In a further advantage, embodiments of the invention enable a developer to configure a server in accordance with versioned configuration data (often stored in one or more configuration files) which is known to have configured a server such that the server performs in a well understood manner. This advantageous feature enables a developer to more quickly identify the source of any problems which may have been introduced as a result of modifications made to the application being tested. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In a further advantage, an application can be transferred to another party (e.g., another developer, a test team, a customer, etc.) with associated server configuration data. As such, a developer can be reasonably assured of the configuration of server on which the application is to be executed or processed. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In a further advantage of the present invention, a developer, having been informed, by another party of operational problems of the application, can be assured that the other party&apos;s server is configured in a particular manner. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In a further advantage of the present invention, two parties (e.g., a developer and a tester, a developer and a customer, etc.) are more quickly able to ascertain the cause of operational problems due to their ability to more quickly and accurately reproduce the execution environment in which the application is operating. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Other advantages of embodiments of the present invention will be apparent to those of ordinary skill in the art. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> As will be appreciated by those skilled in the art, modifications to the above-described embodiment can be made without departing from the essence of the invention While one (or more) embodiment(s) of this invention has been illustrated in the accompanying drawings and described above, it will be evident to those skilled in the art that changes and modifications may be made therein without departing from the essence of this invention. All such modifications or variations are believed to be within the sphere and scope of the invention as defined by the claims appended hereto. Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for executing an application on a server, said method comprising: 
<claim-text>transferring to said server a package, said server for execution on a computer platform, said package comprising said application and server configuration data, said server configuration data comprising data to configure said server for said application; </claim-text>
<claim-text>configuring said server with said server configuration data; and </claim-text>
<claim-text>executing said server and said application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> 
<claim-text>wherein said server configuration data comprises one or more server configuration files; and </claim-text>
<claim-text>wherein the configuring step further comprises the steps of: 
<claim-text>selecting one of said one or more server configuration files; said selected one adapted to configure said server; and </claim-text>
<claim-text>configuring said server with said selected one of said one or more server configuration files. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of providing some of said one or more server configuration files with versions of one server configuration file. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> further comprising the step of providing each of said versions of said one server configuration file with data associating said each of said versions with a version of said application. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> further comprising the step of providing said application with data associating said application with at least one of said versions of said one or more server configuration files. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of providing at least one of said one or more server configuration files with a first server configuration file adapted to configure a first server and further comprising the step of providing another of said one or more server configuration files with a second server configuration file adapted to configure a second server. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further comprising the step of providing at least one of said one or more server configuration files with a first server configuration file adapted to configure a first server for execution on a first computer system platform and further comprising the step of providing another of said one or more server configuration files with a second server configuration file adapted to configure said first server for execution on a second computer system platform. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method of preparing an application said method comprising the steps of: 
<claim-text>packaging files composing said application with server configuration data, and providing said server configuration data with one or more server configuration files, each of said one or more server configuration files adapted to configure a server to execute said application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said configuring step further comprising the steps of providing: 
<claim-text>selecting one of said one or more server configuration files; said selected one adapted to configure said server; and </claim-text>
<claim-text>configuring said server with said selected one of said one or more server configuration files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising the step of providing some of said one or more server configuration files with versions of one server configuration file. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> further comprising the step of providing each of said versions of said one server configuration file with data associating said each of said versions with a version of said application. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> further comprising the step of providing said application with data associating said application with at least one of said versions of said one or more server configuration files. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising the step of providing at least one of said one or more server configuration files with a first server configuration file adapted to configure a first server and further comprising the step of providing another of said one or more server configuration files with a second server configuration file adapted to configure a second server. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> further comprising the step of providing at least one of said one or more server configuration files with a first server configuration file adapted to configure a first server for execution on a first computer system platform and further comprising the step of providing another of said one or more server configuration files with a second server configuration file adapted to configure said first server for execution on a second computer system platform. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A versioning tool for preparing an application, said tool comprises: 
<claim-text>packaging files composing said application with server configuration data, wherein said server configuration data is provided with one or more server configuration files, each of said one or more server configuration files adapted to configure a server to execute said application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method of versioning server configuration files, said method comprising the step of: 
<claim-text>within a package comprising an application associating a version of a server configuration file with said application, said version of a server configuration file adapted to configure a server to process said application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising the step of providing said associating with embedding association data within said version of said server configuration file linking said version of said server configuration file with said application. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> further comprising the step of providing said associating with embedding association data with said application linking said application with at least one of said plurality of versions of said server configuration file. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising the step of providing said package further with said version of said server configuration file. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A computer readable medium storing data and instructions, said data and instructions adapting a computer system to: 
<claim-text>transfer to said server a package, said server for execution on a computer platform, said package comprising said application and server configuration data, said server configuration data comprising data to configure said server for said application; </claim-text>
<claim-text>configure said server with said server configuration data; and </claim-text>
<claim-text>execute said server and said application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> wherein said server configuration data comprises one or more server configuration files; and wherein said adaptation to configure comprises adapting said computer system to: 
<claim-text>select one of said one or more server configuration files; said selected one adapted to configure said server; and </claim-text>
<claim-text>configure said server with said selected one of said one or more server configuration files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein some of said one or more server configuration files comprise versions of one server configuration file. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein each of said versions of said one server configuration file comprises data associating said each of said versions with a version of said application. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference> wherein said application comprises data associating said application with at least one of said versions of said one or more server configuration files. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer readable medium of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein at least one of said one or more server configuration files comprises a first server configuration file adapted to configure a first server and wherein another of said one or more server configuration files comprises a second server configuration file adapted to configure a second server.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005093A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005093A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005093A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005093A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005093A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
