<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005181A1-20030102-D00000.TIF SYSTEM "US20030005181A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00001.TIF SYSTEM "US20030005181A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00002.TIF SYSTEM "US20030005181A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00003.TIF SYSTEM "US20030005181A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00004.TIF SYSTEM "US20030005181A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00005.TIF SYSTEM "US20030005181A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00006.TIF SYSTEM "US20030005181A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00007.TIF SYSTEM "US20030005181A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00008.TIF SYSTEM "US20030005181A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00009.TIF SYSTEM "US20030005181A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005181A1-20030102-D00010.TIF SYSTEM "US20030005181A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005181</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10082807</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020222</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/46</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F009/44</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06F015/18</ipc>
</classification-ipc-secondary>
<classification-ipc-secondary>
<ipc>G06N003/08</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>330000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>315000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Annotation based development platform for asynchronous web services</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60302981</doc-number>
<document-date>20010702</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<family-name>Bau</family-name>
<name-suffix>III</name-suffix>
</name>
<residence>
<residence-us>
<city>Gladwyne</city>
<state>PA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Adam</given-name>
<family-name>Bosworth</family-name>
</name>
<residence>
<residence-us>
<city>Mercer Island</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Gary</given-name>
<middle-name>S.</middle-name>
<family-name>Burd</family-name>
</name>
<residence>
<residence-us>
<city>Kirkland</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Roderick</given-name>
<middle-name>A.</middle-name>
<family-name>Chavez</family-name>
</name>
<residence>
<residence-us>
<city>Kirkland</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Kyle</given-name>
<middle-name>W.</middle-name>
<family-name>Marvin</family-name>
</name>
<residence>
<residence-us>
<city>Issaquah</city>
<state>WA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>SCHWABE, WILLIAMSON &amp; WYATT, P.C.</name-1>
<name-2></name-2>
<address>
<address-1>10260 SW GREENBURG ROAD</address-1>
<address-2>SUITE 820</address-2>
<city>PORTLAND</city>
<state>OR</state>
<postalcode>97223</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An annotation based development platform for asynchronous web services is described. In one embodiment, the developer expresses logic offered by the web service using a standard programming language augmented with declarative annotations specifying preferences for exposing that logic as an asynchronous web service. At compile time, an enhanced compiler analyzes the annotated source file and automatically generates the mechanisms required to expose its functionality as an asynchronous web service. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This patent application claims priority to Provisional Patent Application No. 60/302,981 filed on Jul. 02, 2001, which is hereby fully incorporated by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention generally relates to the field of Web services. More specifically, the present invention relates to integrated development and deployment of asynchronous Web services. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Background Information </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> There is a rapidly expanding industry emerging around web services, a term loosely defined as the ability to share software as a service using network protocols. Industry leaders are busy developing an infrastructure to enable web services, including mechanisms for finding web services, understanding what they offer and interacting with them via extensible Markup Language (XML) messages. This web services infrastructure aims to enable a new breed of distributed software application composed of software and information services shared across the Internet. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> As the web service infrastructure evolves, it is becoming increasingly complicated, requiring more time, skill, knowledge and ultimately money to create web services. Consequently, the generation and deployment of web services is increasingly tedious and unnecessarily complicated for the average developer. Currently, in addition to developing the software logic offered via the web service, developers are also required to address a number of tedious and complex issues involving web service generation and deployment. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> For example, in order to generate and deploy the most basic of web services, developers are currently required to implement one or more mechanisms for: Sending and receiving data via internet protocols; parsing and generating message bodies and headers packaged using protocols such as the Simple Object Access Protocol (SOAP); controlling access to services in a secure way; mapping data between XML messages and internal data structures within the web service logic; transacting operations so they are reliable and predictable; decoupling temporal dependencies so distributed applications can proceed reliably when external services are down or unavailable; decoupling implementation dependencies so distributed applications can proceed predictably when external services change their underlying implementations; developing service descriptions e.g. using the Web Services Description Language (WSDL) and using external web services described by e.g. WSDL; developing proxy objects that make it easy for client software written in a variety of languages to interact with the service and for the service to interact with other external services; and so forth. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Thus, it can be readily seen that in addition to developing the web service logic, current day developers are also required to spend time and effort on implementation and deployment aspects unrelated to the web service logic. This is particularly true for non-trivial web services, which manage many simultaneous stateful and asynchronous conversations in a secure, reliable, scalable and rapidly evolvable way. Such stateful and asynchronous web services further require mechanisms for tracking and correlating the requests associated with each stateful conversation (identified as a series of related service requests), for managing the data associated with many simultaneous, long running conversations, and for coordinating asynchronous conversations that do not return immediate results, just to name a few.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an overview of one embodiment of the present invention within the context of an example network of web service providers and consumers; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates example source code augmented with meta-data annotations in accordance with one embodiment of the invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> FIGS. <highlight><bold>3</bold></highlight>A-C illustrate one implementation of a web service method and associated wire protocol in accordance with one embodiment of the invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a conversation ID header and a Callback location header within a SOAP message; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates one embodiment of enhanced web services of the present invention using a graphical programmatic flow diagram; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an example compiler operational flow in accordance with one embodiment of the invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a conceptual web service definition resulting from the compilation of one or more annotated source code files in accordance with one embodiment of the invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates one embodiment of a runtime operational flow of the enhanced web service definition of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates one embodiment of the message dispatch process of the enhanced web service definition of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; and </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an example computer system suitable for hosting web services development platform of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will also be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Parts of the description will be presented in terms of operations performed by a processor based device, using terms such as receiving, analyzing, determining, generating, and the like, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, the quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through mechanical and electrical components of the processor based device; and the term processor include microprocessors, micro-controllers, digital signal processors, and the like, that are standalone, adjunct or embedded. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation. Further, the description repeatedly uses the phrase &ldquo;in one embodiment&rdquo;, which ordinarily does not refer to the same embodiment, although it may. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Overview </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The present invention provides a flexible and extensible platform that simplifies the task of developing stateful and asynchronous web services by allowing web service developers to focus on developing the logic of the web service rather than implementation and deployment particulars. In one embodiment of the present invention, the developer expresses the logic offered by the web service using a standard programming language augmented with declarative annotations specifying preferences for exposing that logic as a web service. At compile time, an enhanced compiler analyzes the annotated source file and automatically generates the mechanisms required to expose its functionality as a web service. Because the annotations are declarative, they may be easily visualized, created and modified using a graphical user interface, further simplifying the developer&apos;s task. Thus, the present invention decreases the time, knowledge, skill and ultimately cost required to develop stateful and asynchronous web services. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an overview of one embodiment of the present invention within the context of an example network of web service providers and consumers. In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, web server <highlight><bold>102</bold></highlight>, developer client <highlight><bold>110</bold></highlight>, enterprise servers <highlight><bold>115</bold></highlight> and <highlight><bold>120</bold></highlight>, user client <highlight><bold>112</bold></highlight> and eCommerce web server <highlight><bold>125</bold></highlight> are communicatively coupled together through networking fabric <highlight><bold>100</bold></highlight> as illustrated. Networking fabric <highlight><bold>100</bold></highlight> represents one or more interconnected data networks, such as the Internet or World Wide Web, that are equipped to employ one or more well-known communication protocols such as the hypertext transfer protocol (HTTP). </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Web server <highlight><bold>102</bold></highlight> represents one or more computing devices equipped with enhanced web services <highlight><bold>104</bold></highlight> of the present invention to provide conversational and asynchronous web services to remote clients, such as user client <highlight><bold>112</bold></highlight> as well as enterprise servers <highlight><bold>115</bold></highlight> and <highlight><bold>130</bold></highlight>, which are communicatively coupled to networking fabric <highlight><bold>100</bold></highlight>. Enhanced web services <highlight><bold>104</bold></highlight> includes annotated source code <highlight><bold>107</bold></highlight>, enhanced compiler <highlight><bold>106</bold></highlight>, and various deployed service components <highlight><bold>108</bold></highlight>. As will be discussed in further detail below, when annotated source code <highlight><bold>102</bold></highlight> is compiled by enhanced compiler <highlight><bold>106</bold></highlight>, the compiler generates one or more object files, software components and deployment descriptors to facilitate the automated deployment of web service components <highlight><bold>108</bold></highlight>. In the illustrated embodiment, developer client <highlight><bold>110</bold></highlight> represents a computing device equipped with integrated development environment (IDE) <highlight><bold>111</bold></highlight> to facilitate graphical interface-based design and development of enhanced web services <highlight><bold>104</bold></highlight> by a developer. In place of, or in addition to being communicatively coupled to web server <highlight><bold>102</bold></highlight> through networking fabric <highlight><bold>100</bold></highlight>, developer client <highlight><bold>110</bold></highlight> can be coupled directly (e.g. via a local area network) to web server <highlight><bold>102</bold></highlight> as shown. Furthermore, rather than being installed on an external client device such as developer client <highlight><bold>110</bold></highlight>, IDE <highlight><bold>111</bold></highlight> may instead be collocated with enhanced web services <highlight><bold>104</bold></highlight> on web server <highlight><bold>102</bold></highlight> without departing from the spirit and scope of the invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Enterprise servers <highlight><bold>115</bold></highlight> and <highlight><bold>120</bold></highlight> represent publicly accessible servers belonging to one or more organizations that have published web service components <highlight><bold>118</bold></highlight> and <highlight><bold>128</bold></highlight> with associated web service description files <highlight><bold>117</bold></highlight> and <highlight><bold>127</bold></highlight>, respectively. In the illustrated embodiment, web service description files <highlight><bold>117</bold></highlight> and <highlight><bold>127</bold></highlight> represent XML-based web service description language (WSDL) files that advertise the capabilities of web service components <highlight><bold>118</bold></highlight> and <highlight><bold>128</bold></highlight> to devices coupled to networking fabric <highlight><bold>100</bold></highlight> including user client <highlight><bold>112</bold></highlight> and web server <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> User client <highlight><bold>112</bold></highlight> represents a general-purpose computer system such as, but not limited to a desktop computer, laptop computer, palmtop computer, network appliance, a personal digital assistant (PDA), and so forth, equipped with web browser <highlight><bold>114</bold></highlight>. In the illustrated embodiment, user client <highlight><bold>112</bold></highlight> accesses (e.g. via networking fabric <highlight><bold>100</bold></highlight>) web page(s) <highlight><bold>130</bold></highlight> hosted by eCommerce server <highlight><bold>125</bold></highlight>. Web pages <highlight><bold>130</bold></highlight> may include content <highlight><bold>131</bold></highlight>, such as merchandise descriptions, reviews and pricing information, as well as one or more web functions <highlight><bold>132</bold></highlight>. When executed, web functions <highlight><bold>132</bold></highlight> may send requests to web server <highlight><bold>102</bold></highlight> causing one or more service components <highlight><bold>108</bold></highlight> to be executed, which in turn may send one or more requests to enterprise servers <highlight><bold>115</bold></highlight> and <highlight><bold>120</bold></highlight> causing one or more remote components <highlight><bold>118</bold></highlight> and/or <highlight><bold>128</bold></highlight> to further be executed. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> For example, assume web page(s) <highlight><bold>130</bold></highlight> displays merchandise that is offered for sale by a given online merchant via eCommerce web server <highlight><bold>125</bold></highlight>. Web function(s) <highlight><bold>132</bold></highlight> may request various functions of a shopping cart service provided by web server <highlight><bold>102</bold></highlight> including an &ldquo;add an item to cart&rdquo; function, a &ldquo;remove an item from cart&rdquo; function, and a &ldquo;checkout&rdquo; function. By selecting a button graphically displayed on web page(s) <highlight><bold>130</bold></highlight> for example, a user may cause one or more requests for shopping cart functions to be generated. This in turn may cause one or more of service components <highlight><bold>108</bold></highlight> to be remotely executed on web server <highlight><bold>102</bold></highlight> via e.g. the well-known Simple Object Access Protocol (SOAP). In the illustrated example, the initiation of a checkout function by user client <highlight><bold>112</bold></highlight> may cause web server <highlight><bold>102</bold></highlight> to communicate with enterprise servers <highlight><bold>115</bold></highlight> and/or <highlight><bold>120</bold></highlight> to obtain one or more credit authorizations for use by the online merchant in completing the user&apos;s purchase transaction. In one embodiment, web server <highlight><bold>102</bold></highlight> communicates with enterprise server <highlight><bold>115</bold></highlight> and/or <highlight><bold>120</bold></highlight> based upon their public interfaces advertised by WSDL files <highlight><bold>117</bold></highlight> and/or <highlight><bold>127</bold></highlight>. Once enterprise servers <highlight><bold>115</bold></highlight> and/or <highlight><bold>120</bold></highlight> provide web server <highlight><bold>102</bold></highlight> with the solicited credit information, server components <highlight><bold>108</bold></highlight> can perform a variety of actions depending upon the particular web logic deployed. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the above example, enhanced web services <highlight><bold>104</bold></highlight> processed a single shopping cart transaction pertaining to a single user client. More often, however, web services are required to process numerous simultaneous transactions while maintaining state associated with each transaction. In the shopping cart web service for example, each user client will use a separate shopping basket, each containing a separate list of items. Each user client will request a new shopping cart, add items to the shopping cart, remove items from the shopping cart, and finally check out or cancel the operation. Thus, the web service needs to keep track of all the shopping lists and ensure that each incoming client request (e.g. new, add, remove &amp; check-out) is applied to the correct list. Furthermore, each credit authorization request needs to be correlated with the correct user so as to avoid mistaken authorizations. Therefore, it should be apparent that as the number of users and associated transactions increase, the need to efficiently manage conversations (i.e. correlate multiple requests and responses) and the associated state becomes increasingly important. Accordingly, the present invention automatically generates code to manage state associated with multiple, simultaneous conversations. Similarly, because external web services (i.e. such as those offered by enterprise servers <highlight><bold>115</bold></highlight> and <highlight><bold>120</bold></highlight>) are not always designed to respond to the initiating web service immediately, the present invention further provides the automatic generation of code for managing one or more asynchronous transactions where for example, responses may be temporally separated from the initiating request and arrive on a separate connection. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> compiles programming language source code that has been augmented with declarative annotations specifying preferences for exposing programming logic as a web service. At compile time, enhanced compiler <highlight><bold>106</bold></highlight> analyzes the annotated source file and automatically generates the mechanisms necessary to expose its functionality as a stateful and/or asynchronous web service based at least in part upon the annotations. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> At run time, enhanced web services <highlight><bold>104</bold></highlight> of the present invention receives messages from remote clients requesting that one or more web service methods be invoked. Enhanced web services <highlight><bold>104</bold></highlight> parses each message to identify the method being called and dispatches the request to one or more of service components <highlight><bold>108</bold></highlight> depending upon whether the requested method comprises a stateless or stateful request for example. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Web Service Design </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In one embodiment of the present invention, IDE <highlight><bold>111</bold></highlight> facilitates graphical interface-based web service design and development. Using IDE <highlight><bold>111</bold></highlight> for example, a developer is able to graphically associate remote clients, external services, web methods, and so forth, with the web service logic being designed. Additionally, using IDE <highlight><bold>111</bold></highlight> a developer is able to identify which methods (if any) should be buffered, which methods should be asynchronous, which methods should be stateful, and which methods are to cause a non-isomorphic mapping between incoming message elements and native language objects for example. Furthermore, once a method has been added to the web service (e.g. via graphical manipulation by the developer), IDE <highlight><bold>111</bold></highlight> provides the developer with the ability to further define and/or modify the method by specifying one or more parameters and/or attributes. For example, if a developer drags a method indicator to graphically connect the current web service to the client, a dialog may be displayed to enable the developer to declare a method name, member variable names, variable types, expected return types and so forth. Similarly, if a developer graphically associates an external service with the web service under development, the developer may be provided the opportunity to import a description file for the web service, such as WSDL file <highlight><bold>117</bold></highlight> or <highlight><bold>127</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In one embodiment of the invention, IDE <highlight><bold>111</bold></highlight> automatically annotates the web service source code with declarative meta-data based upon graphical and/or textual input provided by the developer through one or more interfaces of IDE <highlight><bold>111</bold></highlight>. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> utilizes the meta-data annotations during compilation of the source code to facilitate generation of stateful and asynchronous web services. For example, if a developer graphically identifies a method as being buffered (e.g. by dragging an icon representing a buffer onto or near the associated graphical representation of a method), IDE <highlight><bold>111</bold></highlight> annotates the associated method within the source code with meta-data to indicate to enhanced compiler <highlight><bold>106</bold></highlight> that the method is to be buffered. During compilation, enhanced compiler <highlight><bold>106</bold></highlight> recognizes the method as being buffered based at least in part upon the meta-data annotations, builds one or more class files (and potentially additional support files) and deploys them to server <highlight><bold>102</bold></highlight> to buffer incoming requests for that method accordingly. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In one embodiment of the invention, a developer using IDE <highlight><bold>111</bold></highlight> is able to toggle between various screen views including a graphical design view, and a source view. In accordance with one embodiment of the invention, using the source view a developer can manually enter meta-data annotations directly within the source code to identify those portions of the source code that are to be exposed as web services. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> As the developer interacts with IDE <highlight><bold>111</bold></highlight> to specify a web service, IDE <highlight><bold>111</bold></highlight> contemporaneously creates directories on web server <highlight><bold>102</bold></highlight>, into which various files, including the web service source code file and imported web service description files, are stored. In one embodiment, IDE <highlight><bold>111</bold></highlight> attaches a &ldquo;*.jws&rdquo; extension to the web service source code filename, which is then stored in a publicly accessible project directory on web server <highlight><bold>102</bold></highlight>. In one embodiment, web server <highlight><bold>102</bold></highlight> is configured to redirect client requests for this file to a servlet for processing instead of returning the contents of the file to the client. IDE <highlight><bold>111</bold></highlight> may communicate with web server <highlight><bold>102</bold></highlight> to create such files and directories via networking fabric <highlight><bold>100</bold></highlight> using one or more network protocols such as the file transfer protocol (FTP). </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Meta-Data Annotations </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> As was previously mentioned, in one embodiment of the invention source code files are augmented by adding (whether automatically by IDE <highlight><bold>111</bold></highlight> or manually by the developer) meta-data annotations to the source code files to describe which portions of the source files are to be exposed as web services and to control implementation details, such as wire protocol preferences. In one embodiment, meta-data annotations are placed within a comment field immediately preceding the statement or declaration the annotation will operate on. In one embodiment of the invention, meta-data annotations include one or more symbols and/or keywords defined by an extended syntax known to the compiler. In the illustrated embodiment, a keyword preceded by a &lsquo;&commat;&rsquo; symbol indicates to enhanced compiler <highlight><bold>106</bold></highlight>, which is equipped to recognize such a symbol/keyword combination or derivation thereof based upon the extended syntax, that the associated source code is to be exposed as part of the web service. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In one embodiment of the invention, compiler <highlight><bold>106</bold></highlight> has been enhanced to recognize numerous such meta-data annotations. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> recognizes meta-data annotations that indicate whether an associated method is stateful, and if so, whether the method applies to the start of a conversation (i.e. a &ldquo;start&rdquo; method) between a specific client and web server <highlight><bold>102</bold></highlight>, a continuation of a conversation (i.e. a &ldquo;continue&rdquo; method), or the completion of a conversation (i.e. a &ldquo;finish&rdquo; method). In one embodiment, stateful annotations cause enhanced compiler <highlight><bold>106</bold></highlight> to generate one or more persistent components to maintain conversational state relating to the associated method. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> automatically generates one or more Enterprise JavaBeans&trade; (such as an entity bean) as well as associated deployment descriptors to store and manage such conversational state. In one embodiment, each time a start method is invoked at run-time, a new instance of a conversation is created, and a unique identifier is associated with that conversational instance by a persistent component to facilitate management of multiple simultaneous conversations. In one embodiment, a client requesting a conversational start method generates a unique identifier that is used for each subsequent transaction between that client and the web service until a finish method is called. In one embodiment, the identifier is passed between the client and web service by way of a SOAP based message header. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In addition to conversational annotations, in one embodiment enhanced compiler <highlight><bold>106</bold></highlight> also recognizes meta-data annotations indicating whether an associated method should be buffered to reliably handle a large number of simultaneous requests at peak usage times. In one embodiment, compilation of source code containing buffered annotations causes enhanced compiler <highlight><bold>106</bold></highlight> to instantiate one or more queues to temporarily store one or more associated requests such that they may be processed in order of arrival when server <highlight><bold>102</bold></highlight> has resources free to process them. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> utilizes one or more Enterprise JavaBeans&trade; (such as a message driven bean) to dispatch queued requests. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates example source code augmented with meta-data annotations in accordance with one embodiment of the invention. As shown, the example source code of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> represents five methods (<highlight><bold>206</bold></highlight>-<highlight><bold>210</bold></highlight>) preceded by associated metadata annotations (<highlight><bold>201</bold></highlight>-<highlight><bold>205</bold></highlight>) respectively. Methods <highlight><bold>206</bold></highlight>-<highlight><bold>209</bold></highlight> represent conversational methods as identified by the presence of the &commat;CONVERSATION annotation in <highlight><bold>201</bold></highlight>-<highlight><bold>204</bold></highlight> respectively, whereas method <highlight><bold>210</bold></highlight> represents a stateless method because it does not have the &commat;CONVERSATION annotation. Method <highlight><bold>209</bold></highlight> is a buffered method as indicated by the use of &ldquo;&commat;BUFFER&rdquo; within annotations <highlight><bold>204</bold></highlight>. In one embodiment, the &ldquo;&commat;OPERATION&rdquo; annotation causes enhanced compiler <highlight><bold>106</bold></highlight> to expose (i.e. make publicly accessible) the functionality of the method immediately following the annotation over the network using protocols such as HTTP and SOAP. Similarly, the &ldquo;&commat;CONVERSATION START&rdquo;, &ldquo;&commat;CONVERSATION CONTINUE&rdquo;, and &ldquo;&commat;CONVERSATION FINISH&rdquo; meta-data annotations indicate to enhanced compiler <highlight><bold>106</bold></highlight> whether to start a new stateful conversation, continue an existing conversation, or end an existing conversation, respectively. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Although in the illustrated embodiment, each conversational annotation is preceded by an &commat;OPERATION annotation, other embodiments may not require such a construct. For example, the &commat;OPERATION annotation may be inferred from the &commat;CONVERSATION annotation or other characteristics of the source code (e.g., modifiers such as public, private and static). Moreover, the various meta-data annotations described herein represent a subset of meta-data annotations that enhanced compiler <highlight><bold>106</bold></highlight> is equipped to recognize. Accordingly, the present invention should not be read as being limited to only those meta-data annotations described. Furthermore, it should be noted that any convenient meta-data annotation syntax could be utilized so long as the compiler is equipped to recognize such an extended syntax. In addition, it should be noted that the meta-data need not be communicated to the compiler using source file annotations, but could instead be communicated using e.g. a separate file. For example, the enhanced compiler could be programmed to read meta-data from a specially formatted XML file with the same name as the source file, but with a different file extension without departing from the spirit of the invention. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Declaring Asynchronous Responses </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> It is not always desirable or possible for web services to return a response to a particular request immediately. Some web services, called asynchronous web services, are designed to return one or more responses temporally separate from the associated original requests. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In one embodiment of the invention, developers may declare asynchronous responses to clients inside an inner interface called Callback. For example, </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> public static interface Callback &lcub; </paragraph>
<paragraph id="P-0048" lvl="3"><number>&lsqb;0048&rsqb;</number> /* &commat;Operation </paragraph>
<paragraph id="P-0049" lvl="3"><number>&lsqb;0049&rsqb;</number> * &commat;Conversation Finish */ </paragraph>
<paragraph id="P-0050" lvl="3"><number>&lsqb;0050&rsqb;</number> void returnResult(String s); </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> &rcub;</paragraph>
<paragraph id="P-0052" lvl="7"><number>&lsqb;0052&rsqb;</number> Developers can initiate asynchronous responses using a member variable declared of type Callback as follows: </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> Callback client; </paragraph>
<paragraph id="P-0054" lvl="7"><number>&lsqb;0054&rsqb;</number> When enhanced compiler <highlight><bold>106</bold></highlight> encounters the Callback interface and associated member variable declaration, it automatically generates code to create a client proxy object that implements the declared Callback interface for returning asynchronous responses and assigns it to the declared member variable. For example, the web service developer could generate the asynchronous response declared above using the following line of code: </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> client.returnResult(&ldquo;It worked&excl;&rdquo;); </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The client proxy object, including the callback address and a conversation identifier, is stored as part of the conversational state of each web service instance to associate each callback with the appropriate client instance. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Wire Protocols </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The annotated source code can further define bindings that specify how the client interface is bound to physical wire formats and protocols. In one embodiment, each service interface can have multiple service bindings for different protocols. In one embodiment, supported service bindings include (but are not limited to) SOAP over HTTP, SOAP over SMTP, generic HTTP Post of XML, transport of XML over other protocols such as FTP and mail, transport of XML over Java Messaging Service (JMS) or Microsoft Message Queuing Services (MSMQ), connection to proprietary protocols and so forth. In one embodiment, information about service interfaces and protocol bindings can be exported via WSDL files. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In one embodiment, the method invoked by web server <highlight><bold>102</bold></highlight> can be inferred from the data sent over the wire protocol and other meta-data as is illustrated by FIGS. <highlight><bold>3</bold></highlight>A-C. For example, in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, the signature of the &lsquo;greeting&rsquo; method has two parameters, labeled firstname and lastname. Incoming SOAP messages containing an appropriately qualified &lt;greeting&gt; element in the message body and having child elements &lt;firstname&gt; and &lt;lastname&gt; as shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> should cause this method to be invoked at run time. Enhanced Web Services <highlight><bold>104</bold></highlight> will parse the request illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, find the destination object based on the URL /app/mypackage/CreditReport.jws, create String objects based on the &lt;firstname&gt; and &lt;lastname&gt; elements, and pass them as parameters to the &ldquo;greeting&rdquo; method based on the &lt;greeting&gt; element. Similarly, Enhanced Web Services <highlight><bold>104</bold></highlight> will use the return value of the greeting method to generate an HTTP SOAP response such as that illustrated by <cross-reference target="DRAWINGS">FIG. 3C</cross-reference>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> External Services </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> As was previously mentioned, in one embodiment, the annotated meta-data of the present invention facilitates access to external services (such as service components <highlight><bold>118</bold></highlight> and <highlight><bold>128</bold></highlight>) by enhanced web services <highlight><bold>104</bold></highlight>. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> detects one or more annotated member variable declarations representing external services, finds the associated service definition files, automatically generates and assigns proxy objects designed for interacting with the external services, and automatically generates and associates code to handle asynchronous responses from those services. In one embodiment, enhanced compiler <highlight><bold>106</bold></highlight> scans a provided classpath for one or more service definition files (e.g., WSDL files) matching the classnames of the annotated member variables and automatically generates proxy objects based on the service description. This enables the web service developer to interact with the external web service as if it was a local Java object. For example, the declaration </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> /* &commat;Service */ </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> public Bank mybank; </paragraph>
<paragraph id="P-0064" lvl="7"><number>&lsqb;0064&rsqb;</number> would allow the developer to use the bank service like this: </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> float balance&equals;mybank.getBalance( ); </paragraph>
<paragraph id="P-0066" lvl="7"><number>&lsqb;0066&rsqb;</number> In this case, the mybank proxy object generated by enhanced compiler <highlight><bold>106</bold></highlight> would send a request to the remote Bank service using the address, protocol and format information in the Bank.wsdl file found on the classpath. At run time, the code generated by enhanced compiler <highlight><bold>106</bold></highlight> will automatically instantiate one proxy object for each of the &ldquo;&commat;Service&rdquo; annotations found within the source code as shown above. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Stateful External Services </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The service description file associated with an external service may indicate it has stateful conversation methods. In this case, each proxy object generated for interacting with those services will include code to generate and store a unique identifier for the associated conversational instance of the external service. The proxy object will use this unique identifer when generating the conversational message headers stipulated by the external service (see &ldquo;Conversational Message Headers&rdquo; below). </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Each proxy object, including a unique identifier if present, is stored as part of the state of the service in development. This effectively associates each instance of the service in development with the appropriate instances of external services. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Asynchronous External Services </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> External services do not always return a response immediately. Accordingly, enhanced compiler <highlight><bold>106</bold></highlight> automatically generates software for receiving asynchronous responses, associating the responses with the appropriate conversational state, and processing the responses with user defined code. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In accordance with the teachings of the present invention, an asynchronous web service declares its asynchronous responses as &ldquo;out methods&rdquo; in it&apos;s associated service description (e.g., WSDL) file. Out methods can be viewed as remote callbacks, i.e., remote functions the asynchronous web service invokes to return the result associated with an earlier request back to the caller. Software generated by the enhanced compiler of the present invention will pass these asynchronous responses to specially named member functions as may be defined by the developer. In one embodiment, these member function names are formed by appending the name of the asynchronous out method to the name of its local proxy object. For example, to handle a creditCheckResponse( ) out method of the Bank service defined above, the developer would generate a function of the following form: </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> public void mybank_creditCheckResponse(String result) &lcub;. . . &rcub;</paragraph>
<paragraph id="P-0074" lvl="7"><number>&lsqb;0074&rsqb;</number> The external proxy object generated by enhanced compiler <highlight><bold>106</bold></highlight> will add a reply-address to the associated request and listen at that address for the resulting creditCheckResponse( ) message from the mybank service. In one embodiment, if the asynchronous request is part of a stateful conversation, the proxy object generated by the enhanced compiler will generate and use the appropriate unique identifier to correlate the asynchronous response with the correct conversation state prior to invoking mybank _creditReportResponse( ). </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Conversational Message Headers </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> In one embodiment, the conversational aspect of the present invention is facilitated through the use of message headers that help maintain conversational state throughout the lifetime of the conversation. In one embodiment of the invention, one or more of a conversation ID header, a default callback location header, and an echoed conversation ID are utilized to maintain conversational state. For example, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a conversation ID header and a callback location header within a SOAP message from the client to the server. The echoed conversation ID is utilized in responses from the server to the client. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In one embodiment, the conversation ID represents a unique string that is generated by the originator of the first message of the conversation. The conversation ID may include any structure so long as it is globally unique. In one embodiment, the client generates a globally unique identifier (GUID), which is then encapsulated in a SOAP header, however, Uniform Resource Locators (URLs), timestamps, and other unique objects can be used to generate a unique identifier in lieu of the GUID. In one embodiment, the client embeds its own instance identifier as part of the conversation ID so asynchronous callbacks from the server that include the conversation ID can be used to route the callback to the appropriate client instance. In addition, if the first message of the conversation returns a synchronous response, the server can generate the GUID and return it to the client as part of the response. When &ldquo;continue&rdquo; or &ldquo;finish&rdquo; methods are sent as part of a conversation (either from the client to the server or from the server to the client), the same conversation ID that was established in the start message is echoed verbatim. In one embodiment, the callback location represents an arbitrary URL indicating where the client involved in the conversation is listening for callbacks from the web service. In one embodiment, the callback location header can appear in association with any start, continue or finish method. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Compiling Annotated Source Code </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a graphical programmatic flow diagram of enhanced web services <highlight><bold>104</bold></highlight>, in accordance with one embodiment of the invention. In the illustrated embodiment, one or more annotated source code files <highlight><bold>502</bold></highlight> are provided to enhanced compiler <highlight><bold>506</bold></highlight> to be compiled into one or more object code files <highlight><bold>509</bold></highlight>, defining one or more executable service components accessible by remotely connected clients. In one embodiment, annotated source code files <highlight><bold>502</bold></highlight> represent one or more Java-based files that have been augmented with meta-data annotations in accordance with one embodiment of the invention to facilitate simplified web service development and deployment. Although in the illustrated embodiments, annotated source code files <highlight><bold>502</bold></highlight> are described as being Java based, they can nonetheless represent a variety of programming languages known in the art, such as C&plus;&plus; and ECMAScript. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Once compiler <highlight><bold>506</bold></highlight> receives annotated source code files <highlight><bold>502</bold></highlight>, parser <highlight><bold>505</bold></highlight> reads and parses programming statements contained within the source code. In one embodiment, compiler <highlight><bold>506</bold></highlight> is enhanced to recognize annotations based on an extended syntax for specifying functionality of the source file to be deployed as a web service. Accordingly, as parser <highlight><bold>505</bold></highlight> parses the annotated source code, it identifies the presence and composition of embedded annotations based on this extended syntax. In one embodiment of the present invention, compiler <highlight><bold>506</bold></highlight> infers by way of the source code annotations the interface of the web service that is to be exposed to remote clients, the interface of services that will be called by the runtime to be created by compiler <highlight><bold>506</bold></highlight>, as well as internal storage requirements and persistence behavior of the web service. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> During the parsing of annotated source code <highlight><bold>502</bold></highlight>, parser <highlight><bold>505</bold></highlight> identifies the object types used in the code and attempts to locate definitions corresponding to each type. For example, if a variable &ldquo;b&rdquo; of type &ldquo;Bank&rdquo; is declared, parser <highlight><bold>505</bold></highlight> determines whether an object or library file defining the &ldquo;Bank&rdquo; type already exists within a given set of directories (e.g., as created by IDE <highlight><bold>111</bold></highlight> on web server <highlight><bold>102</bold></highlight>). If an object or library file does not exist, parser <highlight><bold>505</bold></highlight> determines whether a source file exists that could be run through compiler <highlight><bold>506</bold></highlight> to generate an object file. Similarly, if neither an object file, library file, nor a source file exists, parser <highlight><bold>505</bold></highlight> determines whether a web service description (e.g., WSDL) file exists that could be used by compiler <highlight><bold>506</bold></highlight> to generate an object file implementing a proxy object for interacting with the associated web service. In accordance with one embodiment of the invention, if an object file is determined not to exist, parser <highlight><bold>505</bold></highlight> walks through an ordered list of file types so as to identify a file that could be used in generating the requisite object file. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> In one embodiment, compiler <highlight><bold>506</bold></highlight> generates one or more object files defining publicly accessible service components <highlight><bold>508</bold></highlight> that may be executed by one or more remote clients. In addition, compiler <highlight><bold>506</bold></highlight> generates meta-data <highlight><bold>510</bold></highlight> based on annotated source code <highlight><bold>502</bold></highlight> and associates it with object codes <highlight><bold>509</bold></highlight> and service components <highlight><bold>508</bold></highlight>. In one embodiment, meta-data <highlight><bold>510</bold></highlight> includes descriptions of the annotations, methods, member variables, external services and callback interfaces associated with the service. Once compiler <highlight><bold>506</bold></highlight> has compiled annotated source code <highlight><bold>502</bold></highlight> into executable code, the code is then provided to an execution engine (not shown) that controls the execution of the code (by e.g. a processor), and performs conventional execution runtime services, such as memory allocation request and release, error/exception handling, and so forth. For the illustrated embodiment, compiler <highlight><bold>506</bold></highlight> includes an application programming interface (API) (not shown), through which programming statements contained within annotated source code <highlight><bold>502</bold></highlight> may be programmatically submitted for compilation by a variety of application-specific processes. For example, in accordance with one embodiment of the present invention, web server <highlight><bold>102</bold></highlight> makes calls to enhanced web services <highlight><bold>104</bold></highlight> upon receiving SOAP encapsulated XML method invocations via networking fabric <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an example operational flow of compiler <highlight><bold>506</bold></highlight> in accordance with one embodiment of the invention. In operation, compiler <highlight><bold>506</bold></highlight> first reads a segment of code from annotated source code <highlight><bold>502</bold></highlight>, block <highlight><bold>601</bold></highlight>. Using any one of a number of parsing techniques known in the art, parser <highlight><bold>505</bold></highlight> then parses the code segment read to identify one or more annotations contained therein based upon a language dictionary or grammar maintained by compiler <highlight><bold>506</bold></highlight> (blocks <highlight><bold>602</bold></highlight> &amp; <highlight><bold>604</bold></highlight>). If an annotation is found, compiler <highlight><bold>506</bold></highlight> determines the annotation type (e.g. conversational, asynchronous, and so forth), block <highlight><bold>608</bold></highlight>, identifies the statement or declaration it modifies, block <highlight><bold>609</bold></highlight>, identifies and generates a set of helper objects to be hooked up to the object file being compiled at runtime, block <highlight><bold>610</bold></highlight>, and associates meta-data extracted from the annotations with the object file, block <highlight><bold>611</bold></highlight>. If an annotation is not found within the code segment, or after the helper objects have been generated as the case may be, compiler <highlight><bold>506</bold></highlight> continues to read code segments and evaluate expressions until all code have been read and parsed, block <highlight><bold>612</bold></highlight>. Moreover, compiler <highlight><bold>506</bold></highlight> may optionally apply one or more optimizations to the expressions analyzed, block <highlight><bold>614</bold></highlight>. The optimizations may be any one or more of the applicable compiler optimization techniques known in the art. Finally, with or without optimizing the commands analyzed, at block <highlight><bold>616</bold></highlight>, compiler <highlight><bold>506</bold></highlight> generates executable code for the expressions analyzed. In one embodiment, compiler <highlight><bold>506</bold></highlight> generates byte codes for the expressions analyzed. In alternate embodiments, other equivalent &ldquo;code generation&rdquo; approaches may be practiced instead. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Illustrative Web Service Definition </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Compilation of the annotated source code by enhanced compiler <highlight><bold>106</bold></highlight> causes one or more object files, software components, and deployment descriptors to be generated so as to facilitate the automated deployment of the web services. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a conceptual web service definition resulting from the compilation of one or more annotated source code files in accordance with one embodiment of the invention. P The web service definition of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> includes a servlet container and an Enterprise JavaBean (EJB) container. The servlet and EJB containers are communicatively coupled together for the dispatch of web service requests. In the illustrated embodiment, the servlet container listens for requests received on a designated communication port, and uses deployment descriptors (DESC) to identify which servlet should respond to the request. In one embodiment, all requests for files with a &ldquo;.jws&rdquo; extension are routed to the listener servlet. In one embodiment, the listener servlet uses the URL of the request to determine which web service should receive the request and identify the location of associated meta-data (META) <highlight><bold>510</bold></highlight> (e.g., stored in the class file) previously generated by enhanced compiler <highlight><bold>506</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In one embodiment of the invention, when the enhanced compiler compiles the annotated source code files, it builds and deploys one or more EJBs depending upon the constitution of the code. At a minimum, the enhanced compiler builds and deploys at least one dispatch component (<highlight><bold>702</bold></highlight>) to service messages forwarded from the servlet container. If the enhanced compiler identifies that the web service has at least one buffered method, the enhanced compiler generates a queue structure (<highlight><bold>704</bold></highlight>) in addition to deploying a message driven bean to service the queue. Similarly, if the particular web service contains stateless methods the enhanced compiler deploys a stateless session bean to handle requests for those methods. In addition, if the web service contains stateful methods, the enhanced compiler will deploy an entity bean to manage conversational state associated with each service instance. Dispatch components <highlight><bold>702</bold></highlight> and <highlight><bold>706</bold></highlight> use meta-data (META) <highlight><bold>510</bold></highlight> generated by enhanced compiler <highlight><bold>506</bold></highlight> to determine whether the requested method is stateful or stateless and deploy it to a stateful or stateless component as appropriate. If the requested method is stateful, dispatch components <highlight><bold>702</bold></highlight> and <highlight><bold>706</bold></highlight> further use meta-data (META) <highlight><bold>510</bold></highlight> to determine whether the method is a start method, continue method or finish method, and creates a new stateful instance or looks up a previously created instance as appropriate (see discussion of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> below). </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Illustrative Runtime Operation </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates one embodiment of a runtime operational flow of the enhanced web service definition of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. To begin, web services <highlight><bold>104</bold></highlight> receive a message over networking fabric <highlight><bold>100</bold></highlight> from a remote device such as user client <highlight><bold>112</bold></highlight> (<highlight><bold>802</bold></highlight>). In one embodiment, the message is a SOAP encapsulated web service request transmitted via HTTP. Once the message is received, the servlet container extracts the SOAP request from the HTTP message and utilizes associated deployment descriptors to determine how to direct the request (<highlight><bold>803</bold></highlight>). For example, the deployment descriptors may state that all requests identifying a web service having a predetermined filename extension such as &ldquo;*.jws&rdquo; are to be routed to the listener servlet for further dispatch. In one embodiment, the listener servlet then uses the request URL to identify the receiving web service (<highlight><bold>804</bold></highlight>) and accesses the associated meta-data <highlight><bold>510</bold></highlight> generated earlier by enhanced compiler <highlight><bold>506</bold></highlight> to determine whether to dispatch the message directly or via a queue (<highlight><bold>806</bold></highlight>). One of dispatchers <highlight><bold>702</bold></highlight> and <highlight><bold>706</bold></highlight> further access meta-data <highlight><bold>510</bold></highlight> to determine whether to dispatch the message as a stateless method, start method, continue method or finish method (<highlight><bold>808</bold></highlight>). </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates one embodiment of the message dispatch process of the enhanced web service definition of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. To begin, the listener servlet determines the method to invoke by e.g. parsing the SOAP message (<highlight><bold>901</bold></highlight>). In one embodiment, the listener servlet utilizes the meta-data associated with the method to identify whether the message identifies a buffered or non-buffered method (<highlight><bold>902</bold></highlight>). If the listener servlet determines that the message does not identify a buffered method, the listener servlet routes the message to a generic dispatcher <highlight><bold>702</bold></highlight> (<highlight><bold>904</bold></highlight>). If, however, the listener servlet determines that the message identifies a buffered method (<highlight><bold>902</bold></highlight>), the listener servlet routes the message to dispatcher <highlight><bold>706</bold></highlight> by way of queue <highlight><bold>704</bold></highlight> (<highlight><bold>903</bold></highlight>). Next, the selected dispatcher examines the associated meta-data to determine whether the message identifies a stateful or stateless method (<highlight><bold>906</bold></highlight>). If a stateless message is identified, the dispatcher routes the message to a stateless session bean for processing by the web services logic wrapped by the bean (<highlight><bold>908</bold></highlight>). If, however, the selected dispatcher determines that the message identifies a stateful method, the dispatcher identifies a unique identifier associated with the message (<highlight><bold>910</bold></highlight>). In one embodiment, the unique id is generated by the requesting client device and is encapsulated within one or more SOAP message headers. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The dispatcher then continues to determine whether the message represents a start method (<highlight><bold>912</bold></highlight>) a continue method (<highlight><bold>920</bold></highlight>) or a finish method (<highlight><bold>930</bold></highlight>). If the method represents a start method (<highlight><bold>912</bold></highlight>), a new instance of an entity bean containing the web service logic and conversational state is generated (<highlight><bold>914</bold></highlight>), and then associated with the identifier (<highlight><bold>916</bold></highlight>). The dispatcher uses the associated meta-data to determine if annotated source code <highlight><bold>107</bold></highlight> defined a Callback interface and declared a variable of type Callback. If so, a client proxy object for interacting asynchronously with the client is created based on the Callback interface and is assigned to the declared variable. Further, the dispatcher determines whether annotated source code <highlight><bold>107</bold></highlight> declared one or more variables for interacting with external services. If so, the dispatcher creates proxy objects for interacting with these remote services based on the interfaces defined by the associated service definition (e.g., WSDL) files, and assigns them to the declared variables. Further, the dispatcher configures the web service to accept all asynchronous callbacks declared in each of the associated service definition (e.g., WSDL) files and route the callbacks to web service methods named by appending the declared variable name to the callback method name (e.g., mybank_creditCheckResponse(String result)). The dispatcher stores all proxy objects (whether created for interacting with the client or other external services) as part of the conversation state of the entity bean. The message is then routed to the new entity bean instance for further processing by the web logic. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> If the method represents a continue method (<highlight><bold>920</bold></highlight>) or finish method (<highlight><bold>930</bold></highlight>), the bean instance associated with that identifier is found (<highlight><bold>922</bold></highlight>, <highlight><bold>932</bold></highlight>), and the message is routed to that bean for further processing by the web logic (<highlight><bold>924</bold></highlight>,<highlight><bold>934</bold></highlight>). With the finish method however, the bean instance is destroyed once the processing has completed (<highlight><bold>936</bold></highlight>). </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In one embodiment of the invention, once the message has been routed to a bean (whether stateful or stateless), a SOAP handler removes the encapsulated XML message from the SOAP body, determines which method of the web service logic to invoke based on the root element of the XML message, maps XML child elements onto newly created programming language objects to be used as arguments to the method, and invokes the web service method passing the newly created objects as parameters. If the invoked web service method returns a value synchronously, the bean will map the value onto a corresponding XML element, package it in a message and return it to the client using the same protocol details used in the request (e.g., SOAP over HTTP). </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Once invoked, any web service method can use the proxy objects created for generating calls to the client or external services. The proxy objects will map objects passed as parameters into corresponding XML elements and use them and the remote method name to generate and send a message to the remote service or client. In the case of external services, the message is generated and sent using the protocol specifics (e.g., SOAP over HTTP) specified by the associated service description file. In the case of the client, the message is generated and sent using the protocol specifics used by the client in the initial start method. In one embodiment, synchronous responses from the client or remote services are parsed to extract the result and map it onto a representative object, which is returned to the web service code as the return value of the proxy object method invocation. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> Asynchronous responses and requests from external services are dispatched to the appropriate entity bean by the listener servlet and dispatch beans just like requests sent by the client. These responses are routed to the appropriate method of the web service logic identified by a special naming convention. Specifically, they are routed to methods named by appending the name of the external service out method to the declared service proxy variable name (e.g., mybank_creditCheckResponse(String result)). </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Example Host Computer System </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an example computer system suitable for hosting web services development platform of the present invention. As shown, computer system <highlight><bold>1000</bold></highlight> includes one or more processors <highlight><bold>1002</bold></highlight>, and system memory <highlight><bold>1004</bold></highlight>. Additionally, computer system <highlight><bold>1000</bold></highlight> includes mass storage devices <highlight><bold>1006</bold></highlight> (such as diskette, hard drive, CDROM and so forth), input/output devices <highlight><bold>1008</bold></highlight> (such as keyboard, cursor control and so forth) and communication interfaces <highlight><bold>1010</bold></highlight> (such as network interface cards, modems and so forth). The elements are coupled to each other via system bus <highlight><bold>1012</bold></highlight>, which represents one or more buses. In the case of multiple buses, they are bridged by one or more bus bridges (not shown). Each of these elements performs its conventional functions known in the art. In particular, system memory <highlight><bold>1004</bold></highlight> and mass storage <highlight><bold>1006</bold></highlight> are employed to store a working copy and a permanent copy of the programming instructions implementing the compiler and/or enhanced web services of the present invention. The permanent copy of the programming instructions may be loaded into mass storage <highlight><bold>1006</bold></highlight> in the factory, or in the field, through e.g. a distribution medium (not shown) or through communication interface <highlight><bold>1010</bold></highlight> (from a distribution server (not shown). The constitution of these elements <highlight><bold>1002</bold></highlight>-<highlight><bold>1012</bold></highlight> are known, and accordingly will not be further described </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Conclusion and Epilogue </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Thus, it can be seen from the above description, an annotation based development platform for stateful Web services has been described. While the present invention has been described referencing the illustrated and above enumerated embodiments, the present invention is not limited to these described embodiments. Numerous modification and alterations may be made, consistent with the scope of the present invention as set forth in the claims to follow. Thus, the above-described embodiments are merely illustrative, and not restrictive on the present invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of specifying an asynchronous web service within a procedural programming environment, the method comprising: 
<claim-text>providing a source code representation of at least a portion of web service logic, the logic including at least one method declared to be a callback method; and </claim-text>
<claim-text>identifying a member variable declared to implement said callback method to cause a compiler to generate a client proxy object for interacting asynchronously with the client using said callback method, and to assign the client proxy object to said member variable. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said callback method is declared inside a callback interface definition. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>specifying one or more declarative annotations associated with said callback method to cause a compiler to generate one or more persistent components to maintain conversational state related to the identified member variable. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the one or more declarative annotations indicate to the compiler whether the identified method is at least one of a start method, a continue method, and a finish method, wherein the start method applies to the start of a stateful conversation between the client and the web service, the continue method applies to the continuation of an ongoing stateful conversation between the client and the web service, and the finish method applies to the completion of an ongoing stateful conversation between the client and the web service. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein when a method declared to be a start method is invoked at run-time, a new instance of a conversation is created, and a unique identifier is associated with that conversational instance to facilitate management of multiple simultaneous conversations. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein when a method declared to be a continue method or a finish method is invoked at run-time, a unique identifier is obtained and used to access a corresponding instance of a conversation. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the unique identifier is provided by the client. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein when a method declared to be a finish method is invoked at run-time, the corresponding instance of the conversation is destroyed after processing by the web service logic. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the one or more declarative annotations indicate to the compiler whether the identified callback method is buffered, causing the compiler to instantiate one or more queues to temporarily store one or more asynchronous responses for delivery to the client when the client is able to receive the responses. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. In a procedural programming environment, a method of returning an asynchronous response to a client, the method comprising: 
<claim-text>identifying a callback interface associated with the client; </claim-text>
<claim-text>identifying a member variable declared to implement the callback interface; </claim-text>
<claim-text>generating a proxy object that implements the callback interface; and </claim-text>
<claim-text>assigning the proxy object to the member variable. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein one or more declarative annotations inside the callback interface cause the compiler to generate one or more persistent components to maintain conversational state related to the identified member variable. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. In an asynchronous web service, a method comprising: 
<claim-text>receiving a message from a client requesting that a web service method be invoked; </claim-text>
<claim-text>parsing the message to identify the requested web service method in addition to a callback address indicating a location where the client is listening for callbacks from the web service; </claim-text>
<claim-text>storing the callback address in association with a previously generated proxy object; and </claim-text>
<claim-text>invoking the requested web service method. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising: 
<claim-text>identifying an instance identifier provided by the client indicating a particular instance of the client that is listening for callbacks from the web service; and </claim-text>
<claim-text>storing the instance identifier in association with the callback address and the proxy object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein at least one of the callback address and the instance identifier is encapsulated in one or more request messages. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the instance identifier is embedded within a conversation identifier used to access a corresponding instance of a conversation between the client and the web service. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein at least one of the callback address and the instance identifier is encapsulated in one or more SOAP message headers. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the instance identifier is a GUID. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein invoking the requested web service method further comprises: 
<claim-text>extracting data representation language elements from the message; </claim-text>
<claim-text>mapping the data representation language elements to programming language objects; </claim-text>
<claim-text>invoking the requested web service method including passing the programming language objects as parameters to the web service method; </claim-text>
<claim-text>mapping programming language objects returned by the web service method onto representative data representation language elements; </claim-text>
<claim-text>packaging the representative data representation language elements according to one or more protocols used by the client in generating the requested message; and </claim-text>
<claim-text>transmitting the packaged data representation elements to the client in accordance with one or more protocols used by the client in transmitting the message to the web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further comprising: 
<claim-text>generating an asynchronous response to the client in response to the message by invoking a method on the previously generated proxy object using a declared member variable, wherein invoking includes 
<claim-text>passing programming language objects as parameters to said method, </claim-text>
<claim-text>mapping the programming language objects and method invocation onto representative data representation language elements; </claim-text>
<claim-text>packaging the representative data representation language elements, and </claim-text>
<claim-text>callback instance identifier into an asynchronous response message, and </claim-text>
<claim-text>transmitting the asynchronous response message to the client at the callback address in accordance with one or more protocols used by the client in transmitting the original request message to the web service. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method for specifying logic within a procedural programming environment for receiving a callback from an asynchronous web service, the method comprising: 
<claim-text>identifying a member variable to be used for interacting with said asynchronous web service; and </claim-text>
<claim-text>providing a method associated with said member variable, the method having a signature and containing logic for receiving said callback from said asynchronous web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said method is manually provided by a developer. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the method signature is provided by an integrated development environment based on a specified service description file containing a declaration for said callback. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein said method is associated with said member variable using a method naming convention that utilizes the name of said member variable and the name of said callback. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further comprising: 
<claim-text>specifying one or more declarative annotations in association with said member variable to cause a compiler to generate one or more persistent components to maintain conversational state related to the asynchronous web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the one or more declarative annotations are specified within the source code. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the one or more declarative annotations are specified outside of the source code. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the one or more declarative annotations are manually specified by a developer. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the one or more declarative annotations are automatically specified by an integrated development environment based upon input provided by a developer. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein asynchronous responses from the external web service are passed to said method associated with said member variable. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. In a web service, a method comprising: 
<claim-text>generating a request to an external web service using a proxy object previously generated by a compiler based upon a service description file associated with the external web service, wherein the request includes a callback address to identify a location to which the external web service should return a response; </claim-text>
<claim-text>transmitting the request as a request message to the external web service using one or more transmission protocols; and </claim-text>
<claim-text>receiving an asynchronous response from the external web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the callback address includes proxy object identifier. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the callback address is included within one or more headers of the request message. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the request message is a SOAP based message. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the callback address comprises a URL identifying a location where the web service is listening for a response from the external web service. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the request further includes a callback instance identifier representing a specific instance of the requesting web service to which asynchronous responses are to be routed. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, wherein and the callback instance identifier is included within one or more headers of the request message. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the request message is a SOAP based message. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. In a web service, a method comprising: 
<claim-text>receiving a message identifying a callback address, a callback method and a proxy object identifier; </claim-text>
<claim-text>extracting the proxy object identifier from the message; </claim-text>
<claim-text>determining a method to be invoked based at least in part upon the proxy object identifier and the callback method; and </claim-text>
<claim-text>routing the request to the method to be invoked. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the callback address comprises a URL indicating a location where the web service listens for callbacks from the external web service. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein determining the method to be invoked comprises appending a name associated with the callback method to the proxy object identifier. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the message further identifies a callback instance identifier. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein routing further comprises: 
<claim-text>identifying a callback instance based at least in part upon the callback instance identifier; and </claim-text>
<claim-text>routing the request to a method associated with the identified callback instance. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions, which when executed provide a graphical interface to facilitate specification of an asynchronous web service within a procedural programming environment including </claim-text>
<claim-text>providing a source code representation of at least a portion of web service logic, the logic including at least one method declared to be a callback method, and </claim-text>
<claim-text>identifying a member variable declared to implement said callback method to cause a compiler to generate a client proxy object for interacting asynchronously with the client using said callback method, and to assign the client proxy object to said member variable. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein said callback method is declared inside a callback interface definition. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, wherein the programming instructions further facilitate specifying one or more declarative annotations associated with said callback method to cause a compiler to generate one or more persistent components to maintain conversational state related to the identified member variable. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein the one or more declarative annotations indicate to the compiler whether the identified method is at least one of a start method, a continue method, and a finish method, wherein the start method applies to the start of a stateful conversation between the client and the web service, the continue method applies to the continuation of an ongoing stateful conversation between the client and the web service, and the finish method applies to the completion of an ongoing stateful conversation between the client and the web service. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference>, wherein when a method declared to be a start method is invoked at run-time, a new instance of a conversation is created, and a unique identifier is associated with that conversational instance to facilitate management of multiple simultaneous conversations. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 46</dependent-claim-reference>, wherein when a method declared to be a continue method or a finish method is invoked at run-time, a unique identifier is obtained and used to access a corresponding instance of a conversation. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein the unique identifier is provided by the client. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, wherein when a method declared to be a finish method is invoked at run-time, the corresponding instance of the conversation is destroyed after processing by the web service logic. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00044">claim 45</dependent-claim-reference>, wherein the one or more declarative annotations indicate to the compiler whether the identified callback method is buffered, causing the compiler to instantiate one or more queues to temporarily store one or more asynchronous responses for delivery to the client when the client is able to receive the responses. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions designed to program an apparatus to return an asynchronous response to a client, which programming instructions when executed enable the apparatus to 
<claim-text>identify a callback interface associated with the client; </claim-text>
<claim-text>identify a member variable declared to implement the callback interface; </claim-text>
<claim-text>generate a proxy object that implements the callback interface; and </claim-text>
<claim-text>assign the proxy object to the member variable. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 52</dependent-claim-reference>, wherein one or more declarative annotations inside the callback interface cause the compiler to generate one or more persistent components to maintain conversational state related to the identified member variable. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions designed to program an apparatus to implement an asynchronous web service, which programming instructions when executed enable the apparatus to 
<claim-text>receive a message from a client requesting that a web service method be invoked; </claim-text>
<claim-text>parse the message to identify the requested web service method in addition to a callback address indicating a location where the client is listening for callbacks from the web service; </claim-text>
<claim-text>store the callback address in association with a previously generated proxy object; and </claim-text>
<claim-text>invoke the requested web service method. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, wherein the programming instructions further enable he apparatus to 
<claim-text>identify an instance identifier provided by the client indicating a particular instance of the client that is listening for callbacks from the web service; and </claim-text>
<claim-text>storeng the instance identifier in association with the callback address and the proxy object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein at least one of the callback address and the instance identifier is encapsulated in one or more request messages. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein the instance identifier is embedded within a conversation identifier used to access a corresponding instance of a conversation between the client and the web service. </claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 56</dependent-claim-reference>, wherein at least one of the callback address and the instance identifier is encapsulated in one or more SOAP message headers. </claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein the instance identifier is a GUID. </claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, wherein the programming instructions to cause the apparatus to invoke the requested web service further cause the apparatus to 
<claim-text>extract data representation language elements from the message; </claim-text>
<claim-text>map the data representation language elements to programming language objects; </claim-text>
<claim-text>invoke the requested web service method including passing the programming language objects as parameters to the web service method; </claim-text>
<claim-text>map programming language objects returned by the web service method onto representative data representation language elements; </claim-text>
<claim-text>package the representative data representation language elements according to one or more protocols used by the client in generating the requested message; and </claim-text>
<claim-text>transmit the packaged data representation elements to the client in accordance with one or more protocols used by the client in transmitting the message to the web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein the programming instructions further enable the apparatus to generate an asynchronous response to the client in response to the message by invoking a method on the previously generated proxy object using a declared member variable, wherein invoking includes 
<claim-text>passing programming language objects as parameters to said method, </claim-text>
<claim-text>mapping the programming language objects and method invocation onto representative data representation language elements; </claim-text>
<claim-text>packaging the representative data representation language elements, and callback instance identifier into an asynchronous response message, and </claim-text>
<claim-text>transmitting the asynchronous response message to the client at the callback address in accordance with one or more protocols used by the client in transmitting the original request message to the web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions, which when executed provide a graphical interface to facilitate specification of an asynchronous web service within a procedural programming environment including </claim-text>
<claim-text>identifying a member variable to be used for interacting with said asynchronous web service; and </claim-text>
<claim-text>providing a method associated with said member variable, the method having a signature and containing logic for receiving said callback from said asynchronous web service. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00063">
<claim-text><highlight><bold>63</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein said method is manually provided by a developer. </claim-text>
</claim>
<claim id="CLM-00064">
<claim-text><highlight><bold>64</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein the method signature is provided by an integrated development environment based on a specified service description file containing a declaration for said callback. </claim-text>
</claim>
<claim id="CLM-00065">
<claim-text><highlight><bold>65</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein said method is associated with said member variable using a method naming convention that utilizes the name of said member variable and the name of said callback. </claim-text>
</claim>
<claim id="CLM-00066">
<claim-text><highlight><bold>66</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein the programming instructions further facilitate specifying one or more declarative annotations in association with said member variable to cause a compiler to generate one or more persistent components to maintain conversational state related to the asynchronous web service. </claim-text>
</claim>
<claim id="CLM-00067">
<claim-text><highlight><bold>67</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the one or more declarative annotations are specified within the source code. </claim-text>
</claim>
<claim id="CLM-00068">
<claim-text><highlight><bold>68</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the one or more declarative annotations are specified outside of the source code. </claim-text>
</claim>
<claim id="CLM-00069">
<claim-text><highlight><bold>69</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the one or more declarative annotations are manually specified by a developer. </claim-text>
</claim>
<claim id="CLM-00070">
<claim-text><highlight><bold>70</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the one or more declarative annotations are automatically specified by an integrated development environment based upon input provided by a developer. </claim-text>
</claim>
<claim id="CLM-00071">
<claim-text><highlight><bold>71</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00066">claim 62</dependent-claim-reference>, wherein asynchronous responses from the external web service are passed to said method associated with said member variable. </claim-text>
</claim>
<claim id="CLM-00072">
<claim-text><highlight><bold>72</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions designed to program an apparatus to implement an asynchronous web service, which when executed enable the apparatus to 
<claim-text>generate a request to an external web service using a proxy object previously generated by a compiler based upon a service description file associated with the external web service, wherein the request includes a callback address to identify a location to which the external web service should return a response; </claim-text>
<claim-text>transmit the request as a request message to the external web service using one or more transmission protocols; and </claim-text>
<claim-text>receive an asynchronous response from the external web service. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00073">
<claim-text><highlight><bold>73</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 72</dependent-claim-reference>, wherein the callback address includes proxy object identifier. </claim-text>
</claim>
<claim id="CLM-00074">
<claim-text><highlight><bold>74</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 72</dependent-claim-reference>, wherein the callback address is included within one or more headers of the request message. </claim-text>
</claim>
<claim id="CLM-00075">
<claim-text><highlight><bold>75</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the request message is a SOAP based message. </claim-text>
</claim>
<claim id="CLM-00076">
<claim-text><highlight><bold>76</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 72</dependent-claim-reference>, wherein the callback address comprises a URL identifying a location where the web service is listening for a response from the external web service. </claim-text>
</claim>
<claim id="CLM-00077">
<claim-text><highlight><bold>77</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 72</dependent-claim-reference>, wherein the request further includes a callback instance identifier representing a specific instance of the requesting web service to which asynchronous responses are to be routed. </claim-text>
</claim>
<claim id="CLM-00078">
<claim-text><highlight><bold>78</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 77</dependent-claim-reference>, wherein and the callback instance identifier is included within one or more headers of the request message. </claim-text>
</claim>
<claim id="CLM-00079">
<claim-text><highlight><bold>79</bold></highlight>. The article of <dependent-claim-reference depends_on="CLM-00077">claim 78</dependent-claim-reference>, wherein the request message is a SOAP based message. </claim-text>
</claim>
<claim id="CLM-00080">
<claim-text><highlight><bold>80</bold></highlight>. An article of manufacture comprising: 
<claim-text>a storage medium having stored therein a plurality of programming instructions designed to program an apparatus to implement an asynchronous web service, which when executed enable an apparatus to 
<claim-text>receive a message identifying a callback address, a callback method and a proxy object identifier; </claim-text>
<claim-text>extract the proxy object identifier from the message; </claim-text>
<claim-text>determine a method to be invoked based at least in part upon the proxy object identifier and the callback method; and </claim-text>
<claim-text>route the request to the method to be invoked. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00081">
<claim-text><highlight><bold>81</bold></highlight>. The article of claim <highlight><bold>80</bold></highlight>, wherein the callback address comprises a URL indicating a location where the web service listens for callbacks from the external web service. </claim-text>
</claim>
<claim id="CLM-00082">
<claim-text><highlight><bold>82</bold></highlight>. The article of claim <highlight><bold>80</bold></highlight>, wherein the programming instructions to enable the apparatus to determine the method to be invoked further comprises programming instructions to enable the apparatus to append a name associated with the callback method to the proxy object identifier. </claim-text>
</claim>
<claim id="CLM-00083">
<claim-text><highlight><bold>83</bold></highlight>. The article of claim <highlight><bold>80</bold></highlight>, wherein the message further identifies a callback instance identifier. </claim-text>
</claim>
<claim id="CLM-00084">
<claim-text><highlight><bold>84</bold></highlight>. The article of claim <highlight><bold>83</bold></highlight>, wherein the programming instructions to enable the apparatus to route further enable the apparatus to 
<claim-text>identify a callback instance based at least in part upon the callback instance identifier; and </claim-text>
<claim-text>route the request to a method associated with the identified callback instance.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005181A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005181A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005181A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005181A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005181A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005181A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005181A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005181A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005181A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005181A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005181A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
