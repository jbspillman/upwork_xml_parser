<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004978A1-20030102-D00000.TIF SYSTEM "US20030004978A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00001.TIF SYSTEM "US20030004978A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00002.TIF SYSTEM "US20030004978A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00003.TIF SYSTEM "US20030004978A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00004.TIF SYSTEM "US20030004978A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00005.TIF SYSTEM "US20030004978A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00006.TIF SYSTEM "US20030004978A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00007.TIF SYSTEM "US20030004978A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00008.TIF SYSTEM "US20030004978A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00009.TIF SYSTEM "US20030004978A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004978A1-20030102-D00010.TIF SYSTEM "US20030004978A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004978</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10093559</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020308</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F017/30</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>202000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method of automatically correcting broken links to files stored on a computer</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60274811</doc-number>
<document-date>20010309</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<middle-name>M.</middle-name>
<family-name>Greenbaum</family-name>
</name>
<residence>
<residence-us>
<city>Clearwater</city>
<state>FL</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Axiom Services, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Webb Ziesenheim Logsdon Orkin &amp; Hanson, P.C.</name-1>
<name-2></name-2>
<address>
<address-1>Suite 700</address-1>
<address-2>436 Seventh Avenue</address-2>
<city>Pittsburgh</city>
<state>PA</state>
<postalcode>15219</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of correcting broken software links includes providing a computer data storage having target files and master files. Each master file includes a pointer to a storage location where at least one target file called by the master file resides. A link-id is determined for each target file and is stored in each master file configured to call the target file. The target file is then either renamed or moved so that each master file configured to call the target file cannot locate it from the pointer data. The target file is then located on the computer data storage based on a match between the link-id for the target file and the link-id stored in the calling master file. The data comprising the pointer of the master file is then updated whereupon it can locate the target file on the computer data storage. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority from U.S. Provisional Patent Application Serial No. 60/274,811, filed Mar. 9, 2001.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to correcting broken links between files stored on a Computer Data Storage. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Many software applications such as Internet based software, Microsoft&reg; Word&trade;, Microsoft&reg; Excel&trade;, Pagemaker&reg;, AutoCAD&reg;, MicroStation&reg;, QuarkXPress&reg;, and others include the ability to link files to each other. For example, a .gif graphical image file may be linked to an HTML file, an Excel spreadsheet, a Word document, and so forth. However, when a file is renamed or moved from its original location, links to that file may be inadvertently broken. For example, after one .gif file is renamed or moved, software applications that utilize this file may all complain that this file is missing. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> More and more documents are being composed modularly with many linked components, making document interconnectivity, breaks and necessity for repair thereof increasingly prevalent and important. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Presently, when software applications encounter a broken link, they ordinarily do nothing more than display an error message. Some software applications provide crude tools to help the user locate missing files, but such tools are typically not automated, requiring user intervention or confirmation, and can only handle one file type. Further, existing tools are not always accurate and are tedious, if helpful at all, when multiple broken links must be restored in multiple documents. Presently, no solution exists for automatically re-connecting broken links among varying types of files. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> It is, therefore, an object of the present invention to overcome the above problems and others by providing a reliable, automatic method of restoring broken links between files created in a variety of applications. Still other objects of the invention will become apparent to those of ordinary skill in the art upon reading and understanding the following detailed description. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Accordingly, I have invented a method of correcting broken software file links. The method includes determining a link-id for a first target file that is stored on a computer data storage along with a first master file which, during its execution, calls the first target file. The first master file includes a first pointer that comprises data that enables the first master file to locate the first target file on the computer data storage. A link-id is determined for the first target file and this link-id is stored in the first master file. The first target file is then located on the computer data storage based on a match between the link-id stored in the first master file and the link-id for the first target file. The data of the first pointer is updated so that the updated data enables the first master file to locate the first target file on the computer storage. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The step of locating the first target file occurs after the first target file is amended or moved so that the first master file cannot locate the first target file on the computer data storage from the data comprising the first pointer. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Amending the target file includes amending the file name, amending the file extension, amending a path and/or amending a physical/logical drive of the first target file. Moving the first target file includes moving the first target file to a different physical/logical drive of the computer data storage and/or moving the first target file to a different path on the computer data storage. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Before and after updating the data of the first pointer, said data comprises: respective pre-update and post-update file names of the first target file; respective pre-update and post-update file extensions of the first target file; respective pre-update and post-update physical/logical drives where the first target file is stored on the computer data storage; and/or respective pre-update and post-update paths or folders where the first target file is stored on the computer data storage. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The link-id can be a unique binary sequence or a checksum of the data comprising the first target file. When the link-id is a unique binary sequence, the link-id is stored in the first target file. However, when the link-id is the checksum of the data comprising the first target file, the link-id is not stored in the first target file. Rather, the link-id for the target file is determined again when the target file is being located on the computer data storage. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The method can further include storing a second target file on the computer data storage and determining a link-id for the second target file, where the link-ids of the first and second target files are the same. Thereafter, in connection with reestablishing broken links with the first master file, it is determined that the first and second target files have the same link-ids. The first target file is then located on the computer data storage based on the data comprising the first pointer prior to updating said data and/or a date/time associated with each of the first and second target files. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> I have also invented a method of correcting broken software file links. The method includes determining a link-id for each of a plurality of target files stored on a computer data storage along with a plurality of master files, where each target file is called by at least one master file during its execution. The computer data storage further includes for each target file a pointer that is accessible to the at least one master file configured to call said target file. Each pointer includes data regarding a location of its target file on the computer data storage. The link-id determined for each target file is stored in the computer data storage in connection with the at least one master file configured to call the target file. The location of at least one target file on the computer data storage is then determined based on a match between the link-id for said target file and the link-id stored in the computer data storage in connection with the at least one master file configured to call said target file. The data comprising the pointer for said target file is then updated so that said data enables the master file configured to call said target file to locate said target file on the computer data storage at the thus determined location. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The step of determining a location of said target file occurs after said target file is amended or relocated in the computer data storage so that the at least one master file configured to call said target file cannot locate said target file from the pointer for said target file. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Each pointer can be stored in a data structure accessible by the master files. At an appropriate time, the pointer for said target file can be located in the data structure. Said target file can then be located on the computer data storage utilizing the data comprising the pointer for said target file located in the data structure. Alternatively, the pointer for each target file is stored in each master file configured to call the target file.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a plurality of computers connected together via a computer network; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>b </italic></highlight>are block diagrams of a method of linking target files and master files in accordance with the prior art; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an illustration of the structure of a pointer utilized to create links between master files and target files in accordance with the prior art; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>are block diagrams of a method of reestablishing broken links between master files and target files in accordance with one embodiment of the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>is a block diagram of a method of reestablishing broken links between master files and target files in accordance with another embodiment of the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>b </italic></highlight>is an illustration of the record structure of the records forming the data structure of <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a; </italic></highlight></paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>is a block diagram of a method of reestablishing broken links between master files and target files in accordance with yet another embodiment of the present invention; and </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>is an illustration of the record structure of the records forming the data structure of <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a.</italic></highlight></paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The present invention will be described with reference to the accompanying FIGS. where like reference numbers correspond to like elements. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> plurality of computers <highlight><bold>2</bold></highlight> can be networked together via a computer network <highlight><bold>4</bold></highlight>, such as a local area network (LAN), a wide area network (WAN), the Internet, etc. Each computer <highlight><bold>2</bold></highlight> includes a pointing device or mouse <highlight><bold>6</bold></highlight>, a keyboard <highlight><bold>8</bold></highlight> and a display <highlight><bold>10</bold></highlight> which collectively act as a man-machine interface between the computer <highlight><bold>2</bold></highlight> and a user thereof. Each computer <highlight><bold>2</bold></highlight> also includes a central processing unit (CPU) <highlight><bold>12</bold></highlight> and a computer data storage <highlight><bold>14</bold></highlight>. Each computer data storage <highlight><bold>14</bold></highlight> can be any desired combination of data storage devices known in the art, such as, without limitation, semiconductor data storage, magnetic data storage and/or optical data storage. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The present invention is embodied in computer software which is configured to run on each computer <highlight><bold>2</bold></highlight>. More specifically, the computer software embodying the present invention can be configured to run on each computer <highlight><bold>2</bold></highlight>, as a stand-alone computer <highlight><bold>2</bold></highlight> or as a networked computer <highlight><bold>2</bold></highlight>, which is capable of searching its own computer data storage <highlight><bold>14</bold></highlight> as well as at least part of the computer data storage <highlight><bold>14</bold></highlight> of one or more other networked computers <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> A prior art method of linking files stored on computer data storage <highlight><bold>14</bold></highlight> will now be described with reference to <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>b</italic></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference><highlight><italic>a</italic></highlight>, computer data storage <highlight><bold>14</bold></highlight> can store a plurality of master files <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight>-<highlight><bold>16</bold></highlight>-X. Computer data storage <highlight><bold>14</bold></highlight> can also store a plurality of target files <highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>18</bold></highlight>-Xb associated with master files <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight>-<highlight><bold>16</bold></highlight>-X, respectively. Each master file <highlight><bold>16</bold></highlight> is one which includes links pointing to other files. Each master file <highlight><bold>16</bold></highlight> is configured so that during execution, it calls or retrieves one or more target files <highlight><bold>18</bold></highlight> which are pointed to by the master file. It should be appreciated, however, that in a hierarchical file relationship, each file can be a master file, a target file, or both depending on the calling or called relationship of the file with respect to other files. For example, a file can be a master file for one or more target files that it is configured to call, and this same file can be a target file that is called by one or more master files. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> To enable it to call appropriate target files <highlight><bold>18</bold></highlight>, each master file <highlight><bold>16</bold></highlight> includes a pointer <highlight><bold>20</bold></highlight> to each target file <highlight><bold>18</bold></highlight> the master file <highlight><bold>16</bold></highlight> is configured to call during its execution. For example, master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> includes pointer <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>and a pointer <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>which point to the storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>and the storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>, respectively, in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, each pointer <highlight><bold>20</bold></highlight> includes pointer data, such as physical/logical drive data <highlight><bold>22</bold></highlight>, path data <highlight><bold>24</bold></highlight>, file name data <highlight><bold>26</bold></highlight> and extension data <highlight><bold>28</bold></highlight> which collectively define the physical location on computer data storage <highlight><bold>14</bold></highlight> where the corresponding target file <highlight><bold>18</bold></highlight> is stored. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> During execution, master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> calls or retrieves target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>from computer data storage <highlight><bold>14</bold></highlight>. More specifically, master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> utilizes pointer <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>to identify the storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>on computer data storage <highlight><bold>14</bold></highlight>. Utilizing techniques known in the art, master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> searches for target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>at the storage location of computer data storage <highlight><bold>14</bold></highlight> referenced by the pointer data of pointer <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a</italic></highlight>. If master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> locates target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a</italic></highlight>, master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> retrieves target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>and commences operation in accordance with the data included therein. Similar comments apply in respect of master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> calling target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>from a storage location in computer data storage <highlight><bold>14</bold></highlight> referenced by the pointer data of pointer <highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>. Each master file <highlight><bold>16</bold></highlight> stored in computer data storage <highlight><bold>14</bold></highlight> can include a pointer <highlight><bold>20</bold></highlight> to the storage location in computer data storage <highlight><bold>14</bold></highlight> of each target file <highlight><bold>18</bold></highlight> called by the master file <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference><highlight><italic>b </italic></highlight>and with continuing reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference><highlight><italic>a</italic></highlight>, it is well known that if the physical location of a target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight> changes, the physical/logical drive and/or path of this target file <highlight><bold>18</bold></highlight> changes. Hence, any pointer <highlight><bold>20</bold></highlight> to this target file <highlight><bold>18</bold></highlight> created prior to changing its physical location will no longer include the correct storage location of this target file <highlight><bold>18</bold></highlight>. Similarly, if the file name and/or the extension of a target file <highlight><bold>18</bold></highlight> changes, any pointer <highlight><bold>20</bold></highlight> to this target file <highlight><bold>18</bold></highlight> created prior to such change will no longer include the correct file name or file extension of the target file <highlight><bold>18</bold></highlight>. Hence, when a master file <highlight><bold>16</bold></highlight> utilizes this pointer <highlight><bold>20</bold></highlight> to retrieve the target file <highlight><bold>18</bold></highlight>, the target file <highlight><bold>18</bold></highlight> will not be located by the master file, even if the physical location of the target file remains unchanged. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Moving the physical location of a target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>, changing the file name and/or changing the file extension of the target file <highlight><bold>18</bold></highlight> without a corresponding change in each pointer <highlight><bold>20</bold></highlight> thereto creates a broken link between the target file <highlight><bold>18</bold></highlight> and each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>. Typically, when a broken link is detected during execution of a master file <highlight><bold>16</bold></highlight>, an on-screen error message is generated which advises the user of computer <highlight><bold>2</bold></highlight> that a particular target file <highlight><bold>18</bold></highlight> called by a master file <highlight><bold>16</bold></highlight> could not be located at the storage location of computer data storage <highlight><bold>14</bold></highlight> referenced by the pointer data of the corresponding pointer <highlight><bold>20</bold></highlight> included in the master file <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Heretofore, such broken links required manual correction. However, such manual correction is tedious, time consuming and potentially error prone. The computer software embodying the present invention enables restoration of broken links between master files and target files with minimal user intervention. More specifically, the present invention utilizes a two step process, namely &ldquo;Inoculate&rdquo; and &ldquo;Cure&rdquo;, to create secondary links between master files and target files that enable broken primary links between master files and target files to be reestablished. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The inoculate process will now be described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>a </italic></highlight>which shows an executable file <highlight><bold>32</bold></highlight> which includes an inoculate routine <highlight><bold>34</bold></highlight> and a cure routine <highlight><bold>36</bold></highlight>, each of which can be selectively executed by a user of a computer <highlight><bold>2</bold></highlight> via the man-machine interface thereof or at scheduled intervals. Inoculate routine <highlight><bold>34</bold></highlight> is preferably executed prior to the creation of broken links on computer data storage <highlight><bold>14</bold></highlight>. However, this is not to be construed as limiting the invention since inoculate routine <highlight><bold>34</bold></highlight> can be executed at anytime to provide secondary links between master files and target files having primary links that are not broken. For the purpose of the following description, it will be assumed that during execution of inoculate routine <highlight><bold>34</bold></highlight>, all file links between master files and target files are not broken. In operation, inoculate routine <highlight><bold>34</bold></highlight> searches computer data storage <highlight><bold>14</bold></highlight> for master files <highlight><bold>16</bold></highlight> including one or more pointers <highlight><bold>20</bold></highlight> to target files <highlight><bold>18</bold></highlight>. Utilizing the pointer data included in each pointer <highlight><bold>20</bold></highlight>, inoculate routine <highlight><bold>34</bold></highlight> locates the storage location of the corresponding target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. Next, inoculate routine <highlight><bold>34</bold></highlight> determines a link-id <highlight><bold>38</bold></highlight> for each target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. Then, inoculate routine <highlight><bold>34</bold></highlight> stores each link-id <highlight><bold>38</bold></highlight> in its corresponding target file <highlight><bold>18</bold></highlight> and in each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>. For example, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>a</italic></highlight>, link-id <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>for target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>is stored therein and in master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> in connection with pointer <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>for target file <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The foregoing process of locating the storage location in computer data storage <highlight><bold>14</bold></highlight> of each target file <highlight><bold>18</bold></highlight> having a pointer <highlight><bold>20</bold></highlight> included in a master file <highlight><bold>16</bold></highlight>, determining a unique link-id <highlight><bold>38</bold></highlight> for each target file <highlight><bold>18</bold></highlight>, and storing each link-id <highlight><bold>38</bold></highlight> in its corresponding target file <highlight><bold>18</bold></highlight> and in each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> continues until each target file <highlight><bold>18</bold></highlight> and each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> each include the link-id of the target file <highlight><bold>18</bold></highlight>. Thereafter, inoculate routine <highlight><bold>34</bold></highlight> terminates. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> It is to be appreciated that each pointer <highlight><bold>20</bold></highlight> and each link-id <highlight><bold>38</bold></highlight> operate as a primary link and a secondary link, respectively, between each target file <highlight><bold>18</bold></highlight> and each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>. During normal execution, each master file <highlight><bold>16</bold></highlight> can call one or more target files <highlight><bold>18</bold></highlight> from storage locations in computer data storage <highlight><bold>14</bold></highlight> referenced by the pointer data of the pointer <highlight><bold>20</bold></highlight> for each target file <highlight><bold>18</bold></highlight>. If, however, this primary link between a master file <highlight><bold>16</bold></highlight> and a target file <highlight><bold>18</bold></highlight> is broken as a result of moving the target file <highlight><bold>18</bold></highlight> to a different storage location in computer data storage <highlight><bold>14</bold></highlight> and/or changing the file name and/or file extension of the target file <highlight><bold>18</bold></highlight>, the master file <highlight><bold>16</bold></highlight> calling the target file <highlight><bold>18</bold></highlight> will not be able to locate it in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> For example, <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b </italic></highlight>illustrates a change in the physical location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. Accordingly, the data included in pointer <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>of master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> no longer points to the storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. To reestablish this broken link, cure routine <highlight><bold>36</bold></highlight> can be executed. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In operation, cure routine <highlight><bold>36</bold></highlight> searches computer data storage <highlight><bold>14</bold></highlight> for master files <highlight><bold>16</bold></highlight> including link-ids <highlight><bold>38</bold></highlight> to target files <highlight><bold>18</bold></highlight>. For each link-id <highlight><bold>38</bold></highlight> encountered, cure routine <highlight><bold>36</bold></highlight> searches computer data storage <highlight><bold>14</bold></highlight> for the storage location of the target file <highlight><bold>18</bold></highlight> having the same link-id <highlight><bold>38</bold></highlight>. Once this storage location has been determined, cure routine <highlight><bold>36</bold></highlight> updates the pointer data of the corresponding pointer <highlight><bold>20</bold></highlight> in the master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> so that the pointer data includes the current storage location of the target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. For example, in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b</italic></highlight>, since the storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage changes, pointer <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>does not include pointer data that enables master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> to locate target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. To reestablish this broken link, cure routine <highlight><bold>36</bold></highlight> searches the target files <highlight><bold>18</bold></highlight> stored in computer data storage <highlight><bold>14</bold></highlight> for a match between link-id <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>stored in first master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> and link-id <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>stored in target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>. When a match is detected, cure routine <highlight><bold>36</bold></highlight> updates the pointer data in pointer <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>to include the current storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. Thereafter, during execution of master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight>, target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>can be readily called by first master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> at the storage location in computer data storage <highlight><bold>14</bold></highlight> referenced by the pointer data included in pointer <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>20</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> If a target file <highlight><bold>18</bold></highlight> has a recognizable file structure, the link-id <highlight><bold>38</bold></highlight> determined for this target file <highlight><bold>18</bold></highlight> is a binary sequence that is unique to this target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. This link-id <highlight><bold>38</bold></highlight> is then stored at predetermined locations in the file structure of the target file <highlight><bold>18</bold></highlight> and in each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>. However, if the target file <highlight><bold>18</bold></highlight> does not include a recognizable file structure, inoculate routine <highlight><bold>34</bold></highlight> calculates a checksum from the data comprising the target file <highlight><bold>18</bold></highlight> as the link-id <highlight><bold>38</bold></highlight> for this target file <highlight><bold>18</bold></highlight> and stores this link-id <highlight><bold>38</bold></highlight> at a predetermined location in each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>, but does not store this link-id <highlight><bold>38</bold></highlight> in the target file <highlight><bold>18</bold></highlight>. As discussed above, the link-id <highlight><bold>38</bold></highlight> of each target file <highlight><bold>18</bold></highlight> is stored in the master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> in connection with the pointer <highlight><bold>20</bold></highlight> for this target file <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> For each target file <highlight><bold>18</bold></highlight> having a unique binary sequence for its link-id <highlight><bold>38</bold></highlight>, cure routine <highlight><bold>36</bold></highlight> reestablishes broken links in the manner described above. When a target file <highlight><bold>18</bold></highlight> has a checksum for its link-id <highlight><bold>38</bold></highlight> that is unique to the target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>, cure routine <highlight><bold>36</bold></highlight> reestablishes broken links in substantially the same manner as described above. However, since inoculate routine <highlight><bold>34</bold></highlight> did not store the checksum for the data comprising the target file therein, when cure routine <highlight><bold>36</bold></highlight> executes, it calculates the checksum from the data comprising each target file <highlight><bold>18</bold></highlight> as the link-id <highlight><bold>38</bold></highlight> for this target file <highlight><bold>18</bold></highlight> and uses this calculated link-id <highlight><bold>38</bold></highlight>, in place of the link-id <highlight><bold>38</bold></highlight> stored in each target file <highlight><bold>18</bold></highlight> having a recognizable file structure, to reestablish broken links. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> If two target files <highlight><bold>18</bold></highlight> have the same link-ids <highlight><bold>38</bold></highlight>, these link-ids <highlight><bold>38</bold></highlight> will not provide sufficient information to reestablish broken links with their master files <highlight><bold>16</bold></highlight>. In order to reestablish these broken links, cure routine <highlight><bold>36</bold></highlight> attempts to match the pointer data, i.e., physical/logical drive data <highlight><bold>22</bold></highlight>, path data <highlight><bold>24</bold></highlight>, file name data <highlight><bold>26</bold></highlight> and/or file extension data <highlight><bold>28</bold></highlight>, of the pointer <highlight><bold>20</bold></highlight> to each target file <highlight><bold>18</bold></highlight> with data comprising the current storage location of the target file <highlight><bold>18</bold></highlight> on computer data storage <highlight><bold>14</bold></highlight>. Providing one or more of these data <highlight><bold>22</bold></highlight>-<highlight><bold>28</bold></highlight> provide a unique match, the link between the target file <highlight><bold>18</bold></highlight> and the master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> can be reestablished. For example, if two target files <highlight><bold>18</bold></highlight> having the same link-ids are located by cure routine <highlight><bold>36</bold></highlight> when it is attempting to reestablish a broken link, cure routine <highlight><bold>36</bold></highlight> attempts to match the pointer data comprising pointer <highlight><bold>20</bold></highlight> associated with the link-id <highlight><bold>38</bold></highlight> of the target file <highlight><bold>18</bold></highlight> it is trying to locate with data comprising the current storage location of each of the located target files <highlight><bold>18</bold></highlight> having the same link-id. To this end, cure routine <highlight><bold>36</bold></highlight> first determines if there is a unique match between the file name data <highlight><bold>26</bold></highlight> stored in pointer <highlight><bold>20</bold></highlight> included in the master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> and the current file name of each target file <highlight><bold>18</bold></highlight> having the same link-id. If this match is inconclusive, cure routine <highlight><bold>36</bold></highlight> determines if there is a unique match between file extension data <highlight><bold>28</bold></highlight> stored in the pointer <highlight><bold>20</bold></highlight> of the master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight> and the file extension data of each target files <highlight><bold>18</bold></highlight> having the same link-id. This process continues for physical/logical drive data <highlight><bold>22</bold></highlight> and path data <highlight><bold>24</bold></highlight> until a conclusive match is established with corresponding data of one of the target files <highlight><bold>18</bold></highlight> having the same link-id. Thereafter, cure routine <highlight><bold>36</bold></highlight> updates the pointer <highlight><bold>20</bold></highlight> in the master file <highlight><bold>16</bold></highlight> to include pointer data that references the current storage location of the corresponding target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. The foregoing order of searching data <highlight><bold>22</bold></highlight>-<highlight><bold>28</bold></highlight> of a pointer <highlight><bold>20</bold></highlight> for two or more target files <highlight><bold>18</bold></highlight> having the same link-id is preferred since most file links are broken inadvertently and the file name data <highlight><bold>26</bold></highlight> of the target file <highlight><bold>18</bold></highlight> remains unchanged. However, this search order is not to be construed as limiting the invention. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> If a conclusive match between a master file <highlight><bold>16</bold></highlight> and one of a plurality of target files <highlight><bold>18</bold></highlight> having the same link-ids cannot be established from data <highlight><bold>22</bold></highlight>-<highlight><bold>28</bold></highlight>, a search can be made of date/time data associated with or stored in each target file <highlight><bold>18</bold></highlight> in a manner known in the art and the broken link reestablished based on the date/time data. For example, a link can be reestablished between a master file <highlight><bold>16</bold></highlight> and the target file <highlight><bold>18</bold></highlight> having the oldest date/time data based on the assumption that this target file <highlight><bold>18</bold></highlight> is the first of two or more copies. Alternatively, a link can be reestablished between a master file <highlight><bold>16</bold></highlight> and the target file <highlight><bold>18</bold></highlight> having the newest date/time data based on the assumption that this target file <highlight><bold>18</bold></highlight> is the most recently amended one of two or more copies. Since other assumptions may be utilized to reestablish a link between a master file <highlight><bold>16</bold></highlight> and one of plurality of target files <highlight><bold>18</bold></highlight> having the same link-ids, the foregoing assumptions are not to be construed as limiting the invention. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>5</bold></highlight><highlight><italic>b</italic></highlight>, in accordance with another embodiment of the present invention, computer data storage <highlight><bold>14</bold></highlight> can include a data structure <highlight><bold>40</bold></highlight>. Data structure <highlight><bold>40</bold></highlight> includes a record <highlight><bold>44</bold></highlight> for each link between a master file <highlight><bold>16</bold></highlight> and a target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. Each record <highlight><bold>44</bold></highlight> includes entries entitled pointer name <highlight><bold>46</bold></highlight> and pointer data <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In this embodiment, each master file <highlight><bold>16</bold></highlight> is configured to call each target file utilizing the pointer data <highlight><bold>50</bold></highlight> stored in data structure <highlight><bold>40</bold></highlight>. More specifically, each master file <highlight><bold>16</bold></highlight> includes a pointer name <highlight><bold>42</bold></highlight> for each target file <highlight><bold>18</bold></highlight> it is configured to call. When executing a call for a target file <highlight><bold>18</bold></highlight>, the calling master file <highlight><bold>16</bold></highlight> causes the pointer name <highlight><bold>42</bold></highlight> associated with the called target file <highlight><bold>18</bold></highlight> to be compared with pointer names <highlight><bold>46</bold></highlight> included in records <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight>. In response to detecting a match between pointer names <highlight><bold>42</bold></highlight> and <highlight><bold>46</bold></highlight> included in the calling master file <highlight><bold>16</bold></highlight> and data structure <highlight><bold>40</bold></highlight>, respectively, the calling master file <highlight><bold>16</bold></highlight> utilizes the pointer data <highlight><bold>50</bold></highlight> included in the record <highlight><bold>44</bold></highlight> associated with pointer name <highlight><bold>46</bold></highlight> to locate the storage location of the called target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In the event two pointer names <highlight><bold>46</bold></highlight> are the same, data structure <highlight><bold>40</bold></highlight> can also include the master file name, e.g., master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight>, of the calling master file in a master file name <highlight><bold>48</bold></highlight> entry of each record <highlight><bold>44</bold></highlight>. Matches between a pointer name <highlight><bold>42</bold></highlight> included in the calling master file <highlight><bold>16</bold></highlight> and pointer name <highlight><bold>46</bold></highlight> included in a record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight>, and, as necessary, the name of the calling master file <highlight><bold>16</bold></highlight> and the name of the calling master file <highlight><bold>16</bold></highlight> included in a master file name entry <highlight><bold>48</bold></highlight> of the record <highlight><bold>44</bold></highlight>, can be utilized as a basis for identifying the pointer data <highlight><bold>50</bold></highlight> for the target file <highlight><bold>18</bold></highlight> being called by the master file <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In order to provide a method to reestablish broken links when the physical location of a target file in computer data storage <highlight><bold>14</bold></highlight> changes or when the path data <highlight><bold>24</bold></highlight>, file name data <highlight><bold>26</bold></highlight> and/or extension data <highlight><bold>28</bold></highlight> of the target file changes, inoculate routine <highlight><bold>34</bold></highlight> can be executed to determine a link-id <highlight><bold>38</bold></highlight> for each target file <highlight><bold>18</bold></highlight>, and to insert this link-id in the target file <highlight><bold>18</bold></highlight> and in each master file <highlight><bold>16</bold></highlight> configured to call the target file <highlight><bold>18</bold></highlight>. In this embodiment, each link-id <highlight><bold>38</bold></highlight> is associated with the pointer name <highlight><bold>42</bold></highlight> of the target file <highlight><bold>18</bold></highlight> in one of the master files <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> At an appropriate time when it is desired to reestablish broken links, cure routine <highlight><bold>36</bold></highlight> is executed. In the manner discussed above in connection with <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>, cure routine <highlight><bold>36</bold></highlight> utilizes link-ids <highlight><bold>38</bold></highlight> to determine each target file <highlight><bold>18</bold></highlight> that is called by a master file <highlight><bold>16</bold></highlight> and the storage location in computer data storage <highlight><bold>14</bold></highlight> of each target file <highlight><bold>18</bold></highlight>. Cure routine <highlight><bold>36</bold></highlight> then matches the pointer name <highlight><bold>42</bold></highlight> associated with each link-id <highlight><bold>38</bold></highlight> with a pointer name <highlight><bold>46</bold></highlight> included in a record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight> and updates the pointer data <highlight><bold>50</bold></highlight> of this record <highlight><bold>44</bold></highlight> with the current storage location of the corresponding target file <highlight><bold>18</bold></highlight> in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> For example, <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>shows that inoculated target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>has been moved in computer data storage <highlight><bold>14</bold></highlight>. In operation, cure routine <highlight><bold>36</bold></highlight> utilizes link-id <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>stored in master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> and in target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>to determine the current storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. Next, cure routine <highlight><bold>36</bold></highlight> searches data structure <highlight><bold>40</bold></highlight> for a match between pointer name <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>42</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>associated with link-id <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>stored in master file <highlight><bold>16</bold></highlight>-<highlight><bold>1</bold></highlight> and pointer name <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>included in the entry for pointer name <highlight><bold>46</bold></highlight> of a record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight>. In response to detecting a match, cure routine <highlight><bold>36</bold></highlight> updates the entry of the pointer data <highlight><bold>50</bold></highlight> of the record <highlight><bold>44</bold></highlight> having pointer name <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>to include the current storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>6</bold></highlight><highlight><italic>b</italic></highlight>, in accordance with another embodiment of the present invention, inoculate routine <highlight><bold>34</bold></highlight> can be configured to determine a unique link-id <highlight><bold>38</bold></highlight> for each target file <highlight><bold>18</bold></highlight> called by a master file <highlight><bold>16</bold></highlight> and can include this unique link-id <highlight><bold>38</bold></highlight> in the corresponding target file <highlight><bold>18</bold></highlight> and in a link-id name entry <highlight><bold>52</bold></highlight> of the corresponding record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> At an appropriate time when it is desired to reestablish broken links, cure routine <highlight><bold>36</bold></highlight> is executed. In this embodiment, cure routine <highlight><bold>36</bold></highlight> matches the link-id <highlight><bold>38</bold></highlight> of each target file with a link-id stored in a link-id name entry <highlight><bold>52</bold></highlight> of a record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight> and updates the pointer data entry <highlight><bold>50</bold></highlight> of this record <highlight><bold>44</bold></highlight> to include the current storage location of the target file in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> For example, in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>, inoculated target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>has been moved in computer data storage <highlight><bold>14</bold></highlight>. In operation, cure routine <highlight><bold>36</bold></highlight> matches the link-id <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>38</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>stored in target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>with the corresponding link-id stored in a link-id name entry <highlight><bold>52</bold></highlight> of a record <highlight><bold>44</bold></highlight> of data structure <highlight><bold>40</bold></highlight>. Based on this match, cure routine <highlight><bold>36</bold></highlight> updates the pointer data <highlight><bold>50</bold></highlight> of this record <highlight><bold>44</bold></highlight> to include the current storage location of target file <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight><highlight><bold>18</bold></highlight>-<highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>in computer data storage <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> An advantage of the embodiment described in connection with <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>5</bold></highlight><highlight><italic>b </italic></highlight>includes not having to update pointer data of pointers in each master file <highlight><bold>16</bold></highlight> when executing cure routine <highlight><bold>36</bold></highlight>. Advantages of the embodiment described in connection with <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>include not having to include link-ids or pointers in each master file <highlight><bold>16</bold></highlight> configured to call a target file <highlight><bold>18</bold></highlight>, and the use of data structure <highlight><bold>40</bold></highlight> as a storage location for records <highlight><bold>44</bold></highlight> that create the necessary links between each target file, its storage location in computer data storage <highlight><bold>14</bold></highlight> and the pointer name <highlight><bold>42</bold></highlight> included in the corresponding master file <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The present invention has been described with reference to the preferred embodiments. Obvious modifications and alterations will occur to others upon reading and understanding the proceeding detailed description. It is intended that the invention be construed as including all such modifications and alterations insofar as they come within the scope of the appended claims or the equivalents thereof. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">The invention claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of correcting broken software file links comprising the steps of: 
<claim-text>(a) determining a link-id for a first target file that is stored on a computer data storage along with a first master file which, during its execution, calls the first target file, where the first master file includes a first pointer comprised of data that the first master file utilizes to locate the first target file on the computer data storage; </claim-text>
<claim-text>(b) storing the link-id of the first target file in the first master file; </claim-text>
<claim-text>(c) locating the first target file on the computer data storage based on a match between the link-id stored in the first master file and the link-id for the first target file; and </claim-text>
<claim-text>(d) updating the data of the first pointer so that said data enables the first master file to locate the first target file on the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein step (c) occurs after the first target file is one of amended and moved so that the first master file cannot locate the first target file on the computer data storage from the data comprising the first pointer. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein: 
<claim-text>amending the first target file includes amending at least one of a file name, a file extension, a path, and a physical/logical drive of the first target file; and </claim-text>
<claim-text>moving the first target file includes moving the first target file to at least one of a different physical/logical drive and a different path of the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein, prior to and after updating the data of the first pointer in step (d), said data comprises at least one of: 
<claim-text>respective pre-update and post-update file names of the first target file; </claim-text>
<claim-text>respective pre-update and post-update file extensions of the first target file; </claim-text>
<claim-text>respective pre-update and post-update physical/logical drives where the first target file is stored on the computer data storage; and </claim-text>
<claim-text>respective pre-update and post-update paths or folders where the first target file is stored on the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>the link-id is one of a unique binary sequence and a checksum of the data comprising the first target file; </claim-text>
<claim-text>when the link-id is a unique binary sequence, step (b) includes the step of storing the link-id in the first target file; and </claim-text>
<claim-text>when the link-id is the checksum of the data comprising the first target file, step (c) includes the step of determining the link-id of the first target file again. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further including the steps of: 
<claim-text>storing on the computer data storage a second target file; and </claim-text>
<claim-text>determining a link-id for the second target file, where the link-ids of the first and second target files are the same, </claim-text>
<claim-text>wherein step (c) includes the steps of: </claim-text>
<claim-text>determining in connection with the first master file that the first and second target files have the same link-id; and </claim-text>
<claim-text>locating the first target file on the computer data storage based on at least one of (i) the data comprising the first pointer and (ii) a date/time associated with each of the first and second target files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method of correcting broken software file links comprising the steps of: 
<claim-text>(a) determining a link-id for each of a plurality of target files stored on a computer data storage along with a plurality of master files, each master file configured to call at least one target file during execution of said master file, each master file including for each target file configured to be called thereby a pointer, each pointer comprising data that enables said master file to locate a storage location where the target file corresponding to said pointer resides on the computer data storage; </claim-text>
<claim-text>(b) storing the link-id of each target file in each master file configured to call the target file; </claim-text>
<claim-text>(c) locating at least one target file on the computer data storage based on a match between the link-id for said target file and the link-id stored in at least one master file configured to call said target file; and </claim-text>
<claim-text>(d) updating the data comprising the pointer of the at least one master file configured to call said target file so that said pointer data enables said master file to locate said target file on the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein step (c) occurs after said target file has been one of amended and moved so that each master file configured to call said target file cannot locate said target file from the corresponding pointer data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>amending at least one target file includes amending at least one of a file name, a file extension, a path, and a physical/logical drive of said target file; and </claim-text>
<claim-text>moving at least one target file includes moving said target file to at least one of a different physical/logical drive and a different path of the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein: 
<claim-text>the link-id of each target file includes one of a checksum of the data comprising said target file and a unique binary sequence; </claim-text>
<claim-text>when the link-id is a unique binary sequence, step (b) includes the step of storing the link-id in the target file; and </claim-text>
<claim-text>when the link-id is the checksum of the data comprising the first target file, step (c) includes the step of determining the link-id of the target file again. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein, when the link-ids of at least two target files are the same, step (c) includes the step of locating the at least one target file on the computer data storage utilizing at least one of (i) the data comprising the pointer for the at least one target file and (ii) a date/time associated with the at least one target file. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the data comprising each pointer includes at least one of the following: 
<claim-text>a file name of said target file; </claim-text>
<claim-text>a file extension of said target file; </claim-text>
<claim-text>a physical/logical drive where said target file resides on the computer data storage; and </claim-text>
<claim-text>a path of said target file on the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method of correcting broken software file links comprising the steps of: 
<claim-text>(a) determining a link-id for a first target file that is stored on a computer data storage along with a first master file which, during its execution, calls the first target file, the computer data storage also including a first pointer accessible to the first master file for enabling the first master file to locate the first target file on the computer data storage, the first pointer comprising data regarding a location of the first target file on the computer data storage; </claim-text>
<claim-text>(b) storing the link-id of the first target file in the computer data storage in connection with the first master file; </claim-text>
<claim-text>(c) determining a location of the first target file on the computer data storage based on a match between the link-id for the first target file and the link-id stored in the computer data storage in connection with the first master file; and </claim-text>
<claim-text>(d) updating the data of the first pointer so that said updated data enables the first master file to locate the first target file on the computer data storage at the location determined in step (c). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein step (c) occurs after the first target file is at least one of amended and relocated on the computer data storage so that the first master file cannot locate the first target file on the computer data storage utilizing the data comprising the first pointer. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein: 
<claim-text>amending the first target file includes amending at least one of a file name, a file extension, a path, and a physical/logical drive of the first target file; and </claim-text>
<claim-text>moving the first target file includes moving the first target file to at least one of a different physical/logical drive and a different path of the computer data storage. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein: 
<claim-text>the link-id is one of a unique binary sequence and a checksum of the data comprising the first target file; </claim-text>
<claim-text>when the link-id is a unique binary sequence, step (b) includes the step of storing the link-id in the first target file; and </claim-text>
<claim-text>when the link-id is the checksum of the data comprising the first target file, step (c) includes the step of determining the link-id of the first target file again. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further including the steps of: 
<claim-text>storing on the computer data storage a second target file; and </claim-text>
<claim-text>determining a link-id for the second target file, where the link-ids of the first and second target files are the same, </claim-text>
<claim-text>wherein step (c) includes the steps of: </claim-text>
<claim-text>determining in connection with the first master file that the first and second target files have the same link-id; and </claim-text>
<claim-text>determining a location of the first target file on the computer data storage utilizing at least one of (i) the data comprising the first pointer and (ii) a date/time associated with the first and second target files. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, further including the steps of: 
<claim-text>storing the first pointer in a data structure accessible by the first master file; </claim-text>
<claim-text>in response to calling the first target file, the first master file locates the pointer for the first target file in the data structure; and </claim-text>
<claim-text>the first master file locates the first target file on the computer data storage utilizing the data comprising the pointer for the first target file located by the first master file in the data structure. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the first pointer is stored in the first master file. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method of correcting broken software file links comprising the steps of: 
<claim-text>(a) determining a link-id for each of a plurality of target files stored on a computer data storage along with a plurality of master files, where each target file is called by at least one master file during its execution, the computer data storage also including for each target file a pointer that is accessible to the at least one master file configured to call said target file, each pointer comprising data regarding a location of its target file on the computer data storage; </claim-text>
<claim-text>(b) storing the link-id of each target file in the computer data storage in connection with at least one master file configured to call the target file; </claim-text>
<claim-text>(c) determining a location of at least one target file on the computer data storage based on a match between the link-id for said target file and the link-id stored in the computer data storage in connection with the at least one master file configured to call said target file; and </claim-text>
<claim-text>(d) updating the data comprising the pointer for said target file so that said data enables the master file configured to call said target file to locate said target file on the computer data storage at the location determined in step (c). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein step (c) occurs after said target file is at least one of amended and relocated on the computer data storage so that the at least one master file configured to call said target file cannot locate said target file from the pointer for said target file. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, further including the steps of: 
<claim-text>storing each pointer in a data structure accessible by the master files; </claim-text>
<claim-text>locating the pointer for said target file in the data structure; and </claim-text>
<claim-text>locating said target file on the computer data storage utilizing the data comprising the pointer for said target file located in the data structure. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method as set forth in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein each pointer is stored in the master file configured to call said target file.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004978A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004978A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004978A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004978A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004978A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004978A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004978A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004978A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004978A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004978A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004978A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
