<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005425A1-20030102-D00000.TIF SYSTEM "US20030005425A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005425A1-20030102-D00001.TIF SYSTEM "US20030005425A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005425A1-20030102-D00002.TIF SYSTEM "US20030005425A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005425A1-20030102-D00003.TIF SYSTEM "US20030005425A1-20030102-D00003.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005425</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10096934</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020314</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-37191</doc-number>
</priority-application-number>
<filing-date>20010627</filing-date>
<country-code>KR</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/44</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>717</class>
<subclass>166000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Java compile-on-demand service system for accelerating processing speed of java program in data processing system and method thereof</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Dae</given-name>
<middle-name>Hoon</middle-name>
<family-name>Zee</family-name>
</name>
<residence>
<residence-non-us>
<city>Seoul</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>ROSENBERG, KLEIN &amp; LEE</name-1>
<name-2></name-2>
<address>
<address-1>3458 ELLICOTT CENTER DRIVE-SUITE 101</address-1>
<city>ELLICOTT CITY</city>
<state>MD</state>
<postalcode>21043</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A Java compile-on-demand service system and method for accelerating a processing speed of Java program in a data processing system having a relatively low performance is provided. The Java COD service system compiles a Java class file to be executed in a data processing system into a pattern which can be executed more speedily on the data processing system, and then transmits the compiled result, upon a request of the data processing system connected via a network in order to execute the Java program at a relatively faster speed. The system includes Java program providing servers, data processing systems, and a compile-on-demand server for receiving a service request, downloading a requested Java class file, compiling the downloaded Java class file, and transmitting the compiled result. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a Java&trade; compile-on-demand (COD) service system and method for accelerating the processing speed of a Java&trade; program in a data processing system (Java&trade; is a trademark of Sun Microsystems, Inc. and hereinafter will be denoted as Java simply), for example, an information processing terminal such as a personal digital assistant (PDA) or mobile telephone terminal, and more particularly, to a Java compile-on-demand service system and method for compiling a Java class file to be executed in a data processing system into a pattern which can be executed more speedily on the data processing system, and then transmitting the compiled result to the data processing system, upon a request of the data processing system connected via a network in order to execute a Java program at a relatively faster speed in a system having a relatively low performance, to thereby accelerate the processing speed of a Java program in the data processing system. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND ART </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In general, Java is being widely used in developing various applications such as a network related field, on the basis of a neutral performance and an excellent stability of a Java platform since it was issued in 1995. Java has been recently mounted in a mobile telephone terminal, and thus used in a game and an electronic commerce service which use a wireless Internet. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The Java has two kinds of meanings. One denotes a programming language which is used for a programming work such as FORTRAN, COBOL, PASCAL or C. The other denotes a Java platform which points out a Java API (Application Programming Interface) necessary for a programming work by use of a Java language, and a Java virtual machine (JVM) for executing a Java program. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> structure of the Java platform can be configured to have a system operating system (OS) <highlight><bold>1</bold></highlight> for taking in charge of controlling a variety of hardware in a Java platform mounted system, a Java virtual machine (JVM) <highlight><bold>2</bold></highlight> and a Java API <highlight><bold>2</bold></highlight><highlight><italic>a </italic></highlight>which operate in the system OS <highlight><bold>1</bold></highlight>, and a Java program <highlight><bold>3</bold></highlight> which operates on the JVM <highlight><bold>2</bold></highlight> and the Java API <highlight><bold>2</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A general Java program source file is configured to have a text file of an extension of *.java. A Java compiler reads a source code from a source file, compiles each function in the source into a virtual machine language called a bytecode, and then produces an execution module having an extension of *.class by each class included in the source. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The execution module is generally called a class file. For reference, a CPU machine language for a data processing system called an information processing terminal in which a program is actually executed is called a native code. Also, an execution module which can be executed in a system OS mounted in the data processing system is called a native component. In the case of a general IBM personal computer (PC) which uses a Windows OS (IBM is a trademark of IBM Corporation and Windows is a trademark of Microsoft Corporation), files having extensions of *.exe, *.dll and *.ocx correspond to the native components. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> When a class file is produced, information of a name and a function factor of each function included in the class file, information of a name and a type of each variable, and information of a function and a variable of an external class file referenced in each function, are all stored. accordingly, even in the case that a Java class file is downloaded via a network, a class file can be easily used without having particular external information. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> Java virtual machine <highlight><bold>5</bold></highlight> corresponding to the JVM <highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> includes a class loader <highlight><bold>5</bold></highlight><highlight><italic>a</italic></highlight>, a bytecode interpreter <highlight><bold>5</bold></highlight><highlight><italic>b</italic></highlight>, and a native library <highlight><bold>5</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The class loader <highlight><bold>5</bold></highlight><highlight><italic>a </italic></highlight>reads a Java class file from a network or file system, disposes the read Java class file on a memory appropriately according to internal information included in the class file, and then plays a role of initializing an internal state. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Whenever each function is called, the bytecode interpreter <highlight><bold>5</bold></highlight><highlight><italic>b </italic></highlight>is a system which analyzes a Java bytecode included in the function and executes a native code having the same effect as the Java bytecode. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> A bytecode is not made in order to be used for a particular CPU as in a general machine language, but is designed to be executed in a virtual CPU made of software. The bytecode interpreter <highlight><bold>5</bold></highlight><highlight><italic>b </italic></highlight>plays the role of the virtual CPU. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The native library <highlight><bold>5</bold></highlight><highlight><italic>c </italic></highlight>indicates a system library in which standard functions related to a control of hardware necessary for executing a Java program are implemented based on a system OS and a hardware environment of a data processing system such as an information processing terminal in which a Java virtual machine is mounted. The native library <highlight><bold>5</bold></highlight><highlight><italic>c </italic></highlight>includes a network library <highlight><bold>5</bold></highlight><highlight><italic>d </italic></highlight>for administrating a network and a file system, screen control and input control libraries <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>5</bold></highlight><highlight><italic>f </italic></highlight>for controlling a screen and an input for matching a standardized function, and a memory administration library <highlight><bold>5</bold></highlight><highlight><italic>g </italic></highlight>for administrating a memory according to execution of programs. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The hardware control functions included in the native library include only minimized essential standard functions so as to be easily implemented under a variety of system OS environments. The bytecode interpreter controls hardware through only the native library. Accordingly, a Java virtual machine can be easily implanted even in a variety of system OS and hardware environments. As a result, it is possible to execute a Java program in the same manner even in a variety of data processing systems which use respectively different CPUs and OSs. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> However, in the case that a Java program is executed in a virtual machine having the above-described configuration, a program processing speed becomes slow 20 to 100 times through an interpreting process of a bytecode interpreter, in comparison with the case that a native code programmed in a language such as C or Pascal is executed in order to obtain the same effect. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In order to solve the above speed retardation problem, a computer higher than a general PC class chiefly uses a JIT (Just In Time Compile) technology. A JIT compile indicates a system which compiles a Java bytecode into a machine language, that is, a native code for matching a CPU in the system, immediately before or after any Java function is executed, stores the compiled native code for each function, and then directly executes the compiled native code without passing through an interpreting process whenever a corresponding function is called, to thereby greatly accelerate a processing speed. A program taking charge of the above functions is called a JIT compiler. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Thus, a processing speed of the JIT compile technology becomes slow 3 to 10 times in comparison with the case that a native code programmed in a language such as C or Pascal is executed in order to obtain the same effect as that of the Java program. As a result, the processing speed of the JIT compile technology become fast 5 to 10 times as that processed through an existing interpreting process. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> However, the bytecode interpreter can be implemented relatively easily by using a high level language such as C or Pascal, but the JIT compiler should directly compile such a high level language into a machine language for matching each CPU. As a result, it is very difficult to implement the JIT compiler. A capacity of memory necessary for storing and executing the program of the JIT compiler becomes large. Thus, in the case of devices which use a variety of CPUs as in a mobile telephone terminal, a PDA, and a set-top-box, it is very difficult to use the JIT compiler. In particular, since such a portable information processing terminal uses a CPU of a lower performance than in a general PC, lowering of a processing speed of a Java program causes a larger problem. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Meanwhile, although it is not widely used, an AOT (Ahead Of Time) compile technology exists as an alternative method for accelerating a processing speed of a Java program. The AOT compile indicates a system which compiles all Java class files used in a system into native components which can be executed in a CPU and a system OS in an information processing terminal, in advance, and loads the compiled result in the system. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Programs which read Java source files or class files, and then produces native components for matching a particular CPU or compile the read files into other programming languages which can produce native codes, that is, C, C<highlight><superscript>&plus;&plus;</superscript></highlight>, and Pascal, are usually called Java AOT compilers. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Since the Java AOT compiler is executed in a separated system, a Java virtual machine in an information processing terminal which actually executes a Java program does not need a particular bytecode interpreter or JIT compiler. Thus, the Java AOT compiler is a technology for accelerating a Java program processing speed which can be used even in a compact device having a small capacity of memory. Also, the Java AOT compiler has a nearly same processing speed as a C or C<highlight><superscript>&plus;&plus;</superscript></highlight>program which executes the same function. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> However, since the above-described AOT compiler system cannot execute Java programs other than a Java program incorporated at the time of fabricating an information processing terminal, a mobile type information processing terminal which should execute various kinds of Java programs under certain circumstances cannot use the AOT compiler. </paragraph>
</section>
<section>
<heading lvl="1">DISCLOSURE OF THE INVENTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> To solve the above problems, it is an object of the present invention to provide a Java compile-on-demand service system and method for accelerating the processing speed of a Java program in a data processing system, for example, an information processing terminal such as a personal digital assistant (PDA) or a mobile telephone terminal, which enables any Java programs on the Internet to be executed at very fast speed in the data processing system which uses a limited capacity of a memory and a CPU having a relatively lower speed. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> To accomplish the above object of the present invention, there is provided a Java compile-on-demand service system for accelerating a processing speed of a Java program in a data processing system, the Java compile-on-demand service system comprising: a plurality of Java program providing servers for providing at least one Java class file on the Internet; a plurality of data processing systems which can be accessed on the Internet; and at least one compile-on-demand server for receiving a service request from the plurality of data processing systems, downloading a requested Java class file from the Java program providing server, compiling the downloaded Java class file into a pattern which can be executed more quickly in the data processing system, and transmitting the compiled result. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The compile-on-demand server comprises at least one compiler which compiles a Java class file made of a Java virtual machine language of bytecodes into an execution file, that is, a native component which can directly executed in a CPU mounted in the data processing system without having a bytecode interpreter or JIT compiler. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The compile-on-demand service comprises at least one compiler, a database storing the native component compiled by the compiler, and a compile information table storing a compile name and a compile condition necessary for producing the native component appropriate for the data processing system. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The data processing system comprises a native library in which hardware control functions necessary for executing the native component compiled Java program are implemented for matching each system OS and CPU, and a native component loader for transmitting a service request message to the compile-on-demand server, downloading a target matter requested from the compile-on-demand server, that is, a native component, and relocating the downloaded native component in a memory and executing the same. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> According to another aspect of the present invention, there is provided a Java compile-on-demand service method for accelerating a processing speed of a Java program in a data processing system, the Java compile-on-demand service method comprising the steps of: (a) receiving a service request message including information about a location of a Java class file to be compiled into a native component and a kind of the data processing system, from the data processing system mounted with a native component loader for relocating a native library and a native component each made of hardware control functions necessary for executing a Java program in a memory and executing the same; (b) analyzing the service request message received from the data processing system, downloading a Java class file via the Internet, and compiling the downloaded Java class file into a native component which can be executed in the data processing system having requested the compiling service; and (c) transmitting the compiled native component to the data processing system and executing the same. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The Java compile-on-demand service method for accelerating a processing speed of a Java program in a data processing system, further comprises the step of storing the native component produced through step (b) together with the service request message, and transmitting the native component to the data processing system if the same service request message is received from another data processing system. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> When any Java programs on the Internet are executed in a data processing system which uses a limited capacity of a memory and a processor having a relatively low performance, the present invention compiles the Java programs into a pattern which can be executed at faster speed, by using a compile-on-demand server connected via a network without incorporating a particular JIT compiler in the data processing system, and executes the same, to thereby accelerate a processing speed of the Java program at maximum. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The above object and other advantages of the present invention will become more apparent by describing the preferred embodiments thereof in more detail with reference to the accompanying drawings in which: </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a configurational view for explaining Java platform; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a configurational view for explaining the structure of a Java virtual machine; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram for explaining a Java compile-on-demand service system for accelerating a processing speed of Java program in a data processing system such as an information processing terminal called a personal digital assistant (PDA) according to the present invention; and </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart view for explaining a Java compile-on-demand service method for accelerating a processing speed of Java program in a data processing system such as an information processing terminal called a personal digital assistant (PDA) according to the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">BEST MODE FOR CARRYING OUT THE INVENTION </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> A preferred embodiment of the present invention will be described below in more detail with reference to the accompanying drawings <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> Java compile-on-demand service system for accelerating a processing speed of a Java program in a data processing system, for example, an information processing terminal according to the present invention, includes Java program providing servers <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight> which provide at least one Java class file via the Internet, data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight>, such as information processing terminals which can be accessed on the Internet, and compile-on-demand servers <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight> for downloading Java class files requested by the data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight>, from the Java program providing servers <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight>, compiling the downloaded Java class files into native components of patterns which can be executed in the data processing systems, and transmitting the compiled results, respectively. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The compile-on-demand server comprises at least one compiler which compiles a Java class file made of a Java virtual machine language of bytecodes into an execution file, that is, a native component which can directly executed in a CPU mounted in the data processing system without having a bytecode interpreter or JIT compiler. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The compile-on-demand service comprises at least one compiler, a database storing the native component compiled by the compiler, and a compile information table storing a compile name and a compile condition necessary for producing the native component appropriate for the data processing system. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> comprises a system OS <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>c </italic></highlight>matching each system, a native library <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>taking in charge of hardware control necessary for executing the native component, and a native component loader <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The native component loader <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>transmits a service request message to the compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight>, receives a native component from the compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight>, and relocates the received native component in a memory and executing the same. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The native library <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>denotes a system library which embodies functions related with hardware control necessary for executing a Java program, and plays the same role of that of the native library mounted on an existing Java virtual machine. However, the native library need not be necessarily implemented according to a standard, differently from the native library mounted on the existing Java virtual machine, and also the configuration thereof can be altered according to a use purpose of the terminal. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In general, a function of relocating a native component downloaded via the compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> and executing the same can be replaced by that of a system OS mounted on the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> That is, in the case that a Windows OS is used, native components having extensions such as *.exe, *.dll and *.ocx as a type of the file downloaded via the compile-on-demand server in the native component loader are relocated on a memory and executed by using an input and output administration function and a memory administration function provided by the system OS without having a particular native component. In most cases, the system OS <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>c </italic></highlight>incorporated in the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> provides a function of relocating a particular program on a memory and executing the same. Thus, the description of a method for implementing the native component loader <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>will be omitted. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> denotes a service operating program for processing a compile-on-demand service and a computer system having the service operating program therein, which includes a plurality of AOT compilers <highlight><bold>20</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>20</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, compile information tables <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>in which system information is recorded for each of the plurality of data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight>, and databases <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>storing the results compiled for each of the plurality of data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The AOT compiler <highlight><bold>20</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>20</bold></highlight><highlight><italic>d </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>plays a role of compiling a Java class file into a native component which can be executed in the data processing systems <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>. In the case that requests from a variety of data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight> are to be processed, an AOT compiler should be installed in order to match each of data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In other words, as shown in <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> first compile-on-demand server <highlight><bold>20</bold></highlight> can be implemented with an AOT compiler <highlight><bold>20</bold></highlight><highlight><italic>c </italic></highlight>having a CPU of an A type and an AOT compiler <highlight><bold>20</bold></highlight><highlight><italic>d </italic></highlight>having a CPU of a B type which correspond to two kinds of CPUs in a single compile-on-demand server. A second compile-on-demand server <highlight><bold>22</bold></highlight> includes an AOT compiler <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>having a CPU of a C type which corresponds to a kind of CPU. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The database <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>which is used for storing the native component produced by the AOT compiler <highlight><bold>20</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>20</bold></highlight><highlight><italic>d </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>is a device which stores position information and the compiled native component for the pre-processed Java class file. The database is used to avoid a repetition of a compile work and to directly transmit the pre-processed result, in the case that a request for re-transmission of the same class file is received from the data processing systems <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The compile information table <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>is used in a compile-on-demand server, to receive a request for a compile-on-demand service from a variety of kinds of the data processing systems <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>, and process the received compile-on-demand service. The table contains a name of an AOT compiler and information for setting an execution condition of the AOT compiler for each identification code of the native library <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>mounted on the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The operation process of the Java compile-on-demand service system for accelerating a processing speed of a Java program in a mobile data processing system according to the present invention having the above-described configuration, will be described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> A shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, in order to provide a compile-on-demand service with respect to a Java program according to the present invention, a compile-on-demand service network should be constructed so that Java program providing servers <highlight><bold>10</bold></highlight> and <highlight><bold>12</bold></highlight> for providing various Java programs via the Internet, data processing systems <highlight><bold>30</bold></highlight> and <highlight><bold>32</bold></highlight> mounted with the native libraries <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>and the native components <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>32</bold></highlight><highlight><italic>a</italic></highlight>, and compile-on-demand servers <highlight><bold>20</bold></highlight> and <highlight><bold>22</bold></highlight> are connected with one another, which can be easily constructed through the general Internet network. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In the present invention, a compile-on-demand service with respect to a Java program requested from a plurality of various kinds of data processing systems via the constructed network as described above, will be provided through the following processes. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> 1. First Step </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> receives a service request message with respect to a Java program compile from the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> (S<highlight><bold>11</bold></highlight>, S<highlight><bold>12</bold></highlight>, S<highlight><bold>21</bold></highlight>) </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The service request message includes a position of the Java program providing server <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight> where a desired Java program exists, a position of the Java program in the corresponding Java program providing server <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight>, and identification codes for identifying the kinds of the data processing systems <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> having requested for the compile service. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The Java program providing server <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight> can be configured by an Internet server which provides only a particular Java program. However, the Java program providing server <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight> includes most of Internet servers which can be accessed to the Internet to provide a Java program. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> 2. Second Step </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> analyzes the service request message received from the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight>, and ascertains whether the native component which has been compiled so that the requested Java class file can be executed in the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> having requested from the service has already been stored in the database <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>(S<highlight><bold>22</bold></highlight>). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In the case that the compiled native component has been stored in the database <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>via the ascertained result, a corresponding native component is read out from the database <highlight><bold>20</bold></highlight><highlight><italic>b </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, to then be transmitted to the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> and executed therein. Then, the following third through fifth operations will be omitted. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> 3. Third Step </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In the case that there is no compiled native component which matches the kind of the data processing system having requested a service, the data processing system accesses the Java program providing server <highlight><bold>10</bold></highlight> or <highlight><bold>12</bold></highlight> designated by the received service request message, and downloads the designated Java class file (S<highlight><bold>23</bold></highlight>). </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> 4. Fourth Step </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> selects an AOT compiler which can produce a native component for the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> from the compile information table <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, by using the identification code of the data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> included in the service request message, and drives a corresponding AOT compiler according to an execution condition set in the compile information table <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, to thereby compile the downloaded Java class file into the native component (S<highlight><bold>24</bold></highlight>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> 5. Fifth Step </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> stores the native component produced by the AOT compiler <highlight><bold>20</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>20</bold></highlight><highlight><italic>d </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>in the database <highlight><bold>20</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, together with the Java class file position information included in the service request message received in the first step (S<highlight><bold>25</bold></highlight>), and transmits the native component to the corresponding data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> (S<highlight><bold>26</bold></highlight>). </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> 6. Sixth Step </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The data processing system <highlight><bold>30</bold></highlight> or <highlight><bold>32</bold></highlight> receives the native component from the compile-on-demand server <highlight><bold>20</bold></highlight> or <highlight><bold>22</bold></highlight> via the native component loader <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>(S<highlight><bold>13</bold></highlight>), relocates the received native component in a memory and executes the program (S<highlight><bold>14</bold></highlight>). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> As described above, the present invention having the configuration as described above provides an effect of compiling a Java program to be executed in a data processing system into a pattern which can be executed more speedily on a compile-on-demand server connected via the network without having a particular JIT compiler in the data processing system, in order to execute any Java program on the Internet in a data processing system using a processor having a limited capacity of a memory and a relatively low performance, to thereby accelerate a processing speed of the Java program. </paragraph>
</section>
<section>
<heading lvl="1">INDUSTRIAL APPLICABILITY </heading>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> As described above, the present invention can be easily and smoothly used in an on-line and an off-line game and an electronic commerce service all of which are made up of Java programs in a portable information processing device which uses wireless Internet communications such as a mobile telephone terminal, which contributes to development of a wireless Internet related service. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As described above, the present invention has been described with respect to a particularly preferred embodiment. However, the present invention is not limited to the above embodiment, and it is possible for one who has an ordinary skill in the art to make various modifications and variations, without departing off the spirit of the present invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A Java compile-on-demand service system for accelerating a processing speed of a Java program in a data processing system, the Java compile-on-demand service system comprising: 
<claim-text>a plurality of Java program providing servers for providing at least one Java class file on the Internet; </claim-text>
<claim-text>a plurality of data processing systems which can be accessed on the Internet; and </claim-text>
<claim-text>at least one compile-on-demand server for receiving a service request from the plurality of data processing systems, downloading a requested Java class file from the Java program providing server, compiling the downloaded Java class file into a pattern which can be executed more quickly in the data processing system, and transmitting the compiled result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The Java compile-on-demand service system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said compile-on-demand server comprises at least one compiler which compiles a Java class file made of a Java virtual machine language of bytecodes into a native component which can directly executed in a CPU mounted in the data processing system without having a bytecode interpreter or JIT compiler. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The Java compile-on-demand service system of claim <highlight><bold>1</bold></highlight>, wherein said compile-on-demand service comprises: 
<claim-text>at least one compiler which compiles a Java class file made of a Java virtual machine language of bytecodes into a native component which can directly executed in a CPU mounted in the data processing system without having a bytecode interpreter or JIT compiler; </claim-text>
<claim-text>a database storing the native component compiled by the compiler; and </claim-text>
<claim-text>a compile information table storing a compile name and a compile condition necessary for producing the native component appropriate for the data processing system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The Java compile-on-demand service system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said data processing system comprises a native library in which hardware control functions necessary for executing the Java program are implemented, and a native component loader for downloading a native component and relocating the downloaded native component in a memory and executing the same. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The Java compile-on-demand service system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said data processing system is anyone of a mobile telephone terminal, a PDA, and a set-top-box. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A Java compile-on-demand service method for accelerating a processing speed of a Java program in a data processing system, the Java compile-on-demand service method comprising the steps of: 
<claim-text>(a) receiving a service request message including information about a location of a Java class file to be compiled into a native component and a kind of the data processing system, from the data processing system mounted with a native component loader for relocating a native library and a native component each made of hardware control functions necessary for executing a Java program in a memory and executing the same; </claim-text>
<claim-text>(b) analyzing the service request message received from the data processing system, downloading a Java class file via the Internet, and compiling the downloaded Java class file into a native component which can be executed in the data processing system having requested the compiling service; and </claim-text>
<claim-text>(c) transmitting the compiled native component to the data processing system and executing the same. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The Java compile-on-demand service method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising the step of storing the native component produced through step (b) together with the service request message, and transmitting the native component to the data processing system if the same service request message is received from another data processing system.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005425A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005425A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005425A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005425A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
