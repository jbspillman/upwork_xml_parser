<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001893A1-20030102-D00000.TIF SYSTEM "US20030001893A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00001.TIF SYSTEM "US20030001893A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00002.TIF SYSTEM "US20030001893A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00003.TIF SYSTEM "US20030001893A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00004.TIF SYSTEM "US20030001893A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00005.TIF SYSTEM "US20030001893A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00006.TIF SYSTEM "US20030001893A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00007.TIF SYSTEM "US20030001893A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00008.TIF SYSTEM "US20030001893A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00009.TIF SYSTEM "US20030001893A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00010.TIF SYSTEM "US20030001893A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00011.TIF SYSTEM "US20030001893A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00012.TIF SYSTEM "US20030001893A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00013.TIF SYSTEM "US20030001893A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00014.TIF SYSTEM "US20030001893A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00015.TIF SYSTEM "US20030001893A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00016.TIF SYSTEM "US20030001893A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00017.TIF SYSTEM "US20030001893A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00018.TIF SYSTEM "US20030001893A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00019.TIF SYSTEM "US20030001893A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00020.TIF SYSTEM "US20030001893A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00021.TIF SYSTEM "US20030001893A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00022.TIF SYSTEM "US20030001893A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00023.TIF SYSTEM "US20030001893A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00024.TIF SYSTEM "US20030001893A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00025.TIF SYSTEM "US20030001893A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00026.TIF SYSTEM "US20030001893A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00027.TIF SYSTEM "US20030001893A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00028.TIF SYSTEM "US20030001893A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030001893A1-20030102-D00029.TIF SYSTEM "US20030001893A1-20030102-D00029.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001893</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10100867</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020319</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>762000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>345</class>
<subclass>968000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System for dynamically configuring a user interface display</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60278280</doc-number>
<document-date>20010323</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>John</given-name>
<middle-name>D.</middle-name>
<family-name>Haley</family-name>
</name>
<residence>
<residence-us>
<city>Honey Brook</city>
<state>PA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Siemens Corporation</name-1>
<name-2>Intellectual Property Department</name-2>
<address>
<address-1>186 Wood Avenue South</address-1>
<city>Iselin</city>
<state>NJ</state>
<postalcode>08830</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for dynamically configuring a user interface display, including image elements for prompting user data entry, includes an input data processor for receiving input data via a prompt element for display in the user interface. A database associates a condition with input data received via the prompt element An image element processor determines whether the received input data satisfies the condition and at least either activates or inactivates an image element in the user interface display in response to the determination. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a non-provisional application claiming priority from previously filed provisional application serial No. 60/278,280 filed Mar. 23, 2001.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention pertains generally to a computer user interface display configuration and processing system, and more specifically to a nonprocedural method for interfacing a data buffer to event driven user interface controls. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Forms displayed on internet browsers via the World Wide Web are typically defined by the use of Hypertext Markup Language (HTML) or Dynamic Hypertext Markup Language (DHTML). DHTML is a product of the Microsoft Corporation of Redmond, Wash. DHTML incorporates the concept of the Form as a means of presenting Graphical User Interface (GUI) controls for manipulation by the user. DHTML documents are textual documents which contain tags representing such controls. Graphically, these controls are image elements which display data, possibly along with a caption identifying the data, for the user, and prompt the user to manipulate the displayed data, if desired. These prompt elements allow a user to view, add, replace or edit data, and may also contain initial data supplied by the server when the form is initially sent from the server to the web browser. An example of a DHTML tag specifying an inputbox control with initial data &ldquo;19344&rdquo; might be written as: </paragraph>
<paragraph lvl="0"><in-line-formula>&lt;INPUT ID&equals;ctlZipCode&gt;19344&lt;/INPUT&gt;</in-line-formula></paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> When the user is finished entering data, the form is submitted back to the server. When a DHTML form is submitted to a server, the contents of all of the prompt elements are collected by the Web browser and forwarded as part of the Universal Resource Locator (URL) to the Web server in the form of control name/control value pairs. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In some applications, external data from an external database is sent from the server to the client to be manipulated by the user via the prompt elements in the form. Specific portions of the external data are displayed on the form in corresponding prompt elements. The user then manipulates the data in the prompt elements. The newly added, or edited data is then sent back to the server which updates the external database in response. In such an application, the external data must be associated with prompt elements on the form. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Data binding refers to a software subroutine which associates data from the external database with the prompt elements for manipulating the data within the form. The architecture of the existing state of the data binding art, as suggested by Microsoft, is depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. This known data binding mechanism relies on an architecture having four components, namely a data source object (DSO), data consumers, a binding agent and a table repetition agent. In order to bind data to prompt elements present on an HTML page, a DSO must exist on that page. The DSO may require an Open Database Connectivity (OBDC) string and/or a Structured Query Language (SQL) statement or only a Universal Resource Locator (URL). SQL is discussed in <highlight><italic>SQL </italic></highlight>- <highlight><italic>The Complete Reference </italic></highlight>by James R. Groff and Paul N. Weinberg, McGraw-Hill Professional Publishing (1999) ISBN 007-211-8458. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The DSO may also be defined in terms of the Extensible Markup Language (XML). XML is discussed in <highlight><italic>Essential XML: Beyond Markup </italic></highlight>by Don Box, Aaron Skonnard and John Lam, Addison-Wesley Publishing Co. (2000) ISBN 020-170-9147. An XML document may define a hierarchical data structure and contain the data thus defined. In order to use an XML document one must add a Java applet element, defining the operation of the DSO, to the HTML page. Java is a product of Sun Microsystems, Inc of Palo Alto, Calif. The Java applet conditions the client computer to retrieve an XML document containing the external data, parse the data, and provide specified data to the bound prompt elements on the page. In this manner, the data consuming prompt elements are isolated from the details of data in the XML document. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The Microsoft DHTML data binding software utilizes the Microsoft ActiveX Data Object (ADO) programming model which is discussed in <highlight><italic>Understanding ActiveX and OLE </italic></highlight>by David Chappell, published by the Microsoft Press, Redmond, Wash., ISBN 1-572-31216-5. The ADO programming model is a recordset model. The ADO recordset contains two components, namely a collection of Fields and a collection of Properties. Each record within an ADO recordset has a collection of Fields. The Fields collection is the default collection for an ADO recordset object. Each Field has a Name, Value and Count property. The Count property indicates the number of Fields in the collection. In the ADO recordset Properties collection each property has a Name, Type and Value. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The ADO programming model permits only serial addressing of a record set, that is, only one record set at a time is accessible to the DSO. One result of using the ADO protocol is that there is no practical method of binding a group of prompt elements, i.e. one form, to more than one record set object at a time. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In the context of forms, a group of prompt elements is a tabular grouping of prompt elements that may be aligned either vertically and/or horizontally. Each prompt element prompts a user to either make a selection or enter data. In some applications, for example for manipulation of hierarchically related data, it may be desired for data for presentation in a grouping of prompt elements on a form to come from several underlying record set objects. However, the Microsoft ADO record set model does not integrate well with an object oriented hierarchical data buffer structure in which it is desired to display data from multiple record sets together. To use the Microsoft ADO record set model in such a manner, an HTML document author must write separate DSO code objects to manipulate multiple record sets in order to bind the desired data to corresponding prompt elements in the form. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> When a DHTML document is sent by a server to a client machine the document may already have embedded data. The client&apos;s web browser subsequently receives and displays whatever data is already contained in the server generated document. When a DHTML form has some of its data altered by the client user, the form is returned to the server in its entirety, that is, both the data and the underlying form is retransmitted to the server. The repeated sending of redundant information regarding a largely static form creates unnecessary network traffic. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Numerous examples of data binding protocols exist. U.S. Pat. No. 6,014,677, entitled DOCUMENT MANAGEMENT DEVICE AND METHOD FOR MANAGING DOCUMENTS BY UTILIZING ADDITIVE INFORMATION, issued to Hayashi et al. discloses a binding information creating device which associates a document with subsequent evaluation data based on earlier information contained within the document. A tag template is defined by an onscreen editor, and a tag template database is created to associate coinciding tags with the same document. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> U.S. Pat. No 5,940,075, entitled METHOD FOR EXTENDING THE HYPERTEXT MARKUP LANGUAGE (HTML) TO SUPPORT ENTERPRISE APPLICATION DATA BINDING, issued to Mutschler, III et al. discloses a web server program and associated database for storing description language of a form to be displayed. The server is coupled to a host having a CPU executing a legacy application containing the form. The server opens the form and associates data names with data values received from the host and sends them to the client. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> U.S. Pat. No. 6,023,271, entitled FRAMEWORK FOR BINDING DATA VIEWERS/DATA MANIPULATION WITH ONE TO MANY OBJECTS THROUGH INTROSPECTION, issued to Quaeler-Bock et al., discloses a data structure that enables a client application to bind a set of GUI components to the attributes of at least one Business Object (BO). </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> U.S. Pat. No. 5,555,365, entitled METHOD AND SYSTEM FOR OPTIMIZING STATIC AND DYNAMIC BINDING OF PRESENTATION OBJECTS WITH THE OBJECT DATA THEY REPRESENT, issued to Selby et al. discloses the creation of a table that specifies relationships between GUI objects and the application object. Each time the application object is initialized the table is used to specify objects within the application object. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> U.S. Pat. No. 5,430,836, entitled APPLICATION CONTROL MODEL FOR COMMON USER INTERFACE ACCESS, issued to Wolf et al., discloses an Application Control Module (ACM) that is executable by the applications. The ACM includes functional elements for initializing the data in the application, drawing or presenting a display screen defined by the data, running or processing user input events in accordance with the operation defined by the data, and closing the application. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> U.S. Pat. No. 5,832,532, entitled MODEL INDEPENDENT AND INTERACTIVE REPORT GENERATION SYSTEM AND METHOD OF OPERATION, issued to Kennedy et al. discloses an interactive report generation system that includes a compiler, an evaluator, a renderer, and model interface functions. The compiler receives report, layout, and worksheet definitions, accesses model interface functions, and generates a report template. The evaluator receives the report template, accesses model interface functions, accesses a user model, and generates a report instance. A renderer receives the report instance in order to display and allow interaction with that report instance. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Another problem which is present when processing data from an external database is that some of the data have values which are subject to a constraint. Further, some of the data have values which are subject to a constraint which depends on the values of other data. In addition, the status of some data may be changed based on the value of other data. For example, a piece of data may become required if a second piece of data has a first value and unnecessary or irrelevant if that second piece of data has a second value. A binding mechanism is desirable which, in addition to linking data items from the external database to prompt elements in the form, will dynamically configure all of the prompt elements on the form based on the values entered into each prompt element and which will enforce the data constraints described above and ensure that the data returned to the external database remains internally consistent. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In accordance with principles of the present invention, a system for dynamically configuring a user interface display, including image elements for prompting user data entry, includes an input data processor for receiving input data via a prompt element for display in the user interface. A database associates a condition with input data received via the prompt element An image element processor determines whether the received input data satisfies the condition and at least either activates or inactivates an image element in the user interface display in response to the determination.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWING </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In the drawing: </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a prior art data binding component architecture; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of a dynamic data binding configuration system constructed according to the principles of the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a pictorial representation of an exemplary form useful in understanding the operation of the present invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an example of a binding database table created according to the principles the present invention; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow chart depicting the initial form load processing steps of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an example of a table depicting a first group of data constraints associated with a form according to the principles of the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an example of a table depicting a second group of data constraints associated with a form according to the principles of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart depicting the processing of a form after form data has been altered; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a JavaScript code listing that performs a dynamic validation of an image element; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 10A, 10B</cross-reference>, <highlight><bold>10</bold></highlight>C and <highlight><bold>10</bold></highlight>D, taken together, depict a sequential HTML code listing depicting the display of and processing of data in portions of the form depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, taken together, depict a sequential XML code listing that creates an XML document that is embedded in the HTML form depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a JavaScript code listing that will bind XML data items received from a server machine to specified controls appearing in the form depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> according to data description in the XML document of <cross-reference target="DRAWINGS">FIG. 11</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 13A and 13B</cross-reference>, taken together, depict a sequential JavaScript code listing that will bind an XML data item received from a server machine to one specified control appearing in the form depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> according to the data description in the XML document of <cross-reference target="DRAWINGS">FIG. 11</cross-reference>; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a Javascript code listing of a binding routine that will exchange data received from a server machine with a control input box appearing in a form according to the data description in the XML document of <cross-reference target="DRAWINGS">FIG. 11</cross-reference>; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 15A, 15B</cross-reference>, <highlight><bold>15</bold></highlight>C, <highlight><bold>15</bold></highlight>D, <highlight><bold>15</bold></highlight>E, <highlight><bold>15</bold></highlight>F, <highlight><bold>15</bold></highlight>G and <highlight><bold>15</bold></highlight>H, taken together, depict a sequential JavaScript code listing that will exchange XML data received from a server machine with a control such as a data list/combo box appearing in a form according to the data description in an XML document by populating the list from specified data items in the XML document and returning a user selection to a different data item in the XML document; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> depicts a JavaScript file listing that will insert a resolved XQL value into an XML element associated with a form; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> depicts a Javascript code listing that highlights those prompt elements in a form associated with a required XML element; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 18A and 18B</cross-reference>, taken together, depict a sequential Javascript code listing that determines which controls appearing in a form are pointing to a specific branch in an XML document; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 19A and 19B</cross-reference>, taken together, depict a sequential JavaScript code listing that highlights a specified control appearing in an XML document; and </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> depicts a JavaScript code listing that highlights the label of a specified control in an XML document.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram which depicts the processing system <highlight><bold>1</bold></highlight> of the present invention. The system <highlight><bold>1</bold></highlight> is implemented in a personal computer which contains software and hardware (not shown) permitting a connection to the internet or other network populated by other computers. Operation of the system begins with a user viewing information displayed on a monitor or other user interface display device <highlight><bold>2</bold></highlight>. Various types of image elements may be visible on the screen <highlight><bold>2</bold></highlight>. The image elements are typically part of a document, form, questionnaire, spreadsheet, web page or browser. Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the display <highlight><bold>2</bold></highlight> depicts, for example, an HTML form <highlight><bold>3</bold></highlight> in which the image elements include various prompt elements, e.g. <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>7</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight> and <highlight><bold>17</bold></highlight>, arranged in a tabular orientation as they would appear on the user display interface <highlight><bold>2</bold></highlight>. As illustrated, these prompt elements may be aligned vertically and/or horizontally. The form <highlight><bold>3</bold></highlight> includes a prompt element <highlight><bold>4</bold></highlight> in which a street address may be entered, a prompt element <highlight><bold>5</bold></highlight> in which a zip code may be entered, a prompt element <highlight><bold>6</bold></highlight> in which a state may be selected from a drop down or pick list type of menu, and a prompt element <highlight><bold>7</bold></highlight> in which a city may be entered, and so forth. This information forms a physical or mailing address. Data may be entered into the form <highlight><bold>3</bold></highlight> by the user and/or may be obtained from the Server machine when the form initially loads onto the computer. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The prompt elements <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>7</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> are a type of prompt element known as a text box, which can display text for a user, and accept textual data from a user. The text box type prompt element is associated with a data item from which it receives its initial data (if any), and into which the data entered by the user is inserted. The prompt elements <highlight><bold>6</bold></highlight> and <highlight><bold>17</bold></highlight> are a type of prompt element known as a combo-box. In a combo box, a list of acceptable data entries is presented to the user when the user activates the arrow button at the right side of the prompt element. For example, for prompt element <highlight><bold>6</bold></highlight>, a list of U.S. states is presented to the user when the allow button is activated. The user can then select one of the acceptable data entries (e.g. one state) from that list. The selected data entry is then displayed in the display area making up the remainder (left hand side) of the prompt element. As before, the combo-box type prompt element may also be preloaded with initial data. The combo-box type prompt element, therefore, requires a source of data to provide the acceptable choices, and a data item from which it receive its initial data (if any), and into which the selected choice is inserted. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The HTML code defining form <highlight><bold>3</bold></highlight> is stored within the client personal computer, while the data populating the entry fields in the form is ultimately received from and subsequently transferred to other computers, such as a server machine, via the internet connection. <cross-reference target="DRAWINGS">FIGS. 10A, 10B</cross-reference>, <highlight><bold>10</bold></highlight>C and <highlight><bold>10</bold></highlight>D, when joined together, are an example of an HTML code listing which defines such a form that may be stored on a personal computer. Within the HTML code is JavaScript code (lines <highlight><bold>130</bold></highlight>-<highlight><bold>131</bold></highlight>) that will condition the personal computer to obtain data items residing on a Server machine at the time the form loads. Further JavaScript code (lines <highlight><bold>132</bold></highlight>-<highlight><bold>133</bold></highlight>) conditions the personal computer to load these data items into an XML document embedded within the HTML document. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> When user input data processor <highlight><bold>8</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) receives user data intended for form <highlight><bold>3</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>) from, for example, a keyboard or mouse, the data is processed according to information, stored in a binding database <highlight><bold>11</bold></highlight>, associated with the user input data. For example, referring to <cross-reference target="DRAWINGS">FIGS. 4, 6</cross-reference> and <highlight><bold>7</bold></highlight>, the binding database <highlight><bold>11</bold></highlight> includes a binding table <highlight><bold>13</bold></highlight>, and a first (<highlight><bold>40</bold></highlight>) and a second (<highlight><bold>41</bold></highlight>) data constraint table. The user input data processor <highlight><bold>8</bold></highlight> forwards the user data to binding database <highlight><bold>11</bold></highlight> where it is compared to information in the binding table <highlight><bold>13</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>) contained within the binding database <highlight><bold>11</bold></highlight>. The binding table <highlight><bold>13</bold></highlight> in the binding database <highlight><bold>11</bold></highlight> associates data from the external server with corresponding prompt elements in the form <highlight><bold>3</bold></highlight> in a manner to be described in more detail below. The received user data is also compared to information in data constraint tables <highlight><bold>40</bold></highlight> and <highlight><bold>41</bold></highlight> to determine if the received value of the user input data meets data constraints (i.e. is it within proper range and/or does it coordinate properly with other data) in a manner also to be described in more detail below. If the user input data is within the appropriate constraints, it is forwarded to the processor <highlight><bold>10</bold></highlight> for subsequent display by the user interface display <highlight><bold>2</bold></highlight> and possible storage in the associated external data item. Conversely, if the data requires alteration and/or further processing before it may be properly entered in form <highlight><bold>3</bold></highlight>, the processor <highlight><bold>10</bold></highlight> is conditioned to either perform the proper processing, or to inform the user of the problem via the user interface display <highlight><bold>2</bold></highlight> and solicit further information from the user via the user input data processor <highlight><bold>8</bold></highlight> to resolve the problem. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a portion of a binding table <highlight><bold>13</bold></highlight> containing a plurality of entries, illustrated as rows. Each row specifies the linking of a data item with a prompt element. Within the binding table <highlight><bold>13</bold></highlight> each prompt element <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, and <highlight><bold>17</bold></highlight> is linked with at least one specified data item received from the server. The first column in binding table <highlight><bold>13</bold></highlight> identifies a prompt element on the form <highlight><bold>3</bold></highlight>, and the third column identifies the data item from the external server to be linked with that prompt element via one or more data item identifiers <highlight><bold>19</bold></highlight>, <highlight><bold>20</bold></highlight>, <highlight><bold>21</bold></highlight>, <highlight><bold>22</bold></highlight> and <highlight><bold>23</bold></highlight>, each of which resolves to a set of data items. The second column identifies the type of the prompt element identified in the first column. In most cases there is only one data item identifier linked to each prompt element, and the data item identifier resolves to a set consisting of only one data item. In general, however, the data item can be a simple object property (such as the value of the object), an entire object (containing all of its properties) or an array (repeating group) of objects. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In a preferred embodiment of the present invention Microsoft XSL pattern syntax (previously known as XQL syntax) is used to represent the data item identifier. Microsoft documentation likens XSL Pattern syntax to SQL for use with XML, hence the original name of XQL (XML Query Language). XSL defines a &ldquo;pattern&rdquo; syntax which identifies nodes within an XML document. This capability provides the equivalent of an SQL WHERE clause. XSL is further discussed in <highlight><italic>Professional XSL </italic></highlight>by Kurt Cagle, Michael Corning et al., Wrox Press, Inc. (2001) ISBN 186-100-3579. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The XML data buffer tags (shown without any data entered) associated with the image elements or controls <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>6</bold></highlight> and <highlight><bold>7</bold></highlight> appearing in form <highlight><bold>3</bold></highlight> would appear as follows:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Patient&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="63PT" align="left"/>
<colspec colname="1" colwidth="154PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Address&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="84PT" align="left"/>
<colspec colname="1" colwidth="133PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;AddressLine1/&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;AddressLine2/&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;City/&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;State/&gt;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;ZipCode/&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="63PT" align="left"/>
<colspec colname="1" colwidth="154PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Address&gt;. . .</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Address&gt;. . .</entry>
</row>
<row>
<entry></entry>
<entry>&lt;Address&gt;. . .</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Patient&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In the preceding example the data item identifier /Patient/Address/ZipCode resolves to a data item having one object property: the value of the zip code. The data item identifier /Patient/Address resolves to a data item that is an entire object containing several objects with their own properties (multiple lines of address information, plus City, State and ZipCode), and the data expression /Patient/Address&lsqb;State&equals;PA&rsqb;, for example, resolves to a data element which is an array composed of a repeating group of objects, i.e. those patients who live in Pennsylvania. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Thus, a data item identifier resolves to a data item or to some portion of data within the embedded XML document containing external data. In XML this reference is to a document node, that is, one branch of the XML document as illustrated, for example in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. A data item identifier can represent the data source for a prompt element, the data target (destination) for a prompt element or both. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> For example, a combo box needs a data item identifier which will resolve to a list of allowable choices and it also needs a data item identifier which will resolve to a location in the external data where the choice made by the user will be placed:  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="35PT" align="left"/>
<colspec colname="1" colwidth="70PT" align="left"/>
<colspec colname="2" colwidth="112PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>DataSource</entry>
<entry>ListOfDoctors</entry>
</row>
<row>
<entry></entry>
<entry>DataTarget</entry>
<entry>Patient/AttendingDoctor</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Referring specifically to rows <highlight><bold>30</bold></highlight> and <highlight><bold>31</bold></highlight> of the binding table <highlight><bold>13</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>), these rows both relate to the VIP status combo box <highlight><bold>17</bold></highlight>, identified as prompt element &lsquo;ctlVIP&rsquo; in the first column, and of type &lsquo;ComboBox&rsquo; in the second column. The data item associated with the prompt element &lsquo;ctlVIP&rsquo; <highlight><bold>17</bold></highlight> in row <highlight><bold>30</bold></highlight> is the source of the allowable values of the VIP status. In the illustrated embodiment, the allowable values are &lsquo;True&rsquo; and &lsquo;False&rsquo;. However, there is no limit to the number of allowable choices, and for the present example, the allowable values could indicate different levels of VIP status, such as: &lsquo;gold level&rsquo;, &lsquo;silver level&rsquo;, &lsquo;bronze level&rsquo; and &lsquo;none&rsquo;. This source data item is identified in cell <highlight><bold>22</bold></highlight> as existing at the location in the embedded XML document: &lsquo;/AllowableValues/VIPStatuses&rsquo; which contains a list of the allowable data items. As described above, this list would be retrieved as an array containing the allowable data. The data item linked with the prompt element &lsquo;ctlVIP&rsquo; in row <highlight><bold>31</bold></highlight> is the destination data item for data entered by the user into the combo-box <highlight><bold>17</bold></highlight>. This destination data item is identified in cell <highlight><bold>23</bold></highlight> as being at the location &lsquo;/Patient/VIPStatus&rsquo;. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Data item identifiers in the binding table <highlight><bold>13</bold></highlight> can be changed at runtime to allow for dynamic views, that is, to display subsets of available data in the buffer which change based on data entered into other prompt elements. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The data item identifier associated with a prompt element can be stored with that prompt element (i.e., in the HTML document defining the form containing that prompt element), with the data (i.e., in the embedded XML document) or separately. In a preferred embodiment of the present invention the most straightforward and flexible way to store the data item identifier information is separately in a data binding table <highlight><bold>13</bold></highlight>, as illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 10</cross-reference>B, the HTML code at line <highlight><bold>127</bold></highlight> begins the data binding process. The HTML code conditions the client computer to retrieve the external data from the server (line <highlight><bold>130</bold></highlight>-<highlight><bold>131</bold></highlight>) via a server XML document, and loads the received external data into an XML document (line <highlight><bold>132</bold></highlight>-<highlight><bold>133</bold></highlight>) which is embedded at line <highlight><bold>106</bold></highlight> into the form. <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> depict the XML code listing for an exemplary XML document such as the XML document referenced at line <highlight><bold>106</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Data items in the XML document are bound to prompt elements via JavaScript subroutines depicted in <cross-reference target="DRAWINGS">FIGS. 12, 13</cross-reference>, <highlight><bold>14</bold></highlight> and <highlight><bold>15</bold></highlight>. That is, these JavaScript subroutines perform the transfer of data between the data items in the embedded XML document and the associated prompt elements in the form. In order to accomplish this data binding process, the location of the data in the embedded XML document is linked with the prompt element where the data ultimately will be displayed and edited via binding table <highlight><bold>13</bold></highlight>, as described above. The entries in the binding table <highlight><bold>13</bold></highlight> are defined in the HTML form (<cross-reference target="DRAWINGS">FIG. 10A</cross-reference>) at lines <highlight><bold>120</bold></highlight>-<highlight><bold>126</bold></highlight>. The entries illustrated in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> represent only a portion of the binding table entries: those illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Lines <highlight><bold>122</bold></highlight>-<highlight><bold>126</bold></highlight> insert data into the binding table <highlight><bold>13</bold></highlight> to map the data items in the embedded XML document to the appropriate prompt elements via an XQL pattern or path that resolves to a node or nodes in the XML document. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The routine listed in <cross-reference target="DRAWINGS">FIG. 16</cross-reference> operates in conjunction with the code in the HTML document (<cross-reference target="DRAWINGS">FIG. 10</cross-reference>) to populate the embedded XML document. This routine inserts data items from the XML document from the external source into the appropriate node in the embedded XML document to which the XQL resolves. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 4</cross-reference> the binding table <highlight><bold>13</bold></highlight> links the XML data item from the embedded XML document, obtained at line <highlight><bold>130</bold></highlight> of the HTML form (<cross-reference target="DRAWINGS">FIG. 10</cross-reference>), to the specific prompt elements that appear in the HTML document at lines <highlight><bold>122</bold></highlight>-<highlight><bold>126</bold></highlight>. This scheme offers the advantage that more than one prompt element <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, etc. can be mapped in the same binding table <highlight><bold>13</bold></highlight>. In addition, the binding table <highlight><bold>13</bold></highlight> can be quickly scanned to discern which prompt elements are bound to which data item, a necessary operation in order to refresh the display <highlight><bold>2</bold></highlight> for prompt elements whose data has changed. To aid in performing this necessary function, the JavaScript subroutine depicted in <cross-reference target="DRAWINGS">FIG. 18</cross-reference> determines which prompt elements are bound to a specific branch in the XML document. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Every prompt element (<highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, and <highlight><bold>17</bold></highlight>) that is linked with a data item (<highlight><bold>19</bold></highlight>, <highlight><bold>20</bold></highlight>, <highlight><bold>21</bold></highlight>, <highlight><bold>22</bold></highlight> and <highlight><bold>23</bold></highlight>) in the binding database <highlight><bold>11</bold></highlight> has at least one entry in binding table <highlight><bold>13</bold></highlight>. Each prompt element is further associated with a generic binding routine based on the type (<highlight><bold>24</bold></highlight>, <highlight><bold>25</bold></highlight>, <highlight><bold>26</bold></highlight>, <highlight><bold>27</bold></highlight> and <highlight><bold>28</bold></highlight>) of the prompt element. This generic binding routine performs the actual copying of the data between the embedded XML document and the linked prompt element. For example, the generic binding routine associated with prompt element types <highlight><bold>24</bold></highlight>, <highlight><bold>25</bold></highlight> (InputBox) would be InputBox_XML_UI, where UI refers to the user interface (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>A, line <highlight><bold>320</bold></highlight>). This generic binding routine transfers textual data between a specified text box prompt element and the data item in the embedded XML document to which it is linked. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Other examples of binding routines applicable to each type of control scenario are shown in FIGS. <highlight><bold>12</bold></highlight>-<highlight><bold>15</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is an example of the routine which controls the binding the XML data to all of the linked prompt elements in the form. <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a routine which controls the binding of linked XML data to only a specified prompt element. <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts the binding routine, described above, that will bind the XML data to a relatively simple control such as an input box, while <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows the binding routines for a relatively complex control such as a data list or combobox. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The rows <highlight><bold>29</bold></highlight>, <highlight><bold>30</bold></highlight>, <highlight><bold>31</bold></highlight> and <highlight><bold>32</bold></highlight> of binding table <highlight><bold>13</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) are an example of how prompt elements within one presentation group form can be linked with data items located within different object and/or record types. In this case, the four rows <highlight><bold>29</bold></highlight>-<highlight><bold>32</bold></highlight> are associated with three different record types, namely Person/Name <highlight><bold>19</bold></highlight>, <highlight><bold>20</bold></highlight>; Person/Education <highlight><bold>21</bold></highlight> and Patient <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Data items are automatically read from the embedded XML document and written to each prompt element (<highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>7</bold></highlight>) in the form <highlight><bold>3</bold></highlight> when the form <highlight><bold>3</bold></highlight> is initially loaded. As seen in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the loading of form <highlight><bold>3</bold></highlight> into the display interface <highlight><bold>2</bold></highlight> begins with Form Load Event <highlight><bold>33</bold></highlight>. At step <highlight><bold>34</bold></highlight>, the generic Buffer_to_&lt;Control Type&gt; routine is launched for each specific control type appearing in the Binding Table <highlight><bold>13</bold></highlight>. For example, a ComboBox type prompt element would cause initiation (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>, line <highlight><bold>322</bold></highlight>) of the routine XML_to_ComboBox (<cross-reference target="DRAWINGS">FIGS. 15A and 15B</cross-reference>). Similarly, an InputBox type prompt element would cause initiation (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>, line <highlight><bold>320</bold></highlight>) of the routine XML_to_InputBox (<cross-reference target="DRAWINGS">FIG. 14</cross-reference>). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> If the data item to which the prompt element is bound is not found in the embedded XML document, the associated controls are hidden. This feature allows a security layer to remove sensitive data from the embedded XML document or to prevent such data from ever reaching the buffer initially. Further, hiding of the unbound controls prevents the user interface from failing. Furthermore, hiding the control and the prompt for the control prevents the user from realizing that a potentially secure field even exists. When the control is hidden the control still occupies the same physical space on the display <highlight><bold>2</bold></highlight> so that other controls on the form <highlight><bold>3</bold></highlight> are not affected. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Following the scan at step <highlight><bold>34</bold></highlight> for entries in the binding table <highlight><bold>13</bold></highlight>, step <highlight><bold>35</bold></highlight> processes the buffer initialization constraints appearing in table <highlight><bold>40</bold></highlight>. Certain data constraints are static and can exist as part of the form <highlight><bold>3</bold></highlight>. For example certain prompt elements may be linked to data items that are always required (e.g. &lsquo;Patient/Name/familyName&rsquo; <highlight><bold>19</bold></highlight> and &lsquo;/Patient/VIPStatus&rsquo; <highlight><bold>23</bold></highlight>). Also, certain pick lists (e.g. list of allowable VIP status values <highlight><bold>6</bold></highlight>) can also contain values that do not often change. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, table <highlight><bold>40</bold></highlight> depicts an example of data constraints <highlight><bold>36</bold></highlight> and <highlight><bold>37</bold></highlight> which are evaluated at the time of form initialization (INIT). When the form <highlight><bold>3</bold></highlight> initially loads, the constraints listed in &ldquo;Action&rdquo; column <highlight><bold>38</bold></highlight> are performed for any prompt element that maps to the data item identifiers appearing in column <highlight><bold>39</bold></highlight>. In the example shown, the prompt element <highlight><bold>17</bold></highlight> (ctlVIP) will be marked as required and its associated control pick list will be populated with the values &ldquo;True&rdquo; and &ldquo;False&rdquo;. INIT constraints <highlight><bold>36</bold></highlight>, <highlight><bold>37</bold></highlight> arc processed when the linked data items are initially loaded into the prompt elements. Since INIT constraints <highlight><bold>36</bold></highlight>, <highlight><bold>37</bold></highlight> do not change after the form is initially opened, these constraints are never again processed. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Prompt elements are activated if their linked data item is relevant and inactivated if their linked data item is not relevant. Furthermore, prompt elements are highlighted if their linked data is marked as required. The routine depicted in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> marks as required any prompt elements that are bound to an XML data item marked as being required. The routine shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference> highlights prompt elements marked as required, while <cross-reference target="DRAWINGS">FIG. 20</cross-reference> highlights the label (if any) of prompt elements which are marked as required. Similar routines (1) mark prompt elements as not relevant if their linked data item is irrelevant, and inactivate both the prompt element and the label (if any) of any prompt element marked irrelevant; and (2) mark prompt elements as relevant if their linked data item is relevant, and activate both the prompt element and the label (if any) of any prompt element marked relevant. One skilled in the art will understand how to generate code to provide these functions. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Another class of data constraint is extremely dynamic. In this case, the required data constraint is not known until runtime. For example, the allowable values in a pick list might change frequently enough that embedding such values into the form <highlight><bold>3</bold></highlight> is inappropriate. This includes constraints that may cause a data item to become e.g. either relevant, irrelevant or required as other data items (and the prompt elements with which they are linked) on the form are changed. For example, the data item last_PAP_Test_Date (not illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) is required if the patient gender (also not illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) is FEMALE. Conversely, if the patient gender is MALE then last_PAP_Test_Date is irrelevant and should not be entered. This class of data constraint needs to be evaluated after each data item that is linked with the underlying condition is changed. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> For example, as soon as the patient gender is changed to MALE, the data item last_PAP_Test_Date becomes irrelevant and each prompt element that is bound to the last_PAP_Test_Date data item is inactivated. Conversely, as soon as the patient gender is changed to FEMALE, the data item last_PAP_Test_Date becomes relevant and required and each prompt element that is bound to the last_PAP_Test_Date data item is activated and highlighted. In <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, table <highlight><bold>41</bold></highlight> depicts an example of data constraints which are dynamically evaluated as data is changed on a form. This type of data constraint is marked in the first column to be evaluated at ONCHANGE time and the data items participating in the condition <highlight><bold>45</bold></highlight> are listed in column <highlight><bold>43</bold></highlight>. Whenever data is changed on the form, the table <highlight><bold>41</bold></highlight> is scanned to determine if the changed data item matches any data items listed in column <highlight><bold>43</bold></highlight>. If so, the changed data item must be checked against an associated condition, listed in column <highlight><bold>45</bold></highlight>. If the associated condition is met, the associated actions listed in column <highlight><bold>44</bold></highlight> are performed. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> For example, if /Patient/Sex is the data item that is changed, then both of the entries illustrated in table <highlight><bold>41</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> will be triggered, causing their conditions in column <highlight><bold>45</bold></highlight> to be evaluated. If the condition of column <highlight><bold>45</bold></highlight> produces a TRUE result, then the corresponding action of column <highlight><bold>44</bold></highlight> will be performed. Referring specifically to the top row, if the /Patient/Sex changes to &ldquo;F&rdquo; (Female) then any prompt element bound to last_PAP_Test_Date (column <highlight><bold>42</bold></highlight>) will be set to &ldquo;Required&rdquo;. Referring to the second row, if the /Patient/Sex changes to &ldquo;M&rdquo; (Male) any prompt element bound to last_PAP_Test_Date will be inactivated. Similar processing may be performed with respect to a combo-box to change the allowable entries based on a change in data in some other prompt element. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> One skilled in the art will recognize that, not only can input data be made subject to conditions, as described above with reference to table <highlight><bold>41</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, but also that the conditions themselves can be dynamically variable. That is, the entries in table <highlight><bold>41</bold></highlight> may be varied in response to coding in the HTML document defining form <highlight><bold>3</bold></highlight>. For example, one of the actions which may be specified in column <highlight><bold>44</bold></highlight> of table <highlight><bold>41</bold></highlight> may be to add a row in table <highlight><bold>41</bold></highlight>, delete a row in table <highlight><bold>41</bold></highlight>, or to change the contents of entries in table <highlight><bold>41</bold></highlight>, all in response to the value of the newly received user input data from input data processor <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> As data is entered or changed in any prompt element, the new data is automatically inserted into its associated location in the embedded XML document containing the external data item. More specifically, data input events, such as change and click events, are routed to known generic event handling routines. The generic event handling routines for each prompt element move the data from the prompt element to the embedded XML document. An example of the appropriate instruction is: </paragraph>
<paragraph lvl="0"><in-line-formula>&lt;ControlType&gt;_To_Buffer </in-line-formula></paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> When data is updated in this manner, the processor <highlight><bold>10</bold></highlight> detects that the previous version of the updated data item is different from the current version of that data item. The mechanism used to identify such data is to mark that data item as used or &ldquo;dirty&rdquo;. That is, whenever a user enters new data or updates existing data, that data is marked &lsquo;dirty&rsquo;. This can then be used to assist server processing. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Any data object in the XML document that was originally null (i.e. any XML document node which has no data initially associated with it) is tagged as a placeholder until data is placed into that data object in response to a change in the linked prompt element. Placeholders (new data objects) in the XML document are marked as &ldquo;Insert&rdquo; when new data is placed in them. More specifically, once a data object is marked dirty, then that data object is marked as a new object, that is, an object into which data is to be inserted. Any parent (an object containing the new object) placeholder objects are also marked &ldquo;Insert&rdquo;. Existing objects, i.e. any node already containing data, are marked as &ldquo;Update&rdquo; when new data is placed in them. In addition, previous data values can be saved in a list to support &ldquo;undo&rdquo; processing. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> If a subset of the external data is updated from a source other than the prompt elements, e.g. from a data update from the internet, only those prompt elements that are affected by the changed data are rebound. That is, such partial database updates rebind only the relevant prompt elements. The XML nodes of the data changed are compared to the data item identifiers (<highlight><bold>19</bold></highlight>-<highlight><bold>23</bold></highlight>) in the binding table <highlight><bold>13</bold></highlight> and only those prompt elements whose linked data item identifiers fall within the changed data path are updated. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> As the user interacts with the prompt elements (<highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>7</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight> and <highlight><bold>17</bold></highlight>) of the HTML form <highlight><bold>3</bold></highlight>, the data in at least some of the prompt elements changes. The DHTML browser will initiate events that are directed to the prompt element event handlers, some of which are in the HTML document itself (<cross-reference target="DRAWINGS">FIG. 10</cross-reference>B, line <highlight><bold>137</bold></highlight> to <cross-reference target="DRAWINGS">FIG. 10D</cross-reference> line <highlight><bold>190</bold></highlight>). Some of the event handlers are so generic that they reside in JavaScript files. The prompt element event handlers generally extract the changed data from the prompt element and update the linked node in the XML document. For example, in <cross-reference target="DRAWINGS">FIG. 10C</cross-reference> (lines <highlight><bold>154</bold></highlight>-<highlight><bold>164</bold></highlight>) when the data in the zip code control <highlight><bold>5</bold></highlight> is changed by the user, line <highlight><bold>162</bold></highlight> updates the XML document with the new zip code (InputBox_UI_TO_XML (control)). </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Optional custom code may be associated with the generic event handlers. For example, additional program code may be invoked by creating event handling functions using a specific naming convention (&lt;controlName&gt;_&lt;eventName&gt;). The generic event handling routines will search at runtime for the existence of additional custom functions and, if found, invoke those functions instead of executing their genetic functions. An example of custom logic that may be added before or after data updating is as follows:  
<table-cwu id="TABLE-US-00003">
<number>3</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>function ctlZipCode_onchange(aNumericEdit)</entry>
</row>
<row>
<entry></entry>
<entry>&lcub;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>// do custom validation here</entry>
</row>
<row>
<entry></entry>
<entry>if passMyValidation(aNumericEdit) &equals;&equals; false</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>return; //abort buffer updating</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>//otherwise let the system update the XML doc</entry>
</row>
<row>
<entry></entry>
<entry>this.UI_TO_XML();</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&rcub;</entry>
</row>
<row>
<entry></entry>
<entry>function ctlZipCode_onafterchange(aNumericEdit)</entry>
</row>
<row>
<entry></entry>
<entry>&lcub;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>//custom code here</entry>
</row>
<row>
<entry></entry>
<entry>DoSomething(); //Verify City and State&quest;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&rcub;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the form data change processing model described above is illustrated. The form data change event handler <highlight><bold>50</bold></highlight> begins with waiting for a data change event to occur at step <highlight><bold>51</bold></highlight>. At step <highlight><bold>52</bold></highlight> the subroutine searches for the presence of custom pre-change code before changing the data in the database <highlight><bold>11</bold></highlight>. If such custom code is found to exist, step <highlight><bold>49</bold></highlight> executes the custom code. If no such custom code is found, the data is moved to the XML document at step <highlight><bold>53</bold></highlight> using the generic binding routines so that the data may eventually be sent back to the Server machine. After the data change is executed, another search is performed at step <highlight><bold>46</bold></highlight> for the existence of custom post-change code. If such custom code is found it is executed at step <highlight><bold>47</bold></highlight>. If no such custom code is found, then in the processing at step <highlight><bold>48</bold></highlight>, the ON_CHANGE constraints in the data constraints table <highlight><bold>41</bold></highlight> of binding database It are evaluated and if any are triggered, they are executed. The routine depicted in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a JavaScript code listing which examines the data runtime for ON_CHANGE validations for the selected control. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The instruction loop depicted in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> exists for each prompt element. As seen in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the HTML form data change instructions appear at lines <highlight><bold>138</bold></highlight>-<highlight><bold>147</bold></highlight> for the &ldquo;street&rdquo; data, at lines <highlight><bold>148</bold></highlight>-<highlight><bold>153</bold></highlight> for the &ldquo;address&rdquo; data, at lines <highlight><bold>154</bold></highlight>-<highlight><bold>166</bold></highlight> for &ldquo;zip code&rdquo; data and at lines <highlight><bold>178</bold></highlight>-<highlight><bold>190</bold></highlight> for &ldquo;city&rdquo; data. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> User written functions <highlight><bold>49</bold></highlight> can implement custom (more restrictive) validation logic which can cause the data binding to be cancelled (data is not written into the database <highlight><bold>11</bold></highlight>) by simply coding a &ldquo;return&rdquo; statement. User written functions <highlight><bold>47</bold></highlight> can be implemented which are invoked after the data is written to the database <highlight><bold>11</bold></highlight> in order to cause or perform some post data change task such as data transmission. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for dynamically configuring a user interface display including image elements for prompting user data entry, comprising: 
<claim-text>an input data processor for receiving input data via a prompt element for display in a user interface; </claim-text>
<claim-text>a database associating a condition with input data received via said prompt element; and </claim-text>
<claim-text>an image element processor for determining whether said received input data satisfies said condition and performing at least one of, (a) activating and (b) inactivating an image element in the user interface display in response to said determination. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>said database includes an action to be taken upon said input data satisfying said condition, </claim-text>
<claim-text>said action comprises said (a) activating and (b) inactivating, said displayed image element; and </claim-text>
<claim-text>said image element processor performs said action in response to said input data satisfying said condition. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said database comprises a table. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said condition is dynamically variable and is provided to said database at least one of (a) prior to display of said a user interface and (b) during display of said user interface. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said input processor receives input data updating previously entered data and indicates said previously entered data has been updated. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said condition identifies equality between said received input data and a predetermined data value. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said condition determines whether said received input data represents a particular selection from between displayed alternative options. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said activating said image element in said displayed user interface comprises (i) displaying said image element in said displayed user interface and (ii) making said image element responsive to user command. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said inactivating said image element in said displayed user interface comprises (i) hiding said image element in said displayed user interface and (ii) making said image element non-responsive to user command. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said database further associates a type parameter with said displayed prompt element, said type parameter identifying a displayed prompt element type. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said prompt element type signifying said prompt element supports at least one of, (a) receiving input data, (b) providing a user selectable set of input items, (c) receiving date data, (d) receiving address data, (e) receiving personal information and (f) receiving user identification and authentication information. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said user interface display comprises at least one of, (a) a document, (b) a form, (c) a questionnaire, (d) a spreadsheet, (e) web page and (f) a browser. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system for dynamically configuring a user interface display including image elements for prompting user data entry, comprising: 
<claim-text>an input processor for receiving input data via a prompt element for display in a user interface; </claim-text>
<claim-text>a database associating a condition with said prompt element; and </claim-text>
<claim-text>an image element processor for using said condition for identifying a data item in a set of data items and for storing said identified data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein 
<claim-text>said condition is dynamically variable and is provided to said database at least one of (a) prior to display of said a user interface and (b) during display of said user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said input processor receives input data updating previously entered data and indicates said previously entered data has been updated. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein said database also associates a data item destination identifier with said prompt element, said data item destination identifier identifying a destination data record for accommodating said identified data item. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A processing system for use with a user interface display including image elements for prompting user data entry, comprising: 
<claim-text>a database linking a plurality of data item identifiers with a single prompt element of a user interface display image, said plurality of data item identifiers including first and second data item identifiers; and </claim-text>
<claim-text>a processor for using said first data item identifier to identify a set of data items comprising items individually selectable for entry by a user via said single prompt element and for using said second data item identifier to identify a destination data record for accommodating a data item entered via said single prompt element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method for dynamically configuring a user interface display including image elements for prompting user data entry, comprising the steps of: 
<claim-text>receiving input data via a prompt element for display in a user interface; </claim-text>
<claim-text>associating a condition with input data received via said prompt element; and </claim-text>
<claim-text>determining whether said received input data satisfies said condition and at least one of, (a) activating and (b) inactivating an image element in a user interface display in response to said determination. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method for dynamically configuring a user interface display including image elements for prompting user data entry, comprising the steps of: 
<claim-text>receiving input data via a prompt element for display in a user interface; </claim-text>
<claim-text>associating a condition with said prompt element; and </claim-text>
<claim-text>using said condition for identifying a data item in a set of data items and for storing said identified data item.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001893A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001893A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001893A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001893A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001893A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001893A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001893A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001893A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001893A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001893A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001893A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001893A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001893A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030001893A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030001893A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030001893A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030001893A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030001893A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030001893A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030001893A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030001893A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030001893A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030001893A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030001893A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030001893A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030001893A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030001893A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030001893A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030001893A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030001893A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
