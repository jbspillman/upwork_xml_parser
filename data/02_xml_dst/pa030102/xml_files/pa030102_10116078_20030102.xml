<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030000871A1-20030102-D00000.TIF SYSTEM "US20030000871A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00001.TIF SYSTEM "US20030000871A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00002.TIF SYSTEM "US20030000871A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00003.TIF SYSTEM "US20030000871A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00004.TIF SYSTEM "US20030000871A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00005.TIF SYSTEM "US20030000871A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00006.TIF SYSTEM "US20030000871A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00007.TIF SYSTEM "US20030000871A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00008.TIF SYSTEM "US20030000871A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00009.TIF SYSTEM "US20030000871A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00010.TIF SYSTEM "US20030000871A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00011.TIF SYSTEM "US20030000871A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00012.TIF SYSTEM "US20030000871A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00013.TIF SYSTEM "US20030000871A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00014.TIF SYSTEM "US20030000871A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030000871A1-20030102-D00015.TIF SYSTEM "US20030000871A1-20030102-D00015.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030000871</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10116078</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020404</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>B07C005/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>209</class>
<subclass>534000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>209</class>
<subclass>900000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>700</class>
<subclass>224000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Sorting system</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60302877</doc-number>
<document-date>20010702</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Patrick</given-name>
<middle-name>J.</middle-name>
<family-name>Fitzgibbons</family-name>
</name>
<residence>
<residence-us>
<city>Newark Valley</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Bruce</given-name>
<middle-name>H.</middle-name>
<family-name>Hanson</family-name>
</name>
<residence>
<residence-us>
<city>Endicott</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>D.</middle-name>
<family-name>Senger</family-name>
</name>
<residence>
<residence-us>
<city>Endicott</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>WOLF GREENFIELD &amp; SACKS, PC</name-1>
<name-2>FEDERAL RESERVE PLAZA</name-2>
<address>
<address-1>600 ATLANTIC AVENUE</address-1>
<city>BOSTON</city>
<state>MA</state>
<postalcode>02210-2211</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method are provided for sorting a plurality of items into a predetermined sorted sequence. Items are initially located on initial sorting regions of a sorting apparatus. The items are then sorted into at least one intermediary sorted set and then sorted, from the intermediary sorted sets, into the final sorted sequence. A computer may be used to track the position of the items on the sorting apparatus and to control the movement of the items into the sorted sequence. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims the benefit under Title 35 U.S.C. &sect;119(e) of co-pending U.S. Provisional Application Serial No. 60/302,877, filed Jul. 2, 2001, entitled &ldquo;AUTOMATIC TUB SORTER AND RETURN MECHANISM&rdquo; by Patrick J. Fitzgibbons, Bruce H. Hanson, and Michael D. Senger.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This application pertains to sorting of items, and in particular to using a single pass algorithm to sort unordered items located in different areas into one stream. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> There are numerous industry and other applications that require sorting of unordered items into a stream or an ordered arrangement based on a particular sorting order. Prior to sorting, the items to be sorted might be located not only in random order, but also on physically different structures, for example, on different conveyors. Typically, the items must not only be sorted locally on each conveyor, but must also be globally sorted over all the conveyors. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> A computer system is sometimes used to automate the entire sorting process, or at least a portion of it, by deciding how to move the items. In order to electronically keep track of the items, some systems use bar codes or other computer-readable labels on the items. However, the items may be of different sizes, weight and materials, such that labels may not be appropriate. Labeling might also be prohibitive for other reasons, such as cost and time requirements. Additionally, labeling of items may hinder reuse of items in subsequent sorting procedures, as previous labels may have to be removed before application of new labels. Likewise, other devices for identifying locations of different items during a sorting process may not be convenient for certain applications. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A need therefore exists for a computerized system that will automate the sorting process while being able to combine items from several unsorted conveyors or streams into a single sorted output and keeping track of the items without additional labels or sensing devices. Furthermore, such a system should sort the items efficiently, optimally requiring only a single pass to sort all items. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Delivering, shipping, and storing mail items are a few, but by far not the only applications where such sorting systems are needed. Mail items must be sorted and resorted at several points in their progress. For example, at the destination post office, they need to be sorted into separate groups corresponding to an actual mail route. While there might be a mail sorting machine sorting individual pieces of mail into bins according to group assignments, some groups might be too large to fit into a single bin, and each of those &ldquo;oversized&rdquo; groups will be assigned to multiple bins. As a result, while the items are arranged in some order inside the bins, the bins themselves might be out of order. If the mail sorting machines leave the bins in different physical locations, then there is an additional task of sorting and combining the bins themselves such that they are returned to a desired location, serially and in order. The bins may be of different sizes, and labeling them is inconvenient because they are reused every time mail needs to be sorted. Also, bins might have a different groups assigned to them depending on the particulars of the mail sort, thus requiring relabeling prior to the sort. Therefore, an apparatus is needed that is capable of automatically sorting bins located on different conveyors without the bins themselves being externally labeled and returning these bins serially and in the desired order to an operator or a downstream processing system. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A system and method are provided for sorting a plurality of items into a predetermined sorted sequence. Each of the plurality of items is assigned a sequence number and are initially located in at least one initial sorting region. The items are sorted using a plurality of sorting regions. These sorting regions may include at least one initial region and at least two additional regions. One or more of the additional regions may also function as a return region. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The method comprises sorting the items of each initial region into an intermediary sorted set by moving, with mechanical mechanisms, at least some of the items between the initial regions and the additional regions. The mechanical mechanisms may also move items to different positions within each of the sorting regions. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The method further comprises using mechanical mechanisms to move and sort items from the intermediary sorted set to a return region in substantially the predetermined sorted sequence. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In one embodiment, a computer may be used to track the position of each item in the sorting regions. The computer may also be used to control the movement and positioning of the items. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In another embodiment, items in the return regions may be conveyed serially and in the sorted sequence. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In yet another embodiment, an identifier may be placed with each item. The identifier may be checked to ensure that the items are in the predetermined sorted sequence. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one embodiment, the items may be positioned linearly in the sorting regions. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> An apparatus is provided for sorting the items. The apparatus includes a plurality of sorting regions, a first mechanism for moving items between sorting regions, a second mechanism for moving items within each sorting region, an item location tracking mechanism, and controls for controlling the first and second mechanisms to move the items into a sorted sequence at least partly in response to the tracking mechanism. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In one embodiment, the sorting regions are one under another, and the first mechanism includes an elevator. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The second mechanism may include a conveyor. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In one embodiment, the controls include a processor running a subroutine for issuing instructions according to an item sorting algorithm. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In another embodiment, the items are postal bins. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In yet another embodiment, the sorting regions include at least one initial region, at least one return region, and at least one additional region. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> The structure and operation of various embodiments of the present invention are described in detail below with reference to the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a high-level view of the invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a depiction of the sorting process for one Initial Region; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow chart illustrating the sorting process for one Initial Region; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow chart illustrating a generalized sorting process for any Sorting Apparatus; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a depiction of one embodiment of a Sorting Apparatus; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a depiction of a second embodiment of a Sorting Apparatus; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> is a depiction of a third embodiment of a Sorting Apparatus; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a depiction of an embodiment of the invention used for sorting postal bins; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> is a depiction of the sorting process for the embodiment shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, according to the process illustrated in the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> is a continuation of the depiction of the sorting process shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6D</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>C, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6E</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>D, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6F</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>E, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6G</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>F, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6H</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>G, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 61</cross-reference> is a continuation of the depiction of the sorting process of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>H, according to the flowchart in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> is a depiction of bins prior to ejection onto Sorting Regions, according to one embodiment of the invention; and </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> is a depiction of bins prior to ejection onto Sorting Regions, according to one embodiment of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> One illustrative embodiment of the invention is shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Sorting System <highlight><bold>100</bold></highlight> comprises computer system <highlight><bold>102</bold></highlight>, Controller <highlight><bold>104</bold></highlight>, and Sorting Apparatus <highlight><bold>106</bold></highlight>. Computer system <highlight><bold>102</bold></highlight>, may be, for example, a general purpose computer system. Computer system <highlight><bold>102</bold></highlight> may include a processor connected to one or more memory devices, such as a disk drive, memory, or other device for storing data. The memory devices are typically used for storing programs and data during operation of computer system <highlight><bold>102</bold></highlight>. Computer system <highlight><bold>102</bold></highlight> also includes one or more input/output devices, such as keyboard, mouse, monitor, or printing device. In addition, computer system <highlight><bold>102</bold></highlight> may contain one or more communication devices that connect computer system <highlight><bold>102</bold></highlight> to a communication network. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Computer system <highlight><bold>102</bold></highlight> may be a general purpose computer system that is programmable using a high-level computer programming language. Computer system <highlight><bold>102</bold></highlight> may also be implemented using specially programmed, special purpose hardware. In computer system <highlight><bold>102</bold></highlight>, the processor may be a commercially available processor such as the well-known Pentium class processor available from the Intel Corporation. Many other processors are available. Such a processor usually executes an operating system which may be, for example, the Windows 95, Windows 98, Windows NT, Windows 2000 (Windows ME ) or Windows XP operating systems available from the Microsoft Corporation, MAC OS System X available from Apple Computer, the Solaris Operating System available from Sun Microsystems, or UNIX available from various sources. Many other operating systems may be used. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The memory of computer system <highlight><bold>102</bold></highlight> contains a computer program for implementing an algorithm for sorting items. By executing this computer program, computer system <highlight><bold>102</bold></highlight> may issue instructions for sorting items to Controller <highlight><bold>104</bold></highlight>. It should also be appreciated that one or more portions of computer system <highlight><bold>102</bold></highlight> may be distributed to one or more computers (not shown) coupled to a communications network. These computer systems may also be general purpose computer systems. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Controller <highlight><bold>104</bold></highlight> receives instructions from computer system <highlight><bold>102</bold></highlight> and controls Sorting Apparatus <highlight><bold>106</bold></highlight> to operate according to these instructions. Sorting Apparatus <highlight><bold>106</bold></highlight> comprises a plurality of different sorting regions used for sorting items. Prior to execution of the computer program for sorting items, some sorting regions may contain items to be sorted. These regions are initial regions. Other sorting regions, which are to be used as buffer regions, or sorting spurs, are initially empty. These regions are additional regions. At least one of the additional regions is used for returning items to an operator or a downstream processing system after sorting is complete. These regions are return regions. Sorting Apparatus <highlight><bold>106</bold></highlight> also comprises mechanisms for moving items between positions in a sorting regions and moving items between sorting regions. The mechanism for moving items between positions in a sorting region may be, for example, a conveyor belt. The mechanism for moving items between sorting regions may be, for example, an elevator. Illustrative examples of possible configurations are shown in FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>C. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is an example of one arrangement of Sorting Apparatus <highlight><bold>106</bold></highlight>. In this illustrative example, Sorting Apparatus <highlight><bold>106</bold></highlight> comprises three Sorting Regions <highlight><bold>502</bold></highlight>, <highlight><bold>504</bold></highlight>, and <highlight><bold>506</bold></highlight>, arranged in a vertical row. However, any reasonable number of Sorting Regions may be used, depending on particular size constraints. The Sorting Regions are coupled to Elevator <highlight><bold>508</bold></highlight>. Conveyors <highlight><bold>502</bold></highlight>A, <highlight><bold>504</bold></highlight>A, <highlight><bold>506</bold></highlight>A can move items within their respective Sorting Regions and can also move items from their respective sorting regions to Elevator <highlight><bold>508</bold></highlight>. Conveyors <highlight><bold>502</bold></highlight>A, <highlight><bold>504</bold></highlight>A, and <highlight><bold>506</bold></highlight>A can also move items from Elevator <highlight><bold>508</bold></highlight> into their respective sorting regions. When an item is moved to Elevator <highlight><bold>508</bold></highlight> by a Conveyor <highlight><bold>502</bold></highlight>A-<highlight><bold>506</bold></highlight>A, Elevator <highlight><bold>508</bold></highlight> can move vertically to transfer the item to another Conveyor. In this arrangement items are located linearly within the Sorting Regions <highlight><bold>502</bold></highlight>-<highlight><bold>506</bold></highlight>, and only the item adjacent to Elevator <highlight><bold>508</bold></highlight> can be moved to Elevator <highlight><bold>508</bold></highlight>. Likewise, when an item is moved to a Sorting Region from Elevator <highlight><bold>508</bold></highlight>, it is placed in the position adjacent to Elevator <highlight><bold>508</bold></highlight>. Elevator <highlight><bold>508</bold></highlight> may be capable of transporting only one item at a time or it may be capable of transferring multiple items. In the latter case, an item in a Sorting Region <highlight><bold>502</bold></highlight>, for example, positioned adjacent to Elevator <highlight><bold>508</bold></highlight> may be moved to Elevator <highlight><bold>508</bold></highlight> via Conveyor <highlight><bold>502</bold></highlight>A. Then, another item in Sorting Region <highlight><bold>502</bold></highlight> may be moved into the position adjacent to Elevator <highlight><bold>508</bold></highlight> by Conveyor <highlight><bold>502</bold></highlight>A and subsequently moved to Elevator <highlight><bold>508</bold></highlight>. Alternatively, Elevator <highlight><bold>508</bold></highlight> may transfer items from two different Sorting Regions. For example, Elevator <highlight><bold>508</bold></highlight> may contain an item from Sorting Region <highlight><bold>502</bold></highlight>. Then, Conveyor <highlight><bold>504</bold></highlight>A may move a second item from Sorting Region <highlight><bold>504</bold></highlight> to Elevator <highlight><bold>508</bold></highlight>. Then, Elevator <highlight><bold>508</bold></highlight> may, for example, transfer both of these items to Sorting Region <highlight><bold>506</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is an example of another illustrative arrangement of Sorting Apparatus <highlight><bold>106</bold></highlight>. In this example, Sorting Apparatus <highlight><bold>106</bold></highlight> comprises two vertical rows of Sorting Regions separated by Elevator <highlight><bold>564</bold></highlight>. Again, three Sorting Regions are shown in each row, though any reasonable number of Sorting Regions may be used. In this arrangement, items can be moved within Sorting Regions by Conveyors <highlight><bold>552</bold></highlight>A-<highlight><bold>562</bold></highlight>A and transferred to and from Elevator <highlight><bold>564</bold></highlight>. Thus, an item can be moved to another Sorting Region in the same vertical row or another Sorting Region in another vertical row. Similar to the arrangement in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>A, items are arranged linearly within each Sorting Region, so only items adjacent to Elevator <highlight><bold>564</bold></highlight> may be moved onto Elevator <highlight><bold>564</bold></highlight>. In this embodiment, Elevator <highlight><bold>564</bold></highlight> is also capable of transferring one item at a time or multiple items at a time. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> is an example of another illustrative arrangement of Sorting Apparatus <highlight><bold>106</bold></highlight>. In this example, three rows of Sorting Regions are separated by two rows of Elevators. This arrangement has the advantage that items located in Sorting Regions <highlight><bold>588</bold></highlight>, <highlight><bold>590</bold></highlight>, and <highlight><bold>592</bold></highlight> can be moved onto either Elevator <highlight><bold>578</bold></highlight> or Elevator <highlight><bold>576</bold></highlight>. Various other arrangements, such as altering the number of Sorting Regions in a row, or altering the number of rows of Sorting Regions and the number of Elevators will occur readily to one skilled in the art. These and other arrangements are intended to be within the spirit and scope of the invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> An initial Sorting Region of Sorting Apparatus <highlight><bold>106</bold></highlight> is sorted according to the process illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example sort according to the process illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows three Sorting Regions <highlight><bold>202</bold></highlight>, <highlight><bold>204</bold></highlight>, and <highlight><bold>206</bold></highlight>. Each of these Sorting Regions has a capacity of five items. The capacity of the Sorting Regions is chosen as example. The capacity of the Sorting Regions is dependent on the size of the Sorting Region and the size of the items to be sorted. Any reasonable capacity may be chosen. In this example, Sorting Region <highlight><bold>202</bold></highlight> has five positions for items, a<highlight><bold>1</bold></highlight>-a<highlight><bold>5</bold></highlight>. Sorting Region <highlight><bold>204</bold></highlight> has positions b<highlight><bold>1</bold></highlight>-b<highlight><bold>5</bold></highlight> and Sorting Region <highlight><bold>206</bold></highlight> has positions c<highlight><bold>1</bold></highlight>-c<highlight><bold>5</bold></highlight>. In this example, Sorting Region <highlight><bold>202</bold></highlight> is an initial region while Sorting Regions <highlight><bold>204</bold></highlight> and <highlight><bold>206</bold></highlight> are additional regions. In this example, Sorting Region <highlight><bold>204</bold></highlight> is Additional Region <highlight><bold>1</bold></highlight> and Sorting Region <highlight><bold>206</bold></highlight> is Additional Region <highlight><bold>2</bold></highlight>. Sorting Region <highlight><bold>206</bold></highlight> also serves as a Return Region. In this example, Sorting Region <highlight><bold>202</bold></highlight> is initially loaded with five items. As shown in step a of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, computer system <highlight><bold>102</bold></highlight> (not shown) assigns a number to each item, based upon the desired sorted sequence of items. In this example, the item in position a<highlight><bold>1</bold></highlight> is assigned the sequence number <highlight><bold>2</bold></highlight>, the item in position a<highlight><bold>2</bold></highlight> is assigned the sequence number <highlight><bold>5</bold></highlight>, the item in position a<highlight><bold>3</bold></highlight> is assigned the sequence number <highlight><bold>3</bold></highlight>, the item in position a<highlight><bold>4</bold></highlight> is assigned the sequence number <highlight><bold>4</bold></highlight>, and the item in position a<highlight><bold>5</bold></highlight> is assigned the sequence number <highlight><bold>1</bold></highlight>. No computer-readable label is applied to the items. Computer system <highlight><bold>102</bold></highlight> merely stores the sequence number and location of each item in memory and updates this information as it instructs Sorting Apparatus <highlight><bold>106</bold></highlight> to move items. The initial sequence number and position of the items on the sorting regions may be read by computer system <highlight><bold>102</bold></highlight> from a previously written file. The file may be generated by another computer application or may be generated manually. The file may reside locally on storage media at computer system <highlight><bold>102</bold></highlight> or may be remotely accessed via a network by computer system <highlight><bold>102</bold></highlight>. Alternatively, the information could be passed directly to the primary memory of computer system <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As shown at step <highlight><bold>301</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the sorting process begins. At step <highlight><bold>303</bold></highlight>, if the initial region is empty or sorted, the process continues at step <highlight><bold>317</bold></highlight>, where all items in Additional Region <highlight><bold>2</bold></highlight> are moved to Additional Region <highlight><bold>1</bold></highlight> and, at step <highlight><bold>319</bold></highlight>, the process ends. However, in the example shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, step a, the initial region, Sorting Region <highlight><bold>202</bold></highlight>, is not sorted or empty, so the process continues to step <highlight><bold>305</bold></highlight>. At step <highlight><bold>305</bold></highlight>, if either of the Additional Regions are empty, the process continues to step <highlight><bold>307</bold></highlight>, where it is determined if the sequence number of the item in a<highlight><bold>1</bold></highlight> is after the sequence number of the item in a<highlight><bold>2</bold></highlight>. If the item in a<highlight><bold>1</bold></highlight> is after the item in a<highlight><bold>2</bold></highlight> in the sequence, the item in a<highlight><bold>1</bold></highlight> is moved to position b<highlight><bold>1</bold></highlight>, as shown at step <highlight><bold>309</bold></highlight>. Otherwise, the item in a<highlight><bold>1</bold></highlight> is moved to position c<highlight><bold>1</bold></highlight>, as shown at step <highlight><bold>311</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, item <highlight><bold>2</bold></highlight> is before item <highlight><bold>5</bold></highlight> in the sequence, so item <highlight><bold>2</bold></highlight> is moved to position c<highlight><bold>1</bold></highlight>, as shown in step b of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Then, all the items in the initial region are shifted over one position, to fill the spot left by item <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Next, the process returns to step <highlight><bold>303</bold></highlight>. Again, since the initial region is not sorted or empty, the process continues to step <highlight><bold>305</bold></highlight>. At step <highlight><bold>305</bold></highlight>, Additional Region <highlight><bold>1</bold></highlight> is still empty, so the process continues to step <highlight><bold>307</bold></highlight>. The item in position a<highlight><bold>1</bold></highlight> is now item <highlight><bold>5</bold></highlight> and the item in position a<highlight><bold>2</bold></highlight> is item <highlight><bold>3</bold></highlight>. Since item <highlight><bold>5</bold></highlight> is after item <highlight><bold>3</bold></highlight> in the sequence, item <highlight><bold>5</bold></highlight> is moved to position b<highlight><bold>1</bold></highlight> and all items in the initial region are again shifted to fill the empty spot, as shown in step c of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Again, the process returns to step <highlight><bold>303</bold></highlight>. Since the initial region is still not in sorted order and is not empty, the process continues to step <highlight><bold>305</bold></highlight>. Now, neither Additional Region is empty so the process continues to step <highlight><bold>313</bold></highlight> where it is determined if the item in position a<highlight><bold>1</bold></highlight> is before the item in position b<highlight><bold>1</bold></highlight> in the sequence and after the item in position c<highlight><bold>1</bold></highlight> in the sequence. In other words, before an item can be moved from the initial region to an additional region, the sequence number of the item must be between the sequence numbers of the items in the first locations of the two additional regions. In the example of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, item <highlight><bold>3</bold></highlight>, located in position a<highlight><bold>1</bold></highlight>, is in between items <highlight><bold>2</bold></highlight> and <highlight><bold>5</bold></highlight>, located in positions c<highlight><bold>1</bold></highlight> and b<highlight><bold>1</bold></highlight> respectively, so the process continues to step <highlight><bold>307</bold></highlight>. As described above, the sequence number of the item in position a<highlight><bold>1</bold></highlight> is compared to the sequence number of the item in position a<highlight><bold>2</bold></highlight>. In this case, item <highlight><bold>3</bold></highlight> is before item <highlight><bold>4</bold></highlight>, so at step <highlight><bold>311</bold></highlight> item <highlight><bold>3</bold></highlight> is moved to position c<highlight><bold>1</bold></highlight>. As a result, item <highlight><bold>2</bold></highlight> is shifted over to position c<highlight><bold>2</bold></highlight> and all the items in the initial region are shifted over by one position, as shown in step d of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Again, the process returns to step <highlight><bold>303</bold></highlight> and following the procedure described above, item <highlight><bold>4</bold></highlight> is moved to position b<highlight><bold>1</bold></highlight>, as shown in step e of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Consequently, item <highlight><bold>5</bold></highlight> is shifted to position b<highlight><bold>2</bold></highlight> and item <highlight><bold>1</bold></highlight> is shifted to position a<highlight><bold>1</bold></highlight>. The process next returns to step <highlight><bold>303</bold></highlight>. Since the items in Additional Region <highlight><bold>2</bold></highlight> is not yet sorted, the process continues to step <highlight><bold>305</bold></highlight>. Neither Additional Regions are empty so the process continues to step <highlight><bold>313</bold></highlight>. Item <highlight><bold>1</bold></highlight> is not between item <highlight><bold>5</bold></highlight> and item <highlight><bold>3</bold></highlight> in the sequence so item <highlight><bold>3</bold></highlight> is moved to position b<highlight><bold>1</bold></highlight> and item <highlight><bold>4</bold></highlight> and item <highlight><bold>5</bold></highlight> are shifted over one position, as shown at step f of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The process again returns to step <highlight><bold>303</bold></highlight>. Since both Additional Regions are in sorted order and the initial region is in sorted order, the process continues to step <highlight><bold>317</bold></highlight>. Here, all items in Additional Region <highlight><bold>2</bold></highlight> are moved to Additional Region <highlight><bold>1</bold></highlight> in order to ensure that the return region is empty. Accordingly, item <highlight><bold>2</bold></highlight> is moved from position c<highlight><bold>1</bold></highlight> to position b<highlight><bold>1</bold></highlight> as shown in step g. Now, Initial Region <highlight><bold>202</bold></highlight> has been sorted. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The algorithm described above is a method for sorting one Initial Region of Sorting Apparatus <highlight><bold>106</bold></highlight> into an intermediary sorted set. Many other algorithms or variations to this algorithm will occur readily to one skilled in the art and are intended to be within the spirit and scope of the invention. For example, the number of Additional Regions used or the number of positions within each Additional Region may be altered. Also, it is not required that one of the Additional Regions serve as a Return Region. In this case, the Additional Region does not have to be cleared to complete the sorting of the Initial Region. Additionally, the Initial Region could be cleared out at the end of the sort by moving all items from the Initial Region to an Additional Region, thus allowing the Initial Region to serve as an Additional Region when sorting other Initial Regions. Furthermore, it is also possible to carry out certain steps in the sorting algorithm in parallel. For example, while moving an item from one sorting region to another sorting region it is also possible to shift all of the items on another sorting region so that the items are adjacent to the elevator. The opportunities for parallel moves will depend on the particular sorting algorithm and sorting apparatus being used. For example, when using multiple elevators it is possible to move multiple items to separate sorting regions at substantially the same time. Consequently, it is not necessary to carry out each operation serially, as certain operations which do not affect each other may be carried out in parallel. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> It should also be understood the entire sorting algorithm may be performed inside computer system <highlight><bold>102</bold></highlight> before any instructions are sent to Controller <highlight><bold>104</bold></highlight> to control Sorting Apparatus <highlight><bold>105</bold></highlight>. Since, as mentioned above, the items are not marked with any computer-readable label, computer system <highlight><bold>102</bold></highlight> is able to track the location of items based on their initial position and the movement of items within and between Sorting Regions. Thus, the entire sorting algorithm may be executed within computer system <highlight><bold>102</bold></highlight> and the instructions for moving items and the sequence in which these instructions are issued may be stored as a result of executing the sorting algorithm. Then, these instructions may be sent to Controller <highlight><bold>104</bold></highlight>. Alternatively, computer system <highlight><bold>102</bold></highlight> may send instructions to Controller <highlight><bold>104</bold></highlight> while executing the sorting algorithm, without having to save the instructions. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In one embodiment of the invention, Sorting Apparatus <highlight><bold>105</bold></highlight> is used to sort postal bins containing mail pieces. Typically, individual mail pieces are sorted into bins based upon the destination of the mail piece. After the mail pieces are sorted into the bins, the bins themselves must be sorted. The initial sequence number and position of the bins on the sorting apparatus may be determined by the process of sorting mail pieces into the bins and subsequently saved for use by the bin sorting process. Bins may be placed in bin slots adjacent to the Initial Regions of Sorting Apparatus <highlight><bold>105</bold></highlight>. Individual mail pieces may be sorted into the bins while they are in the bin slots. Once the mail is sorted into the appropriate bins, the bins are ejected onto the Initial Regions of Sorting Apparatus <highlight><bold>105</bold></highlight>. In one arrangement, bins may be placed in a random order in the bin slots. In another arrangement, bins may be placed in the desired sorted sequence in the bin slots. However, since it is difficult to predict how much mail is going to a given location, one cannot predict how many bins will be needed for a given destination. For example, referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, Bins <highlight><bold>1</bold></highlight>-<highlight><bold>4</bold></highlight> are placed in Bin Slots <highlight><bold>1</bold></highlight>-<highlight><bold>4</bold></highlight> in the desired sorted sequence, based on the zipcode to which the mail in those bins is addressed. Thus, Bins <highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight> will contain mail going to zipcode 02155, Bin <highlight><bold>3</bold></highlight> will contain mail going to zipcode 02163, and Bin <highlight><bold>4</bold></highlight> will contain mail going to zipcode 02169. Individual mail pieces are sorted into the bins based on these zipcodes. However, during sorting all the mail going to zipcode 02155 may not fit into Bins <highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight>. Thus, an additional bin is needed for the overflow. This bin cannot be placed in the desired sorted sequence because there is no empty bin slot between Bin <highlight><bold>2</bold></highlight> and Bin <highlight><bold>3</bold></highlight>. Thus, this overflow bin, Bin <highlight><bold>2</bold></highlight>&prime; must be placed in the next available bin slot, which is Bin Slot <highlight><bold>5</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 7B</cross-reference>. Consequently, these bins will not be in the desired sorted sequence when ejected onto an Initial Region because Bin <highlight><bold>2</bold></highlight>&prime; will be out of order. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Although it is possible to leave certain bin slots empty in expectation of overflow mail, it is very difficult to predict the exact location in which an extra bin will be needed. For example, referring to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, one might initially leave Bin Slot <highlight><bold>4</bold></highlight> empty, in expectation of overflow mail for Bin <highlight><bold>3</bold></highlight>. Thus, Bin <highlight><bold>4</bold></highlight> is initially located in Bin Slot <highlight><bold>5</bold></highlight>. However, during the actual sort Bin <highlight><bold>2</bold></highlight> has overflow mail while Bin <highlight><bold>3</bold></highlight> does not. Thus, the overflow mail would be sorted into a bin in Bin Slot <highlight><bold>4</bold></highlight>. As can be seen, the number of operations required to complete the sort may be improved by leaving empty bin slots (since the overflow bins will be placed closer to their proper place in the sequence), however, it still may be necessary to sort the bins. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> An example of Sorting Apparatus <highlight><bold>105</bold></highlight> and process for sorting these bins and overflow bins is illustrated in FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>61</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, Sorting Apparatus <highlight><bold>600</bold></highlight> comprises three Initial Regions, Upper Initial Region <highlight><bold>620</bold></highlight>, Middle Initial Region <highlight><bold>630</bold></highlight>, and Lower Initial Region <highlight><bold>640</bold></highlight>, located on one side of Elevator <highlight><bold>610</bold></highlight>. Sorting Apparatus <highlight><bold>600</bold></highlight> further comprises three Additional Regions, Upper Additional Region <highlight><bold>622</bold></highlight>, Middle Additional Region <highlight><bold>632</bold></highlight>, and Lower Additional Region <highlight><bold>642</bold></highlight>, located on the opposite side of Elevator <highlight><bold>610</bold></highlight>. Middle Additional <highlight><bold>632</bold></highlight> also serves as a Return Region, to which is attached Final Return Conveyor <highlight><bold>634</bold></highlight>, which is used to return bins serially, in the sorted sequence. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> After individual mail items are sorted into bins, the bins are ejected onto the Initial Regions <highlight><bold>620</bold></highlight>, <highlight><bold>630</bold></highlight>, and <highlight><bold>640</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, Bins <highlight><bold>714</bold></highlight>, <highlight><bold>716</bold></highlight>, and <highlight><bold>720</bold></highlight> are ejected onto Upper Initial Region <highlight><bold>620</bold></highlight>, Bins <highlight><bold>710</bold></highlight> and <highlight><bold>712</bold></highlight> are ejected onto Middle Initial Region <highlight><bold>630</bold></highlight>, and Bins <highlight><bold>718</bold></highlight> and <highlight><bold>722</bold></highlight> are ejected onto Lower Initial Region <highlight><bold>640</bold></highlight>. Each bin has a sequence number indicating its order in the sorted sequence. Bin <highlight><bold>710</bold></highlight> is the first bin in the sequence, indicated by the number <highlight><bold>1</bold></highlight>. Bin <highlight><bold>714</bold></highlight> is an overflow bin of Bin <highlight><bold>712</bold></highlight>, and thus belongs directly after Bin <highlight><bold>712</bold></highlight> in the sorted sequence. Similarly, Bin <highlight><bold>718</bold></highlight> is an overflow bin of Bin <highlight><bold>716</bold></highlight>, and directly follows Bin <highlight><bold>716</bold></highlight> in the sorted sequence. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Bins <highlight><bold>710</bold></highlight>-<highlight><bold>722</bold></highlight> may be sorted according to the process illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. At step <highlight><bold>401</bold></highlight>, the process begins. In this example, n represents the Initial Region being sorted and z represents the Additional Region being used as buffer space for the sorting process. At step <highlight><bold>403</bold></highlight>, the current Initial Region is sorted. Each Initial Region may be sorted into an intermediary sorted set, for example, according to the process described above and illustrated in <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>. In this example, Upper Initial Region <highlight><bold>620</bold></highlight> is sorted first using Upper Additional Region <highlight><bold>622</bold></highlight> and the Return Region. First, Bin <highlight><bold>714</bold></highlight> is moved from Upper Initial Region <highlight><bold>620</bold></highlight> to the Return Region, as shown in <cross-reference target="DRAWINGS">FIG. 6C</cross-reference>. Now, Upper Initial Region is in sorted order and Additional Region <highlight><bold>632</bold></highlight> is in sorted order, so bin <highlight><bold>714</bold></highlight> is moved to Upper Additional Region <highlight><bold>622</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 6D</cross-reference>. The process continues to step <highlight><bold>405</bold></highlight>. All Initial Regions have not yet been sorted, so the process returns to step <highlight><bold>403</bold></highlight> where the next Initial Region is sorted. In this example, since Middle Initial Region <highlight><bold>630</bold></highlight> is already in sorted order, it does not need to be sorted. Again, the process returns to step <highlight><bold>403</bold></highlight> where the next Initial Region is sorted. In this example, the next Initial Region is Lower Initial Region <highlight><bold>640</bold></highlight>, so Bin <highlight><bold>718</bold></highlight> is moved to the Return Region, as shown in <cross-reference target="DRAWINGS">FIG. 6E</cross-reference>. Now Lower Initial Region is in sorted order and Middle Additional Region <highlight><bold>632</bold></highlight> is in sorted order, so Bin <highlight><bold>718</bold></highlight> is moved to Lower Additional Region <highlight><bold>642</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 6F</cross-reference>. The process then continues to step <highlight><bold>405</bold></highlight>. Since all Initial Regions have now been sorted, The process continues to step <highlight><bold>409</bold></highlight>. Now, all items may be may be from the intermediary sorted sets in the Sorting Regions to the Return Region, and sent down Final Return Conveyor <highlight><bold>634</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>G, Bins <highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight> are moved from Middle Initial Region <highlight><bold>630</bold></highlight> to the Return Region and then to the Final Return Conveyor. Next, the Bin <highlight><bold>714</bold></highlight> is moved to the Return Region followed by Bins <highlight><bold>716</bold></highlight>, <highlight><bold>718</bold></highlight>, and <highlight><bold>720</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 6H</cross-reference>. Finally, Bin <highlight><bold>722</bold></highlight> is moved from the Lower Initial Region to the Return Region as shown in <cross-reference target="DRAWINGS">FIG. 61</cross-reference>. Now, all items haven returned serially in the desired sorted sequence. Thus, the process ends at step <highlight><bold>411</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> After each bin is returned using Final Return Conveyor <highlight><bold>634</bold></highlight>, a sheet of paper or other identifier may be placed with each bin identifying its contents. This identifier may be human-readable or computer-readable, but is not used during the sorting the process. The identifier is used simply to identify the contents of each bin and is easily removed and separated from the bin to facilitate bin reuse. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The present invention is not limited to the apparatus and method described with respect to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>I. Other embodiments will occur readily to one skilled in the art and are intended to be within the spirit and scope of the present invention. For example, many other arrangements of the Sorting Apparatus <highlight><bold>105</bold></highlight> are possible, including altering the number of Initial and Additional Regions and altering the location of the Initial and Additional Regions. Additionally, the bins need not be sorted based on zipcode. Any criteria for determining the sorted sequence may be used. Also, the present invention need not be limited to sorting postal bins, many other types of items could be sorted. Moreover, the sorting process may be set up such that the sorting order of the items being sorted changes during the progress of the sort itself. For example, the first n items may be sorted using one sorted order and a next portion of items may be sorted using a different sorting order. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Not all items located on the Sorting Apparatus need be sorted. For example, if Sorting Apparatus <highlight><bold>105</bold></highlight> is used to sort bins full of mail items, wherein some bins contain domestic mail and others contain foreign mail, Sorting Apparatus <highlight><bold>105</bold></highlight> may be used to sort and return only the bins containing domestic mail, while the bins containing foreign mail may be left on Sorting Apparatus <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The invention is not limited by the embodiments described above which are presented as illustrations only, and can be modified and augmented various ways within the scope of protection defined by the appended claims or as contemplated by one of ordinary skill in the art.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for sorting a plurality of items, to each of which a sequence number is assigned, into a predetermined sorted sequence using a plurality of sorting regions, including for each sort, at least one initial sorting region, and at least two additional sorting regions, at least one of the additional sorting regions functioning as a return region, the items being initially located in the at least one initial sorting region, the method comprising the acts of: 
<claim-text>sorting the items in each at least one initial sorting region into an intermediary sorted set by physically moving at least some of the items in the at least one initial sorting region between the at least one initial sorting region and at least two of the additional sorting regions; and </claim-text>
<claim-text>sorting the items within each intermediary sorted set by physically moving at least some of the items to the return region in substantially the predetermined sorted sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the act of using a computer to track the location of each of the plurality of items. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the items are sorted in a single pass. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the act of conveying items from at least one of the return regions serially and in the predetermined sorted sequence. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the act of placing an identifier with each of the plurality of items. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising the act of checking the identifier to ensure that the order of the items substantially matches the predetermined sorted sequence. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the items are positioned linearly in the sorting regions. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein a computer is used to control the movement and positioning of the items according to a predetermined algorithm. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An apparatus for sorting a plurality of items comprising: 
<claim-text>a plurality of sorting regions; </claim-text>
<claim-text>a first mechanism for moving at least one item between at least two selected sorting regions; </claim-text>
<claim-text>a second mechanism for moving at least one item between positions within each sorting region; </claim-text>
<claim-text>an item location tracking mechanism; and </claim-text>
<claim-text>a controls operative for controlling the first and second mechanisms to move the items into a predetermined sorted sequence at least partly in response to the tracking mechanism. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein at least some of the sorting regions are located one under another and wherein the first mechanism includes an elevator. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the second mechanism is a conveyor. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the controls include a processor running a subroutine for issuing instructions according to a selected item sorting algorithm. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the items are postal bins. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the plurality of sorting regions comprise for each sorting at least one initial region in which items are initially located, at least one return region in which items are located after completion of sorting and at least one additional region used in the sorting. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. An apparatus for using a plurality of sorting regions to sort a plurality of items comprising: 
<claim-text>means for moving at least one item between at least two selected sorting regions; </claim-text>
<claim-text>means for moving at least one item between positions within each sorting region; </claim-text>
<claim-text>means for tracking the location of items; and </claim-text>
<claim-text>means operative at least partly in response the tracking mechanism for controlling the first and second mechanisms to reposition items into a predetermined sorted sequence.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030000871A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030000871A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030000871A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030000871A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030000871A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030000871A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030000871A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030000871A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030000871A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030000871A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030000871A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030000871A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030000871A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030000871A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030000871A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030000871A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
