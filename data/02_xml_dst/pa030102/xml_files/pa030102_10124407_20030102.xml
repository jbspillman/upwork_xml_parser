<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001897A1-20030102-D00000.TIF SYSTEM "US20030001897A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00001.TIF SYSTEM "US20030001897A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00002.TIF SYSTEM "US20030001897A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00003.TIF SYSTEM "US20030001897A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00004.TIF SYSTEM "US20030001897A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00005.TIF SYSTEM "US20030001897A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00006.TIF SYSTEM "US20030001897A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00007.TIF SYSTEM "US20030001897A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00008.TIF SYSTEM "US20030001897A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00009.TIF SYSTEM "US20030001897A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00010.TIF SYSTEM "US20030001897A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00011.TIF SYSTEM "US20030001897A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001897A1-20030102-D00012.TIF SYSTEM "US20030001897A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001897</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10124407</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020416</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>772000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Real-time display of bandwidth utilization in a transport multiplexer</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60285188</doc-number>
<document-date>20010420</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60285153</doc-number>
<document-date>20010420</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Branislav</given-name>
<middle-name>N.</middle-name>
<family-name>Meandzija</family-name>
</name>
<residence>
<residence-us>
<city>Del Mar</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Ying</given-name>
<middle-name>Ying</middle-name>
<family-name>Tsay</family-name>
</name>
<residence>
<residence-us>
<city>San Diego</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>General Instrument Corporation</organization-name>
<address>
<city>Horsham</city>
<state>PA</state>
</address>
<assignee-type>2</assignee-type>
</assignee>
<correspondence-address>
<name-1>LAW OFFICE OF BARRY R LIPSITZ</name-1>
<name-2></name-2>
<address>
<address-1>755 MAIN STREET</address-1>
<city>MONROE</city>
<state>CT</state>
<postalcode>06468</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A feature-rich transport multiplexer and a number of associated methods, systems, subsystems, software features, graphical user interfaces and control systems are disclosed. The disclosure includes GUI&apos;s that enable operators to easily monitor and manipulate content streams flowing through a transport multiplexer in real-time. The disclosed interfaces include screens that supply operators with identity, structure, configuration, bandwidth utilization and/or status information for system hardware and software. The disclosed features also provide computer assisted routing configuration for present and future routing events through simple manipulation, such as drag and drop operations, of graphical objects. Routing control is further simplified by permitting operators to configure routing control of individual content stream components as well as groups of such components simultaneously. Further flexibility is permitted by predetermination of future routing events, thereby enabling the automatic execution of configuration changes at a future time. Various types of content, such as video, audio, IP data can be manipulated to achieve various results such as one or more multiplexed MPEG data streams. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED CASES </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims the benefit under 35 U.S.C. 119(e) of co-pending U.S. Provisional Application No. 60/285,188 filed Apr. 20, 2001 and entitled &ldquo;Broadband Bandwidth Management, Device Management and Multi-Media Control System&rdquo;; and No. 60/285,153 filed Apr. 20, 2001 and entitled &ldquo;Data Insertion, Transport, Grooming, Aliasing, Routing, and Multiplexing of MPEG 2 Data Streams&rdquo;, which Provisional Applications are hereby incorporated by reference. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This application is related to co-pending U.S. patent application Ser. No. ______, filed Apr. 16, 2002 (based on provisional application No. 60/322,063 filed Sep. 13, 2001) and entitled &ldquo;High Speed Serial Data Transport Between Communications Hardware Modules,&rdquo; which Application is hereby incorporated by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">REFERENCE TO COMPUTER PROGRAM </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This application hereby incorporates by reference a computer program listing submitted concurrently herewith on two duplicate compact discs pursuant to the provisions of 37 C.F.R. &sect;1.52(e)(5). One complete copy of the computer program listing is provided on each of the accompanying compact discs and the discs have been labeled &ldquo;Copy 1&rdquo; and &ldquo;Copy 2&rdquo; as required by 37 C.F.R. &sect;1.52(e)(5). The incorporated computer program listing is contained in a single file created on Apr. 12, 2002, named &ldquo;mib tables-appendix.doc&rdquo; and consisting of 150 kilobytes. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The present invention is directed to systems, processes, methodologies, apparatus and related software to provide graphical user interfaces for use with communications hardware. More particularly, the invention relates to the field of graphical user interfaces that provide real-time visual display of bandwidth utilization for content streams routed through broadband media routers. Accordingly, the general objects of the invention are to provide novel systems, methods, apparatus and software of such character. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Broadband media convergence between video, audio and data creates a chaotic environment of different standards and legacy communications technologies. The relationship between physical and logical resources in such systems needs to be manipulated and communicated between broadband hardware, its control system and the operator. Conventionally, this is accomplished with the use of dedicated control computers for each piece of communications hardware associated with the task of routing multimedia. Therefore, modem communications hardware personnel, such as cable operators and television programmers, use great numbers of diverse equipment, each of which is managed by a separate control system hosted on a separate computer. Conventional communications systems of this nature also typically require the use of hyper-technical operator interfaces in order to configure conventional broadband equipment. For these and other reasons, most of such systems are nearly intolerably difficult to utilize, counter-intuitive, cryptic, inefficient and expensive to purchase and operate. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Another problem with conventional broadband communications hardware is their inability to conveniently provide operators with information regarding the system hardware and software. This is, in part, due to the fact that current broadband communications hardware is not sophisticated enough to indicate various attributes of plural data streams. Additionally, user interfaces for conventional broadband communications hardware require skilled personnel to configure routing control for various programs. The difficulties associated with conventional methods of routing control make it extremely difficult to efficiently utilize system bandwidth. Therefore, operators of conventional broadband media routers often underutilize the bandwidth available to perform content stream routing. Given that transport bandwidth is still a precious commodity in this field, this is a significant deficiency. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> There is, accordingly, a need in the art for novel methods, systems and apparatus for use in a broadband media router that captures both input bandwidth utilization and output bandwidth utilization data and permits comparative display of these values to occur in real-time. Such methods and apparatus should be sensitive enough to permit operators to perform a visual assessment of the transcoding algorithm efficiency of a broadband media router. Such methods and apparatus should also be able to display bandwidth minima and maxima over a given time period. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> There is a further need in the art for novel methods, systems and apparatus that provide operators with real-time bandwidth utilization feedback in order to assist the operators with attempts to maximize bandwidth utilization in a broadband media router. Such methods and apparatus should have the ability to recalculate available bandwidth in real-time and while content stream editing is being performed. This would enable operators to more easily allocate bandwidth among the various content streams so that maximum bandwidth utilization could be achieved. In order to maximize flexibility, such methods and apparatus should also have the ability to break routed content streams down into constituent components for display. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The present invention satisfies the above-stated needs and overcomes the above-stated and other deficiencies of the related art by providing methods, systems and apparatus that enable real-time visual display of bandwidth utilization of content streams routed through broadband media routers. The present invention can take the form of a graphical user interface capable of displaying real-time bandwidth utilization feedback in order to assist operators attempting to maximize bandwidth utilization through judicious content stream routing. To further enrich functionality of the present invention, the router interface has the ability to capture both input bandwidth utilization and output bandwidth utilization data and it permits comparative display of these values to occur in real-time. The display is sensitive enough to permit operators to perform a visual assessment of the transcoding algorithm efficiency of a broadband media router and also comprehensive enough to display bandwidth minima and maxima over a given time period. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Effectiveness of the invention is optimized by recalculating available bandwidth in real-time and during content stream editing to thereby help operators allocate bandwidth among the various content streams. Additional, conveniences provided by the invention include the ability to automatically rescale x and y axes of the bandwidth utilization display, the resealing occurring in real-time to accommodate changes in data to be displayed. The invention can also display individual components of the routed content streams where each component is represented by a bandwidth bar capable of displaying a plurality of bandwidth attributes such as: output bandwidth utilization, input bandwidth utilization, maximum input bandwidth utilization and minimum input bandwidth utilization. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The invention can also take the form of a method of displaying real-time bandwidth utilization data for plural content streams routed through a broadband media router where the content streams have attributes that vary over time. The method preferably envisions simultaneous display of graphical objects representing input bandwidth utilization, output bandwidth utilization, maximum input bandwidth utilization, and minimum input bandwidth utilization. In a particularly advantageous form of the inventive method, all of these graphical objects are formed as a single bandwidth bar with a height that varies as a function of at least one of the content stream attributes. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> With certain embodiments of the invention, the incoming content streams can each comprise plural hierarchical components. In such embodiments, the inventive methods further comprise separately displaying at least one attribute of all of the plural components of one content stream in response to selection of that content stream. While a number of different attributes could be displayed, display of unique alphanumeric character strings obtained from the plural component streams is particularly advantageous. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Naturally, the above-described methods of the invention are particularly well adapted for use with the above-described apparatus of the invention. Similarly, the apparatus of the invention are well suited to perform the inventive methods described above. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Numerous other advantages and features of the present invention will become apparent to those of ordinary skill in the art from the following detailed description of the preferred embodiments, from the claims and from the accompanying drawings. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The preferred embodiments of the present invention will hereinafter be described in conjunction with the appended drawing figures, wherein like numerals denote like elements, and wherein: </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>illustrates the hardware architecture of a transport multiplexer in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b </italic></highlight>illustrates a preferred form of the firmware host processor architecture of the transport multiplexer of <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a; </italic></highlight></paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates system initialization and resource discovery processes for the transport multiplexer of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the processes being in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates various system hardware attribute viewing capabilities in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates system attribute viewing capabilities in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates various output port enabling processes in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates specification of present video and/or audio stream routing event(s) in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates various system bandwidth utilization viewing capabilities in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates certain event logging and viewing capabilities and processes in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates specification of future content stream routing event(s) in accordance with one preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates various IP data encapsulation and insertion capabilities in accordance with one preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a detailed flow chart illustrating the IP data encapsulation and insertion capabilities of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> in greater detail. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The ensuing detailed description provides preferred exemplary embodiments only, and is not intended to limit the scope, applicability, or configuration of the invention. Rather, the ensuing detailed description of the preferred exemplary embodiments will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment of the invention. It being understood that various changes may be made in the functional arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>, TMX <highlight><bold>20</bold></highlight> includes a plurality of hardware, firmware and software components. <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>is a hardware architecture diagram showing a representative transport multiplexer (TMX) <highlight><bold>20</bold></highlight> in accordance with one preferred embodiment of the present invention. As shown therein, the transport multiplexer can include, for example, a computer <highlight><bold>22</bold></highlight>&prime; (with an element manager <highlight><bold>22</bold></highlight> and a GUI <highlight><bold>80</bold></highlight>) that is communicatively linked to a TMX chassis <highlight><bold>42</bold></highlight> via a network <highlight><bold>24</bold></highlight>. TMX chassis <highlight><bold>42</bold></highlight> preferably includes a host processor board <highlight><bold>40</bold></highlight>&prime; (preferably with a VxWorks operating system), an input processor board <highlight><bold>50</bold></highlight>&prime;, and output processor board <highlight><bold>55</bold></highlight>&prime;, a multiplexer board <highlight><bold>60</bold></highlight>&prime; and a transcoding board <highlight><bold>70</bold></highlight>&prime;. These components are preferably, but not necessarily communicatively linked to one another with a single TMX chassis <highlight><bold>42</bold></highlight>. The basic physical model of the preferred TMX chassis hardware is as follows: the TMX chassis is a container for boards, each board is a container for ports and processors, each processor is a container for firmware, and each port is a container for a protocol hierarchy (i.e., DS3, MPEG, TCP/IP, etc.). The chassis and each board have a set of state and status variables associated with them. These include: 1) an administrative state which is used to synchronize configuration access of multiple managers; 2) an operational state which is used to indicate whether or not the TMX (or a component of it) is in a fully enabled and operational state; and 3) an alarm status which is used to signal a variety of alarm conditions by the TMX or a component thereof. As described in detail below, the host processor <highlight><bold>40</bold></highlight> controls the various hardware and software components of TMX <highlight><bold>20</bold></highlight> and stores MIB table data in accordance with SNMP for use by the various other components of the TMX and the element manager. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Transport multiplexer <highlight><bold>20</bold></highlight> is suited to a wide variety of application environments including: (1) cable headend; (2) satellite uplink; and (3) terrestrial broadcast. Communication between element manager <highlight><bold>22</bold></highlight> and TMX chassis <highlight><bold>42</bold></highlight> is preferably performed in accordance with a modified Simple Network Management Protocol (SNMP) and the content streams to be routed through transport multiplexer <highlight><bold>20</bold></highlight> are preferably in accordance with one of the well-known MPEG standards. Most preferably, the content streams are MPEG2 data streams. While some preferred embodiments of the present invention use some conventional MIB tables in accordance with well known SNMP standards, many of the MIB&apos;s referenced herein comprise novel data structures. These data structures are fully defined in the computer program appendix incorporated by reference. Therefore, those of ordinary skill will more than amply understand the nature and function of those novel data structures based on the teachings contained herein. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> A more detailed description of the hardware components of TMX <highlight><bold>20</bold></highlight> is provided in previously mentioned co-pending U.S. patent application Ser. No. ______, filed Apr. 16, 2002 and entitled &ldquo;High Speed Serial Data Transport Between Communications Hardware Modules,&rdquo; which Application has been incorporated herein by reference. Accordingly, further detailed discussion of these hardware components is not necessary, a complete understanding of these components being achieved with reference to these incorporated applications. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The relationship between physical and logical resources in the system needs to be manipulated and communicated between TMX chassis <highlight><bold>42</bold></highlight>, element manager <highlight><bold>22</bold></highlight> and human operators <highlight><bold>10</bold></highlight> (e.g., <cross-reference target="DRAWINGS">FIG. 2</cross-reference>). This is generally achieved by modeling the various hardware components of the system. The TMX modeling elements are integrated into the SNMP Management Information Base (MIBs) by using the standard &ldquo;MIB <highlight><bold>2</bold></highlight>&rdquo; interfaces table (ifTable) to represent each one of the modeling elements as an interface with specific extensions as specified below. This permits identification of any board and/or any port, by its table index: the ifindex in the ifTable. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> With continuing reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a</italic></highlight>, element manager <highlight><bold>22</bold></highlight> is preferably linked to TMX chassis <highlight><bold>42</bold></highlight> by an Ethernet. It will be appreciated by those skilled in the art that other network technologies can alternatively be used. Element manager <highlight><bold>22</bold></highlight> may be uploaded as a java-application from TMX <highlight><bold>42</bold></highlight> to a remote computer using a browser, the remote computer preferably being communicatively linked to transport multiplexer <highlight><bold>20</bold></highlight> via network <highlight><bold>24</bold></highlight> during an initial set-up phase. Subsequently, element manager <highlight><bold>22</bold></highlight> can be run on the remote computer as a java program. The remote computer is preferably a conventional personal computer with a conventional operating system and browser, the system permitting control over TMX chassis <highlight><bold>42</bold></highlight> subsequent to installation of element manager <highlight><bold>22</bold></highlight>. A graphical user interface (GUI) is preferably incorporated into element manager <highlight><bold>22</bold></highlight> and is described in detail below. The GUI is preferably presented to an operator on a conventional personal computer monitor (e.g., an LCD screen or a CRT monitor). A wide variety of alternative software and hardware components for hosting and operating graphical user interface and element manager <highlight><bold>22</bold></highlight> will readily occur to those of ordinary skill in the art based on the disclosure contained herein </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>b </italic></highlight>illustrates various firmware and software components <highlight><bold>52</bold></highlight>-<highlight><bold>69</bold></highlight> of TMX <highlight><bold>20</bold></highlight> which are communicatively linked to one another as shown therein. These components include an SNMP agent <highlight><bold>44</bold></highlight>, a message handler <highlight><bold>45</bold></highlight> and a fault manager <highlight><bold>59</bold></highlight>. TMX <highlight><bold>20</bold></highlight> further comprises a resource manager <highlight><bold>52</bold></highlight>, a configuration manager <highlight><bold>46</bold></highlight>, a PAT/PMT collection module <highlight><bold>54</bold></highlight>, a PSIP collection module <highlight><bold>57</bold></highlight>, an input module <highlight><bold>50</bold></highlight>, an IP encapsulation module <highlight><bold>66</bold></highlight>, a time table manager <highlight><bold>67</bold></highlight> and a number of DSP API&apos;s. These include multiplexer processing <highlight><bold>60</bold></highlight>, transcode processing <highlight><bold>62</bold></highlight> and quantization level processing <highlight><bold>64</bold></highlight>. There is a one-to-one correspondence between these firmware modules and certain hardware components of the preferred embodiment. The corresponding hardware components can be found in <cross-reference target="DRAWINGS">FIG. 1</cross-reference><highlight><italic>a </italic></highlight>and include input processor board <highlight><bold>50</bold></highlight>&prime;, multiplexer board <highlight><bold>60</bold></highlight>&prime; (with a multiplex processor <highlight><bold>60</bold></highlight> and a quantization level processor <highlight><bold>61</bold></highlight>), a transcoding board <highlight><bold>70</bold></highlight>&prime; (with either 5 transcode processors <highlight><bold>71</bold></highlight> or 3 transcode processors, 1 multiplex processor and 1 QLP <highlight><bold>71</bold></highlight>&prime;). Consequently, when the configuration manager performs operations on the firmware modules, the corresponding hardware modules are also affected. The flow of information and commands between the various components within TMX chassis <highlight><bold>42</bold></highlight> is generally indicated in <cross-reference target="DRAWINGS">FIGS. 1</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>by the use of arrows. In particular, the flow of commands and information from element manager <highlight><bold>22</bold></highlight> is through SNMP agent <highlight><bold>44</bold></highlight>, which translates SNMP protocol commands from element manager <highlight><bold>22</bold></highlight> into a conventional form so that they can be understood by the various other components of TMX <highlight><bold>20</bold></highlight>. The preferred conventional communication protocol is a simple protocol in which a number indicative of a request or command is passed along with an associated data structure for receiving data to be manipulated in accordance with the associated command. Thus, SNMP agent <highlight><bold>44</bold></highlight> generally acts as a communication broker between element manager <highlight><bold>22</bold></highlight> and the host processor firmware. SNMP agent <highlight><bold>44</bold></highlight> allows SNMP based management of and control over firmware functionality such as grooming, splicing, data insertion, etc., because it provides an interface with the various firmware modules (e.g., input processing task <highlight><bold>50</bold></highlight>, multiplexer processing <highlight><bold>60</bold></highlight>, transcode processing <highlight><bold>62</bold></highlight> and quantization level processing <highlight><bold>64</bold></highlight>) that ultimately provide the desired functionality. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Configuration manager <highlight><bold>46</bold></highlight> receives commands and information from SNMP agent <highlight><bold>44</bold></highlight> via MIB message handler <highlight><bold>45</bold></highlight> and determines how to utilize the hardware and other firmware to execute those commands at the card level. A detailed understanding of the various other components of TMX <highlight><bold>20</bold></highlight> will be obtained with reference to <cross-reference target="DRAWINGS">FIGS. 2 through 9</cross-reference> and the corresponding detailed description of these figures in the remainder of this specification. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2 through 11</cross-reference> illustrate the nine primary operational aspects of transport multiplexer <highlight><bold>20</bold></highlight>. These nine operational aspects include (1) initialization and discovery of system resources <highlight><bold>100</bold></highlight>; (2) view system hardware attributes <highlight><bold>134</bold></highlight>; (3) view system software attributes <highlight><bold>156</bold></highlight>; (4) enable output port <highlight><bold>166</bold></highlight>; (5) specify present video and/or audio routing event(s) <highlight><bold>184</bold></highlight>; (6) view bandwidth utilization <highlight><bold>206</bold></highlight>; (7) view log activity <highlight><bold>222</bold></highlight>; (8) specify future routing event(s) <highlight><bold>238</bold></highlight>; and (9) IP data encapsulation and insertion <highlight><bold>260</bold></highlight>. These aspects of the present invention are discussed in detail immediately below. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, there is illustrated therein system initialization and resource discovery processes for the broadband multiplexer of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the processes being in accordance with one preferred embodiment of the present invention. As shown, initialization and discovery of the inventive system commences with power-up <highlight><bold>101</bold></highlight> of TMX chassis <highlight><bold>42</bold></highlight>, whereupon resource manager <highlight><bold>52</bold></highlight> conducts discovery (at <highlight><bold>102</bold></highlight>) of the hardware and system software information. Thus, TMX chassis <highlight><bold>42</bold></highlight> executes a number of functions at <highlight><bold>104</bold></highlight> to identify system components installed in TMX chassis <highlight><bold>42</bold></highlight>. Also at <highlight><bold>102</bold></highlight>, MIB message handler <highlight><bold>45</bold></highlight> populates the appropriate MIB&apos;s (ifTable and ifStack) with information and SNMP agent <highlight><bold>44</bold></highlight> awaits queries at <highlight><bold>106</bold></highlight>. Upon completion of these tasks, TMX chassis <highlight><bold>42</bold></highlight> is prepared to execute various activities based on operator-driven commands delivered to TMX chassis <highlight><bold>42</bold></highlight> via element manager <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> At this point, an operator <highlight><bold>10</bold></highlight> can start up element manager <highlight><bold>22</bold></highlight> in response to which the element manager, at <highlight><bold>104</bold></highlight>, displays graphical user interface <highlight><bold>80</bold></highlight> showing a blank tree view screen <highlight><bold>81</bold></highlight> for viewing. Blank tree view screen <highlight><bold>81</bold></highlight> includes an input tree window <highlight><bold>82</bold></highlight>, an output tree window <highlight><bold>82</bold></highlight>&prime; and a log message window <highlight><bold>87</bold></highlight>. At <highlight><bold>108</bold></highlight>, element manager <highlight><bold>22</bold></highlight> automatically reads the appropriate MIB&apos;s to discover the hardware that is currently installed in TMX <highlight><bold>20</bold></highlight>. This includes system hardware attribute data such as port data and/or physical structure. There are several types of ports (e.g., ASI, DHEI, SMPTE 310, DS3) which are supported by the preferred embodiment of the present invention. Data for various port parameters is described/defined by the ifentry MIB table. At <highlight><bold>110</bold></highlight>, element manager <highlight><bold>22</bold></highlight> downloads the appropriate DSP code to the IdentxTable MIB. SNMP agent <highlight><bold>44</bold></highlight> of TMX chassis <highlight><bold>42</bold></highlight> creates a new MIB entry at <highlight><bold>112</bold></highlight> and message handler <highlight><bold>45</bold></highlight> passes this information to configuration manager <highlight><bold>46</bold></highlight> for fulfillment. At this point, element manager <highlight><bold>22</bold></highlight> requests PAT data at <highlight><bold>114</bold></highlight>. This request is processed by the TMX at <highlight><bold>116</bold></highlight>. At <highlight><bold>120</bold></highlight>, the PAT is parsed by element manager <highlight><bold>22</bold></highlight> so that the appropriate PMT&apos;s can be identified. These are requested at <highlight><bold>122</bold></highlight> and this request is processed by the TMX at <highlight><bold>124</bold></highlight>. After the requested information is generated, SNMP agent <highlight><bold>44</bold></highlight>, awaits further queries at <highlight><bold>126</bold></highlight>. This data is then read by element manager <highlight><bold>22</bold></highlight> at <highlight><bold>128</bold></highlight> and graphical user interface <highlight><bold>80</bold></highlight> is updated. In particular, the requested data is used to populate tree view screen <highlight><bold>81</bold></highlight> with system hardware icons <highlight><bold>84</bold></highlight> and <highlight><bold>84</bold></highlight>&prime; and, preferably mnemonic, hardware names <highlight><bold>83</bold></highlight> and <highlight><bold>83</bold></highlight>&prime; extracted from the data streams themselves using PSIP collection module <highlight><bold>57</bold></highlight>. Operator <highlight><bold>10</bold></highlight> is, thus, presented with a visual representation of the system hardware components. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> After receiving the system hardware attributes data from TMX chassis <highlight><bold>42</bold></highlight>, element manager <highlight><bold>22</bold></highlight> proceeds to retrieve and display log messages that may have been generated at <highlight><bold>130</bold></highlight>. This is achieved with the assistance of a fault manager <highlight><bold>59</bold></highlight> and SNMP agent <highlight><bold>44</bold></highlight> at <highlight><bold>132</bold></highlight>. Thus, once log polling has commenced, element manager <highlight><bold>22</bold></highlight> displays the port and log data at <highlight><bold>132</bold></highlight> to graphical user interface <highlight><bold>80</bold></highlight> where the tree view screen is updated to display input ports <highlight><bold>85</bold></highlight>, output ports <highlight><bold>85</bold></highlight>&prime; and log messages <highlight><bold>88</bold></highlight> in log message window <highlight><bold>87</bold></highlight>. As shown, input and output ports <highlight><bold>85</bold></highlight> and <highlight><bold>85</bold></highlight>&prime; preferably have associated mnemonic and alphanumeric identifiers. The ports are also preferably color coded to indicate whether or not the ports are active. Upon reviewing the newly completed tree view screen <highlight><bold>81</bold></highlight>, operator <highlight><bold>10</bold></highlight> can initiate various activities as described below with respect to <cross-reference target="DRAWINGS">FIGS. 3 through 10</cross-reference>. These activities can include, for example, view system hardware attributes <highlight><bold>134</bold></highlight>, view system software attributes <highlight><bold>156</bold></highlight>, enable output port <highlight><bold>166</bold></highlight>, specify present video and/or audio routing events <highlight><bold>184</bold></highlight>, view bandwidth utilization <highlight><bold>206</bold></highlight>, view log activity <highlight><bold>222</bold></highlight>, specify future routing events <highlight><bold>238</bold></highlight> and IP data encapsulation and insertion event(s) <highlight><bold>260</bold></highlight>. Various other related activities that can be performed by operator <highlight><bold>10</bold></highlight> will readily occur to those of ordinary skill in the art based on the disclosure contained herein. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, this Figure illustrates various system hardware attribute viewing processes <highlight><bold>134</bold></highlight> in accordance with one preferred embodiment of the present invention. The hardware processes shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> are initiated by operator <highlight><bold>10</bold></highlight> upon selection of the chassis view screen from the menu items at the top of tree view screen <highlight><bold>81</bold></highlight>. This option is accessed by selecting the &ldquo;view&rdquo; menu item at the top of the screen and selecting the chassis view option. Available hardware viewing options include &ldquo;front chassis view&rdquo; and &ldquo;rear chassis view&rdquo; and &ldquo;system information.&rdquo; Upon selection of one of the chassis view options at the graphical user interface, element manager <highlight><bold>22</bold></highlight> gathers the requested hardware information from the appropriate MIB&apos;s (<highlight><bold>136</bold></highlight>) with the assistance of TMX chassis <highlight><bold>42</bold></highlight>. This MIB data is provided by TMX chassis <highlight><bold>42</bold></highlight> as indicated by <highlight><bold>138</bold></highlight> and element manager <highlight><bold>22</bold></highlight> then displays the information on one of chassis view screen <highlight><bold>89</bold></highlight> and <highlight><bold>90</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> With continuing reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, one can see that graphical user interface <highlight><bold>80</bold></highlight> uses the received hardware and status data to display system hardware attributes and, in particular, chassis view screens <highlight><bold>89</bold></highlight> and <highlight><bold>90</bold></highlight> as initially requested by operator <highlight><bold>10</bold></highlight>. Front chassis view screen <highlight><bold>89</bold></highlight> includes various graphical objects indicative of the identity of, physical structure of, configuration of and status of the various cards received within TMX chassis <highlight><bold>42</bold></highlight>. In this illustrative example, these cards include CPU card <highlight><bold>40</bold></highlight>&Prime;, multiplexer card <highlight><bold>60</bold></highlight>&prime;, first input processor board <highlight><bold>50</bold></highlight>&Prime; and second input processor board <highlight><bold>50</bold></highlight>&prime;&Prime;. While it is also possible to receive log messages within log message window <highlight><bold>87</bold></highlight> of front chassis view screen <highlight><bold>89</bold></highlight>, no log messages have been generated in this illustrative example. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Rear chassis view screen <highlight><bold>90</bold></highlight> can also be selected by operator <highlight><bold>10</bold></highlight> as an alternative to front chassis view screen <highlight><bold>89</bold></highlight>. In this illustrative example, rear chassis view screen <highlight><bold>90</bold></highlight> includes various graphical objects indicative of the identity of, physical structure of, configuration of and status of the rear portion of the various cards received within TMX chassis <highlight><bold>42</bold></highlight> and discussed above with respect to the front chassis view. The log messages can, optionally, also be displayed in log message window <highlight><bold>87</bold></highlight> of rear chassis view screen <highlight><bold>90</bold></highlight>. This aspect of the present invention allows an operator <highlight><bold>10</bold></highlight> to easily select, and then, view system hardware attributes in the manner discussed above. This feature of the present invention is particularly advantageous in that it allows an operator to troubleshoot difficulties with transport multiplexer <highlight><bold>20</bold></highlight> without having to physically access the communications hardware itself. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The preferred continuous hardware status polling features of the present invention are shown at <highlight><bold>139</bold></highlight>. In particular, the LED status information provided in the chassis view screens is updated at regular intervals by the repeated execution of the functions shown in blocks <highlight><bold>140</bold></highlight>-<highlight><bold>146</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Turing now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, this figure illustrates system attribute viewing processes and capabilities <highlight><bold>156</bold></highlight> in accordance with one preferred embodiment of the present invention. As shown therein, viewing of system attributes such as board type, DSP attributes, software version, etc. commences with the initial system discovery process when the TMX executes the functions shown at <highlight><bold>158</bold></highlight>. Thus, this information is readily available for display and SNMP agent <highlight><bold>160</bold></highlight> waits for such queries at <highlight><bold>160</bold></highlight>. Upon selection of the version view menu option within the top portion of tree view screen <highlight><bold>81</bold></highlight> by operator <highlight><bold>10</bold></highlight>, element manager <highlight><bold>22</bold></highlight> gathers the requested information at <highlight><bold>162</bold></highlight> displays it in system attributes screen <highlight><bold>91</bold></highlight>. The data can then be viewed by operator <highlight><bold>10</bold></highlight> as desired. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and Table 1 below, system attributes data displayed on screen <highlight><bold>91</bold></highlight> preferably includes the following data fields for the board and software running on each chassis slot:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Board Name</entry>
</row>
<row>
<entry>TMX Application</entry>
</row>
<row>
<entry>JVM Version</entry>
</row>
<row>
<entry>System Name</entry>
</row>
<row>
<entry>IP Address</entry>
</row>
<row>
<entry>Chassis ID</entry>
</row>
<row>
<entry>Board Revision</entry>
</row>
<row>
<entry>FPGA Version</entry>
</row>
<row>
<entry>VxWorks 08</entry>
</row>
<row>
<entry>CPU Version</entry>
</row>
<row>
<entry>MAP Lib Version</entry>
</row>
<row>
<entry>MUX Version</entry>
</row>
<row>
<entry>QLP Version</entry>
</row>
<row>
<entry>TPE Version</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> In the illustrative embodiment of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, TMX chassis <highlight><bold>42</bold></highlight> is a mid-plane TMX chassis with five board slots in each half of the chassis. Accordingly, this illustrative example includes ten slots (five slots for each half-plane). A detailed description of the structure and operation of TMX chassis <highlight><bold>42</bold></highlight> is contained in the application incorporated by reference and a wide variety of variant arrangements will readily occur to those of skill in the art based on the disclosure contained herein. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>, the preferred embodiment of the present system includes a GUI with a system information tab with which an operator can access information about the system such as system name, system description, system up-time and system location. This feature of present invention operates in a manner that is generally analogous to the view software version feature shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and described in connection therewith immediately above </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates various output port enabling capabilities in accordance with one preferred embodiment of the present invention. As shown therein, output port enabling is initiated upon selection by operator <highlight><bold>10</bold></highlight> of the particular port to be enabled. Upon selection of a port, element manager <highlight><bold>22</bold></highlight>, at <highlight><bold>168</bold></highlight>, displays the transport editor <highlight><bold>92</bold></highlight> with default values. Operator <highlight><bold>10</bold></highlight> can then view the default data and edit the data if desired, such as by changing the status from disabled to enabled. For example, an operator will typically enable a transport stream, name that stream and assign an information transfer bit rate for the selected port. Upon selection of the &ldquo;OK&rdquo; button, the transport editor is closed, and element manager <highlight><bold>22</bold></highlight> gathers transport information from the editor and places it in the appropriate MIB tables (see <highlight><bold>170</bold></highlight>). The TMX chassis also uses this information to execute the enable request as indicated at <highlight><bold>172</bold></highlight>. The MIB table could be either one of two types: TMXiftable (for most ports) or the TMXgiexttable (for DS3 ports) due to the varying information requirements of the different port types. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Further, element manager <highlight><bold>22</bold></highlight> creates a PAT at <highlight><bold>174</bold></highlight> and the PAT is output by the TMX as indicated at <highlight><bold>176</bold></highlight>. Finally, the tree view screen <highlight><bold>81</bold></highlight> of the GUI is updated by the element manager as indicated at <highlight><bold>178</bold></highlight>. Graphical user interface <highlight><bold>80</bold></highlight> indicates successful enablement of the desired port by changing the attributes of the port icons in tree view screen <highlight><bold>81</bold></highlight>. This is preferably accomplished by changing the color of the port icons, but other alternatives (such as changes in shape, movement, location, size, sound, etc.) will readily occur to those of ordinary skill in the art. Operator <highlight><bold>10</bold></highlight> can, thus, visually confirm that port enablement was successfully completed by viewing the newly-updated graphical user interface <highlight><bold>80</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates various system-assisted video and/or audio routing capabilities in accordance with one preferred embodiment of the present invention. As described in greater detail below, the present invention enables operator <highlight><bold>10</bold></highlight> to define and execute content stream routing either manually or semi-automatically. In particular, the preferred embodiment of the present invention provides operators with the ability to manually enter routing data element by element or, alternatively, to drag and drop graphical objects to and from various locations of the tree view screen <highlight><bold>81</bold></highlight>. Element manager <highlight><bold>22</bold></highlight> cooperates with graphical user interface <highlight><bold>80</bold></highlight> to execute the various routing specification commands specified by corresponding drag and drop operations. This is achieved with automated population of MIB tables corresponding to the various actual fields necessary to define a routing command. Drag and drop operations on graphical user interface <highlight><bold>80</bold></highlight> assist operator <highlight><bold>10</bold></highlight> in defining video, audio and/or IP data routing events for the system. Defining routing specifications in this way is, therefore, semi-automatic. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Drag and drop operations on the graphical user interface can be used to perform a variety of related content stream routing functions. These include the ability to drag different levels from the input tree to the output tree. For example, an operator may drag (1) the content streams of an entire input port (possibly including plural programs, each of which possibly includes plural components) to an output port; (2) a complete program of an input port to an output port; (3) a complete program from an input port to a program of an output port; and (4) a component from an input port to an output port. A number of other drag and drop features will readily occur to those of ordinary skill in the art based on the disclosure contained herein. However, it should be noted that this portion of the specification specifically addresses content stream routing that occurs in the present. The invention, however, also envisions configuration of content stream routing to be automatically executed at a future time (see, e.g., <cross-reference target="DRAWINGS">FIG. 9</cross-reference>). As described in greater detail below, content stream routing processes described immediately below (applicable to execution of present routing commands) are compatible with, and form a portion of, routing processes for execution of routing events in the future. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> With primary reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, operator <highlight><bold>10</bold></highlight> can specify one or more present routing events by selecting the graphical objects representing one or more content streams to be routed to a desired location (e.g., an output port). The content stream could be either simple or contain plural components which may or may not be related to one another in one or more ways. For example, the object may represent a single component content stream, plural content steams that collectively constitute a program, or plural content steams that collectively constitute data streams present on an entire input port. In the illustrative example discussed immediately below, operator <highlight><bold>10</bold></highlight> drags the content streams for an entire port from the input tree to the output tree and proceeds to edit video and audio components of one program from the port. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Assisted routing in accordance with the invention is preferably accomplished with a drag and drop operation of one or more graphical objects from the input port window <highlight><bold>82</bold></highlight> to the output port window <highlight><bold>82</bold></highlight>&prime; of tree view screen <highlight><bold>81</bold></highlight>. This operation has the effect of capturing, as indicated at <highlight><bold>186</bold></highlight>, configuration data corresponding to the selected source of the data stream(s). For example, dragging and dropping the desired graphical objects enables element manager <highlight><bold>22</bold></highlight> to automatically capture corresponding configuration data for the desired routing events such as input port number and location, output port number and location, content stream PID to be routed and bit rate for the content streams to be routed. Additionally, information regarding the targeted output port (determined based on where the object is dropped) is also captured (<highlight><bold>188</bold></highlight>) by element manager <highlight><bold>22</bold></highlight> and includes, for example, the location of the targeted output port. This information enables element manager <highlight><bold>22</bold></highlight> to create default settings and to automatically perform PID aliasing at <highlight><bold>186</bold></highlight> so that there are no data stream conflicts as the various streams are routed through transport multiplexer <highlight><bold>20</bold></highlight>. The drag &amp; drop editors <highlight><bold>93</bold></highlight> and <highlight><bold>94</bold></highlight> are then displayed by element manager <highlight><bold>22</bold></highlight> as indicated at <highlight><bold>188</bold></highlight>. The operator can then select the particular component to be edited and, at <highlight><bold>192</bold></highlight>, element manager <highlight><bold>22</bold></highlight> receives the selection and displays a component editor (<highlight><bold>95</bold></highlight> for video streams or <highlight><bold>95</bold></highlight>&prime; for audio streams) with default information for possible editing. If the default data shown in the component editor <highlight><bold>95</bold></highlight> is acceptable to the operator, the &ldquo;OK&rdquo; button can be selected to cue the element manager to take further action. In particular, closing of the component editor window causes element manager <highlight><bold>22</bold></highlight> to gather the information from the GUI and to request the creation of various MIB table entries as shown at <highlight><bold>194</bold></highlight>. The TMX executes the routing events in accordance with the updated MIB&apos;s at <highlight><bold>196</bold></highlight> and the GUI is appropriately updated by the element manager <highlight><bold>22</bold></highlight> as indicated at <highlight><bold>198</bold></highlight>. From the operator&apos;s perspective, routing has been specified and performed simply by dragging and dropping an icon from the input tree to an output tree. In actuality, a variety of routing parameters have been specified with the assistance of the system as described in detail above. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> If operator <highlight><bold>10</bold></highlight> wishes to modify the default and/or captured data, operator <highlight><bold>10</bold></highlight> has the ability to edit the information in detail for each of the components that comprise the content stream. In the example shown, operator <highlight><bold>10</bold></highlight> has selected program 1 (in general, an operator would select some type of graphical object, such as an icon or its associated text) shown in editor window <highlight><bold>93</bold></highlight> and a more detailed editor window <highlight><bold>94</bold></highlight> is displayed, the window showing the constituent components of the selected program. In the case of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, program 1 has been selected for editing and it includes one video component and one audio component. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Graphical user interface <highlight><bold>80</bold></highlight> preferably has the capability of identifying content streams using a variety of graphical objects which include icons, alphanumeric character strings, actual program names, etc. on the various screens. The content stream identification data is preferably carried within the media stream so that it can be consistently displayed throughout the graphical user interface regardless of which viewing screen is presented to operator <highlight><bold>10</bold></highlight>. Restated, graphical user interface <highlight><bold>80</bold></highlight> preferably presents a consistent content stream name or symbol and can display it throughout the interface. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> With continuing reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, selection of the &ldquo;OK&rdquo; button of window <highlight><bold>94</bold></highlight> closes the drag and drop window and opens the component editor windows corresponding to the selected components as indicated at <highlight><bold>192</bold></highlight>. In this case, selection of a component to be edited further results in display of one of component editor windows <highlight><bold>95</bold></highlight> and <highlight><bold>95</bold></highlight>&prime; where operator <highlight><bold>10</bold></highlight> has the further ability to specify details such as bit rate, target PID, etc. for any of the components of the desired program. In this case, video editor window <highlight><bold>95</bold></highlight> and audio editor <highlight><bold>95</bold></highlight>&prime; are displayed for consideration and possible editing. This feature enables a user to more easily allocate bandwidth among the various content streams being routed so that maximum bandwidth utilization can be achieved. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Upon selection of the &ldquo;OK&rdquo; button of one of windows <highlight><bold>95</bold></highlight> or <highlight><bold>95</bold></highlight>&prime;, the element manager <highlight><bold>22</bold></highlight> changes the MIB table data in accordance with the edited changes and instructs the TMX to execute the specified routing configuration. Configuration manager <highlight><bold>46</bold></highlight> then sequentially configures the targeted multiplexer and quantization level processor and enables the input processor, in that order, as indicated at <highlight><bold>196</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The module activation order, when an output port is enabled, is an important aspect of the present invention. In order to effectively execute a routing event, the targeted multiplexer, quantization level processor and input processor should be activated in the order specified to minimize the possibility of the destabilizing the system. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In particular, configuration manager <highlight><bold>46</bold></highlight> directs the targeted multiplexer to collect the designated PIDs and route them to the targeted output. Second, the configuration manager <highlight><bold>46</bold></highlight> must provide the quantization level processor <highlight><bold>64</bold></highlight> with the appropriate bit rate and PMT for the content stream to be routed. Third, configuration manager <highlight><bold>46</bold></highlight> should instruct the input processor to send all of the content streams with a particular PID to the multiplexer. This is preferably accomplished by performing PID aliasing and then sending the associated data to the multiplexer as a low voltage differential signal. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> As noted above, module activation in an order other than that discussed above may lead to system instability. If, for example, the configuration manager attempted to enable the input processor first, the multiplexer may begin to receive a content stream that it does not expect and this confusion may cause the multiplexer to crash. Similarly, removing a content stream (ceasing to route the stream to the port) should be performed in a predetermined order dictated by configuration manager <highlight><bold>46</bold></highlight>. In particular, the sequence noted above should be reversed (deactivation of the input processor, deactivation of the QLP and, finally, deactivation of the multiplexer). If, for example, the multiplexer were disabled first, the multiplexer may still receive a content stream from the input processor and, once again, this condition may crash the multiplexer. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, this figure illustrates various system bandwidth utilization viewing capabilities in accordance with one preferred embodiment of the present invention. As shown therein, operator <highlight><bold>10</bold></highlight> initiates the view bandwidth utilization feature of the invention by selecting the bandwidth manager menu item from the upper portion of tree view screen <highlight><bold>81</bold></highlight>. This enables element manager <highlight><bold>22</bold></highlight> to display the bandwidth manager screen at <highlight><bold>208</bold></highlight> and the TMX begins polling the system for bandwidth utilization data and waiting for queries for this data as shown at <highlight><bold>210</bold></highlight>-<highlight><bold>212</bold></highlight>. As indicated more fully in the accompanying computer program appendix, the MIB tables enable monitoring of MPEG input/output bandwidth utilization information. In particular, the TMXinputPIDtable is used for input rate monitoring per PID. The TMXoutputPIDtable is used for output rate monitoring per PID. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> In particular, message handler <highlight><bold>45</bold></highlight> begins polling input processor and output multiplexers for data that is used to update the MIB tables (capturing data from these two sources allows the bandwidth display to show a comparison between the input bandwidth and output bandwidth) and sends the data as SNMP data to element manager <highlight><bold>22</bold></highlight>, as indicated at <highlight><bold>214</bold></highlight>. Element manager <highlight><bold>22</bold></highlight> periodically queries the TMX for this information and at <highlight><bold>216</bold></highlight> displays this data on graphical user interface <highlight><bold>80</bold></highlight>. It then returns to continue polling for new bandwidth utilization data at <highlight><bold>214</bold></highlight>. In this way, bandwidth utilization data for all enabled ports is continually updated and can be displayed by graphical user interface <highlight><bold>80</bold></highlight> in real-time. Bandwidth data polling preferably ceases when operator <highlight><bold>10</bold></highlight> closes the bandwidth windows <highlight><bold>96</bold></highlight> and <highlight><bold>96</bold></highlight>&prime; such as by switching to the chassis or tree view screens. At that point, the PID&apos;s for the enabled content streams are deleted from the MIB tables. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Upon receipt of bandwidth utilization data, graphical user interface <highlight><bold>80</bold></highlight> displays a bandwidth utilization screen <highlight><bold>96</bold></highlight>. This screen preferably includes automatically resealing x and y axes and an individual graphical object for each content stream being routed, each object preferably being a bandwidth bar (bars <highlight><bold>97</bold></highlight>, <highlight><bold>97</bold></highlight>&prime; and <highlight><bold>97</bold></highlight>&Prime; in the example shown). Each bandwidth bar shown in screen <highlight><bold>96</bold></highlight> preferably includes the following plural attributes: an output bandwidth utilization value <highlight><bold>97</bold></highlight><highlight><italic>a</italic></highlight>, an input bandwidth utilization value <highlight><bold>97</bold></highlight><highlight><italic>b</italic></highlight>, a maximum input bandwidth utilization value <highlight><bold>97</bold></highlight><highlight><italic>c </italic></highlight>and minimum input bandwidth utilization value <highlight><bold>97</bold></highlight><highlight><italic>d</italic></highlight>. In practice, changes in the bandwidth utilization are automatically displayed in bandwidth utilization screen <highlight><bold>96</bold></highlight> in real-time. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Bandwidth utilization screen <highlight><bold>96</bold></highlight> can include a number of user-friendly features to make the graphical user interface even more intuitive and useful. For example, operator <highlight><bold>10</bold></highlight> may be provided with the ability to select or deselect a legend display shown on the right hand portion of bandwidth utilization screen <highlight><bold>96</bold></highlight>. Similarly, operator <highlight><bold>10</bold></highlight> preferably has the ability to select or deselect display of the minimum and maximum bandwidth utilization values. Furthermore, screen <highlight><bold>96</bold></highlight> preferably has the ability to display the same mnemonic identifiers for the various streams that are used in other screens such as the tree view screen. Restated, the graphical user interface preferably reflects a consistent identifier for each content stream throughout the system. Naturally, other identifiers could be used if desired. These identifiers are preferably sent with the content streams so that they can be detected and displayed in various screens. As noted above, the identifiers may be displayed as colored icons and/or alphanumeric character strings, etc. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> After viewing bandwidth utilization screen <highlight><bold>96</bold></highlight>, operator <highlight><bold>10</bold></highlight> may select one of the bandwidth bars to dynamically display more detailed information about the various components that make up the content stream for the selected bar. For example, a given program might include one video and two audio components. Selecting a bandwidth bar will cause detailed bandwidth utilization window <highlight><bold>96</bold></highlight>&prime; (with additional information about these components) to appear on the screen. This type of selection causes element manager <highlight><bold>22</bold></highlight> to generate a query at <highlight><bold>216</bold></highlight> which is responded to by the TMX at <highlight><bold>210</bold></highlight>/<highlight><bold>212</bold></highlight>. As shown in window <highlight><bold>96</bold></highlight>&prime;, the program name, the group ID and the total bandwidth at the instant that the bandwidth bar was taken are captured and displayed on the screen. In this illustrative embodiment, the bandwidth bar for program 2 was selected when the bandwidth utilization was about five megabits per second (compare windows <highlight><bold>96</bold></highlight> and <highlight><bold>96</bold></highlight>&prime; of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). Additionally, the detailed window breaks the selected program down into its constituent components. In this case the program has three constituent parts: IP data 1, video data 1 and audio data 1. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The screen <highlight><bold>96</bold></highlight>&prime; shows even more detailed information for each component of the program. This information preferably includes a bandwidth minima value, a bandwidth maxima value and the instantaneous bandwidth utilization of the constituent components at the instant the detailed bandwidth utilization window was selected. With joint reference to screens <highlight><bold>96</bold></highlight> and <highlight><bold>96</bold></highlight>&prime;, it will be appreciated that the displayed bandwidth utilization of the constituent components sums to the bandwidth utilization of the entire program. Additionally, the sum of the minimum values of the constituent components equals the minimum value for the program as a whole. Similarly, the maximum value for the entire program equals the sum of the minimum values for each of the constituent components. Finally, the display shows the packet identifier PID associated with the program. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Since this aspect of the system displays bandwidth in real-time, the operator will see the bandwidth utilization varying over time. Also, differences in bandwidth utilization at different points in time will reflect the fact that input signals can vary over time on the input side of the whole system. For example, if an input signal suddenly includes an additional component, the bandwidth display screen will reflect that change in real-time. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates various event logging and viewing capabilities <highlight><bold>222</bold></highlight> in accordance with one preferred embodiment of the present invention. As shown therein, the system has the ability to filter the log messages displayed on the graphical user interface. Viewing log information in accordance with the present invention initially entails operator selection of an appropriate log filter level, thereby placing the system into one of four modes. The filter level is recorded by the element manager <highlight><bold>22</bold></highlight> and the number and type of messages displayed in the log message window <highlight><bold>87</bold></highlight> of graphical user interface <highlight><bold>80</bold></highlight> is dictated by the filter level. The desired log filter level can be selected from the &ldquo;view&rdquo; drop down menu item near the top of tree view screen <highlight><bold>81</bold></highlight> and then selecting the log messages option. There are preferably four filter levels: normal status, emergency status, fault status and debug. In debug mode all of the generated log messages are displayed. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Upon startup, the TMX chassis <highlight><bold>42</bold></highlight> the status query task begins to poll the system to thereby generate log messages that are used to populate the TMXLogPortTable, as shown at <highlight><bold>224</bold></highlight>. The SNMP agent <highlight><bold>44</bold></highlight> then waits to respond to for queries for this information as shown at <highlight><bold>226</bold></highlight>. This log messages can be generated by any one of the various firmware modules and element manager <highlight><bold>22</bold></highlight>, GUI <highlight><bold>80</bold></highlight> and TMX chassis <highlight><bold>42</bold></highlight> cooperate to continually pass log messages in accordance with the previously selected log level to the graphical user interface for display in the scrolling log message window. Additionally, these log messages are stored for possible retrieval and analysis in the future. Although the log messages presented to an operator in normal use can be filtered, all log messages generated by the system are preferably stored on the element manager&apos;s host computer. One separate log file is preferably generated for each day the system is in use and operator <highlight><bold>10</bold></highlight> has the ability to retrieve and view log messages for any given day in the log file archive screen <highlight><bold>98</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Upon selection of the Log File Menu by operator <highlight><bold>10</bold></highlight>, element manager <highlight><bold>22</bold></highlight> retrieves, displays and stores log files as indicated at <highlight><bold>228</bold></highlight>. This screen is accessed by selecting the &ldquo;view&rdquo; menu item near the top of the tree view screen <highlight><bold>81</bold></highlight> and by then selecting the appropriate option. Upon selection of one of the daily log files from the list of log files in the archive screen <highlight><bold>98</bold></highlight>, individual log messages from the selected log file are displayed for viewing on screen <highlight><bold>98</bold></highlight>&prime; as indicated at <highlight><bold>230</bold></highlight>. When reviewing stored log messages, the operator also has the ability to filter the information by selecting one of the four filter levels as discussed above. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates various future content stream routing capabilities <highlight><bold>238</bold></highlight> in accordance with one preferred embodiment of the present invention. Specification of future event(s) is initially driven by operator action on the tree view screen. In particular, upon initialization and discovery of the system, the system initially sets up one routing event that spans the current time up to a predetermined time in the future (e.g., two years). This is shown in a time bar <highlight><bold>99</bold></highlight>. Operator <highlight><bold>10</bold></highlight> can then select time bar <highlight><bold>99</bold></highlight>, as shown in the upper right hand portion of tree view screen <highlight><bold>81</bold></highlight>. The resulting pop-up menu allows operator <highlight><bold>10</bold></highlight> to either modify the displayed current event or to create a new event. In the case of specifying the future routing events, operator <highlight><bold>10</bold></highlight> would create a new event by selecting the create new event option and by specifying start and stop times for the new event. At that point, indicated at <highlight><bold>240</bold></highlight>, another duplicate event (by default) is created by element manager <highlight><bold>22</bold></highlight>. This information is then sent to the graphical user interface <highlight><bold>80</bold></highlight> for display and possible modification as shown at <highlight><bold>241</bold></highlight>. The particular editor that is presented to operator <highlight><bold>10</bold></highlight> depends on what type of event will be created. In the representative example of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, audio and video editors <highlight><bold>95</bold></highlight> and <highlight><bold>95</bold></highlight>&prime; are presented. IP data streams could also be specified for a future routing event as will readily occur to those of ordinary skill based on the teachings contained herein. Once all of the various details for the various components of the future event has been completed, this information will be gathered by the element manager at <highlight><bold>242</bold></highlight> and displayed on screen <highlight><bold>81</bold></highlight>&prime;. As shown on screen <highlight><bold>81</bold></highlight>&prime;, three events have been define in the illustrative example of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. At <highlight><bold>244</bold></highlight>, element manager <highlight><bold>22</bold></highlight> requests that new entries be added to certain MIB&apos;s and TMX chassis <highlight><bold>42</bold></highlight> executes the configuration changes at <highlight><bold>246</bold></highlight>. Also, element manager <highlight><bold>22</bold></highlight> updates the GUI at <highlight><bold>252</bold></highlight>. This results in a tree view screen <highlight><bold>81</bold></highlight>&Prime; that is substantially similar to that of screen <highlight><bold>81</bold></highlight>&prime;, but that displays the routing trees according to the newly executed configuration. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Preferably, none of this future event configuration data is provided to TMX chassis <highlight><bold>42</bold></highlight> until shortly prior to the predetermined time for commencement of the newly defined future event. Then (e.g., about 30 seconds prior to the predetermined time), the entire configuration data is sent to TMX chassis <highlight><bold>42</bold></highlight> for execution. This routing event data is slightly different from that discussed above with respect to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, in that it also includes predetermined time data indicating when the new routing configuration is to occur. In this way operator <highlight><bold>10</bold></highlight> can configure the system to automatically change configuration routing control at future predetermined points in time, even in the absence of the operator. Thus, the system permits automated control of the inventive broadband media hardware by predetermining routing configuration information for extended time periods and enabling automatic execution of such configuration changes. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates various IP data encapsulation and insertion capabilities and processes <highlight><bold>260</bold></highlight> in accordance with one preferred embodiment of the present invention. As described in greater detail below, the present invention enables operator <highlight><bold>10</bold></highlight> to define and execute IP data encapsulation either manually or semi-automatically. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> In particular, the preferred embodiment of the present invention provides operators with the ability to manually enter IP encapsulation configuration data element by element or, alternatively, to automatically enter IP encapsulation configuration data by dragging and dropping graphical objects to and from various locations of the tree view screen <highlight><bold>81</bold></highlight>. Element manager <highlight><bold>22</bold></highlight> cooperates with graphical user interface <highlight><bold>80</bold></highlight> to execute the various routing commands specified by corresponding drag and drop operations. This is achieved with automated population of MIB tables corresponding to the various fields necessary to define a routing command. Drag and drop operations on graphical user interface <highlight><bold>80</bold></highlight> assist operator <highlight><bold>10</bold></highlight> in defining IP encapsulation specifications for the system in a manner substantially analogous to the semi-automatic definition of video and audio routing events shown and described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Those of ordinary skill in the art will readily appreciate how to extend these concepts to implement drag and drop procedures in order to achieve semi-automated IP data encapsulation based on the teachings of this specification. Manual, or element by element, IP data encapsulation techniques are described immediately below with respect to <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> With primary reference to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, operator <highlight><bold>10</bold></highlight> can specify one or more IP data encapsulation events <highlight><bold>260</bold></highlight> by selecting the graphical objects representing a desired location (e.g., an enabled output port) from a tree view screen <highlight><bold>262</bold></highlight>. Operator <highlight><bold>10</bold></highlight> can then select a particular program into which encapsulated IP data will be inserted. This enables element manager <highlight><bold>22</bold></highlight> to capture configuration data relating to the targeted output port and any programs that may be resident thereon at <highlight><bold>264</bold></highlight>. In the representative example of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, program 1 has been selected for insertion of an IP data component. Responsive to operator selection of program 1, element manager <highlight><bold>22</bold></highlight> (at <highlight><bold>266</bold></highlight>) displays a program editor <highlight><bold>270</bold></highlight> and sends default output port values from the to the graphical user interface for display. Operator <highlight><bold>10</bold></highlight> can then enter various values relating to a program into which an IP data component will be inserted with the assistance of element manager <highlight><bold>22</bold></highlight> at <highlight><bold>272</bold></highlight>. General and detailed IP data component editors <highlight><bold>274</bold></highlight> will then be displayed so that a variety of other parameters can be specified by operator <highlight><bold>10</bold></highlight>. Operator <highlight><bold>10</bold></highlight> has the ability to edit the add/remove/change detailed information in the IP data components editors for each of the components that comprise the content stream. In particular, operator <highlight><bold>10</bold></highlight> has the ability to specify details such as source and destination IP addresses, bit rate, target PID, etc. for each component of the selected program in the general and detailed editor windows <highlight><bold>274</bold></highlight>. This feature enables a user to more easily allocate bandwidth among the various IP data streams being created so that maximum bandwidth utilization can be achieved. Up to 128 IP data streams may be simultaneously specified for encapsulation and insertion in this way. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Upon selection of the &ldquo;OK&rdquo; button of one of windows <highlight><bold>274</bold></highlight>, element manager <highlight><bold>22</bold></highlight> executes a number of functions at <highlight><bold>276</bold></highlight>. In particular, element manager <highlight><bold>22</bold></highlight> gathers the edited information from the GUI and requests that various new entries be placed into certain MIB tables with default and/or edited data (as shown at <highlight><bold>276</bold></highlight>). Element manager <highlight><bold>22</bold></highlight> also provides this information to TMX <highlight><bold>42</bold></highlight> for execution as shown at <highlight><bold>278</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> and in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. In particular, at <highlight><bold>278</bold></highlight>, SNMP agent <highlight><bold>44</bold></highlight> creates the new MIB entries, message handler <highlight><bold>45</bold></highlight> passes the information to configuration manager <highlight><bold>46</bold></highlight> which configures one or more multiplexers and instructs the IP encapsulation module <highlight><bold>66</bold></highlight> to begin collecting IP data. IP encapsulation module <highlight><bold>66</bold></highlight> then receives IP data from the specified source IP address, encapsulates each IP data packet as one or more MPEG packets, to thereby form MPEG data streams, and sends them to the targeted multiplexer(s). The targeted multiplexer(s) receives the assembled MPEG data packets and stream the MPEG data appropriately. At <highlight><bold>280</bold></highlight>, the element manager updates the graphical user interface <highlight><bold>80</bold></highlight> which displays the updated information on tree view screen <highlight><bold>289</bold></highlight>. Operator <highlight><bold>10</bold></highlight> can then view an IP data icon <highlight><bold>290</bold></highlight> that indicates encapsulation and insertion of IP data is occurring. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The portion of block <highlight><bold>278</bold></highlight> that performs the IP encapsulation process is illustrated in detail in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. As shown therein, upon execution of IP encapsulation process <highlight><bold>282</bold></highlight>, the encapsulation module <highlight><bold>66</bold></highlight> instructs IP data stack (of the operating system running on the host processor) to collect/receive and examine an IP data packet at <highlight><bold>292</bold></highlight>. At <highlight><bold>293</bold></highlight> the module <highlight><bold>66</bold></highlight> then verifies that the system is prepared to process IP packets (e.g., the target multiplexer(s) has/have been properly configured). The destination IP address for the received IP data packet is then tested for validity at <highlight><bold>294</bold></highlight>. In particular, the destination IP address is checked to determine whether it is the broadcast, unicast or multicast IP address. This is preferably accomplished by verifying that the destination address is within the multicast range and that the address has been specified for data collection/reception. If the IP address indicates that the IP packet is not a multicast packet, the determination is made that the IP data packet must be either a broadcast or unicast packet. If so, the data packet is passed through the operating system (OS) stack in a conventional manner and the process passes to <highlight><bold>296</bold></highlight> where it simply waits to receive the next IP data packet. In particular, the preferred OS (VxWorks) employs a standard seven-layer OSI compliant IP stack that processes each broadcast and/or unicast packet to determine its type and the application that it should process it. Thus, for example, a broadcast packet that is found to be an ARP request would be sent to the ARP task for processing. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Conversely, if the source IP address indicates that the IP data packet is a multicast IP packet, the packet cannot simply be routed through the OS stack because the OS will not recognize the data packet except in the unlikely event that it is the intended recipient of the packet. Thus, if the IP address indicates that the data packet is a multicast packet and if that address is one of the 128 addresses that element manage <highlight><bold>22</bold></highlight> has indicated as being associated with IP data that is to be encapsulated, the IP data will be converted to a different form and routed without going through the IP stack as an IP data packet. To achieve this, the process first passes to <highlight><bold>297</bold></highlight> where the IP data packet is fragmented, if necessary, into smaller content components for processing. The process then passes to <highlight><bold>298</bold></highlight> where an MPEG data packet is assembled and sent to the appropriate multiplexer(s). In particular, a 4 byte MPEG header that includes the target PID for this packet is created at <highlight><bold>300</bold></highlight>. Then, at <highlight><bold>302</bold></highlight> the destination IP address is extracted from the IP data packet and used to create a 16 byte DSM-CC (Data Storage Media Command and Control) header for the first MPEG data packet. A conventional 4 byte Cyclic Redundancy Code (CRC or CRC32) MPEG suffix is preferably also included in the last MPEG packet (e.g., following the last byte of content). Since the system can support output data in either one of DVB or ASTC data formats, the DSM-CC header also indicates which format the output data is in to thereby account for the differences between these formats. At <highlight><bold>304</bold></highlight>, up to 168 bytes of content are added to the MPEG 188 byte packet being created. If this can hold all of the content to be sent, then a CRC is appended after the last byte of content. At <highlight><bold>308</bold></highlight>, a determination is made whether any fill data is needed to complete the MPEG packet. If so, process <highlight><bold>282</bold></highlight> passes to <highlight><bold>310</bold></highlight> where the remainder of the MPEG packet is filled with dummy data. This data is preferably the numerical value of 255 (FF in hexadecimal) and is repeated until a complete 188 byte MPEG data packet has been formed. With this system of the preferred embodiment, a maximum of one IP data packet will be inserted into a single MPEG packet. If no fill is needed (or after the packet has been filled), the process passes to <highlight><bold>312</bold></highlight> where the assembled packet is sent to the targeted multiplexer and it is preferably stored in a FIFO for combination with additional MPEG packets, if any. Also, the process passes to <highlight><bold>314</bold></highlight> where is it is determined whether or not the received IP data packet has been fully encapsulated. If so, the process passes to <highlight><bold>316</bold></highlight> where the multiplexer receives an indication of how many MPEG data packets it has received together with an indication that this/these packet(s) should be transmitted. The process <highlight><bold>282</bold></highlight> then passes to <highlight><bold>296</bold></highlight> where the IP encapsulation module waits for the next IP data packet to be encapsulated. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> If it is determined at <highlight><bold>314</bold></highlight> that the IP data packet has not been fully encapsulated, process <highlight><bold>282</bold></highlight> passes to <highlight><bold>318</bold></highlight> where additional content from the IP data packets are assembled into MPEG data packets and sent to the appropriate multiplexer. In particular, process <highlight><bold>282</bold></highlight> passes from <highlight><bold>314</bold></highlight> to <highlight><bold>320</bold></highlight> where an MPEG header for the next MPEG data packet is created. Up to 184 bytes of IP data and CRC (for the last MPEG packet) are then added to the packet at <highlight><bold>322</bold></highlight> and, at <highlight><bold>326</bold></highlight>, a determination is made whether any fill data is needed to complete the MPEG packet. If so, process <highlight><bold>282</bold></highlight> passes to <highlight><bold>328</bold></highlight> where the remainder of the MPEG packet is filled with dummy data. This data is also preferably the numerical value of 255 (FF in hexadecimal) and is repeated until a complete 188 byte MPEG data packet has been formed. If no fill is needed (or after the packet has been filled), process <highlight><bold>282</bold></highlight> passes to <highlight><bold>330</bold></highlight> where the assembled packet is sent to the targeted multiplexer and it is preferably stored in a FIFO for combination with all prior and subsequent assembled MPEG packets, if any. Also, the process passes to <highlight><bold>332</bold></highlight> where is it is determined whether or not the received IP data packet has been fully encapsulated. If not, steps <highlight><bold>320</bold></highlight> through <highlight><bold>332</bold></highlight> are repeated until the entire IP data packet has been encapsulated and, eventually, the process passes to <highlight><bold>316</bold></highlight> and <highlight><bold>296</bold></highlight> as noted immediately below. If so, the multiplexer receives an indication of how many MPEG data packets it has received together with an indication that these packets should be transmitted at <highlight><bold>316</bold></highlight>. The process then passes to <highlight><bold>296</bold></highlight> where the IP encapsulation module waits for the next multicast IP data packet to be encapsulated. Process <highlight><bold>282</bold></highlight> terminates when operator <highlight><bold>10</bold></highlight> specifies a different function for the subject output port or when the time period for the specified event has expired. At that point, IP encapsulation module <highlight><bold>66</bold></highlight> awaits further instructions from configuration manager <highlight><bold>46</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> While the present invention has been described in connection with what is presently considered to be the most practical and preferred embodiments, it is to be understood that the invention is not limited to the disclosed embodiments, but is intended to encompass the various modifications and equivalent arrangements included within the spirit and scope of the appended claims. With respect to the above description, for example, it is to be realized that the optimum implementation, function and manner of operation, assembly and use, are deemed readily apparent to one skilled in the art, and all equivalent relationships to those illustrated in the drawings and described in the specification are intended to be encompassed by the appended claims. Therefore, the foregoing is considered to be an illustrative, not exhaustive, description of the principles of the present invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A graphical user interface for providing real-time visual display of bandwidth utilization for content streams routed through a broadband media router with an input port and an output port, wherein a dynamic content stream is received by the input port and routed to the output port, the content stream having plural attributes that include variable bit rate, type and name, and the graphical user interface comprising: 
<claim-text>a bandwidth utilization screen for displaying graphical objects representing bandwidth utilization for the content stream in real-time, the bandwidth utilization screen comprising: 
<claim-text>an input bandwidth utilization graphical object that changes in real-time as a function of the content stream; and </claim-text>
<claim-text>an output bandwidth utilization graphical object that changes in real-time as a function of the content stream, the input and output objects being displayed on the bandwidth utilization screen simultaneously. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the input an output graphical objects are both attributes of a single bandwidth bar. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the content stream comprises plural components, and wherein selection of the bandwidth bar displays a detailed bandwidth utilization window displaying attributes of all of the content stream components. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein output bandwidth utilization is recalculated and redisplayed in real-time in response to at least one content stream attribute being modified. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the bandwidth utilization screen further comprises a scrolling log message window for displaying system generated log messages in real-time. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein the broadband media router comprises a transcoder which uses a transcoder algorithm to compress the bandwidth of the content stream and wherein the display is sensitive enough to permit operators to perform a visual assessment of the transcoding algorithm efficiency. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the bandwidth utilization screen further comprises bandwidth minima and maxima values over a given time period. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the bandwidth bar is displayed in a two dimensional plane defined between a pair of scaled perpendicular axes, and wherein the axes are automatically rescaled in response to changes in the content stream attributes. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The graphical user interface of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the bandwidth bar is capable of displaying plural bandwidth attributes, the attributes comprising: 
<claim-text>a. output bandwidth utilization; </claim-text>
<claim-text>b. input bandwidth utilization; </claim-text>
<claim-text>c. maximum input bandwidth utilization; and </claim-text>
<claim-text>d. minimum input bandwidth utilization. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method of displaying real-time bandwidth utilization for plural content streams routed through a broadband media router, the content streams having attributes that vary over time, the method comprising: 
<claim-text>displaying a graphical object representing input bandwidth utilization; </claim-text>
<claim-text>displaying a graphical object representing output bandwidth utilization; </claim-text>
<claim-text>displaying a graphical object representing maximum input bandwidth utilization; and </claim-text>
<claim-text>displaying a graphical object representing minimum input bandwidth utilization. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein all of the graphical objects form a single bandwidth bar. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> farther comprising varying the height of the bandwidth bar as a function of at least one of the content stream attributes. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the content streams each comprise plural hierarchical components and wherein the method further comprises separately displaying at least one attribute of all of the plural components of one content stream in response to selection of the content stream. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein separately displaying at least one attribute of all of the plural components comprises displaying unique alphanumeric character strings obtained from the plural component streams.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001897A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001897A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001897A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001897A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001897A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001897A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001897A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001897A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001897A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001897A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001897A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001897A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001897A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
