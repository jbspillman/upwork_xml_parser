<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001896A1-20030102-D00000.TIF SYSTEM "US20030001896A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00001.TIF SYSTEM "US20030001896A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00002.TIF SYSTEM "US20030001896A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00003.TIF SYSTEM "US20030001896A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00004.TIF SYSTEM "US20030001896A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00005.TIF SYSTEM "US20030001896A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00006.TIF SYSTEM "US20030001896A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00007.TIF SYSTEM "US20030001896A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00008.TIF SYSTEM "US20030001896A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00009.TIF SYSTEM "US20030001896A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00010.TIF SYSTEM "US20030001896A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00011.TIF SYSTEM "US20030001896A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00012.TIF SYSTEM "US20030001896A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00013.TIF SYSTEM "US20030001896A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00014.TIF SYSTEM "US20030001896A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00015.TIF SYSTEM "US20030001896A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00016.TIF SYSTEM "US20030001896A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00017.TIF SYSTEM "US20030001896A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00018.TIF SYSTEM "US20030001896A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00019.TIF SYSTEM "US20030001896A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00020.TIF SYSTEM "US20030001896A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00021.TIF SYSTEM "US20030001896A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00022.TIF SYSTEM "US20030001896A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00023.TIF SYSTEM "US20030001896A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00024.TIF SYSTEM "US20030001896A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00025.TIF SYSTEM "US20030001896A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00026.TIF SYSTEM "US20030001896A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00027.TIF SYSTEM "US20030001896A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00028.TIF SYSTEM "US20030001896A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00029.TIF SYSTEM "US20030001896A1-20030102-D00029.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00030.TIF SYSTEM "US20030001896A1-20030102-D00030.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00031.TIF SYSTEM "US20030001896A1-20030102-D00031.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00032.TIF SYSTEM "US20030001896A1-20030102-D00032.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00033.TIF SYSTEM "US20030001896A1-20030102-D00033.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00034.TIF SYSTEM "US20030001896A1-20030102-D00034.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00035.TIF SYSTEM "US20030001896A1-20030102-D00035.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00036.TIF SYSTEM "US20030001896A1-20030102-D00036.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00037.TIF SYSTEM "US20030001896A1-20030102-D00037.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00038.TIF SYSTEM "US20030001896A1-20030102-D00038.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00039.TIF SYSTEM "US20030001896A1-20030102-D00039.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00040.TIF SYSTEM "US20030001896A1-20030102-D00040.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00041.TIF SYSTEM "US20030001896A1-20030102-D00041.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00042.TIF SYSTEM "US20030001896A1-20030102-D00042.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00043.TIF SYSTEM "US20030001896A1-20030102-D00043.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00044.TIF SYSTEM "US20030001896A1-20030102-D00044.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00045.TIF SYSTEM "US20030001896A1-20030102-D00045.TIF" NDATA TIF>
<!ENTITY US20030001896A1-20030102-D00046.TIF SYSTEM "US20030001896A1-20030102-D00046.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001896</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10128843</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020424</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>771000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Measurement system graphical user interface for easily configuring measurement applications</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>10128843</doc-number>
<kind-code>A1</kind-code>
<document-date>20020424</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>10008792</doc-number>
<document-date>20011113</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-in-part-of>
</continuations>
<non-provisional-of-provisional>
<document-id>
<doc-number>60301785</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Brian</given-name>
<family-name>Johnson</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>John</given-name>
<family-name>Breyer</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Joseph</given-name>
<middle-name>Albert</middle-name>
<family-name>Savage</family-name>
</name>
<residence>
<residence-us>
<city>Cedar Park</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>National Instruments Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Jeffrey C. Hood</name-1>
<name-2>Conley, Rose, &amp; Tayon, P.C.</name-2>
<address>
<address-1>P.O. Box 398</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78767</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">System and method for using a graphical user interface (GUI) to generate a measurement task specification (MTS) for performing a measurement task. The measurement task includes measurement and/or signal generation. A measurement task specifier presents a GUI which guides a user in specifying the measurement task. The GUI presents a plurality of GUI elements, e.g., panels, for specifying a plurality of parameters for the measurement task, including measurement type, devices, channels, timing, and/or triggering. The GUI receives user input indicating values for the parameters, and may provide default values for at least some of the parameters. The GUI stores the parameter values in a memory, analyzes the parameter values, and generates the MTS in response to the analyzing. The MTS is then useable to produce a program which implements the measurement task. The specifier may programmatically generate the program, e.g., a graphical program, which is executable to perform the task. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CONTINUATION DATA </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a Continuation-in-Part of U.S. utility application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, whose inventors are Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski, and Christopher T. Bartz, which claims benefit of priority of U.S. provisional application Serial No. 60/301,785 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Jun. 29, 2001, whose inventors are Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski, and Christopher T. Bartz.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates generally to the field of measurement and automation systems. More particularly, the present invention relates to a measurement system graphical user interface for allowing a user to easily configure measurement and automation applications. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Scientists and engineers often use measurement or automation systems to perform a variety of functions, including measurement of a physical phenomenon or unit under test (UUT), test and analysis of physical phenomena, simulation, hardware-in-the-loop testing, process monitoring and control, control of mechanical or electrical machinery, data logging, laboratory research, and analytical chemistry, to name a few examples. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> A typical measurement system includes a computer system with a measurement device or measurement hardware. The measurement device may be or include a computer-based instrument, a data acquisition device or board, a programmable logic device (PLD), a sensor, a smart sensor, an actuator, a signal generator, or other type of device for acquiring or generating data. The measurement device may be a card or board plugged into one of the I/O slots of the computer system, a card or board plugged into a chassis, or an external device. For example, in a common measurement system configuration, the measurement hardware is coupled to the computer system via other means such as through a VXI (VME eXtensions for Instrumentation) bus, a PXI (PCI eXtensions for Instrumentation) bus, a GPIB (General Purpose Interface Bus), a serial port, or a parallel port of the computer system. Optionally, the measurement system includes signal conditioning devices which receive the field signals and condition the signals to be acquired. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A measurement system may also typically include transducers, sensors, actuators or other detecting (or generating) means for providing &ldquo;field&rdquo; electrical signals representing a process, physical phenomena, equipment being monitored or measured, etc. The field signals are provided to the measurement hardware. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The measurement hardware is configured and controlled by measurement software executing on the computer system. The measurement software for configuring and controlling the measurement system typically comprises two portions: the device interface or driver-level software and the application software, or the application. The driver-level software serves to interface the measurement hardware to the application. The driver-level software may be supplied by the manufacturer of the measurement hardware or by some other third party software vendor. An example of measurement or DAQ driver-level software is NI-DAQ from National Instruments Corporation. The application or client is typically developed by the user of the measurement system and is tailored to the particular function which the user intends the measurement system to perform. The measurement hardware manufacturer or third party software vendor sometimes supplies the application software for certain applications which are common, generic or straightforward. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> One drawback of some current measurement system architectures is that complex measurement tasks involving multiple devices require that each device be programmed separately, and that synchronization signals be explicitly routed. Users must typically specify and configure measurement tasks at an advanced level, which is time consuming, expensive, and prone to error. For example, in some prior art systems, users must specify numerous parameter values for channels, timing, and triggering for a measurement task. Typically there is no mechanism for providing default values for the parameters, so that the user must not only know all of the parameters which are needed to specify the task, but must also know what values of the parameters are appropriate for the task. These issues may become more important when multiple devices are utilized to perform the task, in that the number and variety of parameters may increase accordingly. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Additionally, many current measurement systems require that the user perform a significant amount of programming, either in a text-based programming language such as LabWindows or Visual Basic, or in a graphical programming language such as LabVIEW. It would be desirable for a user to be able to more easily create measurement solutions with reduced programming requirements. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Therefore, it would be desirable to provide new systems and methods for specifying and performing measurement tasks. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> A system and method are presented for a measurement system graphical user interface which allows a user to easily configure measurement and automation applications. A measurement task specifier may generate a measurement task specification characterizing a measurement task. The measurement task specifier may display a graphical user interface (GUI) which presents information for guiding the user in specifying the measurement task. The GUI may receive user input characterizing the measurement task, where the user input indicates values for a plurality of parameters of the measurement task. For example, the parameters may include five or more of measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters. The parameter values may be stored in a memory, and analyzed to generate a measurement task specification. The measurement task specification may then be useable to produce a program which implements the measurement task. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The GUI may display a plurality of GUI elements, such as controls and/or indicators, to the user, where each of at least a subset of the plurality of GUI elements presents one or more parameters for the measurement task. As used herein, the term &ldquo;indicator&rdquo; refers to any GUI element or component which operates to present information to the user, and the term &ldquo;control&rdquo; refers to any GUI element or component which operates to receive input from the user. Examples of GUI elements, i.e., indicators and controls, include panels, menus, tabs, entry fields, buttons, radio buttons, list boxes, active icons, meters, panels, windows, dialog boxes, diagrams, and any other graphical components of a GUI. It is noted that a GUI element may include other GUI elements, such as, for example, a panel which includes one or more indicators and/or controls. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In one embodiment, displaying the graphical user interface may include displaying a plurality of panels which guide the user in specifying the measurement task. The panels presented to the user may be context sensitive, i.e., may depend upon prior user input, or upon prior information presented to the user. For example, the GUI may display a first panel which presents options for specifying values of a first parameter of the measurement task, and receive first user input to the first panel indicating a value of the first parameter. The GUI may then display a second panel which presents information based on the indicated value of the first parameter. The information may indicate a second parameter of the measurement task, and the GUI may receive second user input to the second panel indicating a value of the second parameter of the measurement task. Thus, the particular sequence of panels presented to the user may depend on the user input. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Default values may be provided for at least some of the parameters. For example, the options presented above may include a default value for the first parameter of the measurement task, and the first user input received by the first panel may override the default value with the indicated value, or may indicate acceptance of the default parameter value as the value. Similarly, a default value may be provided for the second parameter, as well, where the second user input may either override the default value of the second parameter with the indicated value of the second parameter, or indicate acceptance of the default value as the value of the second parameter. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In one embodiment, the first panel may present a list of measurement types for the measurement task, and the first user input may indicate a measurement type (from the list) for the measurement task. In response to the first user input specifying the measurement type, the GU may display a second panel which presents a list of available devices and corresponding channels appropriate for the indicated measurement type, where each of the channels corresponds to a terminal of a corresponding device. In other words, the available devices presented correspond to the indicated measurement type. Second user input may be received by the second panel which indicates one or more channels for a device from the list of available devices and corresponding channels. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The GUI may then display a third panel in response to the second user input, which presents options for specifying values of one or more parameters for the indicated channels. The third panel may receive third user input indicating values of the one or more parameters for the indicated channels. In another embodiment, two or more panel selection controls, e.g., tabs, may be displayed, each corresponding to a respective panel for specifying and/or displaying values of one or more parameters for the indicated channels, e.g., a &ldquo;settings&rdquo; panel and a &ldquo;details&rdquo; panel. User selection input may be received by one of the two or more panel selection controls, and the respective panel corresponding to the selected panel selection control may be displayed. The selected panel may present options for specifying and/or displaying values of the respective one or more parameters for the indicated channels, and in one embodiment may also receive user input indicating values of the respective one or more parameters for the indicated channels. In one embodiment, the details panel (or its equivalent) may be a &ldquo;read only&rdquo; panel which displays parameter values, but which does not allow the values to be set or modified through the panel. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In one embodiment, a device settings panel may be displayed which presents one or more device settings parameters for the measurement task, where the device settings parameters correspond to the selected device. The device settings panel may receive user input indicating values for the presented device settings parameters. A timing panel may also be displayed which presents one or more timing parameters for the measurement task, and which may receive user input indicating values for the presented timing parameters. Similarly, a triggering panel may be displayed which presents one or more triggering parameters for the measurement task, and which may receive user input indicating values for the presented triggering parameters. Thus, a plurality of panels may be displayed for presenting various parameters for the measurement task, and for receiving user input specifying values for the parameters. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In one embodiment, the GUI may also display a help panel which presents context sensitive information related to the measurement task, e.g., information related to other panels (of the plurality of panels). The information presented may be based on which of the other panels are currently displayed. For example, if a panel is displayed which presents channel parameters, the help panel may display information related to the channel parameters, or instructions for specifying values for the channel parameters. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Thus, the GUI may guide the user through a process for specifying values for a plurality of parameters for the measurement task. As mentioned above, the measurement task specifier may then generate a measurement task specification based on the specified parameters, where the measurement task specification is useable to produce a program which implements or performs the measurement task. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In one embodiment, the measurement task specifier may programmatically generate the program which implements the specified measurement task. For example, the GUI may present an option to programmatically generate a program implementing the specified measurement task, and the user may select the option, thereby requesting generation of the program. The measurement task specifier may then generate the program based on the parameter values specified for the measurement task. In another embodiment, the measurement task specifier may generate the program based on the measurement task specification. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The programmatically generated program may be a graphical program, such as a LabVIEW graphical program. A block diagram of the generated program may then be displayed by the GUI, e.g., on a program panel. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In one embodiment, programmatically generating the program may include an expert system analyzing the measurement task specification, and generating a run-time specification for the measurement task in response to the analyzing. The expert system may also validate the measurement task specification prior to generating the run-time specification. A run-time builder may then analyze the run-time specification, and generate a run-time based on the run-time specification. The generated run-time may be executable to perform the measurement task in accordance with the parameters and device(s) specified, i.e., in accordance with the measurement task specification. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> A better understanding of the present invention may be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which: </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an exemplary computer system suitable for implementing various embodiments of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates the computer system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> coupled to a server across a network, according to one embodiment; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> illustrate representative instrumentation and process control systems, including various I/O interface options; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of the computer system of <cross-reference target="DRAWINGS">FIGS. 1, 2</cross-reference>, <highlight><bold>3</bold></highlight>A and <highlight><bold>3</bold></highlight>B; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates one embodiment of a software architecture of a measurement system; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates measurement driver program components, according to one embodiment; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> flowcharts a measurement process, according to one embodiment; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> flowcharts a process for generating a measurement task specification, according to one embodiment; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a high level architecture of the system, according to one embodiment; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> is a block diagram of a system for system configuration and task specification, according to one embodiment; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> is a block diagram of a system for compiling a task specification to a task run-time specification, according to one embodiment; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10C</cross-reference> is a block diagram of a system for building a task run-time from a task run-time specification, according to one embodiment; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10D</cross-reference> is a block diagram of a system for executing tasks, according to one embodiment; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> is a block diagram of measurement task specifier functionality, according to one embodiment; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> illustrates a measurement task specification, according to one embodiment; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates one embodiment of measurement task specification operations; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates a high level measurement task configuration tool architecture, according to one embodiment; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> FIGS. <highlight><bold>14</bold></highlight>-<highlight><bold>30</bold></highlight>B illustrate a step by step example of a measurement task specification process using measurement task configuration tool interface panels, according to one embodiment; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31A</cross-reference> illustrates a VI for acquisition of N scans with an external scan clock digital trigger, according to the prior art; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31B</cross-reference> illustrates a VI for acquisition of N scans with an external scan clock digital trigger, according to one embodiment; and </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 32A and 32B</cross-reference> are example screen shots illustrating testing of the configured task, according to one embodiment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF SEVERAL EMBODIMENTS </heading>
<paragraph id="P-0047" lvl="7"><number>&lsqb;0047&rsqb;</number> Incorporation by Reference </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, and whose inventors are Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski, and Christopher T. Bartz is hereby incorporated by reference as though fully and completely set forth herein. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> U.S. Provisional Application Serial No. 60/301,785 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Jun. 29, 2001, and whose inventors are Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski, and Christopher T. Bartz is hereby incorporated by reference as though fully and completely set forth herein. </paragraph>
<paragraph id="P-0050" lvl="7"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>&mdash;Computer System </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system <highlight><bold>102</bold></highlight> operable to execute various embodiments of the present invention. The computer system <highlight><bold>102</bold></highlight> may be any type of computer system, including a personal computer system, mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), television system or other device. In general, the term &ldquo;computer system&rdquo; may be broadly defined to encompass any device having at least one processor that executes instructions from a memory medium. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the computer system <highlight><bold>102</bold></highlight> may include a display device operable to display operations associated with the methods described herein. For example, the display device may be operable to display a graphical user interface which allows a user to specify or describe a measurement task. The graphical user interface may comprise any type of graphical user interface, e.g., depending on the computing platform. As shown, the computer system <highlight><bold>102</bold></highlight> may include one or more input devices, such as a keyboard, mouse, etc. The computer system <highlight><bold>102</bold></highlight> may include one or more processors, e.g., CPUs and/or programmable hardware elements, which may be operable to execute program instructions according to various embodiments of the present invention. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The computer system <highlight><bold>102</bold></highlight> may include a memory medium(s) on which one or more computer programs or software components according to one embodiment of the present invention may be stored. For example, the memory medium may store one or more software programs which are executable to perform the methods described herein. Also, the memory medium may store a programming development environment application used to create and/or execute measurement software programs. The memory medium may also store operating system software, as well as other software for operation of the computer system. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The term &ldquo;memory medium&rdquo; is intended to include various types of memory or storage, including an installation medium, e.g., a CD-ROM, floppy disks, or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory or storage as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer which connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In addition, the memory medium may be located in a first computer, e.g., computer system <highlight><bold>102</bold></highlight>, or may be located in a second different computer which connects to the first computer over a network, such as the Internet, as described below with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In the latter instance, the second computer may provide program instructions to the first computer for execution. </paragraph>
<paragraph id="P-0056" lvl="7"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>&mdash;A Network System </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a simplified and exemplary network system that operates according to various embodiments of the present invention. In the system shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> the computer system <highlight><bold>102</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is coupled to a second computer <highlight><bold>106</bold></highlight>, such as a server computer system <highlight><bold>106</bold></highlight>, over a network <highlight><bold>204</bold></highlight>, such as the Internet, or a computer bus. Thus, <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an exemplary distributed system which may be suitable for implementing the methods described herein. The computer systems <highlight><bold>102</bold></highlight> and <highlight><bold>106</bold></highlight> may each be any of various types as desired, as described above. Also, the network <highlight><bold>204</bold></highlight> can also be any of various types, including a LAN (local area network), WAN (wide area network), the Internet, or an Intranet, among others. The transmission medium coupling the systems may include any wired or wireless media, as are well known in the art. Thus, in one embodiment, the host computer <highlight><bold>102</bold></highlight> and the server computer <highlight><bold>106</bold></highlight> may comprise a distributed system. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> As used herein, the term &ldquo;distributed system&rdquo; is intended to include a system comprising two or more interconnected or coupled devices, i.e., two or more devices that are coupled together in some fashion. The two or more devices may be coupled together via wired or wireless means. Wired means may include a network, such as a local area network (LAN) and/or a wide area network (WAN), such as the Internet, a computer bus, a serial or parallel bus, or other wired communication methods. Example local area networks include Ethernet networks, Token Ring networks, and various industrial communication networks such as fieldbus, DeviceNet, and CAN (Controller Area Network) networks. Example parallel buses include the PCI bus, PXI bus, GPIB, and VXI bus, among others. Example serial buses include USB (Universal Serial Bus), IEEE 1394, RS-242, and RS-485, among others. Wireless means may include wireless protocols such as IEEE 802.11 (wireless Ethernet), Bluetooth, and other types of wireless communication. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In one embodiment, the server <highlight><bold>106</bold></highlight> may store programs, applications, or data which may be accessed or retrieved by the host computer system <highlight><bold>102</bold></highlight>. Thus, the server <highlight><bold>103</bold></highlight> may store measurement task specification software or information, for example, in a database or library. The computer system <highlight><bold>102</bold></highlight> may access the server <highlight><bold>106</bold></highlight> to retrieve data or execute software to implement various embodiments of the system and method described herein. </paragraph>
<paragraph id="P-0060" lvl="7"><number>&lsqb;0060&rsqb;</number> FIGS. <highlight><bold>3</bold></highlight>A and <highlight><bold>3</bold></highlight>B&mdash;Instrumentation and Industrial Automation Systems </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> illustrate exemplary measurement and automation systems. As used herein, the term &ldquo;measurement system&rdquo; is intended to include the types of measurement systems and automation systems shown in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>, as well as other types of systems. The measurement system shown in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> may include software programs according to one embodiment of the present invention. These programs may of course be stored in or used by other types of systems as desired. In accordance with one embodiment of the present invention, the present system and method includes a novel software architecture and novel software programs for allowing users to more easily create measurement and automation tasks (collectively referred to as &ldquo;measurement tasks&rdquo;), verify functionality, and easily create application code to implement desired tasks. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As used herein, the term &ldquo;measurement system&rdquo; is intended to include an instrumentation system such as that shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, an industrial automation system such as that shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, or a modeling or simulation system involved with the design, validation or testing of a product involving &ldquo;real world I/O&rdquo;, i.e., the acquisition or generation of data to/from a model or simulation of a device or product being designed, validated or tested, such as hardware-in-the loop validation. The term &ldquo;measurement&rdquo; may include instrumentation measurement, data acquisitions, automation, control, and simulation. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> illustrates an exemplary instrumentation control system <highlight><bold>100</bold></highlight>. The system <highlight><bold>100</bold></highlight> may comprise a host computer <highlight><bold>102</bold></highlight> which connects to one or more devices or instruments. The host computer <highlight><bold>102</bold></highlight> may comprise a CPU, a display, memory, and one or more input devices such as a mouse or keyboard, as shown. The host computer <highlight><bold>102</bold></highlight> connects through the one or more instruments to analyze, measure, or control a unit under test (UUT) or process <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The host computer <highlight><bold>102</bold></highlight> may execute a program which interacts with or controls the one or more instruments. The one or more instruments may include a GPIB instrument <highlight><bold>112</bold></highlight> and associated GPIB interface card <highlight><bold>122</bold></highlight>, a data acquisition board <highlight><bold>114</bold></highlight> and associated signal conditioning circuitry <highlight><bold>124</bold></highlight>, a VXI instrument <highlight><bold>116</bold></highlight>, a PXI instrument <highlight><bold>118</bold></highlight>, a video device or camera <highlight><bold>132</bold></highlight> and associated image acquisition card <highlight><bold>134</bold></highlight>, a motion control device <highlight><bold>136</bold></highlight> and associated motion control interface card <highlight><bold>138</bold></highlight>, and/or one or more computer based instrument cards <highlight><bold>142</bold></highlight>, among other types of devices. Note that the computer based instrument card <highlight><bold>142</bold></highlight> may be a board or card with one or more FPGAs, one or more CPUs and memory, or various combinations of the two. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The GPIB instrument <highlight><bold>112</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via the GPIB interface card <highlight><bold>122</bold></highlight> provided by the computer <highlight><bold>102</bold></highlight>. In a similar manner, the video device <highlight><bold>132</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via the image acquisition card <highlight><bold>134</bold></highlight>, and the motion control device <highlight><bold>136</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> through the motion control interface card <highlight><bold>138</bold></highlight>. The data acquisition board <highlight><bold>114</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight>, and may interface through signal conditioning circuitry <highlight><bold>124</bold></highlight> to the UUT. The signal conditioning circuitry <highlight><bold>124</bold></highlight> may comprise an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules <highlight><bold>126</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The GPIB card <highlight><bold>122</bold></highlight>, the image acquisition card <highlight><bold>134</bold></highlight>, the motion control interface card <highlight><bold>138</bold></highlight>, and the DAQ card <highlight><bold>114</bold></highlight> are typically plugged in to an I/O slot in the computer <highlight><bold>102</bold></highlight>, such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer <highlight><bold>102</bold></highlight>. However, these cards <highlight><bold>122</bold></highlight>, <highlight><bold>134</bold></highlight>, <highlight><bold>138</bold></highlight> and <highlight><bold>114</bold></highlight> are shown external to computer <highlight><bold>102</bold></highlight> for illustrative purposes. These cards <highlight><bold>122</bold></highlight>, <highlight><bold>134</bold></highlight>, <highlight><bold>138</bold></highlight>, <highlight><bold>114</bold></highlight> may also connected to the computer <highlight><bold>102</bold></highlight> through a USB (Universal Serial Bus), IEEE 1394 or 1394.2 bus provided by the computer <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The VXI chassis or instrument <highlight><bold>116</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via a VXI bus, MXI bus, or other serial or parallel bus provided by the computer <highlight><bold>102</bold></highlight>. The computer <highlight><bold>102</bold></highlight> may include VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis <highlight><bold>116</bold></highlight>. The PXI instrument may be coupled to the computer <highlight><bold>102</bold></highlight> through the computer&apos;s PXI bus. The PXI chassis may be coupled to the computer <highlight><bold>102</bold></highlight> via a MXI-3 bus. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> A serial instrument (not shown) may also be coupled to the computer <highlight><bold>102</bold></highlight> through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> In typical instrumentation control systems an instrument of each interface type may not be present, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments. The instruments are coupled to the unit under test (UUT) or process <highlight><bold>150</bold></highlight>, or are coupled to receive field signals, typically generated by transducers. The system <highlight><bold>100</bold></highlight> may be used in a data acquisition and control application, in a test and measurement application, a process control application, a man-machine interface application, or a simulation application. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> illustrates an exemplary industrial automation system <highlight><bold>160</bold></highlight>. The industrial automation system <highlight><bold>160</bold></highlight> may be similar to the instrumentation or test and measurement system <highlight><bold>100</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>. Elements which are similar or identical to elements in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> have the same reference numerals for convenience. The system <highlight><bold>160</bold></highlight> comprises a computer <highlight><bold>102</bold></highlight> which connects to one or more devices or instruments. The computer <highlight><bold>102</bold></highlight> comprises a CPU, a display screen, memory, and one or more input devices such as a mouse or keyboard as shown. The computer <highlight><bold>102</bold></highlight> connects through the one or more devices to a process or device <highlight><bold>150</bold></highlight> to perform an automation function, such as MMI (Man Machine Interface), SCADA (Supervisory Control and Data Acquisition), portable or distributed data acquisition, process control, advanced analysis, or other control. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, the computer <highlight><bold>102</bold></highlight> may execute a program that is involved with the automation function performed by the automation system <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The one or more devices may include a data acquisition board <highlight><bold>114</bold></highlight> and associated signal conditioning circuitry <highlight><bold>124</bold></highlight>, a PXI instrument <highlight><bold>118</bold></highlight>, a video device <highlight><bold>132</bold></highlight> and associated image acquisition card <highlight><bold>134</bold></highlight>, a motion control device <highlight><bold>136</bold></highlight> and associated motion control interface card <highlight><bold>138</bold></highlight>, a FieldBus device <highlight><bold>170</bold></highlight> and associated FieldBus interface card <highlight><bold>172</bold></highlight>, a PLC (Programmable Logic Controller) <highlight><bold>176</bold></highlight>, a serial instrument <highlight><bold>182</bold></highlight> and associated serial interface card <highlight><bold>184</bold></highlight>, or a distributed data acquisition system, such as the FieldPoint system available from National Instruments, among other types of devices. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The DAQ card <highlight><bold>114</bold></highlight>, the PXI chassis <highlight><bold>118</bold></highlight>, the video device <highlight><bold>132</bold></highlight> and image acquisition card <highlight><bold>134</bold></highlight>, and the motion control device <highlight><bold>136</bold></highlight> and motion control interface card <highlight><bold>138</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> as described above. The serial instrument <highlight><bold>182</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> through a serial interface card <highlight><bold>184</bold></highlight>, or through a serial port, such as an RS-232 port, provided by the computer <highlight><bold>102</bold></highlight>. The PLC <highlight><bold>176</bold></highlight> may couple to the computer <highlight><bold>102</bold></highlight> through a serial port, Ethernet port, or a proprietary interface. The FieldBus interface card <highlight><bold>172</bold></highlight> may be comprised in the computer <highlight><bold>102</bold></highlight> and interfaces through a FieldBus network to one or more FieldBus devices. Each of the DAQ card <highlight><bold>114</bold></highlight>, the serial card <highlight><bold>184</bold></highlight>, the FieldBus card <highlight><bold>172</bold></highlight>, the image acquisition card <highlight><bold>134</bold></highlight>, and the motion control card <highlight><bold>138</bold></highlight> are typically plugged in to an I/O slot in the computer <highlight><bold>102</bold></highlight> as described above. However, these cards <highlight><bold>114</bold></highlight>, <highlight><bold>184</bold></highlight>, <highlight><bold>172</bold></highlight>, <highlight><bold>134</bold></highlight>, and <highlight><bold>138</bold></highlight> are shown external to computer <highlight><bold>102</bold></highlight> for illustrative purposes. In typical industrial automation systems a device will not be present of each interface type, and in fact many systems may only have one or more devices of a single interface type, such as only PLCs. The devices are coupled to the device or process <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>, the computer system <highlight><bold>102</bold></highlight> and/or one or more of the instruments or devices may include a memory medium (or memory mediums) on which software according to the present invention may be stored. The memory medium may store a measurement task specifier, and optionally, an expert system, a plurality of experts, a run-time builder, and/or a plurality of measurement primitives. Additionally, the memory medium(s) may store various products produced by or with these software components, such as a measurement task specification, a run-time specification, and/or a run-time, all of which are described in more detail below. The memory medium(s) may also store configuration information for one or more of the above software programs. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In one embodiment, the software programs and software architecture as described herein may be designed for measurement systems, including data acquisition/generation, analysis, and/or display; automation systems; simulation systems; systems for controlling, modeling, or simulating instrumentation or industrial automation hardware; and systems for controlling, modeling or simulating systems or devices being designed, prototyped, validated or tested. However, it is noted that the present invention can be used for a plethora of applications and is not limited to instrumentation or industrial automation applications. In other words, <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> are exemplary only, and the software programs and software architecture may be used for any of various purposes and may be stored in and execute on any of various types of systems to perform any of various applications. </paragraph>
<paragraph id="P-0075" lvl="7"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>&mdash;Computer System Block Diagram </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an exemplary block diagram of the computer system illustrated in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>. It is noted that any type of computer system configuration or architecture can be used in conjunction with the system and method described herein, as desired, and <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a representative PC embodiment. It is also noted that the computer system may be a general purpose computer system such as illustrated in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>, a computer implemented on a VXI card installed in a VXI chassis, a computer implemented on a PXI card installed in a PXI chassis, or other types of embodiments. The elements of a computer not necessary to understand the present invention have been omitted for simplicity. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The computer <highlight><bold>102</bold></highlight> includes at least one central processing unit or CPU <highlight><bold>160</bold></highlight> which is coupled to a processor or host bus <highlight><bold>162</bold></highlight>. The CPU <highlight><bold>160</bold></highlight> may be any of various types, including a x86 processor, e.g., a Pentium class; a PowerPC processor; a CPU from the SPARC family of RISC processors; as well as others. Main memory <highlight><bold>166</bold></highlight> is coupled to the host bus <highlight><bold>162</bold></highlight> by means of memory controller <highlight><bold>164</bold></highlight>. The main memory <highlight><bold>166</bold></highlight> may store one or more computer programs or libraries according to one embodiment of the present invention. The main memory <highlight><bold>166</bold></highlight> also stores operating system software as well as the software for operation of the computer system, as well known to those skilled in the art. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The host bus <highlight><bold>162</bold></highlight> is coupled to an expansion or input/output bus <highlight><bold>170</bold></highlight> by means of a bus controller <highlight><bold>168</bold></highlight> or bus bridge logic. The expansion bus <highlight><bold>170</bold></highlight> is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus <highlight><bold>170</bold></highlight> includes slots for various devices such as the data acquisition board <highlight><bold>114</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>), a GPIB interface card <highlight><bold>122</bold></highlight> which provides a GPIB bus interface to the GPIB instrument <highlight><bold>112</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 3A</cross-reference>), and a reconfigurable instrument <highlight><bold>120</bold></highlight>. Note that as used herein, the term &ldquo;reconfigurable instrument&rdquo; refers to an instrument with one or more of: </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> 1) a processor and memory which is capable of being configured by a user or software program; and/or </paragraph>
<paragraph id="P-0080" lvl="2"><number>&lsqb;0080&rsqb;</number> 2) reconfigurable logic, such as an FPGA (Field Programmable Gate Array). </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> For more information on a reconfigurable instrument which includes an embedded processor and embedded memory, please see U.S. Pat. No. 6,173,438 which is hereby incorporated by reference in its entirety as though fully and completely set forth herein. For more information on a reconfigurable instrument which includes reconfigurable hardware, e.g., an FPGA, please see U.S. Pat. No. 6,219,628 which is hereby incorporated by reference in its entirety as though filly and completely set forth herein. The computer <highlight><bold>102</bold></highlight> may further comprise a video display subsystem <highlight><bold>180</bold></highlight> and hard drive <highlight><bold>182</bold></highlight> coupled to the expansion bus <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="7"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference>&mdash;Creating a Measurement Solution </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates one embodiment of a software architecture for a system such as a measurement system. As shown, the system may include one or more application programs <highlight><bold>202</bold></highlight>. The application programs are typically developed by a user to accomplish a certain task or achieve a certain result. Thus, the application program is typically a user created or developed program to solve a desired problem or accomplish a desired result for the user. It is noted that in addition to user-developed applications, programmatically generated application programs are also contemplated. The application program <highlight><bold>202</bold></highlight> may be developed in any of various development environments. For example, the application program may be an application developed in the LabVIEW graphical programming environment of National Instruments Corporation. The application program <highlight><bold>202</bold></highlight> may also be developed in other applications, such as National Instruments Measurement Studio, Visual Basic, Visual C&plus;&plus;, Delphi, or other programming development environments. Thus, the application program may be developed in graphical programming environments such as LabVIEW, or a text-based programming environment such as Measurement Studio or Visual Basic. The application program <highlight><bold>202</bold></highlight> may thus comprise the customer&apos;s entire measurement system, and may include many more features and functions in addition to managing the particular measurement task specification and run-time generation, such as data analysis, report generation, or other higher-level functions of the measurement system. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> As shown, the application <highlight><bold>202</bold></highlight> communicates with a measurement driver <highlight><bold>212</bold></highlight>. The measurement driver <highlight><bold>212</bold></highlight> may include a measurement driver application programming interface (API) <highlight><bold>214</bold></highlight>. As shown, the application program <highlight><bold>202</bold></highlight>A or <highlight><bold>202</bold></highlight>B interfaces with the measurement driver API <highlight><bold>214</bold></highlight> in order to access capabilities of the measurement driver <highlight><bold>212</bold></highlight>. In this measurement example, the software architecture may also include interchangeable virtual instrument (IVI) drivers <highlight><bold>222</bold></highlight> wherein the application program <highlight><bold>202</bold></highlight>B may interface through IVI drivers <highlight><bold>222</bold></highlight>, which interface with the measurement driver API <highlight><bold>214</bold></highlight>, to interface with the measurement driver <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The measurement driver <highlight><bold>212</bold></highlight> interfaces to the one or more various measurement devices <highlight><bold>230</bold></highlight> comprised in this system. The measurement devices <highlight><bold>230</bold></highlight> may comprise any of the various devices discussed above with respect to <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> or <highlight><bold>3</bold></highlight>B and may comprise other devices not shown in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> as desired. In one embodiment, at least one of the one or more measurement devices comprises a hardware measurement device. In another embodiment, at least one of the one or more measurement devices comprises a virtual measurement device. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In one embodiment, the present invention provides an improved system and method for creating application programs, such as application programs <highlight><bold>202</bold></highlight>A and <highlight><bold>202</bold></highlight>B. The measurement driver <highlight><bold>212</bold></highlight> preferably includes various software that may allow creation of an application program <highlight><bold>202</bold></highlight>A or <highlight><bold>202</bold></highlight>B using a high-level interface and requiring reduced user effort and coding. </paragraph>
<paragraph id="P-0087" lvl="7"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference>&mdash;Measurement Driver Program Components </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates various software components or programs <highlight><bold>400</bold></highlight> comprised in the measurement driver program <highlight><bold>212</bold></highlight>. As shown, the measurement driver program <highlight><bold>212</bold></highlight> may include a measurement task specifier <highlight><bold>730</bold></highlight>, and optionally, an expert system <highlight><bold>750</bold></highlight> with one or more experts <highlight><bold>406</bold></highlight>, a run-time builder <highlight><bold>780</bold></highlight>, and/or various measurement primitives <highlight><bold>408</bold></highlight>. The measurement driver <highlight><bold>212</bold></highlight> may include other software components as well. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 6</cross-reference> also illustrates, various of the measurement driver components may be operable to generate respective products <highlight><bold>450</bold></highlight> which may be useable by other measurement driver components, by other software programs or systems, or by a user. More specifically, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, in one embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may be operable to generate a measurement task specification <highlight><bold>740</bold></highlight>, also referred to as a task specification. It is noted that the specified measurement task may include both measurement (i.e., inputs) and generation (i.e., outputs) type tasks. For example, in a testing application, the measurement task may include generating one or more signals for excitation or stimulation of an UUT, as well as measuring the response of the UUT to the generated signal(s). The generated signal(s) may also include signals for triggering, synchronization, communication, control, or other functions, as desired. Examples of generated signals include sine wave, square wave, gaussian pulse, and sawtooth waveforms, among others. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> In one embodiment, the measurement task specification <highlight><bold>740</bold></highlight> may comprise software objects or data structures, such as C&plus;&plus; objects, which may specify the measurement task. In one embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may be a measurement task wizard, i.e., a software program which leads the user through a measurement task specification process to create the measurement task specification <highlight><bold>740</bold></highlight>. In another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may take the form of a measurement task configuration tool, which is a software program invocable by the user under a development environment, such as the National Instruments LabVIEW environment or Measurement Studio programming development environment. In yet another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may simply be an API through which the user makes calls to generate the task specification. Thus, in various embodiments, the measurement task specifier <highlight><bold>730</bold></highlight> may generate the measurement task specification <highlight><bold>740</bold></highlight> in response to user input. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> As shown, an expert system <highlight><bold>750</bold></highlight> may use the measurement task specification <highlight><bold>740</bold></highlight> to generate a run-time specification <highlight><bold>770</bold></highlight>. The expert system <highlight><bold>750</bold></highlight> may include a plurality of experts. The expert system <highlight><bold>750</bold></highlight> may include one or more experts for each of the measurement device types shown in <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference>, in addition to various other experts, including routing experts, streaming experts, and synchronization experts, among others. In one embodiment, the expert system <highlight><bold>750</bold></highlight> may also be utilized by the measurement task specifier <highlight><bold>730</bold></highlight> in generating the measurement task specification <highlight><bold>740</bold></highlight>. For example, the measurement task specifier <highlight><bold>730</bold></highlight> may invoke the expert system <highlight><bold>750</bold></highlight> to validate the measurement task specification <highlight><bold>740</bold></highlight>. In other words, the expert system <highlight><bold>750</bold></highlight> may analyze the measurement task specification <highlight><bold>740</bold></highlight> to verify that the specified task is implementable with available software and/or hardware, and/or that the measurement task specification <highlight><bold>740</bold></highlight> is internally and/or externally consistent. For example, the expert system <highlight><bold>750</bold></highlight> may detect that two components or sub-tasks specified in the measurement task specification <highlight><bold>740</bold></highlight> are mutually incompatible, and report an error accordingly. In one embodiment, the run-time specification <highlight><bold>770</bold></highlight> may similarly comprise software objects or data structures, such as C&plus;&plus; objects, which may specify the run-time parameters for software and/or hardware used to implement the specified measurement task. The run-time specification <highlight><bold>770</bold></highlight> may comprise parameter specifications for one or more measurement primitives <highlight><bold>408</bold></highlight> which correspond to rudimentary measurement tasks or operations. Said another way, the run-time specification <highlight><bold>770</bold></highlight> may comprise a collection of primitive settings, each of which may comprise a detailed and unambiguous &ldquo;recipe&rdquo; for a primitive. For example, primitive settings for a digitizer, such as a National Instruments E-Series digitizer, may include: Dither (Yes, No), Polarity (Bi-polar, Uni-polar), Gain, Mode (Calibration, Differential, Non-Referenced Single-Ended, Referenced Single-Ended, Auxillary, Ghost), Generate Trigger (Yes, No), and Last Channel (Yes, No). </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The run-time specification <highlight><bold>770</bold></highlight> may in turn be interpreted by the run-time builder <highlight><bold>780</bold></highlight> to generate a run-time <highlight><bold>790</bold></highlight>, which may be executable to perform the specified measurement task. More details of the operation of the measurement driver program are presented below with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0093" lvl="7"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference>&mdash;Method for Performing a Measurement Task </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart diagram illustrating one embodiment of the operation of the measurement system, the method being used to configure installed measurement hardware devices and to specify and create a measurement task or application program to operate the measurement system. In one embodiment, the measurement task may comprise a plurality of measurement sub-tasks. In another embodiment, the measurement task may comprise a complex measurement operation using a plurality of measurement devices. It is noted that the flowchart of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is exemplary only. Further, various steps in the flowchart of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various steps may be added as desired. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> As shown, in step <highlight><bold>502</bold></highlight> a user may optionally install measurement hardware within the system. This may comprise connecting a measurement device to the computer system or installing a measurement card or board within a slot of the computer system. This may further comprise installing a measurement card or board in a slot of a chassis, such as a PXI chassis, which itself is coupled to the computer system and/or which may contain a computer system comprised on a card within the chassis. In one embodiment, the measurement hardware may comprise a &ldquo;reconfigurable measurement device&rdquo; which may be operable to be reconfigured &ldquo;on the fly&rdquo; during a measurement task or operation. For example, the reconfigurable measurement device may include a processor and memory or an FPGA that may be reconfigured with different measurement programs or tasks. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In step <highlight><bold>504</bold></highlight> the computer system and/or the user may optionally configure the measurement hardware device(s). This may involve operation of standard Plug &amp; Play software to recognize the measurement device and select setting or parameters for the device. It should be noted that in many instances, the user may not be required to perform <highlight><bold>502</bold></highlight> and/or <highlight><bold>504</bold></highlight> before generating the measurement task. In other words, the measurement hardware may already be installed and configured and the user may proceed with the configuration and specification of the measurement task in step <highlight><bold>506</bold></highlight>. In another embodiment, &ldquo;stub&rdquo; interfaces may be provided, e.g., in software, which emulate the presence of measurement devices, allowing the user to design or specify the measurement task without actually installing the necessary hardware and/or software. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In step <highlight><bold>506</bold></highlight> the user may invoke the measurement task specifier <highlight><bold>730</bold></highlight> to configure a desired task in the measurement driver <highlight><bold>212</bold></highlight>, thereby producing a measurement task specification <highlight><bold>740</bold></highlight>. In the preferred embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> includes an interactive Graphical User Interface (GUI) configuration tool which enables the user to easily and simply configure a desired measurement task. This may involve selecting various parameters of the task such as the type of measurement being performed, e.g., voltage, current, etc., and other measurement settings. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In one embodiment, once the task has been specified, the user may add specification objects, modules, or code, specifying start, read/write, and/or cleanup operations to the task specification. In one embodiment, once the task has been specified, the user may request the task specifier <highlight><bold>730</bold></highlight> to generate code. The task specifier may then programmatically generate code specifying start, read/write, and/or cleanup operations, among others. In various embodiments, this generated code may comprise one or more icons in a LabVIEW graphical program (i.e., VIs), as described in more detail below, and/or function calls in a text-based program including one or more of C code, C&plus;&plus; code, C&num; code, Java code, Visual Basic code, or any other form of computer program code, which may specify support operations needed to implement the specified measurement task. In one embodiment, the generated code may comprise icons representing some or all of the specified measurement task operations, including clocking and trigger operations, among others. In one embodiment, the task specifier <highlight><bold>730</bold></highlight> may generate the icons and connect them together appropriately. In another embodiment, the task specifier <highlight><bold>730</bold></highlight> may generate the icons, but the user may be required to link the icons appropriately. Thus, in one embodiment, the method may include generating a measurement task diagram in response to user input specifying the measurement task. In one embodiment, the measurement task diagram may comprise a graphical program, such as a LabVIEW graphical program. Further details of programmatic generation of a graphical program are presented below with reference to FIGS. <highlight><bold>27</bold></highlight>-<highlight><bold>28</bold></highlight>G. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> It should be noted that a node for use in a graphical program typically includes a graphical icon which may be displayed in the graphical program to visually represent the node in the graphical program. A node for use in a graphical program may also include underlying program instructions and/or data structures which perform the functionality of the node. When the present application states that a node performs a function, it is understood that the program instructions and/or data structures of the node actually perform this function. Thus, the graphical icon that visually represents the node represents the function, and the underlying program instructions and/or data structures which are represented by the node graphical icon are actually performing the function. Thus the specification and claims of the present application refer generally to a node performing a function, it being understood that the node includes or represents underlying program instructions and/or data structures which are executed by a processor (or programmable hardware element) to perform the function. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In another embodiment, the user may specify the task manually. For example, the user may use a graphical programming development environment such as LabVIEW to place one or more icons or nodes on the display and connect them in a desired way to accomplish the desired result. In one embodiment, the user may select a small number of function icons or nodes, such as a measurement read node or measurement write node, to accomplish the configured measurement task. As another example, the user may use the Measurement Studio programming development environment from National Instruments Corporation (e.g., LabWindows/CVI) to create a text-based program to accomplish the measurement task. This text-based program would typically comprise very few lines of code. Thus, complex measurement procedures may be encapsulated and represented by simple icons or function calls, allowing the user to rapidly and easily create measurement &ldquo;programs&rdquo; to implement or carry out complex measurement operations. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> In one embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may comprise a measurement task wizard. In other words, the measurement task specifier <highlight><bold>730</bold></highlight> may be a software program which leads the user through a measurement task specification process, thereby generating the measurement task specification <highlight><bold>740</bold></highlight>. In another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may comprise a measurement task configuration tool. The measurement task configuration tool may be a software program invocable by the user within a development environment, such as National Instruments&apos; LabVIEW environment, Measurement Studio programming development environment, or any other development environment. For example, the user may specify or configure a measurement task by placing or &ldquo;dropping&rdquo; nodes or icons on a graphical diagram and connecting the nodes via virtual &ldquo;wires&rdquo; to generate a graphical diagram or model of the measurement task. The graphical development environment program (e.g., LabVIEW) may generate software objects or data structures corresponding to the components of the graphical diagram which specify the measurement task. These data structures may comprise the measurement task specification <highlight><bold>740</bold></highlight>. In one embodiment, at this stage the measurement task specification <highlight><bold>740</bold></highlight> is not executable per se, but provides information which may be used by other components of the system to generate a measurement application suitable to carry out the measurement task, i.e., to implement the specified measurement operation. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> In another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may be an API through which the user makes calls to generate the task specification. For example, the user may make API function calls in a C&plus;&plus; application program to specify the various attributes or aspects of the desired measurement task, such as measurement type (voltage, current, pressure, etc.), timing or sampling parameters, or other measurement task specification information. The executed functions may produce corresponding data structures which contain specification information for the measurement task. When the application program <highlight><bold>202</bold></highlight> is executed, the API function calls may generate the measurement task specification <highlight><bold>740</bold></highlight>, which may then be used later in the execution process to produce the run-time specification, as described below. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In step <highlight><bold>508</bold></highlight> an expert system comprised in the measurement driver may operate to receive the measurement task specification <highlight><bold>740</bold></highlight>, then analyze the measurement task specification <highlight><bold>740</bold></highlight>, validate the measurement task specification <highlight><bold>740</bold></highlight>, and create a run-time specification <highlight><bold>770</bold></highlight> based on the measurement task specification <highlight><bold>740</bold></highlight>. The run-time specification <highlight><bold>770</bold></highlight> preferably comprises parameter settings for one or more measurement devices and other hardware comprised within the system, and may also specify software components or software programs which are to be used during execution of the task. In one embodiment, the run-time specification <highlight><bold>770</bold></highlight> may comprise a specification of the parameters of one or more measurement primitives, where each measurement primitive comprises a software object and corresponding configuration settings, and where each measurement primitive is operable to implement at least a portion of the measurement task. Thus, the run-time specification <highlight><bold>770</bold></highlight> may be useable to configure one or more measurement devices to perform the measurement task, and may be further useable to generate a run-time <highlight><bold>790</bold></highlight> which is executable to perform the measurement task using the configured one or more measurement devices. The measurement driver <highlight><bold>212</bold></highlight> may include expert system <highlight><bold>750</bold></highlight> comprising the plurality of experts <highlight><bold>406</bold></highlight> where one or more experts <highlight><bold>406</bold></highlight> are available for each of the various types of measurement tasks or sub-tasks. Thus, depending upon the type of measurement task configured by the user in step <highlight><bold>506</bold></highlight>, one or more corresponding experts <highlight><bold>406</bold></highlight> may be invoked to create the run-time specification. In one embodiment, multiple experts may each produce a candidate run-time specification. Thus, the measurement task specification <highlight><bold>740</bold></highlight> may be used in step <highlight><bold>508</bold></highlight> to ensure that the measurement task can operate as configured by the user. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In one embodiment, one or more of the generated measurement task specification <highlight><bold>740</bold></highlight>, the generated run-time specification <highlight><bold>770</bold></highlight>, and configuration information for the one or more measurement devices may be stored, such as in a memory medium, e.g., a computer system&apos;s RAM or persistent storage medium. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In one embodiment, the run-time builder <highlight><bold>780</bold></highlight> may analyze the selected run-time specification <highlight><bold>770</bold></highlight>, and then reserve one or more resources, such as hardware and/or software, according to the selected run-time specification <highlight><bold>770</bold></highlight>. The run-time builder <highlight><bold>780</bold></highlight> may also un-reserve resources if the analysis of the selected run-time specification indicates that previously reserved resources are no longer needed to implement the measurement task. In another embodiment, the run-time builder <highlight><bold>780</bold></highlight> may handle abnormal process termination and/or unexpected device removal. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In step <highlight><bold>510</bold></highlight> a run-time <highlight><bold>790</bold></highlight> may be created which embodies or implements the measurement task configured in step <highlight><bold>506</bold></highlight> based on the generated (and/or selected) run-time specification <highlight><bold>770</bold></highlight>. In one embodiment, the run-time <highlight><bold>790</bold></highlight> may comprise a collection of measurement operation primitives (or instances of measurement operation primitives) sequenced together which are executable to implement the measurement task. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> When the user (or software program) enters input to execute or run the program, the measurement driver <highlight><bold>212</bold></highlight> may invoke the run-time builder program. The run-time builder program operates to access the run-time specification and use the parameters and data contained in the run-time specification to assist in creating the run-time at run time. In one embodiment, the run-time builder uses the run-time specification to instantiate instances of various objects or primitives comprised in the measurement driver <highlight><bold>212</bold></highlight>. After the run-time builder instantiates various instances of objects, the run-time builder may apply various parameters from the run-time specification to these object instances. The run-time builder may also provide various parameters to hardware and/or software resources or devices comprised in the system to configure the hardware and/or software devices in the system according to the run-time specification to allow these devices to be used during execution of the run-time <highlight><bold>790</bold></highlight>. In other words, the run-time builder <highlight><bold>780</bold></highlight> may configure one or more measurement devices according to the run-time specification <highlight><bold>770</bold></highlight>. After the run-time builder <highlight><bold>780</bold></highlight> has completed creating the run-time <highlight><bold>790</bold></highlight>, the run-time may be executable to perform the task specified by the user. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> After step <highlight><bold>510</bold></highlight> the user (or a software program) may execute the run-time <highlight><bold>790</bold></highlight> to perform the measurement task. In other words, the run-time execution may invoke the various configured hardware and/or software components to perform the specified measurement task. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> It should be noted that the above method, described in terms of a measurement task, may also be applied to other types of tasks, as well, including, but not limited to, machine vision, scientific, engineering, financial, business, e-commerce, and medical tasks, among others. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Further details of the program generation are described below with reference to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, and FIGS. <highlight><bold>27</bold></highlight>-<highlight><bold>28</bold></highlight>G. </paragraph>
<paragraph id="P-0111" lvl="7"><number>&lsqb;0111&rsqb;</number> Examples of Measurement Problems </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Below are listed several example problems suitable for solution by various embodiments of the present invention. It should be noted that these solutions are for example purposes only, and are not intended to limit the domains of application of the present invention. </paragraph>
<paragraph id="P-0113" lvl="2"><number>&lsqb;0113&rsqb;</number> 1. Point of Sale Configuration: Given all the hardware and software in the National Instruments catalog and a single computer, determine a set of hardware, hardware connections, hardware settings, and software configuration that can maintain a level in a tank (whose simulated linear model is specified to be M) by monitoring the present value of the tank level and controlling a valve connected to the tank. The solution should display the tank level and valve position on an HMI. Constraints include cost&lt;$10000 and standard deviation of the tank level&lt;D. Preference is for the lowest cost solution. </paragraph>
<paragraph id="P-0114" lvl="2"><number>&lsqb;0114&rsqb;</number> 2. Out of the Box Configuration: Given 2 thermocouples, a National Instruments SCXI 1102 module, a National Instruments SCXI-1000 chassis, a National Instruments PCI-MIO-XE-50, and a set of appropriate terminal blocks cabling, determine the hardware connections (in the form of a wiring diagram), hardware settings, and software configuration for monitoring the two temperature values at a rate of 10 Hz each, with an accuracy&equals;A and precision&equals;P for each temperature measurement. </paragraph>
<paragraph id="P-0115" lvl="2"><number>&lsqb;0115&rsqb;</number> 3. Run-time Configuration: Given a high-frequency switch connected to three 2-channel scopes, determine the hardware settings and software configuration for measuring the waveform, overshoot, and rise time of a set of five simultaneous 10 MHz digital clock signals connected to the switch. The accuracy and precision of the measurements must meet certain requirements, and all 5 measurements should be synchronized to a start event which is triggered by a high level of the first digital clock. (The solution should take into account the signal delays from various routings through the switch). </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In various embodiments, the present invention may include some or all of the following features: </paragraph>
<paragraph id="P-0117" lvl="2"><number>&lsqb;0117&rsqb;</number> 1. Interactive design&mdash;the user may not have to specify a complete specification up front. Instead, the system may ask the user for more information as needed. For instance, while the system is building a solution, it may encounter one or more possibilities and may ask the user to specify new preferences at that point. </paragraph>
<paragraph id="P-0118" lvl="2"><number>&lsqb;0118&rsqb;</number> 2. Graphical and visual display of system specifications and realizations (including text-based displays where appropriate)&mdash;The system may display realizations so that they can be edited directly. </paragraph>
<paragraph id="P-0119" lvl="2"><number>&lsqb;0119&rsqb;</number> 3. Extensibility&mdash;ability to add new measurement methods/drivers to the system and use those methods in a derived realization as the system evolves over time to include more domains. The user is able to participate in this process by adding custom measurement methods. The system may be extended with new measurement methods/drivers in multiple independent efforts (i.e. with independent releases). Groups of extensions may be packaged with different products and installed separately. </paragraph>
<paragraph id="P-0120" lvl="2"><number>&lsqb;0120&rsqb;</number> 4. Visibility&mdash;ability for the user to see solutions generated by the system and extend and modify those solutions. </paragraph>
<paragraph id="P-0121" lvl="2"><number>&lsqb;0121&rsqb;</number> 5. Robustness&mdash;ability to detect and help correct invalid specifications and invalid realizations. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The features mentioned above may allow the user to specify and execute a measurement task in substantially less time and with substantially less effort than previous methods. In addition, the system described may prevent the user from implementing a measurement solution which is inappropriate for the available resources. Further details of the system design, architecture, and operation are described below with reference to FIGS. <highlight><bold>9</bold></highlight>-<highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>&mdash;Method for Specifying a Measurement Task </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> flowcharts one embodiment of a method for specifying a measurement task. In particular, <cross-reference target="DRAWINGS">FIG. 8</cross-reference> flowcharts a detailed embodiment of step <highlight><bold>506</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, described above. As noted above, in other embodiments, various steps in the method may occur concurrently or in a different order than shown, or may be omitted, as desired. Also, various additional steps may be performed as desired. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows, in <highlight><bold>802</bold></highlight>, a graphical user interface (GUI) may be displayed which presents information for guiding the user in specifying a measurement task. The measurement task may involve a simple measurement using a single instrument or device, or may comprise a complex measurement operation using a plurality of measurement devices. In one embodiment, at least one of the plurality of measurement devices may comprise a measurement hardware device. In another embodiment, at least one of the plurality of measurement devices may comprise a virtual measurement device. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> In one embodiment, displaying the graphical user interface may include displaying a plurality of GUI elements, such as controls or indicators, to the user, where each of at least a subset of the plurality of GUI elements presents one or more parameters for the measurement task. As used herein, the term &ldquo;indicator&rdquo; refers to any GUI element or component which operates to present information to the user, and the term &ldquo;control&rdquo; refers to any GUI element or component which operates to receive input from the user. Examples of GUI elements, i.e., indicators and controls, include panels, menus, tabs, entry fields, buttons, radio buttons, list boxes, active icons, meters, panels, windows, dialog boxes, diagrams, and any other graphical components of a GUI. It is noted that a GUI element may include other GUI elements, such as, for example, a panel which includes one or more indicators and/or controls. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> In another embodiment, displaying the graphical user interface may include displaying a plurality of panels which guide the user in specifying the measurement task. Note that as used herein, the term &ldquo;panel&rdquo; refers to a graphical region of the GUI which includes one or more controls for receiving user input and/or indicators for presenting information to the user. Thus, a panel may be any of a dialog box, an alert box, a list box, a window, a screen, a pop-up menu, or any other functional graphical area of the GUI. Thus, the GUI may comprise one or more panels. In the descriptions that follow, the GUI is described in terms of panels, although it is noted that other GUI elements are also contemplated for implementing various embodiments of the measurement task specifier. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In a preferred embodiment, the particular sequence of panels or GUI elements presented to the user may depend upon the user input. In other words, the presentation of panels or GUI elements may be context sensitive. Additionally, the information presented by a given GUI element, e.g., a panel, may itself be context sensitive. Examples of such context sensitivity are described below. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> In <highlight><bold>804</bold></highlight>, the graphical user interface may receive user input characterizing the measurement task. The user input may indicate parameter values for a plurality of parameters of the measurement task, such as, for example, measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters, among others. In one embodiment, the user input may indicate values for five or more of these parameters to characterize the measurement task. Various embodiments of the method are described below. Additionally, a step-by-step example of one embodiment of the method steps <highlight><bold>802</bold></highlight> and <highlight><bold>804</bold></highlight> is presented below with reference to FIGS. <highlight><bold>14</bold></highlight>-<highlight><bold>29</bold></highlight>. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> In <highlight><bold>806</bold></highlight>, the parameter values may be stored in a memory. As mentioned above, the memory may be comprised on the host computer <highlight><bold>102</bold></highlight>, or on a system coupled to the host computer, such as server computer <highlight><bold>106</bold></highlight>. In one embodiment, the parameter values indicated by the user (including any default values used) may be stored in a temporary location during the specification process, then moved to a different storage location, e.g., long term storage, when the user &ldquo;saves&rdquo; the configuration. For example, the user may select a &ldquo;save&rdquo; option, or the measurement task specifier may automatically save on exit. In another embodiment, the parameter values may be stored as they are entered, and modified as needed based on subsequent user input. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> In <highlight><bold>808</bold></highlight>, the parameter values may be analyzed, then in <highlight><bold>810</bold></highlight>, a measurement task specification may be generated based on the analysis. The measurement task specification may be useable to produce a program which implements the measurement task, as described with reference to <cross-reference target="DRAWINGS">FIGS. 7, 9</cross-reference>, and <highlight><bold>12</bold></highlight>. Further details of the measurement task specification are presented below with reference to FIGS. <highlight><bold>10</bold></highlight>A-<highlight><bold>11</bold></highlight>B. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> As mentioned above, in one embodiment, the GUI may present a plurality of panels to the user which may interactively guide the user through the specification process. As also mentioned above, at least a subset of the panels may be context sensitive. For example, in one embodiment, the GUI may display a first panel which presents options for specifying values of a first parameter of the measurement task. The GUI may then receive first user input to the first panel indicating a value of the first parameter. The GUI may then display a second panel which presents information based on the indicated value of the first parameter. In one embodiment, the information may indicate a second parameter of the measurement task. The GUI may then receive second user input to the second panel indicating a value of the second parameter of the measurement task. Thus, the GUI may display various context sensitive panels for configuring parameters associated with the measurement task in response to user input. As another example, the GUI may display context sensitive help information, where the help information displayed is based on which of the plurality of panels or other GUI elements are currently displayed. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> In one embodiment, one or more of the panels may include default values for one or more parameters of the measurement task. For example, the presented options may include a default value for the first parameter of the measurement task. In this case, the first user input to the first panel may override the default value with the input value, or may indicate acceptance of the default parameter value as the input value. Similarly, the information presented by the second panel may include a default value for the second parameter of the measurement task. The second user input to the second panel may then either override the default value of the second parameter with the value of the second parameter, or may indicate acceptance of the default parameter value of the second parameter as the value of the second parameter. It should be noted that the default values may be utilized without explicitly being presented to the user by a panel. For example, if the user sets values for a minimal required set of input parameters for a measurement task, the remainder of the parameters may assume the default values provided by the system, i.e., panels associated with the remainder of the parameters needn&apos;t be displayed for the default parameter values to be put into effect. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Various embodiments of the process of specifying the measurement task using the GUI are described below. As noted above, the GUI&apos;s use of panels as GUI elements is intended to be exemplary, and is not intended to limit the form or mechanisms of the GUI to any particular type of GUI element. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> In one embodiment, the GUI may display a first panel, e.g., a measurements type panel, which may present a list of measurement types for the measurement task. For example, the list may include one or more of: acceleration, current, frequency, resistance, strain, voltage, and temperature, among others. Of course, these measurement types are intended as examples only, and any and all other measurement types are also contemplated as being in the scope of the present invention. As noted above, the measurement types may also include signal generation, e.g., voltage output. An example of the GUI&apos;s presentation of measurement types is shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, described below. The GUI may then receive first user input to the first panel indicating a measurement type for the measurement task. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> In response to the first user input, the GUI may display a second panel, e.g., a channels selection panel, which presents a list of available devices and corresponding channels. The available devices may correspond to the indicated measurement type. For example, if the selected measurement type were voltage, the devices listed may be those devices available to the system which are suitable for measurement a voltage. An example of the device and channel list is shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, described below. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> The GUI may then receive second user input to the second panel indicating one or more channels for a device from the list of available devices and corresponding channels, an example of which is shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. In one embodiment, each of the one or more channels may correspond to a terminal of the corresponding device. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> In response to the second user input, the GUI may display a third panel, e.g., a channel configuration panel, which presents options for specifying values of one or more parameters for the indicated channel(s). Examples of parameters for channel configuration include input range (or output range in the case of signal generation) and units, e.g., voltage, current, etc., as well as channel parameters specific to a particular measurement type, such as, for example, bridge type for strain measurements, and excitation source, sensitivity, and resonant frequency for an acceleration measurement. The GUI may then receive third user input to the third panel indicating values of the one or more parameters for the indicated channel(s). For examples of channel configuration panels, see <cross-reference target="DRAWINGS">FIGS. 18A and 18B</cross-reference>, described below. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> In one embodiment, a plurality of panels may be presented for specifying a set of parameters, where the parameters are grouped in subsets. For example, in one embodiment, basic channel parameters, such as input range and units, may be presented by a &ldquo;settings&rdquo; panel, while further channel parameters may be presented by a &ldquo;details&rdquo; panel, such as, for example, scaling parameters which specify a scaling function to be applied to the channel data. In one embodiment, the GUI may display two or more panel selection controls, e.g., tabs, each of which may correspond to a respective panel for specifying values of one or more parameters for the indicated channel(s). In this embodiment, the GUI may receive user selection input to one of the two or more panel selection controls, e.g., one of the tabs may be selected by the user. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> In response to the user selection input, the GUI may display the respective panel corresponding to the selected panel selection control. The respective panel may present options for specifying values of the respective one or more parameters for the indicated one or more channels. The GUI may then receive user input to the respective panel indicating values of the respective one or more parameters for the indicated one or more channels. In one embodiment, the details panel (or its equivalent) may be a &ldquo;read only&rdquo; panel which displays parameter values, but which does not allow the values to be set or modified through the panel. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> In one embodiment, the GUI may display a timing panel, which presents one or more timing parameters for the measurement task. The GUI may then receive user input to the timing panel indicating values for the one or more timing parameters for the measurement task. The GUI may also display a triggering panel which presents one or more triggering parameters for the measurement task. The GUI may then receive user input to the triggering panel indicating values for the one or more triggering parameters for the measurement task. In one embodiment, the timing and triggering panels may be a single panel. For examples of timing and triggering panels, please see <cross-reference target="DRAWINGS">FIGS. 16, 24</cross-reference>, and <highlight><bold>25</bold></highlight>, described below. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> In one embodiment, the GUI may display a device settings panel which presents one or more device settings parameters for the measurement task. The device settings parameters may correspond to the device selected from the channel selection panel, described above. Thus, the device settings panel may be presented in response to the user input which selected the device (and channels). The GUI may then receive user input to the device settings panel indicating values for the one or more device settings parameters for the measurement task. One example of a device settings panel is described below with reference to <cross-reference target="DRAWINGS">FIG. 26</cross-reference>. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> Thus, as described above, the measurement task specifier <highlight><bold>730</bold></highlight>, i.e., the configuration tool <highlight><bold>730</bold></highlight>, may be operable to guide the user in specifying parameter values for the measurement task. As mentioned above in <highlight><bold>808</bold></highlight> and <highlight><bold>810</bold></highlight>, the task specifier <highlight><bold>730</bold></highlight> may then analyze the parameters and generate a measurement task specification <highlight><bold>730</bold></highlight>. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In one embodiment, the GUI may present an option to programmatically generate a program implementing the specified measurement task, for example, based on the generated measurement task specification. In another embodiment, the program may be generated based on the parameters received from the user (and any default values provided by the measurement task specifier). As mentioned above, in various embodiments, the program generated may be a graphical program, such as a LabVIEW graphical program, a text-based program, such as a C program, or any other kind of program which is operable to perform the specified measurement task. Thus, in response to receiving user input selecting the option to generate the program, the configuration tool <highlight><bold>730</bold></highlight> may programmatically generate the program based on the parameter values described above. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> In one embodiment, the generated program may be executable to perform the measurement task. In another embodiment, the generated program may comprise a source program which is usable to generate an executable program. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> In the case where the generated program is a graphical program, the GUI may display a program panel comprising a block diagram of the graphical program, e.g., a LabVIEW graphical program block diagram. The execution of the graphical program may invoke one or more processes to generate an executable run-time <highlight><bold>790</bold></highlight> which performs the specified measurement task using the device(s) specified for the task. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> In one embodiment, programmatically generating the program based on the parameter values may include an expert system <highlight><bold>750</bold></highlight> analyzing the measurement task specification <highlight><bold>740</bold></highlight>, and generating a run-time specification <highlight><bold>770</bold></highlight> for the measurement task in response to the analyzing. In one embodiment, the expert system <highlight><bold>750</bold></highlight> may validate the measurement task specification <highlight><bold>740</bold></highlight> prior to generating the run-time specification <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> A run-time builder <highlight><bold>780</bold></highlight> may then analyze the run-time specification <highlight><bold>770</bold></highlight>, and generate a run-time <highlight><bold>790</bold></highlight> based on the run-time specification <highlight><bold>770</bold></highlight>, where the run-time <highlight><bold>790</bold></highlight> is executable to perform the measurement task. In one embodiment, the run-time builder <highlight><bold>780</bold></highlight> may configure one or more measurement devices (i.e., the devices specified in the measurement task configuration) according to the run-time specification <highlight><bold>770</bold></highlight>. The run-time <highlight><bold>790</bold></highlight> may then be executable to perform the measurement task using the configured measurement devices. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> The embodiments described above are but examples of some of the measurement task configuration parameters which may be specified using the configuration tool <highlight><bold>730</bold></highlight>, i.e., the measurement task specifier <highlight><bold>730</bold></highlight>. It is further noted that although numerous panels were described for presenting and specifying parameters, in other embodiments, different panel/parameter groupings may be used. For example, in one embodiment, a single panel may be presented which displays most or all of the configurable parameters. In one embodiment, the single panel may add or modify various indicators and/or controls in response to user input, dynamically presenting appropriate parameters in response to the user&apos;s input. </paragraph>
<paragraph id="P-0150" lvl="7"><number>&lsqb;0150&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>&mdash;High-Level Architecture </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram of a high-level architecture of the present system, according to one embodiment. As <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows, the primary components of the system may comprise system configuration tools <highlight><bold>700</bold></highlight>, system configuration <highlight><bold>710</bold></highlight>, interactive and application programming interfaces <highlight><bold>730</bold></highlight> which comprise one or more measurement task specifiers <highlight><bold>730</bold></highlight>, task specification <highlight><bold>740</bold></highlight>, expert system <highlight><bold>750</bold></highlight>, run-time specification <highlight><bold>770</bold></highlight>, run-time builder <highlight><bold>780</bold></highlight>, and the run-time <highlight><bold>790</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> also shows the communication between the various components. </paragraph>
<paragraph id="P-0152" lvl="7"><number>&lsqb;0152&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>A-D&mdash;Static Diagrams of the System </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> FIGS. <highlight><bold>10</bold></highlight>A-<highlight><bold>10</bold></highlight>D are static diagrams of the architecture and function of primary functional components or sub-systems used to implement measurement tasks according to one embodiment. FIGS. <highlight><bold>10</bold></highlight>A-<highlight><bold>10</bold></highlight>D illustrate an embodiment of a measurement system architecture based on National Instruments measurement products. </paragraph>
<paragraph id="P-0154" lvl="7"><number>&lsqb;0154&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>A&mdash;System for System Configuration and Task Specification </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> is a block diagram of one embodiment of system configuration and measurement task specification components of the present invention. As <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> shows, there are four main functional groups, comprising system configuration tools <highlight><bold>700</bold></highlight>, system configuration storage <highlight><bold>710</bold></highlight>, interactive and application programming interfaces <highlight><bold>730</bold></highlight>, and task specification <highlight><bold>740</bold></highlight>. In one embodiment, the system configuration tools <highlight><bold>700</bold></highlight> comprise a DAQ measurements and automation explorer (MAX) provider <highlight><bold>702</bold></highlight> which may plug in to MAX <highlight><bold>704</bold></highlight>. In one embodiment, the system configuration tools <highlight><bold>700</bold></highlight> may facilitate system configuration specification by the user. In other words, the system configuration tools, e.g., MAX provider <highlight><bold>702</bold></highlight>, may receive user input indicating system configuration parameters and set system configuration parameters for the one or more measurement devices in response to the user input. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> also shows, once the user has specified a system configuration, the specified system configuration may be stored in system configuration storage <highlight><bold>710</bold></highlight>. The system configuration storage <highlight><bold>710</bold></highlight> may be operable to store a measurements system configuration <highlight><bold>706</bold></highlight>, as well as an MIO system configuration <highlight><bold>708</bold></highlight>. The term &ldquo;MIO&rdquo; refers to a type or class of measurement device. In one embodiment, the MIO system configuration <highlight><bold>708</bold></highlight> may operate to extend the measurements system configuration <highlight><bold>706</bold></highlight>. As may be seen, both the measurements system configuration <highlight><bold>706</bold></highlight> and the MIO system configuration <highlight><bold>708</bold></highlight> may be stored in MAX storage (MXS) <highlight><bold>712</bold></highlight>. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> In one embodiment, interactive and application programming interfaces (IAPIs) <highlight><bold>730</bold></highlight> may be used to access various objects and functions of the system. These interfaces may provide mechanisms through which the user, other system components, or other systems, may specify a measurement task. As <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> shows, the IAPIs <highlight><bold>730</bold></highlight> may include a measurements configuration tool <highlight><bold>714</bold></highlight> and MIO configuration tool plug-in <highlight><bold>716</bold></highlight>, which may be operable to extend the measurements configuration tool <highlight><bold>714</bold></highlight>. In one embodiment, the system configuration information stored in system configuration storage <highlight><bold>710</bold></highlight> may be retrieved via the measurements configuration tool <highlight><bold>714</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> The IAPIs may further include measurements APIs for various development environments or languages, such as a measurements API for LabVIEW <highlight><bold>718</bold></highlight> and MIO extensions to measurements API for LabVIEW <highlight><bold>722</bold></highlight>, which may be operable to extend the measurements API for LabVIEW <highlight><bold>718</bold></highlight>; a measurements API for C <highlight><bold>728</bold></highlight> and MIO extensions to measurements API for C <highlight><bold>732</bold></highlight>, which may be operable to extend the measurements API for C <highlight><bold>728</bold></highlight>; a measurements API for Measurement Studio Tools for Visual C&plus;&plus; <highlight><bold>724</bold></highlight> and MIO extensions to measurements API for Measurement Studio Tools for Visual C&plus;&plus; <highlight><bold>726</bold></highlight>, which may be operable to extend the measurements API for Measurement Studio Tools for Visual C&plus;&plus; <highlight><bold>724</bold></highlight>; and a measurements API for Measurement Studio Tools for Visual Basic <highlight><bold>734</bold></highlight> and MIO extensions to measurements API for Measurement Studio Tools for Visual Basic <highlight><bold>736</bold></highlight>, which may be operable to extend the measurements API for Measurement Studio Tools for Visual Basic <highlight><bold>734</bold></highlight>. It should be noted that in other embodiments, other interfaces or APIs may be included for other development environments and/or programming languages. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> further shows, a task specification <highlight><bold>740</bold></highlight> may be generated via the IAPIs <highlight><bold>730</bold></highlight>. The task specification <highlight><bold>740</bold></highlight> may include measurements-wide measurements specification objects (MSOs) <highlight><bold>742</bold></highlight> and MIO MSOs <highlight><bold>744</bold></highlight>, which may be operable to extend the measurements MSOs <highlight><bold>742</bold></highlight>. Note that both the measurements MSOs <highlight><bold>742</bold></highlight> and the MIO MSOs <highlight><bold>744</bold></highlight> may be stored in the MXS <highlight><bold>712</bold></highlight>. As noted above, the term &ldquo;MIO&rdquo; refers to a type or class of measurement device. Thus, the measurement task specification <highlight><bold>740</bold></highlight> may comprise a collection of measurement specification objects, or MSOs, as described in more detail below. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> Thus, the system components described above may allow the user to configure the system, as well as to generate a measurement task specification <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0161" lvl="7"><number>&lsqb;0161&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>B&mdash;System for Compiling a Task Specification to a Task Run-Time Specification </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> is a block diagram of one embodiment of system components for compiling the task specification to a task run-time specification. As <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> shows, in one embodiment, the system components for compiling the task specification to a task run-time specification may include the task specification <highlight><bold>740</bold></highlight> and the system configuration storage <highlight><bold>710</bold></highlight>, described above with reference to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>A, as well as an expert system <highlight><bold>750</bold></highlight>, an expert registration storage <highlight><bold>760</bold></highlight>, and a task run-time specification <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> In one embodiment, the expert system <highlight><bold>750</bold></highlight> may be operable to retrieve system configuration information from the system configuration storage <highlight><bold>710</bold></highlight> to make decisions regarding the measurement task specification <highlight><bold>740</bold></highlight>. The expert system <highlight><bold>750</bold></highlight> may be further operable to compile the task specification <highlight><bold>740</bold></highlight> to produce the task run-time specification <highlight><bold>770</bold></highlight>, as shown. As <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> also shows, the expert system <highlight><bold>750</bold></highlight> may refer to the expert registration storage for matching experts to the task specification <highlight><bold>740</bold></highlight>. In one embodiment, the expert system <highlight><bold>750</bold></highlight> may include measurements run-time experts <highlight><bold>752</bold></highlight>, measurements streaming experts <highlight><bold>756</bold></highlight>, MIO experts <highlight><bold>754</bold></highlight>, routing experts <highlight><bold>758</bold></highlight>, and a measurements expert library <highlight><bold>759</bold></highlight>. Further examples of experts include sensor experts, smart sensor experts, scaling experts, and system calibration experts, among others. In general, an expert may be defined and used for any device or function. For example, a scaling expert may be operable to make changes to the run-time specification to specify or implement custom scaling operations for a measurement channel. In one embodiment, each of the experts may be operable to register with the measurements expert library <highlight><bold>759</bold></highlight> to indicate availability to the system. For further details of the design and operation of the expert system, please see U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, which was included by reference above. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> shows, the expert registration storage <highlight><bold>760</bold></highlight> may include registration components which correspond to each of the experts included in the expert system <highlight><bold>750</bold></highlight>. For example, the expert registration storage <highlight><bold>760</bold></highlight> may include components for MIO expert registrations <highlight><bold>762</bold></highlight>, measurements run-time expert registrations <highlight><bold>764</bold></highlight>, routing expert registration <highlight><bold>766</bold></highlight>, and measurements streaming expert registrations <highlight><bold>768</bold></highlight>. It should be noted that the expert system <highlight><bold>750</bold></highlight> and the expert registration storage <highlight><bold>760</bold></highlight> may also respectively use and store other experts and other expert registrations as needed. As shown, each expert registration may be stored in MXS <highlight><bold>712</bold></highlight>. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> As mentioned above, the expert system <highlight><bold>750</bold></highlight> may produce the task run-time specification based on the task specification <highlight><bold>740</bold></highlight>, the system configuration information stored in the system configuration storage <highlight><bold>710</bold></highlight>, and the various experts comprised in the expert system <highlight><bold>750</bold></highlight>. In one embodiment, the task run-time specification <highlight><bold>770</bold></highlight> may include various primitive settings specified by one or more of the above-mentioned experts. For example, the settings may include measurements run-time primitive settings <highlight><bold>772</bold></highlight>, measurements streaming primitive settings <highlight><bold>774</bold></highlight>, routing primitive settings <highlight><bold>776</bold></highlight>, and MIO primitive settings <highlight><bold>778</bold></highlight>. The primitive settings may each be stored in MXS <highlight><bold>712</bold></highlight>, as shown. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> Note that when the measurement task specification does not specify any product-specific properties, i.e., any properties or specifications particular to a given device or product, then the measurement task specification may be compiled to various different measurement systems without modification. In other words, to the extent that the measurement task specification is generic, it is also portable, and thus a single measurement task specification may be used or compiled for multiple measurement systems. </paragraph>
<paragraph id="P-0167" lvl="7"><number>&lsqb;0167&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>C&mdash;System for Building a Task Run-Time from a Task Run-Time Specification </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10C</cross-reference> is a block diagram of system components for building a task run-time from a task run-time specification, according to one embodiment. As <cross-reference target="DRAWINGS">FIG. 10C</cross-reference> shows, the system components for building a task run-time from a task run-time specification may include the task run-time specification <highlight><bold>770</bold></highlight>, described above with reference to <cross-reference target="DRAWINGS">FIG. 10B, a</cross-reference> run-time builder <highlight><bold>780</bold></highlight>, and a task run-time <highlight><bold>790</bold></highlight>. As shown, the run-time builder <highlight><bold>780</bold></highlight> may be operable to retrieve the task run-time specification (possibly from MXS <highlight><bold>712</bold></highlight>) and build the task run-time <highlight><bold>790</bold></highlight>. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> In one embodiment, the run-time builder <highlight><bold>780</bold></highlight> may include a measurements run-time builder <highlight><bold>782</bold></highlight> which may be operable to create primitive supervisors for each primitive setting in the run-time specification <highlight><bold>770</bold></highlight>, such as measurements run-time primitive supervisors <highlight><bold>784</bold></highlight>, MIO primitive supervisors <highlight><bold>786</bold></highlight>, measurements streaming primitive supervisors <highlight><bold>788</bold></highlight>, and routing primitive supervisors <highlight><bold>789</bold></highlight>. As <cross-reference target="DRAWINGS">FIG. 10C</cross-reference> shows, these primitives and supervisors may be included in the task run-time <highlight><bold>790</bold></highlight>, described below. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> In one embodiment, the task run-time <highlight><bold>790</bold></highlight> may include a measurements run-time <highlight><bold>792</bold></highlight> which may manage routing primitives and supervisors <highlight><bold>794</bold></highlight>, MIO primitives and supervisors <highlight><bold>796</bold></highlight>, measurements streaming primitives and supervisors <highlight><bold>798</bold></highlight>, and measurements run-time primitives and supervisors <highlight><bold>799</bold></highlight>. The task run-time <highlight><bold>790</bold></highlight> may be operable to be executed by the system to implement the specified measurement task, as described below with reference to <cross-reference target="DRAWINGS">FIG. 10D</cross-reference>. </paragraph>
<paragraph id="P-0171" lvl="7"><number>&lsqb;0171&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>D&mdash;System for Executing Tasks </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10D</cross-reference> is a block diagram of a system for executing measurement tasks. As <cross-reference target="DRAWINGS">FIG. 10D</cross-reference> shows, the system may include the task run-time <highlight><bold>790</bold></highlight>, described above with reference to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>C, as well as the interactive and application programming interfaces (IAPIs), described above with reference to <cross-reference target="DRAWINGS">FIG. 10A</cross-reference>. As may be seen in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>D, in one embodiment, the IAPIs <highlight><bold>730</bold></highlight> may provide means for issuing start, stop, commit, reserve, unreserve, set, and get commands to the task run-time <highlight><bold>790</bold></highlight>. The IAPIs <highlight><bold>730</bold></highlight> may also provide means for issuing reads and writes to the measurements streaming primitives and supervisors <highlight><bold>798</bold></highlight> as shown. Thus, the measurement task may be implemented by executing the task run-time <highlight><bold>790</bold></highlight> via various commands or calls via one or more of the IAPIs. </paragraph>
<paragraph id="P-0173" lvl="7"><number>&lsqb;0173&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>A&mdash;Measurement Task Specifier </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> is a block diagram of the functionality of the measurement task specifier, according to one embodiment. As <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> shows, the measurement task specifier <highlight><bold>730</bold></highlight> preferably operates to receive user input <highlight><bold>732</bold></highlight> describing a desired measurement task and generate a measurement task specification <highlight><bold>740</bold></highlight> which is usable to produce a program which implements the specified measurement task. The measurement task specifier <highlight><bold>730</bold></highlight> may present a graphical user interface which interactively guides the user through the task specification process, collecting user input which describes the desired measurement task. The measurement task specifier <highlight><bold>730</bold></highlight> may then analyze the user input and generate the measurement task specification <highlight><bold>740</bold></highlight> which may be stored and/or used to generate the program. It is noted that in one embodiment, the graphical user interface may include default values for at least a subset of the task parameters, so that for simple measurement tasks, the user may fully specify the task with minimal input. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> also shows, in addition to the measurement task specification <highlight><bold>740</bold></highlight>, the measurement task specifier <highlight><bold>730</bold></highlight> may optionally generate application code <highlight><bold>1008</bold></highlight> for performing the specified task, as described with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference> and FIGS. <highlight><bold>27</bold></highlight>-<highlight><bold>28</bold></highlight>G. For example, the graphical user interface may present an option to the user for application code generation, and if the user so indicates, may programmatically generate the application code <highlight><bold>1008</bold></highlight>, also referred to as an application program. As mentioned above, the application program may implement start, read/write, and/or cleanup operations, among others, and may comprise icons in a LabVIEW graphical program (i.e., VIs), and/or function calls in a text-based program including one or more of C code, C&plus;&plus; code, C&num; code, Java code, Visual Basic code, or any other form of computer program code. In one embodiment, the generated code may comprise a measurement task diagram, e.g., a LabVIEW diagram, for a graphical program, e.g., a LabVIEW graphical program. Further details of the generated application program are presented below with reference to FIGS. <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> The use of a graphical user interface to guide the user in the specification of a measurement task is to be contrasted with typical prior art methods of task specification in which a user has to manually set values for the many parameters for a desired task. For example, in prior art systems, the user typically has to manually write code, such as C code or LabVIEW code, using a collection of APIs or function calls to set the value of each parameter. In the prior art systems, default values for the parameters are typically not provided, thus the user is expected not only to know all of the channel, timing and triggering parameters required for the task, but the appropriate values for each, as well. Examples of prior art solutions are compared to solutions generated by the methods described herein are presented below with reference to FIGS. <highlight><bold>30</bold></highlight>A-<highlight><bold>37</bold></highlight>C. </paragraph>
<paragraph id="P-0177" lvl="7"><number>&lsqb;0177&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>B&mdash;Measurement Task Specification </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> is a high-level block diagram of a measurement task specification <highlight><bold>740</bold></highlight>, according to one embodiment. As mentioned above, in one embodiment, the measurement task specification may include configuration information for one or more measurement devices, where, after being configured with the configuration information, the one or more measurement devices are operable to perform the measurement task. As <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> shows, in one embodiment the measurement task specification <highlight><bold>740</bold></highlight> may include a collection of measurement specification objects (MSOs). Measurement specification objects may comprise atomic objects in the form of data structures or software classes which reflect the primary concepts and collaborations of the measurements domain. The use of these objects may enable complex solutions to be broken down into simpler components in a consistent way. Said another way, the MSOs may describe the user&apos;s measurement task in a device-independent manner, and may also be operable to describe device-specific aspects of the task. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> As shown, in one embodiment, the MSOs which compose the measurement task specification <highlight><bold>740</bold></highlight> may include one or more channel MSOs <highlight><bold>746</bold></highlight> and timing/triggering MSOs <highlight><bold>748</bold></highlight>. The channel MSOs <highlight><bold>746</bold></highlight> may each include one or more parameters for configuring a channel for the measurement task. For example, channel configuration parameters included in a channel MSO <highlight><bold>746</bold></highlight> may include one or more of: task name, channel name, terminals, input ranges, units, scales, and sensors, among others. The timing/triggering MSOs <highlight><bold>748</bold></highlight> may each include one or more parameters specifying timing and/or triggering for the measurement task. Examples of timing parameters include scan rate, number of samples, duration, clock type, and clock source, among others. Example triggering parameters include trigger type, source, edge, level, window, and hysterisis, among others. Thus, each MSO may codify (via one or more parameters) a particular aspect or component involved in performing the measurement task. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> One example of an MSO corresponds to a measurement. In one embodiment, a &lsquo;measurement MSO&rsquo; may comprise a phenomenon (i.e., a detectable signal), a terminal configuration, a desired resolution, a name, and one or more constraints. The particular values of these fields may thus specify a particular measurement. Different measurement specification objects may be linked together to form a measurement task specification. </paragraph>
<paragraph id="P-0181" lvl="7"><number>&lsqb;0181&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference>&mdash;Measurement Task Specification Process </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates one embodiment of a process for specifying a measurement task, and optionally, for generating a program for performing the task. <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates primary components of the system (rectangles), method steps of the process (rounded rectangles), and various products which may be produced in the process (document symbols). </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows, the measurement task specifier <highlight><bold>730</bold></highlight> may receive user input describing or characterizing the measurement task, e.g., values for a plurality of parameters, as indicated by <highlight><bold>1202</bold></highlight>. The measurement task specifier <highlight><bold>730</bold></highlight> may then analyze the user input and generate a measurement task specification <highlight><bold>740</bold></highlight>, as indicated by <highlight><bold>1204</bold></highlight>. As mentioned above, the measurement task specification <highlight><bold>740</bold></highlight> may comprise a collection of linked MSOs, each of which includes one or more parameter values specifying an aspect or component of the measurement task. In one embodiment, after the measurement task specification <highlight><bold>740</bold></highlight> has been generated, the specification <highlight><bold>740</bold></highlight> may be verified or validated. In one embodiment, the specification <highlight><bold>740</bold></highlight> may be verified by the expert system <highlight><bold>750</bold></highlight>. The verification of the measurement task specification <highlight><bold>740</bold></highlight> may include checking for completeness, as well as internal and external consistency. In other words, the expert system <highlight><bold>750</bold></highlight> may verify that the specified task is specified entirely, and that the task as specified may be performed by the available resources of the system. As mentioned above, once the measurement task specification <highlight><bold>740</bold></highlight> has been generated, the specification <highlight><bold>740</bold></highlight> may be stored for later use, e.g., in a library of task specifications stored on a server, or used to generate an executable program for performing the specified task, as described below. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 12</cross-reference> also shows, in one embodiment, an option may be presented to the user to programmatically generate application source code in the form of a measurement task source program <highlight><bold>1208</bold></highlight>, as <highlight><bold>1205</bold></highlight> indicates. If the user selects this code generation option, then the measurement task source program <highlight><bold>1208</bold></highlight> may be generated automatically. If the user does not select this option, then the user may produce the source program <highlight><bold>1208</bold></highlight> manually, e.g., by programming via an API, graphical or text-based. In another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may automatically generate the source program <highlight><bold>1208</bold></highlight>, i.e., without the user selecting an option to do so. In yet another embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may not provide for the programmatic generation of the source program <highlight><bold>1208</bold></highlight>, and the user may thus be required to produce the source program <highlight><bold>1208</bold></highlight> manually. Thus, whether programmatically or manually, the measurement task source program <highlight><bold>1208</bold></highlight> may be generated. Further details of the measurement task source program <highlight><bold>1208</bold></highlight> are presented below with reference to <cross-reference target="DRAWINGS">FIGS. 13, 27</cross-reference>, and <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> Once the measurement task source program <highlight><bold>1208</bold></highlight> has been generated, the user may initiate the program, as indicated in by <highlight><bold>1210</bold></highlight>. In an embodiment where the measurement task source program <highlight><bold>1208</bold></highlight> is a graphical program, e.g., a LabVIEW program, the program initiation <highlight><bold>1210</bold></highlight> may simply involve the user activating a node, e.g., a &ldquo;play&rdquo; or &ldquo;read/write&rdquo; node or icon of the graphical program. Further details of the &ldquo;play&rdquo; node are presented below with reference to FIGS. <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G and <highlight><bold>30</bold></highlight>A-<highlight><bold>30</bold></highlight>B. In an embodiment where the measurement task source program <highlight><bold>1208</bold></highlight> is a text-based program, e.g., a C program, the program initiation <highlight><bold>1210</bold></highlight> may involve the user initiating compilation or interpretation of the source program <highlight><bold>1208</bold></highlight>. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows, in one embodiment, the initiation of the program <highlight><bold>1210</bold></highlight> may invoke the expert system <highlight><bold>750</bold></highlight> to analyze the measurement task specification <highlight><bold>740</bold></highlight> and generate a run-time specification <highlight><bold>770</bold></highlight> which is useable to produce an executable run-time <highlight><bold>790</bold></highlight>. In one embodiment, a run-time builder <highlight><bold>780</bold></highlight> may analyze or process the run-time specification <highlight><bold>770</bold></highlight> and generate the executable run-time <highlight><bold>790</bold></highlight>, i.e., the measurement task run-time <highlight><bold>790</bold></highlight>. The measurement task run-time <highlight><bold>790</bold></highlight> may comprise an executable program which configures measurement hardware and/or software to perform the specified measurement task. In one embodiment, the run-time builder may configure one or more measurement devices according to the run-time specification, where the run-time executes to perform the measurement task using the configured measurement devices. For a more detailed description of the generation of the measurement task run-time <highlight><bold>790</bold></highlight> from the measurement task specification <highlight><bold>740</bold></highlight>, please see U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, which was incorporated by reference above. </paragraph>
<paragraph id="P-0187" lvl="7"><number>&lsqb;0187&rsqb;</number> FIGS. <highlight><bold>13</bold></highlight>-<highlight><bold>30</bold></highlight>&mdash;Measurement Task Configuration Tool </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> As mentioned above, the measurement task specifier <highlight><bold>730</bold></highlight> may be implemented in a variety of forms, including a graphical measurement task configuration tool, a wizard, or an API, among others. In a graphical measurement task configuration tool embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may comprise a software program invocable by the user under a development environment. The measurement task configuration tool may comprise an interactive Graphical User Interface (GUI) which may provide an intuitive and powerful way for a user to specify a measurement task. FIGS. <highlight><bold>13</bold></highlight>-<highlight><bold>30</bold></highlight> illustrate various embodiments of the measurement task configuration tool and its operation, as described below. In particular, <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates one embodiment of a high-level architecture of a measurement task configuration tool <highlight><bold>730</bold></highlight>, and FIGS. <highlight><bold>14</bold></highlight>-<highlight><bold>30</bold></highlight> provide a step by step example of a task specification process using one embodiment of the measurement task configuration tool <highlight><bold>730</bold></highlight>. In this embodiment, a series of panels is presented to the user by the GUI in an interactive manner, allowing the user to completely specify or configure the desired measurement task. It is noted that the measurement task configuration tool <highlight><bold>730</bold></highlight> and task specification/configuration process described are meant to be exemplary, and are not intended to limit the configuration tool <highlight><bold>730</bold></highlight> or process to any particular form. </paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference>&mdash;Measurement Task Configuration Tool Architecture </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> In one embodiment, the measurement task configuration tool may be implemented in a graphical programming language, such as National Instruments&apos; LabVIEW graphical programming environment. The GUI of the configuration tool may be a Virtual Instrument (VI) accessed by the user to specify and configure measurement tasks. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram of one embodiment of a configuration tool architecture. In one embodiment, the configuration tool may be hosted in a GUI Framework <highlight><bold>1302</bold></highlight>, e.g., National Instruments Workshops framework, which may provide a high-level framework that multiple applications can plug into, providing common user experiences. In the preferred embodiment, the configuration tool addresses application configuration. The purpose is to present the user with the ability to configure exactly what their application does (i.e., voltage measurement, current measurement, digital generation, voltage generation, etc.), and then build a single task that encompasses all of this information. The task may then be referenced in any application development environment (ADE). </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> For example, in one embodiment, the configuration tool (hosted by the Workshops framework) may run stand-alone, launched directly from an ADE, or may be hosted in another application, such as National Instruments&apos; MAX &lsqb;Measurement &amp; Automation Explorer&rsqb; program. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> In one embodiment, there may be two parts to the plug-in architecture: plugging-in to Workshops, and plugging-in to a configuration tool framework. </paragraph>
<paragraph id="P-0194" lvl="7"><number>&lsqb;0194&rsqb;</number> Workshop Plug-In Architecture </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> In one embodiment, the configuration tool may be written entirely in National Instruments&apos; LabVIEW graphical programming language. Hosting a Virtual Instrument (VI) from the Workshops framework may utilize some or all of the following: </paragraph>
<paragraph id="P-0196" lvl="2"><number>&lsqb;0196&rsqb;</number> 1) A Main State VI <highlight><bold>1010</bold></highlight> that maintains execution, which is preferably not visible to users. </paragraph>
<paragraph id="P-0197" lvl="2"><number>&lsqb;0197&rsqb;</number> 2) A GUI VI through which a user may configure their task. </paragraph>
<paragraph id="P-0198" lvl="2"><number>&lsqb;0198&rsqb;</number> 3) A Block .INI File <highlight><bold>1304</bold></highlight> specifying the directory paths of the VI&apos;s, block names, help file, etc. <highlight><bold>1305</bold></highlight>. </paragraph>
<paragraph id="P-0199" lvl="2"><number>&lsqb;0199&rsqb;</number> 4) A Block Icon <highlight><bold>1306</bold></highlight> for the GUI application. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> In one embodiment, each .INI file specification may automatically appear as a &ldquo;block&rdquo; in an &ldquo;Add&rdquo; popup palette or menu of the workshops framework (see <cross-reference target="DRAWINGS">FIG. 15</cross-reference>). Clicking on this block may launch a corresponding GUI VI and add an icon and text to a ring control, shown in <cross-reference target="DRAWINGS">FIG. 29</cross-reference>, as described below. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> In one embodiment, the GUI and/or Workshops framework may support &ldquo;Undo&rdquo;, &ldquo;Redo&rdquo;, and full-state &ldquo;Restore&rdquo; commands by automatically copying appropriate controls from the GUI to the State VI, and then storing/restoring this data. A block VI may be programmed to respond to these events and freely exchange its data to/from the workshop in order to support these features. </paragraph>
<paragraph id="P-0202" lvl="7"><number>&lsqb;0202&rsqb;</number> Measurement Task Configuration Tool Plug-In Architecture </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> To maximize extensibility and development ease of use, and to minimize disk footprint, there may be a single Main Template VI <highlight><bold>1308</bold></highlight> that dynamically displays only the measurement type/phenomenon that is being configured. For example, if a user is configuring a voltage measurement, the VI may only display the configuration components necessary for a voltage measurement (See FIGS. <highlight><bold>18</bold></highlight>-<highlight><bold>26</bold></highlight>). Likewise, the user may add a temperature measurement, and with the exact same VI, configure a temperature measurement. This architecture may greatly shorten development time, since all measurement blocks may share a common interface. Thus, changes to the GUI may need only be made in one location. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> In one embodiment, each measurement class component (the piece of the UI that is specific to the measurement type being configured) may be a separate VI, referred to as a Measurement Class VI <highlight><bold>1312</bold></highlight> that may be dynamically loaded by the main GUI template. A &ldquo;measurement class&rdquo; ID may be passed to this VI by the Workshop, which tells it what measurement class component VI to load based on which button was selected from the popup palette. Each Measurement Class VI <highlight><bold>1312</bold></highlight> may be a small state-model VI used for processing events unique to its own front panel, and may have a number of built-in system events for communication to/from the Main Template VI <highlight><bold>1308</bold></highlight> for such operations as initialization and data processing. The remainder of events may be user-instantiated events which tell the VI how to act when a user changes a control on the front panel, for example. </paragraph>
<paragraph id="P-0205" lvl="7"><number>&lsqb;0205&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference>&mdash;Initial Screen </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> In one embodiment, upon launch of the measurement task specifier <highlight><bold>730</bold></highlight> (also referred to as a measurement task configuration tool or task configurator in this embodiment) the graphical user interface (GUI) may present an initial screen to the user. <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates one embodiment of this initial screen. As <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows, in this embodiment, the initial screen may function as a &ldquo;welcome screen&rdquo;, providing the user with information regarding the use of the configuration tool <highlight><bold>730</bold></highlight>, and means to begin the task configuration process, e.g., a button or menu selection. In addition, as <cross-reference target="DRAWINGS">FIG. 14</cross-reference> also shows, the configuration tool <highlight><bold>730</bold></highlight> may provide additional features, such as &ldquo;undo&rdquo;, &ldquo;redo&rdquo;, and &ldquo;apply&rdquo;, which may allow the user to easily retrace and modify steps taken in the specification/configuration process. In one embodiment, the GUI may include means for coupling the measurement task specifier <highlight><bold>730</bold></highlight> to other tools or systems. For example, <cross-reference target="DRAWINGS">FIG. 14</cross-reference> includes a tab at the bottom of the Figure labeled &ldquo;Block Setup&rdquo;; other auxiliary tabs are also contemplated for activation of and/or communication with, other tools. For example, a digital waveform editor or wiring diagram may be accessed via these auxiliary tabs. </paragraph>
<paragraph id="P-0207" lvl="7"><number>&lsqb;0207&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference>&mdash;Measurement Type Selection </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> When the user begins the specification process, such as by clicking the &ldquo;add&rdquo; button of <cross-reference target="DRAWINGS">FIG. 14, a</cross-reference> list of available measurement types may be presented to the user, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. In this embodiment, the GUI displays a panel which presents the list of measurement type options, including acceleration, current, frequency, resistance, strain, voltage, and temperature. In other embodiments, the list of measurement types may include other types, such as, for example, photonic intensity, magnetic field strength, or any other measurable phenomena. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> In one embodiment, the selection of a measurement type may spawn a sub-menu which may provide additional selection options. For example, as mentioned above, the measurement task may include signal generation, as well as measurements, thus, in one embodiment, in response to the user&apos;s selection of the voltage measurement type, the GUI may display a sub-menu or sub-control which presents additional selection options related to voltage, e.g., &ldquo;voltage input&rdquo; or &ldquo;voltage output&rdquo;, among others. Although a measurements types panel is presented in this embodiment, in other embodiments, other controls may be used, such as pop-up menus and text entry fields, among others. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> The selection of the measurement type may establish logical guidelines for subsequent GUI displays. In other words, the information and/or options presented by the GUI to the user may depend upon the measurement type selected. This type of context-dependency may pervade the structure and operation of the measurement task specifier <highlight><bold>730</bold></highlight>, various examples of which are described below. </paragraph>
<paragraph id="P-0211" lvl="7"><number>&lsqb;0211&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>&mdash;Main Configuration Screen </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> In response to the selection of the measurement type, a main configuration screen may be displayed by the GUI corresponding to the selected measurement type, one embodiment of which is illustrated by <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. The main configuration screen may provide for the specification of primary parameters for the measurement task. In a preferred embodiment, default parameter values may be provided by the GUI, so that with a minimum of input, the user may specify a workable measurement task, i.e., a task that is implementable using the available resources of the system. In other words, parameter values not set expressly by the user may assume the default values. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows, in this example, a voltage input measurement has been selected. In response to this selection, the GUI may present a channel selection panel for selection of one or more device channels for the voltage input measurement, as shown. In this embodiment, a channel selection list is presented which lists available devices suitable for performing a voltage input measurement, and corresponding channels, e.g., channels 0 through 6 of a PCI-MIO-16E-1 device, and other available devices and corresponding channels. Each of the channels of a device corresponds to a terminal of the device, and so selection of one or more channels for the device indicates that data will be read from the corresponding terminals of the device. Further details of channel selection and configuration are presented below with reference to FIGS. <highlight><bold>17</bold></highlight>-<highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> Just below the channel selection panel is a timing panel, presented by the GUI for the user to specify timing parameters for the measurement task, such as sampling mode, number of samples, and sample rate. In this example, the timing panel shown is a &ldquo;basic view&rdquo; of timing and triggering parameters. An &ldquo;advanced view&rdquo;, selectable from the view control shown, is described below with reference to <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. It should be noted that the timing (and triggering) configuration parameters may apply to the entire measurement task, i.e., may be common to the selected channels. </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> As mentioned above, the GUI may also display a context sensitive help panel, here shown to the right of the screen. The help panel may display useful information related to the currently displayed configuration panels. For example, if the GUI presents a panel for setting channel parameters, the help panel may present information related to the channel parameters, or instructions for specifying values for the channel parameters. In one embodiment, the GUI may also display an auxiliary display panel, here shown below the help panel with an &ldquo;under construction&rdquo; label, which may be used to display auxiliary information of any type, as desired. For example, in one embodiment, the auxiliary display panel may be an error display window whereby error messages and codes may be presented to the user when errors are detected by the system. </paragraph>
<paragraph id="P-0216" lvl="7"><number>&lsqb;0216&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference></paragraph>
<paragraph id="P-0217" lvl="7"><number>&lsqb;0217&rsqb;</number> Channel Selection </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates channel selection for the measurement task using the channel selection panel of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, in this case, channels <highlight><bold>0</bold></highlight> through <highlight><bold>3</bold></highlight> of the indicated device. It should be noted that the device/channel list is scrollable, and so other devices and corresponding channels may also be selected as desired. As shown, in this embodiment, the channel selection panel also allows the user to determine a channel selection mode, whereby new channels may be created and configured, existing channels may be selected (and possibly modified), and/or copies of existing channels may be made. The selected channels may then be displayed in a channel list, as shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, described below. </paragraph>
<paragraph id="P-0219" lvl="7"><number>&lsqb;0219&rsqb;</number> FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>B&mdash;Channel Configuration </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> In response to the channel selection described above, the GUI may present one or more channel configuration panels, as FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C show. <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> illustrates a channel list of the selected channels for the voltage measurement specified above. In this example, the selected channels are named in accordance with the selected measurement type, i.e., Voltage <highlight><bold>0</bold></highlight>, Voltage <highlight><bold>1</bold></highlight>, and so on. A settings panel is also displayed whereby the user may specify an input range for the voltage measurements, as well as desired units, e.g., V(olts). An option may also be provided for specifying whether the settings are to be applied to all of the selected channels, or to one or more of the selected channels. In this example, basic settings are presented in the settings panel, while more detailed settings are accessible by selection of the &ldquo;details&rdquo; tab shown, as described below with reference to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> illustrates a configuration panel for a different measurement type, in this case, an acceleration measurement, as another example of a channel settings panel. As <cross-reference target="DRAWINGS">FIG. 18B</cross-reference> shows, in addition to input range and unit, controls are provided for setting excitation source and value, sensitivity, and resonant frequency for the acceleration measurement. Thus, the channel configuration parameters presented may depend upon the measurement type and/or the device selected for the measurement task. </paragraph>
<paragraph id="P-0222" lvl="7"><number>&lsqb;0222&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference>&mdash;Channel Configuration: Details </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates another channel configuration panel, referred to here as a &ldquo;details&rdquo; panel, whereby further configuration parameters for the channels may be specified, such as scaling and channel name, among others. In this example, a particular channel (Voltage <highlight><bold>0</bold></highlight>) has been selected for further configuration. The details panel presents a text entry field or control for modifying the channel name, as well as a control (in this case, a ring control) for selecting or specifying a scaling operation to be applied to channel signals. Further details of the scaling specification are provided below with reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. The details panel may also display the selected channel&apos;s hardware terminal association, e.g., the full hardware path, as shown. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 19</cross-reference> also shows, an option may be presented to the user for making one or more of the selected channels global or local channels. A global channel is one which is made available to other tasks and systems, and so any parameter changes made to the channel&apos;s configuration may affect the other tasks. Said another way, a global channel is stored in a common storage area accessible by users for other tasks. In contrast, a local channel may only be available to the local user for the specified task. If the user decides to change a locally defined or configured channel to a global channel, the system may move the channel to the global or common storage area and make the channel accessible to others. If the user decides to change a global channel to a local channel, the system may make a local copy of the global channel, generating a corresponding local channel, which then &lsquo;belongs&rsquo; to the user and which may be modified as desired without affecting the original global channel. </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> Of course, in other embodiments, the parameters presented by the details panel and the setting panel described above with reference to <cross-reference target="DRAWINGS">FIG. 18</cross-reference> may be displayed by a single panel, or by more than two panels, as desired. For example, in one embodiment, the scale selector ring control may appear on the settings tab instead of the details tab. This may facilitate having independent scale selections for each channel in the channel list. </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> In another embodiment, the details tab may be a read-only type information tab, with no parameters actually set by the user. This tab would then be for display purposes only, presenting detailed channel information to the user, such as configured device and terminals, for example. </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> In one embodiment, in addition to configuring tasks that may contain one or more local or global channels, the measurement task specifier may also be operable to configure channels independent of any particular task. These channels are inherently global, as defined above, and, after being configured, can later be inserted into tasks as necessary. In this embodiment, the measurement task specifier may not present any task specific configuration panels to the user, such as the timing, triggering, and device panels, but rather, may present only panels that are used to specify channel properties. Thus, in this embodiment, the generated measurement task specification may contain only channel specific configuration information, which may then be applied to any tasks. </paragraph>
<paragraph id="P-0228" lvl="7"><number>&lsqb;0228&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference>&mdash;Channel Configuration: Scaling </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates the selection of a scaling operation to be applied to the selected channel. As <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows, options may be provided for selection of a previously defined scaling operation, or creation of a new custom scaling operation. In this example, a new scaling operation is specified, as shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. </paragraph>
<paragraph id="P-0230" lvl="7"><number>&lsqb;0230&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference>&mdash;Channel Configuration: Custom Scaling </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> illustrates an example custom scaling panel displayed by the GUI in response to the custom scaling selection described above with reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. As <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows, controls may be presented for specifying one or more parameters for a given scaling operation or function. The user may first select a scaling type, such as linear, logarithmic, etc. In response to the selection of the scaling type, controls may be presented for specifying parameter values for the selected scaling type. In this example a linear scaling type has been selected, and so controls for specifying slope and intercept values for the linear scale are displayed. A field is also presented for naming the custom scaling function. In one embodiment, the specified scaling function may be displayed graphically, as shown. </paragraph>
<paragraph id="P-0232" lvl="7"><number>&lsqb;0232&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference>&mdash;Channel Configuration: Pop-up Menu </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> illustrates another approach for configuring channel settings. In this example, the user &ldquo;right-clicks&rdquo; on the selected channel, invoking a pop-up menu of configuration options for the selected channel, including renaming, removal, and hardware association, among others. Thus, the user may configure the channels in a variety of ways. The selection of an option from this menu may generate subsequent controls or panels by which the user may specify the corresponding parameters, examples of which are shown in <cross-reference target="DRAWINGS">FIGS. 23A and 23B</cross-reference>. </paragraph>
<paragraph id="P-0234" lvl="7"><number>&lsqb;0234&rsqb;</number> FIGS. <highlight><bold>23</bold></highlight>A and <highlight><bold>23</bold></highlight>B&mdash;Channel Configuration: Pop-up Panels </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 23A and 23B</cross-reference> illustrate pop-up panels which the GUI may present in response to the menu selections described above with reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. <cross-reference target="DRAWINGS">FIG. 23A</cross-reference> is a pop-up panel for changing the selected channel&apos;s name. <cross-reference target="DRAWINGS">FIG. 23B</cross-reference> is a pop-up panel for changing the hardware terminal association for the selected channel. Thus, the user may easily change substantially any and all parameters associated with a channel. </paragraph>
<paragraph id="P-0236" lvl="7"><number>&lsqb;0236&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference>&mdash;Timing: Advanced View </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> illustrates an &ldquo;advanced view&rdquo; panel for setting timing parameters for the measurement task, as mentioned above with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. In this example, the selection of the advanced view for timing and triggering configuration provides options for timing, triggering, and device settings, selectable by tabs, as shown. Further details of the advanced view triggering and device setting panels are described below with reference to <cross-reference target="DRAWINGS">FIGS. 25 and 26</cross-reference>, respectively. </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows, in this example, the advanced view timing panel presents sampling parameters, as described above with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, as well as additional parameters for clock settings. The clock parameters which may be specified may include the clock type, e.g., external or internal, and the active edge of the clock signal used to time an event, e.g., rising edge or falling edge of the clock signal pulse, among other clock parameters. The clock source may also be specified, as shown. For example, a particular clock device may be selected for provision of clocking signals for the measurement task. </paragraph>
<paragraph id="P-0239" lvl="7"><number>&lsqb;0239&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference>&mdash;Triggering: Advanced View </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> illustrates an &ldquo;advanced view&rdquo; panel for setting triggering parameters for the measurement task, as mentioned above with reference to <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. In this example, the triggering panel may present one or more controls for specifying trigger parameters for the measurement task. In this example, controls for setting start and stop triggering parameters are presented. The start parameters include trigger type, e.g., digital edge, threshold, window, etc., as well as trigger source, and active edge of the trigger pulse. The stop trigger parameters include trigger type, source, condition, and window top and bottom. As <cross-reference target="DRAWINGS">FIG. 25</cross-reference> indicates, the parameter controls displayed may depend upon the trigger type selected, and thus may be context sensitive. For example, the controls presented for the trigger start parameters reflect that the trigger type is &ldquo;digital edge&rdquo;, while those of the trigger stop reflect that the stop trigger type is &ldquo;analog window&rdquo;. In this example, a control is also presented for specifying a number of pre-trigger samples. Pre-trigger samples may be used to capture data prior to the trigger event. </paragraph>
<paragraph id="P-0241" lvl="7"><number>&lsqb;0241&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference>&mdash;Device Settings </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> illustrates one embodiment of a device settings panel, selectable under the advanced view for the timing and triggering panels. This panel may present one or more controls based upon the device selected in the channels configuration panel, described above with reference to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. In other words, parameters specific to the selected device may be configured in this panel. In this example, logic parameters related to the PCI-MIO-16E-1 device are shown, including high/low state levels, idle line state, and idle state pattern. Of course, when other devices are selected, other corresponding parameters and controls may be presented. </paragraph>
<paragraph id="P-0243" lvl="7"><number>&lsqb;0243&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference>-Code Generation </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> As mentioned above, in one embodiment, options may be presented to the user for the programmatic generation of an application program for performing the measurement task. <cross-reference target="DRAWINGS">FIG. 27</cross-reference> illustrates an embodiment where the user may select code generation from a menu. In this example, options are presented for graphical code generation in the form of a block diagram, such as a LabVIEW diagram, and for pseudo code generation, which may include text-based programming code, such as C code or any other text-based code or pseudo code. It should be noted that although in the embodiment shown, the option to generate code is presented by the GUI of the measurement task specifier, other embodiments are also contemplated. For example, in one embodiment, the option to generate code may be presented by an application development environment (ADE), such as National Instruments LabVIEW graphical development environment. Additionally, means other than menus for selection of the code generation option are also contemplated, such as pop-up dialog boxes or menus, and GUI buttons, among others. Further details of the programmatic code generation are given below with reference to FIGS. <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G. </paragraph>
<paragraph id="P-0245" lvl="7"><number>&lsqb;0245&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G&mdash;Code Generation Levels </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>A-<highlight><bold>28</bold></highlight>G illustrate options for selection of code generation levels and examples of generated code for each level. It is noted that the generated graphical program diagrams are intended to be exemplary only, and are not intended to limit the types or form of code generation to any particular type or form. </paragraph>
<paragraph id="P-0247" lvl="7"><number>&lsqb;0247&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference>A&mdash;Code Generation Level Selection </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28A</cross-reference> illustrates one embodiment of an options panel for selection of the code generation level. The code generation level panel may be displayed in response to the user selection of the option for programmatic code generation described above with reference to <cross-reference target="DRAWINGS">FIG. 27</cross-reference>. In this embodiment, the options panel for selection of the code generation level is presented by the GUI of the measurement task specifier. In another embodiment, the option selections for code generation may be presented by an application development environment, e.g., LabVIEW. In yet another embodiment, the selection of code generation level may be inferred automatically, e.g., based on the context from which the measurement task specifier was invoked. For example, where the measurement task specifier is invoked or launched by clicking on a particular node in a block diagram or front panel, the type of node may automatically determine the level of code generation. In another embodiment, where the measurement task specifier is invoked by right-clicking on a node, and selecting from a pop-up menu, the code generation and/or code generation level selection may be invoked in the same manner. </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> In this example, two different levels of code generation are presented: 1) basic, where all the code necessary to perform the specified task from the generated measurement task specification <highlight><bold>740</bold></highlight> is generated and represented by one or more nodes. Examples of basic code generation are shown in FIGS. <highlight><bold>28</bold></highlight>B-<highlight><bold>28</bold></highlight>D, described below; and 2) advanced, where all the code necessary to perform the specified task is generated &ldquo;from scratch&rdquo;, i.e., from the measurement parameters indicated by the user via the measurement task specifier <highlight><bold>730</bold></highlight>, rather than from the generated measurement task specification <highlight><bold>740</bold></highlight>. Examples of advanced code generation are shown in FIGS. <highlight><bold>28</bold></highlight>E-<highlight><bold>28</bold></highlight>G, described below. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> The provision of different levels of code generation may enhance the portability of the final product. For example, the basic level programs may use the measurement task specification <highlight><bold>740</bold></highlight> stored in a library or other storage means (such as MAX <highlight><bold>704</bold></highlight>) to build a run-time <highlight><bold>790</bold></highlight>. An issue with this level of generated code is that in order to run the program on another machine, not only the diagram or VI (the graphical program) is needed, but also the measurement task specification <highlight><bold>740</bold></highlight> that is stored (e.g., in MAX). Thus, the generated graphical program is not a complete exportable program. This is a primary reason for the advanced level of code generation. The advanced level program may actually build up the entire measurement task specification <highlight><bold>740</bold></highlight> &ldquo;from scratch&rdquo; on the user&apos;s diagram, i.e., the program may build the measurement task specification dynamically from the user-indicated parameters. The purpose of this is to show exactly what it takes to build a low level program. Also, because it builds everything from scratch, the program may easily be deployed to another machine, since it does not rely on the task object (the measurement task specification <highlight><bold>740</bold></highlight>) to be present (in MAX). </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> In one embodiment, code may be generated at a simpler level than the &lsquo;basic&rsquo; level described above. At this level, all code for the measurement task is generated into, or represented by, a single &ldquo;wizard-locked&rdquo; node or subVI. The term &ldquo;wizard-locked&rdquo; refers to the fact that whereas a typical graphical program node or subVI may be expanded into a sub-diagram, such as by (double) clicking on the node, a wizard-locked node simply invokes the &ldquo;wizard&rdquo; (in this case, the configuration tool <highlight><bold>730</bold></highlight>), allowing the user to edit the node specifications or functionality without giving the user visual or direct access to the actual diagram. In other words, the actual graphical code is encapsulated by a single node, and the user does not have access to the contents of the node except through the wizard or configuration tool <highlight><bold>730</bold></highlight>. </paragraph>
<paragraph id="P-0252" lvl="7"><number>&lsqb;0252&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>B-<highlight><bold>28</bold></highlight>D&mdash;Basic Code Generation </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>B-<highlight><bold>28</bold></highlight>D are examples of basic code generation for the voltage measurement example described above, according to one embodiment. In <cross-reference target="DRAWINGS">FIG. 28B, a</cross-reference> single sample measurement is coded into a block diagram as a single node which accepts as input the configured measurement task specification <highlight><bold>740</bold></highlight>, here labeled myTask2. <cross-reference target="DRAWINGS">FIG. 28C</cross-reference> illustrates a generated block diagram of the same program, but with N samples (in this case, 100 samples) taken instead of a single sample. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> It should be noted that the single node, in this case a read node, may encapsulate or encode both the conversion of the measurement task specification <highlight><bold>740</bold></highlight> into an executable run-time <highlight><bold>790</bold></highlight>, as described above in steps <highlight><bold>508</bold></highlight> and <highlight><bold>510</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, and the execution of the run-time to perform the specified task. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> In other words, the graphical program may include a node which is configured to receive the measurement task specification as input, i.e., an input terminal of the node may be connected to an output terminal of another node in the graphical program, e.g., a measurement task specification node, which may provide the measurement task specification to the node as input. Upon execution of the graphical program, the node may receive the measurement task specification as input, invoke an expert system to analyze the measurement task specification and generate a run-time specification for the measurement task in response to the analyzing, as shown in <highlight><bold>750</bold></highlight> and <highlight><bold>770</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. The node may then invoke a run-time builder to analyze the run-time specification and generate a run-time based on the run-time specification, as shown in <highlight><bold>780</bold></highlight> and <highlight><bold>790</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. Finally, the node may invoke execution of the run-time to perform the measurement task. Thus, the single node may operate to convert the measurement task specification to an executable run-time, and execute the run-time to perform the specified measurement task. In one embodiment, this single node may be a primitive node provided by a graphical programming development environment for inclusion in the graphical program. </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28D</cross-reference> illustrates a generated block diagram of the same program, but configured for continuous acquisition, i.e., for continuous sampling. In this case, in addition to the read node (embedded in a loop), there are explicit nodes for starting (e.g., a play or start node) and stopping (e.g., a stop node), respectively. In one embodiment, the play node may be or may function as the single node described above. In other words, the play node may receive the measurement task specification <highlight><bold>740</bold></highlight> as input, invoke the expert system <highlight><bold>750</bold></highlight> and run-time builder <highlight><bold>780</bold></highlight>, as described above, thereby generating the run-time <highlight><bold>790</bold></highlight>, and execute the generated run-time to perform the specified measurement task. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 28D</cross-reference> shows, in this example, the play node accepts the task as input, and is further wired to the read node through the loop. The read node is further wired to the stop node. The explicit start and stop nodes may be necessary because of the lack of starting and stopping conditions implicit in the task specification. In other words, the measurement task involves continuous acquisition of data until termination by the user. In the examples of <cross-reference target="DRAWINGS">FIGS. 28B and 28C</cross-reference>, the play node (start) and the stop node may be considered to be implicit in the read node. It is further noted that were the task specified to generate a signal, the read node would be replaced with a write node. As <cross-reference target="DRAWINGS">FIG. 28D</cross-reference> also shows, the number of samples returned by the read node per iteration cycle (of the while loop) is here specified to be 100 samples. In other words, for each cycle of the while loop, the read node may return <highlight><bold>100</bold></highlight> samples to the system. Note than in one embodiment, a play node (and a stop node) may be used when the measurement task does not include continuous acquisition of data. </paragraph>
<paragraph id="P-0258" lvl="7"><number>&lsqb;0258&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>E-<highlight><bold>28</bold></highlight>G&mdash;Advanced Code Generation </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> FIGS. <highlight><bold>28</bold></highlight>E-<highlight><bold>28</bold></highlight>G illustrate programmatically generated code at the advanced level for the voltage measurement task described above, according to one embodiment. As described above with reference to <cross-reference target="DRAWINGS">FIG. 28</cross-reference>A, the code, i.e., the graphical block diagram, generated at the advanced level may include not only all the code necessary to perform the task (as in the basic level), but may include all the necessary program components explicitly. In other words, the fill block diagram for each step or component of the specified measurement task may be included explicitly in the diagram. For example, as described below, the generated graphical program may include configuration components which operate to generate the measurement task specification from the user-supplied parameters. It is noted that advanced code generation may result in extremely large graphical programs or diagrams. The diagram or code generated at the advanced level may be the same as the diagram or code that a user would have to program manually, i.e., without the use of the configuration tool <highlight><bold>730</bold></highlight> (measurement task specifier <highlight><bold>730</bold></highlight>), to perform the specified measurement task. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28E</cross-reference> illustrates a block diagram of the voltage measurement task described above where two channels are used and <highlight><bold>1</bold></highlight> sample is acquired. Note the explicit inclusion of channel, clock, and trigger configuration nodes, in addition to the read node. These configuration nodes are described in more detail below. <cross-reference target="DRAWINGS">FIG. 28F</cross-reference> illustrates a block diagram of the voltage measurement task described above where two channels are used and N samples are taken (here shown as 100 samples). <cross-reference target="DRAWINGS">FIG. 28G</cross-reference> illustrates a block diagram of the voltage measurement task described above where two channels are used to make continuous acquisitions of voltage data. As described above with reference to <cross-reference target="DRAWINGS">FIG. 28</cross-reference>D, continuous acquisition of data involves a loop, as shown, as well as explicit play (start) and stop nodes for beginning and ending the continuous acquisition or sampling. In the advanced code generation programs of FIGS. <highlight><bold>28</bold></highlight>E-<highlight><bold>28</bold></highlight>G, the left-most node is a &ldquo;create task&rdquo; node, which operates to create a measurement task specification container or structure. This container may start out &ldquo;empty&rdquo;, then be incrementally filled or built up by successive configuration nodes of the program, as shown. The top horizontal wire running through all of the nodes leading to the read node represents the measurement task specification&apos;s evolution or build process, and eventual input to the read node. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> Thus, in one embodiment, the single node described above which receives the measurement task specification may be connected or wired to a configuration node, which may in turn be wired to further configuration nodes, and which operates to configure the measurement task specification for input to the node. This is in contrast to the basic code generation where the single node is wired to the measurement task specification node which represents the already generated measurement task specification <highlight><bold>740</bold></highlight>. Thus, the configuration node(s) may operate to generate the measurement task specification <highlight><bold>740</bold></highlight> for input to the single node. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> For example, in FIGS. <highlight><bold>28</bold></highlight>E-<highlight><bold>28</bold></highlight>G, the next two nodes after the create task node are channel configuration nodes. These two nodes may operate to configure two corresponding channels for the voltage measurement by applying the channel parameters received by the task specifier <highlight><bold>730</bold></highlight>. In other words, the two channel nodes may add channel configuration information to the measurement task specification <highlight><bold>740</bold></highlight>. The next node in the succession is a trigger node which may add trigger configuration information to the specification <highlight><bold>740</bold></highlight>. Note that in the diagram of <cross-reference target="DRAWINGS">FIG. 28</cross-reference>E, because this is a one sample measurement, no clock configuration node is necessary. The program block diagrams of <cross-reference target="DRAWINGS">FIGS. 28F and 28G</cross-reference> each include a clock configuration node just subsequent to the trigger configuration node which may add clocking configuration information to the measurement task specification <highlight><bold>740</bold></highlight>. Thus, each successive configuration node may add respective configuration information (based on user input parameters collected or provided by the measurement task specifier <highlight><bold>730</bold></highlight>) to the measurement task specification <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0263" lvl="0"><number>&lsqb;0263&rsqb;</number> Finally, the last configuration node, e.g., the triggering configuration node in <cross-reference target="DRAWINGS">FIG. 28</cross-reference>E, or the clock configuration node of <cross-reference target="DRAWINGS">FIGS. 28F and 28G</cross-reference>, may be wired to the single node, thereby providing the resultant measurement task specification <highlight><bold>740</bold></highlight> as input to the node. Note that this resultant measurement task specification <highlight><bold>740</bold></highlight> is the same as that generated by the measurement task specifier <highlight><bold>730</bold></highlight> and represented by the measurement task specification node of FIGS. <highlight><bold>28</bold></highlight>B-<highlight><bold>28</bold></highlight>D, described above. In this case, however, the specification <highlight><bold>740</bold></highlight> is generated &ldquo;on the fly&rdquo; during execution of the graphical program. </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> Note that in the diagrams of <cross-reference target="DRAWINGS">FIGS. 28E and 28F</cross-reference>, the single node is a read node, for performing the specified finite sampling measuring tasks (i.e., measurements with a defined number of samples). In contrast, in the diagram of <cross-reference target="DRAWINGS">FIG. 28</cross-reference>G, the single node is a play node rather than a read (or write) node because the measurement task is a continuous acquisition measurement which uses a loop. The play node may be connected to a read node for performing a measurement, and/or a write node for performing signal generation. Note than in this case, a stop node is also included in the diagram for terminating the continuous acquisition task. Thus, the graphical program may include a stop node connected to a read node and/or a write node for terminating a continuous measurement or generation task. </paragraph>
<paragraph id="P-0265" lvl="7"><number>&lsqb;0265&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference>&mdash;Complex Measurement Tasks </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> In one embodiment, the configuration tool <highlight><bold>730</bold></highlight> may allow the specification of multiple measurement types in a single measurement task, subject to feasibility. For example, a measurement task may include measuring both temperature and pressure, or temperature and voltage. As another example, in a testing application, the measurement task may include both the generation of a signal for stimulation of a device, and measurement of the voltage response of the device. Thus, the measurement task may include one or more measurements, and/or one or more signal generations. <cross-reference target="DRAWINGS">FIG. 29</cross-reference> illustrates an embodiment of the configuration tool which includes a measurements control (in this case a ring control) which indicates the particular measurement (type) currently being configured. For example, assume that a temperature measurement has already been specified or configured by the user, and now the user is in the process of specifying a voltage measurement. The ring control therefore displays the current (voltage) measurement type. In one embodiment, the user may access the control, and select any previously specified measurement of the task, such as the mentioned temperature measurement, and edit parameters for that aspect of the task. Thus, the various different measurement types included in the measurement task may be considered sub-tasks in the overall measurement task. </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> In one embodiment, the measurement task may include a complex measurement operation using a plurality of measurement devices, where at least one of the measurement devices is a measurement hardware device. In another embodiment, at least one of the plurality of measurement devices may be a virtual measurement device, i.e., a device implemented in software. </paragraph>
<paragraph id="P-0268" lvl="7"><number>&lsqb;0268&rsqb;</number> Example Virtual Instrument Diagrams </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 30A, 30B</cross-reference>, <highlight><bold>31</bold></highlight>A and <highlight><bold>31</bold></highlight>B illustrate various improvements of the present invention over some prior art systems. For illustrative purposes, Virtual Instruments (VIs) implemented in National Instruments LabVIEW&trade; graphical development environment are shown which use a variety of measurement devices, such as National Instruments E-Series&trade; Data Acquisition (DAQ) devices, to implement various measurement tasks. It should be noted that these embodiments are for illustrative purposes only, and are not intended to limit the invention to any particular implementations or types of measurement devices. </paragraph>
<paragraph id="P-0270" lvl="7"><number>&lsqb;0270&rsqb;</number> FIGS. <highlight><bold>30</bold></highlight>A-<highlight><bold>30</bold></highlight>B&mdash;Comparison of Generated Code to Prior Art Code </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 30A and 30B</cross-reference> illustrate differences between a graphical program block diagram generated by the configuration tool <highlight><bold>730</bold></highlight> for the voltage measurement task described above and a graphical program block diagram programmed manually by the user for the same voltage measurement task. <cross-reference target="DRAWINGS">FIG. 30A</cross-reference> illustrates the manually produced (prior art) diagram. As <cross-reference target="DRAWINGS">FIG. 30A</cross-reference> shows, each aspect of the measurement task is explicitly included in the diagram, including channel, timing, and triggering configuration. In contrast, <cross-reference target="DRAWINGS">FIG. 30B</cross-reference> illustrates an example of the block diagram for performing the same measurement task as generated by the configuration tool <highlight><bold>730</bold></highlight> (i.e., the measurement task specifier <highlight><bold>730</bold></highlight>). As <cross-reference target="DRAWINGS">FIG. 30B</cross-reference> shows, the complexities of the block diagram of <cross-reference target="DRAWINGS">FIG. 30A</cross-reference> have been reduced to a single node, the read node, which is wired to the task specification (myTask) <highlight><bold>740</bold></highlight> for input. As described above, because this task does not involve continuous acquisition, the play (start) node and stop nodes are implicit in the read node. </paragraph>
<paragraph id="P-0272" lvl="7"><number>&lsqb;0272&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>A&mdash;Acquisition of N Scans with External Scan Clock and Digital Trigger (Prior Art) </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31A</cross-reference> illustrates a VI for acquisition of N scans with an external scan clock and digital trigger, according to the prior art. As <cross-reference target="DRAWINGS">FIG. 31A</cross-reference> shows, there are a number of configuration sub-VIs scattered throughout the diagram, including clock configuration, trigger configuration, and analog input (Al) configuration. These configuration details add expense to the coding, debugging, and testing cycles, and may intimidate some customers. </paragraph>
<paragraph id="P-0274" lvl="7"><number>&lsqb;0274&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>B&mdash;Acquisition of N Scans with External Scan Clock and Digital Trigger </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31B</cross-reference> illustrates a VI for acquisition of N scans with an external scan clock and digital trigger, according to one embodiment of the present invention. In one embodiment, the VI illustrated in <cross-reference target="DRAWINGS">FIG. 31B</cross-reference> may be generated using the measurement task configuration tool <highlight><bold>730</bold></highlight>, described above. As <cross-reference target="DRAWINGS">FIG. 31B</cross-reference> shows, the specified VI is radically simpler than the prior art diagram of <cross-reference target="DRAWINGS">FIG. 31A</cross-reference>. Benefits of such simplification may include reduction in expense of the code, debug, and test cycles of software development. Additionally, the removal of configuration clutter from the diagrams may encourage so-called &ldquo;tinkerer&rdquo; customers to more boldly explore and define measurement operations for a variety of applications. </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> As FIGS. <highlight><bold>30</bold></highlight>A-<highlight><bold>31</bold></highlight>B illustrate, the use of the measurement task specifier <highlight><bold>730</bold></highlight> to generate programs for perform measurement tasks may greatly simplify not only the specification of the task, but the resulting application programs, as well. Thus, the use of the measurement task specifier <highlight><bold>730</bold></highlight> may reduce the effort required of a user to specify, create, and maintain programs for performing desired measurement tasks, and may increase the usability of measurement systems. </paragraph>
<paragraph id="P-0277" lvl="7"><number>&lsqb;0277&rsqb;</number> FIGS. <highlight><bold>32</bold></highlight>A and <highlight><bold>32</bold></highlight>B&mdash;Testing the Configured Task </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> In one embodiment, the measurement task specifier may provide the ability to test the current configuration settings. <cross-reference target="DRAWINGS">FIGS. 32A and 32B</cross-reference> are example screen shots illustrating the testing of the configured task, according to one embodiment. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> In one embodiment, one or more test panels may be displayed in response to user input, e.g., when the user presses the &ldquo;run&rdquo; button. These test panels may be unique to the current measurement type, or, in other embodiments, may be common across multiple measurement types. In one embodiment, as shown by <cross-reference target="DRAWINGS">FIGS. 32A and 32B</cross-reference>, the user may be presented with the ability to run and stop the task. In the case of an input task, the user may see a graph of the acquired data, as shown in the Analog Input Test Panel of <cross-reference target="DRAWINGS">FIG. 32A</cross-reference>. In the case of an output task, the user may be presented with the option to generate sample data to output, as shown in the Analog Output Test Panel of <cross-reference target="DRAWINGS">FIG. 32B</cross-reference>. Such sample data may include Sine, Triangle, Square, and Sawtooth waveforms, among others. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> It should be noted that the examples presented in <cross-reference target="DRAWINGS">FIGS. 32A and 32B</cross-reference> are meant to be illustrative only, and are not intended to limit the form or capabilities of the testing capabilities to any particular architecture or feature set. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> It should be noted that various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon a carrier medium. Generally speaking, a carrier medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and/or a wireless link. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> Although the system and method of the present invention have been described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents as may be reasonably included within the spirit and scope of the invention as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer-implemented method for generating a measurement task specification for performing a measurement task, the method comprising: 
<claim-text>displaying a graphical user interface (GUI) which presents information for guiding the user in specifying a measurement task; </claim-text>
<claim-text>receiving user input to the graphical user interface characterizing the measurement task, wherein the user input indicates parameter values for a plurality of parameters of the measurement task; </claim-text>
<claim-text>storing the parameter values in a memory; </claim-text>
<claim-text>analyzing the parameter values; and </claim-text>
<claim-text>generating a measurement task specification in response to said analyzing; </claim-text>
<claim-text>wherein said measurement task specification is useable to produce a program which implements the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the plurality of parameters of the measurement task comprise five or more of measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein said displaying the graphical user interface comprises displaying a plurality of panels which guide the user in specifying the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels comprises: 
<claim-text>displaying a first panel, wherein the first panel presents options for specifying values of a first parameter of the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input to the first panel, wherein said first user input indicates a value of the first parameter; and </claim-text>
</claim-text>
<claim-text>wherein said displaying a plurality of panels further comprises: 
<claim-text>displaying a second panel, wherein the second panel presents information based on said indicated value of the first parameter. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said options comprise a default value for the first parameter of the measurement task, and wherein said receiving first user input to the first panel comprises one of: 
<claim-text>receiving first user input overriding said default value with said value; and </claim-text>
<claim-text>receiving first user input indicating acceptance of said default parameter value as said value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said information indicates a second parameter of the measurement task; and wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input to the second panel indicating a value of said second parameter of the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said information comprises a default value for the second parameter of the measurement task, and wherein said receiving second user input to the second panel comprises one of: 
<claim-text>receiving second user input overriding said default value of said second parameter with said value of said second parameter; and </claim-text>
<claim-text>receiving second user input indicating acceptance of said default parameter value of said second parameter as said value of said second parameter. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels comprises: 
<claim-text>displaying a first panel, wherein the first panel presents a list of measurement types for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving first user input to the first panel, wherein said first user input indicates a measurement type for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, 
<claim-text>wherein displaying a plurality of panels further comprises: 
<claim-text>displaying a second panel in response to said first user input, wherein the second panel presents a list of available devices and corresponding channels, and wherein said available devices correspond to said indicated measurement type; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input to the second panel, wherein said second user input indicates one or more channels for a device from said list of available devices and corresponding channels, and wherein each of the one or more channels corresponds to a terminal of said device. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, 
<claim-text>wherein displaying a plurality of panels further comprises: 
<claim-text>displaying a third panel in response to said second user input, wherein the third panel presents options for specifying values of one or more parameters for said indicated one or more channels; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving third user input to the third panel, wherein said third user input indicates values of said one or more parameters for said indicated one or more channels. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, 
<claim-text>wherein displaying a plurality of panels further comprises: 
<claim-text>displaying two or more panel selection controls, wherein each of the two or more panel selection controls corresponds to a respective panel for specifying values of one or more parameters for said indicated one or more channels; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving user selection input to one of said two or more panel selection controls; </claim-text>
</claim-text>
<claim-text>wherein displaying a plurality of panels further comprises: 
<claim-text>displaying the respective panel corresponding to said selected panel selection control, wherein said respective panel presents options for specifying values of said one or more parameters for said indicated one or more channels; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving third user input to the respective panel, wherein said third user input indicates values of said one or more parameters for said indicated one or more channels. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight> The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels further comprises: 
<claim-text>displaying a device settings panel, wherein the device settings panel presents one or more device settings parameters for the measurement task, and wherein said device settings parameters correspond to said device; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving user input to the device settings panel, wherein said user input to the device settings panel indicates values for said one or more device settings parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels comprises: 
<claim-text>displaying a timing panel, wherein the timing panel presents one or more timing parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving user input to the timing panel, wherein said user input to the timing panel indicates values for said one or more timing parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels comprises: 
<claim-text>displaying a triggering panel, wherein the triggering panel presents one or more triggering parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving first user input to the triggering panel, wherein said user input to the triggering panel indicates values for said one or more triggering parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of panels comprises: 
<claim-text>displaying a help panel, wherein the help panel presents context sensitive information related to other panels of the plurality of panels, and wherein said presented information is based on which of the other panels are currently displayed. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, 
<claim-text>wherein said displaying the graphical user interface further comprises presenting an option to programmatically generate a program implementing the specified measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, 
<claim-text>wherein said programmatically generated program comprises a graphical program; and </claim-text>
<claim-text>wherein said displaying a plurality of panels comprises displaying a program panel comprising a block diagram of the graphical program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface comprises: 
<claim-text>displaying a plurality of GUI elements, wherein each of at least a subset of the plurality of GUI elements presents one or more parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>at least one of said plurality of GUI elements receiving user input specifying respective values for said one or more parameters. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, 
<claim-text>wherein at least one of said subset of the plurality of GUI elements includes respective default values for said one or more parameters; and </claim-text>
<claim-text>wherein said receiving user input specifying respective values for said one or more parameters comprises one of: 
<claim-text>receiving user input overriding one or more of said respective default values with one or more of said specified values; and </claim-text>
<claim-text>receiving user input indicating acceptance of one or more of said respective default values as one or more of said specified values. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface comprises: 
<claim-text>displaying context sensitive help information, wherein the context sensitive help information displayed is based on which of the plurality of GUI elements are currently displayed. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a first GUI element indicating first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input to the first GUI element indicating values for said first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said displaying a plurality of GUI elements further comprises: 
<claim-text>displaying a second GUI element in response to said first user input, wherein said second GUI element indicates second one or more other parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input to the second GUI element indicating values for said second one or more other parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a list of measurement types for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input indicating a measurement type from said list of measurement types. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the list of measurement types comprises one or more of: acceleration, current, frequency, resistance, strain, voltage, and temperature. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying a list of available devices and corresponding channels in response to said first user input, wherein said available devices correspond to said indicated measurement type; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input indicating one or more channels for a device from said list of available devices and corresponding channels, wherein each of the one or more channels corresponds to a terminal of said device. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying one or more GUI elements for specifying values of one or more parameters for said indicated one or more channels; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving third user input to said one or more GUI elements indicating values of said one or more parameters for said indicated one or more channels. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying two or more selection GUI elements, wherein each of the two or more selection GUI elements corresponds to a respective set of one or more GUI elements for specifying values of one or more parameters for said indicated one or more channels; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving user selection input to one of said two or more selection GUI elements; </claim-text>
</claim-text>
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying the respective set of GUI elements corresponding to said selected selection GUI element, wherein said respective set of GUI elements is useable for specifying values of said one or more parameters for said indicated one or more channels; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving third user input to the respective set of GUI elements, wherein said third user input indicates values of said one or more parameters for said indicated one or more channels. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying one or more device settings GUI elements for specifying one or more device settings parameters for the measurement task, and wherein said device settings parameters correspond to said device; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving third user input to the one or more device settings GUI elements, wherein said third user input indicates values for said one or more device settings parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying one or more timing GUI elements, wherein the one or more timing GUI elements present one or more timing parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving user input to the one or more timing GUI elements indicating values for said one or more timing parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface further comprises: 
<claim-text>displaying one or more triggering GUI elements, wherein the one or more triggering GUI elements present one or more triggering parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to said graphical user interface comprises: 
<claim-text>receiving user input to the one or more triggering GUI elements indicating values for said one or more triggering parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein said displaying the graphical user interface further comprises: 
<claim-text>presenting an option to programmatically generate a program implementing the specified measurement task; </claim-text>
</claim-text>
<claim-text>wherein the method further comprises: 
<claim-text>receiving user input selecting said option; and </claim-text>
<claim-text>programmatically generating the program in response to said selecting, wherein said program is executable to perform the specified measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>programmatically generating the program based on the parameter values, wherein the program is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, 
<claim-text>wherein said programmatically generated program comprises a graphical program; and </claim-text>
<claim-text>wherein said displaying the graphical user interface further comprises displaying a block diagram of the graphical program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, 
<claim-text>wherein said graphical program comprises a LabVIEW graphical program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein said programmatically generating the program based on the parameter values comprises: 
<claim-text>an expert system analyzing the measurement task specification, and generating a run-time specification for the measurement task in response to said analyzing; and </claim-text>
<claim-text>a run-time builder analyzing the run-time specification, and generating a run-time based on the run-time specification, wherein said run-time is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein said expert system analyzing the measurement task specification, and generating a run-time specification further comprises: 
<claim-text>the expert system validating the measurement task specification prior to said generating the run-time specification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein said run-time builder analyzing the run-time specification, and generating a run-time programmatically further comprises: 
<claim-text>the run-time builder configuring one or more measurement devices according to the run-time specification, wherein said run-time is executable to perform the measurement task using the configured one or more measurement devices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the measurement task comprises one or more of: 
<claim-text>one or more measurements; and </claim-text>
<claim-text>one or more signal generations. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the measurement task comprises a complex measurement operation using a plurality of measurement devices, wherein at least one of the plurality of measurement devices comprises a measurement hardware device. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the measurement task comprises a complex measurement operation using a plurality of measurement devices, wherein at least one of the plurality of measurement devices comprises a virtual measurement device. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein said measurement task specification comprises configuration information for one or more measurement devices; and </claim-text>
<claim-text>wherein, after being configured with said configuration information, the one or more measurement devices are operable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A system for generating a measurement task specification for performing a measurement task, the system comprising: 
<claim-text>a processor; and </claim-text>
<claim-text>a memory medium coupled to the processor, wherein the memory medium stores one or more programs which are executable to perform: 
<claim-text>displaying a graphical user interface (GUI) which presents information for guiding the user in specifying a measurement task; </claim-text>
<claim-text>receiving user input to the graphical user interface characterizing the measurement task, wherein the user input indicates parameter values for the measurement task; </claim-text>
<claim-text>storing the parameter values in a memory; </claim-text>
<claim-text>analyzing the parameter values; and </claim-text>
<claim-text>generating a measurement task specification in response to said analyzing; </claim-text>
</claim-text>
<claim-text>wherein said measurement task specification is useable to produce a program which implements the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the parameter values of the measurement task comprise five or more of measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface comprises: 
<claim-text>displaying a plurality of GUI elements, wherein each of the plurality of GUI elements presents one or more parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving user input to at least one of said one or more GUI elements specifying a value for at least one of said one or more parameters. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 43</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a first GUI element indicating first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input indicating values for said first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said displaying a plurality of GUI elements further comprises: 
<claim-text>displaying a second GUI element in response to said first user input, wherein said second GUI element indicates second one or more other parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input indicating values for said second one or more other parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a plurality of panels which guide the user in specifying the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said one or more programs are further executable to perform: 
<claim-text>programmatically generating the program based on the parameter values, wherein the program is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A carrier medium which stores program instructions, wherein said program instructions are executable to perform: 
<claim-text>displaying a graphical user interface (GUI) which presents information for guiding the user in specifying a measurement task; </claim-text>
<claim-text>receiving user input to the graphical user interface characterizing the measurement task, wherein the user input indicates parameter values for the measurement task; </claim-text>
<claim-text>storing the parameter values in a memory; </claim-text>
<claim-text>analyzing the parameter values; and </claim-text>
<claim-text>generating a measurement task specification in response to said analyzing; </claim-text>
<claim-text>wherein said measurement task specification is useable to produce a program which implements the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein the parameter values of the measurement task comprise five or more of measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface comprises: 
<claim-text>displaying a plurality of GUI elements, wherein each of the plurality of GUI elements presents one or more parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving user input to at least one of said one or more GUI elements specifying a value for at least one of said one or more parameters. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 49</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a first GUI element indicating first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input indicating values for said first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said displaying a plurality of GUI elements further comprises: 
<claim-text>displaying a second GUI element in response to said first user input, wherein said second GUI element indicates second one or more other parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input indicating values for said second one or more other parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a plurality of panels which guide the user in specifying the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference>, wherein said program instructions are further executable to perform: 
<claim-text>programmatically generating the program based on the parameter values, wherein the program is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. A system for generating a measurement task specification for performing a measurement task, the system comprising: 
<claim-text>means for displaying a graphical user interface (GUI) which presents information for guiding the user in specifying a measurement task; </claim-text>
<claim-text>means for receiving user input to the graphical user interface characterizing the measurement task, wherein the user input indicates parameter values for the measurement task; </claim-text>
<claim-text>means for storing the parameter values in a memory; </claim-text>
<claim-text>means for analyzing the parameter values; and </claim-text>
<claim-text>means for generating a measurement task specification in response to said analyzing; </claim-text>
<claim-text>wherein said measurement task specification is useable to produce a program which implements the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 53</dependent-claim-reference>, wherein the parameter values of the measurement task comprise five or more of measurement type, device type, channel parameters, sampling parameters, trigger parameters, clock parameters, scaling parameters, synchronization parameters, routing parameters, and data publishing parameters. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 53</dependent-claim-reference>, 
<claim-text>wherein said displaying a graphical user interface comprises: 
<claim-text>displaying a plurality of GUI elements, wherein each of the plurality of GUI elements presents one or more parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving user input to at least one of said one or more GUI elements specifying a value for at least one of said one or more parameters. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a first GUI element indicating first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface comprises: 
<claim-text>receiving first user input indicating values for said first one or more parameters for the measurement task; </claim-text>
</claim-text>
<claim-text>wherein said displaying a plurality of GUI elements further comprises: 
<claim-text>displaying a second GUI element in response to said first user input, wherein said second GUI element indicates second one or more other parameters for the measurement task; and </claim-text>
</claim-text>
<claim-text>wherein said receiving user input to the graphical user interface further comprises: 
<claim-text>receiving second user input indicating values for said second one or more other parameters for the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 53</dependent-claim-reference>, 
<claim-text>wherein said displaying a plurality of GUI elements comprises: 
<claim-text>displaying a plurality of panels which guide the user in specifying the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 53</dependent-claim-reference>, further comprising: 
<claim-text>means for programmatically generating the program based on the parameter values, wherein the program is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. A method for specifying a program for performing a measurement task, the method comprising: 
<claim-text>displaying a graphical user interface which presents information for guiding the user in specifying a measurement task; </claim-text>
<claim-text>receiving user input to a graphical user interface characterizing the measurement task, wherein the user input comprises parameter values for the measurement task; and </claim-text>
<claim-text>storing the parameter values in a memory; </claim-text>
<claim-text>wherein the parameter values are useable to produce the program, wherein the program is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. A method for generating information specifying a measurement task, the method comprising: 
<claim-text>displaying a plurality of panels which guide the user in providing the information specifying the measurement task </claim-text>
<claim-text>receiving user input to a graphical user interface characterizing a measurement task, wherein said user input overrides one or more default configuration parameter values for said measurement task; </claim-text>
<claim-text>analyzing said user input; and </claim-text>
<claim-text>generating a measurement task specification in response to said analyzing; </claim-text>
<claim-text>wherein said measurement task specification is useable to produce a measurement task run-time program which is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The method of claim <highlight><bold>60</bold></highlight>, wherein said displaying the plurality of panels comprises displaying a first panel which lists available measurement types; and 
<claim-text>wherein said receiving user input to a graphical user interface comprises receiving first user input indicating a measurement type from said available measurement types.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001896A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001896A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001896A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001896A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001896A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001896A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001896A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001896A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001896A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001896A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001896A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001896A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001896A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030001896A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030001896A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030001896A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030001896A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030001896A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030001896A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030001896A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030001896A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030001896A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030001896A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030001896A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030001896A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030001896A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030001896A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030001896A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030001896A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030001896A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00030">
<image id="EMI-D00030" file="US20030001896A1-20030102-D00030.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00031">
<image id="EMI-D00031" file="US20030001896A1-20030102-D00031.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00032">
<image id="EMI-D00032" file="US20030001896A1-20030102-D00032.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00033">
<image id="EMI-D00033" file="US20030001896A1-20030102-D00033.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00034">
<image id="EMI-D00034" file="US20030001896A1-20030102-D00034.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00035">
<image id="EMI-D00035" file="US20030001896A1-20030102-D00035.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00036">
<image id="EMI-D00036" file="US20030001896A1-20030102-D00036.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00037">
<image id="EMI-D00037" file="US20030001896A1-20030102-D00037.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00038">
<image id="EMI-D00038" file="US20030001896A1-20030102-D00038.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00039">
<image id="EMI-D00039" file="US20030001896A1-20030102-D00039.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00040">
<image id="EMI-D00040" file="US20030001896A1-20030102-D00040.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00041">
<image id="EMI-D00041" file="US20030001896A1-20030102-D00041.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00042">
<image id="EMI-D00042" file="US20030001896A1-20030102-D00042.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00043">
<image id="EMI-D00043" file="US20030001896A1-20030102-D00043.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00044">
<image id="EMI-D00044" file="US20030001896A1-20030102-D00044.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00045">
<image id="EMI-D00045" file="US20030001896A1-20030102-D00045.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00046">
<image id="EMI-D00046" file="US20030001896A1-20030102-D00046.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
