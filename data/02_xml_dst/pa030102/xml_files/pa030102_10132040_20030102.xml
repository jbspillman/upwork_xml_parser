<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005396A1-20030102-D00000.TIF SYSTEM "US20030005396A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00001.TIF SYSTEM "US20030005396A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00002.TIF SYSTEM "US20030005396A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00003.TIF SYSTEM "US20030005396A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00004.TIF SYSTEM "US20030005396A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00005.TIF SYSTEM "US20030005396A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00006.TIF SYSTEM "US20030005396A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00007.TIF SYSTEM "US20030005396A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00008.TIF SYSTEM "US20030005396A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00009.TIF SYSTEM "US20030005396A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00010.TIF SYSTEM "US20030005396A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00011.TIF SYSTEM "US20030005396A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00012.TIF SYSTEM "US20030005396A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00013.TIF SYSTEM "US20030005396A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00014.TIF SYSTEM "US20030005396A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00015.TIF SYSTEM "US20030005396A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00016.TIF SYSTEM "US20030005396A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00017.TIF SYSTEM "US20030005396A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00018.TIF SYSTEM "US20030005396A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00019.TIF SYSTEM "US20030005396A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00020.TIF SYSTEM "US20030005396A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00021.TIF SYSTEM "US20030005396A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00022.TIF SYSTEM "US20030005396A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005396A1-20030102-D00023.TIF SYSTEM "US20030005396A1-20030102-D00023.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005396</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10132040</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020424</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>716</class>
<subclass>005000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Phase and generator based SOC design and/or verification</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60298751</doc-number>
<document-date>20010616</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60298771</doc-number>
<document-date>20010616</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60298772</doc-number>
<document-date>20010616</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Michael</given-name>
<middle-name>Y.</middle-name>
<family-name>Chen</family-name>
</name>
<residence>
<residence-us>
<city>Lake Oswego</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Michael</given-name>
<middle-name>C.</middle-name>
<family-name>Brouhard</family-name>
</name>
<residence>
<residence-us>
<city>Lake Oswego</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>John</given-name>
<family-name>Wilson</family-name>
</name>
<residence>
<residence-non-us>
<city>Wokingham</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>SCHWABE, WILLIAMSON &amp; WYATT, P.C.</name-1>
<name-2></name-2>
<address>
<address-1>10260 SW GREENBURG ROAD</address-1>
<address-2>SUITE 820</address-2>
<city>PORTLAND</city>
<state>OR</state>
<postalcode>97223</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An EDA tool suite is equipped with the ability to responsively invoke a chain of one or more generators corresponding to one or more phases of a design/verification process to process design information of IP blocks forming a SOC design to transform the design information, as a result of each invocation, from one state to another state. In one embodiment, the phases may be one or more of a design generation phase, a simulation hardware logic generation phase, an embedded/diagnostic software generation phase, and a verification environment configuration script generation phase. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention claims priority to provisional applications Nos. 60/298,751, 60/298,771, 60,298,772, entitled &ldquo;Platform Based Design&rdquo;, &ldquo;Quick Connect&rdquo;, and &ldquo;Generator&rdquo; respectively, filed on Jun. 16, 2001. The corresponding specifications are hereby fully incorporated by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to the field of electronic data processing and electronic design automation (EDA). More specifically, the present invention is related to EDA tools and methodologies associated with design of systems on chip (SOC), and their verification. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Continued advances in integrated circuit (IC) technology have brought about a tremendous increase in useable space on an IC. In order to fully utilize this space, while keeping costs down, the required per capita output for a given designer on a design team has increased dramatically. As designers&apos; output progressed from the 10s of gates per day in the 1980s to the 100s of gates per day in the 1990s, several technologies such as synthesis facilitated this growth in productivity. By designing at a hardware description language level instead of a gate level, designers were able to increase productivity to maintain utilization of the increase in available gate capacity. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a typical prior art high-level design process for integrated circuit design. The architecture of an Application Specific Integrated Circuit (ASIC) <highlight><bold>110</bold></highlight> is determined. From this architecture, a Register Transfer Level (RTL) <highlight><bold>120</bold></highlight> module of the design is developed. Concurrent with the RTL design, test vectors <highlight><bold>130</bold></highlight> are developed from the architecture to provide the designer with the ability to verify the functionality of the RTL model through RTL verification <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Advances in IC technology are expected to continue, resulting in further growth in the number of gates includable in an IC. Future designs will grow to require that designers&apos; productivity to reach the millions of gates per day in the not too distant future. Increasingly, designers are putting an entire system in an IC, known as system on chip or SOC. The concept of re-useable intellectual property (IP) or components has emerged to facilitate designers in designing SOC, using existing IP (components) for the &ldquo;standard&rdquo; function blocks (such as the compute core, the system bus, memory and the like). However, while various disjointed design automation tools are available to assist the designers, in general, the design process for designing a SOC has remained a very labor intensive effort, requiring a designer to undertake many of the integration tasks to put together a SOC. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Recently, a number of semiconductor manufacturers, such as Oki Semiconductor of Sunnyvale, Calif., Altera of San Jose, Calif., and ARM of Cambridge, United Kingdom, have introduced or announced the intention to introduce additional tools to further assist designers of SOC. However, it is apparent that the current paradigm for designing a SOC remains insufficient to allow design teams to operate at that required level of productivity for future SOC designs. As a result, an improved, more automated and more efficient SOC design process is desired.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>GLOSSARY</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="42PT" align="left"/>
<colspec colname="2" colwidth="154PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>API</entry>
<entry>Application Programming Interface</entry>
</row>
<row>
<entry></entry>
<entry>ASIC</entry>
<entry>Application Specific Integrated Circuit</entry>
</row>
<row>
<entry></entry>
<entry>EDA</entry>
<entry>Electronic Design Automation</entry>
</row>
<row>
<entry></entry>
<entry>GUI</entry>
<entry>Graphical User Interface</entry>
</row>
<row>
<entry></entry>
<entry>HDL</entry>
<entry>Hardware Description Language</entry>
</row>
<row>
<entry></entry>
<entry>HTML</entry>
<entry>Hypertext Markup Language</entry>
</row>
<row>
<entry></entry>
<entry>IC</entry>
<entry>Integrated Circuit</entry>
</row>
<row>
<entry></entry>
<entry>IP</entry>
<entry>Intellectual Property, re-useable components</entry>
</row>
<row>
<entry></entry>
<entry>PBSD</entry>
<entry>Platform Based SOC Design</entry>
</row>
<row>
<entry></entry>
<entry>SOC</entry>
<entry>System on Chip</entry>
</row>
<row>
<entry></entry>
<entry>XML</entry>
<entry>Extended Mark Up Language</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The terms &ldquo;customization&rdquo; and &ldquo;configuration&rdquo; as used herein are generally interchangeable. Each term may include the conventional meaning of the other, unless the context of the usage dictates otherwise. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The term &ldquo;bus&rdquo; as used herein refers to a collection of signals that implement a data transfer and/or control protocol, and/or &ldquo;wires&rdquo; over which the collection of signals are transferred. These signals may include interrupt signals. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The terms &ldquo;masters&rdquo; or &ldquo;master devices&rdquo; refer to devices connected to a bus that can initiate a data/control operation; and the terms &ldquo;slaves&rdquo; or &ldquo;slave devices&rdquo; refer to devices connected to a bus that can only respond to data/control operations. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The term &ldquo;generator&rdquo; as used herein refers to a collection of programming instructions that take a collection of design information of a SOC as input, process the design information, and output the design information of the SOC in a transformed and/or expanded state to further the design and/or verification of the design of the SOC. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The terms &ldquo;verification&rdquo; and &ldquo;debugging&rdquo; (in the enumerated as well as related forms) as used herein are generally interchangeable. Each term may include the conventional meaning of the other, unless the context of the usage dictates otherwise.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates prior art integrated circuit design paradigm. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an overview of the present invention, including IP packages and a PBSD EDA tool suite incorporated with the teachings of the present invention, in accordance with one embodiment. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>illustrate PBSD, including a base and at least two peripheral layers, in further details, in accordance with one embodiment. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>-<highlight><bold>6</bold></highlight> illustrate the GUI of PBSD EDA Tool Suite for selecting and configuring the compute engine of the base layer, in accordance with one embodiment. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>9</bold></highlight> illustrate the GUI of PBSD EDA Tool Suite for selecting and configuring compatible peripherals of the peripheral layers, in accordance with one embodiment. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> FIGS. <highlight><bold>10</bold></highlight>-<highlight><bold>11</bold></highlight> illustrate the GUI of PBSD EDA Tool Suite for generating the formed SOC design and/or configuring one or more verification environments, in accordance with one embodiment. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>12</bold></highlight><highlight><italic>b </italic></highlight>illustrate an IP package description in further detail, in accordance with one embodiment. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates the operational flow of the relevant aspects of the IP package processor of PBSD EDA Tool Suite, in accordance with one embodiment. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 14</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>illustrate a database organization suitable for use to practice the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates the operational flow of the relevant aspect of the logic in support of the GUI of PBSD EDA Tool Suite of the present invention, in accordance with one embodiment. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates a data structure suitable for use to store control information associated with a SOC design being formed. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates the operational flow of the relevant aspect of the design and/or verification environment configuration script generation of the present invention, through a chain of generators, in accordance with one embodiment. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> illustrates the operational flow of the relevant aspect of a typical generator of the present invention, in accordance with one embodiment. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates a computing system suitable for practicing the present invention, in accordance with one embodiment. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> illustrates a network view of a remote method for practicing the present invention, in accordance with one embodiment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The present invention includes a novel architecture in constituting IP packages, and enhanced functions provided to a EDA tool suite to facilitate a designer in designing and/or verifying SOC, using IP provided by a multitude of vendors, in a more efficient manner. These enhanced functions include, but are but not limited to, the ability to decode bus descriptions of IP packages to facilitate expanded provision of IP available for selection, the ability to decode customizable attribute description and automatically facilitate collection customization inputs for these attributes, and the ability to control selective generation of various design and related files, such as verification environment configuration script files. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In the description to follow, various aspects of the present invention will be described. For purposes of explanation; specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, the present invention may be practiced without some of these details. Similarly, the use of section headings is merely to assist in the understanding of the present invention. They are not to be construed as imposing any particular organization limitations on the present invention. In some instances, well-known features are omitted or simplified in order not to obscure the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Various operations will be described as multiple discrete steps, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation. Further, the description repeatedly uses the phrase &ldquo;in one embodiment&rdquo;, which ordinarily does not refer to the same embodiment, although it may. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Overview </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Referring first to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, wherein a block diagram illustrating an overview of the present invention, in accordance with one embodiment, is shown. As illustrated, the present invention includes IP packages <highlight><bold>206</bold></highlight> constituted in accordance with the teachings of the present invention, and PBSD EDA Tool Suite <highlight><bold>204</bold></highlight> incorporated with functions and elements provided in accordance with the teachings of the present invention, to enable designers <highlight><bold>202</bold></highlight> to efficiently select and employ the IP of IP packages <highlight><bold>206</bold></highlight> to form SOC designs <highlight><bold>208</bold></highlight>, and/or to verify SOC designs <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> As will be readily apparent from the description to follow, the present invention advantageously alleviates both the IP providers and designers <highlight><bold>202</bold></highlight> from much of the integration tasks, thereby expanding the IP available for selection and usage by designers <highlight><bold>202</bold></highlight>, as well as improving the productivity of both the IP providers and designers <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As illustrated, for the embodiment, IP package <highlight><bold>206</bold></highlight> includes package description <highlight><bold>210</bold></highlight> and its constituting parts <highlight><bold>220</bold></highlight> (or pointers/links to these parts <highlight><bold>220</bold></highlight>). Package description <highlight><bold>210</bold></highlight> includes basic description <highlight><bold>212</bold></highlight> providing basic information about the IP. Examples of basic information include but are not limited to the vendor identifier, the version level of the IP and so forth. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Further, package description <highlight><bold>210</bold></highlight> includes pins and bus related descriptions <highlight><bold>214</bold></highlight> (also referred to as connectivity information) providing physical and logical pin descriptions as well as bus implementation and decoding information to PBSD EDA Tool Suite <highlight><bold>204</bold></highlight>, to enable Tool Suite <highlight><bold>204</bold></highlight> to discern bus compatibility and connectivity for the IP. Physical pin descriptions describe the physical pins of the IP, whereas bus implementation information describes implemented bus signals of known bus or bus standards. Logical pin descriptions describe mapping of the physical pins to the implemented bus signals. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Bus decoding information may also describe disposition or handling of unimplemented bus signals of the known bus or bus standard. The unimplemented bus signals may or may not optional. Alternatively, bus decoding information may reference one of bus decoder templates <highlight><bold>256</bold></highlight> of PBSD EDA Tool Suite <highlight><bold>204</bold></highlight> instead. As will be described in more detail below, PBSD EDA Tool Suite <highlight><bold>204</bold></highlight> is endowed with a number of bus decoder templates <highlight><bold>256</bold></highlight> having defaulted disposition or handling of unimplemented bus signals of various known bus or bus standards. Resultantly, specification of bus decoder description <highlight><bold>214</bold></highlight> may be streamlined. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The contemplated pin and bus related information <highlight><bold>214</bold></highlight> enables PBSD EDA Tool Suite <highlight><bold>204</bold></highlight> (more specifically, bus compatibility analyzer <highlight><bold>254</bold></highlight> of IP package processor <highlight><bold>250</bold></highlight>) to make bus compatibility and connectivity discernment. As will be described in more detail below, in one embodiment, bus compatibility analyzer <highlight><bold>254</bold></highlight> makes the determination in view of the availability of various bus bridges <highlight><bold>286</bold></highlight>, which are designed to bridge buses of a first plurality of types to buses of a second plurality of types, e.g. an AMBRA bus to a PCI bus. Resultantly, greater precision as well as attachment flexibility for a wider array of peripherals may be facilitated. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Continuing to refer to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, for the embodiment, package description <highlight><bold>210</bold></highlight> also preferably includes customizable attribute or parameter descriptions and/or customizable user interface (UI) element descriptions <highlight><bold>216</bold></highlight>. Customizable attribute or parameter descriptions <highlight><bold>216</bold></highlight> describe IP attributes or parameters of hardware components <highlight><bold>222</bold></highlight> that are customizable, e.g. memory sizes, address sizes, and so forth. Customization UI element descriptions <highlight><bold>216</bold></highlight> describe certain pre-defined choices to be offered to a designer <highlight><bold>202</bold></highlight>, when facilitating the designer <highlight><bold>202</bold></highlight> in specifying a choice for a customizable attribute or parameter of a hardware component <highlight><bold>222</bold></highlight>, e.g. for a timer configuration choice, the choices of &ldquo;true&rdquo; or &ldquo;false&rdquo;, and the corresponding prompt texts of &ldquo;enabled&rdquo; or &ldquo;disabled&rdquo;, for facilitating a designer <highlight><bold>202</bold></highlight> in enabling or disabling a timer feature of the IP. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> As will be described in more detail below, Tool Suite <highlight><bold>204</bold></highlight> (more specifically, customization configurator <highlight><bold>284</bold></highlight> of GUI <highlight><bold>280</bold></highlight>) automatically facilitates collection of customization inputs for the described customizable attributes or parameters, whenever the IP is selected by a designer <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> For the embodiment, IP package description <highlight><bold>210</bold></highlight> may also include descriptions <highlight><bold>218</bold></highlight> describing embedded and/or diagnostic software <highlight><bold>224</bold></highlight>, test vectors <highlight><bold>226</bold></highlight> as well as any supplemental generators <highlight><bold>228</bold></highlight> provided by the vendor of the IP package. Embedded software <highlight><bold>224</bold></highlight> may be any IP vendor provided software, such as boot code, to be used with the IP; whereas diagnostic software <highlight><bold>224</bold></highlight> and test vectors <highlight><bold>226</bold></highlight> may be any IP vendor provided test software and test data to be used for debugging or testing an inclusion of the IP with a SOC design <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Recall from the Glossary Section that a generator is a collection of programming instructions that take a collection of design information of a SOC as input, process the design information, and outputs the design information of the SOC in a transformed and/or expanded state to further the design and/or verification of the design of the SOC. As will be described in more detail below, the present invention contemplates that the design process comprises a number of design and/or verification phases. For example, in one embodiment, these design and/or verification phases include an IP generation phase, a hardware logic simulation generation phase, a software generation phase, and a verification environment configuration generation phase. Tool Suite <highlight><bold>204</bold></highlight> provides one or more generators <highlight><bold>288</bold></highlight> for each of these phases, to transform selected design information in each of these phases, to a new modified or transformed state at the end of the phase. Examples of these transformations, as will be explained in more detail below, may include generation of the top level description of the SOC, hardware logic for simulating the SOC, embedded or diagnostic software, and/or configuration script files for various verification environments. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> An example of a hardware simulation environment is the ModelSim Tool, available from Mentor Graphics Corporation of Wilsonville, Oreg. An example of a debugging environment is the XRAY Debugging Tool, whereas an example of a co-verification environment is the Seamless Verification Tool Suite. Both are also available from Mentor Graphics. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> For the embodiment, IP parts <highlight><bold>220</bold></highlight> may also include IP vendor supplied generators <highlight><bold>228</bold></highlight> to supplement the &ldquo;standard&rdquo; generation processing provided by generators <highlight><bold>288</bold></highlight> of Tool Suite <highlight><bold>204</bold></highlight>. For example, IP vendor supplied generators <highlight><bold>228</bold></highlight> may be provided to perform certain processing unique to the vendor&apos;s IP, otherwise not provided by generators <highlight><bold>288</bold></highlight> of Tool Suite <highlight><bold>204</bold></highlight>. In one embodiment, IP vendor supplied generators <highlight><bold>228</bold></highlight> are also design/verification phase based. That is, IP vendor supplied generators <highlight><bold>228</bold></highlight> are designated for execution in particular design/verification phases. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In one embodiment, the various design and/or verification phases are considered to be order dependent, and generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> designated for execution in an &ldquo;earlier&rdquo; phase are executed before generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> designated for execution in a &ldquo;later&rdquo; phase. For the embodiment, generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> designated for execution in one phase may be executed in any order within the phase. In alternate embodiments, other arrangements may be employed to manage order or dependency. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Further, as will be described in more detail below, generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> of the various phases may be successively invoked in selected combination, depending on the interest or need of designer <highlight><bold>202</bold></highlight>. For examples, in one situation, a designer <highlight><bold>202</bold></highlight> may elect to invoke generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> of one phase, such as the design generation phase only, or the verification environment configuration script file generation phase. In yet other situations, a designer <highlight><bold>202</bold></highlight> may elect to invoke generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> of two phases, such as the design generation and simulation hardware logic generation phases, or the embedded software generation and verification environment script generations phases. In general, as will be described in more detail below, generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> may be successively invoked as a &ldquo;chain&rdquo; to transform design information of a SOC design for one or more phases; and the invocation may start at any design/verification phase, and end in any design/verification phase. Note that the input design information for a subsequent invoked generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> may or may not be the output design information of the immediately preceding generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight>, regardless whether the generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> are invoked for the same design/verification phase or two successive design/verification phases. In other words, two generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> of the same or different phases may be successively invoked to transform design information, with the output of the first generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> being provided to the second generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> as input, or the two generators <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> may be successively invoked to perform related, but not directly coupled processing. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Continuing to refer to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, constituting parts <highlight><bold>220</bold></highlight> include the various elements that actually form the IP or support the IP. That is, constituting parts <highlight><bold>220</bold></highlight> may include, for example, hardware components <highlight><bold>222</bold></highlight> of the IP, embedded software <highlight><bold>224</bold></highlight>, if any, test vectors <highlight><bold>226</bold></highlight>, if any, and supplemental generators <highlight><bold>228</bold></highlight>, if any. In various embodiments, in lieu of the actual parts themselves, constituting parts <highlight><bold>220</bold></highlight> may contain pointers or links to storage locations from where the particular parts may be retrieved. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The exact content of each of hardware components <highlight><bold>222</bold></highlight>, embedded or diagnostic software <highlight><bold>224</bold></highlight>, test vector or information to generate test vectors <highlight><bold>226</bold></highlight>, and supplemental generator <highlight><bold>228</bold></highlight>, are dependent on the content or exact nature of the IP. Likewise, the exact content of various descriptions, pin and bus related descriptions <highlight><bold>214</bold></highlight>, customizable attribute/parameter and UI element descriptions <highlight><bold>216</bold></highlight>, embedded/diagnostic software and supplemental generator <highlight><bold>218</bold></highlight>, and design/verification environment descriptions <highlight><bold>219</bold></highlight> are also dependent on the content or exact nature of the IP. However, one embodiment for conveying these descriptions will be described in more details below. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Still referring to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, for the embodiment, PBSD EDA Tool Suite <highlight><bold>204</bold></highlight> as alluded to earlier, includes IP package processor <highlight><bold>250</bold></highlight> and GUI <highlight><bold>280</bold></highlight>. IP package processor <highlight><bold>250</bold></highlight> is employed to process or acquire IP packages <highlight><bold>206</bold></highlight> constituted in accordance with the teachings of the present invention. GUI <highlight><bold>280</bold></highlight>, including UI elements and support logic, is employed to facilitate a designer <highlight><bold>202</bold></highlight> in selecting various IP in the formation and design of a SOC, as well as generating the design <highlight><bold>208</bold></highlight> or configuring various verification environments to verify the design <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> For the embodiment, IP package processor <highlight><bold>250</bold></highlight> includes in particular description reader <highlight><bold>252</bold></highlight> and bus compatibility analyzer <highlight><bold>254</bold></highlight>, which includes in particular, the earlier described bus decoder templates <highlight><bold>256</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Description reader <highlight><bold>252</bold></highlight> provided for the reading of package description <highlight><bold>210</bold></highlight> of IP packages <highlight><bold>206</bold></highlight>, processes the descriptions, and stores the information read in database <highlight><bold>260</bold></highlight>. Bus compatibility analyzer <highlight><bold>254</bold></highlight>, as described earlier, is provided for the automatic determination of the IP&apos;s bus compatibility, i.e. connectivity, based on the pin and bus related descriptions <highlight><bold>214</bold></highlight> provided, bus decoder templates <highlight><bold>256</bold></highlight>, if referenced, and in view of the availability of various bus bridges <highlight><bold>286</bold></highlight>. Similarly, bus compatibility analyzer <highlight><bold>254</bold></highlight> stores any derived or synthesized information in database <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> GUI <highlight><bold>280</bold></highlight>, for the embodiment, includes an object-oriented API <highlight><bold>282</bold></highlight> having a number of Put and Get Methods to facilitate in the storing and retrieval of read and synthesized data <highlight><bold>262</bold></highlight> from database <highlight><bold>260</bold></highlight>, as well as the storing and retrieval of imported parts <highlight><bold>220</bold></highlight> of IP packages <highlight><bold>206</bold></highlight>, generated SOC designs <highlight><bold>208</bold></highlight> and related files, such as configuration scripts and so forth. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> For the embodiment, GUI <highlight><bold>280</bold></highlight> also includes customization configurator <highlight><bold>284</bold></highlight> provided to facilitate a designer <highlight><bold>202</bold></highlight> in specifying the customizable or configurable attributes or parameters of the selected IP. As will be described in more detail below, in response to the selection of an IP, customization configurator <highlight><bold>284</bold></highlight> (e.g. applicable Put and Get Methods of API <highlight><bold>282</bold></highlight>) retrieves the customizable/configurable attributes/parameters of the IP, including UI choices elements, if any, and dynamically generates as well as presents the dynamically generated customizable forms to a designer <highlight><bold>202</bold></highlight> to collect customization/configuration specifications for the customizable/configurable attributes/parameters of the selected IP. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Bus bridges <highlight><bold>286</bold></highlight>, as alluded to earlier, are pre-provided bus interfaces that bridge between compatible buses to broaden the amount of IP available for selection to a SOC designer <highlight><bold>202</bold></highlight>. For example, by pre-providing a bridge between bus architectures A and B, an IP determined to support bus architecture B may nevertheless be offered for selection, even though a SOC designer <highlight><bold>202</bold></highlight> has decided (explicitly or implicitly) to employ bus A, as the IP may be attached to bus A via the pre-provided bus bridge bridging bus architectures A and B. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Generators <highlight><bold>288</bold></highlight>, as described earlier, are provided to transform SOC designs <highlight><bold>208</bold></highlight> at various phases of the design and/or verification process. As will be described in more detail below, generators <highlight><bold>288</bold></highlight> designated for execution in the various phases of the design and/or verification process are invoked in selected combination in a chained manner, depending on the interest or request of a designer <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> As will be described in more detail below, through GUI <highlight><bold>280</bold></highlight>, a designer <highlight><bold>202</bold></highlight>, in one instance, may select various IPs to form a SOC, and request the SOC, the hardware logic for simulation, the embedded and diagnostic software, and the verification environment configuration script files be generated. Depending on the selection and specification, e.g. the simulation tool to be employed, appropriate ones of generators <highlight><bold>288</bold></highlight> are invoked in sequence, forming a chain of generators <highlight><bold>288</bold></highlight>, to perform the various generations, i.e. transformation of design data, to accomplish the various generations for the designer <highlight><bold>202</bold></highlight>. In other instances, the designer <highlight><bold>202</bold></highlight> may request only a subset of these generations, e.g. through hardware logic generation only, or verification environment configuration script generation only, to be performed. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Database <highlight><bold>260</bold></highlight> and repository <highlight><bold>262</bold></highlight> may be implemented using any storage subsystems known in the art. One embodiment of a data organization suitable for use to store the various relevant information to practice the present invention is later described. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> API <highlight><bold>282</bold></highlight> may be implemented using any one or a number of programming techniques known in the art. In one embodiment, the API functions are implemented as Methods using the Java Programming Language, and associated with various data objects. In alternate embodiments, other programming languages and/or techniques may be employed instead. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> One embodiment each of IP package processor <highlight><bold>250</bold></highlight>, including bus description reader <highlight><bold>252</bold></highlight>, bus compatibility analyzer <highlight><bold>254</bold></highlight>, and GUI <highlight><bold>280</bold></highlight>, including customization configurator <highlight><bold>284</bold></highlight>, and generators <highlight><bold>288</bold></highlight>, will also be described in more detail in turn below. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Bus decoder templates <highlight><bold>256</bold></highlight> and bus bridges <highlight><bold>286</bold></highlight> are bus dependent. Similarly, Put and Get Methods of API <highlight><bold>282</bold></highlight> are data organization dependent. Implementation of these elements is within the ability of those ordinarily skilled in the art; accordingly, they will not be further described. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Note that while the description thus far has described IP packages <highlight><bold>206</bold></highlight> as re-useable IP provided by IP providers, it will be appreciated by those ordinarily skilled in the art that application specific logic of a targeted SOC design may be likewise incorporated in like manner, using Tool Suite <highlight><bold>204</bold></highlight>, as any of the re-useable IP supplied by IP providers. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> IP Package &amp; Acquisition Process </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Having now given an overview description of the various aspects of the present invention, we turn now to describe IP package <highlight><bold>206</bold></highlight> in further detail, including the process of processing or acquiring IP packages <highlight><bold>206</bold></highlight> for incorporation into a design environment for use by designers <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As alluded to by earlier description, in accordance with the present invention, each IP package <highlight><bold>206</bold></highlight> is advantageously self-describing. <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>12</bold></highlight><highlight><italic>b </italic></highlight>illustrate an IP package description <highlight><bold>210</bold></highlight>&prime; including basic, pin, bus related, customizable attributes/parameters, and other descriptions, in accordance with one embodiment. For the embodiment, description <highlight><bold>210</bold></highlight>&prime; is expressed using a XML-like Language having XML like language tags defined in accordance with a schema of a namespace associated with Tool Suite <highlight><bold>204</bold></highlight>. As is well known, XML is a &ldquo;self-describing&rdquo; language, and thus is particularly suitable for describing the various aspects of an IP. However, in alternate embodiments, other &ldquo;description&rdquo; techniques may be practiced instead. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> As illustrated, exemplary IP package description <highlight><bold>210</bold></highlight>&prime; includes basic descriptions <highlight><bold>1204</bold></highlight>-<highlight><bold>1208</bold></highlight> delineated by basic description tag pairs <highlight><bold>1202</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1202</bold></highlight><highlight><italic>b</italic></highlight>, bus decoding template <highlight><bold>1212</bold></highlight> delineated by bus decoding template tag pairs <highlight><bold>1210</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1210</bold></highlight><highlight><italic>b</italic></highlight>, physical pin descriptions <highlight><bold>1216</bold></highlight> delineated by physical pin description tag pairs <highlight><bold>1214</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1214</bold></highlight><highlight><italic>b</italic></highlight>, bus interface descriptions <highlight><bold>1220</bold></highlight> and <highlight><bold>1221</bold></highlight> delineated by bus interface description tag pairs <highlight><bold>1218</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1218</bold></highlight><highlight><italic>b</italic></highlight>, and logical pin descriptions <highlight><bold>1224</bold></highlight> delineated by logical pin description tag pairs <highlight><bold>1222</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1222</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Exemplary IP package description <highlight><bold>210</bold></highlight>&prime; also includes customizable attribute descriptions <highlight><bold>1227</bold></highlight> delineated by customizable attribute description tag pairs <highlight><bold>1226</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1226</bold></highlight><highlight><italic>b</italic></highlight>, customization UI element descriptions <highlight><bold>1231</bold></highlight> delineated by customizable attribute description tag pairs <highlight><bold>1230</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1230</bold></highlight><highlight><italic>b</italic></highlight>, software descriptions <highlight><bold>1233</bold></highlight> delineated by software description tag pairs <highlight><bold>1232</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1232</bold></highlight><highlight><italic>b</italic></highlight>, vendor supplied generator descriptions <highlight><bold>1235</bold></highlight> delineated by vendor supplied generator description tag pairs <highlight><bold>1234</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1234</bold></highlight><highlight><italic>b</italic></highlight>, and design/verification environment configuration descriptions <highlight><bold>1237</bold></highlight> delineated by design/verification environment configuration description tag pairs <highlight><bold>1236</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1236</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> As described earlier, basic descriptions <highlight><bold>1204</bold></highlight>-<highlight><bold>1208</bold></highlight> set forth between basic description tags <highlight><bold>1202</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1202</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. vendor and package identification information <highlight><bold>1204</bold></highlight>-<highlight><bold>1206</bold></highlight> as well as other basic information <highlight><bold>1208</bold></highlight>, such as number of files, the file sizes, and so forth. Bus decoding template <highlight><bold>1212</bold></highlight> set forth between bus decoding template tags <highlight><bold>1210</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1210</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. a reference to a bus decoder template <highlight><bold>1212</bold></highlight> provided by Tool Suite <highlight><bold>204</bold></highlight>. Physical pin descriptions <highlight><bold>1216</bold></highlight> set forth between physical pin description tags <highlight><bold>1214</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1214</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. the pin names, their directions, their width, and so forth <highlight><bold>1216</bold></highlight>. Bus interface descriptions <highlight><bold>1220</bold></highlight> set forth between bus interface description tags <highlight><bold>1218</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1218</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. the bus or bus standard name, whether the IP component is to behave as a master or a slave device, enumeration of the signals implemented, and so forth <highlight><bold>1220</bold></highlight>. For the embodiment, bus interface description <highlight><bold>1221</bold></highlight> delineated may also include a number of bus parameters to be resolved based directly or indirectly on user inputs <highlight><bold>1221</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1221</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1221</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1221</bold></highlight><highlight><italic>f</italic></highlight>. The descriptions may include identification of the parameters, the manner of resolution, user prompts and so forth. Logical pin descriptions <highlight><bold>1224</bold></highlight> set forth between logical pin description tags <highlight><bold>1222</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1222</bold></highlight><highlight><italic>b </italic></highlight>may include mapping <highlight><bold>1224</bold></highlight> of physical pins to the implemented bus signals earlier described. Together, these descriptions define how the IP may be connected to other IP or components to form a SOC design <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Customizable attribute or parameter descriptions <highlight><bold>1227</bold></highlight> set forth between customizable attribute/parameter description tags <highlight><bold>1230</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1230</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. a number of IP component parameters to be resolved based directly or indirectly on user inputs <highlight><bold>1227</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1227</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1227</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1227</bold></highlight><highlight><italic>f</italic></highlight>. Similarly to the customizable bus interface parameters, the descriptions may include identification of the IP component parameters, the manner of resolution, user prompts and so forth. Customization UI element descriptions <highlight><bold>1231</bold></highlight> set forth between customization UI element description tags <highlight><bold>1226</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1226</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. choices for a number of choice elements <highlight><bold>1231</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1231</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1231</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1231</bold></highlight><highlight><italic>f</italic></highlight>. As described earlier, examples of choices may be &ldquo;enabled&rdquo; or &ldquo;disabled&rdquo; for an included timer. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Software descriptions set forth between software description tags <highlight><bold>1232</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1232</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. identifications of a number of embedded or diagnostic software, including their purposes, corresponding parameters, and manner of resolution for the parameters <highlight><bold>1233</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1233</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1233</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1233</bold></highlight><highlight><italic>f</italic></highlight>. Likewise, vendor supplied generator descriptions <highlight><bold>1235</bold></highlight> set forth between vendor supplied generator description tags <highlight><bold>1234</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1234</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. identifications of a number of vendor supplied generators, including their purposes, and the design and/or verification phases the generators are to be used <highlight><bold>1235</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1235</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1235</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1235</bold></highlight><highlight><italic>f. </italic></highlight></paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Lastly, for the embodiment, design/verification environment configuration descriptions <highlight><bold>1237</bold></highlight> set forth between design/verification environment configuration description tags <highlight><bold>1236</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1236</bold></highlight><highlight><italic>b </italic></highlight>may include e.g. identifications of a number of design and/or verification environments, such as simulation and/or co-verification environments, corresponding parameters, their settings and alternatively, manner for resolving the parameters <highlight><bold>1237</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>1237</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>1237</bold></highlight><highlight><italic>d</italic></highlight>-<highlight><bold>1237</bold></highlight><highlight><italic>f. </italic></highlight></paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Before proceeding to further describe the present invention, it should be noted that the employment of a XML-like language may also be practiced with more or less language tags. Defining the semantics of such XML like language tags in a schema of a namespace is within the ability of those ordinarily skilled in the art, and accordingly will not be further described. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates the operational flow of the relevant aspect of IP package processor <highlight><bold>250</bold></highlight> (including description reader <highlight><bold>252</bold></highlight> and bus compatibility analyzer <highlight><bold>254</bold></highlight>), for processing an IP package <highlight><bold>206</bold></highlight>, and acquiring the IP into a design environment equipped with Tool Suite <highlight><bold>204</bold></highlight>, making the IP available for use by a designer <highlight><bold>202</bold></highlight>, in accordance with one embodiment. As illustrated, upon invocation, IP package processor <highlight><bold>250</bold></highlight> (more specifically, description reader <highlight><bold>252</bold></highlight>) identifies and reads basic description <highlight><bold>212</bold></highlight>, block <highlight><bold>1302</bold></highlight>. Description reader <highlight><bold>252</bold></highlight> then stores the basic information read into corresponding data fields of database <highlight><bold>260</bold></highlight>, block <highlight><bold>1304</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Next, description reader <highlight><bold>252</bold></highlight> identifies and reads pins and bus related description <highlight><bold>214</bold></highlight>, block <highlight><bold>1308</bold></highlight>. Upon reading the pin and bus related description information, for the embodiment, description reader <highlight><bold>252</bold></highlight> invokes bus compatibility analyzer <highlight><bold>254</bold></highlight> to decode the provided pin and bus related information, using bus decoding information explicitly or implicitly provided. In response, bus compatibility analyzer <highlight><bold>254</bold></highlight> determines the bus architectures supported accordingly, including bus signals implemented, and disposition/handling of the unimplemented signals, block <highlight><bold>1310</bold></highlight>. Upon determining the information, in like manner, bus compatibility analyzer <highlight><bold>254</bold></highlight> stores the supported bus architecture information, including related synthesized information, into database <highlight><bold>260</bold></highlight>, block <highlight><bold>1312</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Thereafter, for the illustrated embodiment, description reader <highlight><bold>252</bold></highlight> identifies and reads customizable attribute and UI element descriptions <highlight><bold>216</bold></highlight>, as well as included software, including customizable parameters <highlight><bold>218</bold></highlight>, block <highlight><bold>1314</bold></highlight>. Upon identifying all embedded and diagnostic software, including the customizable hardware as well as software attributes for which customization inputs are to be collected, as with the earlier described operations, description reader <highlight><bold>252</bold></highlight> stores the information read into database <highlight><bold>260</bold></highlight>, block <highlight><bold>1316</bold></highlight>. Next, description reader <highlight><bold>252</bold></highlight> identifies and reads vendor supplied generator descriptions <highlight><bold>218</bold></highlight>, as well as design and/or verification environment configuration descriptions <highlight><bold>219</bold></highlight>, block <highlight><bold>1318</bold></highlight>. Similarly, description reader <highlight><bold>252</bold></highlight> stores the information read into database <highlight><bold>260</bold></highlight>, block <highlight><bold>1320</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Next, description reader <highlight><bold>252</bold></highlight> identifies and stores the included parts <highlight><bold>220</bold></highlight>, i.e. hardware components <highlight><bold>222</bold></highlight>, embedded and/or diagnostic software <highlight><bold>224</bold></highlight>, test vectors <highlight><bold>226</bold></highlight>, and vendor supplied generators <highlight><bold>228</bold></highlight>, or pointers/links to the parts, blocks <highlight><bold>1322</bold></highlight>-<highlight><bold>1324</bold></highlight>. The actual parts <highlight><bold>220</bold></highlight>, if present, are stored in repository <highlight><bold>270</bold></highlight>, whereas pointers/links to the parts are stored in database <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 14</cross-reference><highlight><italic>a</italic></highlight>-<highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>illustrate a data organization suitable for use to store the various extracted and/or synthesized information associated with the IP packages <highlight><bold>206</bold></highlight> processed, in accordance with one embodiment. As illustrated, data organization <highlight><bold>1400</bold></highlight> includes a number of tables/views <highlight><bold>1410</bold></highlight>-<highlight><bold>1480</bold></highlight>. Table/view <highlight><bold>1410</bold></highlight> includes a column <highlight><bold>1412</bold></highlight> for storing an identifier for each of the IP package <highlight><bold>206</bold></highlight> processed, and a number of columns <highlight><bold>1414</bold></highlight>-<highlight><bold>1416</bold></highlight> for storing their basic information, such as vendor name, version level, and so forth, including in particular, identifications of bus decoder templates to be employed in the decoding of pin and bus related information. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Table/view <highlight><bold>1420</bold></highlight> includes column <highlight><bold>1422</bold></highlight> employed to store the pointers, links or file identifiers identifying the hardware parts of the various IP, and columns <highlight><bold>1424</bold></highlight> employed to store the various customizable parameters of the IP, including the manner the parameters are to be resolved. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Table/view <highlight><bold>1430</bold></highlight> includes column <highlight><bold>1432</bold></highlight> employed to store the pointers, links or file identifiers identifying the software parts of the various IP. Similarly, table/view <highlight><bold>1430</bold></highlight> also includes columns <highlight><bold>1434</bold></highlight> employed to store the various customizable parameters, including the manner the parameters are to be resolved. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Table/view <highlight><bold>1440</bold></highlight> includes columns <highlight><bold>1442</bold></highlight> employed to store information related to the various UI choice elements of the various IP, to be used in collecting user inputs for the customizable hardware/software attributes/parameters of the various IP. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Table/view <highlight><bold>1450</bold></highlight> includes columns <highlight><bold>1452</bold></highlight>-<highlight><bold>1454</bold></highlight> employed to store the physical pins and the logical pins, i.e. the corresponding implemented bus signals, of the various IP. Table/view <highlight><bold>1460</bold></highlight> includes columns <highlight><bold>1462</bold></highlight> employed to store the various information describing the bus or bus standard supported, including the bus signals implemented, and the disposition or handling of unimplemented bus signals of the various IP. In other words, tables/views <highlight><bold>1450</bold></highlight> and <highlight><bold>1460</bold></highlight> store connectivity information of the various IP. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Table/view <highlight><bold>1470</bold></highlight> includes column <highlight><bold>1472</bold></highlight> employed to store the pointers, links or file identifiers of the test vectors or information for use to generate the test vectors of the various IP. Table/view <highlight><bold>1480</bold></highlight> includes columns <highlight><bold>1482</bold></highlight> employed to store the pointers, links or file identifiers of the vendor supplied generators, and columns <highlight><bold>1484</bold></highlight> employed to store configuration information associated with various design and/or verification phases. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Thus, it can be seen from the above description, applying the present invention, IP of various IP vendors may be more easily made available and integrated into a design and/or verification environment, for use by designers <highlight><bold>202</bold></highlight> in the design of SOC. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Enhanced Platform Based SOC Design </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Having now described how IP may be advantageously packaged, and how IP packages <highlight><bold>206</bold></highlight> may be processed and integrated into a design and/or verification environment for use by designers <highlight><bold>202</bold></highlight>, using Tool Suite <highlight><bold>204</bold></highlight>, to create SOC designs <highlight><bold>208</bold></highlight>, we turn now to describe the enhanced PBSD process of the present invention. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Enhanced PBSD is a design methodology that facilitates design of a SOC through aggregation of re-useable IP in an iterative and/or layered manner, by a designer or design team (together simply referred to as &ldquo;designer&rdquo;). The re-use of existing intellectual property (IP) modules provides a designer with the ability to gain the functionality of the re-used IP without the need to design the functionality as part of the new design. By aggregating multiple, reusable IP modules, a designer may identify significant sections of a design in the planning stage. Thus, a significant portion of a design may be established without the need to perform many detailed design steps. Moreover, these reusable IP blocks will typically be pre-verified and the suppliers of these blocks will provide test vectors for further in-place testing of these blocks. This pre-verification can reduce even further the amount of effort required by not necessitating development of tests for these reusable IP blocks. Design and verification can consume an exorbitant amount of time; because of the pre-existence of these blocks and their pre-verification, a majority of the designers actual &ldquo;design time&rdquo; can be spent designing the new logic for which no IP exists and consequently reduce the overall design time. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>a</italic></highlight>, in one embodiment, a SOC design contains at least 2 layers of design; a base platform layer <highlight><bold>310</bold></highlight> and a peripheral layer <highlight><bold>320</bold></highlight>. The base platform layer <highlight><bold>310</bold></highlight> comprises a compute engine. Examples of a compute engine includes but are not limited to microprocessors, digital signal processor, micro-controllers, and the like. Peripheral layer <highlight><bold>320</bold></highlight> comprises those IP components which are required for the targeted design but which are not part of the compute engine. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Peripheral layer <highlight><bold>320</bold></highlight> may actually be contained in several peripheral layers. In one embodiment, there are two peripheral layers in a SOC design. <cross-reference target="DRAWINGS">FIG. 3</cross-reference><highlight><italic>b </italic></highlight>shows one such embodiment where the peripheral layer is logically divided into two layers, a near peripheral layer <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>and a far peripheral layer <highlight><bold>320</bold></highlight><highlight><italic>b</italic></highlight>. In one embodiment, the near peripheral layer <highlight><bold>320</bold></highlight><highlight><italic>a </italic></highlight>contains IP that is intended to form the nucleus of the base platform design, together with the selected computing engine. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Thus, the PBSD process begins with offering a designer <highlight><bold>202</bold></highlight> a list of computing engines for selection. In response to such offer, designer <highlight><bold>202</bold></highlight> selects a compute engine. This selected compute engine will be at the core of the design. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Next, the main system components that support the operation of the compute engine are to be chosen. These main system components combined with the compute engine form a nucleus of the IC design. For example, in one embodiment of the invention, the main system components comprise flash memory, SRAM, main system bus arbiter and DMA controller. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> For a given compute engine, the compute engine&apos;s I/O functionality will define a set of requirements with which the main system components, to be utilized, should be compatible. For example, in one SOC design, if an IBM PowerPC 440 processor is chosen as the compute engine, by virtue of its adoption of the CoreConnect architecture, any main system components to be interfaced with the chosen processor should necessarily support the Processor Local Bus protocol or be bridgeable to support the Processor Local Bus Protocol. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Accordingly, the bus compatibility requirement is first determined based upon the compute engine chosen for the core of the design, using the bus architecture information stored in database <highlight><bold>260</bold></highlight>. In turn, based on the bus compatibility requirement determined, including the possibility of bridging to it based on the pre-provided bus bridges, a set of main system components is provided to designer <highlight><bold>202</bold></highlight>, to allow designer <highlight><bold>202</bold></highlight> to select one or more main system components. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> For example, in one SOC design, if a designer <highlight><bold>202</bold></highlight> chooses as an Ericsson Bluetooth ARM7TDMI processor as the compute engine, based on the bus information stored in database <highlight><bold>260</bold></highlight>, it is first determined that ARM7TDMI supports the Advanced Microcontroller Bus Architecture (AMBA&trade;) on chip bus specification. More specifically, since the AMBA 2.0 specification supports several buses definitions, based on the bus architecture information stored in database <highlight><bold>260</bold></highlight>, it is further determined that the bus definition supported is a &ldquo;Advanced High-Performance Bus&rdquo; (AHB). This bus is a system bus that supports multi-master bus management and connects the processor to high-performance peripherals, on-chip memory and interface functions. Once the bus type is determined, all main system components that support the AMBA AHB specification will be determined, based on the information stored in database <highlight><bold>260</bold></highlight>, and this list of main system components will be provided to the designer <highlight><bold>202</bold></highlight> for selection. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> In alternate embodiments, Tool Suite <highlight><bold>204</bold></highlight> preferably also supports explicit specification or override on the bus compatibility question for the compute engine selected or solicits the assistance of designer <highlight><bold>202</bold></highlight> in identifying the bus architecture to be employed. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The present invention also contemplates support for SOC designs that employ a secondary bus that is not part of the nucleus of the design. Designers <highlight><bold>202</bold></highlight> are also able to use the features of Tool Suite <highlight><bold>204</bold></highlight> to add components to the SOC design that are general-purpose peripherals. General-purpose peripherals are those that do not reside on a high-speed bus. For example, in one SOC design, where a designer <highlight><bold>202</bold></highlight> has chosen an Ericsson Bluetooth ARM7TDMI processor supporting AMBA 2.0, the AMBA Advanced Peripheral Bus may also be chosen as the general-purpose bus for attaching other I/O peripheral devices. In a manner similar to that discussed above with respect to the AHB, a user may explicitly or implicitly choose a general-purpose bus type. With this information, a list of available peripherals components that support the Advanced Peripheral Bus is ascertained. A designer <highlight><bold>202</bold></highlight> may then be provided with the determined list of these available components for selection. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>-<highlight><bold>6</bold></highlight> illustrate a GUI suitable for use to facilitate a designer <highlight><bold>202</bold></highlight> in selecting and configuring a compute engine of the base layer, to practice the present invention, in accordance with one embodiment. As illustrated, e.g. in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, main window <highlight><bold>400</bold></highlight> of GUI <highlight><bold>280</bold></highlight> comprises pull down menus <highlight><bold>410</bold></highlight>, work area <highlight><bold>440</bold></highlight>, base platform selection area <highlight><bold>420</bold></highlight>, and memory map display area <highlight><bold>450</bold></highlight>. For the illustrated embodiment, the base platform selection area <highlight><bold>420</bold></highlight> provides a listing of core computing platforms acquired into design environment as earlier described, available for a design to select and include as part of the SOC being designed. For the embodiment, the selection is reflected in work area <highlight><bold>440</bold></highlight>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the example result of choosing an Ericsson ARM7TDMI from the base platform selection area. Upon selecting the item, e.g. by double clicking at <highlight><bold>520</bold></highlight>, a representation of the compute engine appears in the work area <highlight><bold>510</bold></highlight>. In this embodiment, additional information is shown in a report area <highlight><bold>530</bold></highlight> at the bottom of the work area <highlight><bold>510</bold></highlight> of those items selected in the Base Platform Selection. The additional information available may include e.g. information on the various attributes or parameters of the selected items. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> For a given base platform design, when it is selected for the SOC design, a customization/configuration menu/form appears, which prompts the designer <highlight><bold>202</bold></highlight> for inputs for the customizable or configurable attributes of the base platform. Recall that as part of the acquisition process, customizable attribute or parameter information and if applicable, UI element descriptions are read and stored in database <highlight><bold>260</bold></highlight>. In response to the selection of a base platform, the customizable attribute or parameter information, including application UI element descriptions, are retrieved, and customization input forms for prompting a designer <highlight><bold>202</bold></highlight> to supply the attribute or parameter values are dynamically generated and presented to the designer <highlight><bold>202</bold></highlight> in order. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In one embodiment, the customization input forms are encoded in HTML. In alternate embodiments, other encoding or programming techniques may be practiced instead. In any case, generation of customization input forms in view of a number of attributes/parameters requiring user specification is known in art, and accordingly will not be further described. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> For the example illustration, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the customizable attributes or parameters include the starting or base addresses of the control registers. Accordingly, an input form is dynamically generated and presented to a designer <highlight><bold>202</bold></highlight>, to enable the designer <highlight><bold>202</bold></highlight> to provide the starting, or base address for a control register <highlight><bold>620</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The embodiment shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> also provides a display area wherein a memory map reflects the base address chosen for the control register <highlight><bold>630</bold></highlight> is reflected for the designer <highlight><bold>202</bold></highlight>, thus advantageously allow the designer <highlight><bold>202</bold></highlight> to track the aggregate assignment of memory addresses. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In addition, for the illustrated embodiment, as specified by the IP package <highlight><bold>206</bold></highlight>, the designer <highlight><bold>202</bold></highlight> is also prompted to select an operating system <highlight><bold>640</bold></highlight> for the SOC design. The list of operating systems available for selection again may be retrieved from database <highlight><bold>260</bold></highlight>. The information are stored in database <highlight><bold>260</bold></highlight> based on their specifications via e.g. the earlier described UI choice elements <highlight><bold>216</bold></highlight> of IP package <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> An advantage of prompting and guiding a designer <highlight><bold>202</bold></highlight> in configuring a selected component is to improve the ease of use of the highly complex task of selecting and configuring IP blocks. As those skilled in the art will appreciate, when a designer <highlight><bold>202</bold></highlight> acquires an IP block for use in a design, typically the designer <highlight><bold>202</bold></highlight> is required to make decisions about how to configure a device. Under the prior art, this can involve having to read a very detailed and complex data sheet. The present invention advantageously simplifies the usage of IP components greatly, by providing the ability to prompt and guide a designer <highlight><bold>202</bold></highlight> through the configuration. The earlier description is made simple on purpose to facilitate ease of understanding. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> As discussed above, after the base platform has been decided upon, the designer <highlight><bold>202</bold></highlight> can choose from a set of peripheral devices compatible with the compute engine chosen. FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>9</bold></highlight> illustrate an embodiment of GUI <highlight><bold>280</bold></highlight> suitable for use to facilitate a designer <highlight><bold>202</bold></highlight> in selecting and configuring compatible peripheral devices for the peripheral layers, to practice the present invention. Note that as described earlier, the peripheral devices may include application specific logic block provided by the designer <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> For the illustrated embodiment, as shown in <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> designer <highlight><bold>202</bold></highlight> first selects the memory components to be employed from a provided list of available memory items. For the example illustration shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, several memory components have been added to a memory bus. Specifically, three memory blocks have been selected/added, shown as <highlight><bold>710</bold></highlight>. The example illustration shows the addition of relocatable, banked and standard memories to the SOC design. In addition, the location of each memory block, and their corresponding control blocks, are shown in the memory map <highlight><bold>720</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In another example SOC design, there is a near peripheral and a far peripheral bus. Illustrated in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is one such example SOC design, where the near and far peripheral buses are the AMBA Advanced System Bus (ASB) and Advanced Peripheral Bus (APB) respectively. For this example SOC design, memories for the system are resident on the Advanced System Bus, and other peripherals, including the application specific logic block, are attached to the APB. For this example SOC design, the compute engine, the near and far peripheral buses, and the components attached thereto, may all be selected and configured as earlier described. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows yet another example SOC design, where the AMBA APB is not the general purpose I/O bus, but is rather a sub-bus of the general purpose I/O bus and is where AMBA compliant devices are attached. Similar to the earlier described SOC design, the compute engine, the near and far peripheral buses, and the components attached thereto, may all be selected and configured as earlier described. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates the operational flow of the relevant aspect of the logic of Tool Suite <highlight><bold>204</bold></highlight> in support of GUI <highlight><bold>280</bold></highlight>, in accordance with one embodiment. As illustrated, upon invocation, as described earlier, in accordance with the number of computing engines acquired into the design environment, with their descriptive information and if applicable pointers/links to the parts stored in database <highlight><bold>260</bold></highlight> (or actually stored in repository <highlight><bold>270</bold></highlight>), a list of compute engines is presented for a designer <highlight><bold>202</bold></highlight> for selection, block <highlight><bold>1502</bold></highlight>. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Thereafter, the selection of designer <highlight><bold>202</bold></highlight> is received, block <highlight><bold>1504</bold></highlight>. In response, the bus architectures supported by the selected compute engine is retrieved from database <highlight><bold>260</bold></highlight> and present for selection, block <highlight><bold>1506</bold></highlight>. Upon selection, supported peripherals for the selected bus architecture, with or without the employment of bus bridges <highlight><bold>286</bold></highlight>, are identified and presented for selection by designer <highlight><bold>202</bold></highlight>, block <highlight><bold>1508</bold></highlight>. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> At block <highlight><bold>1510</bold></highlight>, selection of a peripheral is received. At block <highlight><bold>1512</bold></highlight>, customization or configuration of the selected peripheral IP is facilitated. Similar to the customizable hardware attributes or parameters, the customizable attribute or parameter information, including applicable UI choice elements, are retrieved from database <highlight><bold>260</bold></highlight>, and customization input forms are dynamically generated and presented to the designer <highlight><bold>202</bold></highlight>, to allow the designer <highlight><bold>202</bold></highlight> to specify the attribute or parameter values for the customizable attributes or parameters. Upon customization or configuration, the selected peripheral is included as part of the SOC design, block <highlight><bold>1514</bold></highlight>. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The operations at block <highlight><bold>1508</bold></highlight>-<highlight><bold>1514</bold></highlight> are repeated until all selections for peripherals for each bus (e.g. the near and far peripheral buses) have been completed. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates an example data structure suitable for use to record the selected IP and their associated information to form an SOC design, to practice the present invention, in accordance with one embodiment. For the embodiment, an object oriented data structure is employed. Root object <highlight><bold>1602</bold></highlight> is created for the SOC design. Information associated with the selected compute engine is stored in compute engine object <highlight><bold>1604</bold></highlight>, created as a child object to root object <highlight><bold>1602</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Information associated with the memory and I/O buses are stored in memory and I/O bus objects <highlight><bold>1606</bold></highlight> and <highlight><bold>1608</bold></highlight>, created as child objects to compute engine object <highlight><bold>1604</bold></highlight>. Similarly, information associated with the memory IP are stored in memory unit objects <highlight><bold>1610</bold></highlight>, created as child objects to memory bus object <highlight><bold>1606</bold></highlight>, and information associated with the directly attached peripheral IP are stored in peripheral objects <highlight><bold>1612</bold></highlight>, created as child objects to memory bus object <highlight><bold>1608</bold></highlight>. Further, information associated with any bus bridges employed are stored in bus bridge objects <highlight><bold>1614</bold></highlight>, created as child objects to I/O bus object <highlight><bold>1608</bold></highlight>, and information associated with the indirectly attached peripheral IP are stored in peripheral objects <highlight><bold>1616</bold></highlight>, created as child objects to bus bridge objects <highlight><bold>1614</bold></highlight>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Thus, it can be seen from the above description, the enhanced functions of Tool Suite <highlight><bold>204</bold></highlight> advantageously make easier the process of designing SOC, making more IP available for selection, customization and/or configuration. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Design and/or Verification Environment Configuration Script Generation </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Having now described the advantageous process of the present invention to form a SOC design efficiently using Tool Suite <highlight><bold>204</bold></highlight> and third party provided IP, we turn now to describe the process for generating the design and/or its associated files under the present invention. The associated files may include e.g. hardware logic for simulation, embedded boot code and/or diagnostic software, and various verification environment configuration script files. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> As alluded to earlier, the present invention contemplates a phased design and/or verification process. In one embodiment, the phases include a design generation phase, a simulation hardware logic generation phase, an embedded software generation phase, and a verification environment configuration script generation phase. In one embodiment, Tool Suite <highlight><bold>204</bold></highlight> includes various generators <highlight><bold>288</bold></highlight> to perform the corresponding generation functions of these phases. generators <highlight><bold>288</bold></highlight> of Tool Suite <highlight><bold>204</bold></highlight> may be supplemented with IP vendor supplied generators <highlight><bold>228</bold></highlight> to perform certain processing that are unique to the IP at the various phases Applicable ones of the generators <highlight><bold>288</bold></highlight> and <highlight><bold>228</bold></highlight> are successively invoked and executed in a chained manner, depending on the request of the designer <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Accordingly, under the present invention, a SOC designer <highlight><bold>202</bold></highlight> upon formulating a SOC design <highlight><bold>208</bold></highlight> may desire to have the SOC design generated with or without additional design or verification processing. In the former case, the SOC designer <highlight><bold>202</bold></highlight> may also desire to have one or more of simulation hardware logic, related embedded software, such as boot code, diagnostic software, and/or verification environment configuration scripts generated. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> illustrate a GUI for facilitating generation of the design and the aforementioned associated files, in accordance with one embodiment. As illustrated, for the embodiment, GUI <highlight><bold>280</bold></highlight> includes a drop down menu <highlight><bold>1002</bold></highlight> offering a designer <highlight><bold>202</bold></highlight> the various generation choices. For the embodiment, the choices include generating the design, generate simulation hardware logic, generating the embedded software files, generating test cases, generating a configuration script for a software debugging environment, and generating a configuration script for a co-verification environment. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, GUI <highlight><bold>280</bold></highlight> includes a status area <highlight><bold>1110</bold></highlight> showing the status of the various selected generation. As described earlier, for each selected &ldquo;generation&rdquo;, the corresponding chain of generators are successively invoked to perform the selected &ldquo;generation&rdquo;. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates the operation flow of the relevant aspects of generation control of EDA Tool Suite <highlight><bold>204</bold></highlight> in support of the GUI of FIGS. <highlight><bold>10</bold></highlight>-<highlight><bold>11</bold></highlight>, in accordance with one embodiment. As illustrated, at block <highlight><bold>1702</bold></highlight>, generation control <highlight><bold>284</bold></highlight> receives the generation selection. At block <highlight><bold>1704</bold></highlight>, generation control <highlight><bold>284</bold></highlight> proceeds to facilitate the next appropriate generation. For the illustrated embodiment, if design generation is selected, it is facilitated first, resulting in a top level design file &ldquo;stitching&rdquo; together the selected IP components to be generated. Thereafter, if applicable, generation of the simulation hardware logic is facilitated. In one embodiment, the simulation hardware logic generates the hardware logic in accordance with a targeted simulator. An example of a targeted simulator is ModelSim available from Mentor Graphics. Similarly, if applicable, generation of embedded software, such as boot code, is facilitated. Further, generation of diagnostic software, including test cases may be facilitated. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> After that, any one of a number of configuration script file generations for the verification environments may be facilitated. In alternate embodiments, the present invention may be practiced with other facilitation order sequence. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> For each generation run, the generator traverses the IP components of the SOC design formed (using e.g. the data structure of <cross-reference target="DRAWINGS">FIG. 16</cross-reference> as a guide), accessing database <highlight><bold>260</bold></highlight> for information about the IP components as needed, blocks <highlight><bold>1706</bold></highlight>-<highlight><bold>1708</bold></highlight>. For the illustrated embodiment, the process continues as long as no &ldquo;fatal error&rdquo; is encountered, block <highlight><bold>1708</bold></highlight>. The nature and/or the type of error, or the severity of error to be considered as fatal error may be IP provider defined. Preferably, an option is provided for a designer <highlight><bold>202</bold></highlight> to specify the error threshold for terminating any one or all of the &ldquo;generations&rdquo;. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> When the successive generations have been successfully facilitated for a particular selected form of generation, generation control of Tool Suite <highlight><bold>204</bold></highlight> proceeds to the next appropriate selected generation, as alluded to earlier. In other words, the process continues back at block <highlight><bold>1706</bold></highlight>. Blocks <highlight><bold>1706</bold></highlight>-<highlight><bold>1710</bold></highlight> again are performed for the &ldquo;next&rdquo; selected form of generation. The process continues, until eventually all applicable generations have been facilitated, block <highlight><bold>1712</bold></highlight>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> illustrates the basic anatomy of the operation flow of a generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight>, in accordance with one embodiment. As illustrated, upon invocation, at block <highlight><bold>1802</bold></highlight>, the generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> retrieves the relevant customization inputs from database <highlight><bold>260</bold></highlight>. As alluded earlier, in one embodiment, the retrieval is made through the Get Methods of API <highlight><bold>270</bold></highlight>. Upon retrieving the relevant customization inputs, the generator <highlight><bold>228</bold></highlight>/<highlight><bold>288</bold></highlight> performs validation if applicable, else generation in view of the customization inputs entered by the designer <highlight><bold>202</bold></highlight>, block <highlight><bold>1804</bold></highlight>. As described earlier, in each case, the exact nature of the generation is dependent on the IP. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Thus, it can be seen from the above description, the enhanced functions of Tool Suite <highlight><bold>204</bold></highlight> advantageously make easier the process of generating and debugging/verifying a SOC design <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Computing and Network Embodiment </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> illustrates one embodiment of a computing apparatus suitable for use to practice the present invention. As shown, for the illustrated embodiment, computing device <highlight><bold>1900</bold></highlight> includes processor <highlight><bold>1902</bold></highlight> and processor bus <highlight><bold>1912</bold></highlight>. Coupled to processor bus <highlight><bold>1912</bold></highlight> are system memory <highlight><bold>1904</bold></highlight>, communication interface <highlight><bold>1910</bold></highlight>, I/O devices <highlight><bold>1904</bold></highlight> and mass storage <highlight><bold>1906</bold></highlight>. Communication interface <highlight><bold>1910</bold></highlight> in turn may be communicatively coupled to the servers of the various IP providers (for the retrieval of the actual component parts and related files). </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> These elements perform their conventional functions known in the art. In particular, mass storage <highlight><bold>1906</bold></highlight> and system memory <highlight><bold>1914</bold></highlight> are used to store permanent and working copies of the Tool Suite <highlight><bold>204</bold></highlight>. The permanent copy may be pre-loaded into mass storage <highlight><bold>1906</bold></highlight> in a factory, loaded from distribution medium (note shown), or down loaded from a remote distribution source (not shown). Distribution medium may be a tape, a CD, a DVD or other storage medium of the like. The constitutions of these elements are known. Any one of a number of implementations of these elements known in the art may be used to form computer system <highlight><bold>1900</bold></highlight>. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Certain embodiments may include additional components, may not require all of the above components, or may combine one or more components. Those skilled in the art will be familiar with a variety of alternative implementations. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows a network environment for practicing the present invention, in accordance with one embodiment. In this embodiment, user controls, via a user client <highlight><bold>2002</bold></highlight>, execution of EDA tool suite <highlight><bold>204</bold></highlight> incorporated with the teachings of the present invention. The user interacts with one or more servers <highlight><bold>2006</bold></highlight> executing the EDA tool suite <highlight><bold>204</bold></highlight> through a network <highlight><bold>2004</bold></highlight>Component parts and their related files are also retrieved from the IP vendors&apos; servers <highlight><bold>2012</bold></highlight> through network <highlight><bold>2004</bold></highlight> The design results are sent back from server <highlight><bold>2006</bold></highlight> to the user via network <highlight><bold>2004</bold></highlight> and user client <highlight><bold>2002</bold></highlight>. Communications between user client <highlight><bold>2002</bold></highlight>, IP vendors&apos; servers <highlight><bold>2012</bold></highlight> and servers <highlight><bold>2006</bold></highlight> may be accomplished via any one of a number of communication protocols known in the art, including but are not limited to the TCP/IP protocol. In other embodiments, other communication protocols may be employed. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Thus, it can be seen from the above description, the present invention may be practiced on a wide range of standalone and/or networked systems. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Conclusion &amp; Epilog </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Thus, a novel platform based approach to SOC design, advantageously and efficiently allowing third party IP to be used by designers to form SOC designs has been described. While the present invention has been described with the foregoing embodiments, the present invention is not so limited. The present invention may be practiced with modifications and extensions to the earlier described embodiments. The full scope of the present invention is defined by the claims to follow. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer implemented method comprising: 
<claim-text>receiving selection of a plurality of IP blocks to form a SOC design; </claim-text>
<claim-text>receiving user directions to process the SOC design for a first and a second phase of a design/verification process; and </claim-text>
<claim-text>in response, successively invoking a chain of generators including at least a first and a second generator corresponding to said first and second phase, to transform design information of the SOC design from a first state to a second state, and from a third state to a fourth state, respectively. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said second and third states are the same state. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein at least one of said first and second generators is provided by a vendor of one of the IP blocks included with said SOC design. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said successive invoking of a chain of generators comprises successively invoking at least a first and a second generator corresponding to said first phase to transform design information of the SOC design from a first state to a second state, and from a third state to a fourth state, and a third generator corresponding to the second phase to transform design information of the SOC design from a fifth state to a sixth state. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said successive invoking of a chain of generators comprises successively invoking at least a first generator corresponding to said first phase to transform design information of the SOC design from a first state to a second state, and a second and a third generator corresponding to the second phase to transform design information of the SOC design from a third state to a fourth state and from to a fifth state to a sixth state. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>said first phase is a design generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate a top level description describing said IP blocks, and their interconnections, in forming said SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said first generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said top level description factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein 
<claim-text>said second phase is a simulation hardware logic generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the method further comprises receiving specification of the target simulation environment. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said simulation hardware logic representative of said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>said first phase is a simulation hardware logic generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein 
<claim-text>said second phase is a software logic generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said embedded/diagnostic software for said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>said first phase is a software logic generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein 
<claim-text>said second phase is a verification environment configuration script file generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said one or more verification environment configuration scripts for said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>said user directions further direct processing the SOC design for a third phase of the design/verification process; and </claim-text>
<claim-text>said successively invoking of the chain of generators further includes invocation of at least an additional third generator corresponding to said third phase, to transform design information of the SOC design from a fifth state to a sixth state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein 
<claim-text>said first phase is a design generation phase; </claim-text>
<claim-text>said second phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said third phase is a verification environment configuration script file generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate a top level description describing said IP blocks, and their interconnections, in forming said SOC design; </claim-text>
<claim-text>said second generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; and </claim-text>
<claim-text>said third generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein 
<claim-text>said first phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said second phase is a software logic generation phase; </claim-text>
<claim-text>said third phase is a software logic generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design; and </claim-text>
<claim-text>said third generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein 
<claim-text>said user directions further direct processing the SOC design for a fourth phase of the design/verification process; and </claim-text>
<claim-text>said successively invoking of the chain of generators further includes invocation of at least an additional fourth generator corresponding to said fourth phase, to transform design information of the SOC design from a seventh state to an eighth state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein 
<claim-text>said first phase is a design generation phase; </claim-text>
<claim-text>said second phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said third phase is a software logic generation phase; </claim-text>
<claim-text>said fourth phase is a software logic generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design; </claim-text>
<claim-text>said third generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design; and </claim-text>
<claim-text>said fourth generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. An apparatus comprising: 
<claim-text>storage medium having stored therein a plurality of programming instructions designed to enable the apparatus to 
<claim-text>receive selection of a plurality of IP blocks to form a SOC design; </claim-text>
<claim-text>receive user directions to process the SOC design for a first and a second phase of a design/verification process; and </claim-text>
<claim-text>successively invoke in response a chain of generators including at least a first and a second generator corresponding to said first and second phase, to transform design information of the SOC design from a first state to a second state, and from a third state to a fourth state, respectively; and </claim-text>
</claim-text>
<claim-text>at least one processor coupled to the storage medium to execute the programming instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said second and third states are the same state. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, where said programming instructions further implement said first and second generators. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein at least one of said first and second generators is provided by a vendor of one of the IP blocks included with said SOC design. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said programming instructions enable the apparatus to perform said successive invoking of a chain of generators by successively invoking at least a first and a second generator corresponding to said first phase to transform design information of the SOC design from a first state to a second state, and from a third state to a fourth state, and a third generator corresponding to the second phase to transform design information of the SOC design from a fifth state to a sixth state. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein said programming instructions enable the apparatus to perform said successive invoking of a chain of generators by successively invoking at least a first generator corresponding to said first phase to transform design information of the SOC design from a first state to a second state, and a second and a third generator corresponding to the second phase to transform design information of the SOC design from a third state to a fourth state and from to a fifth state to a sixth state. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein 
<claim-text>said first phase is a design generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate a top level description describing said IP blocks, and their interconnections, in forming said SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein said first generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said top level description factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein 
<claim-text>said second phase is a simulation hardware logic generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein said programming instructions further enable the apparatus to receive specification of the target simulation environment. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said simulation hardware logic representative of said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein 
<claim-text>said first phase is a simulation hardware logic generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein 
<claim-text>said second phase is a software logic generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said embedded/diagnostic software for said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein 
<claim-text>said first phase is a software logic generation phase; and </claim-text>
<claim-text>said first generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein 
<claim-text>said second phase is a verification environment configuration script file generation phase; and </claim-text>
<claim-text>said second generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein said second generator further retrieves customization data of one or more of said IP blocks forming said SOC design, and generates said one or more verification environment configuration scripts for said SOC design factoring into consideration said retrieved customization data. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein 
<claim-text>said user directions further direct processing the SOC design for a third phase of the design/verification process; and </claim-text>
<claim-text>said programming instructions enable the apparatus to further include with said performance of said successively invoking of the chain of generators, invocation of at least an additional third generator corresponding to said third phase, to transform design information of the SOC design from a fifth state to a sixth state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein 
<claim-text>said first phase is a design generation phase; </claim-text>
<claim-text>said second phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said third phase is a verification environment configuration script file generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate a top level description describing said IP blocks, and their interconnections, in forming said SOC design; </claim-text>
<claim-text>said second generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; and </claim-text>
<claim-text>said third generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein 
<claim-text>said first phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said second phase is a software logic generation phase; </claim-text>
<claim-text>said third phase is a software logic generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design; and </claim-text>
<claim-text>said third generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The apparatus of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein 
<claim-text>said user directions further direct processing the SOC design for a fourth phase of the design/verification process; and </claim-text>
<claim-text>said programming instructions further enable the apparatus to include with said performance of said successively invoking of the chain of generators at least an additional fourth generator corresponding to said fourth phase, to transform design information of the SOC design from a seventh state to an eighth state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The apparatus of claim <highlight><bold>42</bold></highlight>, wherein 
<claim-text>said first phase is a design generation phase; </claim-text>
<claim-text>said second phase is a simulation hardware logic generation phase; </claim-text>
<claim-text>said third phase is a software logic generation phase; </claim-text>
<claim-text>said fourth phase is a software logic generation phase; </claim-text>
<claim-text>said first generator traverses the SOC design to generate simulation hardware logic representative of the SOC design for a target simulation environment; </claim-text>
<claim-text>said second generator traverses the SOC design to generate at least a selected one of embedded and diagnostic software for the SOC design; </claim-text>
<claim-text>said third generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design; and </claim-text>
<claim-text>said fourth generator traverses the SOC design to generate one or more verification environment configuration script files for the SOC design.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005396A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005396A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005396A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005396A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005396A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005396A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005396A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005396A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005396A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005396A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005396A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005396A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005396A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005396A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005396A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005396A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005396A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005396A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005396A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005396A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005396A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005396A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005396A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005396A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
