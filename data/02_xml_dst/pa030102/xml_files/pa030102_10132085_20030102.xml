<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005008A1-20030102-M00001.NB SYSTEM "US20030005008A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030005008A1-20030102-M00001.TIF SYSTEM "US20030005008A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-M00002.NB SYSTEM "US20030005008A1-20030102-M00002.NB" NDATA NB>
<!ENTITY US20030005008A1-20030102-M00002.TIF SYSTEM "US20030005008A1-20030102-M00002.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00001.TIF SYSTEM "US20030005008A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00002.TIF SYSTEM "US20030005008A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00003.TIF SYSTEM "US20030005008A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00004.TIF SYSTEM "US20030005008A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00005.TIF SYSTEM "US20030005008A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00006.TIF SYSTEM "US20030005008A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00007.TIF SYSTEM "US20030005008A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00008.TIF SYSTEM "US20030005008A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00009.TIF SYSTEM "US20030005008A1-20030102-P00009.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00010.TIF SYSTEM "US20030005008A1-20030102-P00010.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00011.TIF SYSTEM "US20030005008A1-20030102-P00011.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00012.TIF SYSTEM "US20030005008A1-20030102-P00012.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00013.TIF SYSTEM "US20030005008A1-20030102-P00013.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00014.TIF SYSTEM "US20030005008A1-20030102-P00014.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00015.TIF SYSTEM "US20030005008A1-20030102-P00015.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00016.TIF SYSTEM "US20030005008A1-20030102-P00016.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00017.TIF SYSTEM "US20030005008A1-20030102-P00017.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00018.TIF SYSTEM "US20030005008A1-20030102-P00018.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00019.TIF SYSTEM "US20030005008A1-20030102-P00019.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00020.TIF SYSTEM "US20030005008A1-20030102-P00020.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00021.TIF SYSTEM "US20030005008A1-20030102-P00021.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00022.TIF SYSTEM "US20030005008A1-20030102-P00022.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00023.TIF SYSTEM "US20030005008A1-20030102-P00023.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00024.TIF SYSTEM "US20030005008A1-20030102-P00024.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-P00025.TIF SYSTEM "US20030005008A1-20030102-P00025.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00000.TIF SYSTEM "US20030005008A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00001.TIF SYSTEM "US20030005008A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00002.TIF SYSTEM "US20030005008A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00003.TIF SYSTEM "US20030005008A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00004.TIF SYSTEM "US20030005008A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00005.TIF SYSTEM "US20030005008A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005008A1-20030102-D00006.TIF SYSTEM "US20030005008A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005008</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10132085</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020424</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/10</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>708</class>
<subclass>300000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>708</class>
<subclass>321000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus for parallel signal processing</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60286428</doc-number>
<document-date>20010424</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60305423</doc-number>
<document-date>20010713</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Andrew</given-name>
<middle-name>A.</middle-name>
<family-name>Gray</family-name>
</name>
<residence>
<residence-us>
<city>Pasadena</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>J.D. Harriman II</name-1>
<name-2>COUDERT BROTHERS LLP</name-2>
<address>
<address-1>23rd Floor</address-1>
<address-2>333 South Hope Street</address-2>
<city>Los Angeles</city>
<state>CA</state>
<postalcode>90071</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention is directed to a method of providing signal processing operations, including convolution/filtering, where each parallel stream is processing signals at a lower rate than the signal data rate itself while still resulting in an overall signal processing rate suitable for high rate signal processing. This allows devices with a lower signal processing rate to be used in the parallel processing paths, avoiding many of the problems facing prior art high data rate signal processing. The invention converts a signal from the time domain to the frequency domain and takes advantage of associative and communicative properties of data processing to perform signal processing operations in parallel. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority from provisional applications numbered 60/286,428 filed Apr. 24, 2001 and 60/305,423 filed Jul. 13, 2001.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to the field of signal processing. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Background Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Signal processing can be difficult when the signal is a high rate signal. High rate systems may require expensive and/or custom devices for appropriate processing functionality to process the signal at the rate required. Some prior art approaches to providing devices capable of high rate signal processing are described below. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One current solution is to use commercially available microprocessors to implement the desired signal processing functionality. However, for high signal rate applications, commercial microprocessors may not be able to provide the desired signal processing rate. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Another solution is to make custom ASIC (application specific integrated circuit) devices. Such devices are designed with a specific functionality in mind. ASIC&apos;s differ from general purpose microprocessors in that they are optimized for a specific task. Even with custom devices designed for a specific function, standard techniques of circuit fabrication may still be inadequate to provide the desired signal processing rate. Using standard CMOS (complementary metal-oxide-semiconductor) techniques, ASIC&apos;s capable of an adequate signal processing rate may still be challenging to produce. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> When CMOS devices (either ASIC&apos;s or mircroprocessors) are unable to provide adequate signal processing performance, another prior art solution is to implement circuits using gallium arsenide (GaAs) technology. This technology results in higher clock speeds and consequently greater signal processing rates. However, GaAs technology is expensive to design and implement and also has lower yields than silicon based CMOS technology This results in still greater costs. Another problem is that the device density of GaAs devices is lower than that of CMOS processes. This means that physically larger GaAs devices must be used, leading to greater problems with design and power management. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention is directed to a method of providing signal processing operations, including convolution/filtering, where each parallel stream is processing signals at a lower rate than the signal data rate itself while still resulting in an overall signal processing rate suitable for high rate signal processing. This allows devices with a lower signal processing rate to be used in the parallel processing paths, avoiding many of the problems facing prior art high data rate signal processing. The invention converts a signal from the time domain to the frequency domain and takes advantage of associative and communicative properties of data processing to perform signal processing operations in parallel. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram of a filtering operation of a data stream. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an embodiment of the invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of a parallel filtering environment. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of a parallel subconvolution filtering embodiment of the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a modular embodiment of the invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram of a modular parallel filtering scheme of the invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram of a modular parallel subconvolution filtering scheme of the invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The present invention is a method and apparatus for providing parallel signal processing. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It is apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> One type of operation in signal processing that is often required is a convolution operation where an input signal must be convolved with other values or signals to produce a desired output. An example of a common convolution operation is a filtering operation, such as in a finite impulse response (FIR) filter. The present invention can be implemented with many types of signal processing. For purposes of example, embodiments of the invention are described in conjunction with convolution operations and/or filtering operations. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates at a functional level a filtering operation on an incoming data stream. The data source <highlight><bold>101</bold></highlight> is, for example, a 1 GHz data rate stream. The data stream is provided to a filter <highlight><bold>102</bold></highlight>, also required to operate at a rate to provide 1 GHz sample output <highlight><bold>103</bold></highlight>. Consider as an example that the filter <highlight><bold>102</bold></highlight> provides one output per time cycle. As above, there are a number of problems and disadvantages with prior art attempts to provide devices such as filter <highlight><bold>102</bold></highlight> that provide an adequate signal processing rate. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> One proposed solution to the requirement of a high signal processing rate is to implement a parallel processing architecture as illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The high speed data stream <highlight><bold>101</bold></highlight> is provided to each of a plurality of parallel subfilters <highlight><bold>201</bold></highlight>-<highlight><bold>208</bold></highlight> to provide outputs <highlight><bold>211</bold></highlight>-<highlight><bold>218</bold></highlight>. For purposes of the example of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the data stream is split into eight parts for filtering by eight parallel subfilters, but the invention contemplates any number of parallel paths as required. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The subfilters <highlight><bold>201</bold></highlight>-<highlight><bold>208</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> can each operate at approximately &frac18;<highlight><superscript>th </superscript></highlight>the signal processing rate of the filter <highlight><bold>102</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Each subfilter provides a different output based on how it is designed. For example, each subfilter provides an output after eight time cycles. Thus, after eight time cycles, the combined subfilters have provided eight outputs, matching the eight time cycle output of the filter <highlight><bold>102</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. An advantage of the system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is the fact that the parallel subfilters can be implemented using simpler technology, such as commercial microprocessors, or CMOS ASIC&apos;s. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In implementing the system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, one problem is how to divide the data stream so that operations on it can be parallelized. A first part of that question is the number of parallel streams required. If M is the rate of the data stream, and N is the signal processing rate of the subfilter, then M/N parallel subfilters are required. Thus, if each subfilter operates at, for example, &frac18;<highlight><superscript>th </superscript></highlight>or {fraction (1/16)}<highlight><superscript>th </superscript></highlight>the incoming data rate, then 8 or 16 parallel subfilters would be required. One problem with providing, for example, eight multiple parallel subfilters is the fact that the device count, and correspondingly the gate count, is increased by a factor of eight. This gate and real estate penalty can be limiting depending on the application. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Another problem arises due to the fact that the data processing has &ldquo;memory&rdquo;. In other words, the state of processing of one part of the data depends on prior processing operations. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In one embodiment of the present invention, a solution is provided that does not require an eightfold increase in gates to have eight parallel subfilter paths. In this embodiment, the data signal, which is in the time domain, is converted to the frequency domain for the filtering operation, and then back to the time domain for subsequent post filter processing. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> When implementing, for example, and FIR filter, the filtering operation is a convolution operation. In other words, the input data stream is convolved with the coefficients of the filter. The present invention performs a parallel series of &ldquo;subconvolutions&rdquo; on the data stream which can then be combined to find the same result as if a traditional convolution had taken place. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A known way to convert information from the time domain to the frequency domain is through the use of fast Fourier transforms (FFT&apos;s). These FFT&apos;s provide a natural parallelization which can be taken advantage of in the present invention. In part this is because samples are processed in blocks instead of one at a time. This promotes the paralellization of the invention because the samples that comprise a block can be processed individually by parallel subfilters. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> One embodiment of the invention provides architectures for parallel discrete-time convolution filters based on vector processing, subconvolution, and the discrete Fourier transform-inverse discrete Fourier transform (DFT-IDFT) overlap and save method. The result is a very large scale integration (VLSI) parallel processing architecture for high order filtering/correlation so that high rate systems can be processed with lower rate hardware, and with relatively low complexity (low transistor count) devices. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Typically, the order of the filter has been tied to the length of the FFT. For example, to implement a <highlight><bold>128</bold></highlight> tap filter has required an FFT that is capable of taking at least <highlight><bold>128</bold></highlight> samples at a time. Implementing a <highlight><bold>128</bold></highlight> point FFT concurrent processing requires a large number of gates. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The present invention provides a solution for the above problem by decoupling the size of the filter from the size of the FFT. The parallel method presented in this embodiment allows relatively small DFT-IDFT pairs, while the order of the finite impulse response (FIR) filter tap length is theoretically unlimited. The size of the DFT-IDFT pair is determined by the processing rate reduction desired, and is independent of the order of the filter to be implemented. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a parallel DFT-IDFT filtering architecture for frequency domain filtering using the overlap and save method. The DFT-IDFT length is L&plus;1 (where L is odd), and M, the downsample rate, is the number of samples that the input window &ldquo;slides&rdquo;. The architecture in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> has 50% input vector overlap, that is, the downsample rate, is equal to half the input vector length M&equals;(L&plus;1)/2. With such an architecture a M&plus;1 coefficient, or Mth order FIR filter may be implemented in the frequency domain. The filter, h(n), is zero-padded to length L&plus;1 and then transformed to the discrete frequency domain via the DFT, to obtain the frequency domain coefficients, H i&equals;DFT&lcub;h(n)&rcub;. (Note that any FIR filter with an order M or less can be used with this same architecture). </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an input stream x(n) <highlight><bold>301</bold></highlight> is provided to the architecture of the embodiment. The input <highlight><bold>301</bold></highlight> is provided without delay to downsample block <highlight><bold>303</bold></highlight>.<highlight><bold>0</bold></highlight>. The input <highlight><bold>301</bold></highlight> is then provided through a series of delays <highlight><bold>302</bold></highlight> to L downsample blocks. The outputs of the downsample blocks <highlight><bold>303</bold></highlight>.<highlight><bold>0</bold></highlight> through <highlight><bold>303</bold></highlight>.L are provided as inputs to DFT <highlight><bold>304</bold></highlight>. As noted above, the downsample rate is such that there is a 50% vector overlap. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The DFT <highlight><bold>304</bold></highlight> transforms the input signal x to the discrete frequency domain and outputs frequency domain vectors X The frequency domain vectors are multiplied by the coefficients of frequency domain filters H<highlight><subscript>1</subscript></highlight>-H<highlight><subscript>L</subscript></highlight>. The resulting frequency domain filtered signals are provided to the IDFT <highlight><bold>305</bold></highlight> to provide outputs 0 to L. The outputs from 0 to (L&minus;1)M/(L&plus;1) are discarded. The remaining outputs provide time domain filtered output y(n). </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> One possible limitation in this method is that the DFT-IDFT, or fast Fourier transform-inverse/fast Fourier transform (FFT-IFFT) lengths are increased to increase the order of the FIR filter to be implemented. To implement very large filters with such methods in VLSI application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) becomes very complex and requires large gate counts. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> An embodiment of the invention takes advantage of the fact that the total number of computations to perform the computation goes down as does the processing rate. For a VLSI architecture in which parallel processing, or processing rate reduction, is the goal the invention provides a solution to this problem. Consider the convolution sum of equation 1. The convolution may be broken into numerous subconvolutions, each time shifted input convolved with a subfilter, as indicated.  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>y</mi>
          <mo>&af;</mo>
          <mrow>
            <mo>(</mo>
            <mi>n</mi>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mrow>
            <munderover>
              <mo>&Sum;</mo>
              <mrow>
                <mi>k</mi>
                <mo>=</mo>
                <mn>0</mn>
              </mrow>
              <mrow>
                <mi>N</mi>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
            </munderover>
            <mo>&it;</mo>
            <mrow>
              <mrow>
                <mi>x</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mi>n</mi>
                    <mo>-</mo>
                    <mi>k</mi>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>&it;</mo>
              <mrow>
                <mi>h</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <mi>k</mi>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mrow>
            <mrow>
              <munderover>
                <mo>&Sum;</mo>
                <mrow>
                  <mi>k</mi>
                  <mo>=</mo>
                  <mn>0</mn>
                </mrow>
                <msub>
                  <mi>j</mi>
                  <mn>1</mn>
                </msub>
              </munderover>
              <mo>&it;</mo>
              <mrow>
                <mrow>
                  <mi>x</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mi>k</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>&it;</mo>
                <mrow>
                  <mi>h</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>k</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
            <mo>+</mo>
            <mrow>
              <munderover>
                <mo>&Sum;</mo>
                <mrow>
                  <mi>k</mi>
                  <mo>=</mo>
                  <mrow>
                    <msub>
                      <mi>j</mi>
                      <mn>1</mn>
                    </msub>
                    <mo>+</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <msub>
                  <mi>j</mi>
                  <mn>2</mn>
                </msub>
              </munderover>
              <mo>&it;</mo>
              <mrow>
                <mrow>
                  <mi>x</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mi>k</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>&it;</mo>
                <mrow>
                  <mi>h</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>k</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
            <mo>+</mo>
            <mi>&hellip;</mi>
            <mo>&it;</mo>
            <mstyle>
              <mtext>&emsp;</mtext>
            </mstyle>
            <mo>+</mo>
            <mrow>
              <munderover>
                <mo>&Sum;</mo>
                <mrow>
                  <mi>k</mi>
                  <mo>=</mo>
                  <msub>
                    <mi>j</mi>
                    <mi>R</mi>
                  </msub>
                </mrow>
                <mrow>
                  <mi>N</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
              </munderover>
              <mo>&it;</mo>
              <mrow>
                <mrow>
                  <mi>x</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mi>k</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>&it;</mo>
                <mrow>
                  <mi>h</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>k</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030005008A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="55.93455" file="US20030005008A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Observe that each sample vector input to the DFT of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, and therefore the frequency domain vector, is a time delay of M samples from the next sample vector input. From (1), it is obvious that each of the sums are themselves a convolution with a block of the filter or subfilter, we call these subconvolutions with subfilters, the sum of their outputs is equal to the convolution of the input, x(n), with the filter h(n). Each of these sub-convolutions may be implemented in the frequency domain using the technique illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, then the results summed to yield the convolution output. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> To break a convolution up into R equal length sub-convolutions, each (L&plus;1) in length, using this method would require R DFTs, R IDFTs, and R filter banks. Assuming 50% overlap, the DFT-IDFT pairs would each be in (L&plus;1) length, however simplifications requiring only one DFT-IDFT pair are possible with one additional constraint. We can derive the constraint by realizing that each input vector to the DFT of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a shift in time of M samples, therefore each frequency domain vector is separated in time from the previous or next vector by M sample periods. From (1), if j<highlight><subscript>i</subscript></highlight>&plus;<highlight><smallcaps>M</smallcaps></highlight>&equals;j<highlight><subscript>i&plus;1 </subscript></highlight>&forall; i, that is the time delay between each sub-filter is equal to the time delay between time-consecutive input vectors, then the convolution of (1) may be calculated in the frequency domain by delaying the frequency domain vectors and multiplying by the appropriate frequency domain sub-filter. These sub-filters are generated as follows. </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><smallcaps>H</smallcaps></highlight><highlight><subscript>k</subscript></highlight>(<highlight><italic>i</italic></highlight>)&equals;<highlight><smallcaps>DFT</smallcaps></highlight><highlight><italic>&lcub;h</italic></highlight><highlight><subscript>k</subscript></highlight>(<highlight><italic>n</italic></highlight>)&rcub; <highlight><italic>i&equals;</italic></highlight>0<highlight><smallcaps>, . . . ,L</smallcaps></highlight><highlight><italic>, k&equals;</italic></highlight>1<highlight><smallcaps>, . . . ,R </smallcaps></highlight><highlight><italic>n&equals;</italic></highlight>0<highlight><smallcaps>, . . . ,L</smallcaps></highlight>&emsp;&emsp;(2) </in-line-formula></paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> and h<highlight><subscript>k</subscript></highlight>(n) is the k<highlight><superscript>th </superscript></highlight>zero padded sub-filter given by:  
<math-cwu id="MATH-US-00002">
<number>2</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mrow>
                <mrow>
                  <msub>
                    <mi>h</mi>
                    <mi>k</mi>
                  </msub>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mi>n</mi>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>=</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>h</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>(</mo>
                        <mrow>
                          <mi>n</mi>
                          <mo>+</mo>
                          <mrow>
                            <mrow>
                              <mo>(</mo>
                              <mrow>
                                <mi>k</mi>
                                <mo>-</mo>
                                <mn>1</mn>
                              </mrow>
                              <mo>)</mo>
                            </mrow>
                            <mo>&it;</mo>
                            <mi>M</mi>
                          </mrow>
                        </mrow>
                        <mo>)</mo>
                      </mrow>
                    </mrow>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>n</mi>
                  </mrow>
                  <mo>=</mo>
                  <mn>0</mn>
                </mrow>
              </mrow>
              <mo>,</mo>
              <mi>&hellip;</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>,</mo>
              <mfrac>
                <mrow>
                  <mi>L</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mn>2</mn>
              </mfrac>
              <mo>,</mo>
              <mrow>
                <mi>k</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mo>,</mo>
              <mi>&hellip;</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>,</mo>
              <mi>R</mi>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mrow>
                <mo>=</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mn>0</mn>
                    <mo>&it;</mo>
                    <mstyle>
                      <mtext>&emsp;</mtext>
                    </mstyle>
                    <mo>&it;</mo>
                    <mi>n</mi>
                  </mrow>
                  <mo>=</mo>
                  <mfrac>
                    <mrow>
                      <mi>L</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                    <mn>2</mn>
                  </mfrac>
                </mrow>
              </mrow>
              <mo>,</mo>
              <mi>&hellip;</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>,</mo>
              <mi>L</mi>
              <mo>,</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>&it;</mo>
              <mrow>
                <mi>k</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mo>,</mo>
              <mi>&hellip;</mi>
              <mo>&it;</mo>
              <mstyle>
                <mtext>&emsp;</mtext>
              </mstyle>
              <mo>,</mo>
              <mi>R</mi>
            </mrow>
          </mtd>
        </mtr>
      </mtable>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00002" file="US20030005008A1-20030102-M00002.NB"/>
<image id="EMI-M00002" wi="216.027" he="36.9684" file="US20030005008A1-20030102-M00002.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Using simple properties of linearity only one DFT-IDFT pair of this length is required as all of the frequency domain subconvolutions may be calculated then summed in the frequency domain then transformed back into the time domain. The resulting architecture is illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. This system performs convolution at a rate of 1/M that of the sample rate. It is clear that the length of the DFT-IDFT pairs may be chosen with rate reduction as the principal design criterion independent of FIR filter length. This architecture then allows relatively short DFT-IDFT lengths to be used to reduce the processing rate of high order FIR filtering or correlation operations, yielding overall simple designs. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The architecture is represented in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, where the 3rd-order FIR sub-filters, h i (n), are zero-padded to length <highlight><bold>8</bold></highlight> and then transformed to the discrete frequency domain via the DFT, H i (k)&equals;DFT&lcub;h(n)&rcub;. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the input signal <highlight><bold>401</bold></highlight> is coupled through downsample blocks <highlight><bold>403</bold></highlight>.<highlight><bold>0</bold></highlight> through <highlight><bold>403</bold></highlight>.L to a DFT <highlight><bold>404</bold></highlight>. In the example shown the signal is separated into L streams with the streams 0-L having sample delay ranging from none for stream 0 to L delays for stream L. Each stream is coupled to a downsample block to provide a 50% (4 sample) overlap. The outputs of the downsample blocks are provided to the DFT <highlight><bold>404</bold></highlight> for transformation to the frequency domain. Each of the outputs 0 through L of the DFT <highlight><bold>404</bold></highlight> are frequency domain vectors which are multiplied with frequency domain filter coefficients. In the embodiment of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, each frequency domain vector is further split so that subconvolution operations can be applied. Here there are R sets of subfilters, each having L coefficients. Frequency domain vectors 0-L are provided to each set of subfilters, but with successively increasing delay. The frequency domain vectors are provided to the first set of subfilters H<highlight><subscript>1 </subscript></highlight>with no delay, to subfilters H<highlight><subscript>2 </subscript></highlight>with one delay and so on, up to subfilters H<highlight><subscript>R </subscript></highlight>with R-1 delay. The outputs of the 0 coefficients from each subfilter is summed at one of summing nodes <highlight><bold>405</bold></highlight> and provided to IDFT <highlight><bold>406</bold></highlight> for conversion back to the time domain and produce the desired filtered outputs. Similarly the outputs of each of the 1-L coefficients in each of the subfilter 1 through L are respectively A. summed and provided to IDFT 406. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> An example can illustrate some of the advantages of the present invention. Consider the PSFA of <cross-reference target="DRAWINGS">FIG. 4 a</cross-reference> 12-coefficient filter architecture is provided operating at one-fourth the rate of a serial equivalent. In addition there is a computation reduction. Assuming complex inputs a 12-tap complex filter requires 12 complex multiplies to produce an output. The architecture in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> requires 5&times;2 (DFT-IDFT)&plus;8&times;3 (frequency domain filtering)&equals;34 multiplications to produce four filtered outputs. That is 34/4&equals;8.5 multiplies per filter output, while a serial convolver obviously requires twelve multiplies per output. Assuming complex inputs, the serial convolver requires 12 complex multipliers to implement (assuming no hardware reuse), the PSFA requires 34 complex multipliers (as opposed to 48 for time domain parallelization). Since the 8-point PSFA is operating at one-fourth the rate, a CMOS implementation requires less power than the serial convolver. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Using the techniques of the present invention, any order FIR filter may be implemented with virtually any length FFT-IFFT pairs in the manner outlined above. This design method allows very high order filters to be implemented using relatively simple designs with less computation (and power) than traditional serial convolution. The following describes the general design rules for implementing embodiments of the present invention. </paragraph>
<paragraph id="P-0043" lvl="1"><number>&lsqb;0043&rsqb;</number> 1) Overlap and save method, FFT length L&plus;1 and filter length N&plus;1, M&equals;(L&plus;1)&minus;number of samples of overlap: </paragraph>
<paragraph id="P-0044" lvl="1"><number>&lsqb;0044&rsqb;</number> 2) If subconvolution is used there is an additional constraint. The delays in the frequency domain introduce sample time delays equal to the number of samples the input vector is sliding (M),this must be equal to the time (sample) delay from the beginning of one subfilter to the beginning of the next, from equation (1), for all i. (It should be noted that other delays may be possible in other designs and the delays do not necessarily need to be identical in each subfilter. Integer delays may be introduced using phase offsets in the frequency domain, but this may also change the IDFT output pins the filtered data comes out on). </paragraph>
<paragraph id="P-0045" lvl="7"><number>&lsqb;0045&rsqb;</number> Modular Embodiments </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a scheme for modularizing the present invention by having a plurality of parallel filters (PF&apos;s) themselves in parallel operation. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates a generic parallel pulse-shaping filter architecture, (8-MPF(8, y&equals;8k), for T<highlight><subscript>s</subscript></highlight>&equals;4T<highlight><subscript>sym</subscript></highlight>, and rate reduction 8k, where k is an arbitrarily large integer. Input x(n) <highlight><bold>501</bold></highlight> is provided to a plurality of PF&apos;s <highlight><bold>503</bold></highlight>.<highlight><bold>2</bold></highlight>-<highlight><bold>503</bold></highlight>.<highlight><bold>8</bold></highlight>, through a series of delays <highlight><bold>502</bold></highlight> and directly to PF <highlight><bold>503</bold></highlight>.<highlight><bold>1</bold></highlight>. The delays each provide a delay of four between each PF module. The resultant output of the parallel modular architecture is from y(n) to y(n&plus;8k&minus;1). </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The PF&apos;s can be implemented as parallel filters or as parallel filters with subconvolution. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates an embodiment of modular PF&apos;s <highlight><bold>603</bold></highlight>A and <highlight><bold>603</bold></highlight>B using parallel filters. The parallel filters operate as described above with respect to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. However, there is a delay of 4 between the two parallel filter block modules. This delay along with the downsampling at the input to the DFT, determines the overlap of data from one vector to the next. The first parallel filter block processes the first input (clock cycle), third input, that is all odd input vectors. The second block processes all the even vector inputs. There is of course &ldquo;memory&rdquo; or sample overlap between the two blocks that is provided by the simple delay (in this case four) between the input of the two blocks. We denote the modular parallel filter blocks as N-MPF(x,y), where N is the number of identical parallel blocks, x is the DFT length, and y is the downsample rate into the DFT. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the modular PF environment using subcovolution. The modular parallel filter blocks employing subconvolution are given as N-MPSF(x,y,z). The variables x and y are not free variables and are determined as described previously, and the variable z is the filter length. Each parallel filter is denoted as PF(x,y). The rate reduction for this filter is 4N, in this design 4N&equals;y. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a pair of PF&apos;s where each PF operates as described with respect to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. However, there is a delay of 4 between the PF modules. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Other embodiments of the invention are described in Appendices A-D incorporated herein. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Thus, a method for parallel subconvolution filtering has been described. 
<image file="US20030005008A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030005008A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030005008A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030005008A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030005008A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030005008A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030005008A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030005008A1-20030102-P00008.TIF" id="EMI-00008"></image>
<image file="US20030005008A1-20030102-P00009.TIF" id="EMI-00009"></image>
<image file="US20030005008A1-20030102-P00010.TIF" id="EMI-00010"></image>
<image file="US20030005008A1-20030102-P00011.TIF" id="EMI-00011"></image>
<image file="US20030005008A1-20030102-P00012.TIF" id="EMI-00012"></image>
<image file="US20030005008A1-20030102-P00013.TIF" id="EMI-00013"></image>
<image file="US20030005008A1-20030102-P00014.TIF" id="EMI-00014"></image>
<image file="US20030005008A1-20030102-P00015.TIF" id="EMI-00015"></image>
<image file="US20030005008A1-20030102-P00016.TIF" id="EMI-00016"></image>
<image file="US20030005008A1-20030102-P00017.TIF" id="EMI-00017"></image>
<image file="US20030005008A1-20030102-P00018.TIF" id="EMI-00018"></image>
<image file="US20030005008A1-20030102-P00019.TIF" id="EMI-00019"></image>
<image file="US20030005008A1-20030102-P00020.TIF" id="EMI-00020"></image>
<image file="US20030005008A1-20030102-P00021.TIF" id="EMI-00021"></image>
<image file="US20030005008A1-20030102-P00022.TIF" id="EMI-00022"></image>
<image file="US20030005008A1-20030102-P00023.TIF" id="EMI-00023"></image>
<image file="US20030005008A1-20030102-P00024.TIF" id="EMI-00024"></image>
<image file="US20030005008A1-20030102-P00025.TIF" id="EMI-00025"></image>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of filtering a data signal having a data rate M comprising: 
<claim-text>providing said data signal to a first downsampler; </claim-text>
<claim-text>coupling the output of said downsampler to a DFT for converting said input signal to k frequency domain vectors; </claim-text>
<claim-text>multiplying said k frequency domain vectors with k subfilter coefficients to generate k frequency domain filtered signals; </claim-text>
<claim-text>summing said k frequency domain filtered signals and inputting said summed signals to an IDFT; </claim-text>
<claim-text>converting said frequency domain filtered signal to a time domain filtered signal using said IDFT. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step of covolving said frequency domain vector comprises providing said DFT output to a plurality of sub filters Hj where j&lcub;1,k&rcub; and for each subfilter said DFT output is delayed by j&minus;1. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> further including N downsamplers DN and for each downsampler the input signal is delayed by N&minus;1.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005008A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005008A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005008A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005008A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005008A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005008A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005008A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
