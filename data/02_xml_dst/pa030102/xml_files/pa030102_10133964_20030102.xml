<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004746A1-20030102-D00000.TIF SYSTEM "US20030004746A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00001.TIF SYSTEM "US20030004746A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00002.TIF SYSTEM "US20030004746A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00003.TIF SYSTEM "US20030004746A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00004.TIF SYSTEM "US20030004746A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00005.TIF SYSTEM "US20030004746A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00006.TIF SYSTEM "US20030004746A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00007.TIF SYSTEM "US20030004746A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00008.TIF SYSTEM "US20030004746A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00009.TIF SYSTEM "US20030004746A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00010.TIF SYSTEM "US20030004746A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00011.TIF SYSTEM "US20030004746A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00012.TIF SYSTEM "US20030004746A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00013.TIF SYSTEM "US20030004746A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00014.TIF SYSTEM "US20030004746A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00015.TIF SYSTEM "US20030004746A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00016.TIF SYSTEM "US20030004746A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00017.TIF SYSTEM "US20030004746A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00018.TIF SYSTEM "US20030004746A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00019.TIF SYSTEM "US20030004746A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00020.TIF SYSTEM "US20030004746A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00021.TIF SYSTEM "US20030004746A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030004746A1-20030102-D00022.TIF SYSTEM "US20030004746A1-20030102-D00022.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004746</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10133964</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020424</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/60</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Scenario based creation and device agnostic deployment of discrete and networked business services using process-centric assembly and visual configuration of web service components</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60286230</doc-number>
<document-date>20010424</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Ali</given-name>
<family-name>Kheirolomoom</family-name>
</name>
<residence>
<residence-us>
<city>Danville</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Tim</given-name>
<family-name>Buss</family-name>
</name>
<residence>
<residence-us>
<city>Novato</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Alex</given-name>
<family-name>Tsibulya</family-name>
</name>
<residence>
<residence-us>
<city>Daly City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Thomas</given-name>
<family-name>Clement</family-name>
</name>
<residence>
<residence-us>
<city>Berkeley</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Christopher</given-name>
<family-name>Foskett</family-name>
</name>
<residence>
<residence-us>
<city>San Francisco</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Paul Davis; Heller Ehrman White &amp; McAuliffe</name-1>
<name-2></name-2>
<address>
<address-1>275 Middlefield Road</address-1>
<city>Menlo Park</city>
<state>CA</state>
<postalcode>94025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The invention provides a process-centric, scenario-driven business service assembly software environment that uses encapsulated, iconographic building blocks&mdash;each representing a discrete Web Service component to be executed within a business service&mdash;to logically depict service processes as well as complex relationships between these processes, their audiences, and means of deployment. Fundamental to the invention are an Interactive Flow Assembler, an Interactive Flow Engine, a design-time Service Manager, and an implicit XML-based data and process model. Business users employ the Interactive Flow Assembler to create online business services that are executed by the Interactive Flow Engine by chaining a series of logical business steps that codify business rules, collect data, and take actions. The Services Manager leverages Web Service standards to provide collaborating business analysts and IT resources with an environment in which to centralize business-relevant decisions such as business rules, authorized data sources, design-time and runtime roles and profiles, and deployment characteristics to change the appearance and behavior of applications built using the Interactive Flow Assembler. The invention&apos;s intrinsic data and process model facilitate easy integration of networked business services built using the invention as well as the underlying datasets captured by the online business services. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a continuation of and claims the benefit of U.S. Ser. No. 60/286,230 filed Apr. 24, 2001, which application is fully incorporated by reference herein.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The World Wide Web has created the opportunity for companies to create and distribute applications that render and collect information interactively with customers and other key constituents in order to engage those audiences and deliver valued business services online. Unfortunately, the cost of creating these online applications in both time and money has limited the ability of businesses to offer, modify and re-deploy Web applications in response to continuously changing market conditions. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Many Web applications manifest the user or market-facing aspects of a business&apos; internal and external processes. These processes may represent a significant value to a business, but they are typically proprietary and hence re-implemented across similar businesses. While data sharing and syndication has become more common on the Web the difficulty of syndicating business processes has effectively prevented this potentially lucrative and efficient business model from being widely adopted. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Web-based interactive applications between a business and its customers typically occur within a single session at the computer. However, many business processes have multiple stages that may comprise a number of smaller interactions and potentially involve multiple parties inside or outside corporate boundaries at different points in time. For example, a process might be initiated by an interaction with a customer who posts a request for a product or service. After reviewing the request internally, the process might require a separate interaction with a distinct business unit or division to fulfill the previous request or otherwise obtain a needed component or service. Current Web applications cannot effectively model and expose networked business services because of the complexity of designing and implementing this type of staged, multiple-party interaction processes resulting in a monolithic application that is difficult to maintain and customize. The method and system of the present invention leverages the emerging XML Web Services technology to create a service-based architecture that allows enterprises to assemble modular business services that perform discrete functions and are targeted at specific audiences inside or outside of the enterprise. These business services can then be dynamically linked together to form networked business services that manages the lifecycle of service request and delivery processes spanning departmental and company boundaries. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The invention is a scenario-based design, deployment, and management environment that uses state-of-the-art in Internet and Web services technologies to allow businesses to automate the processes associated with delivering valued business services online and fully exploit the benefits and efficiencies offered by successful online strategies. The invention enables rapid, visual assembly of dynamic, scalable, scenario-driven interactions called NetScenarios. By dramatically simplifying application building and service delivery processes, the invention transforms online service assembly and deployment from a technological hurdle to a business imperative. The invention abstracts technical implementation details to create an environment where business experts are empowered to create, deliver and manage their own online solutions. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The invention exploits the introduction of open Internet and XML Web Service technologies such as XML, UDDI, WSDL and SOAP to leverage the strength of the Web, distributed networks, and intelligent access devices for creating and reusing company and external assets. By using modular Web services as building block components, the invention provides a natural and structured environment for rapid and effective collaboration between business experts and application developers, programmers and other information technology (IT) professionals. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The invention enables the combination of individual NetScenarios into larger multi-stage, multi-party networked business services that automate interactive processes spanning departmental and company boundaries. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The invention enables the syndication of complete interactive business processes to value chain partners and distributors to create new online marketing channels and promote new business opportunities for the enterprise. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is an illustration of Scenario Map Flow Assembly of the present invention. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts the Dynamic Directed Graphing Algorithm of the present invention. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts the Automated Branch Definition Based Upon User Selectable Options of the present invention. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts the Dynamic Mapping and Binding of Step Inputs and Outputs of the present invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts the Selection of Web Service Steps Publish by IT for Business Use of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts the Dynamic Discovery of Web Service Components from UDDI of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts the Business-to-IT Collaboration with Integration with Native Development Environments of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts the Business Definition of Web Service Functional Requirements with Inputs and Outputs of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts the Defining Step Placeholder </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Status to Alert IT to New Web Service Request of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts the Service Manager to Abstract Technical Details from Business Users of the present invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> depicts the Example of Deployment-Time Provisioning to Alter Runtime Behavior of the present invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts the Flow Segment Modeling and Control of User Navigation of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> depicts the Scenario Nesting Through Redirector Platform Service of the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts the Scenario Nesting Through Redirector Platform Service of the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> depicts the Gather-Submit Service Design Pattern of the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> depicts the Gather-Submit Transaction Model of the present invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> depicts the Merged Gather-Submit Operation of the present invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> depicts the NetScenario Logical Model of the present invention. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> depicts the NetScenario Physical Model of the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> depicts the NetScenario Operational Model of the present invention. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> depicts the NetScenario Compiler Operation of the present invention. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> depicts the NetScenario Compiler Output Generation of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The method and system present invention provides a robust business service assembly, configuration, deployment and management environment that leverages Web services to allow organizations to conceive, create, and deploy new scenario-driven services across a variety of online channels and smart access devices more quickly and with greater flexibility than previously possible with traditional development tools. The software of the present invention consists of two separate components, called NetScenario Studio and NetScenario Business Server. </paragraph>
<paragraph id="P-0033" lvl="7"><number>&lsqb;0033&rsqb;</number> Overview of the Method and Apparatus of the Present Invention </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> NetScenario Studio is an integrated environment for the design, testing, staging and deployment of the Web-based processes associated with delivering business services to customers, partners and other constituents of the enterprise. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The following section describes the major concepts in NetScenario Studio, including: </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> 1. Roles and Phases </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> 2. Business Service Assembly </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> 3. Staging and Deployment </paragraph>
<paragraph id="P-0039" lvl="7"><number>&lsqb;0039&rsqb;</number> Roles and Phases </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Use of the NetScenario Studio can be broken down into a number of distinct phases, including planning, assembly, staging, deployment and management. The initial phase is NetScenario planning, whereby the overall business objectives and focus of the scenario-based service is defined. This is followed by the assembly phase that includes distinct NetScenario design, configuration and formatting activities that combine to create the end NetScenario business service. After the assembly phase is complete, NetScenarios are staged and deployed for production use. At runtime, after it has been deployed, users interact with the enterprise and experience the business service by executing the delivered NetScenario. Finally, interested and authorized business managers can view utilization reports and otherwise monitor the results of NetScenarios that have been experienced through the various channels and devices. Throughout these phases the NetScenario Studio environment provides support for administrative tasks like controlling user rights and access privileges. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Users of the product fall into the following categories:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="35PT" align="left"/>
<colspec colname="2" colwidth="126PT" align="left"/>
<colspec colname="3" colwidth="56PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Role</entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>Name</entry>
<entry>Responsibilities</entry>
<entry>Scope</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Business</entry>
<entry>Analyzes business needs and defines</entry>
<entry>Involved in</entry>
</row>
<row>
<entry>Analysts</entry>
<entry>logical application model to accomplish</entry>
<entry>planning,</entry>
</row>
<row>
<entry></entry>
<entry>the needs. Works with developers to</entry>
<entry>assembly,</entry>
</row>
<row>
<entry></entry>
<entry>define and refine requirements for steps</entry>
<entry>staging,</entry>
</row>
<row>
<entry></entry>
<entry>extending an existing set of available</entry>
<entry>deployment, and</entry>
</row>
<row>
<entry></entry>
<entry>services,</entry>
<entry>management</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>phases.</entry>
</row>
<row>
<entry>Web</entry>
<entry>Designs look and feel of Web pages.</entry>
<entry>Involved</entry>
</row>
<row>
<entry>Designers</entry>
<entry>Addresses branding and related issues in</entry>
<entry>primarily</entry>
</row>
<row>
<entry></entry>
<entry>provisioned and non-provisioned</entry>
<entry>in the assembly</entry>
</row>
<row>
<entry></entry>
<entry>NetScenarios,</entry>
<entry>and deployment</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>phases.</entry>
</row>
<row>
<entry>De-</entry>
<entry>Works with Business Analysts to define</entry>
<entry>Involved in the</entry>
</row>
<row>
<entry>velopers/</entry>
<entry>and refine requirements for steps extend-</entry>
<entry>assembly,</entry>
</row>
<row>
<entry>IT</entry>
<entry>ing the existing set of available services,</entry>
<entry>staging and</entry>
</row>
<row>
<entry></entry>
<entry>Implements or discovers Web services</entry>
<entry>deployment</entry>
</row>
<row>
<entry></entry>
<entry>meeting agreed upon requirements.</entry>
<entry>phases.</entry>
</row>
<row>
<entry>Customers</entry>
<entry>Interacts with published NetScenarios to</entry>
<entry>Involved at the</entry>
</row>
<row>
<entry></entry>
<entry>obtain information and/or enter data for</entry>
<entry>runtime stage</entry>
</row>
<row>
<entry></entry>
<entry>processing.</entry>
<entry>only.</entry>
</row>
<row>
<entry>Business</entry>
<entry>Views data collected from customers after</entry>
<entry>Involved in the</entry>
</row>
<row>
<entry>Users</entry>
<entry>the interactions have been completed.</entry>
<entry>management</entry>
</row>
<row>
<entry></entry>
<entry>Provisions subscribed NetScenarios,</entry>
<entry>phase after</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>the runtime</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>interaction</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>with the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>customer has</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>been completed.</entry>
</row>
<row>
<entry>Adminis-</entry>
<entry>Determines rights and privileges of</entry>
<entry>Involved in all</entry>
</row>
<row>
<entry>trators</entry>
<entry>Business Analysts, Developers, IT</entry>
<entry>phases of product</entry>
</row>
<row>
<entry></entry>
<entry>personnel Customers and Business users.</entry>
<entry>use and operation.</entry>
</row>
<row>
<entry></entry>
<entry>Responsible for physical deployments and</entry>
</row>
<row>
<entry></entry>
<entry>component configuration.</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0042" lvl="7"><number>&lsqb;0042&rsqb;</number> Business Service Assembly </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The methods and systems of the present invention provide the business service assembly environment that permits business analysts to design and implement modular scenarios by combining &ldquo;steps&rdquo; corresponding to interactive user presentation pages with steps that implement business decisions and interaction logic. These scenarios can then be dynamically delivered to a variety of channels including corporate Web sites, enterprise portals, rich email messages, UDDI, and intelligent access devices such as mobile phones and personal digital assistants (PDAs). For example, one embodiment of the methods and systems of the present invention for obtaining price quotes can be implemented as the following sequence of steps: </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> 1. An Interaction step (e.g. a Web page) asking the customer for a description of the item. </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> 2. A step that calls a Web service to look up possible corresponding merchandise using a full text search engine. </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> 3. An Interaction step that presents the results of the search along with associated price quotes. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> There are several sources of the steps used to build the methods and systems of the present inventions. First, a Business Step Library is included as a standard part of the product. Second, if the enterprise has developed custom steps, it can add them to the Step Library for general use. Finally, when the business user needs a step that does not currently exist, he or she can either dynamically create a step by discovering Web services from public or private UDDI registries or request a Web service implementation from IT. The IT request may be fulfilled using either an internally developed service or an external Web service. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> By abstracting low-level programming details from the primary audience of business analysts, the methods and systems of the present invention uniquely empowers the business analyst to define fully functional multi-service, device-independent interactions without significant dependencies on developers, programmers and other IT resources. </paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> Service Assembly Environment </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In one embodiment, methods and systems of the present invention provide a library of building blocks called Business Steps together with a Scenario Map representing the logical view of the business service process to be designed and assembled using the environment. The steps are dropped onto the Scenario Map and visually connected to depict the interaction flow and the associated user experience. Steps that support conditional branching enable the designer to apply business rules to control the path taken by users upon invoking the business service. The Scenario Map is a directed flow graph that upon compilation will execute a dynamic computer application whose runtime behavior is driven by the logic represented by the map. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Graphical representations of electronic processes are typically assembled by placing unconnected process components on a drawing surface, then manually connecting to form the process them by drawing links connecting the components. The invention introduces a new method that simplifies the creation of the Scenario Map, a graphical representations of an electronic process. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, Scenario Maps contain linked Start and End steps when first created. Additional steps are included on the map by selecting them from the Business Step Library and dropping them onto an existing link between steps. The methods and systems of the present invention auto-generate connections between new and existing steps based upon the insert point of the new step. The methods and systems of the present invention expedite the process of connecting business steps. In one embodiment, the methods and systems of the present invention automatically place the business step as soon as the step is dropped onto an existing flow line and automatically establishes connection lines to steps before and after it thus eliminating the need to delete links, add new steps in the right location and reestablishing links. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the following sequence can be followed to connect business steps for the purpose of connecting input and output. </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> 1. Select Step 3 from the Step Library through a left mouse click and drag it over the line where it must be placed. </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> 2. The mouse-over action detects valid drop points and places an insertion point symbol visually notifying the designer that it is a valid drop point. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> 3. The de signer un-clicks the left mouse and the selected step is visually placed between steps 1 and 2. The input and output connection lines for Step 3 are automatically drawn replacing the previous connection line between Steps 1 and 2. </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> 4. All subsequent steps to the right of the insertion point are automatically moved to new coordinates to accommodate the newly added step. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> embodiment, each step has &ldquo;Last Node ID&rdquo; and &ldquo;Next Node ID&rdquo; designators. When Step 3 is dropped at the insertion point, Step 1.NextNodeID is linked to Step3; Step3.LastNodeID is linked to Step 1; Step3.NextNodeID is linked to Step2; Step2.LastNodeID is linked to Step3 The coordinates of all subsequent steps on the map are recalculated to accommodate Step 3 in line between Steps 1 and 2. The lines are redrawn to accommodate the steps&apos; new coordinates. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> With the methods and systems of the present invention, the designer can seamlessly move an existing step from one flow line to another by dropping it on top the desired location. To accommodate branching in the interaction flow for the purpose of conditional evaluations (or business rules), the approach is to define the various potential outcomes of the rule regardless of the actual rule such that a flow line for that outcome can be created. A similar technique is used to accommodate looping. This technique automatically creates a correct structure for the underlying application program. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> As Business Steps are added to the Scenario Map, the invention further guides the graphical business service definition by automatically validating intended placement locations to ensure that only structurally and logically correct connections are permitted by users. This prevents productivity loss and ensures more rapid creation of valid service processes that fulfill their intended business purpose. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> After the user makes a change to the scenario map&mdash;such as moving a step, deleting a step, adding a step, or configuring a step&mdash;the invention validates that all business logic contained inside the step is valid. Invalid conditions include missing values, invalid values (a string in a number field, for example), or referencing other steps that will not have been executed. The system performs just-in-time validation by performing a type check comparing the data type of the entered values against the data types associated with configuration fields within each step. Incompatible types are visually flagged by dynamically placing an error icon on the affected step. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Interaction logic, flow branches and business rules are defined within Scenario Maps through placement of Decision Steps. With reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, when a Decision Step is placed on the map and configured to correspond to a fixed list of user selectable options, the invention automatically extends the Scenario Map to include labeled exit branches for each available option that converge at the input of the step that immediately follows the Decision Step at the time it is placed on the map. Steps executed only when a branch is executed are added to the branch from the step library or moved from other parts of the map by dragging and dropping. This further accelerates graphic service modeling by avoiding the need to define these branches and their associated business rules explicitly. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> After the user changes a List&apos;s values, any step on the map that uses those values is updated to reflect the change. For example, assume options &ldquo;a&rdquo;, &ldquo;b&rdquo;, or &ldquo;c&rdquo; were contained in a list and referenced by a decision step. If the list is updated to include &ldquo;d&rdquo;, the decision step will then automatically acquire an additional branch labeled &ldquo;d&rdquo;. If &ldquo;d&rdquo; is then removed, the branch will also be removed. If the branch contains additional steps, the system would then automatically disable these steps and label them as inactive allowing the user to safely move these steps to another location in the scenario map. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Business service processes and user experiences are described as a directed flow graph through the sequential placement of Business Steps on the Scenario Map. Individual steps in the Step Library are represented as iconographic elements. After the user drags and drops the step in place, they configure the step by double-clicking on the icon to launch a dialog box for setting any configurable behavior of that step. With reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, interface element values and outputs from previous steps are dynamically detected and made available for use during the configuration of any step. The auto-mapping feature of the invention automatically suggests a default mapping of the appropriate inputs and outputs amongst various business steps. Once input and output parameters have been properly mapped between steps, the invention automates the final binding of the steps to create a fully functional service process model for execution at runtime. The Scenario Map created in this manner is stored as an XML document that represents the contract for the business service and fully describes the logical design of the service. Because the Scenario Map is a logical rather than physical representation of both procedural and visual aspects of the service, it can be converted (compiled) into distinct forms that execute the Business Service in various environments. For example, interaction (visual) steps can be compiled into a form that can be rendered by the Server Software of the present invention or alternatively into a form that can be rendered as an ASP.NET web page. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The inputs available to any given step are derived from the outputs of all steps that have executed prior to that step (steps visually appearing to the left of the step). The collection of available steps for data mapping is determined for each step individually by one of several means, including: </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> a) Find all paths to the step from the start of the process </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> b) Keep track of all steps and keep a &ldquo;breadcrumb&rdquo; of steps that have executed, labeling the step as it is drawn. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In order to facilitate ongoing review and refinement of the intended business service, the invention allows the Business Service to be tested in a Web environment at any point during this design process. On demand, the service process model defined by the Scenario Map and its underlying XML document structure are compiled to create an executable version of the Business Service that is then previewed inline. This permits testing overall usability, interaction logic, branding and any other characteristics of the business service under design. Please refer to the &ldquo;Technical Details&rdquo; section for details of the compilation process. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Difficulties arising from user control of the process become more severe when a portion of the NetScenario experienced by the user is a nested NetScenario potentially outside the control of the business publishing the first NetScenario. When one company provides a service that includes a series of one or more Web user interfaces with the intent for another company to use it as a part of a larger Web application, the client company typically wants the pages provided by the service to appear consistent with others that may be part of their application. There are two aspects to this, the general look of the page (colors, fonts etc) and its layout (where interface elements are located on the page). These two aspects require different solutions. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> By using an interception model in which the primary NetScenario server maintains the connection with the browser, it can directly manage the user navigation problems. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The first aspect, &ldquo;look&rdquo;, is addressed by using a predefined Web page presentation model that can be themed. The page model contains certain elements whose final presentation is left until runtime. Themes containing these definitions are defined externally from the NetScenario. Theme definitions may contain both graphics and text styles. At runtime a particular theme may be chosen which will give a NetScenario a particular look. Themes are parameterized on NetScenarios to the extent that the caller may override some or all the theme. The intent is that the theme instructions can be passed down to nested NetScenarios, or the nested NetScenarios may be instructed to defer all or part of their theme application to the caller. This arrangement allows nested NetScenarios to apply branding information, if so desired, so that the origin of the nested NetScenario is not lost. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The second aspect, &ldquo;layout&rdquo;, is addressed by importing that part of the NetScenario definition that describes the presentation into the consuming NetScenario when the consuming NetScenario is being designed. NetScenarios store their UI definitions in a way that can be separated from their underlying logic. By importing the UI the consumer gets full control of both theme and page layout (within the limits allowed by the NetScenario model). The underlying NetScenario is effectively converted into a sequence of Web service calls each of which encapsulates the logic between their respective pages. Thus they dictate which page of the UI should be displayed next and which Web service should be called after that page. The consuming NetScenario is responsible for mapping data from these Web service calls into the appropriate pages and returning data collected from the pages to the appropriate Web service. NetScenario Studio automates this mechanism. This mechanism allows the developer of the consuming NetScenario control over additional graphical embellishment of those pages beyond that typically allowed by the themes. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The two aspects are treated separately since the first, &ldquo;look,&rdquo; can be applied with no knowledge of the internal workings of the nested NetScenario. The nested NetScenario can potentially be upgraded without affecting the caller so long as it maintains its calling interface. Maintaining a calling interface is often referred to as a contract. The second, layout, is more intrusive since the nested NetScenario must expose the pages it expects to display. Once the caller has bound to these, they become part of the contract between the caller and the called. This limits the type of upgrades the can be made to the nested NetScenario without requiring the calling NetScenario to be re-built. </paragraph>
<paragraph id="P-0074" lvl="7"><number>&lsqb;0074&rsqb;</number> Business Step Extensibility </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The NetScenario Studio environment includes a comprehensive Business Step Library for building service processes and the interactive functionality they contain. The invention enables near limitless extensibility by allowing business users to visually and without programming discover, select and integrate any WSDL-compliant Web Service component as part of this library. With reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, these Web Services can include those specifically developed and made available to business users by their IT counterparts (see Section 2C, Business-to-IT Collaboration below), as well as Web Services made available through public or private UDDI registries that provide the required business functionality. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The following steps are used to configure and abstract the web service for use within the NetScenario. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> 1. From within Service Manager, the IT user creates a new Service and specifies the underlying web service. The web service may be entered in multiple ways including the following: </paragraph>
<paragraph id="P-0078" lvl="2"><number>&lsqb;0078&rsqb;</number> Manually. IT user enters the URL to the web service. </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> Via integration with programming environments such as Microsoft Visual Studio NET or Borland JBuilder. </paragraph>
<paragraph id="P-0080" lvl="2"><number>&lsqb;0080&rsqb;</number> Via discovery from UDDI public or private registries. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> 2. Once the web service has been selected, the IT user may provide additional configuration for the web service that transforms the web service into a business friendly entity. From the Business User&apos;s perspective, they are working with an abstraction of the service thus enabling them to focus on the goal rather than the implementation. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> 3. The IT can then make the service available to the Business User and the collaboration between Business User and IT user continues. At this point the Business User and the IT Users are engaged in an iterative process which will ultimately result in a service that meets the business requirements. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> 4. From within the NetScenario, and specifically the Service Step, the Business User may select the service which they collaborated on with the IT user. To ensure the highest level of usability for the Business User, the Service Step provides auto-mapping and synchronization between the originally requested &ldquo;service placeholder&rdquo; (an method interface prototype) and the modified service abstraction which resulted from the iterative collaboration process. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> As new Business Step requirements are identified, NetScenario Studio users begin discovering new steps through placement of a special Service Step at the appropriate execution point in the Scenario Map. With reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and as described above, the IT user may discover the underlying web service from a UDDI registry. The IT user discovers the web service using the UDDI query tools provided with the platform. The invention further facilitates this by automatically detecting the available Web Service methods and their corresponding business functions, as well as the input and output parameters for each method that will ultimately be mapped to the service process using the procedure described in Section 2a above. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> As an extension of the above design-time selection and binding of Web Services, the invention allows for the definition of groupings containing multiple Web Services with functionally equivalent methods and contract schemas. At runtime, one of the constituent Web Services is dynamically selected and bound to the service process based upon business rules and operational criteria such as cost, availability, performance, etc. Alternatively, the runtime binding information may be discovered via a query to a public or private UDDI registry, further supporting the distributed management of Web Services. The parameters for this runtime query may be collected from the user through an interaction step or provided as an output of other action-oriented steps placed on the Scenario Map such as Web services, database lookups, and similar functions. This grouping mechanism is managed within the Service Manager using the following process: </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> 1. The IT user follows the processes described above for selecting and configuring a web service that is then made available to the business user. Once the interface for the web services is agreed upon, the IT user may specify additional web service end points that could process the requests made to the service of the present invention. </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> 2. The IT user enters additional URLs which should represent web services with identical WSDL interfaces. </paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> 3. For each URL specified, the Service Manager will validate the compatibility of the URL with the WSDL specified for the originally configured web service. This ensures that the NetScenario will be able to consume the web service at run-time. From the Business User&apos;s perspective, they are unaware that multiple web services could be used to process the logical service request. These details are more appropriate as an IT User&apos;s responsibility. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> As an advanced feature, the IT user may also select an incompatible, yet logically equivalent, web service and then use an additional abstraction mechanism to map the logical definition for the web service to the physical definition for the particular web service which does not have an identically compatible WSDL interface. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The following example demonstrates this point. Let&apos;s imagine a Business User has requested the &ldquo;Validate Credit Card&rdquo; service which the IT User will implement using web services from partner financial institutions which provide web services in this area. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Note: the URLs and other technical information below (within this sub-claim) is offered as a &ldquo;pseudo-code&rdquo; example only and is not intended to be representative of the underlying workings of a particular web service toolkit. </paragraph>
<paragraph id="P-0092" lvl="7"><number>&lsqb;0092&rsqb;</number> http://financialPartnerA/CreditCardTools/ValidateCreditCard </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Method: (string CustomerNumber, string CreditCardNumber, date ExpirationDate)&rarr;string ConfirmationID </paragraph>
<paragraph id="P-0094" lvl="7"><number>&lsqb;0094&rsqb;</number> http://financialPartnerB/CreditCardUtilities/CreditCardValidation </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Method: (integer PartnerNumber, string CCNumber, string ExpireDate)&rarr;string integer ConfirmationID </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In this example, while the two web services accomplish the same logical goal, they have two primary differences in their calling syntax: a) the parameter names are different, and b) the parameter types are different. Using the advanced service abstraction functionality within the Service Manager, the IT user may include these dissimilar web services within the Service Group which process the Business User&apos;s &ldquo;Validate Credit Card&rdquo; service requests. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The IT User is provided fall control over this mapping enabling maximum flexibility in building a robust Service Group with multiple business partners. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> IT personnel may reference and configure technical resources (for example, using a third party Web Service, an internally-developed Web Service, a .NET assembly, a COM object, EJB object or database query exposed through a Web Service) to abstract the complexities of the underlying technologies such as WSDL, SOAP, and XML. A &ldquo;Business Resource&rdquo; is created to represent the underlying technical resource in a business friendly and relevant manner. These Business Resources may be assigned additional meta-data or attributes in a manner that allows the Business Analyst to easily find resources which are meaningful to their particular business problem. Valid attributes for the Business Resource are defined within a classification model that may be defined by either the IT personnel or the Business Analysts for maximum flexibility. Additionally, the query interface for these Business Resources may include public or private UDDI registries as the data source for the query. A typical Business User will work with numerous Technical Resources within and across NetScenarios. The two sides of this functionality include: a) Resource classification and b) Resource discovery based on query. A Resource is classified before it is queried. These are accomplished as follows: </paragraph>
<paragraph id="P-0099" lvl="7"><number>&lsqb;0099&rsqb;</number> Resource Classification: </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> From within the Business Resource Center, the Business User selects a particular Business Resource. (Note: &ldquo;Business Resource&rdquo; is synonymous with references to &ldquo;services&rdquo;&mdash;but not web services&mdash;in this document. Services are generically the term that applies to the entity collaborated on by Business Users and IT Users. Business Resources refer to the Business User&apos;s view of the service. Technical Resource refers to the IT User&apos;s view of the resource.) </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Once the Business User has the Business Resource locked for edit, they may classify the resource using a set of attributes. Examples of these attributes include &ldquo;category&rdquo; (e.g. finance, human resources, etc.) and &ldquo;source&rdquo; (e.g. originated internally, 3<highlight><superscript>rd </superscript></highlight>party, customer request). The attributes are set for the resource and any Business or IT User who has permissions to access the resource may discover the resource via a query within the Business Resource Center. </paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> Resource Discovery: </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> From within the Business Resource Center or the Service Step, the Business User will navigate to &ldquo;Service Discovery&rdquo; and enter their search criteria. The search criteria entry automatically conforms to the classification system defined for the account. This provides a very friendly and intuitive means of finding the resources since the Business User will be directed to enter search criteria that conforms to a set of valid parameters and values. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Upon invocation of the query, the Business User is presented with the list of resources matching the search criteria. At this point the Business User may refine their search criteria to further narrow (or broaden) the scope of the search, or they may drill into a selected resource for edit/review purposes. Additionally, in the Service Step context, the Business User may select the found resource for use in the NetScenario. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> As companies move toward a Services Oriented Architecture, applications become more dependent on Web Services that are distributed outside well-controlled Enterprise boundaries. These dependencies upon external Web Services require rapid adaptation to changes in the availability of external systems. Multiple companies may provide similar (if not exact) Web Services in a particular functional area. For example, there will probably be multiple providers of a credit card authorization Web Services. Each of these credit card validation Web Services may conform to an industry standard contract for such functionality. After registering and configuring a set of Web Services which adhere to the same WSDL contract, IT personnel can group these Web Services into a Virtual Web Service. The IT personnel may then define a set of binding rules that dictate which specific Web Service will be used by the NetScenario at run-time. This brokering behavior enables the NetScenario software to dynamically react to disruptions in resource availability with no intervention from IT personnel. The concept of Service Groups was introduced in a prior section. This sub-claim elaborates on the dynamic identification and selection of web services at run-time. Once the IT User defines a Service Group (a grouping of web services that behave logically the same and usually adhere to a common WSDL interface) the IT User may configure the Service Group with a set of rules. These rules dictate the run-time selection of a particular web service to process the service request. Multiple rules may be associated with a Service Group and these rules may be grouped and prioritized. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In addition to the basic rules that are available within the Service Group Manager, the Service Group rules architecture is extensible and allows the installation of new rules without requiring a new product version. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> To configure the rules associated with a Service Group, the IT user would do the following: </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> From within the Service Group Manager and a selected Service Group, the IT User Navigates to &ldquo;Rules&rdquo;. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> The IT User could then enable, disable, or configure one or more rules. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> At run-time, the Service Group rules manager uses the rules configuration to dynamically determine which web service adheres to the defined set of rules. These rules are managed independently from the service definition and may therefore be altered at run-time with no disruption to the NetScenario. To avoid invalid configurations, the Service Group Manager will also disallow the IT User from configuring the rules in such a manner that eliminate all possible web services in the group. </paragraph>
<paragraph id="P-0111" lvl="7"><number>&lsqb;0111&rsqb;</number> Business-to-IT Collaboration </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> While the target users for NetScenario Studio are business analysts and others with detailed understanding of the business domain, the invention acknowledges the complexities associated with creating online solutions by providing a structured collaboration environment between business users and their IT counterparts. This collaboration mechanism allows business users within NetScenario Studio to request new business functions, integration links and other technical resources from programmers and developers that are subsequently created and returned to the requesting user as standards-based Web Services. The invention leverages Web Service standards and specifically WSDL contracts to enable business-level requests for resource enablement, thus providing a flexible yet sophisticated mechanism for bi-directional contract-based negotiation between business analysts and IT personnel. </paragraph>
<paragraph id="P-0113" lvl="7"><number>&lsqb;0113&rsqb;</number> Design-Time Project Teams </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Entire project teams will typically utilize NetScenario Studio. Similar to other enterprise development environments, the NetScenario software supports teams of users working in tandem to create business services. A major difference in the approach of the NetScenario Studio of the present invention and traditional enterprise programming environments is the present invention&apos;s inclusion and participation by cross-functional team members, from the business manager to the Web development engineers to IT specialists. Examples of the benefits of the NetScenario Studio&apos;s collaborative features for project team members include: </paragraph>
<paragraph id="P-0115" lvl="2"><number>&lsqb;0115&rsqb;</number> Explicit recruitment of account users into a project team for each scenario </paragraph>
<paragraph id="P-0116" lvl="2"><number>&lsqb;0116&rsqb;</number> Assignment of roles and responsibilities to project team members </paragraph>
<paragraph id="P-0117" lvl="2"><number>&lsqb;0117&rsqb;</number> NetScenario task list views for personal and group to-do&apos;s, grouped by project team member </paragraph>
<paragraph id="P-0118" lvl="2"><number>&lsqb;0118&rsqb;</number> Visual markers (annotations) denoting who last worked on a business step and any comment </paragraph>
<paragraph id="P-0119" lvl="2"><number>&lsqb;0119&rsqb;</number> Dynamically generated views and access to only those design elements to which a given project team member has access </paragraph>
<paragraph id="P-0120" lvl="2"><number>&lsqb;0120&rsqb;</number> E-mail and visual notification between NetScenario Studio users </paragraph>
<paragraph id="P-0121" lvl="7"><number>&lsqb;0121&rsqb;</number> The Importance of Roles </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> A key enabler for the NetScenario Studio&apos;s design-time collaborative features is fine access control via authenticated roles. Roles represent sets of capabilities or access privileges assigned to multiple users to create, publish, deploy and manage scenarios. In addition to limiting access privileges to key platform functions, roles provide the enabling infrastructure for project team collaboration across various phases of the NetScenario lifecycle. </paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> Integration with Native Development Environments </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> To support collaboration with a technical IT developer, the business analyst can define the inputs and outputs of the step as well as provide a textual description of the functional scope, data manipulation or lookup that needs to be accomplished. With reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the Upon completion of a business resource request, the invention automatically forwards the request to the developer&apos;s native development environment (for example, Microsoft Visual Studio NET) through a special add-in component that manifests itself as a Technical Resource Center within that native environment. When the IT Developer opens the Technical Resource Center Add-In within their development environment, a &ldquo;to do&rdquo; list tailored to their role indicates that a Web service needs to be created and bound to the unfinished step. To facilitate the creation of an appropriate Web service, the step produces a WSDL file describing the previously defined inputs and outputs. The development platform wizard then uses the WSDL file to define interfaces, comments and documentation for the objects that need to be implemented. Because of this method, the developer is able to contribute to the development of an online solution by performing specific well-identified tasks without needing to learn and understand the larger goal. This contrasts with current methods in which the business user must provide a full written specification of the desired online solution to the developer, who then must first learn and understand the entire solution and ultimately implement every aspect of it. </paragraph>
<paragraph id="P-0125" lvl="7"><number>&lsqb;0125&rsqb;</number> Example Lifecycle of a Collaboratively Developed Web Service </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> The following example is provided in order to illustrate how the invention enables business-to-IT collaboration. In this case, the assumption is that a new Web service is being created in order to extend the capabilities of a NetScenario. </paragraph>
<paragraph id="P-0127" lvl="7"><number>&lsqb;0127&rsqb;</number> The Business Analyst </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> A Business Analyst is defining the business logic for a customer self-help NetScenario. The business analyst recognizes that a custom step is needed to query a legacy system to obtain the text of a previously defined FAQ (frequently asked question; a form of knowledge base). To accomplish this, the business analyst adds a Web service step to the NetScenario and opens the setup dialog. In the setup dialog, the business analyst identifies the product and FAQ names from a previous interface step as the input data for this new step. In the step name field, the business analyst types the name &ldquo;GetFAQ&rdquo; and in the step description field, types the following text: </paragraph>
<paragraph id="P-0129" lvl="2"><number>&lsqb;0129&rsqb;</number> &ldquo;This Web service takes the name of one of our products and a FAQ name specified by a customer and uses that data to query a legacy system to obtain the requested FAQ. The Web service returns the FAQ text and title.&rdquo;</paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Finally, the Business Analyst defines the output of the step as data (two strings) that can be made available downstream in the NetScenario. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> At this point, the responsibility of the Business Analyst regarding this Web service is complete, as they have fully described the work that needs to be done in terms of inputs, outputs and any side effects that need to occur. It is now the responsibility of a programmer to implement the functionality described and requested by the Business Analyst. </paragraph>
<paragraph id="P-0132" lvl="7"><number>&lsqb;0132&rsqb;</number> The Programmer </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> When the programmer opens the NetScenario, because their role differs from that of the analyst, they see a different view: one that exposes features they need to accomplish their job. The unfinished Web service step includes controls that permit the programmer to select a programming language and associated environment (C&num;, VB, C&plus;&plus; or Java) and launch a wizard that automatically creates a programming project that exposes the GetFAQ method. The comments for the method include a description of the input and output parameters along with the exact text of the description previously provided by the Business Analyst. The programmer uses their knowledge of the legacy system interfaces to implement the query in the project that was launched. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Internally, the Web services step generated a WSDL file describing the inputs and outputs of the needed method along with the method comments. This is stored in a database repository accessible from both NetScenario Studio and the development environment wizards. The development environment wizards obtain the WSDL information using a local client API which, in turn utilizes web services to provide access to the NetScenario repository. The launched wizard then uses this file to create the object and method definitions and generate a web service to expose them. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> As described above in Section 2b, a business analyst using NetScenario Studio can logically describe their required functionality through placement and configuration of a special Service Step at the appropriate execution point in the Scenario Map. With reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the configuration dialog for the Service Step enables business user definition of the function, including a written description and a proposal of the inputs required by the step and outputs it will generate. Through this interface, the invention separates business resource requirements from the underlying technical implementation details, providing a foundation for defining business-relevant service interfaces that are readily understood and employed by business users to create NetScenarios. IT personnel then decide how this request can best be filled (for example, using a third party Web Service, an internally-developed Web Service, a NET assembly, a COM object, EJB object or database query exposed through a Web Service.) If the described behavior, the input, or the output parameters of the fulfilling components differ from those proposed by the business analyst, a negotiation is initiated using email or any other electronic form of notification to resolve the differences. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the Service Step configuration interface also enables declaration of a &ldquo;placeholder&rdquo; status, that allows IT personnel to perform any required implementation while the business user continues with definition and mapping of the overall service process. Once declared, the NetScenario Studio environment takes any descriptive information and input/output parameters and alerts IT via email notification of the new step implementation requirement. This also frees the business analyst to test the logic of the service process before implementation is complete using the input and output parameters that were defined through the Service Step configuration dialog. In particular, even before the Service Step has been assigned a web service, the business user can run the associated NetScenario (as described above in the on-demand compilation for testing section). When the unimplemented service step is encountered, the system provides the business analyst a user interface for entry of the web service outputs. This enables the entire NetScenario to be tested with any anticipated outputs of the web service before the web service is actually implemented. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> To enable structured collaboration between business and IT users, the invention automatically generates WSDL (Web Service Description Language) contracts to describe the functional behavior and input/output requirements specified by business users. This WSDL contract is created upon initiation of the request for a new Service Step, and thereafter is used to contain the proposals, the counter-proposals and the final contract between the business and IT collaboration team. Once the contract is agreed upon, IT completes any needed implementation work and the Service Step associated with the original request is re-integrated into the Scenario Map through final mapping of its actual inputs and outputs. </paragraph>
<paragraph id="P-0138" lvl="7"><number>&lsqb;0138&rsqb;</number> The Service Manager </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> In order to fully enable and provide an optimal collaboration environment, NetScenario Studio provides a centralized Service Manager with both business-level and technical-level interfaces to the Web Service components being requested by business users and developed by IT users. With reference to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the Service Manager manages lists of all requested, implemented and discovered services available to the business analyst. This includes third party Web Services, internally implemented Web Services, COM and EJB objects, as well as stored procedure and other database queries exposed through Web Services. In addition, it contains a list of developed and approved NetScenario subprocesses for use in further abstracting technical complexities such as with transactions and subroutine calls. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> The Service Manager makes use of a private UDDI API to enable its business and technical-level interfaces. As new Web Service component requests are submitted, they are automatically posted to the Service Manager where IT users can review and begin the process of resource enablement as described in Section 2c. Components in the Service Manager are classified as &ldquo;Proposed&rdquo;, &ldquo;In Progress&rdquo;, &ldquo;Testing&rdquo; or &ldquo;Implemented&rdquo;. A proposed component is defined as one that has not yet been assigned to an IT resource for evaluation. An in-progress component has been assigned, but has not been implemented and/or approved by IT. A test component is implemented by IT based upon the original service request and is available to the business user for testing and verification but can not be published yet. An implemented component has been tested and accepted by the business user and is now published and made available for use within production business services. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> These facilities enable Service Virtualization. Service Virtualization changes the traditional view of resources from tangible, physical entities into logical, configurable entities with greater flexibility for both the Business User and IT User. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The abstraction layer provided by the Services Manager offers a number of advantages over traditional methods that provide direct programmatic links to underlying Web Service component functionality. In addition to providing a single, standards-based location for storing and managing functional assets of the business, these advantages include: </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> A single location for testing Web Service components prior to production use. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> A single location for monitoring, logging and metering calls to Web Services. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> A single location for defining, managing and monitoring service levels for Web Services. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> A single location for discovering Web services and completed NetScenarios published to public or private UDDI registries. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> Enables the Business User to continue assembly and testing of the Business Service (NetScenario) in parallel with the IT User&apos;s implementation efforts for requested (&ldquo;Proposed&rdquo;) services. </paragraph>
<paragraph id="P-0148" lvl="7"><number>&lsqb;0148&rsqb;</number> The process may be described as follows: </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> During the assembly phase in the NetScenario lifecycle, the Business User may request a new service from within the Service Step. In doing so, the system uses a placeholder mechanism to represent the service that will ultimately be implemented by the IT User. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> The IT User can fulfill this request using the Service Manager or the Add-Ins available for IDEs such as Visual Studio NET and Borland JBuilder. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> At run-time the web service request is intercepted by the NetScenario Business Server for any additional processing (e.g. transformations, metering, etc.) and then passed to the actual web service. This interception layer is also the mechanism that enables the Service Groups and service brokering described in a separate sub-claim. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> The Service Manager provides a centralized location for unit testing Web Service components before making them available to designers of NetScenarios. A user interface permits the IT developer or programmer to enter test input data and observe the results of the call. This also enables creation of fully parameterized test implementations of Web Services that can be used by business users when testing or staging their completed NetScenario service processes for production use. For example, if a Web Service is designed to debit an account, it cannot actually be used during testing and staging activities. The Service Manager determines whether the component is being called in a test context and calls an alternate test Web Service without the financial side effects. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> The Service Groups and web service interception features described above enable the testing and staging modes described here. From within the Service Manager, the IT User may specify the &ldquo;operation mode&rdquo; for the service. This operation mode dictates which web services should be called during NetScenario preview or run-time. Since the underlying web service (or other resource type) is loosely coupled from the NetScenario the NetScenario may be run in a number of different configurations without modification to its definition. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> The invention permits the business to track and report on the utilization of Web Services after a NetScenario has been deployed. This permits the business to more effectively manage the cost of both internal and externally provided Web services. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> This metering capability builds upon the abstraction and interception foundations described in other sub-claims. Since the service virtualization allows the service to represent one or more actual web services, the invention also permits the user to view data in multiple views including: a) singleton (a single web service within the Service Group), b) aggregate (metering data across the Service Group), or c) operation mode (metering data scoped to &ldquo;assembly&rdquo;, &ldquo;test&rdquo;, &ldquo;staging&rdquo;, &ldquo;production&rdquo;, etc.). </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> This metering capability is implicit in the Business Server and requires no additional configuration. The data is driven by other configurations applied to the NetScenario such as operation mode and service group. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> Data is viewed at &ldquo;management-time&rdquo; and results from the running of NetScenarios in any operation mode. The data collected facilitates the analysis of resource utilization to further enhance the optimization of these resources. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> Additionally, this utilization information may be used for billing purposes when working with partners, departments, or customers. </paragraph>
<paragraph id="P-0159" lvl="7"><number>&lsqb;0159&rsqb;</number> Staging and Deployment </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> After a NetScenario has been assembled, including required design, development and formatting activities, it is ready for staging and deployment. </paragraph>
<paragraph id="P-0161" lvl="7"><number>&lsqb;0161&rsqb;</number> Staged Deployment </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> Staging is a private deployment that makes a NetScenario available to internal audiences for validation and testing purposes. For example, before making a NetScenario available to its target audience, a company may put it through usability, performance and throughput testing in a staged deployment configuration. &lsqb;See Section 2d, &lt;Sub-claim: Web Service unit testing and alternate test implementations prior to production use&gt;&rsqb; During staged deployment, the side effects of a NetScenario should be harmless. In other words, they should not cause financial transactions or other side effects that would occur in a non-test runtime environment. Since the target audience is not invoking the NetScenario, test databases and Web Services can be used instead of the actual runtime versions. </paragraph>
<paragraph id="P-0163" lvl="7"><number>&lsqb;0163&rsqb;</number> Production Deployment </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> After a NetScenario has been tested in a staged deployment, it is ready for production use by the target audience. Deployment is the process of making an Internet link to the NetScenario available to that target audience. This may involve publishing the link to an existing Web site or portal framework, sending an email message containing the link to a mailing list, rendering the service on a intelligent access device, or adding the link to a public or private UDDI registry. If the NetScenario is to be syndicated, deployment involves making the link available to distributors of the syndicated service process embodied by that NetScenario </paragraph>
<paragraph id="P-0165" lvl="7"><number>&lsqb;0165&rsqb;</number> Provisioning and Syndication </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> A NetScenario can change its behavior based on how it is called. When a NetScenario is deployed, a mechanism called &ldquo;provisioning&rdquo; permits the appearance or behavior to be modified based on one or more provisioning parameters with which it is invoked. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> The Provision System allows the specification of particular parameters at design time. These are combined with certain system-provisioned parameters to produce a provision definition record that is published along with the NetScenario. Each time the NetScenario is deployed, the custom and system-provisioned parameters can be given particular values that are stored as a record associated with the new deployment. Each instance of the NetScenario that runs as part of the new deployment is automatically initialized with values of the parameters defined within the provisioning record. The values in the provisioning record for a particular deployment can be changed at any time and such changes will be seen by the next NetScenario that runs as part of the deployment. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, provisioning has a variety of purposes, including for example, access control, branding or co-branding, and personalization of runtime behavior. Deployment-based provisioning parameters correspond to variables that control the theme and behavior of the NetScenario. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Since provisioning is deployment based, a NetScenario may be provisioned differently for each channel that is deployed on without changing the NetScenario itself. Built-in system features that take advantage of this include the visual &ldquo;look and feel&rdquo; (see theme), the branding and co-branding of the NetScenario presentation that is displayed to the user, and the specific exit destinations used for user redirection upon the completion of the NetScenario. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The same mechanism can be used to allow the NetScenario to be customized to a particular business need. For example a business rule can be easily parameterized to use a value supplied via provisioning allowing its behavior to be custom controlled for each deployment. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> The following use cases for provisioning highlight the convenience of adapting a single scenario&apos;s appearance or behavior based on its deployment channel: </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> You have written a self-help NetScenario for use by Silver, Gold And Platinum classes of customers. You create separate promotions to configure three different entry points to the same NetScenario for each customer class. The provisioning associated with each class changes the theme to give them a different look and feel. In addition, the flow of the NetScenario looks at the customer class to determine how quickly the customer is presented with a phone number to call for personalized help. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> You have written an order tracking NetScenario that you would like other companies to be able to include inside of their Web applications. By creating provisioning parameters that control the logos, company name and other branding information loaded into the interface pages, you enable the calling applications to co-brand the pages you are providing. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> You have written a NetScenario that, among other things, sends emails to individuals. Because you would like to have different instances of the NetScenario associated with different email servers, the NetScenario has a provisioning value controlling the server name. You create separate promotions, one for each server you would like to use. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> You are the marketing manager at a national bookstore. You create an &ldquo;Offer Promotion&rdquo; NetScenario that is intended to promote the &ldquo;Best Seller&rdquo; books to your customer base every month. Within your NetScenario, you decide to provision the ISBN number that uniquely identifies any book. Within your scenario logic, you lookup your national book database based on the ISBN number and include the book/author details in your promotion. You then publish your NetScenario. Your plan is to launch email promotions to your customer base every month where you showcase a new bestseller book. To accomplish this, you create a new promotion (using the same published scenario) each month where you pass in the appropriate ISBN number as a provisioned input parameter. </paragraph>
<paragraph id="P-0176" lvl="7"><number>&lsqb;0176&rsqb;</number> Provisioning Mechanism Overview: </paragraph>
<paragraph id="P-0177" lvl="7"><number>&lsqb;0177&rsqb;</number> Design Time </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> As part of designing the NetScenario, the user may specify set of provisioning variables. To create these variables the user may either create a variable specifically for this purpose, select from the existing variables in the NetScenario or select from the set of step inputs exposed by the various steps in the NetScenario and designate them as being initialized via a provisioning variable. In this case the variable is created implicitly. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> The user may provide a default value for the selected provisioning variable. The user may also attribute the provisioning variables indicating special behavior including &ldquo;read-only&rdquo;, &ldquo;overridable&rdquo;, and &ldquo;required&rdquo;. These attributes influence the behavior of the provisioning variable at deployment time and run time. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> Creating or selecting a variable creates a special section in the flow map designating the set of provisioning parameters. The provisioning section is interpreted by the Design tool as a step that occurs at the beginning of the flow and provides step outputs that are available to map to the inputs of subsequent steps in the map. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> Certain system variables are always present in the provisioning section. System variables, so called because they are initialized by the system, may be given values either at design time (e.g. NetScenario Definition ID), Compile time (e.g. NetScenario Version ID), Deployment Time (e.g. NetScenario Deployment ID), or runtime (e.g. Session ID). </paragraph>
<paragraph id="P-0182" lvl="7"><number>&lsqb;0182&rsqb;</number> Compile Time </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> On Compile, the NetScenario compiler transforms the special provisioning record into a runtime provisioning definition. This runtime definition is a data structure consisting or name-value pairs, one for each provisioning parameter. The value part contains either a system default value or the default value provided by the user at design time. </paragraph>
<paragraph id="P-0184" lvl="7"><number>&lsqb;0184&rsqb;</number> Deployment Time </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> On Deployment, the runtime provisioning definition is loaded and presented to the user in a graphical form. The subset of the Provisioning record that that is designated as being user settable is presented. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> Note: Some system provisioning parameters are not user settable since their values are necessarily generated by the system. User defined provisioning parameters are generally user settable. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> The deploying user may provide appropriate values for the various provisioning parameters that are presented. The user must provide values for those provisioning parameters that are attributed as &ldquo;required&rdquo;. In addition to providing values, the deploying user may also change certain attributes of the provisioning parameters. This includes the &ldquo;overridable&rdquo; attribute which determines whether the value provided can be provided with a different value at run time via a run time parameter passing mechanism. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> At the completion of deployment, a deployment record is written along with a new copy of the provisioning record that contains the new values specified by the deploying user along with any default values that the deploying user chose not to replace </paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> Run Time </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> At run time, the NetScenario is initiated, typically by resolving an URL (Note: other remoting mechanisms may also be used). Invocation identifies the particular deployment of the NetScenario to run by passing a deployment Identifier. The NetScenario runtime uses this identifier to find and load the provisioning record associated with the deployment. If the invocation supplies additional parameter values these are match, by name, to the values in the loaded provisioning record. In this case the values so passed are used to override the value defined in the provisioning record subject to the attributes associated with the particular provisioning parameter in the deployed provisioning record. For example, if the provisioning parameter does not have the &ldquo;overridable&rdquo; attribute then the attempt to override the provisioning parameter is not allowed and the value set in the provisioning record will be used. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> The NetScenario runtime uses the provisioning parameters to instantiate the NetScenario initializing it with the data from the provisioning record and modified by the invocation parameters. This data becomes a part of the NetScenario instance data. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Since provisioning parameters can be controlled by the identity of the calling user, users with different profiles can have distinct user experiences (both visually and functionally) when running the NetScenario. Provisioning is extended to allow selection of a particular NetScenario based on the user&apos;s profile. Specifically, if the user belongs to a particular group then this membership may be used to determine which set of provisioning parameters should be used when presenting the NetScenario instance to the user. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> NetScenarios orchestrate discrete Web Services, business rules and processes into interactive business services. This presents a tremendous opportunity to online service providers, e-commerce divisions of large enterprises, or market makers that are currently publishing their core services as discrete Web Services to UDDI. Using NetScenario Studio, service providers can wrap their Web Services as the present invention&apos;s Steps and link them together with business logic and rules, and superimpose interfaces and personality to create interactive and modular business services that are registered with UDDI. These NetScenarios are then immediately available for direct use by service consumers or syndicated within other NetScenarios with no coding or integration required. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> NetScenarios can be &ldquo;Syndicated&rdquo; or made available to third parties as the embodiment of an online business process. Because the same NetScenario can be deployed in multiple settings with its appearance and behavior controlled by provisioning parameters, companies subscribing to the syndicated NetScenario can easily personalize it to match their corporate standards. This dramatically simplifies packaging and sharing of core business processes and not just simple XML business document schemas between partner companies. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> NetScenario Services are the system and component application services that implement and control NetScenario behavior at the time it is being run by a user. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> Interaction services drive the control and presentation of online interactions with users of NetScenarios. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> Integration services dynamically manage the integration and data exchange between NetScenarios and external systems such as Web services and other applications. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Syndication services manage and control NetScenario branding, provisioning and publication. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> Profiling services manage the authentication and authorization of NetScenario recipients. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> Foundation services provide advanced caching, session and state management, security and data integrity capabilities at runtime. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> Runtime Environment Overview </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> At runtime, the NetScenario is dynamically created based on XML process and interface descriptions. The provisioning support discussed above makes it possible to control the theme, style and behavior of the NetScenario based on the provisioning parameter with which the NetScenario is called. </paragraph>
<paragraph id="P-0203" lvl="7"><number>&lsqb;0203&rsqb;</number> User Driven Process Navigation </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> Unlike most commercial software engines that automate business processes, NetScenarios are principally controlled from a Web browser or other intelligent access devices by a human being. Because of this, ordinary process flow can be disrupted by the use of the browser&apos;s history list or back button. NetScenarios are executed by a unique user-driven process engine (described below) that addresses this problem. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> The NetScenario keeps an internal history of NetScenario pages that the user has moved through. If the user uses the browser back button or effect a restart by using the browser refresh button, the NetScenario Platform automatically finds the correct page and either continues from that page or redisplays that page. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 12, a</cross-reference> Flow segment is a discrete unit of flow that provides a means to prepare data for presentation, present the data and collect a response and allow various mechanisms to arbitrarily re-enter the unit of flow as directed by the User Interface. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> The flow enters the segment at Begin <highlight><bold>1</bold></highlight>. It saves state and synchronizes with the User Interface. This occurs at D<highlight><bold>1</bold></highlight>. For a Browser based user interface this requires a re-direct to which the Browser responds with a GET. There is no user input. The flow is typically suspended until the Browser request arrives. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> The gather phase, Gather <highlight><bold>1</bold></highlight>, of the flow segment executes. This is user defined logic, the intent of which is to gather data for subsequent use in the flow. Other actions may also occur </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> At the completion of the user defined gather section of the flow the defined page is prepared and initialized with the data from the flow instance, Display <highlight><bold>1</bold></highlight>. This data may originate from the previous Gather <highlight><bold>1</bold></highlight> phase and/or from a prior flow segment. The page is presented to the User Interface and the state is saved (D<highlight><bold>2</bold></highlight>). The User Interface collects data from the user and submits it back to the flow. The flow is typically suspended while the User Interface is preparing its response. For a Browser based user interface, this requires a PUT response, to the previous GET request resulting from D<highlight><bold>1</bold></highlight>. The Browser, at the user&apos;s request, responds with a POST which causes the flow to continue. The flow, ReNav <highlight><bold>1</bold></highlight>, checks that the data thus submitted corresponds to the page that belongs to this segment. If the page is not the last one presented then the flow will reset it position back to the appropriate segment at the Submit Point in that segment. This is accomplished using a segment identifier that flows through the User Interface and is submitted back to the flow as part of the data submitted by the user. If the page is the one from the current segment then the flow continues. For a Browser based user interface, a hidden field or a query string parameter may be used to return the segment identifier to the flow. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> The flow then harvests the data submitted by the User Interface, Harvest <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> The submitted data includes an indication of the desired user action. A set of standard actions are provided. These include Next, Finish, Back, Save&amp;Exit and Cancel. Other actions may be defined. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> If the Next or Finish actions are requested, the flow executes the submit section, Submit <highlight><bold>1</bold></highlight>. This is user defined logic, the intent of which is to take action on the data submitted. The Flow then proceeds to the next segment, Begin <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> If the Back action is requested, the flow examines the flow history, Back 1, and identifies the Refresh Point of the segment that was executed immediately prior to the current one. The flow will reset its position back to the Refresh Point of the appropriate segment. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> If the Save&amp;Exit action is requested, the flow prepares its state to restart at the beginning of the current segment, Begin <highlight><bold>1</bold></highlight>, and saves its state (D<highlight><bold>3</bold></highlight>). It informs the UI that the Save&amp;Exit has occurred and the flow is, typically, suspended. For a Browser based user interface there is a re-direct to an appropriate URL. </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> If the Cancel action is requested (not shown in the Figure), the flow informs the User Interface that the Cancel has occurs and the flow finishes. For a Browser based user interface there is a re-direct to an appropriate URL. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> (Note: Errors that may occur within the flow segment may be handled by re-executing the flow segment starting at either the Refresh Point or the Submit Point depending on the nature of the error. This is not shown in the figure for clarity.) </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> Navigational Actions Summary </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> Next </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> The user submits the current page causing the flow to continue and either complete or generate the next page which is presented to the user. The user is allowed to return to a previous page in the flow by using either the Back button or by selecting a cached page from the Browser History (see Browser History &amp; Refresh). </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> Finish </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> The user submits the current page causing the flow to continue and either complete or generate the next page which is presented to the user. The user is not allowed to return to a previous page in the flow by using either the Back button or by selecting a cached page from the Browser History (see Browser History &amp; Refresh). The flow will warn the user and re-direct them back the current page. </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> Back </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> The user requests the flow to back up to the previously displayed page. The flow regenerates the previous page and redisplays it. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> Save&amp;Exit (Resume) </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> The user request the flow to save its state for later use. The flow temporarily completes and the user is provided with a special resume token that may be used to resume the flow at a later time. The resume token is generally an URL but may take other forms. By default the flow resumes on the same page from which Save&amp;Exit was requested. Other options such as the following page are also possible. </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> Browser History &amp; Refresh </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> The user uses the Browser refresh function to request a displayed page, cached by the Browser, be regenerated and redisplayed. The displayed page may be either the latest page generated by the flow or a previous page cached by the Browser in its history. The flow will re-synch to the page being refreshed allowing the user to continue from the refreshed page. </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> The Redirection Model </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> When remote NetScenarios are nested it creates a situation where the combined user experience is dependent on a variable number of disjoint servers operating flawlessly. The larger number of independent servers, the more likely there is to be failure. </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, this is addressed by calling the root NetScenario through a special platform service component, the NetScenario Redirector. The NetScenario Redirector maintains browser sessions and monitors the NetScenario. The NetScenario Redirector keeps a server-side history of NetScenarios that the user has moved through. If the user uses the browser back button or resubmits requests using the browser refresh button, the NetScenario Redirector is responsible for finding the correct NetScenario and submitting the request to it. When one NetScenario is about to call a nested NetScenario, instead of making the call directly the NetScenario returns the information necessary to make the call. This is intercepted by the Redirector, which records the state of the current NetScenario and makes the call to the underlying NetScenario. The browser will then interact with the underlying NetScenario through the Redirector rather than through the NetScenario that initiated it. When the underlying NetScenario finishes processing, it returns to the Redirector, which then resumes the first NetScenario. </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> This mechanism handles an arbitrary level of NetScenario nesting while retaining a maximum of one server-to-server call. This method synchronizes the arbitrary navigation page navigation allowed by a browser with nested NetScenarios in a distributed environment. </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 13, a</cross-reference> Browser is being used to present NetScenario <highlight><bold>1</bold></highlight> which nests NetScenario <highlight><bold>2</bold></highlight> which nests NetScenario <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> NetScenario <highlight><bold>1</bold></highlight> is instantiated via the Redirector which records the instantiation. NetScenario <highlight><bold>1</bold></highlight> executes. When NetScenario <highlight><bold>1</bold></highlight> calls NetScenario <highlight><bold>2</bold></highlight> it does so through the Redirector. The Redirector records the call and instantiates NetScenario <highlight><bold>2</bold></highlight> on Server <highlight><bold>2</bold></highlight>. NetScenario <highlight><bold>2</bold></highlight> executes and when it calls NetScenario <highlight><bold>3</bold></highlight> it does so through the Redirector. The Redirector records the call and instantiates NetScenario <highlight><bold>3</bold></highlight> on Server <highlight><bold>3</bold></highlight>. When NetScenario <highlight><bold>3</bold></highlight> completes it returns to the Redirector which resumes NetScenario <highlight><bold>2</bold></highlight> at the point of the call to NetScenario <highlight><bold>3</bold></highlight>. The return to NetScenario <highlight><bold>1</bold></highlight> is similar. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> In addition to the call history kept by the Redirector, each NetScenario keeps track of its segment execution history via a list of Segment identifiers. This in combination with the NetScenario Instance ID allows user re-navigation via refresh or back to be directed back to the correct server and to the correct segment of the previously executed, calling, NetScenario. </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> Other responsibilities of the Redirector are to keep alive remote server sessions and close sessions when re-navigation indicates a NetScenario is no longer valid. </paragraph>
<paragraph id="P-0236" lvl="7"><number>&lsqb;0236&rsqb;</number> The Interception Model </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> A caller (e.g. a Server, a Browser or some other User Interface) calls the Server requesting a NetScenario to be instantiated. This request is intercepted and various auxiliary systems are invoked. These auxiliary systems may include Authentication and Authorization systems, Metering and Billing systems. The Interceptor collects the context data (e.g. nature of request, user identifiers, and so on) and prepares it for the subsystem passing it through a defined calling interface implemented by a subsystem adapter. The adapter is implemented specifically to call a particular sub-system. The Interceptor calls each registered auxiliary system adapter and accumulates any results. If appropriate, the results are passed to the NetScenario. </paragraph>
<paragraph id="P-0238" lvl="7"><number>&lsqb;0238&rsqb;</number> This system is also applied to Web Services. </paragraph>
<paragraph id="P-0239" lvl="7"><number>&lsqb;0239&rsqb;</number> Visual Transactions </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Transactions in a visual, user-driven environment have traditionally been a problem for Web application builders. In particular, application builders have had to explicitly expire previous Web pages when transaction issues preclude user-driven navigation to those pages. For example, if a payment amount has already been submitted to a payment service, it would be an error to permit the user to back up and change the amount without a rollback of the transaction. NetScenarios resolve this problem by introducing the notion of a visual transaction. In a visual transaction, data gathering and submission steps are explicitly identified and segregated during the assembly process. At runtime, user attempts to navigate backwards can be determined to be safe by examining whether they cross a submission or commitment boundary. If the navigation is unsafe, the navigation can be disallowed or the user can be re-routed to the beginning of the visual transaction. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> The invention&apos;s Gather-Submit technology is a NetScenario design pattern that separates the user interaction from the action that is taken as a result. All presentation and collection operations involving the user take place during the gather phase and all actions resulting from that interaction take place during the submit phase. The gather phase collects all the data required to perform the submit phase. Generally, if the submit phase fails then the gather phase must be repeated. </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> To achieve this, certain restrictions must be enforced as follows: </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> There can be no action steps during the gather phase </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> There can be no Interface steps during the submit phase </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> The gather phase has a defined entry point. It is not permitted to enter the gather phase at any other point. </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> It is permitted to jump out of the gather phase. </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> The submit phase has a defined entry point. It is not permitted to jump into the submit phase at any other point. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> It is not permitted to jump out of the submit phase except on error or on completion. </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> Gather sections can be suspended and resumed under user control. They can also be canceled by the user. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> Submit sections do not operate under user control and thus may not be directly canceled or suspended by user commands. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> In addition to these rules, some other characteristics of the Gather-Submit design pattern are: </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> Gather-Submit units may be chained to form a series of discrete actions. </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> Gather-Submit units may be merged to form a single Gather-Submit NetScenario. Alternative Gather sections may be defined for a particular submit and, perhaps less usefully, the reverse. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> These are discussed below in the section &ldquo;Combining Gather-Submit NetScenarios&rdquo;. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates a simple NetScenario that conforms to the Gather-Submit design pattern. </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> At the start of the gather phase a database query is made. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> The result of this query is tested with a rule that determines which page is presented to the user. </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> The appropriate page is presented to the user and the user submits their request back to the NetScenario by pressing the Next button. </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> The content of the request is tested with a rule. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> If the request contains errors, the NetScenario returns to the rule and re-presents the appropriate page. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> If the request is valid the NetScenario continues to a confirmation page. On this page the user may back up and re-edit their request or they can submit the request. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> The request is submitted to the submit phase. </paragraph>
<paragraph id="P-0263" lvl="0"><number>&lsqb;0263&rsqb;</number> The submit phase queries a database based on the request submitted. </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> It then applies a rule and updates a database appropriately. </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> It then creates an email and queues it. </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> Finally it updates the NetScenario results. The transaction commits and the submit phase is complete. </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> The user might be directed to the next phase. In this case the next phase is a Present section implementing a confirmation page. </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> If an error occurs during the submit phase the transaction aborts and the submit phase exits. </paragraph>
<paragraph id="P-0269" lvl="7"><number>&lsqb;0269&rsqb;</number> NetScenario Transaction Model </paragraph>
<paragraph id="P-0270" lvl="0"><number>&lsqb;0270&rsqb;</number> NetScenarios have an implicit transaction model. This leverages the modern distributed transaction approach popularized by COM&plus; and later by EJB. In this model NetScenario Steps execute in the context of a transaction. Assuming the steps can participate in this kind of transaction, their actions will either commit or abort depending on the error-free completion of all the steps participating in the transaction. That is, they will all succeed or they will all abort. </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> Certain rules should be observed when using transactions. In particular, transactions should not be held open for long periods such as when a user has control. The NetScenario transaction model conforms to this. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> The Gather-Submit design pattern also contributes to the transaction model in that it confines all actions to the submit section of the NetScenario. It also restricts the logic in the submit section to either executing the actions to completion or failing. </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates the Gather-Submit transaction model for a simple NetScenario. </paragraph>
<paragraph id="P-0274" lvl="7"><number>&lsqb;0274&rsqb;</number> The Present and Action Design Patterns </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> There are two related design patterns that apply to NetScenarios: Present and Action. Present is equivalent to a standalone Gather section and Action is equivalent to a standalone Submit section. Both of these patterns may be useful either in their own right or as modules with which to build conventional Gather-Submit NetScenario designs. These patterns are described below </paragraph>
<paragraph id="P-0276" lvl="7"><number>&lsqb;0276&rsqb;</number> Present </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> Present is equivalent to a standalone Gather section. It is differentiated from Gather since its primary purpose is to present data rather that gather data. While a Present NetScenario can gather data it does not have a corresponding Submit section and so it cannot, on its own, do this usefully. It is also possible to construct a Present NetScenario that doe not have a UI, the purpose of which is to programmatically present some data. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> There can be no action steps in a Present NetScenario. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> Present has a defined entry point. It is not permitted to enter the present phase at any other point. It is permitted to jump out of the present phase. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> Present sections can be suspended and resumed under user control. They can also be canceled by the user. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> In addition to these rules, some other characteristics of Present NetScenarios are: </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> Present NetScenarios may be chained to form a series of presentations. </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> Present NetScenarios may be merged to form a single Present NetScenario. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> A Present NetScenario may be merged into the Gather section of a Gather-Submit NetScenario. </paragraph>
<paragraph id="P-0285" lvl="7"><number>&lsqb;0285&rsqb;</number> Action </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> Action is equivalent to a standalone Submit section. It is differentiated from Submit in that it can only be used programmatically. Its primary use is as a building block for other NetScenarios or for allowing NetScenarios to be initiated from other programmatic systems. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> There can be no Interface steps during an Action NetScenario </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> An Action NetScenarios has a defined entry point. It is not permitted to jump into an Action NetScenario at any other point. </paragraph>
<paragraph id="P-0289" lvl="0"><number>&lsqb;0289&rsqb;</number> It is not permitted to jump out of an Action NetScenario except on error or on completion. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> Action NetScenarios do not operate under user control and may not be directly canceled or suspended. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> In addition to these rules, some other characteristics of Action NetScenarios are: </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> Action NetScenarios may be chained to form a series of discrete actions. </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> Action NetScenarios may be merged to form a single Action NetScenario. </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> An Action NetScenario may be merged into the Submit section of a Gather-Submit NetScenario. </paragraph>
<paragraph id="P-0295" lvl="7"><number>&lsqb;0295&rsqb;</number> Combining Gather-Submit NetScenarios </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> Combining NetScenarios is a powerful idea since it allows re-use of a previously implemented and tested NetScenario. This contributes greatly to the rapid development and deployment of NetScenarios. </paragraph>
<paragraph id="P-0297" lvl="0"><number>&lsqb;0297&rsqb;</number> There are two obvious ways to attempt to combine NetScenarios; Linking and Nesting. </paragraph>
<paragraph id="P-0298" lvl="0"><number>&lsqb;0298&rsqb;</number> Linking. This allows one NetScenario to be linked together so that the NetScenarios may be executed in some sequence. There is not necessarily an expectation that the NetScenario will return to the original NetScenario. </paragraph>
<paragraph id="P-0299" lvl="0"><number>&lsqb;0299&rsqb;</number> Nesting. This allows one NetScenario to be called from another NetScenario as a sub-routine. The expectation is that the called NetScenario will return to the caller with some result. </paragraph>
<paragraph id="P-0300" lvl="0"><number>&lsqb;0300&rsqb;</number> By providing a model that streamlines and formalizes the way NetScenarios can be combined the usage model can be simplified and much of the work to combine the NetScenarios correctly can be automated. Gather-Submit NetScenarios can be combined using &ldquo;chaining&rdquo; and &ldquo;merging&rdquo;. </paragraph>
<paragraph id="P-0301" lvl="0"><number>&lsqb;0301&rsqb;</number> Chaining. In this arrangement each Gather-Submit NetScenarios are combined in sequence at design time. Each NetScenarios works independently. If one of the series of Gather-Submit units fails it does not affect the previous Gather-Submit units that successfully completed. The failed NetScenario may be repeated until it succeeds. </paragraph>
<paragraph id="P-0302" lvl="0"><number>&lsqb;0302&rsqb;</number> Merging. In this arrangement simple Gather-Submit NetScenarios are merged so that the Gather sections form a single aggregate gather section and the Submit sections form a single aggregate submit section. The user is given the single event experience while the submit sections can potentially occur in a single transaction. </paragraph>
<paragraph id="P-0303" lvl="0"><number>&lsqb;0303&rsqb;</number> Of these, the merged Gather-Submit creates the most usual and desired user experience, particularly if it can be arranged for the submit sections to combine into a single transaction. <cross-reference target="DRAWINGS">FIG. 17</cross-reference> provides an example of a merged Gather-Submit operation. </paragraph>
<paragraph id="P-0304" lvl="7"><number>&lsqb;0304&rsqb;</number> Nesting and Linking Support </paragraph>
<paragraph id="P-0305" lvl="0"><number>&lsqb;0305&rsqb;</number> The runtime engine supports combining NetScenarios to create more robust solutions by calling a second one from within the first as a subroutine (nesting) or by transferring control to a second NetScenario after the first has completed (linking). </paragraph>
<paragraph id="P-0306" lvl="7"><number>&lsqb;0306&rsqb;</number> Networked Business Services </paragraph>
<paragraph id="P-0307" lvl="0"><number>&lsqb;0307&rsqb;</number> Individual NetScenarios typically model a single interaction with a customer. Because business processes frequently include multiple interactions with multiple parties, the invention provides a Networked Business Services (NBS) model that was developed to combine and coordinate the execution of distinct NetScenarios into unified solutions. The NetScenarios contained in the NBS represent visual interactions with end users in the process. Unlike a discrete NetScenario, NBS is multi-party (roles) and has multiple entry points. </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> Building upon the Gather-Submit NetScenario design pattern, the present invention&apos;s NBS model logically aggregates multiple single-input, single-output NetScenarios into a visually cohesive service network with a shared data model. NetScenarios aggregated within the present invention&apos;s NBS model have distinct visual representation during both design-time and runtime: </paragraph>
<paragraph id="P-0309" lvl="2"><number>&lsqb;0309&rsqb;</number> Design-time: The NetScenario Studio provides a visual wrapper around the individual NetScenarios aggregated into a network, representing connectivity linkages and dependencies amongst them. </paragraph>
<paragraph id="P-0310" lvl="2"><number>&lsqb;0310&rsqb;</number> Runtime: To NetScenario recipients, the relationship between the individual NetScenarios that have been aggregated into a logical whole appear seamless and offer unified experiences as with most other enterprise application interfaces. </paragraph>
<paragraph id="P-0311" lvl="0"><number>&lsqb;0311&rsqb;</number> NBS coordinates data and runtime behavior of related NetScenarios and provide a common environment for administering them as a group. These features are further described below: </paragraph>
<paragraph id="P-0312" lvl="7"><number>&lsqb;0312&rsqb;</number> Data Coordination </paragraph>
<paragraph id="P-0313" lvl="0"><number>&lsqb;0313&rsqb;</number> Data must be able to be shared between NetScenarios contained in an NBS. To support this, the present invention&apos;s NBS permits the definition of XML document schemas that can be shared between NetScenarios. Even if an intervening external process engine does some work between NetScenario invocations, an XML document that was created by one NetScenario can be transferred to and understood by another. </paragraph>
<paragraph id="P-0314" lvl="7"><number>&lsqb;0314&rsqb;</number> Process Flow Capabilities </paragraph>
<paragraph id="P-0315" lvl="0"><number>&lsqb;0315&rsqb;</number> The NBS provides standard process control facilities such as decisions, routing and splitting and combining documents between NetScenarios. These capabilities permit an exchange to select work from output consoles (i.e., a service list control) and route them to other input consoles (i.e., an service inbox control) for further processing. </paragraph>
<paragraph id="P-0316" lvl="7"><number>&lsqb;0316&rsqb;</number> Connections </paragraph>
<paragraph id="P-0317" lvl="0"><number>&lsqb;0317&rsqb;</number> In addition to listing the NetScenarios, NBS provides a description of the relationship between these NetScenarios known as Connections. The relationships that NetScenarios may have are: </paragraph>
<paragraph id="P-0318" lvl="7"><number>&lsqb;0318&rsqb;</number> Direct </paragraph>
<paragraph id="P-0319" lvl="0"><number>&lsqb;0319&rsqb;</number> Exit Links&mdash;On exit a NetScenario may re-direct to another NetScenario. </paragraph>
<paragraph id="P-0320" lvl="0"><number>&lsqb;0320&rsqb;</number> Popup Links&mdash;During NetScenario execution the user may initiate additional NetScenarios in separate windows either modeless (independent completion) or modally (completion required before continuation). </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> Nested&mdash;A NetScenario can be called as an integral part of another NetScenario. </paragraph>
<paragraph id="P-0322" lvl="7"><number>&lsqb;0322&rsqb;</number> Indirect </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> Disjoint Links&mdash;During execution of a NetScenario, a NetScenario Link may be communicated to another actor (generally a user) via Email, NetScenario Inbox or some other communication mechanism. </paragraph>
<paragraph id="P-0324" lvl="0"><number>&lsqb;0324&rsqb;</number> Non-NetScenario &ldquo;Glue&rdquo;&mdash;The NBS model permits connection to certain non-NetScenario Web Pages intended to bind NetScenarios (e.g., Portal page). </paragraph>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> Dispatcher&mdash;Some NetScenario Business Service Models may require additional rules and facilities to link the NetScenarios together. Generally these will involve criteria matching, scheduling and workflows. </paragraph>
<paragraph id="P-0326" lvl="0"><number>&lsqb;0326&rsqb;</number> The Relationships between NetScenarios are visually created by editing the Connection. This Connection documents and characterizes how the invoking NetScenarios and the invoked NetScenario (or link) related. </paragraph>
<paragraph id="P-0327" lvl="0"><number>&lsqb;0327&rsqb;</number> Each NetScenario contributes a Connections list to the NBS. Connections are resources like entities that abstract invocations of other NetScenarios. These NetScenarios are generally defined within the current NBS. Connections define the relationship between the various NetScenarios within the NBS and allow the NBS to manage these relationships. </paragraph>
<paragraph id="P-0328" lvl="0"><number>&lsqb;0328&rsqb;</number> Connections abstract the details of the connection from the initiating NetScenario. Included in these details are the signature of the resource connected to signature and the mechanism through which the resource is invoked. NetScenario Subprocesses also produce Connections lists but never appear in them. </paragraph>
<paragraph id="P-0329" lvl="0"><number>&lsqb;0329&rsqb;</number> Signatures </paragraph>
<paragraph id="P-0330" lvl="0"><number>&lsqb;0330&rsqb;</number> Callable entities, specifically NetScenarios, Subprocesses, and Resources carry defined signatures describing how they are invoked. In general this consists of a set of inputs, a set of outputs and their data types. If necessary, NetScenarios add a description of their &ldquo;Business Document&rdquo;. Resources may describe a group of signatures since these signatures are changed together. Signatures are owned by the defining entity, and. are used to enforce compatibility. That is, it may be possible to lock an entities Signature from further changes restricting the way the entity can be further changed. </paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> Inputs and Outputs are described by name, order and datatype. This part of a Signature uses a WSDL like syntax. In addition to inputs and outputs, the side effects of a NetScenario are also part of its Signature. This includes a description of the data that appears in its document and in its classification of that document. These descriptions are also WSDL like including name, order and data type. The typing system used in both cases is XML SCHEMA 2001. </paragraph>
<paragraph id="P-0332" lvl="0"><number>&lsqb;0332&rsqb;</number> Dependencies </paragraph>
<paragraph id="P-0333" lvl="0"><number>&lsqb;0333&rsqb;</number> Dependencies identify the Resources and Subprocesses that are used by a NetScenario or Subprocess. Dependencies identify all the external resources referenced by the Resource. This includes Connections. The purpose of the Dependency list is to allow the NBS to identify the dependencies of each member of the NBS and manage changes to them from outside the consuming NetScenario (or Subprocess) </paragraph>
<paragraph id="P-0334" lvl="0"><number>&lsqb;0334&rsqb;</number> Change Management </paragraph>
<paragraph id="P-0335" lvl="0"><number>&lsqb;0335&rsqb;</number> The Change Management features are centered around Dependencies and Signatures. The same basic mechanism is used for NetScenarios, Subprocesses and Resources. For simplicity the following description uses NetScenario as an example though for most cases Subprocess can be used interchangeably. Resources are discussed separately. </paragraph>
<paragraph id="P-0336" lvl="0"><number>&lsqb;0336&rsqb;</number> Each NetScenario within the NBS contributes a Signature to the NBS that defined how it may be consumed by other NetScenarios within the NBS. When a NetScenario (or Subprocess) consumes another NetScenario (or Subprocess) it creates a Dependency record in its dependency list. </paragraph>
<paragraph id="P-0337" lvl="0"><number>&lsqb;0337&rsqb;</number> When a NetScenario changes its Signature and exposes that change, generally on save, a process is run that checks the dependency list of the other NetScenarios in the NBS and those that advertise a dependency on the changed NetScenario are marked as needing attention. This change mark is used to indicate to the user that the dependent NetScenarios require their attention and they must open the NetScenario and make appropriate adjustments before the NetScenario can be used further. </paragraph>
<paragraph id="P-0338" lvl="7"><number>&lsqb;0338&rsqb;</number> Compatibility </paragraph>
<paragraph id="P-0339" lvl="0"><number>&lsqb;0339&rsqb;</number> NBS is concerned with managing compatibility between its owned and referenced NetScenarios. There are various standards of compatibility: </paragraph>
<paragraph id="P-0340" lvl="1"><number>&lsqb;0340&rsqb;</number> Absolute: The compiled NetScenario is identical to it predecessor. </paragraph>
<paragraph id="P-0341" lvl="1"><number>&lsqb;0341&rsqb;</number> Constant Signature: The NetScenario maintains the same Signature but its internal logic can vary. </paragraph>
<paragraph id="P-0342" lvl="1"><number>&lsqb;0342&rsqb;</number> Derived Signature: The NetScenario Signature is a superset of its predecessor. That is it has all the same fields in both the Calling and Data Signatures but it adds new fields to either the Calling or Data Signature or both. </paragraph>
<paragraph id="P-0343" lvl="2"><number>&lsqb;0343&rsqb;</number> Calling Signature: The NetScenario Calling Signature is constant or derived but the Data Signature varies. This is a relaxed standard that allows the NetScenario to operate in place of its predecessor but does not produce a Business document that can be directly compared to its predecessor. </paragraph>
<paragraph id="P-0344" lvl="2"><number>&lsqb;0344&rsqb;</number> Incompatible: The Signature does not match and is not derived. </paragraph>
<paragraph id="P-0345" lvl="7"><number>&lsqb;0345&rsqb;</number> Supporting Technical Details </paragraph>
<paragraph id="P-0346" lvl="7"><number>&lsqb;0346&rsqb;</number> NetScenario Logical Model </paragraph>
<paragraph id="P-0347" lvl="0"><number>&lsqb;0347&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> provides an overview of the NetScenario Logical Model and identifies its key components. </paragraph>
<paragraph id="P-0348" lvl="0"><number>&lsqb;0348&rsqb;</number> NetScenario Studio </paragraph>
<paragraph id="P-0349" lvl="0"><number>&lsqb;0349&rsqb;</number> Business Service Assembly and Management environment: </paragraph>
<paragraph id="P-0350" lvl="2"><number>&lsqb;0350&rsqb;</number> Designer: Concerned with the construction of NetScenarios. </paragraph>
<paragraph id="P-0351" lvl="2"><number>&lsqb;0351&rsqb;</number> Manager: Concerned with the management of executable NetScenarios. </paragraph>
<paragraph id="P-0352" lvl="2"><number>&lsqb;0352&rsqb;</number> Administrator: Concerned with management of Account resources. </paragraph>
<paragraph id="P-0353" lvl="2"><number>&lsqb;0353&rsqb;</number> Reporter: Concerned with making reports and data available to Business and System Administrators. </paragraph>
<paragraph id="P-0354" lvl="0"><number>&lsqb;0354&rsqb;</number> NetScenario Business Server </paragraph>
<paragraph id="P-0355" lvl="0"><number>&lsqb;0355&rsqb;</number> Business Service execution engine: </paragraph>
<paragraph id="P-0356" lvl="2"><number>&lsqb;0356&rsqb;</number> NetScenario Interaction Flow Engine: The engine that actually execute a NetScenario. </paragraph>
<paragraph id="P-0357" lvl="0"><number>&lsqb;0357&rsqb;</number> NetScenario Repository </paragraph>
<paragraph id="P-0358" lvl="0"><number>&lsqb;0358&rsqb;</number> The place where NetScenario definitions and supporting data are stored: </paragraph>
<paragraph id="P-0359" lvl="2"><number>&lsqb;0359&rsqb;</number> Design: Where the design time NetScenario definitions are stored. </paragraph>
<paragraph id="P-0360" lvl="2"><number>&lsqb;0360&rsqb;</number> Runtime: Where the &ldquo;compiled&rdquo; NetScenario definitions are stored. </paragraph>
<paragraph id="P-0361" lvl="2"><number>&lsqb;0361&rsqb;</number> Managed Content: Where the managed content (graphics, components, etc.) supporting NetScenarios are stored. </paragraph>
<paragraph id="P-0362" lvl="2"><number>&lsqb;0362&rsqb;</number> Resource: Where the Resource (both Business Resources and Technical Resources) registrations and configurations are stored. </paragraph>
<paragraph id="P-0363" lvl="0"><number>&lsqb;0363&rsqb;</number> System Store </paragraph>
<paragraph id="P-0364" lvl="0"><number>&lsqb;0364&rsqb;</number> The store for underlying services required by the NetScenario Platform: </paragraph>
<paragraph id="P-0365" lvl="2"><number>&lsqb;0365&rsqb;</number> Authentication &amp; Authorization. The store that supports the platform account model: </paragraph>
<paragraph id="P-0366" lvl="3"><number>&lsqb;0366&rsqb;</number> Principles: The concept of a login </paragraph>
<paragraph id="P-0367" lvl="3"><number>&lsqb;0367&rsqb;</number> Account: The concept of ownership </paragraph>
<paragraph id="P-0368" lvl="3"><number>&lsqb;0368&rsqb;</number> Sessions: A store to manage sessions; the runtime context in which NetScenarios and the NetScenario Studio run. </paragraph>
<paragraph id="P-0369" lvl="0"><number>&lsqb;0369&rsqb;</number> NetScenario Results Data </paragraph>
<paragraph id="P-0370" lvl="0"><number>&lsqb;0370&rsqb;</number> The place where NetScenario state and result data is stored: </paragraph>
<paragraph id="P-0371" lvl="2"><number>&lsqb;0371&rsqb;</number> Console Store: A classification of NetScenarios that have run. </paragraph>
<paragraph id="P-0372" lvl="2"><number>&lsqb;0372&rsqb;</number> Cart Store: The place where the state of an incomplete NetScenario is stored. </paragraph>
<paragraph id="P-0373" lvl="2"><number>&lsqb;0373&rsqb;</number> Document Store: The place where the result of a complete NetScenario is stored. </paragraph>
<paragraph id="P-0374" lvl="2"><number>&lsqb;0374&rsqb;</number> Meter Store: Meter records for NetScenarios and business steps (including Web services). When a NetScenario is run it produces a meter record that records various statistics about the NetScenario. </paragraph>
<paragraph id="P-0375" lvl="2"><number>&lsqb;0375&rsqb;</number> Trace Store: Trace records for NetScenarios. When a NetScenario is run it optionally emits a trace record for each step in the scenario. </paragraph>
<paragraph id="P-0376" lvl="2"><number>&lsqb;0376&rsqb;</number> Audit Store: Audit records for NetScenarios. NetScenarios can define explicit audit records that are a part of the business logic. </paragraph>
<paragraph id="P-0377" lvl="7"><number>&lsqb;0377&rsqb;</number> NetScenario Physical Model </paragraph>
<paragraph id="P-0378" lvl="0"><number>&lsqb;0378&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> provides an overview of the NetScenario Physical Model and identifies its key components. </paragraph>
<paragraph id="P-0379" lvl="0"><number>&lsqb;0379&rsqb;</number> Web Farm </paragraph>
<paragraph id="P-0380" lvl="0"><number>&lsqb;0380&rsqb;</number> A set of equivalent Web servers organized to balance request load whereby any request can potential go to any server. </paragraph>
<paragraph id="P-0381" lvl="0"><number>&lsqb;0381&rsqb;</number> Load Balancer </paragraph>
<paragraph id="P-0382" lvl="0"><number>&lsqb;0382&rsqb;</number> An entity that balances the request load across the Web servers. </paragraph>
<paragraph id="P-0383" lvl="0"><number>&lsqb;0383&rsqb;</number> Web Server </paragraph>
<paragraph id="P-0384" lvl="0"><number>&lsqb;0384&rsqb;</number> A server that accepts and responds to t he http messages. </paragraph>
<paragraph id="P-0385" lvl="0"><number>&lsqb;0385&rsqb;</number> NetScenario Server </paragraph>
<paragraph id="P-0386" lvl="0"><number>&lsqb;0386&rsqb;</number> A server that executes the NetScenario Business Server software and interaction flow engine Web that creates, manages and runs NetScenarios. </paragraph>
<paragraph id="P-0387" lvl="0"><number>&lsqb;0387&rsqb;</number> Storage Servers </paragraph>
<paragraph id="P-0388" lvl="0"><number>&lsqb;0388&rsqb;</number> The set of server s required to store NetScenario data an d state information. </paragraph>
<paragraph id="P-0389" lvl="0"><number>&lsqb;0389&rsqb;</number> File Server </paragraph>
<paragraph id="P-0390" lvl="0"><number>&lsqb;0390&rsqb;</number> A server the can store data as files. </paragraph>
<paragraph id="P-0391" lvl="0"><number>&lsqb;0391&rsqb;</number> NetScenario Repository File Store: </paragraph>
<paragraph id="P-0392" lvl="2"><number>&lsqb;0392&rsqb;</number> NetScenario Repository data that is stored in the file system. </paragraph>
<paragraph id="P-0393" lvl="0"><number>&lsqb;0393&rsqb;</number> NetScenario System File Store: </paragraph>
<paragraph id="P-0394" lvl="2"><number>&lsqb;0394&rsqb;</number> NetScenario System data that is stored in the file system. </paragraph>
<paragraph id="P-0395" lvl="0"><number>&lsqb;0395&rsqb;</number> Database Server </paragraph>
<paragraph id="P-0396" lvl="0"><number>&lsqb;0396&rsqb;</number> A server that can manage data in a structured way. </paragraph>
<paragraph id="P-0397" lvl="0"><number>&lsqb;0397&rsqb;</number> NetScenario Repository: </paragraph>
<paragraph id="P-0398" lvl="2"><number>&lsqb;0398&rsqb;</number> A place where NetScenario construction data is stored. </paragraph>
<paragraph id="P-0399" lvl="0"><number>&lsqb;0399&rsqb;</number> NetScenario System Data: </paragraph>
<paragraph id="P-0400" lvl="2"><number>&lsqb;0400&rsqb;</number> A place where data required to manage the NetScenario Platform is stored. </paragraph>
<paragraph id="P-0401" lvl="0"><number>&lsqb;0401&rsqb;</number> NetScenario Results Data: </paragraph>
<paragraph id="P-0402" lvl="2"><number>&lsqb;0402&rsqb;</number> A place where NetScenario results are stored. </paragraph>
<paragraph id="P-0403" lvl="0"><number>&lsqb;0403&rsqb;</number> Queued Engine &ldquo;Farm&rdquo;</paragraph>
<paragraph id="P-0404" lvl="0"><number>&lsqb;0404&rsqb;</number> &lsqb;Optional&rsqb; A system of servers that accept work queued from NetScenanos. </paragraph>
<paragraph id="P-0405" lvl="0"><number>&lsqb;0405&rsqb;</number> Queue Server: </paragraph>
<paragraph id="P-0406" lvl="2"><number>&lsqb;0406&rsqb;</number> The server that distributes the queued work to the queue engine servers. </paragraph>
<paragraph id="P-0407" lvl="0"><number>&lsqb;0407&rsqb;</number> Queued Engine Server: </paragraph>
<paragraph id="P-0408" lvl="2"><number>&lsqb;0408&rsqb;</number> The server(s) that execute the work queued from NetScenarios. </paragraph>
<paragraph id="P-0409" lvl="7"><number>&lsqb;0409&rsqb;</number> NetScenario Operational Model </paragraph>
<paragraph id="P-0410" lvl="0"><number>&lsqb;0410&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> provides an overview of the NetScenario Operational Model. </paragraph>
<paragraph id="P-0411" lvl="7"><number>&lsqb;0411&rsqb;</number> NetScenario Execution Summary </paragraph>
<paragraph id="P-0412" lvl="0"><number>&lsqb;0412&rsqb;</number> Once a NetScenario has been designed it can be published and deployed for use through the online channel of choice. The NetScenario is uniquely identified by its NetScenario ID. A published NetScenario can be deployed multiple times, with each deployment tracked separately. The NetScenario is deployed as a parameterized URL referencing the site where the NetScenario will run. This URL may be placed in an email, on a Web page, deployed through an enterprise portal, or delivered to an intelligent access device such as a PDA. Deployments may also be registered with a UDDI-compliant registry for centralized discovery of NetScenarios. </paragraph>
<paragraph id="P-0413" lvl="0"><number>&lsqb;0413&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, the NetScenario is initiated when a user (directly or indirectly) invokes the deployment URL. The deployment URL points to an instance of the NetScenario Business Server which reads the URL parameters, validates the existing session (or creates one), instructs the engine to create a Service Cart&mdash;an XML container that holds the real time interaction data&mdash;and starts the NetScenario. </paragraph>
<paragraph id="P-0414" lvl="0"><number>&lsqb;0414&rsqb;</number> A NetScenario executes in the context of a session. The session is used to provide a security context mechanism to govern and manage a running NetScenario. It is used as the access point to the user profile data to facilitate the enforcement of NetScenario access security as well as NetScenario personalization. The Session object is maintained separate from the Service Cart, which allows users to run multiple NetScenarios within a session. Each NetScenario uses its own Service Cart. </paragraph>
<paragraph id="P-0415" lvl="0"><number>&lsqb;0415&rsqb;</number> The session is implemented as a server side object that can persist. On creation the session gets a globally unique ID. The session is persisted and the session ID is passed back to the client. To access the session the client passes the session ID back to the server with each request. The session ID is maintained as client-side state for the duration of the NetScenario. This is achieved using an in-memory browser cookie. </paragraph>
<paragraph id="P-0416" lvl="0"><number>&lsqb;0416&rsqb;</number> NetScenarios always run in the context of a session. This facilitates challenge-response authentication such as NT integrated security. A session is created either as part of an explicit user login or implicitly as part of the NetScenario initiation. Implicit session creation is only allowed for NetScenarios that allow anonymous access. If the NetScenario requires login then the caller passes a valid session ID as part of the NetScenario. The present invention allows delegated session creation whereby a calling server takes responsibility for user login and creates a session on behalf of the user. Since the session ID is globally unique it never repeats across sessions. This means that the session is only valid until it times out. </paragraph>
<paragraph id="P-0417" lvl="0"><number>&lsqb;0417&rsqb;</number> The session provides a mechanism that is sufficiently secure for many NetScenarios. However it does not protect the data exchanged over the wire. To protect against network snooping, NetScenarios may be run over SSL connections using HTTPS protocol. This technique encrypts the data exchanged between the client and the server. The management tools within NetScenario Studio present a deployment option to run the assembled NetScenario over SSL. </paragraph>
<paragraph id="P-0418" lvl="0"><number>&lsqb;0418&rsqb;</number> It is important to note that the NetScenario Business Server is designed to work in a scalable Web farm. It supports multiple load-balanced Web servers and does not require that a user session be tied to a particular server. In a Web farm configuration it is likely that a user will be directed to a different Web server each time they submit a page. Consequently, the Service Cart data is persisted to the database on completion of each display page generation and re-loaded on each NetScenario page submission from the user. In addition to the normal data caching that occurs as part of the database operation, the NetScenario Business Server leverages its own Service Cart caching mechanism. Alternatively, the server supports &ldquo;Sticky Sessions,&rdquo; whereby the user is routed to the same server on each subsequent page submits. </paragraph>
<paragraph id="P-0419" lvl="0"><number>&lsqb;0419&rsqb;</number> There are three types of NetScenario Maps: </paragraph>
<paragraph id="P-0420" lvl="2"><number>&lsqb;0420&rsqb;</number> Networked Business Services (NBS) Maps </paragraph>
<paragraph id="P-0421" lvl="2"><number>&lsqb;0421&rsqb;</number> Scenario Map </paragraph>
<paragraph id="P-0422" lvl="2"><number>&lsqb;0422&rsqb;</number> Subprocess Map </paragraph>
<paragraph id="P-0423" lvl="0"><number>&lsqb;0423&rsqb;</number> NBS Maps describe the relationships between the NetScenarios that make up the Networked Business Service. They also keep track of the resources that are used by the particular NBS. </paragraph>
<paragraph id="P-0424" lvl="0"><number>&lsqb;0424&rsqb;</number> NetScenario Maps describe a sequence of steps that make up a particular aspect of the Business Service. Generally NetScenario Maps implement an interaction with a user. However, they may also implement non-interactive flows such as a system-to-system fulfillment process. </paragraph>
<paragraph id="P-0425" lvl="0"><number>&lsqb;0425&rsqb;</number> At design time steps are described by their step definition. This defines the inputs that the runtime step expects and the outputs that the runtime step produces. A UI for each step is provided to allow the inputs to be configured. This presents the step definition in an appropriate way and writes the collected instructions for setting the inputs to the appropriate step record in the Scenario Map. This process is generally referred to a step configuration. Inputs generally get their values as literals or from the output of another step. </paragraph>
<paragraph id="P-0426" lvl="0"><number>&lsqb;0426&rsqb;</number> Subprocess Maps are maps analogous to subroutines that can be represented as a single NetScenario Business Step. They allow NetScenarios to be defined in discrete logical pieces and provide a mechanism to scope data within a NetScenario flow. </paragraph>
<paragraph id="P-0427" lvl="0"><number>&lsqb;0427&rsqb;</number> The NetScenario Compiler converts the set of Scenario Maps and referenced Subprocess Maps into a corresponding set of runtime definitions. The various Runtime definitions include: </paragraph>
<paragraph id="P-0428" lvl="2"><number>&lsqb;0428&rsqb;</number> Networked Business Service Definition Set </paragraph>
<paragraph id="P-0429" lvl="2"><number>&lsqb;0429&rsqb;</number> Resource Inventory Definition </paragraph>
<paragraph id="P-0430" lvl="2"><number>&lsqb;0430&rsqb;</number> Flow Definition Set </paragraph>
<paragraph id="P-0431" lvl="2"><number>&lsqb;0431&rsqb;</number> Flow Interface Definition </paragraph>
<paragraph id="P-0432" lvl="2"><number>&lsqb;0432&rsqb;</number> Flow Extraction Definition </paragraph>
<paragraph id="P-0433" lvl="2"><number>&lsqb;0433&rsqb;</number> Provisioning Definition </paragraph>
<paragraph id="P-0434" lvl="2"><number>&lsqb;0434&rsqb;</number> Flow Definition </paragraph>
<paragraph id="P-0435" lvl="2"><number>&lsqb;0435&rsqb;</number> Page Set Definition </paragraph>
<paragraph id="P-0436" lvl="2"><number>&lsqb;0436&rsqb;</number> Console Definition </paragraph>
<paragraph id="P-0437" lvl="2"><number>&lsqb;0437&rsqb;</number> Document Interface Definition </paragraph>
<paragraph id="P-0438" lvl="2"><number>&lsqb;0438&rsqb;</number> Document Extraction Definition </paragraph>
<paragraph id="P-0439" lvl="2"><number>&lsqb;0439&rsqb;</number> Document Presentation Definition </paragraph>
<paragraph id="P-0440" lvl="0"><number>&lsqb;0440&rsqb;</number> The Networked Business Service Definition Set describes the networked service and references all the runtime definitions that make up this networked service. Its essential purpose is to provide a mechanism to manage the set of runtime definitions. A Networked Business Service consists of a group of related NetScenarios and definitions of their relationship with each other. </paragraph>
<paragraph id="P-0441" lvl="0"><number>&lsqb;0441&rsqb;</number> The Resource Inventory Definition references all the resources that are used by the Networked Business Service definition. These resources must exist for the Networked Business Service to run. Resources may be shared across other Networked Business Services. Examples of resources are Web Services, database queries and NetScenarios that are used by, but are external to the Networked Business Service. </paragraph>
<paragraph id="P-0442" lvl="0"><number>&lsqb;0442&rsqb;</number> The Flow Definition Set describes a NetScenario service process flow and references all the runtime definitions that make up this NetScenario flow. Its essential purpose is to provide a mechanism to manage the set of runtime definitions. A Networked Business Service Definition Set owns one or more Flow Definition Sets. </paragraph>
<paragraph id="P-0443" lvl="0"><number>&lsqb;0443&rsqb;</number> The Flow Interface Definition describes the standard and user defined Input and Output arguments of the NetScenario described as a WSDL contract. </paragraph>
<paragraph id="P-0444" lvl="0"><number>&lsqb;0444&rsqb;</number> NetScenario flow. In some cases it may be identical to the Document Extraction Definition. </paragraph>
<paragraph id="P-0445" lvl="0"><number>&lsqb;0445&rsqb;</number> The Provisioning Definition provides a description and default values for all the arguments for the NetScenario flow. Both system-defined and user-defined are included. This definition is used to create the Provisioning record for a NetScenario deployment. Since the provisioning definition defines an interface to the NetScenario it is one of the factors that can be evaluated to determine compatibility. The provisioning record is a superset of the Flow Interface Definition. It includes arguments for system level bindings that can only be provided by the Provisioning record. </paragraph>
<paragraph id="P-0446" lvl="0"><number>&lsqb;0446&rsqb;</number> The Flow Definition provides the execution instructions for the NetScenario flow. </paragraph>
<paragraph id="P-0447" lvl="0"><number>&lsqb;0447&rsqb;</number> The Page Set Definition groups a set of Page definitions and a Preview definition for this NetScenario flow. A NetScenario flow may have more than one of Page Set Definition to support different client devices. </paragraph>
<paragraph id="P-0448" lvl="0"><number>&lsqb;0448&rsqb;</number> The Console Definition describes the console classification record that is defined for this NetScenario flow. The console provides a way to find persisted NetScenario instances. It presents a table where each row in the table describes and references a particular instance of the NetScenario. The Console Definition defines the table&apos;s columns. A NetScenario does not have to have a Console but without one it cannot support various features that rely on persistence. </paragraph>
<paragraph id="P-0449" lvl="0"><number>&lsqb;0449&rsqb;</number> The Document Interface Definition describes the set of data that this NetScenario flow creates as its &ldquo;final&rdquo; form. It is the set of data that can be seen externally from the NetScenario. This is defined if the Console is defined. The Document Interface Definition is defined in terms of a XSD schema. </paragraph>
<paragraph id="P-0450" lvl="0"><number>&lsqb;0450&rsqb;</number> The Document Extraction Definition provides the instructions for extracting the set of data described by the Document Interface definition. This is defined if the Console is defined. </paragraph>
<paragraph id="P-0451" lvl="0"><number>&lsqb;0451&rsqb;</number> The Document Presentation Definition provides a presentation of the data described by the Document Interface Definition. This is defined if the Console is defined. </paragraph>
<paragraph id="P-0452" lvl="0"><number>&lsqb;0452&rsqb;</number> The relationships between these are shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. The Business Service Project has one or more Flow Maps (Scenario Maps). Two are shown here. Flow Map <highlight><bold>1</bold></highlight> has multiple display targets (e.g., Browser and WAP). Flow Map n has a Console. These are compiled to Flow Definition Set <highlight><bold>1</bold></highlight> and Flow Definition Set n. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; </claim-text>
<claim-text>using the Web-service components to execute business functions and create a multi-service application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; </claim-text>
<claim-text>discovering selected Web-service compoents from standards based registries; </claim-text>
<claim-text>using the Web-service components to execute business functions and create a multi-service application. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; and </claim-text>
<claim-text>using Web-service standards to enable collaborative development of multi-service applications. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; </claim-text>
<claim-text>creating a technical abstraction layer from the Web-service components and enable a business level use of the Web-service components. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; </claim-text>
<claim-text>using the Web-service components to execute business functions and create a multi-service application; and </claim-text>
<claim-text>dynamically provisioning the multi-service application to personalize run time behavior and provide value chain syndication. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method for creating on-line business applications from Web-service components: 
<claim-text>providing an assembly module that is configured to model business applications; </claim-text>
<claim-text>including the Web-service components as elements in the assembly module; </claim-text>
<claim-text>using the Web-service components to execute business functions and create multi-service applications; and </claim-text>
<claim-text>combining at least two multi-service applications to create a networked multi-service application.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004746A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004746A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004746A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004746A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004746A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004746A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004746A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004746A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004746A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004746A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004746A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004746A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004746A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004746A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004746A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004746A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004746A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030004746A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030004746A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030004746A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030004746A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030004746A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030004746A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
