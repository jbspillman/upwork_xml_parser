<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005464A1-20030102-D00000.TIF SYSTEM "US20030005464A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00001.TIF SYSTEM "US20030005464A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00002.TIF SYSTEM "US20030005464A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00003.TIF SYSTEM "US20030005464A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00004.TIF SYSTEM "US20030005464A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00005.TIF SYSTEM "US20030005464A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005464A1-20030102-D00006.TIF SYSTEM "US20030005464A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005464</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10135879</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020430</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N007/173</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/16</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>725</class>
<subclass>115000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>725</class>
<subclass>114000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>219000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for repository storage of private data on a network for direct client access</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60287905</doc-number>
<document-date>20010501</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60288950</doc-number>
<document-date>20010504</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
<non-provisional-of-provisional>
<document-id>
<doc-number>60322495</doc-number>
<document-date>20010914</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Adrian</given-name>
<family-name>Gropper</family-name>
</name>
<residence>
<residence-us>
<city>Watertown</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Sean</given-name>
<family-name>Doyle</family-name>
</name>
<residence>
<residence-us>
<city>Somerville</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Amicas, Inc.</organization-name>
<address>
<city>West Newton</city>
<state>MA</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>TESTA, HURWITZ &amp; THIBEAULT, LLP</name-1>
<name-2></name-2>
<address>
<address-1>HIGH STREET TOWER</address-1>
<address-2>125 HIGH STREET</address-2>
<city>BOSTON</city>
<state>MA</state>
<postalcode>02110</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In one aspect, the invention relates to a method for storing an image or a manifest that references a number of related images in a repository. The method comprises receiving, by an importer, data, generating an identifier associated with the data, the identifier including a substantially random unique identifier, transmitting the data to a repository and transmitting the identifier to a location separate and distinct from the repository and the importer. In one embodiment, the image includes a medical image. In another embodiment, the method further includes encoding the image to a coded image. In another embodiment, the step of requesting the image further comprises requesting the image from the repository using a standards-based protocol, and the step of transmitting the image further comprises transmitting the image file using a proprietary or a standards-based protocol. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims the benefit of and priority to the co-pending U.S. Provisional Application, Serial No. 60/287,905, filed May 1, 2001, entitled &ldquo;System and Methods for Manipulating Medical Images and Managing Workflow,&rdquo; the entirety of which is incorporated herein by reference. This application also claims the benefit of and priority to the co-pending U.S. Provisional Application, Serial No. 60/288,950, filed May 4, 2001, entitled &ldquo;System and Methods for Manipulating Medical Images and Managing Workflow,&rdquo; the entirety of which is incorporated herein by reference. This application also claims the benefit of and priority to the co-pending U.S. Provisional Application, Serial No. 60/322,495, filed Sep. 14, 2001, entitled &ldquo;System and Methods For Streaming Medical Images Using a Standards-Based Protocol,&rdquo; the entirety of which is incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates generally to medical data management systems. More specifically, in one embodiment, the invention relates to systems and methods for storing medical images using standards-based image coding and image access protocols. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In some known prior art systems, the archival storage of medical information in (non-physical film) electronic form is subject to problems of high cost, rapid obsolescence and inadequate security. Some systems use a central database to store images. The size of medical images prohibits these systems from scaling efficiently. Other systems distribute storage over a network, but still require a central management module to manage and retrieve the images when requested. This creates a bottleneck and there can still be scalability problems. In either case, pooling of storage (for storage management and security management convenience) for the applications of unrelated vendors is very difficult. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The current invention addresses these problems and others, in one embodiment, by employing asymmetrical storage architecture, using commercially accepted standards where applicable. According to one embodiment, this asymmetrical storage stores the medical image in a first location and unique identifying information, including the address of the image, in another location, separate from the first location. By controlling who has access to the identifying information, the second location can be a standards-based, highly accessible repository with low or no probability of someone accidentally retrieving the image and the first location can be a pool of storage for many applications that is not specific to the proprietary needs and protocols of any single vendor. Examples of two standards for image retrieval and coding are HTTP(S) and JPEG 2000. Other such standards, however, may be employed without deviating from the scope of the invention. HTTP is the common standard for Web clients connecting, authenticating and disconnecting from Web servers. HTTPS and other security enhancements provide standards-based encryption on top of the HTTP standard. HTTP is commonly used to efficiently transfer files such as Web pages. Part of the efficiency of HTTP transfers comes from the capability to discontinue the transfer to the remainder of a file once the recipient has determined that they have received the information of interest. A further HTTP efficiency is the ability to define byte ranges where only a portion of a file is retrieved. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> JPEG 2000 is a standard for coding images that can be used to order the image information in a file to suit different applications. In particular, the ordering of an image in order of resolution (from low resolution to highest resolution) makes it possible to use the same file to efficiently serve images to both low and high-resolution clients. The low-resolution clients simply discontinue the file transfer earlier than the high-resolution clients. In one aspect, the invention recognizes that the ability of HTTP clients to discontinue file transfers therefore complements the ability of JPEG 2000 standard to code image files in order of resolution and results in an efficient, standards-based image archive. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The combination of a standard Web server holding files in a standard JPEG 2000 format creates a non-proprietary system. By enabling medical images to be stored in a non-proprietary manner, the current invention promises lower cost and reduced risk of rapid obsolescence. In particular, through use of the invention, high-resolution medical images can now be stored alongside non-medical, Web-accessible content such as Web sites and music files without sacrificing efficiency of retrieval. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A further refinement of the standards-based storage is achieved by storing a list of related image files and associated meta-data on the Web server in a standards-based format such as XML. The storage of meta-data sufficient to enable efficient access to a related set of images avoids the inefficiency of unnecessary database queries or unnecessary image file retrievals. In a particular embodiment of this invention, the XML-coded file contains image lists and associated meta-data that is processed by a Java-standard Web browser to provide a high speed and feature rich user interface experience without any database queries. As a further refinement, in another embodiment, this meta-data file can be encoded to facilitate streaming by putting the most commonly required information or an index at the beginning of the file. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> According to another feature, encoding the file identifiers enforces the security of image and meta-data files stored on a shared Web server. Typically, a database stores selected information about a related series of images (e.g., the images collected during a single medical imaging procedure for a patient) according to indexes such as patient name and procedure date and associates the encoded file identifier that describes the procedure and lists the images generated by the procedure. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The invention, in one embodiment, provides low cost, low risk of obsolescence and security by segregating the indexing and security functions in a database store that is separate from the file store. According to one feature, the database store and the file store can each be accessed through shared or separate Web-servers. Since the database store is typically much smaller than the associated image (and image meta-data) files, it lends itself to less costly and more convenient management. In particular, when a facility has an existing medical record management system (such as for the storage of blood test or radiology reports) the image database store can be eliminated entirely by storing the file identifier of the meta-data (or the image file) in the medical record system just like any other small piece of medical information. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> To efficiently retrieve some or all of the images associated with a procedure, the file identifier (as stored in a separate database or a medical record system) is passed to an image display client such as a Java-enabled Web browser or a code module of similar functionality that has been added to a medical image display workstation. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In one aspect, the invention is related to employing a standards-based compression protocol (e.g., JPEG 2000) to stream radiological or other medical images through a Web server to client devices. In one embodiment, the invention is related to a method for streaming medical images from a data storage device to a client device using a standards-based image coding algorithm. According to one embodiment, the method includes receiving a &ldquo;Digital Image Communications in Medicine&rdquo; (DICOM) medical image from an image source and storing the medical image either in DICOM format or using the standards-based image coding format or a proprietary coding format. The method further includes accessing the stored medical image and streaming the stored medical image to the client device. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In a further embodiment, the method includes preprocessing the medical image prior to storing the medical image. In still another embodiment, the standards-based image coding algorithm uses the JPEG 2000 architecture. In yet another embodiment, the step of storing the medical image includes compressing the medical image. In still another embodiment, the medical image is accessed via a Web server. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In another aspect, the invention is related to a system including a database store that is separate from an electronic file store, whereby the file store is standards-based and indexed by the database store. In one embodiment, the file store provides security by encoding the identifier of the file prior to indexing in the database store. In another embodiment, the file store includes coded image files as well as coded lists of image files and associated information (meta-data) about the image files. In another embodiment, the file store provides security by encoding the identifier of the meta-data file prior to indexing in the database store. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In another embodiment, the database store is a medical record system. In another embodiment, the database store saves the meta-data file identifier as an element of a medical record system. In another embodiment, the invention encodes the meta-data in a format so that a Web server can efficiently stream it by putting the most commonly required elements or an index into the remaining elements earlier in the meta-data file. In another embodiment, the file store includes meta-data serving some or all of the following elements: patient identifiers that could be used to cross reference studies, security identifiers that could be used to restrict access, original study identifiers (e.g.: DICOM StudyInstance UID) that could be used to retrieve non-image data from another source (e.g., DICOM Key Object), original image identifiers (e.g., DICOM SOPInstance UID) that could be used to verify correct image retrieval, expiration dates that could be used to purge information as it ages, pointers to multiple copies of the same image for redundancy, and pointers to multiple versions of the same image (e.g.: lossy and lossless versions) that could be deleted separately. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In another aspect, the invention relates to one or more Web-accessible HTML standards-based file store (or stores) that archive images encoded in JPEG 2000 format and/or meta-data files encoded in XML format that include a list of associated image files. In one embodiment, the file store encodes the image and meta-data file identifiers to provide security. In another embodiment, the file store provides security by preventing &ldquo;browsing&rdquo; and allows file identifiers to be pseudo-random with a large enough search space so that the probability of a random search encountering any stored images is very low (i.e., substantially random identifier). </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In another aspect, the invention relates to a method for storing medical image files. In one embodiment, the method includes storing an image file at a first storage location; and storing a random unique identifier (&ldquo;RUID&rdquo;) associated with the image file at a second storage location. In another aspect, the invention relates to a different method for storing medical image files. In a further embodiment, the method comprises receiving an image file from an image source and generating a random unique identifier associated with the image file. In an additional embodiment, the method further includes transmitting the image file to a repository and transmitting the random unique identifier to a destination separate from the repository. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In other embodiments, the methods include converting the image file from a first format to a second format. In another embodiment, the second format is a standards-based format. In another embodiment, the standards-based format conforms to the JPEG2000 standard. Another embodiment includes requesting the image file from the first storage location, using the random unique identifier stored in the second storage location. In another embodiment, the request uses a standards-based protocol. In another embodiment, the standards-based protocol conforms to the HTTP standard. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In another aspect the invention relates to a system for storing medical image files. In one embodiment, the system includes a first storage location and a second storage location, which are separate from each other. In a further embodiment, the first storage location receives an image file associated with a random unique identifier and the second storage location receives the random unique identifier. In one aspect, the invention relates to an importer for storing medical image files. In a further aspect, the importer includes an input port, a first output port and a second output port. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In one feature, the input port is in communication with an image source, and the input port is configured to receive a file from the image source. The import port can receive images in a file format, in streamed format, and/or in other non-file protocol formats (e.g., DICOM and the like). According to another feature, the first output port is in communication with a first storage location, and the first output port is configured to transmit the file to the first storage location. According to a further feature, a random unique identifier generator is in communication with the input port and optionally with the first output port, and the random unique identifier generator generates a random unique identifier and associates the random unique identifier with the received file. The second output port is in communication with a second storage location that is separate from the first storage location, and the second output port is configured to transmit the random unique identifier to the second storage location. In one embodiment, the second location is a database associated with the importer. In another embodiment a copy of the RUID sent to the second storage location is kept in a database associated with the importer but the RUID is sent to a patient or to a medical record database that is not associated with the importer and does not have to reference the importer&apos;s database in order to retrieve the file from the first storage location. In one embodiment, the random unique identifier generator is part of the importer. In another embodiment, the random unique identifier generator is part of the first storage location. In another embodiment, a portion of the random unique identifier generator is part of the importer and a portion of the random unique identifier generator is part of the first storage location. The portions communicate and may negotiate with each other over a communication channel to determine a RUID for the file. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In another aspect, the invention relates to a method for storing data in a repository. The method comprises receiving, by an importer, data, generating an identifier associated with the data, the identifier including a substantially random unique identifier, transmitting the data to a repository and transmitting the identifier to a location separate and distinct from the repository and the importer. In one embodiment, the data includes a medical image. In another embodiment, the method further includes encoding the data to a coded file. In another embodiment, the coded file includes a lossy compressed image. In another embodiment, the coded file includes a wavelet-coded image. In another embodiment, the coded file is a standards-based format. In another embodiment, the coded file conforms to the JPEG2000 standard. In another embodiment, the step of requesting the data further comprises requesting the data from the repository using a standards-based protocol. In another embodiment, the method further includes requesting the image from the repository using the identifier. In another embodiment, the method further includes generating a new identifier associated with the data after the data has been requested. In another embodiment, the method further includes storing the identifier in a manner compliant with HIPAA. In another embodiment, the method further includes restricting access to the identifier at the location. In another embodiment, the method further includes prohibiting browsing of a directory in the repository in which the data is located. In another embodiment, the identifier includes an address of the data in the repository. In another embodiment, the random unique identifier corresponds to a directory in the repository in which the data is located. In another embodiment, the location is a hospital information system. In another embodiment, the location is associated with a patient with whom the data is associated. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In another aspect, the invention relates to a method for storing a manifest in a repository. The method includes receiving, by an importer, one or more images from an image source, generating a respective set of identifying data associated each of the one or more images, and generating a manifest including the respective set of identifying data associated each of the one or more images. The method also includes generating identifying data for the manifest, the identifying data including a substantially random unique identifier, transmitting the one or more images and the manifest to a repository, and transmitting the identifying data for the manifest to a location separate and distinct from the repository and the importer. In one embodiment, the manifest conforms to an XML standard. In another embodiment, the method the manifest conforms to a DICOMDIR standard, wherein the one or more images conform to the DICOM standard. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In another aspect, the invention relates to an importer for preparing data to be stored in a repository. The importer includes a receiver module, at least a portion of an identifier and a transmitter module. The receiver module is configured to receive data from an image source. The at least a portion of an identifier generator module is configured to negotiate an identifier associated with the data, the identifier including a substantially random unique identifier. The transmitter module is configured to transmit the data to a first location and to transmit the identifier to a second location, wherein the first and second locations are separate and distinct from each other and are accessible by a user without intervention by the importer. In one embodiment, the import further comprises an encoding module configured to encode the data to a coded file. In another embodiment, the importer further includes a manifest generator module configured to generate a manifest including the identifier of the data. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In another aspect, the invention relates to a system for storing an image in a standards-based repository. The system includes an image processor, a storage location, and a client agent. The image processor is configured to receive an image from an image source, to generate a substantially random unique identifier associated with the image and to format the image to be compatible with a standards-based repository. The storage location is separate from the standards-based repository and configured to receive and to store the substantially random unique identifier. The client agent is configured to access the storage location to retrieve the substantially random unique identifier and to access the image from the standards-based repository using the unique identifier to locate the image.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The above and further advantages of the invention may be better understood by referring to the following description taken in conjunction with the accompanying drawing, in which: </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1A and 1B</cross-reference> are block diagrams of illustrative embodiments of a system to store and retrieve compressed images in a repository in accordance with the invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of another illustrative embodiment of a system to store and retrieve compressed medical images in a hospital environment in accordance with the invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of another illustrative embodiment of a system to store and retrieve compressed images in accordance with the invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram of an illustrative embodiment of a process to store compressed images in accordance with the invention; and </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow diagram of an illustrative embodiment of a process to retrieve compressed images stored in accordance with the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a diagram of an illustrative system <highlight><bold>100</bold></highlight> for storing and retrieving images in a repository according to the invention. The system <highlight><bold>100</bold></highlight> includes an image source <highlight><bold>102</bold></highlight>, an importer module <highlight><bold>104</bold></highlight>, a repository <highlight><bold>108</bold></highlight> representing a first storage location, and an authorized user <highlight><bold>110</bold></highlight>, representing a second storage location. The repository <highlight><bold>108</bold></highlight> includes a file storage device <highlight><bold>111</bold></highlight> and a network interface <highlight><bold>112</bold></highlight>. The system <highlight><bold>100</bold></highlight> also includes a network <highlight><bold>114</bold></highlight> and a client device <highlight><bold>116</bold></highlight>. The client device includes an image viewer module <highlight><bold>117</bold></highlight>. The importer module <highlight><bold>104</bold></highlight>, the image viewer module <highlight><bold>117</bold></highlight> and all modules mentioned throughout the specification are implemented as a software program and/or a hardware device (e.g., server, computing device, ASIC, FPGA and the like) </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The system <highlight><bold>100</bold></highlight> includes a first communication channel <highlight><bold>120</bold></highlight> between the image source <highlight><bold>102</bold></highlight> and the importer <highlight><bold>104</bold></highlight>. The system <highlight><bold>100</bold></highlight> includes a second communication channel <highlight><bold>122</bold></highlight> between the importer <highlight><bold>104</bold></highlight> and the repository <highlight><bold>108</bold></highlight>. The system <highlight><bold>100</bold></highlight> includes a third communication channel <highlight><bold>126</bold></highlight> between the importer <highlight><bold>104</bold></highlight> and the authorized user <highlight><bold>110</bold></highlight>. The system <highlight><bold>100</bold></highlight> includes a fourth communication channel <highlight><bold>136</bold></highlight> between the repository <highlight><bold>108</bold></highlight> and the network <highlight><bold>114</bold></highlight>. The system <highlight><bold>100</bold></highlight> includes a fifth communication channel <highlight><bold>138</bold></highlight> between the client device <highlight><bold>116</bold></highlight> and the network <highlight><bold>114</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> For example, the network <highlight><bold>114</bold></highlight> can be a local-area network (LAN), such as a company Intranet, a wide area network (WAN) such as the Internet or the World Wide Web, a Virtual Private Network (VPN) or the like. The communication channels <highlight><bold>120</bold></highlight>, <highlight><bold>122</bold></highlight>, <highlight><bold>126</bold></highlight>, <highlight><bold>130</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1B</cross-reference>), <highlight><bold>136</bold></highlight>, <highlight><bold>138</bold></highlight>, <highlight><bold>140</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1B</cross-reference>), <highlight><bold>150</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1B</cross-reference>), <highlight><bold>155</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1B</cross-reference>) and <highlight><bold>160</bold></highlight> (FIG. <highlight><bold>1</bold></highlight>B) and the network <highlight><bold>114</bold></highlight> represent a communication path that can be implemented through a variety of connections including standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), wireless connections and the like. The connections can be established using a variety of communication protocols and standards (e.g., HTTP, HTTPS, DICOM, HL7, NTFS, FTP, SSL, TCP/IP, RDP, IPX, SPX, NetBIOS, Ethernet, RS232, direct asynchronous connections and the like). In a preferred embodiment, the communications protocols used across communication channels <highlight><bold>136</bold></highlight> and <highlight><bold>138</bold></highlight> and the network <highlight><bold>114</bold></highlight> are standards-based protocols, and not proprietary, to facilitate universal client <highlight><bold>116</bold></highlight> access to images stored in the repository <highlight><bold>108</bold></highlight>, as described in more detail below. In another embodiment, the communication channel <highlight><bold>122</bold></highlight> is proprietary. This embodiment allows the importer module <highlight><bold>104</bold></highlight> to have a different set of features and/or privileges than the clients <highlight><bold>116</bold></highlight> communicating over the network <highlight><bold>114</bold></highlight> using a standards-based protocol. For example, this can allow the importer module <highlight><bold>104</bold></highlight> to browse directories containing image files where the client <highlight><bold>116</bold></highlight> and other clients using the network <highlight><bold>114</bold></highlight> are prohibited from browsing. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In operation, the importer module <highlight><bold>104</bold></highlight> receives data from the image source <highlight><bold>102</bold></highlight> over the communication channel <highlight><bold>120</bold></highlight>. The data received by the importer <highlight><bold>104</bold></highlight> can include both image and non-image data (e.g., text, patient information, image parameters and the like). The data can be transmitted and stored i) in &ldquo;files&rdquo;, ii) as streamed formats and/or iii) other non-file formats (e.g., DICOM and the like). Accordingly, although the illustrative embodiments deals primarily with image files, virtually any other data construct may be employed without deviating from the scope of the invention. The image source <highlight><bold>102</bold></highlight>, also referred to as a modality, is a device that captures an image and/or image related data. For example, the image source <highlight><bold>102</bold></highlight> can be a computed tomography (&ldquo;CT&rdquo;) imager, a magnetic resonance (&ldquo;MR&rdquo;) imager, an ultrasound (&ldquo;US&rdquo;) imager, an X-ray imager, a computed radiography (&ldquo;CR&rdquo;) imager, a digital radiography (&ldquo;DR&rdquo;) imager, a secondary capture (&ldquo;SC&rdquo;) imager (e.g., a 3D reconstruction), a radiograph (&ldquo;RG&rdquo;) imager (e.g., radiograph captured by a film digitizer) and the like. The image source <highlight><bold>102</bold></highlight> can also be a camera, a video recorder a scanner and the like. If the image source <highlight><bold>102</bold></highlight> does not generate a digital image, a converter (not shown) is added to the output of the image source <highlight><bold>104</bold></highlight> to generate a digital image file for receipt by the importer <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In one embodiment, the importer <highlight><bold>104</bold></highlight> generates identifying data associated with that received image file. The identifying data includes an address representing a location and/or a path to the location where the client device <highlight><bold>116</bold></highlight> can access that received image file. The address can be, for example, a URL. In one embodiment, as described in more detail below, the identifying data contains a substantially random unique identifier therein. The unique identifier is substantially random because it is generated such that there is low or no probability of an unauthorized user on the network <highlight><bold>114</bold></highlight> accidentally or intentionally generating the unique identifier if that user does not know what it is. In another embodiment, the repository <highlight><bold>108</bold></highlight> generates the identify data for the image file. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In another embodiment, both the importer module <highlight><bold>104</bold></highlight> and the repository <highlight><bold>108</bold></highlight> are involved in generating the identifying data. In this embodiment the importer <highlight><bold>104</bold></highlight> and the repository <highlight><bold>108</bold></highlight> negotiate what the identifying data will finally be. For example, in one embodiment, the importer module <highlight><bold>104</bold></highlight> contains a storage (e.g., persistent memory, database, hard drive or other physical device and the like) of all identifying data for images previously stored in the repository <highlight><bold>108</bold></highlight> or elsewhere. The repository <highlight><bold>108</bold></highlight> generates initial identifying data for a new image the importer <highlight><bold>104</bold></highlight> wants to store in the repository. The identifying data in this embodiment contains a RUID. The repository <highlight><bold>108</bold></highlight> transmits this initial identifying data to the importer <highlight><bold>104</bold></highlight>. The importer checks for collisions with any previously stored images with the same or very similar identifying data. If there are collisions, the importer <highlight><bold>104</bold></highlight> requests that the repository <highlight><bold>108</bold></highlight> generate different identifying data for the image. If there are no collisions, the importer <highlight><bold>104</bold></highlight> accepts the identifying data from the repository <highlight><bold>108</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The importer <highlight><bold>104</bold></highlight> transmits the identifying data to the second storage location, in the illustrated embodiment, an authorized user <highlight><bold>110</bold></highlight>. In addition to the examples above, the communication channel <highlight><bold>126</bold></highlight> can represent a facsimile machine, printer, email and the like that prints out and/or displays the identifying data for retrieval by the authorized user <highlight><bold>110</bold></highlight>. The importer <highlight><bold>104</bold></highlight> can also deliver the identifying data as an audio message, over the phone, through speakers and the like. The authorized user <highlight><bold>110</bold></highlight> is a user who is authorized to have access to the received image. For example, in an embodiment where the image is a medical image, the authorized user <highlight><bold>110</bold></highlight> can be the technician capturing the image with the image source <highlight><bold>102</bold></highlight>, a physician who order the image, a primary care physician of the patient associated with the image, the patient, and the like. The authorization process can be any accepted authorization, for example, passwords, biometric authentication, passing of the piece of paper with the identifying data from one person to another recognized authorized user, and the like. The importer <highlight><bold>104</bold></highlight> can authorize a user or can receive indication from a trusted source that the user is an authorized user <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In some embodiments, the importer <highlight><bold>104</bold></highlight> converts the image file from the received format (e.g., DICOM and the like) to a different format (e.g., XML, JPEG2000 and the like). To facilitate enterprise distribution of image files, the importer <highlight><bold>104</bold></highlight> creates a smaller or streamable, wavelet coded image. In some embodiments, the importer <highlight><bold>104</bold></highlight> compresses the size of the image, for example taking advantage of redundant information in the image. In some embodiments, the importer converts the received image file to a coded image that contain less information than the source image (e.g., DICOM) and may be referred to as a lossy image. Preferably, the resolution of the lossy image is high enough to perform its intended function (e.g., using it for medical evaluation). In one embodiment, the compression algorithm is a standards-based compression algorithm. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The importer <highlight><bold>104</bold></highlight> transmits the received image file (e.g., DICOM), or the coded image file (e.g., JPEG2000) if applicable, to the first storage location, in the illustrated embodiment, the repository <highlight><bold>108</bold></highlight>. The repository <highlight><bold>108</bold></highlight> represents any storage device/system accessible by the client device <highlight><bold>116</bold></highlight> via the network <highlight><bold>114</bold></highlight>. The repository <highlight><bold>108</bold></highlight> can be, for example, a file server, a RAID system and the like. The file storage device <highlight><bold>111</bold></highlight> can be a magnetic storage, device, an optical storage device, a non-volatile memory device and the like. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In addition to medical images, the repository <highlight><bold>108</bold></highlight> can optionally also store patient study descriptor information. The term patient study refers to a collection of data and images related to a particular patient at a particular time. In one embodiment, the patient study descriptor information, also referred to as a manifest, is stored as an XML file, an HTML file and/or the like. In another embodiment, where the collection of stored images is a collection of DICOM images, the manifest is stored as a DICOM file known as DICOMDIR. As described in more detail below, in one embodiment, a random unique identifier identifies the manifest (e.g., XML file and the DICOMDIR file). </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> DICOMDIR is a type of manifest file that places internal constraints on the elements in the manifest due to the DICOM standard. For example, the file identifiers in DICOMDIR are limited to 71 characters and uses certain characters (e.g., uppercase characters, integers, &lsquo;/&rsquo;, and &lsquo;_&rsquo;). Further, the manifest file name itself must be &ldquo;DICOMDIR&rdquo;. There are several ways to deal with any DICOM restrictions to use a DICOMDIR manifest with this invention. In one embodiment using DICOMDIR, a study folder that uses a RUID can be created and the files can be copied from the DICOM Device or CD and placed in this folder. The files can be retrieved by reading the DICOMDIR manifest and then copying the individual files back out to a local file volume to be read by standard DICOM software. The file structure is, for example: </paragraph>
<paragraph id="P-0041" lvl="1"><number>&lsqb;0041&rsqb;</number> http://hostname/Adoiuj97879aE4/DICOMDIR </paragraph>
<paragraph id="P-0042" lvl="1"><number>&lsqb;0042&rsqb;</number> http://hostname/Adoiuj97879aE4/FILEROOT/STUDY1/SERIES1/IMAGE1.DCM </paragraph>
<paragraph id="P-0043" lvl="1"><number>&lsqb;0043&rsqb;</number> http://hostname/Adoiuj97879aE4/FILEROOT/STUDY1/SERIES2/IMAGE1.DCM </paragraph>
<paragraph id="P-0044" lvl="1"><number>&lsqb;0044&rsqb;</number> http://hostname/Adoiuj97879aE4/FILEROOT/STUDY1/SERIES2/IMAGE2.DCM </paragraph>
<paragraph id="P-0045" lvl="7"><number>&lsqb;0045&rsqb;</number> The DICOMDIR file contains file IDs like &ldquo;/FILEROOT/STUDY1/SERIES2/IMAGE1.DCM&rdquo;. In this illustrative embodiment, the RUID is a file directory location (e.g., Adoiuj97879aE4) to copy a DICOMDIR file and its associated DICOM objects. No internal modifications are made to the DICOMDIR object. In another embodiment, the DICOMDIR file and associated subdirectories can be combined into a single file such as a zip or tar file. The file name contains a RUID, for example, http://hostname/amicas-patients/ByiouKDJ9090Ss/jlkj09234aA.zip. This file contains, after unzipping or untarring, the entire directory hierarchy referred to by the DICOMDIR. Again, no internal modifications are made to the DICOMDIR object. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In another embodiment, the DICOMDIR file contains can be mapped to RUID references in several ways. For example, DICOMDIR allows private elements, which can contain the full RUID references for each file ID. The retrieval/copying software module (not shown) retrieves the DICOM objects via their RUID and places them in files with names represented by the DICOMDIR file IDs. In this embodiment, the retrieval/copying software module performs this remapping. In another embodiment, the DICOMDIR file IDs could contain the RUID pathnames. These file names may be longer than 71 characters and may contain forbidden characters. The copy/retrieval software module generates new DICOMDIR file IDs as part of the copy process so that these images could be read by standard DICOM software. In another embodiment, a separate manifest file keeps the mapping of the DICOMDIR file IDs to the RUID path names. The copying process copies the image or other data objects with RUIDs into the DICOMDIR file IDs as a separate procedure. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> An average patient study can include fifty images. Transmitting identifying data for fifty images to the authorized user <highlight><bold>110</bold></highlight> may overwhelm the authorized user <highlight><bold>110</bold></highlight>. In one embodiment, instead of the identifying data for fifty images, the importer <highlight><bold>104</bold></highlight> transmits identifying data of a manifest containing the identifying data for the fifty images in the study. As explained in more detail below, the image viewer <highlight><bold>117</bold></highlight> retrieves the manifest from the repository <highlight><bold>108</bold></highlight> using the identifying data of the manifest and, upon opening the manifest, has the identifying data for each of the images and can retrieve the images as the user <highlight><bold>110</bold></highlight> requests. In other embodiments, the manifest is stored in multiple formats, for example XML, HTML and the like, so that different viewers (e.g., <highlight><bold>117</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1A</cross-reference>), <highlight><bold>240</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>)) using different file formats can access the same information. The general structure of a manifest, in an embodiment where it is stored as an XML file, is:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Study&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="196PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Patient attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Study attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="35PT" align="left"/>
<colspec colname="1" colwidth="182PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Series attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Image attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Study&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0048" lvl="7"><number>&lsqb;0048&rsqb;</number> For example, a study with two series of images, with one image in the first series and one hundred images in the second series, the structure is:  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Study&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="21PT" align="left"/>
<colspec colname="1" colwidth="196PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Patient attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="189PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Study attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="35PT" align="left"/>
<colspec colname="1" colwidth="182PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Series attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Image attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="49PT" align="left"/>
<colspec colname="1" colwidth="168PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Series attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="56PT" align="left"/>
<colspec colname="1" colwidth="161PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Image attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="63PT" align="left"/>
<colspec colname="1" colwidth="154PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;Image attributes . . . &gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="147PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>. . . and 98 more Image attribute objects</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="203PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;/Study&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> The indentation here is done for clarity&mdash;there is no nesting of the attributes. The order of the elements reflects the order of presentation in the study although this can be easily recalculated by the client <highlight><bold>116</bold></highlight>. When the Study descriptor (i.e., XML file, manifest) is arranged in a particular way, a Web server (e.g., network interface <highlight><bold>112</bold></highlight>) can deliver content to the viewer <highlight><bold>117</bold></highlight> in a faster manner. In particular, the manifest should support streaming by putting the elements that are required to display a user interface or GUI on the first screen toward the beginning of the study descriptor file. The addition of a directory to the contents of the study descriptor file, also written early in the file, enables the client <highlight><bold>116</bold></highlight> to take advantage of server protocols that accept beginning and end byte ranges as an argument, such as HTTP 1.1. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In one embodiment, the Patient attributes can include, for example, a normalized patient ID, a station ID, a normalized patient name, a modified date and a patient file root. Normalization in this embodiment means that the alphabetic characters are mapped to upper case and that spaces are removed. The normalized patient ID is derived from a study attribute (which contains the value from DICOM). The station ID is an integer that uniquely identifies the server containing the importer <highlight><bold>104</bold></highlight>. This number is assigned when the server software is installed. The normalized patient name is also derived from the study attribute (which contains the DICOM value). The modified date is the date and time that the importer <highlight><bold>104</bold></highlight> completed its process for the last study that was imported for this patient. It is identical to the study&apos;s attribute field if that study was the last one imported. The patient file root is the file root of the patient directory in the repository <highlight><bold>108</bold></highlight>. In one embodiment, studies for a patient are in subfolders of this folder. In one embodiment, the patient file root is a random study identifier, as negotiated between the Importer <highlight><bold>104</bold></highlight> and the Repository <highlight><bold>108</bold></highlight>. In another embodiment, this random study identifier can include the IP address of a server (e.g., repository <highlight><bold>108</bold></highlight>) or even a file root on that server. In yet another embodiment, there would be a potentially unlimited number of different patients, manifests or images beyond this file root in order to assure that random inquiries to that file root have an insignificant chance of breaking security. In other words, subdirectories and/or file names are also generated using a RUID so that even if an authorized user <highlight><bold>108</bold></highlight> knows of this root directory because he is authorized to have this information, he still cannot randomly or intentionally locate images and/or manifests contained within this root directory without having the exact locations, including the RUIDs for each file he wants to retrieve. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The Study attributes can include, for example, a study ID, a station ID and a study UID. The study ID is the numeric ID of the study assigned by the importer <highlight><bold>104</bold></highlight>. The station ID is the numeric ID of the server containing the importer <highlight><bold>104</bold></highlight>. The study UID is a concatenation of a machine ID, a patient hashcode and/or RUID, the station ID, and the study ID, separated by &ldquo;.&rdquo; (e.g. 102.5x258FR02yP29MI5sk.102.12526). The Series attribute can include, for example, a series UID. The series UID is a concatenation of the study UID and the series number separated by &ldquo;.&rdquo; (e.g. 102. 5x258FR02yP29MI5sk.102.102.12526.26012). The image attributes can include, for example, an image UID and a MIME type or file extension. The image UID represents the UID of the image data. This is a concatenation of the series UID and the image number separated by &ldquo;.&rdquo; (e.g. 102. 5x258FR02yP29MI5sk.102.12526.26012.107661). The image UID can also include a RUID (e.g. 102. 5x258FR02yP29MI5sk.102.12526.26012.g510yDW7s66jk1). The MIME type and/or file extension identifies the compression algorithm the importer <highlight><bold>104</bold></highlight> used to compress that particular image. For example, for a compressed file using the JPEG2000 standard, the file extension is &ldquo;JP2&rdquo; and for a manifest file the file extension is XML. In one embodiment, the identifying data that the importer <highlight><bold>104</bold></highlight> transmits to the authorized user <highlight><bold>110</bold></highlight> contains address information, for example a URL. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In one embodiment, using a manifest, there are two parts of a URL for an image. The first part is the root directory where the image and/or manifest is stored. In the illustrated embodiment, this is the repository <highlight><bold>108</bold></highlight>. The second part is a relative URL path to the manifest. For example, in one embodiment the relative path consists of four segments, a patient root, a study root, a manifest file name, and a file extension. In one embodiment, the relative path (i.e., the second part) includes a random unique identifier. The RUID can be included in any part of the URL. For example, the RUID can be used for files names, directories, sub-directories and the like. For example, if the first part is &ldquo;http://images.myhospital.org/amicas-patients/&rdquo; and the second part is &ldquo;ABC80980980AkjljUI14554.XML&rdquo; then the complete URL path is &ldquo;http://images.myhospital.org/amicas-patients/ABC80980980AkjljUI14554.XML&rdquo;. This permits a site to change the network address of the repository <highlight><bold>108</bold></highlight> without having to modify or change each stored reference to the images or manifest. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> When the authorized user <highlight><bold>110</bold></highlight> wants to retrieve the image file, or manifest, the authorized user <highlight><bold>110</bold></highlight> uses the client device <highlight><bold>116</bold></highlight>. The client device <highlight><bold>116</bold></highlight> is a computing device that can communicate with the network <highlight><bold>114</bold></highlight>. The client device <highlight><bold>116</bold></highlight> can be for example, a personal computer, a general workstation, a radiology workstation, a set top box, a wireless mobile phone, a handheld device, a personal digital assistant, a kiosk and the like. The client device <highlight><bold>116</bold></highlight> includes the image viewer module <highlight><bold>117</bold></highlight>. The image viewer <highlight><bold>117</bold></highlight> can be a separate application program or can be a plug-in to a Web browser application on the client device <highlight><bold>116</bold></highlight>. In one embodiment, the viewer is a JAVA-based plug-in. The client device <highlight><bold>116</bold></highlight> communicates over the network <highlight><bold>114</bold></highlight> to request a desired image file or patient study. In one embodiment, the protocol used by the client device <highlight><bold>116</bold></highlight> and the network interface <highlight><bold>112</bold></highlight> is a standards-based protocol (e.g., HTTP, HTTPS and the like). </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The client device <highlight><bold>116</bold></highlight> includes the identifying data with the request for the image file, for example, the identifying data for a manifest of a study for a patient with the ID number 359762 is &ldquo;http://192.168.3.2/Amicas_patients/359762/adEDJkd9898.XML&rdquo;. The repository <highlight><bold>108</bold></highlight> transmits the requested image file or manifest to the client device <highlight><bold>116</bold></highlight> for display using the image viewer <highlight><bold>117</bold></highlight>. If an image is retrieved, the image viewer <highlight><bold>117</bold></highlight> displays the image. If a manifest is retrieved, the image viewer displays a GUI, for example a slide bar, representing all of the series in the study and all of the images in the series contained in the manifest. The user selects an image using the GUI, for example moving the slide bar to the first image in the first series. The viewer <highlight><bold>117</bold></highlight> uses the manifest to create the URL for the desired image. For example, as described above, the viewer uses the manifest to determine that the URL for the desired image is &ldquo;http://192.168.3.2/Amicas_patients/359762/7Ful3xKA74h09.JP2&rdquo;. The viewer <highlight><bold>117</bold></highlight> requests this image and displays it upon receipt. Though in the illustrative example the RUIDs are used for the manifest and image names, the RUID can also be used at any different level, alone or in combination. For example, other URLs can include &ldquo;http://192.168.3.2/Qa95msdDg39jhdV/3597627/Image1.JP2&rdquo;, http://192.168.3.2/Amicas_patients/3Ueo56kDW9547/Image1.JP2&rdquo;, http://192.168.3.2/Qa95msdDg39jhdV/33Ueo56kDW9547/7Ful3xKA74h09.JP2&rdquo; and the like. Further, though the illustrative file paths may imply a hierarchy (e.g., all images associated with a patient in the patient&apos;s ID subdirectory), a hierarchy is not necessary and the identifying data can represent a flat address space. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> As described above, another way to make the image files secure on a highly accessible repository is to include random data, for example a random unique identifier, in the identifying data that the importer <highlight><bold>104</bold></highlight> transmits to the authorized user <highlight><bold>110</bold></highlight>. In one embodiment, the RUID represents the location of the image file on the file storage device <highlight><bold>111</bold></highlight>, for example a directory or subdirectory. In another embodiment, the RUID represents the name of the image file needed for retrieval. The RUID can be, for example an alphanumeric string, such as 35SZ9249HF2175D54NG4. The client device <highlight><bold>116</bold></highlight> includes the RUID with the request for the image file, for example https://123.45.67.89/amicas-studies/35SZ9249HF2175D54NG4.JP2. With a large enough data word, the search space makes the probability very low that someone can accidentally or even intentionally identify and retrieve an image. For example, a 128 bit random identifier allows 3.40 e&plus;38 possibilities. Even with one billion image files, 1.0 e&plus;9, the amount of used combinations as a percentage of unused combinations is negligible, or more specifically, about 2.94e&minus;28 percent. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In one embodiment, the network interface <highlight><bold>112</bold></highlight> does not permit browsing of the directory in which the image file or manifest is located. For example, the network interface <highlight><bold>112</bold></highlight> does not permit browsing of the Amicas_patients directory of the address http://192.168.3.2/Amicas_patients/359762/adEDJkd9898.XML. Thus, any authorized user <highlight><bold>110</bold></highlight> with the identifying data can retrieve the manifest, but anyone with access to the repository <highlight><bold>108</bold></highlight>, because for example it is an ordinary Web server on the Internet, cannot browse the Amicas_patients directory and retrieve medical images that might look interesting. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is a diagram of an illustrative system <highlight><bold>100</bold></highlight>&prime; for storing and retrieving compressed images in a repository according to the invention. System <highlight><bold>100</bold></highlight>&prime; includes an additional network server <highlight><bold>113</bold></highlight> as its second storage location. The network server can include an optional database <highlight><bold>146</bold></highlight>. In this embodiment, the importer <highlight><bold>104</bold></highlight> transmits the identifying data, in one embodiment including a RUID, to the network server <highlight><bold>113</bold></highlight> or the optional database <highlight><bold>146</bold></highlight> for storage. The client device <highlight><bold>116</bold></highlight> communicates with the network server <highlight><bold>113</bold></highlight> and/or database <highlight><bold>146</bold></highlight> to retrieve the identifying data for image files and/or manifest that an authorized user <highlight><bold>110</bold></highlight> wants to access. In this embodiment, the network server <highlight><bold>113</bold></highlight> and/or database <highlight><bold>146</bold></highlight> can act as the gatekeeper to determine if the user using the client device <highlight><bold>116</bold></highlight> to access identifying data for an image or manifest is authorized to do so. In one embodiment, the database <highlight><bold>142</bold></highlight> is a hospital medical records system. In one embodiment, the protocol used by the client device <highlight><bold>116</bold></highlight> and the network server <highlight><bold>113</bold></highlight> is a standards-based protocol (e.g., HTTP, HTTPS and the like). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In one embodiment, the system <highlight><bold>100</bold></highlight>&prime; can include an optional communication channel <highlight><bold>140</bold></highlight> that is used in place of or in addition to the second communication channel <highlight><bold>122</bold></highlight> and/or the third communication channel <highlight><bold>126</bold></highlight>. In another embodiment, the system <highlight><bold>100</bold></highlight>&prime; can include an optional communication channel <highlight><bold>150</bold></highlight> between the image source <highlight><bold>102</bold></highlight> and the repository <highlight><bold>108</bold></highlight>. In another embodiment, the system <highlight><bold>100</bold></highlight>&prime; can include another optional communication channel (not shown) between the image source <highlight><bold>102</bold></highlight> and the network <highlight><bold>114</bold></highlight>, such that the images are transmitted from the image source <highlight><bold>102</bold></highlight> to the importer module <highlight><bold>104</bold></highlight> and/or to the repository <highlight><bold>108</bold></highlight> via the network <highlight><bold>114</bold></highlight>. In yet another embodiment, the importer module <highlight><bold>104</bold></highlight> is included in the image source <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In other embodiments, the network server <highlight><bold>113</bold></highlight> and/or the repository is separate and distinct from the importer module <highlight><bold>104</bold></highlight> because, for example, each is controlled and/or administered by a separate entity, each is manufactured by a separate entity, each is unrelated to the other, each represents different business entities, each are at different physical locations, each communicate using different protocols and/or the like. In the illustrated embodiment, the network server <highlight><bold>113</bold></highlight> receives other RUIDs from other importer modules (not shown) that are unrelated to importer module <highlight><bold>104</bold></highlight> over communication channel <highlight><bold>155</bold></highlight>. Similarly, the repository <highlight><bold>108</bold></highlight> receives other data from other importer modules (not shown) and/or image sources (not shown) that are unrelated to importer module <highlight><bold>104</bold></highlight> over communication channel <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The Health Insurance Portability and Accountability Act (HIPAA) addresses the privacy and security of patient data. For HIPAA compliance, the system <highlight><bold>100</bold></highlight> and/or <highlight><bold>100</bold></highlight>&prime; can implement, for example, administrative procedures that enable administrators to identify individuals who access protected health information, providing the ability to track who is responsible for any breaches of privacy. In one embodiment, the repository <highlight><bold>108</bold></highlight> requests additional information beyond the RUID, such as a password from the user <highlight><bold>110</bold></highlight>, for access to the image file. In another embodiment, the importer <highlight><bold>104</bold></highlight> negotiates a different RUID with the repository <highlight><bold>108</bold></highlight> each time the file is requested, so that if, for example, the RUID remains stored in the client device <highlight><bold>116</bold></highlight> memory, another unauthorized user cannot locate the RUID in the client <highlight><bold>116</bold></highlight> memory and use it to access the associated image file. In another embodiment, an image has several RUIDs, one for each of the authorized users <highlight><bold>110</bold></highlight> that are allowed to access the image. When an image is accessed, the authorized user <highlight><bold>110</bold></highlight> is identified by the RUID used to access the image. Similarly, for example if the system <highlight><bold>100</bold></highlight>&prime; uses a manifest to group all of the images for a patient study, a separate manifest can be generated for each user <highlight><bold>110</bold></highlight>, each with a different RUID. When a manifest is accessed, the authorized user <highlight><bold>110</bold></highlight> is identified, because that user <highlight><bold>110</bold></highlight> is associated with a particular RUID, and all of the image RUIDs are re-negotiated to prevent access using the client <highlight><bold>116</bold></highlight> memory. In another embodiment, the image RUIDs are hidden from browsing below the directory that is identified by the manifest RUID. In this embodiment for example, the identifying data for each of the images is a relative URL from the manifest directory. Once the user <highlight><bold>110</bold></highlight> accesses the manifest, it is subsequently deleted from the repository <highlight><bold>108</bold></highlight>. Because the images are found using a URL relative to the manifest, once the manifest is deleted, the path using the RUID of that particular manifest will no longer work. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In another embodiment, a master copy of the manifest is generated. The master copy of the manifest can be stored, for example, in the importer <highlight><bold>104</bold></highlight> or the repository <highlight><bold>108</bold></highlight> in persistent storage. The importer <highlight><bold>104</bold></highlight>, the repository <highlight><bold>108</bold></highlight> and/or a separate copying module (not shown) generates a read copy of the master copy of the manifest, along with a RUID. When a user <highlight><bold>110</bold></highlight> wants to retrieve the manifest, the importer <highlight><bold>104</bold></highlight> or the network server <highlight><bold>113</bold></highlight> transmits the RUID of the read copy to the user <highlight><bold>110</bold></highlight>. The read copy is subsequently deleted after the user <highlight><bold>110</bold></highlight> reads it. This deletion can be executed, for example, after a single read, after a predefined time limit expires and/or the like. The importer <highlight><bold>104</bold></highlight>, the network server <highlight><bold>113</bold></highlight>, the repository <highlight><bold>108</bold></highlight> and/or a separate copying module (not shown) can initiate this deletion, using for example, proprietary software, the HTTP(S) DELETE method and the like. Similarly, in another embodiment, master copies of the manifest and all of the images are generated. In this embodiment, the read copies of the manifest and all of the images each receive their own RUID and are deleted subsequent to retrieval. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is another illustrative embodiment of a system <highlight><bold>200</bold></highlight> to store and retrieve compressed medical images in a hospital environment in accordance with the invention. The system <highlight><bold>200</bold></highlight> includes an importer module <highlight><bold>205</bold></highlight>, a repository, <highlight><bold>210</bold></highlight>, representing a first location, a hospital information system (HIS) module <highlight><bold>215</bold></highlight>, representing a second location, and a client <highlight><bold>220</bold></highlight>. The client <highlight><bold>220</bold></highlight> includes an image viewer module <highlight><bold>225</bold></highlight>. The modules enclosed in dashed lines represent optional modules to enhance the illustrated embodiment. Optional modules for the system <highlight><bold>200</bold></highlight> includes two diagnostic workstations <highlight><bold>230</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>230</bold></highlight><highlight><italic>b, </italic></highlight>generally referred to as <highlight><bold>230</bold></highlight>. The second diagnostic workstation <highlight><bold>235</bold></highlight><highlight><italic>b </italic></highlight>includes an image viewer <highlight><bold>240</bold></highlight>. The system <highlight><bold>200</bold></highlight> can also include an archive server <highlight><bold>245</bold></highlight>, a tape library <highlight><bold>250</bold></highlight> and an alternate repository <highlight><bold>255</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> As shown, the thin arrows represent signal paths when the import processor <highlight><bold>205</bold></highlight> processes an image for storage. In operation, the importer <highlight><bold>205</bold></highlight> receives one or more images from one or more modalities (not shown). The importer <highlight><bold>205</bold></highlight> receives the one or more images in a DICOM format <highlight><bold>260</bold></highlight>. The importer <highlight><bold>205</bold></highlight> creates two elements for each image. The first element is a compressed file of the image that the importer <highlight><bold>205</bold></highlight> transmits to the repository <highlight><bold>225</bold></highlight> for storage and retrieval. The second element is a unique file identifier (i.e., identifying data) associated with the compressed image file or a manifest that references a related set of images. The importer <highlight><bold>205</bold></highlight> transmits the unique file identifier to the hospital information system <highlight><bold>215</bold></highlight> complying with, for example, the HL7 standard. Once the importer <highlight><bold>205</bold></highlight> generates these two elements, the importer <highlight><bold>205</bold></highlight> is no longer needed to retrieve the stored information. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> If there are multiple images that are related, for example all part of the same patient study, the importer <highlight><bold>205</bold></highlight> generates a secure meta-data file descriptor that is compatible with standards-based Web servers. For example, using the information from the DICOM format <highlight><bold>260</bold></highlight>, the importer <highlight><bold>205</bold></highlight> generates a manifest as an XML file. The file descriptor (e.g., manifest) can be stored in a secure database or, as shown in this embodiment, as an element of a medical record in the hospital information system <highlight><bold>215</bold></highlight>. In another embodiment, the importer <highlight><bold>205</bold></highlight> transmits the manifest to be stored in the repository <highlight><bold>210</bold></highlight>. In this embodiment, the importer <highlight><bold>205</bold></highlight> transmits the unique file identifier (i.e., identifying data) associated with the manifest to the hospital information system <highlight><bold>215</bold></highlight>. The identifying data for each of the images is stored in the manifest, on the repository, thus the HIS <highlight><bold>215</bold></highlight> only needs to store one unique identifier (i.e., that of the manifest) to control access to the entire patient study. The image viewer <highlight><bold>225</bold></highlight> requests the file descriptor (that points to the manifest) from the HIS <highlight><bold>215</bold></highlight> and can efficiently retrieve the manifest and images associated with the imaging study (i.e., patient study) from a standards-based archive, for example, repository <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> By encoding the coded image file and/or the unique file identifiers and/or the metafile descriptors (e.g., manifest) with a random code (e.g., RUID), the security management can be separated and shifted away from the storage management. Therefore, the importer <highlight><bold>205</bold></highlight> can pass security management to an electronic medical record (EMR) system (e.g., HIS <highlight><bold>215</bold></highlight>) and storage management to a storage management service (e.g., repository <highlight><bold>210</bold></highlight>). In one embodiment, the importer <highlight><bold>205</bold></highlight> keeps a database of unique file identifiers as a cross-reference or backup. This backup database can be stored, for example, on the importer <highlight><bold>205</bold></highlight>, on the archive server <highlight><bold>245</bold></highlight>, on the tape library <highlight><bold>250</bold></highlight> and the like. In addition to the repository <highlight><bold>210</bold></highlight>, the importer <highlight><bold>205</bold></highlight> can also store copies of the DICOM image or the direct image from the modality (e.g., the uncoded and/or lossless version of the image) on the archive server <highlight><bold>245</bold></highlight> and/or tape library <highlight><bold>250</bold></highlight>. The archive server <highlight><bold>245</bold></highlight> and/or tape library <highlight><bold>250</bold></highlight> can also be used for redundancy in a disaster recovery situation. For example, the archive server <highlight><bold>245</bold></highlight> and tape library <highlight><bold>250</bold></highlight> and/or the alternate repository <highlight><bold>255</bold></highlight> can represent redundant storage of images and/or manifests that are physical secure (e.g., not accessible over the network <highlight><bold>114</bold></highlight> or any public communication channel, and are located in a locked and secure area so that there is no chance of unauthorized access. In another embodiment, the archive server <highlight><bold>245</bold></highlight> and tape library <highlight><bold>250</bold></highlight> and/or the alternate repository <highlight><bold>255</bold></highlight> can respond to standard DICOM and/or Web protocols themselves, so they can be accessed in a disaster recovery situation. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The thick arrows represent signal paths when a user using the image viewer module <highlight><bold>225</bold></highlight> on the client <highlight><bold>220</bold></highlight> retrieves an image. The viewer <highlight><bold>225</bold></highlight> obtains the second element, the file identifier, from the HIS <highlight><bold>215</bold></highlight>. The HIS <highlight><bold>215</bold></highlight> controls access to the file identifier using well-known authentication/authorization tools. Once the viewer <highlight><bold>220</bold></highlight> has the unique file identifier, the viewer <highlight><bold>225</bold></highlight> retrieves the image file or the manifest, using the identifier, from the repository <highlight><bold>210</bold></highlight>. If the identifier is associated with an image, the viewer <highlight><bold>225</bold></highlight> retrieves the image and displays it on the client <highlight><bold>220</bold></highlight>. If the identifier is associated with a manifest, the viewer <highlight><bold>225</bold></highlight> retrieves the manifest and displays, for example, a list of the available images associated with that manifest, using a GUI. The user selects an image from the list using the GUI and the viewer <highlight><bold>225</bold></highlight> uses the manifest to obtain the unique file identifier associated with the selected image. The viewer <highlight><bold>225</bold></highlight> retrieves the image from the repository <highlight><bold>210</bold></highlight> using the obtained identifier and displays it on the client <highlight><bold>220</bold></highlight>. In the illustrated embodiment, all communication between the viewer <highlight><bold>225</bold></highlight> the HIS <highlight><bold>215</bold></highlight> and the repository <highlight><bold>210</bold></highlight> comply with the HTTP(S) standard. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The diagnostic workstations <highlight><bold>230</bold></highlight> represent, for example, radiology workstations to which the modality or importer <highlight><bold>205</bold></highlight> pushes DICOM images. A user of the workstation <highlight><bold>230</bold></highlight> can view whatever images have been pushed to that workstation <highlight><bold>230</bold></highlight>. The second workstation <highlight><bold>230</bold></highlight><highlight><italic>b </italic></highlight>includes an image viewer module <highlight><bold>240</bold></highlight>. Instead of pushing all of the DICOM images in a patient study, which takes up a large amount of bandwidth and may not be necessary if the user is not interested in viewing all of the images, the importer <highlight><bold>205</bold></highlight> pushes, or offers on-demand, a manifest of the patient study to the second workstation <highlight><bold>230</bold></highlight><highlight><italic>b. </italic></highlight>The viewer <highlight><bold>240</bold></highlight> retrieves the manifest and displays, for example, a list of the available images associated with that manifest, using a GUI. The user selects an image from the list using the GUI and the viewer <highlight><bold>240</bold></highlight> uses the manifest to obtain the unique file identifier associated with the selected image. The viewer <highlight><bold>225</bold></highlight> retrieves the image from the repository <highlight><bold>210</bold></highlight> using the obtained identifier and displays it on the workstation <highlight><bold>230</bold></highlight><highlight><italic>b. </italic></highlight>In the case of <highlight><bold>230</bold></highlight><highlight><italic>b, </italic></highlight>the preferred embodiment requests the manifest and/or images using the HTTP(S) protocol and the manifest and image files are delivered to viewer <highlight><bold>240</bold></highlight> using the HTTP(S) protocol with and without lossy compression. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The alternate repository <highlight><bold>255</bold></highlight> can be a backup or a secondary copy for the primary repository <highlight><bold>210</bold></highlight>, such as a multiple disk RAID system. The alternate repository <highlight><bold>255</bold></highlight> can be independent from the primary repository <highlight><bold>210</bold></highlight>, such as a separate third party storage facility, storing, for example, a portion of the images in a patient study. In this case the client <highlight><bold>220</bold></highlight> communicates with each repository <highlight><bold>210</bold></highlight> and <highlight><bold>255</bold></highlight> independently, depending on which repository has the desired image. The Alternate Repository <highlight><bold>255</bold></highlight> can be accessible, for example, using HTTP(S) and/or DICOM Protocols. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram depicting a medical image storage and retrieval system <highlight><bold>300</bold></highlight> according to one embodiment of the invention. The system <highlight><bold>300</bold></highlight> includes an image source <highlight><bold>302</bold></highlight>, an importer module <highlight><bold>303</bold></highlight>, an image index processor module <highlight><bold>308</bold></highlight>, representing a storage location for identifying data, a file storage device <highlight><bold>310</bold></highlight>, representing a storage location for images and manifests, a Web server <highlight><bold>312</bold></highlight>, and one or more client devices <highlight><bold>316</bold></highlight>. The importer module <highlight><bold>303</bold></highlight> includes an input processor module <highlight><bold>304</bold></highlight> and an image coding processor module <highlight><bold>306</bold></highlight>. The input processor <highlight><bold>304</bold></highlight> receives medical images and data from the image source <highlight><bold>302</bold></highlight> and optionally can preprocess the medical images. The preprocessing can include error checking and routing images to other systems, such as diagnostic workstations. In another embodiment, the preprocessing includes formatting the medical image data to comply with a standards-based image protocol (e.g., JPEG 2000). In one embodiment, this is done by the image coding processor module <highlight><bold>306</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In one embodiment, the image source <highlight><bold>302</bold></highlight> generates (DICOM) images and headers. The image source <highlight><bold>302</bold></highlight> can be an X-ray system, a &ldquo;Magnetic Resonance Imaging&rdquo; (MRI) system, or other radiological system, for example. The output port (not shown) of the image source <highlight><bold>302</bold></highlight> is suitably connected to the input processor <highlight><bold>304</bold></highlight> through the DICOM bus <highlight><bold>320</bold></highlight>. The DICOM bus <highlight><bold>320</bold></highlight> can be a parallel bus, a serial bus, a coaxial cable, a SCSI bus, Ethernet, RS232, or other suitable network connection scheme, for example. The DICOM bus <highlight><bold>320</bold></highlight> carries medical images and headers relating to the medical images to the input processor <highlight><bold>304</bold></highlight>. The headers contain information relating to the medical images such as patient data, for example. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The input processor <highlight><bold>304</bold></highlight> imports the DICOM images and headers from the DICOM bus <highlight><bold>320</bold></highlight> and processes the received image data. In one embodiment, the input processor <highlight><bold>304</bold></highlight> divides the image and header information for efficient retrieval by the client device <highlight><bold>316</bold></highlight>. The input processor <highlight><bold>304</bold></highlight> transmits the medical images through an image bus or memory buffer <highlight><bold>322</bold></highlight> to the image coding processor <highlight><bold>306</bold></highlight>. In one embodiment, the input processor <highlight><bold>304</bold></highlight> converts the medical images received from the image source <highlight><bold>302</bold></highlight> to a format that is recognizable to the image coding processor <highlight><bold>306</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The image coding processor <highlight><bold>306</bold></highlight> receives the medical images via the image bus <highlight><bold>322</bold></highlight>. In one embodiment, the image coding processor <highlight><bold>306</bold></highlight> utilizes the standards-based JPEG 2000 Image Coding System. Alternative image coding systems can be utilized without departing from the scope of the invention. The image coding processor <highlight><bold>306</bold></highlight> transforms the medical images using the JPEG 2000 protocol. JPEG 2000 follows a similar progression to any transform technique for image compression. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The image coding processor <highlight><bold>306</bold></highlight> executes JPEG 2000 coding on the images received from the input processor <highlight><bold>304</bold></highlight>. The image coding processor <highlight><bold>306</bold></highlight> is suitably connected to the file storage device <highlight><bold>310</bold></highlight>. Once the medical images are processed by the image coding processor <highlight><bold>306</bold></highlight>, they are transferred by the image coding processor <highlight><bold>306</bold></highlight> to the file storage device <highlight><bold>310</bold></highlight> via the bus <highlight><bold>332</bold></highlight>. The file storage device <highlight><bold>310</bold></highlight> stores the images in either compressed or uncompressed format&mdash;or both using file identifiers that are available to the input processor <highlight><bold>304</bold></highlight>. In alternative embodiments, the file identifiers can be a descriptive name, a path to the file location or, in the preferred embodiment a random unique identifier (RUID). In alternative embodiments, the file storage device <highlight><bold>310</bold></highlight> can be an optical storage device, a magnetic storage device, a tape drive, or other suitable data storage device. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In addition to medical images, the file storage device <highlight><bold>310</bold></highlight> also stores patient study descriptor information (e.g., manifest). The term patient study refers to data and images related to a particular patient at a particular time. The input processor <highlight><bold>304</bold></highlight> transmits the patient study descriptor information to the file storage device <highlight><bold>310</bold></highlight> via the patient study descriptor bus <highlight><bold>324</bold></highlight> using file identifiers that are available to the input processor <highlight><bold>304</bold></highlight>. In alternative embodiments, the file identifiers can be a descriptive name, a path to the file location or, in the preferred embodiment a random unique identifier (RUID). The bus <highlight><bold>324</bold></highlight> and bus <highlight><bold>322</bold></highlight> from the importer <highlight><bold>303</bold></highlight> to the storage device <highlight><bold>310</bold></highlight> can be the same bus. The patient study descriptor information includes patient information such as patient name, age, sex, and time and date of study, for example. The patient study descriptor information is associated with the corresponding patient medical images that are stored in the file storage device <highlight><bold>330</bold></highlight>. In one embodiment, the patient study descriptors can be included as part of the coded image file. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The input processor <highlight><bold>304</bold></highlight> transmits image headers and optional image meta-data related to the corresponding medical images to the image index processor <highlight><bold>308</bold></highlight> via the header bus <highlight><bold>326</bold></highlight>. Portions of the image headers are indexed and stored in the image index processor <highlight><bold>308</bold></highlight> along with the descriptive, path-based or random file identifiers assigned to coded images <highlight><bold>332</bold></highlight> and patient study descriptors <highlight><bold>324</bold></highlight>. The image index processor <highlight><bold>308</bold></highlight> can be part of, for example, a hospital information system and/or a database software program that is installed at the same time as the importer <highlight><bold>303</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The image index processor <highlight><bold>308</bold></highlight> is connected to the Web server <highlight><bold>312</bold></highlight> through the bus <highlight><bold>328</bold></highlight>. The Web server <highlight><bold>312</bold></highlight> interfaces to the network <highlight><bold>314</bold></highlight> via the bus <highlight><bold>336</bold></highlight>. The Web server <highlight><bold>312</bold></highlight> receives requests for patient studies from one or more client devices <highlight><bold>316</bold></highlight> (only one shown for clarity). The Web server <highlight><bold>312</bold></highlight> transmits the requests to the image index processor <highlight><bold>308</bold></highlight> via the bus <highlight><bold>328</bold></highlight>. The client device <highlight><bold>316</bold></highlight> is connected to the Web server <highlight><bold>312</bold></highlight> via network <highlight><bold>314</bold></highlight>. The client device <highlight><bold>316</bold></highlight> can be a personal computer, a terminal, a workstation, a &ldquo;Personal Digital Assistant&rdquo; (PDA), a wireless device, or any Web compatible device for requesting and viewing patient studies including medical images. In one embodiment, the client device <highlight><bold>316</bold></highlight> includes a layer of client software that interfaces with the file storage device <highlight><bold>310</bold></highlight> using a network protocol (e.g., HTTP) via the client bus <highlight><bold>338</bold></highlight>. In an alternative embodiment, the image index processor <highlight><bold>308</bold></highlight> is connected to the network <highlight><bold>314</bold></highlight> using a network server (i.e., a second Web server) that is separate from the Web server <highlight><bold>312</bold></highlight>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The network <highlight><bold>314</bold></highlight> can be, for example a local-area network (LAN), such as a company Intranet, a wide area network (WAN) such as the Internet or the World Wide Web, a Virtual Private Network (VPN) or the like. The communication channels (e.g., busses <highlight><bold>320</bold></highlight>, <highlight><bold>322</bold></highlight>, <highlight><bold>324</bold></highlight>, <highlight><bold>326</bold></highlight>, <highlight><bold>328</bold></highlight>, <highlight><bold>332</bold></highlight>, <highlight><bold>334</bold></highlight>, <highlight><bold>336</bold></highlight> and <highlight><bold>338</bold></highlight> and the network <highlight><bold>314</bold></highlight> represent a communication path that can be implemented through a variety of connections including serial or parallel busses, standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), wireless connections and the like. The connections can be established using a variety of communication protocols and standards (e.g., HTTP, HTTPS, DICOM, HL7, NTFS, FTP, SSL, TCP/IP, RDP, IPX, SPX, NetBIOS, Ethernet, RS232, direct asynchronous connections and the like). </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In operation, the system <highlight><bold>300</bold></highlight> functions as follows. A physician requiring a patient study inputs the request through the client device <highlight><bold>316</bold></highlight>. The Web server <highlight><bold>312</bold></highlight> receives the request and transmits the request to the image index processor <highlight><bold>308</bold></highlight>. The image index processor <highlight><bold>308</bold></highlight> retrieves the (RUID) identifiers of patient study descriptors and/or images of the requested patient studies and returns these to the user of client device <highlight><bold>316</bold></highlight> using either a standards-based or proprietary protocol. If there is more than one study, the user selects the desired study via the client device <highlight><bold>316</bold></highlight>. The client device <highlight><bold>316</bold></highlight> then instructs&mdash;using standards-based protocols&mdash;the Web server <highlight><bold>312</bold></highlight> to request from file storage device <highlight><bold>310</bold></highlight> to transmit the requested medical images to the Web server <highlight><bold>312</bold></highlight> via the bus <highlight><bold>334</bold></highlight>. The Web server <highlight><bold>312</bold></highlight> then transmits the medical images using standards-based protocols via the bus <highlight><bold>336</bold></highlight> The physician can then view and manipulate the images and data from the requested patient study using the client device <highlight><bold>316</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> In one embodiment, the client device <highlight><bold>316</bold></highlight> displays an HTML formatted Web page. The Web page allows a user to query the image index processor <highlight><bold>308</bold></highlight>. A list of patient studies is then displayed on the Web page. The user then chooses a study from the list of studies displayed. The client device <highlight><bold>316</bold></highlight> then requests the images corresponding to the selected patient study from the file storage device <highlight><bold>310</bold></highlight>. The images and data from the patient study are then displayed on the client device <highlight><bold>316</bold></highlight> where the user can study and manipulate them. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an embodiment of a process <highlight><bold>400</bold></highlight> to store coded images in accordance with the invention. For illustration, the components of the system <highlight><bold>100</bold></highlight>&prime; of <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> are used to describe the process <highlight><bold>400</bold></highlight>. The importer module <highlight><bold>104</bold></highlight> receives (step <highlight><bold>410</bold></highlight>) an image from the image source <highlight><bold>102</bold></highlight>. The importer <highlight><bold>104</bold></highlight> codes (step <highlight><bold>415</bold></highlight>) the image from the received format (e.g., DICOM) to a Web standard format (e.g., JPEG 2000). The importer <highlight><bold>104</bold></highlight> generates (step <highlight><bold>420</bold></highlight>) a unique identifier for the coded image file. To do this, the generating step <highlight><bold>420</bold></highlight> is broken into three steps, step <highlight><bold>425</bold></highlight>, step <highlight><bold>430</bold></highlight> and step <highlight><bold>435</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The importer determines (step <highlight><bold>425</bold></highlight>) the root for the repository <highlight><bold>108</bold></highlight>. This can be, for example, the IP address of the network interface <highlight><bold>112</bold></highlight>. The IP address can be combined with the directory in which the image will be stored on the file storage device <highlight><bold>111</bold></highlight>. For illustrative purposes, the root is &ldquo;http://192.168.3.2/amicas_images/&rdquo;. In one embodiment, the root also contains a RUID. In one embodiment, an administrator enters this root information into the importer module directly, or into another computing device in communication with the importer <highlight><bold>104</bold></highlight>, so that the importer <highlight><bold>104</bold></highlight> can retrieve this information. In another embodiment, where the importer <highlight><bold>104</bold></highlight> is optionally communicating with the network <highlight><bold>114</bold></highlight> directly via communication channel <highlight><bold>130</bold></highlight>, the importer <highlight><bold>104</bold></highlight> can query the repository <highlight><bold>108</bold></highlight> directly and receive the root information from the repository <highlight><bold>108</bold></highlight>. In another embodiment, the importer <highlight><bold>104</bold></highlight> requests a RUID from the file storage device <highlight><bold>111</bold></highlight> and uses that in subsequent steps. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> The importer determines (step <highlight><bold>430</bold></highlight>) a unique identifier for the image. As described with the manifest example above, the importer module <highlight><bold>104</bold></highlight> can concatenate several IDs together. The importer <highlight><bold>104</bold></highlight> can also generate a random alpha-numeric string that represents a random n-bit word. For illustrative purposes, the unique identifier for the image is a substantially random identifier &ldquo;84jGe84BmAs9351D8YZw&rdquo;. The importer <highlight><bold>104</bold></highlight> combines (step <highlight><bold>435</bold></highlight>) the root for the repository, the unique identifier for the image and the file extension of the image file, by concatenating them, to generate the unique identifier for the compressed image file. For illustrative purposes, the unique identifier for the coded image file stored in the repository <highlight><bold>108</bold></highlight> is &ldquo;http://192.168.3.2/amicas_images/84jGe84BmAs9351D8YZw.JP2&rdquo;. With the unique identifier for the coded image file created, the importer <highlight><bold>104</bold></highlight> transmits (step <highlight><bold>440</bold></highlight>) the coded image file to the repository <highlight><bold>108</bold></highlight> for storage. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The importer <highlight><bold>104</bold></highlight> determines (step <highlight><bold>445</bold></highlight>) if there are more than one images related to each other, for example, as in a patient study. If the importer <highlight><bold>104</bold></highlight> determines (step <highlight><bold>445</bold></highlight>) there is only the one image and there will be no others, the importer <highlight><bold>104</bold></highlight> transmits (step <highlight><bold>450</bold></highlight>) the unique identifier for the coded image file to the network server <highlight><bold>113</bold></highlight> for retrieval by the authorized user <highlight><bold>110</bold></highlight>. Likewise, if the embodiment does not use manifests for related images thus requiring the authorized user to obtain the unique identifier for each coded image file, the importer <highlight><bold>104</bold></highlight> transmits (step <highlight><bold>450</bold></highlight>) the unique identifier for the coded image file to the network server <highlight><bold>113</bold></highlight>. The importer waits to receive (step <highlight><bold>410</bold></highlight>) another image from the image source <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> If the importer <highlight><bold>104</bold></highlight> determines (step <highlight><bold>445</bold></highlight>) there are a plurality of related images (e.g., same patient, same study, same series and the like), the importer <highlight><bold>104</bold></highlight> repeats (step <highlight><bold>460</bold></highlight>) steps <highlight><bold>410</bold></highlight> through <highlight><bold>440</bold></highlight> for each of the related images. While the importer <highlight><bold>104</bold></highlight> processes (step <highlight><bold>460</bold></highlight>) the related images, the importer <highlight><bold>104</bold></highlight> generates (step <highlight><bold>465</bold></highlight>) a manifest (e.g., an XML file as described above) containing the unique identifiers for each of the coded image files. The importer <highlight><bold>104</bold></highlight> generates (step <highlight><bold>470</bold></highlight>) a unique identifier for the manifest following the same steps in step <highlight><bold>420</bold></highlight>. For illustrative purposes, the unique identifier for the manifest file is &ldquo;http://192.168.3.2/Amicas_manifests/KT8H65YV476QMAU742G1.XML&rdquo;. With the unique identifier for the manifest file created, the importer <highlight><bold>104</bold></highlight> transmits (step <highlight><bold>475</bold></highlight>) the manifest file to the repository <highlight><bold>108</bold></highlight> for storage. The importer <highlight><bold>104</bold></highlight> transmits (step <highlight><bold>480</bold></highlight>) the unique identifier for the manifest file to the network server <highlight><bold>113</bold></highlight> for retrieval by the authorized user <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In one embodiment, step <highlight><bold>445</bold></highlight> is not restricted to more than one related image. For example, a manifest is created even if there is only one image in order to maintain consistency and provide a faster user interface in the viewer <highlight><bold>117</bold></highlight> of the client <highlight><bold>116</bold></highlight>. In another embodiment, the RUID represents a directory rather than a file (e.g., the directory has no associated MIME or file type). This directory allows all of the images and other files associated with and listed in a manifest to be listed in the manifest according to their explicit path. The presence of a RUID named directory, combined with the prohibition on directory browsing, means that there is low or no probability for an unauthorized user to reach the image files even if they have the manifest, as long as they do not have the current address of the manifest directory. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates an embodiment of a process <highlight><bold>500</bold></highlight> to retrieve images stored in accordance with the invention. For illustration, the components of the system <highlight><bold>100</bold></highlight>&prime; of <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> are used to describe the process <highlight><bold>500</bold></highlight>. In this case, the &ldquo;client&rdquo; is the client device <highlight><bold>116</bold></highlight>, the &ldquo;first Web server&rdquo; is the network server <highlight><bold>113</bold></highlight>, including the optional database <highlight><bold>146</bold></highlight>, and the &ldquo;second Web server&rdquo; is the repository <highlight><bold>108</bold></highlight>. The authorized user <highlight><bold>110</bold></highlight>, using client device <highlight><bold>116</bold></highlight>, requests (step <highlight><bold>505</bold></highlight>) studies for patient ID &num;359762. The network server <highlight><bold>113</bold></highlight> authenticates that the authorized user <highlight><bold>110</bold></highlight> can request identifying data for a manifest for this patient ID. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The database <highlight><bold>146</bold></highlight> finds (step <highlight><bold>510</bold></highlight>) the unique identifier, including location, for the manifest for patient ID &num;359762. The network server <highlight><bold>113</bold></highlight> transmits (step <highlight><bold>515</bold></highlight>) the URL for manifest (e.g., http://192.168.3.2/Amicas_manifests/KT8H65YV476QMAU742G1.XML) to client <highlight><bold>116</bold></highlight>. The viewer <highlight><bold>117</bold></highlight> within client <highlight><bold>116</bold></highlight> requests (step <highlight><bold>520</bold></highlight>) the manifest using the received URL. The network interface <highlight><bold>112</bold></highlight> of the repository <highlight><bold>108</bold></highlight> receives the URL request and retrieves (step <highlight><bold>525</bold></highlight>) the manifest corresponding to the URL from the file storage device <highlight><bold>111</bold></highlight>. The network interface <highlight><bold>112</bold></highlight> transmits (step <highlight><bold>530</bold></highlight>) the retrieved manifest to the viewer <highlight><bold>117</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The viewer <highlight><bold>117</bold></highlight> displays (step <highlight><bold>535</bold></highlight>) a GUI for the user <highlight><bold>110</bold></highlight> to select images within the study (or studies) contained in the retrieved manifest. The user <highlight><bold>110</bold></highlight> selects an image of interest. The viewer <highlight><bold>117</bold></highlight> retrieves (step <highlight><bold>540</bold></highlight>) from the manifest the URL associated with the selected image (e.g., https://123.45.67.89/amicas-studies/35SZ9249HF2175D54NG4.JP2). The viewer <highlight><bold>117</bold></highlight> requests (step <highlight><bold>545</bold></highlight>) the image using the retrieved URL. The network interface <highlight><bold>112</bold></highlight> of the repository <highlight><bold>108</bold></highlight> receives the URL request and retrieves (step <highlight><bold>550</bold></highlight>) the image corresponding to the URL from the file storage device <highlight><bold>111</bold></highlight>. The network interface <highlight><bold>112</bold></highlight> transmits (step <highlight><bold>555</bold></highlight>) the retrieved image to the viewer <highlight><bold>117</bold></highlight>. The viewer <highlight><bold>117</bold></highlight> displays (step <highlight><bold>560</bold></highlight>) the selected image. </paragraph>
<paragraph id="P-0089" lvl="7"><number>&lsqb;0089&rsqb;</number> Equivalents </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The invention can be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting on the invention described herein. Scope of the invention is thus indicated by the appended claims rather than by the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for storing a data in a repository, the method comprising: 
<claim-text>receiving, by an importer, data; </claim-text>
<claim-text>generating an identifier associated with the data, the identifier including a substantially random unique identifier; </claim-text>
<claim-text>transmitting the data to a repository; and </claim-text>
<claim-text>transmitting the identifier to a location separate and distinct from the i) repository and ii) the importer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the data includes a medical image. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising encoding the data to a coded file. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the coded file includes a lossy compressed image. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the coded file includes a wavelet-coded image. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the coded file is a standards-based format. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the coded file conforms to the JPEG2000 standard. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising requesting the data from the repository using the identifier. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising generating a new identifier associated with the data after the data has been requested. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising storing the identifier in a manner compliant with HIPAA. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising restricting access to the identifier at the location. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising prohibiting browsing of a directory in the repository in which the data is located. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the identifier includes an address of the data in the repository. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the substantially random unique identifier corresponds to a directory in the repository in which the data is located. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the location is a hospital information system. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the location is associated with a patient with whom the data is associated. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method for storing a manifest in a repository, the method comprising: 
<claim-text>receiving, by an importer, one or more files; </claim-text>
<claim-text>generating a respective set of identifying data associated each of the one or more files; </claim-text>
<claim-text>generating a manifest including the respective set of identifying data associated each of the one or more files; </claim-text>
<claim-text>generating identifying data for the manifest, the identifying data including a substantially random unique identifier; </claim-text>
<claim-text>transmitting the one or more files and the manifest to a repository; and </claim-text>
<claim-text>transmitting the identifying data for the manifest to a location separate and distinct from i) the repository and ii) the importer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the one or more files include medical images. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising encoding at least one of the one or more files to one or more coded files. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the one or more coded files are lossy compressed image files. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the one or more coded files are wavelet-coded image files. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the one or more coded files are standards-based formats. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein the one or more coded files conform to the JPEG2000 standard, thereby generating one or more JPEG2000 files. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein the manifest is included in the one or more JPEG2000 files. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising requesting the manifest from the repository using the identifying data. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> further comprising generating new identifying data associated with the manifest after the manifest has been requested. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising storing the identifying data in a manner compliant with HIPAA. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising restricting access to the identifying data at the location. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> further comprising prohibiting browsing of a directory in the repository in which the manifest is located. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the identifying data includes an address of the manifest in the repository. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the random unique identifier corresponds to a directory in the repository in which the manifest is located. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the location is a hospital information system. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the location is associated with a patient with whom the one or more files are associated. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the manifest conforms to an XML standard. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the manifest conforms to a DICOMDIR standard. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference> wherein the one or more files conform to the DICOM standard. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. An importer for preparing data to be stored in a repository, the importer comprising: 
<claim-text>a receiver module configured to receive data from an image source; </claim-text>
<claim-text>at least a portion of an identifier generator module configured to generate an identifier associated with the data, the identifier including a substantially random unique identifier; and </claim-text>
<claim-text>a transmitter module configured to transmit the data to a first location and to transmit the identifying data to a second location, </claim-text>
<claim-text>wherein the first and second location are separate and distinct from each other and are accessible by a user without intervention by the importer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> further comprising an encoding module configured to encode the data to a coded file. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the encoding module is further configured to compress the data to a lossy compressed image. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the encoding module is further configured to encode the data to a coded file that is a standards-based format. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference> wherein the encoding module is further configured to encode the data to a coded file that conforms to the JPEG2000 standard. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the data includes a medical image. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the identifier generator module is further configured to generate a substantially random unique identifier including an address of the data at the second location. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> further comprising a manifest generator module configured to generate a manifest including the identifier of the data, 
<claim-text>wherein the at least a portion of the identifier generator module is configured to generate the identifier associated with the data and with the manifest, the identifier associated with the manifest including a substantially random unique identifier, and </claim-text>
<claim-text>wherein the transmitter module is configured to transmit the data and the manifest to the first location and to transmit the identifier associated with the manifest to the second location. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference> wherein the manifest generator module is further configured to generate a manifest that conforms to an XML standard. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference> wherein the manifest generator module is further configured to generate a manifest that conforms to a DICOMDIR standard. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A system for storing a file in a standards-based repository, the system comprising: 
<claim-text>an image processor configured to receive a file from an image source, to generate a substantially random unique identifier associated with the file and to format the file to be compatible with a standards-based repository; </claim-text>
<claim-text>a storage location separate from the standards-based repository, the storage location configured to receive and to store the substantially random unique identifier; and </claim-text>
<claim-text>a client agent configured to access the storage location to retrieve the substantially random unique identifier and to access the file from the standards-based repository using the unique identifier to locate the file. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the image processor is further configured to format the image to be compatible with the JPEG2000 standard. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the file includes a medical image. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the storage location is a hospital information system. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the image processor is further configured to generate a compressed image associated with the file. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00055">claim 51</dependent-claim-reference> wherein the compressed image is diagnostic quality. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the storage location is further configured to generate a new substantially random unique identifier associated with the file after the file has been retrieved. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the storage location is further configured to restrict access to the substantially unique identifier. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00044">claim 47</dependent-claim-reference> wherein the storage location is further configured to store the substantially random unique identifier in a manner compliant with HIPAA. </claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> 
<claim-text>wherein the step of requesting the file further comprises requesting the file from the repository using a standards-based protocol, and </claim-text>
<claim-text>wherein the step of transmitting the file further comprises transmitting the image file using a standards-based protocol. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> 
<claim-text>wherein the step of requesting the manifest file further comprises requesting the manifest file from the repository using a standards-based protocol, and </claim-text>
<claim-text>wherein the step of transmitting the one or more images and the manifest file image file further comprises transmitting the images using a standards-based protocol. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> 
<claim-text>wherein the step of requesting the file further comprises requesting the file from the repository using a standards-based protocol, and </claim-text>
<claim-text>wherein the step of transmitting the file further comprises transmitting the image file using a proprietary protocol. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> 
<claim-text>wherein the step of requesting the manifest file further comprises requesting the manifest file from the repository using a standards-based protocol, and </claim-text>
<claim-text>wherein the step of transmitting the one or more images and the manifest file image file further comprises transmitting the images using a proprietary protocol. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The importer of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference> wherein the data includes a medical image.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005464A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005464A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005464A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005464A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005464A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005464A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005464A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
