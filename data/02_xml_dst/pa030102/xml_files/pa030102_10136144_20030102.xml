<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005032A1-20030102-D00000.TIF SYSTEM "US20030005032A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005032A1-20030102-D00001.TIF SYSTEM "US20030005032A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005032A1-20030102-D00002.TIF SYSTEM "US20030005032A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005032A1-20030102-D00003.TIF SYSTEM "US20030005032A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005032A1-20030102-D00004.TIF SYSTEM "US20030005032A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005032A1-20030102-D00005.TIF SYSTEM "US20030005032A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005032</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10136144</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020501</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>0110713.5</doc-number>
</priority-application-number>
<filing-date>20010502</filing-date>
<country-code>GB</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>201000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Remote assembly of messages for distributed applications</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ramiro</given-name>
<family-name>Liscano</family-name>
</name>
<residence>
<residence-non-us>
<city>Nepean</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Sonya</given-name>
<family-name>Fullarton</family-name>
</name>
<residence>
<residence-non-us>
<city>Ottawa</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Gunter</given-name>
<family-name>Mussbacher</family-name>
</name>
<residence>
<residence-non-us>
<city>Ottawa</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Tom</given-name>
<family-name>Gray</family-name>
</name>
<residence>
<residence-non-us>
<city>Carp</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>David B. Cochran, Esq.</name-1>
<name-2>JONES, DAY, REAVIS &amp; POGUE</name-2>
<address>
<address-1>North Point</address-1>
<address-2>901 Lakeside Avenue</address-2>
<city>Cleveland</city>
<state>OH</state>
<postalcode>44114</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention relates to a system for remote assembly of messages to create a control message, comprising a shared coordination space for assembly of messages, and a plurality of components for performing predefined actions and for exchanging messages according to a predefined ontology. The plurality of components includes a first component for directing other ones of the components to publish information on the coordination space and in response gather several distinct pieces of the information and assemble the distinct pieces as a message by which to control the actions of said the component. According to a preferred embodiment, the shared coordination space is a tuple space, one of the components is a call control application for controlling a communication switch, and at least one other component is a directory application containing location information. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates in general to the problem of component coordination in distributed systems, and more particularly to a system for remote assembly of messages for maintaining low latency collaboration among components while conserving bandwidth, particularly in wireless systems. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Distributed network based systems are now commonly for the provision and creation of useful applications. Components (agent, objects . . . ) are distributed on a network and cooperate together to provide desired services. Several techniques have been proposed to provide for the interaction of these components. These techniques are characterized by unique advantages and disadvantages. This disclosure describes a new system which improves on such prior art techniques. The existing techniques are: </paragraph>
<paragraph id="P-0003" lvl="1"><number>&lsqb;0003&rsqb;</number> 1. Remote method invocation or remote procedure call </paragraph>
<paragraph id="P-0004" lvl="1"><number>&lsqb;0004&rsqb;</number> 2. Remote message passing </paragraph>
<paragraph id="P-0005" lvl="1"><number>&lsqb;0005&rsqb;</number> 3. Remote execution </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In remote procedure calls or remote method invocation, the components are aware of the detailed operation of each other and can invoke specific behavior in each other. This has the severe disadvantage of requiring that any change in any component be checked for its implications on the expectation of any component that uses its services. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Remote message passing tries to avoid this problem by removing the need for close coupling between the components. With remote method invocations, a change in the detailed operation of one object would require the examination of the operation of all objects which invoke methods on it to ensure that the expectations of these objects have not been violated. This problem may be overcome by confining all interactions to the grammar and semantics of a defined set of messages. Agents or objects can be changed or new objects or agents added as long as they follow the grammar and semantics of the messages. This allows for more openness and evolvability in systems operation. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> However the message passing system suffers from the disadvantage of consuming excessive bandwidth in the passing of messages between agents or objects. This can be especially true in the case of wireless applications in which the radio bandwidth is limited and the data rate is low, resulting in high cost to transfer messages and high delay for the applications depending upon them. This has led to the development of the remote execution model of mobile code or mobile agents in which a program, instead of a set of messages, is passed. The program runs at the remote location to fulfill the invoking component&apos;s request. This has the advantage in some cases of conserving scarce bandwidth and improving the latency of the applications. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> However the remote execution model suffers from serious problems relating to security. Extensive measures must be taken to protect such a system against malicious users who may send damaging objects or agents to it. The measures taken to deal with security concerns in such systems weigh heavily against any benefit from conserved bandwidth. Remote message passing systems are not as severely affected by these security concerns since they do not run independently on the system but are interpreted, which removes the most severe security concerns that affect mobile code. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Voice communications is one area of considerable research and development in the application of distributed systems. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Many call control features provided by communication systems require location information. For example, the initiation of a phone call, the transfer of a call, and the inclusion of a person into a conference call all require user location information. In some cases, it is possible that useful location information is stored in different directory services. According to the prior art, it is impossible for a user to elect to use different directory services during a call session unless the directory services all conform to a standard API and the application allows a selection of different directory applications. Also, since the directory applications have access to all of the user&apos;s private directory information through a set of APIs the user is relegated to trusting that the application is only accessing location data and not accessing some other private data. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Thus, it is desirable that directory services be provided whereby location information may be obtained from any directory application within the system with only minimal changes to the directory application while respecting each user&apos;s data privacy. It is also desirable to provide a user with the option of invoking a request to communicate from a directory application rather than initiating the request from the call control application. This can be problematic when a user wishes to leverage a corporate directory service using a wireless device and the simplest interface to that information is via a WEB browser. In this circumstance it is impossible to rely on a single application that leverages a set of APIs to such a corporate directory. Thus, there is a need in the industry to provide a system that is capable of leveraging assertion-based call control in order to minimize the coupling between the communication assertion components and the directory application. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> This need is made more pronounced by the increasing prevalence of wireless communication devices. In an open environment, services are created for users by the combining of information from multiple sources. In the example above, a user&apos;s call request is combined with location information from an external directory to create a message to command an external switch (i.e. PBX). This standard technique is difficult to implement in a wireless environment because of the low bandwidth, error-prone connection provided by wireless devices and the difficulty in providing large amounts of computing power on such devices due to power and size constraints. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to the present invention, a method and system are provided for addressing the above-discussed need while overcoming the limitations of the prior art. Generally, the invention provides for assembly of information to create a control message that is implemented outside of the wireless device, thereby avoiding device and connection constraints. The technique of the present invention provides this functionality by allowing a &lsquo;remote assembly&rsquo; of messages in a way that allows the originator to retain control over services that are assembled in creating the full service. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Generally, the system of the present invention allows a component to create an action by sending multiple messages to other components. Rather than replying to the originator over a low capacity and error prone wireless link, these other components place their responses in a common coordination space. According to the preferred embodiment, the coordination space is implemented as a tuple space and the message response is implemented as a tuple space publication action. One or more of the components subscribe to collections of these responses and regard a collection as a message and in response implicitly assemble it. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> One example of such an action is the sending of a message indicating that a user wishes to call a specific person who is mobile. This requires that the originator determine where the mobile person is located, by consulting a location service. It is common that the user would also require authorization to contact the mobile person in a specific way (i.e. long distance charges etc.) Thus, the user may be required to contact an authorization service for an authorization token. In a conventional system, the originator assembles a message and forwards it to a service provider. However gathering the necessary information requires several messaging steps using the wireless link. The use of a coordination space as taught by the present invention allows the location and authorization services to place information in the coordination space and for the communication switch that executes the message to obtain the message from the space by a method of implicit assembly. More particularly, the originator sends messages to the communication switch to alert it that the process is about to begin, and to the location and authorization services to require them to post information to the coordination space. The communication switch gathers this information and puts it together with the message information that it receives from the originator to implicitly generate the message. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The &lsquo;remote assembly&rsquo; model according to the present invention enjoys the benefits of both the remote messaging and remote execution models without the disadvantages set forth above. The system of the present invention conserves bandwidth in the same way as the remote execution model but also maintains the security advantages of the remote messaging model. Remote assembly according to the present invention maintains the benefits of loose coupling which are provided by remote messaging and remote execution over the remote method invocation and remote procedure call models. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> As discussed above, in the remote assembly model messages are not required to be created at an isolated component (e.g. accessible only over a low speed wireless link). Instead a group of components cooperate together to assemble a message in the coordination space, thereby obviating the need to create messages in an isolated location and send them over a low speed link. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> This is especially important in applications where a message has to be assembled from information that is available only from directories in the network. Queries are sent to more than one directory and potentially large objects are retrieved from them. These objects are processed and assembled into a message and sent over the low speed link. According to the prior art, many traversals of the low speed link would be required to do retrieve such potentially large objects. The remote assembly method of the present invention is designed to eliminate the need for these wasteful traversals.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DETAILED DRAWINGS </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A description of a preferred embodiment of the present invention is provided herein below with reference to the accompanying drawings in which: </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a component interaction diagram showing a system for remote assembly of messages in accordance with the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> is legend for the use case map of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> showing interaction among the components of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a use case map showing interaction among components according to an alternative embodiment; and </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a component interaction diagram for the alternative embodiment of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Before describing the &lsquo;remote assembly model&rsquo; of the invention in detail, a brief description is provided herein below of several different techniques for the creation of applications among multiple components. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A very common technique is to represent each component as an object and for each of the components to provide an API of method calls by which other components can control it. A well-known difficulty of this technique relates to intimately tying the implementations of multiple components together. A change in one component&apos;s implementation needs to be analyzed in order to discover how the change impacts the implementations of other components. This has obvious implications on system stability and evolution. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> One solution to this problem is a prior art model of message passing in which an agreement is made on a set of standard messages, which can control an application. This decouples implementations since all commonality is now contained within the agreed messages, which can be an open-ended set. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The message passing model has its own difficulties in connection with the resources required for the exchange of messages. This is particularly important in the case of wireless connections in which the links connecting components have low bandwidth and are prone to error. Indeed, the advantages gained by the message passing model in the design of the application may be lost in practice due to the complicated nature of the solutions needed to overcome the limitation of the wireless link and the cost of the physical resources required to implement these solutions. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> A previous attempt to solve this problem led to the prior art &lsquo;remote execution&rsquo; model in which messages are built up as scripts or small programs that can be exchanged between components. These scripts execute locally on one component and use the message link only for results or absolutely vital messages. This model solves the aforementioned messaging problem, but at the expense of the privacy and stability of the system due to opening up components to external scripts and programs. To address these problems, the components must be designed to protect themselves from malicious or badly designed external scripts, and an execution environment must be provided for the components. Both of these conditions imply complex resource allocation and limited system evolution. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The &lsquo;remote assembly model&rsquo; provided by the present invention obtains the benefits of messaging and remote execution without the disadvantages set forth above. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The system and method of the present invention incorporates Applicant&apos;s proprietary system for synchronized distributed processing using tuple spaces as set forth in UK Patent Application No. 9920051.1, Canadian Patent Application No. 2316549 and U.S. patent application Ser. No. 09/642,340, the contents of which are incorporated herein by reference. These prior patent applications describe component coordination of features using a tuple space that ensures that a request in the tuple space solicits a permission first before performing the request. The present invention extends the principles of the prior patent applications to coordination of call control functions and location directory services. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, when a user <highlight><bold>1</bold></highlight> wishes to leverage directory dialing according to the present invention, the user selects a feature key or picks up the phone (not shown) which causes call control <highlight><bold>3</bold></highlight> to issue a command to the communication switch <highlight><bold>5</bold></highlight> (i.e. PBX). The switch <highlight><bold>5</bold></highlight> communicates with a shared coordination space <highlight><bold>7</bold></highlight> to which location information is posted by a directory application <highlight><bold>9</bold></highlight>. After the user selects the person&apos;s location from the directory application <highlight><bold>9</bold></highlight> the call control <highlight><bold>3</bold></highlight> uses the information in coordination space <highlight><bold>7</bold></highlight> to complete the call. The foregoing steps are recited in greater detail below following an explanation of the operation of shared coordination space <highlight><bold>7</bold></highlight>. Many call control functions operate using directory services that function in a similar manner as placing a call except that the user activates these options by pressing a selection key on the phone set. Some examples of these call features are call transfer, forward call, conferencing call etc. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The system according to the present invention also allows the user to reverse the interaction steps by first choosing a location from the directory <highlight><bold>9</bold></highlight> and then requesting the call control feature. The system of the invention operates regardless of the order of the process. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> As indicated above, shared storage space <highlight><bold>7</bold></highlight> is used for the coordination of location-based call control features and directory applications that offer location information to those call control features. This coordination is based on a mechanism in the shared space <highlight><bold>7</bold></highlight> that allows the call processing application <highlight><bold>3</bold></highlight> to register for location data and receive any location data asserted by directory application <highlight><bold>9</bold></highlight>. More particularly, messages generated by the applications conform to a common agreement (ontology) or common grammar that allows for exchange via matching of constituent parts within the shared space <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> As discussed above, one example of this type of shared data coordination system is a tuple space. According to the preferred embodiment of the invention, a tuple space is implemented as the communication mechanism between the call control <highlight><bold>3</bold></highlight> and directory application <highlight><bold>9</bold></highlight> (or multiple directory applications). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The tuple space <highlight><bold>7</bold></highlight> is a shared data storage that uses type-value pairs (tuples) as a representation of information in that shared storage. Type value pairs are defined in the following manner: (:type1 value1 :type2 value2 . . . ). A type can be any alphanumeric name while a value can be a string, number, or another tuple. When the value is another tuple it is prefixed by the special name Tuple as is the following example (:first Tuple (:item1 telephone)). </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Assertion-based call control using tuple space <highlight><bold>7</bold></highlight> requires that the tuple support certain operands. The fundamental operands required for the present invention to function are out, and in operands. The out and in operands can be used to respectively retract a tuple from and assert a tuple to the shared space <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Requests from call control <highlight><bold>3</bold></highlight> are synchronized with location data by defining a particular type that corresponds to location data (e.g. loc-data). Similarly, the data type is defined as a string. In particular, the Uniform Resource Identifier (URI) format is adopted for flexibility and to support different communication protocols being developed for IP telephony. Also since the communication switch <highlight><bold>5</bold></highlight> generally handles several hundred sessions an identifier is added to the tuples in order to associate the location data to a particular request from call control <highlight><bold>3</bold></highlight>. In order to keep applications independent of each other, a user identifier is adopted rather than a session identifier created by the invocation of the call feature. It is therefore necessary for the user <highlight><bold>1</bold></highlight> to register with the call control application <highlight><bold>3</bold></highlight> before requesting a location-based feature and selecting location information from the directory service <highlight><bold>9</bold></highlight>. It is not relevant to the invention how the applications obtain the user identification. Users may use identification cards or be logged into a computer using a particular user name. Alternatively, the information may be stored as a cookie when a WEB interface is used. In the situation where both the call control <highlight><bold>3</bold></highlight> and directory application <highlight><bold>9</bold></highlight> reside on the same device a device identifier can be used to replace the user identifier. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the telephony switch <highlight><bold>5</bold></highlight> supports location-based features referred to herein as LCFs (Location Call Features). These location features require a location parameter in order to perform their respective actions. The following set of steps defines the procedure for synchronizing call control requests with location data using assertion-based call control according to the present invention. </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> Step 1: User <highlight><bold>1</bold></highlight> requests the use of a location-based feature from the call control application <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Step 2: The call control application <highlight><bold>3</bold></highlight> obtains the caller identification from the OS or prompts the user <highlight><bold>1</bold></highlight> and sends the request and user ID to the switch <highlight><bold>5</bold></highlight>. The call control application <highlight><bold>3</bold></highlight> can simply be an interface to the switch <highlight><bold>5</bold></highlight> (e.g. presented to the user <highlight><bold>1</bold></highlight> through the phone or a WEB page interface, etc.) </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> Step 3: The switch <highlight><bold>5</bold></highlight> registers the request for location data by issuing an out (:userID USER :loc-data &quest;loc) request to the tuple space <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> Step 4: The user <highlight><bold>1</bold></highlight> launches the directory application <highlight><bold>9</bold></highlight> and selects the location information from the directory. </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> Step 5: After instructing the directory application <highlight><bold>9</bold></highlight> to place the data into the tuple space <highlight><bold>7</bold></highlight>, the application augments this information with the user identification. An exemplary tuple is userID USER :loc-data 5555. </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> Step 6: The request from switch <highlight><bold>5</bold></highlight> (:userID USER :loc-data &quest;loc) matches with the incoming data (:userID USER :loc-data 5555) resulting in execution by the switch <highlight><bold>5</bold></highlight> of the appropriate location-based call feature requested by the user <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The foregoing interaction among the components in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> can also be represented as a Use Case Map as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>B, where <cross-reference target="DRAWINGS">FIG. 2A</cross-reference> is a legend explaining the use case map symbols. In this representation, the call control <highlight><bold>3</bold></highlight> and directory application <highlight><bold>9</bold></highlight> are shown as applications that execute in a client browser and leverage the use of scripting languages to communicate with the tuple space <highlight><bold>7</bold></highlight>. The use case map is more comprehensive than the component interaction diagram of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in that it can represent all possible user scenarios within the system. For example, there are two possible start points in the Use Case Map (UCM): one from the directory application <highlight><bold>9</bold></highlight> and the other from the call control application (as indicated in the legend below, start points in UCMs are denoted as black dots). In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the user <highlight><bold>1</bold></highlight> is shown interacting with the call control application <highlight><bold>3</bold></highlight> before requesting location data. However, as shown in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> it is possible to reverse the procedure and post the location data into the tuple space <highlight><bold>7</bold></highlight> before issuing the LCF. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The intuitive nature of Use Case Maps (UCMs) permits simple following of the paths defined in the diagrams to trace all possible scenarios. In order to facilitate the understanding </paragraph>
<paragraph id="P-0048" lvl="7"><number>&lsqb;0048&rsqb;</number> of the UCM, the following legend defines the symbols used by the UCM notation of <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> A first alternative embodiment of the present invention involves movement of the responsibility for communicating with the tuple space <highlight><bold>7</bold></highlight> from the communication switch <highlight><bold>5</bold></highlight> to the call control application <highlight><bold>3</bold></highlight>. The preferred embodiment of <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference> is best suited for implementation on simple devices that have limited computing capability as well as on wireless devices wherein it is desirable to limit the size of the communication messages on the network. According to the alternative embodiment illustrated in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>, the call control <highlight><bold>3</bold></highlight> and directory applications <highlight><bold>9</bold></highlight> reside on the same device and there is no need to require a user identification type. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The following set of steps refers to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and demonstrates the procedure for synchronizing call control requests with location data in the situation where the call control application <highlight><bold>3</bold></highlight> interacts with the tuple space <highlight><bold>7</bold></highlight> rather than the communication switch <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> Step 1: User <highlight><bold>1</bold></highlight> requests the use of a location-based feature from the call control application <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="2"><number>&lsqb;0052&rsqb;</number> Step 2: The call control application <highlight><bold>3</bold></highlight> registers the request for location data by issuing an out (:loc-data &quest;loc) request to the tuple space <highlight><bold>7</bold></highlight>. This may be a blocking or non-blocking operation. In the same operation the call control application <highlight><bold>3</bold></highlight> notifies the user <highlight><bold>1</bold></highlight> that it is waiting for location data. </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> Step 3: The user <highlight><bold>1</bold></highlight> launches an application that contains location information and is able to communicate with the existing tuple space <highlight><bold>7</bold></highlight> (e.g. directory application <highlight><bold>9</bold></highlight> having the ability to communicate with the tuple space <highlight><bold>7</bold></highlight>). </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> Step 4: After the user <highlight><bold>1</bold></highlight> selects the location information from the directory <highlight><bold>9</bold></highlight> and instructs the directory application <highlight><bold>9</bold></highlight> to place the data into the tuple space <highlight><bold>7</bold></highlight>, the directory application <highlight><bold>9</bold></highlight> then issues a in (:loc-data 5555) request that has the effect of placing into the tuple space <highlight><bold>7</bold></highlight> the tuple (:loc-data 5555). </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> Step 5: The (:loc-data &quest;loc) request matches with the incoming (:loc-data <highlight><bold>5555</bold></highlight>) data resulting in a response or event being sent to the call control application <highlight><bold>3</bold></highlight> with the specific tuple that matches the request. At the same time the (:loc-data 5555) tuple is withdrawn from the tuple space <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> Step 6: The call control application <highlight><bold>3</bold></highlight> now has sufficient data to proceed with the LCF request to the switch <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In summary, a method is provided for facilitating the development of location-based applications that leverage call control <highlight><bold>3</bold></highlight> without needing to know all of the feature access codes for the different location-based call control features available on the switch <highlight><bold>5</bold></highlight>. This approach also allows one directory application to service a multitude of location-based call control features and conversely several directory applications can be used for a single call control entity <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> It will be appreciated that, although embodiments of the invention have been described and illustrated in detail, various changes and modifications may be made. This invention can be applied to other communication features that require additional data other than location data. In other words the tuples can be expanded to manage more information than location data. This information includes, for example, user authentication data or account information to complete a transaction. For these types of data, privacy and security are more relevant than for location information and require that the users have greater control over the type of information they are releasing to an application. Other forms of data may include resource identifiers that a particular communications feature can leverage. For example, the volume of a handset may be controlled using several different applications that can place their data type and data into a common tuple space. This would allow for user preferences to be received from applications other than the conventional phone set user interface. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> All of the forgoing changes and modifications may be made without departing from the sphere and scope of the invention as defined by the claims appended herein. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for remote assembly of messages to create a control message, comprising: 
<claim-text>a shared coordination space for assembly of said messages; and </claim-text>
<claim-text>a plurality of components for performing predefined actions and for exchanging messages according to a predefined ontology, said plurality including a first component for directing other ones of said components to publish information on said coordination space and in response gather several distinct pieces of said information and assemble said distinct pieces as a message by which to control the actions of said first component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said shared coordination space is a tuple space and said ontology type-value pairs to represent said information. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first component is a wireless device. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said first component comprises a call control application for controlling a communication switch and at least one of said other ones of said components comprises a directory application for storing location information. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said call control application communicates directly with said shared coordination space for exchanging said messages. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said call control application communicates with said shared coordination space through said communication switch. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein at least a further one of said other ones of said components comprises an authorization service. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein access to said location information in said directory application is via a WEB interface from a corporate directory that does not provide an API to its data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein said call control application and said directory application execute within a WEB browser and utilize scripting language to communicate with said tuple space. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method of synchronizing a call control request to a communication switch with location data from a directory application using a tuple space, comprising: 
<claim-text>user initiation of a request for use of a location-based feature from a call control application; </claim-text>
<claim-text>receiving caller identification at said call control application and in response sending said request and caller identification to said switch; </claim-text>
<claim-text>registering said request for location data at said switch by publishing an anti-tuple to said tuple space that includes said caller identification; </claim-text>
<claim-text>user selection of said location data from said directory application; </claim-text>
<claim-text>publishing a tuple to said tuple space that includes said location data from said directory application and said caller identification; and </claim-text>
<claim-text>matching said tuple with said anti-tuple within said tuple space and in response causing said communication switch to execute the location-based call feature requested by the user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method of synchronizing a call control request to a communication switch with location data from a directory application using a tuple space, comprising: 
<claim-text>user initiation of a request for use of a location-based feature from a call control application; </claim-text>
<claim-text>registering said request for location data by publishing an anti-tuple to said tuple space; </claim-text>
<claim-text>user selection of said location data from said directory application; </claim-text>
<claim-text>publishing a tuple to said tuple space that includes said location data from said directory application; and </claim-text>
<claim-text>matching said tuple with said anti-tuple within said tuple space and in response causing said communication switch to execute the location-based call feature requested by the user.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005032A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005032A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005032A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005032A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005032A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005032A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
