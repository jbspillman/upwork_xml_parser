<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002669A1-20030102-D00000.TIF SYSTEM "US20030002669A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002669A1-20030102-D00001.TIF SYSTEM "US20030002669A1-20030102-D00001.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002669</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10144366</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020513</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>0116039.9</doc-number>
</priority-application-number>
<filing-date>20010629</filing-date>
<country-code>GB</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>380</class>
<subclass>046000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Encoder and method for encoding data</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Peter</given-name>
<family-name>Miller</family-name>
</name>
<residence>
<residence-non-us>
<city>Shefford</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>MOTOROLA, INC.</name-1>
<name-2></name-2>
<address>
<address-1>1303 EAST ALGONQUIN ROAD</address-1>
<address-2>IL01/3RD</address-2>
<city>SCHAUMBURG</city>
<state>IL</state>
<postalcode>60196</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An encoder (<highlight><bold>10,30</bold></highlight>) and method for encoding data comprising a pseudo random number generator (<highlight><bold>12</bold></highlight>) for generating an array of pseudo random numbers (<highlight><bold>15</bold></highlight>), and calculating means (<highlight><bold>10,30</bold></highlight>) for calculating a checkword (<highlight><bold>11,23,25</bold></highlight>) using the array of pseudo random numbers generated and a data sequence provided by a data unit (<highlight><bold>13</bold></highlight>). </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to an encoder and a method of encoding data. More specifically, the invention relates to error detection systems and methods, for example, systems and methods utilizing checksum including cyclic redundancy check (CRC) techniques. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE DISCLOSURE </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Data communicated and transferred digitally from one unit to another unit in a data system, may become lost or corrupted. Data error detection methods and systems are used to attempt to automatically detect errors in the received data. Some error detection methods utilize checksum including checksum based on addition and checksums based on cyclic redundancy check (CRC) techniques, both of which are discussed by way of example in a series of three articles by Barr, M., &ldquo;Embedded Systems&rdquo;, 12/1999 pp37-43, 1/2000 pp 37-43, and 5/2000 pp 59-70. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Both checksum and CRC techniques involve calculating and generating a &ldquo;checkword&rdquo; at the unit transmitting a string of data. The transmitted checkword is representative of the data sent and is appended to the string of data sent by the unit transmitting the data. On reception of the data string, a second checkword is calculated at the receiving unit performing the same calculations conducted at the transmitting unit based on the data string actually received. The second checkword is then compared with the actual transmitted checkword received. If the two checkwords match, then the probability of data loss or corruption during transmission is low, and the data string is regarded correct. If on comparison the second checkword differs from the transmitted checkword, an indication that the data string sent has been corrupted during transmission is recognized. In such cases the receiving unit may for example request to have the data resent, correct the data, or ignore the data and wait to receive additional data from a transmitting unit. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> A typical checksum generates the checkword based on a sum of bytes approach, which involves purely addition functions, the sum of data taken over a unit at a time. The checksum approach is commonly used because it is relatively easy to implement, and can be executed relatively quickly. However, there are problems associated with these type of checksums. A problem arises if there are simple faults in the received data sequence, for example, the order of the data in the data sequence is changed during transmission, the checkword and checksum is unchanged. Another problem with these checksums arises if the entire data sequence or string received at the receiving unit was of all zeros. In both conditions, the first checkword calculated at the transmitting unit would match the second checkword calculated at the receiving unit using the checksum based on the sum of bytes approach, and the corruption in the data sequence would go unnoticed. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Another error detection approach mentioned above is CRC, which generates the checkword by calculating and updating the checkword and checksum on every bit of the data string, as opposed to the unit of time approach on the checksum based on addition approach. The CRC approach ensures that the simple faults and the all zeros problems are detected. However, calculating a bit at a time is much slower process than the simple checksum approach, and requires greater processor time to calculate, especially where the calculations are done 16 or 32 bits at a time. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Therefore, there is a need in the art for an encoder and method of encoding for detection of errors and corruption of data during transmission that provides a faster solution than CRC and improved fault tolerance than checksum based on addition.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Embodiments of the invention will now be more fully described, by way of example, with reference to the drawings, of which: </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a schematic block diagram according to an embodiment of the invention; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a schematic block diagram of an encoder a according to an embodiment of the invention; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a schematic block diagram of an encoder a according to an embodiment of the invention; and </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a schematic block diagram of an encoder according to an embodiment of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in an embodiment of the invention, an encoder <highlight><bold>10</bold></highlight> is shown within an error detection system <highlight><bold>3</bold></highlight>. In such a system, when in use, a data signal <highlight><bold>18</bold></highlight> is transmitted from a transmitting unit <highlight><bold>1</bold></highlight> to a receiving unit <highlight><bold>2</bold></highlight>. Transmission may be, for example, by wire, RF, or other means. The data signal <highlight><bold>18</bold></highlight> is transmitted by transmitter <highlight><bold>16</bold></highlight> and comprises a data sequence <highlight><bold>13</bold></highlight> together with a first checkword <highlight><bold>11</bold></highlight>. The data values in the sequence <highlight><bold>13</bold></highlight> are supplied and provided by a data unit <highlight><bold>14</bold></highlight>. The checkword is calculated and provided by the encoder <highlight><bold>10</bold></highlight>. The function of the calculation of the checkword will be discussed in detail below with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>-<highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Upon reception of the transmitted data signal at the receiver unit <highlight><bold>2</bold></highlight>, the signal received <highlight><bold>20</bold></highlight> contains the transmitted data together with the transmitted first checkword <highlight><bold>11</bold></highlight>. The receiver <highlight><bold>22</bold></highlight> derives from the data signal the received data sequence <highlight><bold>21</bold></highlight> and the transmitted first checkword <highlight><bold>23</bold></highlight>. A second checkword <highlight><bold>25</bold></highlight> is calculated from the received data sequence <highlight><bold>21</bold></highlight> and provided by the encoder <highlight><bold>30</bold></highlight> performing the same calculations conducted at the transmitting unit, as described in detail below with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>-<highlight><bold>4</bold></highlight>. Of course, the system may be configured such that the transmitting unit <highlight><bold>1</bold></highlight> and the receiving unit <highlight><bold>2</bold></highlight> share the same encoder <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The second checkword <highlight><bold>25</bold></highlight> and the transmitted first checkword <highlight><bold>23</bold></highlight> are compared by comparator <highlight><bold>24</bold></highlight> to determine if the two checkwords match and provide a signal <highlight><bold>26</bold></highlight> indicating whether the two checkwords differ. If the two checkwords match, then the probability of data loss or corruption during transmission is low, and the data string received <highlight><bold>21</bold></highlight> is deemed to represent the data string transmitted <highlight><bold>13</bold></highlight>. If on comparison the checkwords differ, then the comparator provides a signal <highlight><bold>26</bold></highlight> that is an indication that the data string sent <highlight><bold>13</bold></highlight> has been corrupted during transmission. As discussed in the background above, in such cases the receiving unit <highlight><bold>2</bold></highlight> may request to have the data resent, attempt to correct the data itself, or ignore the data and wait to receive additional data from a transmitting unit <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The checkwords are calculated by encoder <highlight><bold>10</bold></highlight>, which is shown by example in greater detail in FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>4</bold></highlight>. FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>4</bold></highlight> illustrate embodiments of the encoder for calculating the first checkword <highlight><bold>11</bold></highlight> and second checkword <highlight><bold>25</bold></highlight>. Thus, the data sequence supplied to the encoder <highlight><bold>10</bold></highlight> may be either the original data sequence <highlight><bold>13</bold></highlight> to be transmitted, or the data sequence <highlight><bold>25</bold></highlight> after transmission. In each of FIGS. <highlight><bold>2</bold></highlight>-<highlight><bold>4</bold></highlight> the encoder <highlight><bold>10</bold></highlight> comprises a pseudo-random number generator <highlight><bold>12</bold></highlight> for generating an array of pseudo random numbers <highlight><bold>15</bold></highlight>, the same array and sequence of which may be regenerated or reproducible, repeatedly. The pseudo random number generator may be for example a fibonacci sequence generator, a multiplicative generator, or the like. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an embodiment of the encoder <highlight><bold>10</bold></highlight>,<highlight><bold>30</bold></highlight>. In this embodiment, the pseudo-random generator <highlight><bold>12</bold></highlight> may be a fibonacci sequence generator for calculating the first checkword <highlight><bold>11</bold></highlight> and/or second checkword <highlight><bold>25</bold></highlight>. The data sequence <highlight><bold>13</bold></highlight>,<highlight><bold>21</bold></highlight> is passed a number of bits at a time (for example <highlight><bold>8</bold></highlight> or <highlight><bold>16</bold></highlight>) through a number (equal to the number of bits being processed at a time) of <highlight><bold>3</bold></highlight> input exclusive or gates (XOR) <highlight><bold>32</bold></highlight> with the fibonacci sequence generated by the pseudo-random generator <highlight><bold>12</bold></highlight>. The output of the XOR <highlight><bold>32</bold></highlight> is added together with the output <highlight><bold>35</bold></highlight> of register <highlight><bold>36</bold></highlight>. A counter <highlight><bold>37</bold></highlight> counts the number of data processed and also feeds this into XOR <highlight><bold>32</bold></highlight>. This counter further modifies the data based on its position in the data sequence <highlight><bold>13</bold></highlight>,<highlight><bold>21</bold></highlight>. The pseudo-random number generator <highlight><bold>12</bold></highlight>, register <highlight><bold>36</bold></highlight>, and counter <highlight><bold>37</bold></highlight> are synchronised via a clock, as shown, a new clock pulse signifying a new set of (<highlight><bold>8</bold></highlight> or <highlight><bold>16</bold></highlight>) data bits are ready to be processed. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates an embodiment of the encoder <highlight><bold>10</bold></highlight>,<highlight><bold>30</bold></highlight>. In this embodiment, the pseudo-random number generator <highlight><bold>12</bold></highlight> has been merged within the main logic for calculating the first checkword <highlight><bold>11</bold></highlight> and/or second checkword <highlight><bold>25</bold></highlight>. Similarly, as discussed above with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the data sequence <highlight><bold>13</bold></highlight>,<highlight><bold>21</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is passed through XOR <highlight><bold>32</bold></highlight> with the modified fibonacci sequence generated by the adder <highlight><bold>40</bold></highlight> and register <highlight><bold>2</bold></highlight>. In the embodiment of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, however, the pseudo-random sequence is modified by the data sequence <highlight><bold>13</bold></highlight>,<highlight><bold>21</bold></highlight> and the output of the XOR <highlight><bold>32</bold></highlight>, to provide a modified pseudo-random number sequence <highlight><bold>39</bold></highlight>. The output of the XOR <highlight><bold>32</bold></highlight> is stored in registers <highlight><bold>36</bold></highlight>,<highlight><bold>38</bold></highlight>, wherein register <highlight><bold>1</bold></highlight> (<highlight><bold>36</bold></highlight>) stores the current value in the pseudo-random number sequence, and register <highlight><bold>2</bold></highlight> (<highlight><bold>38</bold></highlight>) stores the previous value in the pseudo-random number sequence. The output from register <highlight><bold>2</bold></highlight> (<highlight><bold>38</bold></highlight>) is added together with the output of register <highlight><bold>2</bold></highlight> (<highlight><bold>36</bold></highlight>) to form the next value of the pseudo-random number generator <highlight><bold>12</bold></highlight>. Of course, the initial starting values in the registers <highlight><bold>36</bold></highlight>,<highlight><bold>38</bold></highlight> must be fixed at the same value for encoding and decoding, until replaced with a value from the XOR <highlight><bold>32</bold></highlight>. A counter <highlight><bold>37</bold></highlight> counts the number of data processed in the same way as in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The registers <highlight><bold>36</bold></highlight>,<highlight><bold>38</bold></highlight>, and counter <highlight><bold>37</bold></highlight> are synchronised via a clock, as in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates an embodiment of the encoder <highlight><bold>10</bold></highlight>,<highlight><bold>30</bold></highlight>. In this embodiment, a multiplicative pseudo-random number generator <highlight><bold>12</bold></highlight> is used. Similarly, as discussed above with reference to <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, the data sequence <highlight><bold>13</bold></highlight>,<highlight><bold>21</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is passed through XOR <highlight><bold>32</bold></highlight> with the multiplicative sequence generated by the multiplier <highlight><bold>40</bold></highlight>. In the embodiment of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the pseudo-random number sequence is created by multiplying the output of the register (<highlight><bold>11</bold></highlight>,<highlight><bold>25</bold></highlight>) by a non-zero constant, for example 69069, to provide a modified pseudo-random number sequence <highlight><bold>39</bold></highlight>. The output of the XOR <highlight><bold>32</bold></highlight> is stored in register <highlight><bold>36</bold></highlight>, wherein register <highlight><bold>36</bold></highlight> stores the current output value. Of course, the initial starting value in the register <highlight><bold>36</bold></highlight> is fixed at a known value, until replaced with a value from the XOR <highlight><bold>32</bold></highlight>. A counter <highlight><bold>37</bold></highlight> counts the number of data processed as in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The register <highlight><bold>36</bold></highlight>, and counter <highlight><bold>37</bold></highlight> are synchronised via a clock, as in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> It will be appreciated that although the particular embodiments of the invention have been described above, various other modifications and improvements may be made by a person skilled in the art without departing from the scope of the present invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An encoder comprising: 
<claim-text>a pseudo random number generator for generating a reproducible array of pseudo random numbers; </claim-text>
<claim-text>calculating means for calculating a checkword, having an exclusive or gate for values of the array of pseudo random numbers generated and a data sequence provided by a data unit to pass through, and at least one register synchronised with said pseudo random number generator to store the output of the exclusive or gate, and update the checkword. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the pseudo random number generator generates an array of pseudo random numbers that is a function of the data sequence. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising a counter for counting a number of received words of data. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising transmitting means which, in use, transmits a signal to a receiving unit, the data sequence provided by the data unit together with a first checkword, in a form which enables the receiving unit to derive from the data signal, the received data sequence and the first checkword. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> for use in a data error detection system comprising: 
<claim-text>a receiving unit for receiving the transmitted signal; and </claim-text>
<claim-text>comparing means for comparing a second checkword with the first checkword for providing an indication of an error occurring in the data sequence during transmission, the second checkword provided by calculating means based on the data sequence actually received by the receiving unit and the array of pseudo random numbers generated. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004-1">
<claim-text><highlight><bold>4</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said pseudo-random number generator is a fibonacci sequence number generator. </claim-text>
</claim>
<claim id="CLM-00005-2">
<claim-text><highlight><bold>5</bold></highlight>. An encoder as claimed in any of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said pseudo-random number generator is a multiplicative sequence number generator. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An encoder as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> for use in automotive application. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method for encoding data comprising the steps of: 
<claim-text>generating an array of pseudo random numbers with a pseudo random number generator; </claim-text>
<claim-text>calculating by calculating means a checkword, calculating means having an exclusive or gate for values of the array of pseudo random numbers generated and a data sequence provided by a data unit to pass through, and at least one register synchronised with said pseudo random number generator to store the output of the exclusive or gate, and update the checkword. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method for encoding data, as claimed in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further comprising the step of transmitting by transmitting means which, in use, transmits a signal to a receiving unit, the data sequence provided by the data unit together with a first checkword, in a form which enables the receiving unit to derive independently from the data signal, the received data sequence and the first checkword. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method for encoding data as claimed in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further comprising the steps of: 
<claim-text>receiving the transmitted signal by a receiving unit; and </claim-text>
<claim-text>comparing by comparing means a second checkword with the first checkword for providing an indication of an error occurring in the data sequence during transmission, the second checkword provided by calculating means based on the data sequence actually received by the receiving unit and the array of pseudo random numbers generated.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002669A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002669A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
