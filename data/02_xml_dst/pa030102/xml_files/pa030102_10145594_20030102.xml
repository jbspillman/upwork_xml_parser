<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005129A1-20030102-D00000.TIF SYSTEM "US20030005129A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005129A1-20030102-D00001.TIF SYSTEM "US20030005129A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005129A1-20030102-D00002.TIF SYSTEM "US20030005129A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005129A1-20030102-D00003.TIF SYSTEM "US20030005129A1-20030102-D00003.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005129</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10145594</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020513</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>227000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Browser with messaging capability and other persistent connections</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60290545</doc-number>
<document-date>20010511</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Luiz</given-name>
<family-name>Scheinkman</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>SAP AG</organization-name>
<address>
<city>Walldorf</city>
<country>
<country-code>DE</country-code>
</country>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>TOWNSEND AND TOWNSEND AND CREW, LLP</name-1>
<name-2></name-2>
<address>
<address-1>TWO EMBARCADERO CENTER</address-1>
<address-2>EIGHTH FLOOR</address-2>
<city>SAN FRANCISCO</city>
<state>CA</state>
<postalcode>94111-3834</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In an HTTP client-server system, an HTTP client requests an HTML document containing a persistent display element and using components available to the HTTP client for processing HTML documents, processes the requested HTML document including instantiating an instance of the persistent display element, whereby the persistent display element instance maintains a connection to an event source. When an event is received from the event source over the connection to the persistent display element instance, the received event is processed to form a change of at least a portion of a display of the HTTP client, which is displayed on the display of the HTTP client. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to user interfaces in general and in particular to a browser user interface for browsing hypertext content. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The typical system for browsing hypertext content includes a browser that makes requests, as an HTTP (HyperText Transport Protocol) client, of an HTTP server over the global internetwork of networks known as &ldquo;the Internet&rdquo; using an underlying protocol known as TCP/IP (Transport Control Protocol/Internet Protocol). Often, an information provider sets up the HTTP server and the information provider allows user preferences to guide the information provided. An information seeker might access the information provided by the information provider by directing the seeker&apos;s browser (or other HTTP client) to retrieve an HTML (HyperText Markup Language), or other format, page from the HTTP server where the page is specified by a Uniform Resource Locator (URL) representing a page served by that HTTP server. A collection of static and dynamic hypertext pages available from HTTP servers connected to the Internet is often referred to as the World Wide Web (&ldquo;WWW&rdquo;), or &ldquo;the Web&rdquo; for short. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A portal operator might set up an HTTP server or HTTP server farm (the &ldquo;portal server&rdquo;) to serve requests from clients seeking information provided by the portal operators. The HTTP server is often referred to as the portal operator&apos;s &ldquo;website&rdquo; because a browser (or other HTTP client) appears to &ldquo;go&rdquo; to a new location in the Web when the URL for the portal operator&apos;s HTTP server is specified. Thus, the act referred to as &ldquo;going to a website&rdquo; does not involve any movement per se, other than a change of focus of the HTTP client and a display of the HTML code representing that website. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> When the HTTP client is directed to the HTTP server URL, the HTML code is downloaded. HTML code allows embedding text, images, scripts, controls, and software that are interpreted by the HTTP client. In the HTML code, a number of connections may be presented as links to objects such as images, sound or other files. Some HTTP clients can only download from a maximum of four connections at a time. Once the object is downloaded, the connection is terminated and any remaining objects are downloaded with the newly freed connection. In some circumstances, the connection remains open to receive a multi-part GIF image file (e.g., from a web cam) that is displayed in a slide-show fashion over an open connection. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The portal operator might maintain a set of preferences at the portal server for each user that has set up an account with the portal operator. Thus, if the portal provider allows the user to select or deselect categories of information, such as stock quotes, news and weather, a user that is not interested in the weather could set preferences to indicate that when that user requests a portal page from the portal server and the portal server has identified the user, the portal server should serve an HTML page that contains current stock quotes and news, but not weather. Since the page served by the portal server is customized to the user when the portal server has identified the user, the page served is often referred to as that user&apos;s portal page. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Certain pages have information that changes over time. Once an HTML page is downloaded to a HTTP client, new information stops passing between the HTTP server and the HTTP client. The user may, however, request an updated portal page by pressing the refresh button on the browser, or a script may automatically request the updated portal page after expiration of a timer. Further, the script could poll the HTTP server for new information and display that information if it changes. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> There are ways to send information between computers on a real-time basis. Instant messaging and chat room programs allow people to communicate in real-time. These programs embellish the browser with ActiveX&trade; or Java&trade; controls, periodically poll the HTTP server or use software separate from the HTTP client to allow this communication. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In an HTTP client-server system, an HTTP client requests an HTML document containing a persistent display element and using components available to the HTTP client for processing HTML documents, processes the requested HTML document including instantiating an instance of the persistent display element, whereby the persistent display element instance maintains a connection to an event source. When an event is received from the event source over the connection to the persistent display element instance, the received event is processed to form a change of at least a portion of a display of the HTTP client, which is displayed on the display of the HTTP client.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a block diagram of an embodiment of a messaging system. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is a block diagram of another embodiment of a messaging system. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of an embodiment of HTML code that is downloaded to a browser to display a corresponding web page. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram of an embodiment of a process for sending messages to HTML code that is interpreted by the browser to display the web page.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A few examples of specific embodiments of a hypertext browsing and serving system according to the present invention are described herein. Others may become apparent after reading this description and it should be understood that the invention is not limited to these specific examples, but is limited only by the appended claims. Furthermore, while specific methods and apparatus are shown, it should be apparent upon reading this disclosure that some of the methods can be practiced using different apparatus and the apparatus shown could be used to perform different methods than shown. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> This description discloses how to make and use several embodiments of a system according to the present invention, but for brevity, omits descriptions of many well-known components of such systems. For example, the operation and design of a network capable of carrying hypertext traffic, such as the Internet, the specifications of hypertext protocols, such as HTTP, for use in transporting HTML pages, the construction and operation of a browser, such as Netscape&apos;s Navigator&trade; browser, are not disclosed herein, since they are well described in countless readily available sources. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Using aspects of the present invention, messaging is performed between a HTTP server and a browser without requiring controls or software on the client. Without the need for software or controls on the client computer, the present invention has a zero footprint on the client computer. The HTTP server presents HTML code that includes an HTTP connection to a resource or URL that remains open after the rest of the HTML code is downloaded and displayed by the browser. The HTML code also includes scripts that react to messages sent through the open HTTP connection. Using the open connection, a message(s) is sent from the HTTP server to the browser. The scripts use the messages to update portions of the displayed web page or to perform other tasks after the scripts are triggered to act. If desired, the script can open a new connection to provide for further messaging. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Referring first to <cross-reference target="DRAWINGS">FIG. 1A, a</cross-reference> block diagram of an embodiment of a messaging system <highlight><bold>100</bold></highlight> is shown. This embodiment <highlight><bold>100</bold></highlight> uses an alert server <highlight><bold>108</bold></highlight> to set up events to trigger scripts on one or more browser clients <highlight><bold>112</bold></highlight>. These events could include updating stock quotes, instant messaging, chat room dialog, refreshing a web page, refreshing a section of a web page or other updating of a web page based upon a subscribed event. In this embodiment, the HTTP server <highlight><bold>104</bold></highlight>, alert server <highlight><bold>108</bold></highlight> and browser clients <highlight><bold>112</bold></highlight> are coupled together with the Internet <highlight><bold>116</bold></highlight>, but other embodiments could use any network for coupling. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The HTTP server <highlight><bold>104</bold></highlight> can be a standard web server that the browser <highlight><bold>112</bold></highlight> is pointed to in order to download the HTML code. Unique HTML code is provided to the browser, in this embodiment, by way of a portal paradigm. The alert server <highlight><bold>108</bold></highlight> passes information to the HTTP server <highlight><bold>104</bold></highlight> to indicate the events that the user associated with the browser <highlight><bold>112</bold></highlight> has subscribed to. With this information and other preference information, the unique HTML code is formulated by the HTTP server <highlight><bold>104</bold></highlight> and presented in the browser <highlight><bold>112</bold></highlight> as a portal page. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1B, a</cross-reference> block diagram of another embodiment of a messaging system <highlight><bold>150</bold></highlight> is shown. This embodiment couples an alert server <highlight><bold>154</bold></highlight> to the HTTP server <highlight><bold>104</bold></highlight> using an iTAPI interface or other interface. Other embodiments could merge the functionality of the alert server <highlight><bold>154</bold></highlight> to the HTTP server <highlight><bold>104</bold></highlight> in any number of ways. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> block diagram is shown of an embodiment of HTML code <highlight><bold>200</bold></highlight> that is downloaded to a browser to display a corresponding web page. The HTML code <highlight><bold>200</bold></highlight> is formulated by the HTTP server <highlight><bold>104</bold></highlight> with the help of the alert server <highlight><bold>154</bold></highlight>. HTTP objects <highlight><bold>208</bold></highlight>, such as images, sound and XML (eXtensible markup Language), are included in the HTML code <highlight><bold>200</bold></highlight>. Java&trade; scripts <highlight><bold>204</bold></highlight> are also embedded in the HTML code <highlight><bold>200</bold></highlight>, but other embodiments could use any scripting language(s). </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> This embodiment uses what is defined as an XML island <highlight><bold>212</bold></highlight> to help maintain an open connection between the alert server <highlight><bold>108</bold></highlight> and the browser <highlight><bold>112</bold></highlight>. An XML island <highlight><bold>212</bold></highlight> is a reference to a XML file hosted by the alert server <highlight><bold>108</bold></highlight> that causes a connection to open to download the XML file. The alert server <highlight><bold>108</bold></highlight> leaves the connection open during downloading the XML file. If the browser <highlight><bold>112</bold></highlight> times-out the connection, another XML island <highlight><bold>212</bold></highlight> is opened such that a connection is continually maintained. Any message meant for the browser <highlight><bold>112</bold></highlight> will travel through the connection. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Other embodiments could use different techniques to maintain this open connection without the need for special controls or software installed on the client computer. For example, the HTML code could include an image element, such as an embedded GIF or JPEG image, that has a URL that points to the alert server. To keep the connection open, the alert server would serve the &ldquo;image&rdquo; but never complete the image. That way, the browser maintains the connection. When a message is available, it can be sent over the open connection and processed by the browser, such as by qa script that knows the message is not to be treated as an ordinary image, but is to be treated as a message. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Referring next to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> flow diagram is shown of an embodiment of a process <highlight><bold>300</bold></highlight> for sending messages to HTML code <highlight><bold>200</bold></highlight> that is interpreted by the browser <highlight><bold>112</bold></highlight> to display the web page. The depicted portion of the process <highlight><bold>300</bold></highlight> begins in step <highlight><bold>304</bold></highlight> where events are published for the benefit of the users. In customizing the portal page, for example, the user browses the possible events and subscribes to any in step <highlight><bold>308</bold></highlight>. Events are anything that requires passing information to the browser client <highlight><bold>112</bold></highlight> after a trigger occurs. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> At some point after events are subscribed to, the HTML code <highlight><bold>200</bold></highlight> is formulated by the HTTP and alert servers <highlight><bold>104</bold></highlight>, <highlight><bold>108</bold></highlight> and downloaded to the browser <highlight><bold>112</bold></highlight> in step <highlight><bold>312</bold></highlight>. If there are no XML islands <highlight><bold>212</bold></highlight>, there are no events or open connections to the alert server <highlight><bold>154</bold></highlight> and processing loops back from step <highlight><bold>316</bold></highlight> to step <highlight><bold>312</bold></highlight>. Where there is an XML island <highlight><bold>212</bold></highlight>, processing continues until an event occurs in step <highlight><bold>320</bold></highlight>. The event is noted on the alert server <highlight><bold>108</bold></highlight> and a message is broadcast to all the browser&apos;s <highlight><bold>112</bold></highlight> that subscribed to the event by way of the open connection to the XML island <highlight><bold>212</bold></highlight> in step <highlight><bold>324</bold></highlight>. In some embodiments, publication might come after subscription. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Once the message is sent to the subscribing browsers <highlight><bold>112</bold></highlight>, the connection to the XML island <highlight><bold>212</bold></highlight> is released in step <highlight><bold>326</bold></highlight>. Upon release, the status of the connection changes from the &ldquo;readyState&rdquo; to the &ldquo;complete&rdquo; state. The message is the content for the XML island <highlight><bold>212</bold></highlight>. All scripts <highlight><bold>204</bold></highlight> that are waiting for a message from the alert server <highlight><bold>108</bold></highlight> trigger on the state change to read in the message from the XML island <highlight><bold>212</bold></highlight> in step <highlight><bold>328</bold></highlight>. The message contains addressing information such that the proper scripts <highlight><bold>204</bold></highlight> are delivered the proper information. In step <highlight><bold>336</bold></highlight>, the addressed scripts <highlight><bold>204</bold></highlight> process the message. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> One script <highlight><bold>204</bold></highlight> opens a new XML island <highlight><bold>212</bold></highlight> and connection to the alert server <highlight><bold>108</bold></highlight> right after the last connection closes. This allows maintaining a connection such that message(s) can be passed soon after they occur. In some embodiments, a number of messages can be sent down a connection before the connection is closed. The alert server <highlight><bold>108</bold></highlight> can queue up messages and send them in groups, whereafter, closure of the connection triggers the scripts <highlight><bold>204</bold></highlight> to act on any sent messages of the group. Although the above discussion used the example of a portal page, other embodiments could use the zero-footprint messaging in any web page. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The above description is illustrative and not restrictive. Many variations of the invention will become apparent to those of skill in the art upon review of this disclosure. For example, instead of an XML island, the persistent connection to the alert server could be maintained with an image element. The scope of the invention should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of passing messages from a message server to an HTTP client comprising: 
<claim-text>sending a request, from the HTTP client to an HTTP server, for an HTML document, wherein the request includes a reference identifying the HTML document and the HTML document includes a persistent connection element; </claim-text>
<claim-text>receiving, at the HTTP server, the request; responding to the request with HTML code representing the HTML document, wherein the HTML code includes code representing the persistent connection element, wherein the request is sent over a first server sending connection; </claim-text>
<claim-text>closing the first server sending connection; </claim-text>
<claim-text>at the HTTP client, processing the HTML code including the code representing the persistent connection element; </claim-text>
<claim-text>receiving, at the message server, a request to open a second server sending connection to the message server; </claim-text>
<claim-text>holding the second server sending connection open until a message is available at the message server for the HTTP client identified as the sender of the request to open a second server sending connection; </claim-text>
<claim-text>sending the message, once available, over the second server sending connection; </claim-text>
<claim-text>accepting at least one message from the message server over the second server sending connection; and </claim-text>
<claim-text>processing the at least one message at the HTTP client. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the message server and HTTP server are combined into a multi-function server. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein processing the HTML code comprises: 
<claim-text>receiving the at least one message; </claim-text>
<claim-text>closing the second server sending connection; </claim-text>
<claim-text>executing instructions to reopen a connection to the message server. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein processing the at least one message at the HTTP client comprises displaying content of the message in a browser window. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the at least one message is a group of messages. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the HTML document is a static HTML page. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the HTML document is a dynamically generated HTML page. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the persistent connection element is an XML document portion. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the persistent connection element is an image element. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the image element is a GIF image element. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the image element is a JPEG image element. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the persistent connection element comprises instructions to poll the message server for the at least one message. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the message server is an alert server. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the message server is an instant messaging server. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein processing the at least one message at the HTTP client comprises displaying received instant messaging information.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005129A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005129A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005129A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005129A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
