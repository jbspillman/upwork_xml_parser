<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002345A1-20030102-D00000.TIF SYSTEM "US20030002345A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00001.TIF SYSTEM "US20030002345A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00002.TIF SYSTEM "US20030002345A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00003.TIF SYSTEM "US20030002345A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00004.TIF SYSTEM "US20030002345A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00005.TIF SYSTEM "US20030002345A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00006.TIF SYSTEM "US20030002345A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00007.TIF SYSTEM "US20030002345A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00008.TIF SYSTEM "US20030002345A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00009.TIF SYSTEM "US20030002345A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00010.TIF SYSTEM "US20030002345A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00011.TIF SYSTEM "US20030002345A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00012.TIF SYSTEM "US20030002345A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00013.TIF SYSTEM "US20030002345A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00014.TIF SYSTEM "US20030002345A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00015.TIF SYSTEM "US20030002345A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00016.TIF SYSTEM "US20030002345A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00017.TIF SYSTEM "US20030002345A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00018.TIF SYSTEM "US20030002345A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00019.TIF SYSTEM "US20030002345A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002345A1-20030102-D00020.TIF SYSTEM "US20030002345A1-20030102-D00020.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002345</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10155216</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020528</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G11C011/34</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>365</class>
<subclass>185290</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Programming and erasing methods for an NROM array</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10155216</doc-number>
<kind-code>A1</kind-code>
<document-date>20020528</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09730586</doc-number>
<document-date>20001207</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>09730586</doc-number>
<document-date>20001207</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09563923</doc-number>
<document-date>20000504</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6396741</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-in-part-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Dror</given-name>
<family-name>Avni</family-name>
</name>
<residence>
<residence-non-us>
<city>Haifa</city>
<country-code>IL</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Boaz</given-name>
<family-name>Eitan</family-name>
</name>
<residence>
<residence-non-us>
<city>Ra'anana</city>
<country-code>IL</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Eitan, Pearl, Latzer &amp; Cohen-Zedek</name-1>
<name-2></name-2>
<address>
<address-1>One Crystal Park, Suite 210</address-1>
<address-2>2011 Crystal Drive</address-2>
<city>Arlington</city>
<state>VA</state>
<postalcode>22202-3709</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method for programming and erasing a memory array includes the step of adapting programming or erase pulses to the current state of the memory array. In one embodiment, the step of adapting includes the steps of determining the voltage level of the programming pulse used to program a fast bit of the memory array and setting an initial programming level of the memory array to a level in the general vicinity of the programming level of the fast bit. For erasure, the method includes the steps of determining erase conditions of the erase pulse used to erase a slowly erasing bit of said memory array and setting initial erase conditions of said memory array to the general vicinity of said erase conditions of said slowly erasing bit. In another embodiment of the array, the step of adapting includes the steps of measuring the current threshold level of a bit to within a given range and selecting an incremental voltage level of a next programming or erase pulse for the bit in accordance with the measured current threshold level. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present application is a divisional application of U.S. Ser. No. 09/730,586, filed Dec. 7, 2000, which application is a continuation in part application of Ser. No. 09/563,923, filed May 4, 2000, which application is incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to electrically erasable, programmable read only memory (EEPROM) cells and specifically, to methods for programming thereof. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, to which reference is made, illustrates a typical prior art floating gate cell, comprising two diffusion areas, source <highlight><bold>102</bold></highlight> and drain <highlight><bold>104</bold></highlight>, embedded in a substrate <highlight><bold>105</bold></highlight>, between which is a channel <highlight><bold>100</bold></highlight>. A floating gate <highlight><bold>101</bold></highlight> is located above but insulated from channel <highlight><bold>100</bold></highlight>, and a gate <highlight><bold>112</bold></highlight> is located above but insulated from floating gate <highlight><bold>101</bold></highlight>. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Typically, when programming the floating gate cell, programming voltages V<highlight><subscript>G </subscript></highlight>and V<highlight><subscript>D </subscript></highlight>are applied to gate <highlight><bold>112</bold></highlight> and drain <highlight><bold>104</bold></highlight>, respectively, and a low source voltage V<highlight><subscript>S </subscript></highlight>is applied to source <highlight><bold>102</bold></highlight>. For array applications, a row of gates are formed into a word line, and a column of drain and source are formed into bit lines along which voltages V<highlight><subscript>D </subscript></highlight>and V<highlight><subscript>S</subscript></highlight>, respectively, are supplied. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The source and drain voltages V<highlight><subscript>S </subscript></highlight>and V<highlight><subscript>D</subscript></highlight>, respectively, create a lateral field that pulls channel electrons from source <highlight><bold>102</bold></highlight> to drain <highlight><bold>104</bold></highlight>. This is indicated by arrow <highlight><bold>10</bold></highlight>. Near drain <highlight><bold>104</bold></highlight>, a vertical field created by the gate voltage V<highlight><subscript>G </subscript></highlight>allows hot channel electrons to be injected (arrow <highlight><bold>12</bold></highlight>) into floating gate <highlight><bold>101</bold></highlight>. Once injected into floating gate <highlight><bold>101</bold></highlight>, the electrons are distributed equally across the entire gate, increasing the threshold voltage V<highlight><subscript>TH </subscript></highlight>of floating gate <highlight><bold>101</bold></highlight>. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Another type of non-volatile cell is the nitride, read only memory (NROM) cell described in U.S. Pat. No. 6,011,725, assigned to the common assignee of the present application. The disclosure of U.S. Pat. No. 6,011,725 is incorporated herein by reference. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Similar to the floating gate cell of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the NROM cell illustrated in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>, to which reference is now made, has channel <highlight><bold>100</bold></highlight> between two diffusion areas <highlight><bold>102</bold></highlight> and <highlight><bold>104</bold></highlight>. However, unlike the floating gate cell, the NROM cell has two separated and separately chargeable areas <highlight><bold>106</bold></highlight> and <highlight><bold>108</bold></highlight>. Each chargeable area defines one bit. For the dual bit cell of FIGS. <highlight><bold>2</bold></highlight>, the separately chargeable areas <highlight><bold>106</bold></highlight> and <highlight><bold>108</bold></highlight> are found within a nitride layer <highlight><bold>110</bold></highlight> formed in an oxide-nitride-oxide (ONO) sandwich (layers <highlight><bold>109</bold></highlight>, <highlight><bold>110</bold></highlight> and <highlight><bold>111</bold></highlight>) underneath gate <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> To program the left bit in area <highlight><bold>106</bold></highlight>, the left diffusion area <highlight><bold>102</bold></highlight> receives the high programming voltage V<highlight><subscript>D </subscript></highlight>(i.e. area <highlight><bold>102</bold></highlight> is the drain) and right diffusion area <highlight><bold>104</bold></highlight> is grounded (i.e. area <highlight><bold>104</bold></highlight> is the source). Hence the electrons flow from area <highlight><bold>104</bold></highlight> to area <highlight><bold>102</bold></highlight>. This is indicated by arrow <highlight><bold>114</bold></highlight>. The channel hot electrons are then injected into the nitride layer, in area <highlight><bold>106</bold></highlight>. The negative charge in area <highlight><bold>106</bold></highlight> raises the threshold voltage of the cell, if read in the reverse direction. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The opposite is true for programming area <highlight><bold>108</bold></highlight>; the left diffusion area <highlight><bold>102</bold></highlight> is the source (i.e. grounded) and right diffusion area <highlight><bold>104</bold></highlight> is the drain (i.e. receives high programming voltage V<highlight><subscript>D</subscript></highlight>). The cell is therefore programmed in the opposite direction, as indicated by arrow <highlight><bold>113</bold></highlight>, and the electrons then jump up into chargeable area 108. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> For NROM cells, each bit is read in the direction opposite (a &ldquo;reverse read&rdquo;) to that of its programming direction. An explanation of the reverse read process is described in U.S. Pat. No. 6,011,725, mentioned above. Thus, to read the left bit stored in area <highlight><bold>106</bold></highlight>, right diffusion area <highlight><bold>104</bold></highlight> is the drain and left diffusion area <highlight><bold>102</bold></highlight> is the source. This is known as the &ldquo;read through&rdquo; direction, indicated by arrow <highlight><bold>113</bold></highlight>. To read the right bit stored in area <highlight><bold>108</bold></highlight>, the cell is read in the opposite direction, indicated by arrow <highlight><bold>114</bold></highlight>. Thus, left diffusion area <highlight><bold>102</bold></highlight> is the drain and right diffusion area <highlight><bold>104</bold></highlight> is the source. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> During the read operation, the presence of the gate and drain voltages V<highlight><subscript>G </subscript></highlight>and V<highlight><subscript>D</subscript></highlight>, respectively, induce a depletion layer <highlight><bold>54</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2B</cross-reference>) and an inversion layer <highlight><bold>52</bold></highlight> in the center of channel <highlight><bold>100</bold></highlight>. The drain voltage V<highlight><subscript>D </subscript></highlight>is large enough to induce a depletion region <highlight><bold>55</bold></highlight> near drain <highlight><bold>104</bold></highlight> which extends to the depletion layer <highlight><bold>54</bold></highlight> of channel <highlight><bold>100</bold></highlight>. This is known as &ldquo;barrier lowering&rdquo; and it causes &ldquo;punch-through&rdquo; of electrons from the inversion layer <highlight><bold>52</bold></highlight> to the drain <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Since area <highlight><bold>106</bold></highlight> is near left diffusion area <highlight><bold>102</bold></highlight> which, for this case, acts as the source (i.e. low voltage level), the charge state of area <highlight><bold>106</bold></highlight> will determine whether or not the inversion layer <highlight><bold>52</bold></highlight> is extended to the source <highlight><bold>102</bold></highlight>. If enough electrons are trapped in left area <highlight><bold>106</bold></highlight>, then the voltage thereacross will not be sufficient to extend inversion layer <highlight><bold>52</bold></highlight> to the source <highlight><bold>102</bold></highlight>, the cell&apos;s current will be low, and a &ldquo;0&rdquo; will be read. The opposite is true if area <highlight><bold>106</bold></highlight> has no charge. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIGS. 3A, 3B</cross-reference> and <highlight><bold>3</bold></highlight>C, which are timing diagrams of an exemplary prior art programming schedule for NROM cells. Typically, when programming an NROM cell, programming pulses <highlight><bold>120</bold></highlight>A, <highlight><bold>120</bold></highlight>B and <highlight><bold>120</bold></highlight>C, consisting of programming voltages V<highlight><subscript>D</subscript></highlight>, V<highlight><subscript>S</subscript></highlight>, and V<highlight><subscript>G</subscript></highlight>, respectively, are applied to the cell. Programming pulses <highlight><bold>120</bold></highlight> are then followed by program verify pulses <highlight><bold>122</bold></highlight>A, <highlight><bold>122</bold></highlight>B and <highlight><bold>122</bold></highlight>C, consisting of read voltages V<highlight><subscript>D</subscript></highlight>, V<highlight><subscript>S</subscript></highlight>, and V<highlight><subscript>G</subscript></highlight>, respectively, during which time the cell is read. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> If there are enough electrons trapped in the bit, a &ldquo;0&rdquo; is read, and the cell is verified as programmed. If, however, during the read operation, the inversion layer is not strong enough to prevent the current flow through the channel, then the bit will be read as a &ldquo;1&rdquo;, and the cell will fail program verification. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The sequence of pulses <highlight><bold>120</bold></highlight> and <highlight><bold>122</bold></highlight> are repeatedly applied until the effect of the charged trapped in area <highlight><bold>106</bold></highlight> (or <highlight><bold>108</bold></highlight>) has reached the desired level and the cell is considered &ldquo;programmed&rdquo;. The programming process is then terminated. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Due to ever demanding manufacturing requirements, the semiconductor industry is continuously searching for ways to improve the programming process. There exist two contradicting programming requirements; 1) to increase the programming speed, thereby reducing the cost of testing the part, and 2) to improve the control of the final programmed threshold, thereby enhancing product reliability. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The first requirement can easily be met just by increasing the drain and gate potentials to their maximum values. However, this strategy will not meet the second requirement due to the many process and environmental parameters that affect the programming rate and its variations. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> To achieve the second requirement, there are two basic options, controlling the length of the programming sequence, and/or stepping the amplitude of the gate voltage potential. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The article &ldquo;Nonvolatile Multilevel Memories for Digital Applications&rdquo;, published in the <highlight><italic>IEEE Magazine </italic></highlight>on Dec. 12, 1998, discusses a number of proposed methods for programming multilevel floating gate circuits, including that of controlling the programming time length. One such method is discussed in the section Programming and Accuracy, 2) <highlight><italic>Drain Voltage Programming</italic></highlight>, as follows: 1) a constant gate voltage is set, 2) per bit level of the multi-level cell, a constant drain voltage is determined, and 3) the cell is programmed for a predetermined time period. At the completion of the time period, the programming is terminated. Alternately, the article describes an approach whereby after each programming pulse, the threshold voltage V<highlight><subscript>TH </subscript></highlight>is verified. Upon reaching the target threshold voltage, programming is terminated. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> U.S. Pat. No. 5,523,972 describes a floating gate method that entails incrementally increasing the programming gate voltage V<highlight><subscript>G</subscript></highlight>, while keeping other factors constant (e.g. source and drain voltages, V<highlight><subscript>S </subscript></highlight>and V<highlight><subscript>D</subscript></highlight>, respectively). In the described programming algorithm, each cell is checked to determine whether or not it has reached the desired state. If not, a programming gate voltage pulse of a slightly higher voltage is applied to the cell. The charge level is checked again, and if the desired state has not yet been reached, the voltage is raised again and applied. This process is repeated until all the cells reach the desired level. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> U.S. Pat. No. 5,172,338 describes a programming algorithm similar to that described in the U.S. Pat. No. 5,523,972, however, on a per cell basis. Every cell that reaches the desired level does not receive the drain voltage of the next step. This sequence is continued until the last bit of the byte word/group is programmed. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As explained in both &ldquo;Nonvolatile Multilevel Memories for Digital Applications&rdquo; and U.S. Pat. No. 5,523,972, in floating gate cells, the relationship between &Dgr;V<highlight><subscript>G </subscript></highlight>and &Dgr;V<highlight><subscript>TH </subscript></highlight>is linear. As such, control of programming is relatively precise since, for every change in the gate voltage V<highlight><subscript>G</subscript></highlight>, there is a similar change in the threshold voltage V<highlight><subscript>TH </subscript></highlight>of the cell. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Nonetheless, there are many factors influencing the programming speed, and consequently, the programming speed may vary from cell to cell even when the same level of programming voltage is applied thereto. <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, to which reference is now made, illustrates the typical variation of programming time for a normal population of memory cells. Point <highlight><bold>126</bold></highlight> depicts the cell with the fastest programming speed, while point <highlight><bold>128</bold></highlight> represents the cell with the slowest programming speed. The variance in time between point <highlight><bold>126</bold></highlight> to point <highlight><bold>128</bold></highlight> can be as large as 500&times;. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The wide variation of programming speeds creates problems during programming of memory cell arrays. These arrays may contain many millions of memory cells, each with its own distinct programming speed. Some cells may reach their programmed level in a shorter time than needed for other cells to reach their programmed levels. Thus, the programming process needs to be terminated for some cells, while for others, it needs to be continued. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Some of the factors influencing the programming speed in floating gate cells are: variations in process parameters such as channel length, gate coupling ratio, drain coupling ratio, source resistance variations (array effect) and channel doping variations. Another factor influencing the program rate is the temperature of the product during programming; generally, the lower the temperature, the faster the programming rate. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In NROM cells, the parameters that affect the programming speed are: the ONO thickness, the channel length, the channel doping and the temperature. For dual bit NROM cells, the programming state of one bit affects the programming speed of the other bit. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> When an improper programming algorithm is used, some cells may receive too high programming voltages or may be programmed for too long. In such instances, an over-abundance of charge is introduced into the gate or retention layer (NROM) and the memory cell is &ldquo;over-programmed&rdquo;. In floating gate cells, over-programming deteriorates the quality of the oxide layer (reference number <highlight><bold>109</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 1</cross-reference>), creating reliability problems due to the degradation of the quality of the product. Furthermore, continuing to apply high voltage pulses once the unit cells have already reached the programmed level wastes power and creates a power dissipation problem. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Moreover, as to be described below, in multi-level floating gate products, over-programming can lead to information read failures. Reference is now made to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> graph illustrating the different threshold voltage levels comprised within a multi-level floating gate cell. As depicted in the <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, each bit in the multi-level floating gate cell is defined by a predefined region of voltage threshold V<highlight><subscript>TH</subscript></highlight>. As an example, the first bit lies in region <highlight><bold>132</bold></highlight>, (to the left of line W), while the second bit lies in region <highlight><bold>134</bold></highlight> (from line W to line X), the third bit in region <highlight><bold>136</bold></highlight> (from line X to line Y), and so on. When a cell is over-programmed, the resultant threshold voltage may overshoot the desired region, thus leading to a read error or failure. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Further problems arise when programming both bits of multi-bit memory cells, such as the two-bit NROM cell. Once the first bit is programmed, the threshold voltage V<highlight><subscript>TH </subscript></highlight>of the cell is raised, and consequently, the programming of the second bit of the cell is slower. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In NROM cells, in addition to the stated problems connected with breakdown of the oxide layer and unnecessary dissipation of power, over-programming creates different problems. As explained below in connection with FIGS. <highlight><bold>6</bold></highlight>, over-programming results in quality deterioration and reliability degradation, as well as read failures in two-bit cells. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A, 6B</cross-reference>, <highlight><bold>6</bold></highlight>C and <highlight><bold>6</bold></highlight>D, to which reference is now made, are exploded views of the NROM cell depicted in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>. It is noted that the shape of the trapped charge in chargeable areas <highlight><bold>106</bold></highlight> and <highlight><bold>108</bold></highlight> ranges from a narrow pocket, depicted as <highlight><bold>106</bold></highlight>N and <highlight><bold>108</bold></highlight>N, to an average pocket (i.e. <highlight><bold>106</bold></highlight>A and <highlight><bold>108</bold></highlight>A), to an even wider pocket (i.e. <highlight><bold>106</bold></highlight>W and <highlight><bold>108</bold></highlight>W) with a &ldquo;tail&rdquo; <highlight><bold>44</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Applicants note that tail <highlight><bold>44</bold></highlight>, which is farther from the bit line than the bulk of the trapped charge, is generally not removable during erasure and thus, reduces the ability of the NROM cell to withstand a large number of program and erase cycles. Typically, erasure depletes only the charge concentration closest to the diffusion area. Thus, if the distribution pocket is too wide, the tail 44 of the trapped charge will not erase, and with each progressive erase, more and more charge will remain in the retention section, even after erasures (<cross-reference target="DRAWINGS">FIG. 6D</cross-reference>). </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The trapped charge in tail <highlight><bold>44</bold></highlight> acts as partially programmed charge. It is due to the trapped charge in tail <highlight><bold>44</bold></highlight> that fewer programming pulses are required to achieve the programmed threshold voltage level (since the bit is already, in effect, partially programmed). </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Furthermore, the accumulation of trapped negative charge far from the junction increases the threshold voltage level, which affects the reverse read, making it difficult to distinguish the first bit from the second bit and creating read failures. In order to compensate, the erase operation accumulates extra positive charge close to the junction, which makes the erase time take longer. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Unfortunately, prior art methods of gradually increasing the programming gate voltage V<highlight><subscript>G </subscript></highlight>are not effective for NROM cells, and tend to produce the following two problems: </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> 1. In NROM products, increases in the gate voltage V<highlight><subscript>G </subscript></highlight>do not linearly correlate to increases in the threshold voltage V<highlight><subscript>TH</subscript></highlight>, and the effect of the increases varies from cell to cell. This causes a lack of precise programming control, and an incurred risk of over programming. </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> 2. In order to ensure a reasonable yield rate, meeting the programming rate requirement, the drain voltage V<highlight><subscript>D </subscript></highlight>potential must be high, creating trapped charge regions distant from the junction. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The above two problems result in reduction in the endurance of the product, increase in the charge loss and reduction in yield. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In regard to the first problem, reference is now made to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, an electrical schematic of a portion of an NROM array. The depicted circuit includes a bit line power supply V<highlight><subscript>PPS</subscript></highlight>, a select transistor <highlight><bold>152</bold></highlight>, resistors R<highlight><bold>1</bold></highlight> and R<highlight><bold>2</bold></highlight>, and an NROM cell <highlight><bold>154</bold></highlight>. Resistors R<highlight><bold>1</bold></highlight> and R<highlight><bold>2</bold></highlight> denote the native resistance of the wire in the depicted array. Transistor <highlight><bold>152</bold></highlight> is a select transistor used to select a bit line of the array. Programming current I<highlight><subscript>PR </subscript></highlight>flows throughout the entire circuit. The voltage drops across the channels of transistor <highlight><bold>152</bold></highlight> and cell <highlight><bold>154</bold></highlight> are designated as V<highlight><subscript>DS-SEL </subscript></highlight>and V<highlight><subscript>DS</subscript></highlight>, respectively. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In NROM cells, small increases in the programming gate voltage V<highlight><subscript>G </subscript></highlight>greatly influences the programming current I<highlight><subscript>PR</subscript></highlight>. In a chain reaction effect, when the programming gate voltage V<highlight><subscript>G </subscript></highlight>is stepped, programming current I<highlight><subscript>PR </subscript></highlight>increases, which causes an increase in voltage drops V<highlight><subscript>DS-SEL </subscript></highlight>and V<highlight><subscript>DS </subscript></highlight>and an increase in the voltage drops along resistors R<highlight><bold>1</bold></highlight> and R<highlight><bold>2</bold></highlight>. Hence, with all the different factors changing, there is no clear linear relationship between the stepped gate voltage V<highlight><subscript>G </subscript></highlight>and the threshold voltage V<highlight><subscript>TH</subscript></highlight>, and therefore, no precise control over the programming process. As a farther complication, the reduction in V<highlight><subscript>DS </subscript></highlight>increases the programming time exponentially. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Reduction in the incremental increase of the gate voltage V<highlight><subscript>G </subscript></highlight>can alleviate part of the control problem, but it will dramatically increase the programming time. Further control improvement can be achieved by increasing the dynamic range of the gate voltage V<highlight><subscript>G</subscript></highlight>. Unfortunately, there are resultant difficulties at both ends of the dynamic range. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Low gate voltage V<highlight><subscript>G </subscript></highlight>results in cycling degradation. So therefore, the desired gate voltage V<highlight><subscript>G </subscript></highlight>is set relatively high, i.e. 8-10V. Further increases in gate voltage V<highlight><subscript>G</subscript></highlight>, such as over 10V, require special processes and put severe limitations on the scaling of the ONO thickness due to charging by tunneling. For example, a 180 &angst; ONO of the 0.5 &mgr;m process will experience tunneling charging for voltages over 12V. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The second problem noted above (high drain voltage V<highlight><subscript>D</subscript></highlight>) creates even more severe limitations on the stepped gate voltage V<highlight><subscript>G </subscript></highlight>approach. When programming according to stepping of the gate voltage V<highlight><subscript>G</subscript></highlight>, the programming drain voltage V<highlight><subscript>D </subscript></highlight>must be fixed and high in order to cover a large dynamic range. Using a high programming drain voltage V<highlight><subscript>D </subscript></highlight>creates a large lateral field and a wide pinch-off regime, yielding a wide trapped charge region. Accordingly, the resultant product is the undesirable tail <highlight><bold>44</bold></highlight>, which drastically reduces the product&apos;s endurance. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Hence, due to the first problem noted above, using the gate voltage V<highlight><subscript>G </subscript></highlight>as a dynamic parameter for controlling programming is very limited in range. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In conclusion, in NROM cells, stepping the programming gate voltage V<highlight><subscript>G </subscript></highlight>does not provide tight programming control and is not effective in preventing over-programming and eventual degradation of the product&apos;s quality. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> As can be understood from the above, when prior art programming algorithms are applied to the NROM cell, they do not sufficiently provide the abilities to produce increased programming speed while maintaining tight programming control. Applicants have found a need for an NROM programming algorithm which executes these functions over a wide range of programming parameters, thus avoiding the dangers of over-programming and its resultant reduction in product reliability. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> An object of the present invention is to provide improved programming and erasure methods. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> A method for programming and erasing a memory array includes the step of adapting programming or erase pulses to the current state of the memory array. In one programming embodiment, the step of adapting includes the steps of determining the voltage level of the programming pulse used to program a fast bit of the memory array and setting an initial programming pulse level of the memory array to a level in the general vicinity of the programming pulse level of the fast bit. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Additionally, in accordance with a preferred embodiment of the present invention and for programming, the step of determining includes the steps of programming a small set of bits of the memory array, setting a starting programming pulse level to a programming pulse level not higher than the programming pulse level used to program a fast bit of said small set, programming generally all of the bits of the memory array beginning at the starting programming pulse level, and setting the initial programming pulse level to a programming pulse level in the general vicinity of the programming pulse level of the fast bit. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Moreover, in accordance with a preferred embodiment of the present invention, generally all of the bits is everything but the bits of the small set. Alternatively, they can include all of the bits of the array. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In another embodiment of the array, the step of adapting for programming includes the steps of measuring the current threshold level of a bit to within a predetermined range and selecting an incremental voltage level of a next programming pulse for the bit in accordance with the measured current threshold level. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Moreover, in accordance with a preferred embodiment of the present invention, the step of measuring includes the step of having multiple verify levels for the array. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Furthermore, in accordance with a preferred embodiment of the present invention, the magnitude of the incremental voltage level corresponds to the measured current threshold level such that, after programming with the incremental voltage level, the bit generally is fully programmed or slightly less than fully programmed. For the latter, the present invention includes the step of final programming the bit with a small incremental voltage level after the step of programming with the incremental voltage level. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Moreover, in accordance with a preferred embodiment of the present invention, the step of adapting for erasure includes the steps of determining erase conditions of the erase pulse used to erase a representative portion of the memory array and setting initial erase conditions of the memory array to the general vicinity of the erase conditions of the representative portion. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In another embodiment, the step of adapting for erasure includes the steps of measuring the current threshold level of a bit to within a predetermined range and selecting an incremental voltage level of a next erase pulse for the bit in accordance with the measured current threshold level. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Moreover, in accordance with a preferred embodiment of the present invention, the step of measuring includes the step of having multiple verify levels for the array. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Finally, in accordance with a preferred embodiment of the present invention, the erase conditions comprises at least one of the following set: the gate voltage level, the drain voltage level, the erase duration and any combination thereof. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The present invention will be understood and appreciated more fully from the following detailed description taken in conjunction with the appended drawings in which: </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic illustration of a floating gate memory cell; </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference> are schematic illustrations of a NROM memory cell; </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A, 3B</cross-reference> and <highlight><bold>3</bold></highlight>C are graphical illustrations of a prior art programming scheme; </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a histogram of the distribution of programming speed in NROM memory cells; </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a graph of the charge levels in a multi-level floating gate cell; </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A, 6B</cross-reference>, <highlight><bold>6</bold></highlight>C and <highlight><bold>6</bold></highlight>D are schematic illustrations of trapped charge retained in a two-bit NROM memory cell; </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an electrical schematic illustration of a portion of an NROM array; </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 8A, 8B</cross-reference> and <highlight><bold>8</bold></highlight>C are graphs illustrating the effect of programming drain voltages on the threshold voltage, as a function of cell temperature, channel length, and array and second bit effects, respectively; </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a graph illustrating the effect of the gate voltage and the drain voltage on the threshold voltage; </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a graph illustrating the increases in the threshold voltages over time, as a function of the drain voltage; </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A, 11B</cross-reference> and <highlight><bold>11</bold></highlight>C are graphical illustrations of a programming algorithm, constructed and operated according to a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flow chart illustration of a method of setting an initial programming voltage level, operative in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 13A, 13B</cross-reference>, <highlight><bold>13</bold></highlight>C, <highlight><bold>13</bold></highlight>D and <highlight><bold>13</bold></highlight>E are schematic illustrations of histograms of the number of programming pulses required to program the bits of an array for the method of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>; </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 14A and 14B</cross-reference> together are a flow chart illustration of a method of setting an initial erase voltage level, operative in accordance with a preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a schematic illustration showing two programming schedules for two different bits; </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a schematic illustration of an alternative embodiment of the present invention having multiple verify levels during programming; and </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a flow chart illustration of a method of generally fast erasing using multiple verify levels. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PRESENT INVENTION </heading>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The present invention teaches an NROM cell algorithm which regulates the bit line voltage V<highlight><subscript>BL </subscript></highlight>provided to the bit line acting as the drain, thereby providing tight programming control. Furthermore, the described invention provides the combination of a fast programming algorithm with reduced over-programming risk, and hence improved product endurance and cycling ability. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Although a bit line can act as either a source or a drain, in the present application, references to the bit line voltage V<highlight><subscript>BL </subscript></highlight>refer to the voltage provided when the bit line is currently acting as a drain. For purposes of clarity herein, when the bit line acts as a source, it is herein referred to as a source. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The present invention further teaches the use of a low programming bit line voltage V<highlight><subscript>BL </subscript></highlight>to produce a tight spatial distribution of trapped charge, thereby resulting in better two-bit separation in the NROM cell, faster erase, and increased product life. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Furthermore, by controlling the bit line voltage V<highlight><subscript>BL</subscript></highlight>, the present invention provides a fast and generally accurate programming algorithm for a large distribution of cells with diverse process variations and programming times. Reference is now made to FIGS. <highlight><bold>8</bold></highlight>A-<highlight><bold>8</bold></highlight>C, a series of graphs that illustrate the effect of the programming bit line voltage V<highlight><subscript>BL </subscript></highlight>on threshold voltage V<highlight><subscript>TH </subscript></highlight>as a function of cell temperature, channel length, and array effects/second bit, respectively. In this graph the reverse read threshold voltage V<highlight><subscript>TR</subscript></highlight>, which is the threshold voltage V<highlight><subscript>TH </subscript></highlight>when the cell is reverse read, is a function of bit line voltage V<highlight><subscript>BL</subscript></highlight>. Every point represents a programming pulse of 2 &mgr;sec in exemplary steps of 0.3V. It is noted that the gate voltage V<highlight><subscript>G </subscript></highlight>is constant at 9V. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The graph in <cross-reference target="DRAWINGS">FIG. 8A</cross-reference> illustrates 3 programming curves for three varying cell temperatures: curve <highlight><bold>202</bold></highlight> denotes a cell at &minus;40&deg; C., curve <highlight><bold>204</bold></highlight>&mdash;a cell at 20&deg; C., and curve <highlight><bold>206</bold></highlight>&mdash;a cell at 80&deg; C. As seen in the figure, in order to achieve a specific threshold voltage V<highlight><subscript>TH</subscript></highlight>, each cell receives a different drain voltage V<highlight><subscript>D</subscript></highlight>, depending on the temperature of that specific cell. As an example, to achieve a desired threshold voltage V<highlight><subscript>TH </subscript></highlight>of approximately 4V, the low temperature case (curve <highlight><bold>202</bold></highlight>) receives a bit line voltage V<highlight><subscript>BL </subscript></highlight>of approximately 4.1V, while the high temperature case (curve <highlight><bold>206</bold></highlight>) must receive a bit line voltage V<highlight><subscript>BL </subscript></highlight>potential of 5V to reach the same desired threshold voltage V<highlight><subscript>TH </subscript></highlight>level. Accordingly, in a preferred embodiment, the bit line voltage V<highlight><subscript>BL </subscript></highlight>is incrementally increased from a minimum voltage to a higher voltage, thus covering a wide range of operating temperatures. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> When a cell has reached the desired threshold voltage V<highlight><subscript>TH</subscript></highlight>, such as 4V, the programming algorithm for that cell is terminated. Meanwhile, for cells which have not yet reached the desired threshold voltage, the bit line voltage V<highlight><subscript>BL </subscript></highlight>is incrementally increased, until those cells have reached their desired level. Thus, referring to the example above, when operating at a low temperature (curve <highlight><bold>202</bold></highlight>), the cell will complete programming at a bit line voltage V<highlight><subscript>BL </subscript></highlight>of 4.3V, while if operating at high temperatures (curve <highlight><bold>206</bold></highlight>), the cell will complete programming at a bit line voltage V<highlight><subscript>BL </subscript></highlight>of approximately 5V. It is noted that for curves <highlight><bold>202</bold></highlight> and <highlight><bold>206</bold></highlight>, the bit line voltages V<highlight><subscript>BL </subscript></highlight>of 4.3V and 5V, respectively, are the first bit line voltage levels that result in a threshold voltage V<highlight><subscript>TH </subscript></highlight>higher than the exemplary target of 4V. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> It is also apparent from <cross-reference target="DRAWINGS">FIG. 8A</cross-reference> that the chosen step size for the bit line voltage V<highlight><subscript>BL </subscript></highlight>affects the size of the maximum overshoot (over-programming) of the threshold voltage V<highlight><subscript>TH</subscript></highlight>. In order to achieve a very accurate bit line voltage V<highlight><subscript>BL </subscript></highlight>rise, it is preferable that the step size is relatively small. Thus to achieve the programming level, the resultant algorithm requires many programming steps and may result in extended programming times. Conversely, a large voltage step results in quicker programming times; however, opens up to the risk of a large overshoot. The practical step size is a compromise between the requirements for quick programming speed and limited overshoot. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> It is noted that, when observing the section of the graph commencing at a bit line voltage V<highlight><subscript>BL </subscript></highlight>of 3V, although the absolute rise of the curves may differ, the slopes of the curves are essentially equivalent, and approximately linear. Consequently, for each step in the bit line voltage V<highlight><subscript>BL</subscript></highlight>, there is an equivalent step in the threshold voltage V<highlight><subscript>TH</subscript></highlight>, regardless of the temperature of the cell. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Thus, for a known incremental increase in drain voltage V<highlight><subscript>D</subscript></highlight>, it is possible to gauge the incremental increase in threshold voltage V<highlight><subscript>TH</subscript></highlight>. Knowing this information allows for more precise programming abilities and a greater protection against over-programming, with all the detrimental affects associated therewith. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8B</cross-reference> is comparable to the graph of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>A and depicts the effect of the bit line voltage V<highlight><subscript>BL </subscript></highlight>on the reverse read threshold voltage V<highlight><subscript>TH </subscript></highlight>as a function of a channel length of 0.6 &mgr;m, 0.65 &mgr;m and 0.7 &mgr;m respectively, for curves <highlight><bold>212</bold></highlight>, <highlight><bold>214</bold></highlight>, and <highlight><bold>216</bold></highlight>, respectfully. <cross-reference target="DRAWINGS">FIG. 8C</cross-reference> depicts the effect of the bit line voltage V<highlight><subscript>BL </subscript></highlight>on the reverse read threshold voltage V<highlight><subscript>TH </subscript></highlight>as a function of the location of a cell along a 32 bit long local diffusion bit-line segment and a comparison between the 1<highlight><superscript>st </superscript></highlight>and 2<highlight><superscript>nd </superscript></highlight>bit of the same cell. The fastest bit is bit <highlight><bold>1</bold></highlight> of word-line <highlight><bold>16</bold></highlight> and the slowest is bit <highlight><bold>2</bold></highlight> on word-lines <highlight><bold>32</bold></highlight> and <highlight><bold>2</bold></highlight>. In order to reach a threshold voltage V<highlight><subscript>TH </subscript></highlight>of 3.5V, the fastest bit receives a bit line voltage V<highlight><subscript>BL </subscript></highlight>equal to approximately 5.8V, and the slowest receives approximately 7V. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> As was noted in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>A, and bringing attention to a similar phenomenon in <cross-reference target="DRAWINGS">FIGS. 8B and 8C</cross-reference>, although the characteristics of the represented cells differ, the programming slope is generally equivalent and generally linear. Hence, the explanation as outline above for <cross-reference target="DRAWINGS">FIG. 8A</cross-reference> is also applicable to these figures, and the conclusions drawn for <cross-reference target="DRAWINGS">FIG. 8A</cross-reference> are also applicable to <cross-reference target="DRAWINGS">FIGS. 8B and 8C</cross-reference>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Consequently, for an array of cells with a wide divergence of process and/or environmental conditions, by stepping the bit line voltage V<highlight><subscript>BL</subscript></highlight>, it is possible to achieve a controlled programming algorithm with an accurate prediction of the delta threshold voltage V<highlight><subscript>TH </subscript></highlight>rise. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Although it is possible to cover a diverse range of programming variations by stepping the gate voltage V<highlight><subscript>G</subscript></highlight>, as was done in prior art floating gate algorithms, in NROM cells, drain voltage V<highlight><subscript>D </subscript></highlight>stepping is more efficient. Reference is now made to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> graph illustrating the programming time of an exemplary cell (channel length&equals;0.65 &mgr;m, temperature&equals;20&deg; C.) as a function of either drain voltage V<highlight><subscript>D </subscript></highlight>or gate voltage V<highlight><subscript>G</subscript></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> When programming with a constant gate voltage V<highlight><subscript>G </subscript></highlight>and a stepped drain voltage V<highlight><subscript>D </subscript></highlight>between 4.5V to 5.5V, the resultant programming times range from of 100 &mgr;sec down to 0.8 &mgr;sec, respectively. However, in order to achieve approximately the same programming time range with a constant drain voltage V<highlight><subscript>D</subscript></highlight>, the gate voltage must be stepped from 8V to 11.5V. Thus, in the NROM cell, in order to cover an equivalent range of programming times, a 1V step in drain voltage V<highlight><subscript>D </subscript></highlight>is equivalent to a 3.5V step in gate voltage V<highlight><subscript>G</subscript></highlight>. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> As further noted and depicted in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, when stepping the gate voltage V<highlight><subscript>G</subscript></highlight>, in order to catch the fast programming cells without risking over-programming, the resultant programming algorithm must commence with a low potential for the gate voltage V<highlight><subscript>G</subscript></highlight>. This, however, is undesirable since it causes programming to be slow. Hence, in order to increase the programming speed, the low gate voltage V<highlight><subscript>G </subscript></highlight>must be paired with high drain voltages V<highlight><subscript>D</subscript></highlight>. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Nonetheless, as noted in the previous sections, high drain voltages V<highlight><subscript>D </subscript></highlight>promotes cell degradation and decreased cycling ability. Unequivocally, high drain voltages V<highlight><subscript>D </subscript></highlight>in combination with low gate voltages V<highlight><subscript>G </subscript></highlight>are even more detrimental to the cell, producing very large lateral fields and wide pinch-off regions, yielding an extensive trapped charge region. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In contrast, in the present invention, in order to capture the fast programmers, the inventive programming algorithm commences with a low drain voltage V<highlight><subscript>D</subscript></highlight>, and a high gate voltage V<highlight><subscript>G</subscript></highlight>. This is favorable since applying a high programming gate voltage V<highlight><subscript>G </subscript></highlight>and a low drain voltage V<highlight><subscript>D </subscript></highlight>imposes a large vertical field and a narrow pinch-off regime, thus resulting in a narrower trapped electron pocket. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> In order to explain the present invention in more detail, reference is now made again to <cross-reference target="DRAWINGS">FIGS. 2A and 7</cross-reference>. As noted above (<cross-reference target="DRAWINGS">FIG. 2A</cross-reference>), in NROM cells the charge is trapped in a localized region and the read process is a reverse read. As such, the programming current I<highlight><subscript>PR </subscript></highlight>is generally insensitive to the rise in threshold voltage V<highlight><subscript>TH</subscript></highlight>, and remains constant even during programming. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The programming current is fixed during programming since the cell is programmed in the forward direction, which causes the charge to be trapped next to the drain. Hence, during reading, there is full punch-through under the localized charge. Additionally, for each increase in the threshold voltage V<highlight><subscript>TH</subscript></highlight>, the charge is punched through at a greater distance from the junction. </paragraph>
<paragraph lvl="0"><in-line-formula>Hence, &Dgr;<highlight><italic>V</italic></highlight><highlight><subscript>DS</subscript></highlight><highlight><italic>&equals;&agr;&Dgr;V</italic></highlight><highlight><subscript>TH</subscript></highlight><highlight><italic>&equals;V</italic></highlight><highlight><subscript>BL</subscript></highlight><highlight><italic>&minus;V</italic></highlight><highlight><subscript>BL-S</subscript></highlight>&emsp;&emsp;(1) </in-line-formula></paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> where V<highlight><subscript>BL-S </subscript></highlight>is the bit line voltage for the source and is constant, and </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> &agr; is a constant proportionally between 0.5 and 2, and is affected by parameters such as channel length, gate voltage V<highlight><subscript>G</subscript></highlight>, temperature, and location of the cell in the array. Referring now to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the IR loss equation that defines the circuit depicted therein is: </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>V</italic></highlight><highlight><subscript>PPS</subscript></highlight><highlight><italic>&equals;V</italic></highlight><highlight><subscript>DS</subscript></highlight><highlight><italic>&plus;V</italic></highlight><highlight><subscript>DS-SEL</subscript></highlight>&plus;(<highlight><italic>R</italic></highlight><highlight><subscript>1</subscript></highlight><highlight><italic>&plus;R</italic></highlight><highlight><subscript>2</subscript></highlight>)*<highlight><italic>I</italic></highlight><highlight><subscript>PR</subscript></highlight>&emsp;&emsp;(2) </in-line-formula></paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Since the programming current I<highlight><subscript>PR </subscript></highlight>is constant, then the IR losses across V<highlight><subscript>DS-SEL</subscript></highlight>, I<highlight><subscript>PR </subscript></highlight>and R<highlight><bold>1</bold></highlight> and R<highlight><bold>2</bold></highlight> are also constant. Consequently, the only remaining non-constant factor is the channel voltage V<highlight><subscript>DS</subscript></highlight>. Thus </paragraph>
<paragraph lvl="0"><in-line-formula>&Dgr;<highlight><italic>V</italic></highlight><highlight><subscript>PS</subscript></highlight><highlight><italic>&equals;&agr;&Dgr;V</italic></highlight><highlight><subscript>DS</subscript></highlight>&emsp;&emsp;(3) </in-line-formula></paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Thus, since V<highlight><subscript>BL2 </subscript></highlight>is constant, when combining equations (1) and (3) </paragraph>
<paragraph lvl="0"><in-line-formula>&Dgr;<highlight><italic>V</italic></highlight><highlight><subscript>PPS</subscript></highlight><highlight><italic>&cong;&Dgr;V</italic></highlight><highlight><subscript>BL</subscript></highlight><highlight><italic>&equals;&agr;&Dgr;V</italic></highlight><highlight><subscript>TH</subscript></highlight>&emsp;&emsp;(4) </in-line-formula></paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> or, since V<highlight><subscript>BL </subscript></highlight>is equivalent to V<highlight><subscript>D </subscript></highlight></paragraph>
<paragraph lvl="0"><in-line-formula>&Dgr;V<highlight><subscript>D</subscript></highlight><highlight><italic>&equals;&agr;&Dgr;V</italic></highlight><highlight><subscript>TH</subscript></highlight>&emsp;&emsp;(5) </in-line-formula></paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Evidence to such can also be seen when observing the linear sections of FIGS. <highlight><bold>8</bold></highlight>A-<highlight><bold>8</bold></highlight>C, and as explained hereinabove in reference to those graphs. Consequently, when considering this linear relationship, applicants have concluded that closely controlling the drain voltage V<highlight><subscript>D </subscript></highlight>produces a known change in the threshold voltage V<highlight><subscript>TH</subscript></highlight>, and thus the programming algorithm of the present invention provides precise control over the programming procedure, including preventing over-programming. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> graph illustrating the rise in threshold voltage V<highlight><subscript>TH</subscript></highlight>, as a function of time, with the bit line voltage V<highlight><subscript>BL </subscript></highlight>as a parameter. Depicted in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is the resulting threshold voltage V<highlight><subscript>TH </subscript></highlight>for 4 exemplary drain voltages of 5V, 5.25V, 5.5V and 5.75 V, respectively. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> As can be observed in all of the curves, the threshold voltage V<highlight><subscript>TH </subscript></highlight>rises quickly at the start of the curve, and then reaches a point where the increase in threshold voltage V<highlight><subscript>TH </subscript></highlight>is saturated. The flatter region of the curve, to the right of dashed line <highlight><bold>232</bold></highlight>, illustrates the region wherein the cell programming has saturated and subsequent programming pulses have a limited affect on the cell. Once saturated, most of the rise in threshold voltage V<highlight><subscript>TH </subscript></highlight>is due to an undesirable injection of remote electrons from non-primary mechanisms. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Therefore, in order to maintain an efficient increase in the threshold voltage V<highlight><subscript>TH</subscript></highlight>, and in order to create a pocket of trapped charge close to the drain, it is preferable to remain in the part of the graph (to the left of line <highlight><bold>232</bold></highlight>) where the threshold voltage rise is steep. With stepping of bit line voltage V<highlight><subscript>BL</subscript></highlight>, it is possible to remain in the steep slope area (left of line <highlight><bold>232</bold></highlight>). </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> As an example, when stepping in increments from the designated points <highlight><bold>234</bold></highlight> to <highlight><bold>236</bold></highlight>, to <highlight><bold>238</bold></highlight>, and to <highlight><bold>240</bold></highlight>, it is possible to achieve equivalent increases in the threshold voltage V<highlight><subscript>TH</subscript></highlight>. When observing <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, it is possible to note that in the range of points <highlight><bold>234</bold></highlight>-<highlight><bold>240</bold></highlight>, for each 0.25V increase in the bit line voltage V<highlight><subscript>BL</subscript></highlight>, there is a 0.15V increase in the threshold voltage V<highlight><subscript>TH</subscript></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> It is therefore noted that, according to a preferred embodiment of the present invention, a progressively increasing drain voltage V<highlight><subscript>D </subscript></highlight>causes the threshold voltage V<highlight><subscript>TH </subscript></highlight>to climb along the steep slope of the programming function, and produces a more efficient and quicker programming algorithm. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIGS. 11A, 11B</cross-reference> and <highlight><bold>11</bold></highlight>C a series of timing diagrams of a programming algorithm for NROM cells, constructed and operated in accordance with a preferred embodiment of the present invention. Although FIGS. <highlight><bold>11</bold></highlight>A-<highlight><bold>11</bold></highlight>C illustrate only a limited number of pulses, it is apparent that a typical programming algorithm comprises numerous pulses and still complies with the principles of the present invention. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> FIGS. <highlight><bold>11</bold></highlight>A-<highlight><bold>11</bold></highlight>C depict a programming algorithm utilizing gate voltage V<highlight><subscript>G</subscript></highlight>, drain voltage V<highlight><subscript>D</subscript></highlight>, and source voltage V<highlight><subscript>S</subscript></highlight>, respectively. The algorithm additionally comprises a series of alternating programming and program verify pulses. The first pulse is a programming pulse and is designated as A. The second pulse is a program verify pulse and is designated as B, and so on. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The sequence of programming and program verify pulses A, B, C, etc. are repeatedly applied to an array of NROM cells. Once the threshold voltage V<highlight><subscript>TH </subscript></highlight>of an applicable cell has reached a desired level, the programming algorithm is terminated for that specific cell. The programming algorithm proceeds until each cell has reached the desired level, at which point the algorithm is terminated. Preferably the algorithm is applied on a bit by bit basis for either a byte, or word. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> With each progressive programming pulse, from A to C to E, the level of the drain voltage V<highlight><subscript>D </subscript></highlight>increases. Typically, the voltage steps are evenly incremented from progressive drain voltage V<highlight><subscript>D </subscript></highlight>pulse to pulse, i.e. at fixed increments of 0.25V, or any other desired increment. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Alternatively, in order to customize the algorithm for diverse programming times, and as a means to improve programming speed, the present method teaches unevenly incremented voltage steps, i.e. with smaller incremented steps at the start of the algorithm and larger steps as the algorithm progresses. In this manner, the incremented steps directed to the &ldquo;fast&rdquo; programmers are smaller than the incremented steps for the &ldquo;slow&rdquo; programmers. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> The explanation for such is as follows: When a cell commences programming, its threshold voltage V<highlight><subscript>TH </subscript></highlight>is relatively low. With the application of each progressive programming pulse, the threshold voltage V<highlight><subscript>TH </subscript></highlight>of the cell increases. Each time the threshold voltage V<highlight><subscript>TH </subscript></highlight>increases, a higher programming pulse is needed to force punch-through of electrons. Hence, at the start of the programming algorithm, when the threshold voltage V<highlight><subscript>TH </subscript></highlight>is low, smaller incremental jumps are sufficient to induce punch-through. However, farther into the algorithm, when the threshold voltage V<highlight><subscript>TH </subscript></highlight>is higher, larger steps are needed to produce the punch-through effect. Consequently, by varying the incremental size of the voltage step increases, i.e. with small steps at the beginning when the threshold barrier is still low, and with larger steps when the barrier is higher, it is possible to provide more precise control over the programming algorithm. See for example <cross-reference target="DRAWINGS">FIG. 8</cross-reference>A, wherein the slope is shallower for the hot temperature cells than for the cooler temperature cells. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> According to a preferred embodiment of the present invention, when programming an NROM cell, the gate voltage V<highlight><subscript>G </subscript></highlight>is high and constant, (e.g. 10V) and the drain voltage V<highlight><subscript>D </subscript></highlight>is as low as possible, resulting in a narrow spatial distribution of trapped charge. Preferably, the initial bit line voltage V<highlight><subscript>D </subscript></highlight>is approximately 4V. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> When programming with a low initial bit line voltage V<highlight><subscript>D</subscript></highlight>, the resultant spatial distribution of the trapped charge <highlight><bold>24</bold></highlight> is closer to the diffusion area, which also facilitates effective erasure and increased life cycles. It is additionally noted that, due to the tighter spatial distribution of trapped charge, the present invention produces better two-bit separation and enables better distinction between the two bits during read. Furthermore, a smaller tail of trapped charge results in less erase time and voltage. This in turn, improves retention since less erase stress creates less trapped holes in the nitride. Less trapped holes improves the retention since there is less trapped movement at the high temperature back. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> It is noted that the final step of the drain voltage V<highlight><subscript>D </subscript></highlight>stops at a level that is just sufficient to reach the desired threshold voltage V<highlight><subscript>TH</subscript></highlight>, thus avoiding any unnecessary extra pulses of the drain voltage V<highlight><subscript>D </subscript></highlight>which might create secondary electron injections far from the junction, imposing the unwanted tail <highlight><bold>44</bold></highlight>. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Frequently, due to architecture density, the applied source voltage V<highlight><subscript>S </subscript></highlight>is not necessarily ground or 0V. However, in order to provide a tight distribution of charge, it is preferable that source voltage V<highlight><subscript>S </subscript></highlight>be as close to 0V as possible, and preferably less than 0.5V. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The present invention includes adapting the programming and erasure methods of an array to its particular circumstances. For example, the speed of programming and erasure of a bit is a function of how it is manufactured, the current operating temperature, the power supply, the peripheral circuitry and, if there are two bits in the memory cell, the programmed state of the other bit. Having a programming and/or erasure method that is adaptable enables the memory array to be programmed and/or erased quickly in most circumstances, no matter how the operating and environmental conditions vary. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> The present invention presents two types of adaptations, one of the initial programming or erasure level and the other of the program or erasure step. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In some instances, it may be known that all of the cells are &ldquo;slow&rdquo; to program. Usually, this means that the initial program steps are not effective. In accordance with a preferred embodiment of the present invention, it is possible to dial-in a higher initial drain voltage V<highlight><subscript>D </subscript></highlight>pulse A). As an example, and referring again to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>B, for cells with a longer than average channel length_dimension (curve <highlight><bold>216</bold></highlight>), the initial dialed-in drain voltage V<highlight><subscript>D </subscript></highlight>might be 4V, while for the cells with shorter channel lengths (curve <highlight><bold>212</bold></highlight>), the dial in drain voltage V<highlight><subscript>D </subscript></highlight>would be 3.1V. In such a manner, for the cells on curve <highlight><bold>216</bold></highlight>, the first few ineffective pulses between 3.1V and 4V are eliminated, and the programming time is shortened. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The dial-in level is determined from the response of the bits of the array, as described hereinbelow, and thus, is adapted to the particular array. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, which illustrates the method, using the dial-in procedure, to determine the highest possible, initial programming level for the memory array. This method is generally performed once per array, as part of a sort or a test part of the manufacturing process, although it can be performed at other times as well. Reference is also made to <cross-reference target="DRAWINGS">FIGS. 13A, 13B</cross-reference> and <highlight><bold>13</bold></highlight>C, which are useful in understanding the method of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> A representative portion of the array is first programmed (step <highlight><bold>300</bold></highlight>), where &ldquo;programmed&rdquo; means that the threshold voltage of each cell is above a predetermined &ldquo;program verify&rdquo; level. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The representative portion should include enough bits to cover the expected variation in programming responses. For example, the portion can include a few bytes. If there are more than one bit per cell, the portion should include a selection of each type of bit. The portion should also include cells in different locations within a block and/or column of cells, since the paths to such, from the power supplies, are different and each path has a different resistance level. The cells of the representative portion may be chosen according to known array effects and to sensitive manufacturing areas in the array. Which cells are chosen is typically determined empirically. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> The bit line voltage V<highlight><subscript>BL </subscript></highlight>at which each bit in the representative portion became programmed is registered and the bit line voltage V<highlight><subscript>BL1 </subscript></highlight>of the fastest bit of the group is stored (step <highlight><bold>302</bold></highlight>). <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> graphs the bit line voltage V<highlight><subscript>BL </subscript></highlight>(in number of steps) and the number of bits that became programmed at that level. In the example of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>A, two bits became programmed at level 6, five at level 7, eight at level 8 and 4 at level 9. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Level 6 is the lowest programming level and is thus, the bit line voltage V<highlight><subscript>BL1 </subscript></highlight>of the fastest bits (i.e. the bits programmed in six, rather than seven, eight or nine, steps). Thus, as Applicants have realized, all bits of the representative portion could begin the programming procedure at level 6. In such a case, the fastest bits would be programmed in one step while the others would be programmed in two, three or four steps. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> Since the portion was only a representative portion and the array could include bits that program even faster, in step <highlight><bold>304</bold></highlight>, the dial-in level DI is set to X levels lower than the fastest bit line voltage V<highlight><subscript>BL1</subscript></highlight>, where X can be any reasonable margin, such as two or three levels. <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> shows (with arrow <highlight><bold>306</bold></highlight>) setting the dial-in level DI to two levels lower than the stored bit line voltage V<highlight><subscript>BL1</subscript></highlight>. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> The rest of the array is now programmed (step <highlight><bold>308</bold></highlight>), starting at the dial-in level DI. <cross-reference target="DRAWINGS">FIGS. 13B, 13C</cross-reference>, <highlight><bold>13</bold></highlight>D and <highlight><bold>13</bold></highlight>E show four possible results. Since, in the four figures, the programming procedure begins at the dial-in level (the fourth original programming level), the first programming level in FIGS. <highlight><bold>13</bold></highlight>B-<highlight><bold>13</bold></highlight>E is aligned with the fourth programming level of <cross-reference target="DRAWINGS">FIG. 13A</cross-reference>. For all figures, the new bit line voltage V<highlight><subscript>BL2 </subscript></highlight>of the fastest bit is found in step <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 13</cross-reference>B, the fastest bits are as fast as the fastest ones in the representative portion and thus, program at the third programming level (which is equivalent to the old sixth programming level). In <cross-reference target="DRAWINGS">FIG. 13C</cross-reference> the fastest bits program in two steps, and thus, are faster than those in the representative portion. In both cases, the dial-in level DI is changed (step <highlight><bold>312</bold></highlight>) to the fastest bit line voltage V<highlight><subscript>BL2</subscript></highlight>. In <cross-reference target="DRAWINGS">FIG. 13</cross-reference>D, however, the fastest level is above the third programming level (as checked in step <highlight><bold>314</bold></highlight>), meaning that the fastest bits in the remainder of the array are slower than those of the representative portion. In this case, the dial-in level DI is kept at the first fast programming level, V<highlight><subscript>BL1. </subscript></highlight></paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 13</cross-reference>E, the fastest programming level is the first one. This situation is inconclusive. It is possible that the fastest bit can program at an even lower programming level. The system now has a choice (steps <highlight><bold>314</bold></highlight> and <highlight><bold>315</bold></highlight>); it can set the dial-in level DI to his first programming level, it can repeat the whole process from step <highlight><bold>304</bold></highlight>, setting the preliminary dial-in level DI to lower than this level was previously, or it can decide to fail the part. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> For the remaining situations (i.e. all but that of <cross-reference target="DRAWINGS">FIG. 13E</cross-reference>), the dial-in level DI is modified (step <highlight><bold>312</bold></highlight>) to the either V<highlight><subscript>BL1 </subscript></highlight>or V<highlight><subscript>BL2</subscript></highlight>, whichever is lowest. If desired, DI may be set to a lower level since the conditions during the test are not likely to match the expected conditions of operation. For example, the test may be performed at a fixed temperature while the product may be operated at lower or higher temperatures. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 13B, 13C</cross-reference> and <highlight><bold>13</bold></highlight>D show that, by beginning the programming levels at a higher level than that of the original of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>A, the number of programming steps and thus, the programming time, is reduced. It should be noted that the first original steps cannot be omitted since, in some cases, the dial-in level DI may fall on the initial steps. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> In step <highlight><bold>313</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>), the dial-in level DI is set to Y levels lower than the level set in step <highlight><bold>312</bold></highlight>, where Y can be any reasonable margin to accommodate for temperature and cycling. For example, Y can be one or two levels below the value found in step <highlight><bold>312</bold></highlight>. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> It will be appreciated that other methods of finding an initial dial-in level which ensure that the first programming level is close to the programming level of the fastest bit of the array are possible and are incorporated into the present invention. For example, the entire array can be programmed and the fastest programming level chosen. Alternatively, a two stage method such as described above can be performed but the second stage can be performed on the entire array rather than all but the representative portion. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Furthermore, the operation described hereinabove can be performed at other times during the life of the array, such as when so instructed by a user or by automatic built-in procedures. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Finally, occasionally it might be desired to determine the dial-in level DI quickly or roughly. In this case, only the representative portion is utilized and the dial-in level DI is set to the first fastest programming level V<highlight><subscript>BL1 </subscript></highlight>or, if desired, even higher. This choice may be adequate if fast programming is required. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> It will be appreciated that the method of changing the dial-in level generally improves yield since the initial programming pulses that hardly change the state of the bits are eliminated. Each programming pulse above the dial-in level is generally more effective and thus, most of the bits will not fail to program (a cause of reduced yield). </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> It will be appreciated that the method of changing the dial-in level, described hereinabove for programming, may also be utilized for erasing. Reference is now made to <cross-reference target="DRAWINGS">FIGS. 14A and 14B</cross-reference> which, together, illustrate an exemplary method for dial-in for erasure. The basic method is similar to that of programming except that, in erasure, both the gate and the drain voltage levels may be set. This is shown in <cross-reference target="DRAWINGS">FIGS. 14</cross-reference>. Alternatively, only the drain voltage level can be set. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Furthermore, only the representative portion is considered. In one embodiment, the dial-in level DI of the gate or the drain is then set to a voltage level slightly below the voltage level of the slowest bit (to force the erase procedure to perform at least two erase pulses). </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> In step <highlight><bold>320</bold></highlight>, the drain voltage Vppd is set to its lowest level for erasure. In step <highlight><bold>322</bold></highlight>, the gate voltage level is set to the least negative voltage possible for erasure. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> In step <highlight><bold>324</bold></highlight>, one or more representative bytes are programmed and, in step <highlight><bold>326</bold></highlight>, a single erase pulse is provided. An erase verify operation is performed in step <highlight><bold>328</bold></highlight> and the results checked in step <highlight><bold>330</bold></highlight>. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> If all of the bits which were programmed are now fully erased (i.e. the erase is fully verified), then either this occurred after the first loop (i.e. the gate is at its least negative level) or it occurred at some other point. This is checked in step <highlight><bold>331</bold></highlight>. If the erasure occurred after the first loop (through steps <highlight><bold>324</bold></highlight>-<highlight><bold>330</bold></highlight>), then the process was too successful and an error flag is set (step <highlight><bold>333</bold></highlight>). Either the array can then be thrown away or the length of the erase pulse can be shortened and the process repeated. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> If erasure is successful with a somewhat lower gate voltage, the gate voltage level for dial-in is set (step <highlight><bold>332</bold></highlight>), as is the drain voltage Vppd for dial-in (step <highlight><bold>335</bold></highlight>), and the process finishes in step <highlight><bold>354</bold></highlight>. In one embodiment, the gate voltage level for dial-in can be set to one level less negative than the current level. Other embodiments include setting the gate voltage for dial-in to the level found in this process or for setting it to Z levels less negative than the current level. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> If the erase verify (of step <highlight><bold>330</bold></highlight>) was not successful, the gate voltage level is made more negative (step <highlight><bold>334</bold></highlight>). As long as the gate voltage has not reached its most negative level (checked in step <highlight><bold>336</bold></highlight>), the process of steps <highlight><bold>324</bold></highlight> through <highlight><bold>330</bold></highlight> is repeated with the new gate voltage level. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> If the gate voltage has reached its most negative level without successfully erasing all of the programmed bits, then the process continues with steps <highlight><bold>338</bold></highlight>-<highlight><bold>348</bold></highlight> by changing the drain voltage level. The gate level is set at this point to its most negative voltage level. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In step <highlight><bold>338</bold></highlight>, the gate voltage is set to its most negative level. As in the previous section, in step <highlight><bold>340</bold></highlight>, one or more representative bytes are programmed. However, in this section, the drain voltage is raised (step <highlight><bold>342</bold></highlight>), after which, in step <highlight><bold>344</bold></highlight>, a single erase pulse is provided. An erase verify operation is performed in step 346 and the results checked in step <highlight><bold>348</bold></highlight>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> If the all of the bits are now erased, the drain voltage Vppd for dial-in is set (step <highlight><bold>352</bold></highlight>) and the process finished (step <highlight><bold>354</bold></highlight>). As for the gate level, in one embodiment, the drain voltage Vppd for dial-in can be set to one level lower than the current level. Other embodiments include setting the drain voltage for dial-in to the level found in this process or for setting it to Z<highlight><bold>1</bold></highlight> levels lower than the current level. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> If the bits are not yet fully erased, the process of steps <highlight><bold>340</bold></highlight>-<highlight><bold>348</bold></highlight> is repeated until a maximum drain voltage is reached, as checked by step <highlight><bold>350</bold></highlight>. If the maximum drain voltage is reached and the bits have not been erased, then the array cannot be erased in one pulse. An error flag is set (step <highlight><bold>356</bold></highlight>) and the process finished. At this point, the array may either be thrown away, the process of FIGS. <highlight><bold>14</bold></highlight> may be repeated using two or more erase pulses in steps <highlight><bold>326</bold></highlight> and <highlight><bold>344</bold></highlight> or the duration of the erase pulse may be made longer. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> As mentioned hereinabove, the dial-in level may also be determined by changing only the drain voltage Vppd (i.e. steps <highlight><bold>320</bold></highlight>, <highlight><bold>322</bold></highlight> and <highlight><bold>338</bold></highlight>-<highlight><bold>352</bold></highlight>). </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Even with the dial-in level described hereinabove with respect to <cross-reference target="DRAWINGS">FIGS. 12, 13</cross-reference> and <highlight><bold>14</bold></highlight>, some of the bits may still take many programming or erase pulses before becoming programmed or erased, respectively, and the number of pulses needed may vary depending on operating conditions. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> Typically, the bit line programming levels increase in voltage by predetermined amounts. Reference is now made to <cross-reference target="DRAWINGS">FIGS. 15 and 16</cross-reference> which illustrate a further embodiment of the present invention which changes the incremental voltage level of the drain Vppd between pulses in order to program most of the bits in as few programming steps as possible. As described hereinbelow, the incremental voltage level is adapted to the current response of the bit to programming pulse. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Bits respond to programming in different ways. When given a programming pulse, the threshold voltage of some may increase significantly (see arrow <highlight><bold>360</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>) while the threshold voltage of others may only increase slightly (see arrow <highlight><bold>362</bold></highlight>). The former bit requires only one more programming pulse (arrow <highlight><bold>364</bold></highlight>) until it becomes programmed (i.e. until its threshold voltage is larger than a &ldquo;program verify&rdquo; voltage level). The latter type of bit must have multiple programming pulses (labeled 1-8) until it becomes programmed. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> A bit that takes a significant number of programming pulses takes a long time to program and may limit the overall product performance. Applicants have realized that, if the threshold voltage level after a programming pulse is measured, it is possible to adjust the voltage level increment of the next programming pulse to move the threshold level toward the program verify level more quickly. This is illustrated in <cross-reference target="DRAWINGS">FIG. 16</cross-reference> in which multiple verify levels, labeled verify 1, verify 2, verify 3 and verify 4, are shown. It will be appreciated that the present invention includes having multiple verify levels and that the four levels are shown for purposes of clarity only. The number of verify levels is a design choice and any number greater than one is included in the present invention. It will also be appreciated that existing reference levels in the array can be used to provide the multiple verify levels. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> During the program verify operation, after a programming pulse, the threshold voltage level of the bit is compared to five voltage levels, that of verify 1, verify 2, verify 3, verify 4 and program verify to determine how close to fully programmed the bit is. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Consider the two bits shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference> (the first one with solid lines and the second one with dashed lines). In the first example, the first programming pulse brings the threshold voltage level of the first bit almost to the verify 3 level (this pulse is labeled 370A). The output of the comparisons will be that the threshold voltage level is above the verify 1 and verify 2 levels but not above the verify 3, verify 4 and program verity levels. The threshold level of the bit is thus above the verify 2 level. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> For the second bit, the first programming pulse (here labeled 370B) brings the threshold voltage level to above the verify 1 level. Only the verify 1 comparison will indicate that the threshold level is above it; all the remaining comparisons will be that the threshold level of the bit is below the comparison level. Thus, the threshold level for the second exemplary bit is above the verify 1 level. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> It will be appreciated that the comparison operations can be performed together or serially. If performed serially, from the program verify level down to the verify I level, then the comparison operation ends once the threshold level of the bit is above the current comparison level. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> Typically, a group of bits, such as a byte, are programmed together. The verify operation described hereinabove is performed for the group of bits and the bit having the highest verify level is then used to determine the size of the next programming pulse. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> Each verify level has a different voltage level increment associated therewith, depending on how far away the verify level is from the program verify level. The closer the verify level is to the program verify level, the smaller the increment to the drain voltage Vppd. The size of the increment depends on the average transfer function between the change &Dgr;V<highlight><subscript>PPD </subscript></highlight>in bit line voltage and the resultant change &Dgr;V<highlight><subscript>T </subscript></highlight>in threshold level and is typically determined by experimentation. In addition to depending on the change &Dgr;V<highlight><subscript>PPD</subscript></highlight>, it can also depend on the level of the bit line voltage itself. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> In one example, the verify 4 level is 250 mV less than the program verify level. For this example, the increment in bit line voltage level, &Dgr;V<highlight><subscript>PPD</subscript></highlight>, for a bit which is above the verify 4 level but below the program verify level is be about 300 mV. Table 1 gives an example of voltage levels for the verify levels and their associated incremental voltage levels for the example of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="84PT" align="center"/>
<colspec colname="2" colwidth="63PT" align="center"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>How much the reference</entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry>level is less than the</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="84PT" align="center"/>
<colspec colname="3" colwidth="63PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Verify Name</entry>
<entry>program verify Level (mV)</entry>
<entry>&Dgr;V<highlight><subscript>PPD </subscript></highlight>(mV)</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="84PT" align="char" char="."/>
<colspec colname="3" colwidth="63PT" align="char" char="."/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Program Verify</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry></entry>
<entry>Verify 4</entry>
<entry>&minus;250</entry>
<entry>300</entry>
</row>
<row>
<entry></entry>
<entry>Verify 3</entry>
<entry>&minus;500</entry>
<entry>600</entry>
</row>
<row>
<entry></entry>
<entry>Verify 2</entry>
<entry>&minus;750</entry>
<entry>900</entry>
</row>
<row>
<entry></entry>
<entry>Verify 1</entry>
<entry>&minus;1000</entry>
<entry>1200</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> It will be appreciated that the size of the increment is a tradeoff. If the minimum number of programming pulses is required, then the increment should be designed to bring a bit to fully programmed from whatever threshold voltage level it is at. Alternatively, if a minimum amount of overprogramming is desired, then the increment should be designed to bring a bit to just under the program verify level. The latter method requires that a further small increment programming pulse be performed in order to bring the bit above the program verify level. However, the latter method generally will not overprogram the bits. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The process is repeated until one or more bits are fully programmed, at which point they no longer receive programming pulses. The bit with the next highest threshold level defines the increment for the next programming pulse. <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows this process. The first programming pulse <highlight><bold>370</bold></highlight> brought the first bit to above the verify 2 level, so the voltage level of the second programming pulse <highlight><bold>374</bold></highlight> is set to be large enough to bring the first bit to the program verify level. In this case, the second pulse was not quite large enough (arrow <highlight><bold>374</bold></highlight>A does not quite reach the program verify level) and a third pulse <highlight><bold>376</bold></highlight> was necessary (arrow <highlight><bold>376</bold></highlight>A is above the program verify level). </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> For the second bit, second pulse <highlight><bold>374</bold></highlight> brings the threshold level above the verify 3 level (arrow <highlight><bold>374</bold></highlight>B) and the third pulse brings the threshold level above the verify 4 level (arrow <highlight><bold>376</bold></highlight>B). At this point, the second bit is the highest bit and its verify 4 level defines the increment for the fourth programming pulse, labeled <highlight><bold>378</bold></highlight>, after which the second bit is fully programmed. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> It will be appreciated that the present invention can also be utilized for erasure, as shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, to which reference is now made. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> Reference is now made to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, which illustrates an exemplary method for multiple pulse erasure. In step <highlight><bold>380</bold></highlight>, the block to be erased is read and, in step <highlight><bold>382</bold></highlight>, its erase state is checked. If all of the bits of the block are erased already, the process is finished (step <highlight><bold>404</bold></highlight>). </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> If the block requires further erasure, an erase pulse is provided (step <highlight><bold>384</bold></highlight>), typically with predefined gate and drain voltages, such as those defined in the dial-in process of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Other predefined gate and drain voltages are also possible. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> In steps <highlight><bold>386</bold></highlight>-<highlight><bold>394</bold></highlight>, the read level is decreased from the program verify level (i.e. the level of fully programmed bits) towards the erase verify level (i.e. fully erased) to determine how much erasure has occurred and how much more needs to occur. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> Specifically, in step <highlight><bold>386</bold></highlight>, the read voltage level is set to the program verify (PV) level and the block is read (step <highlight><bold>388</bold></highlight>). If all of the bits of the block pass the read operation, as checked in step <highlight><bold>390</bold></highlight>, the read voltage level is reduced (step <highlight><bold>394</bold></highlight>) as long as it has not yet reached the erase verify level (as checked in step <highlight><bold>392</bold></highlight>). </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> If the read operation is successful at the erase verify level, then the block has been fully erased and the process finishes in step <highlight><bold>404</bold></highlight>. However, if the read operation fails at some point, the drain voltage level Vppd is increased (step <highlight><bold>396</bold></highlight>), for example, according to Table 2, another erase pulse is provided (step <highlight><bold>400</bold></highlight>) using the new drain voltage level Vppd and the process is repeated from step <highlight><bold>386</bold></highlight>. Step <highlight><bold>398</bold></highlight> checks that the number of erase pulses has not exceeded a maximum. If it has, then an error flag is set (step <highlight><bold>402</bold></highlight>) and the process is stopped (step <highlight><bold>404</bold></highlight>).  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="70PT" align="left"/>
<colspec colname="1" colwidth="84PT" align="center"/>
<colspec colname="2" colwidth="63PT" align="center"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center">TABLE 2</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>Reference Level above the</entry>
<entry></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="84PT" align="center"/>
<colspec colname="3" colwidth="63PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Verify Name</entry>
<entry>Erase Verify Level (mV)</entry>
<entry>&Dgr;V<highlight><subscript>PPD </subscript></highlight>(mV)</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="56PT" align="left"/>
<colspec colname="2" colwidth="84PT" align="char" char="."/>
<colspec colname="3" colwidth="63PT" align="char" char="."/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Program Verify</entry>
<entry>950</entry>
<entry>&plus;1000</entry>
</row>
<row>
<entry></entry>
<entry>Verify 2</entry>
<entry>700</entry>
<entry>&plus;750</entry>
</row>
<row>
<entry></entry>
<entry>Verify 1</entry>
<entry>400</entry>
<entry>&plus;500</entry>
</row>
<row>
<entry></entry>
<entry>Erase Verify</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> It is noted that Table 2 has only four verify levels while Table 1, for programming, has five very levels. The number of verify levels are set by a designer according to any appropriate set of design considerations. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> The methods and apparatus disclosed herein have been described without reference to specific hardware or software. Rather, the methods and apparatus have been described in a manner sufficient to enable persons of ordinary skill in the art to readily adapt commercially available hardware and software as may be needed to reduce any of the embodiments of the present invention to practice without undue experimentation and using conventional techniques. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> It will be appreciated by persons skilled in the art that the present invention is not limited by what has been particularly shown and described herein above. Rather the scope of the invention is defined by the claims that follow: </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for erasing a memory array, the method using erase pulses, the method comprising the step of: 
<claim-text>adapting said erase pulses to the current state of said memory array. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said step of adapting includes the steps of: 
<claim-text>determining erase conditions of the erase pulse used to erase a representative portion of said memory array; and </claim-text>
<claim-text>setting initial erase conditions of said memory array to the general vicinity of said erase conditions of said representative portion. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> and wherein said step of adapting includes the steps of: 
<claim-text>measuring the current threshold level of a bit to within a predetermined range; and </claim-text>
<claim-text>selecting an incremental voltage level of a next erase pulse for said bit in accordance with said measured current threshold level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> and wherein said step of measuring includes the step of having multiple verify levels for said array. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> and wherein said step of measuring also includes the step of after an erase pulse, comparing a threshold level of a group of bits which have received said erase pulse to at least one of said verify levels and said step of selecting includes the step of selecting a next erase pulse level according to generally the lowest verify level achieved by said group. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> and also comprising the steps of removing any bit which has been erased from said group and repeating said steps of comparing and selecting until there are no more bits in said group. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> and wherein said step of measuring also includes the step of after an erase pulse, comparing a threshold level of a bit which received said erase pulse to at least one of said verify levels and said step of setting includes the step of selecting a next erase pulse level according to generally the lowest verify level achieved by said bit. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> and wherein said erase conditions comprises at least one of the following set: the gate voltage level, the drain voltage level, the erase duration and any combination thereof.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002345A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002345A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002345A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002345A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002345A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002345A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002345A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002345A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002345A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002345A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002345A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002345A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002345A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002345A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002345A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002345A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002345A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002345A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002345A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002345A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002345A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
