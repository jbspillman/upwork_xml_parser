<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005157A1-20030102-D00000.TIF SYSTEM "US20030005157A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00001.TIF SYSTEM "US20030005157A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00002.TIF SYSTEM "US20030005157A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00003.TIF SYSTEM "US20030005157A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00004.TIF SYSTEM "US20030005157A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00005.TIF SYSTEM "US20030005157A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005157A1-20030102-D00006.TIF SYSTEM "US20030005157A1-20030102-D00006.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005157</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10155225</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020528</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2,312,540</doc-number>
</priority-application-number>
<filing-date>20000627</filing-date>
<country-code>CA</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>245000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Network address server</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>10155225</doc-number>
<kind-code>A1</kind-code>
<document-date>20020528</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>PCT/CA00/01394</doc-number>
<document-date>20001127</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>UNKNOWN</parent-status>
</parent-child>
</continuation-in-part-of>
</continuations>
<non-provisional-of-provisional>
<document-id>
<doc-number>60167624</doc-number>
<document-date>19991126</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Edmon</given-name>
<family-name>Chung</family-name>
</name>
<residence>
<residence-non-us>
<city>North York</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<family-name>Leung</family-name>
</name>
<residence>
<residence-non-us>
<city>Richmond Hill</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>PATENT ADMINSTRATOR</name-1>
<name-2>KATTEN MUCHIN ZAVIS ROSENMAN</name-2>
<address>
<address-1>525 WEST MONROE STREET</address-1>
<address-2>SUITE 1600</address-2>
<city>CHICAGO</city>
<state>IL</state>
<postalcode>60661-3693</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A network address server is configured to resolve a target network address name label with a network address, with the target address name label defining a branch of one level of a multi-level network address name space. The network address server is one of a plurality of network address servers each being uniquely associated with a respective region of the address name space level. The network server includes an address name database, and an address name processor in communication with the address name database for providing a response to a query for the network address corresponding to the target address name label. The address name database includes a number of database records, each identifying a unique address name label and a network address uniquely associated with the address name label. The address name processor includes a correlation processor, a correlation transceiver in communication with the correlation processor, and a response processor in communication with the correlation processor and the correlation transceiver. The correlation processor is configured to determine a correlation between the target address name label and the respective unique address name region. The correlation transceiver is configured to provide the other network address servers with a respective indication of the determined correlation and for receiving a corresponding correlation indication from at least one of the other network address servers. The response processor is configured to provide a response to the query in accordance with the correlation indications. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a continuation-in-part of international application PCT/CA00/01393 filed Nov. 27, 2002, which is a continuation-in-part of U.S. provisional application No. 60/167,624. </paragraph>
</section>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a system and method for facilitating communication between domains of a wide area network. In particular, the present invention relates to a network server for associating network address names with physical network addresses. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In order to facilitate communication between communication devices over a network, each network device is typically assigned a unique numeric network address. A user associated with one of the network devices then need only provide the network transport layer with the numeric network address of the intended target to communication with the target. Although this system functions satisfactorily in small network where users only communicate with a small number of network communication devices, the system cannot be readily transported to large networks since it would require each network user to remember a large number of unique numeric network addresses. For this reason, the domain name system (DNS) was proposed by Mockapetris in 1987 (RFC 1034 and RFC 1035, Network Working Group; presently available at &ldquo;http://www.ietf.org&rdquo;) as a mechanism for facilitating communication between communication devices over the Internet. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The DNS facilitates Internet communication by associating domain names with the numeric (IP, &ldquo;Internet Protocol&rdquo;) network addresses. The DNS basically consists of resource records, domain name servers, and resolvers. Each resource records includes information concerning each network node, including the IP address of the network node, and the domain names associated with the IP address. Together, the resource records provide the Internet with a tree-structured domain name space. Domain name servers are Internet servers which retain information concerning the domain name space. In particular, each domain name server has a file (&ldquo;zone file&rdquo;) which retains resource records associated with its own subset of the domain name space. These records are referred to as &ldquo;authoritative&rdquo; records. Also, through queries from resolvers, domain name servers also temporarily cache copies of resource records acquired from other domain servers in order to improve the performance of the retrieval process when non-local data is requested by a resolver. Resolvers are local programs which extract information from domain name servers in response to client requests. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Typically, the domain name associated with a network device at particular IP address has a top level label field, and one or more lower level label fields. The label fields comprising a domain name are separated from one another through a delimiter (&ldquo;.&rdquo;), and are each positioned in the domain name according to their respective relative levels in the domain name hierarchy. To access a particular network device (including transmitting an e-mail message to a recipient having an e-mail account subsisting at a remote network device) a user provides a resolver, through an Internet browser, with the domain name associated with the target network device. The resolver queries a root DNS server with the top level label identified in the domain name to obtain the IP address of the DNS server which has the zone file associated with the top level domain. The resolver then accesses the identified DNS server using the obtained IP address, and with the label occupying the next highest position in the domain name hierarchy (the label immediately to the left of the top level label in the domain name) obtains the IP address of the DNS server which has the zone file associated with the queried label. The process continues until each label in the domain name has been resolved, at which point the last queried DNS server provides the resolver with the IP address of the network device having the specified domain name. Although the DNS has been implemented successfully worldwide, it suffers from at least three main deficiencies. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> First, the domain names implemented by the DNS must follow the rules for ARPANET host names. Consequently, each label must begin and end with a &ldquo;letter&rdquo; or one of the numbers 0 to 9, and contain only &ldquo;letters&rdquo;, the numbers 0 to 9 or a hyphen in between. Further, each &ldquo;letter&rdquo; can only be one of &lsquo;A&rsquo; to &lsquo;Z&rsquo; and &lsquo;a&rsquo; to &lsquo;z&rsquo;. As a result, the number of domain names available is severely limited. Second, the DNS system is case insensitive, so that two domain names which have identical spellings but whose component letters do not correspond in terms of their respective cases, will resolve to the same network address. As will be apparent, this requirement further limits the number of domain names which can be used. Third, since the resource records for each sub-domain are stored in zone files, the number of domains names and the speed of the resolving process is limited by the hardware restrictions of the domain name servers. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Although e-mail systems existed long before the DNS was established, the problems inherent with existing e-mail systems closely parallel those of the DNS. In particular, most e-mail system only accept, for inclusion as part of an e-mail account name, the hyphen, the numbers 0 to 9 and the letters &lsquo;A&rsquo; to &lsquo;Z&rsquo; and &lsquo;a&rsquo; to &lsquo;z&rsquo;, thereby limiting the number of account names available. Again, most e-mail systems are also case insensitive, further limiting the number of account names available. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Attempts have been made to resolve some of the deficiencies of the existing network address naming systems. For instance, RealNames (www.realnames.com) and iDNS (ww.idns.org) have proposed modifications to the existing domain name system which attempt to expand upon the number of domain names available. Both systems would allow users to enter a domain name into the URL field of their browser, without the name following the rules for ARPANET host names. For instance, subscribers could enter into their Internet browser a domain name which includes symbols, and/or letters from non-English language character sets. The domain name would be transmitted to a proprietary RealNames or iDNS server which would then translate the domain name into an ARPANET-compliant domain name for resolution by the existing DNS. As will be apparent, these solutions could cause a computation bottleneck since each domain name would have to be translated first by their proprietary servers prior to resolution by a domain name server. Further, these solutions would not be suitable for e-mail addresses since the portion of the e-mail address identifying the originator and recipient of the e-mail message would still need to be translated by the recipient&apos;s e-mail POP3 server. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Microsoft Corporation has proposed a solution (http://search.ietf.orf/internet-drafts/draft-skwan-utf8-dns-0.2.txt) which would increase the size of the character set available for domain names. According to the proposal, DNS packets would be migrated from the existing ASCII format to the UTF-8 format. However, this latter solution would require that all Internet browsers be updated before domain names employing UTF-8 characters were used since UTF-8 characters are encoded using a double-byte structure. Consequently, a domain name server, implemented using BIND for example, would incorrectly interpret a UTF-8 character received from a conventional browser as two characters instead of one, resulting in an incorrect resolution of the domain name. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Therefore, there remains a need for a network address naming system which expands upon the number of domain names available, without creating computational bottlenecks and without requiring significant changes to existing browser software. Further, there remains a need for a network address naming system which expands the size of the character set available for the account name component of e-mail addresses. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to a first aspect of the present invention, there is provided a network address server and a method for resolving a target network address name with a network address, which address deficiencies of the prior art network address naming systems. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The network address server, according to the first aspect of the invention, is configured to resolve a target address name label with a network address, with the target address name label defining a branch of one level of a multi-level network address name space. The network address server is one of a plurality of network address servers each being uniquely associated with a respective region of the address name space level. The network address server includes an address name database, and an address name processor in communication with the address name database for providing a response to a query for the network address corresponding to the target address name label. The address name database includes a number of database records, each identifying a unique address name label and a network address uniquely associated with the address name label. The address name processor includes a correlation processor, a correlation transceiver in communication with the correlation processor, and a response processor in communication with the correlation processor and the correlation transceiver. The correlation processor is configured to determine a correlation between the target address name label and the respective unique address name region. The correlation transceiver is configured to provide the other network address servers with a respective indication of the determined correlation and for receiving a corresponding correlation indication from at least one of the other network address servers. The response processor is configured to provide a response to the query in accordance with the correlation indications. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The method for resolving a target network address name, according to the first aspect of the invention, includes the steps of (1) receiving at a first network address server a query for the network address corresponding to the target address name label, the first network address server being one of a plurality of network address servers each including database records defining a unique region of the address name space level, each database record associating a unique address name label with a corresponding network address; (2) at the first network address server determining a correlation between the received target address name label and the respective unique address name region; (3) at the first domain name server providing the other network address servers with a respective indication of the correlation and receiving corresponding correlation indications from at least one of the other network address servers; and (4) at the first network address server providing a response to the query in accordance with the correlation indications. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to a second aspect of the present invention, there is provided a method for resolving network address names which addresses deficiencies of the prior art network address naming systems. The method for resolving network address names, according to the second aspect of the invention, includes the steps of (1) providing a plurality of network address servers for mapping a hierarchical network address name space, the hierarchical address name space having a number of levels, each network address server including database records defining a unique subset of a respective level of the address name space, each database record associating a unique address name with a corresponding network address; (2) receiving a target address name for resolving, the target address name including a number of address name labels, each address name label being associated with one of the subsets of a respective one of the address name space levels; and (3) for each address name label querying at least one of the network address servers defining the associated address name space level. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to a third aspect of the present invention, there is provided a data packet for resolving a target network address name label with a network address. The data packet, according to the third aspect of the invention, includes at least one address name character identifying the target address name label (with the at least one address name character having an address name character set type), and an address name identifier identifying the address name character set type. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to a fourth aspect of the present invention, there is provided a network address name database for resolving a target address name label with a network address. The address name database, according to the fourth aspect of the invention, includes at least one database record, each including an address name label identifying a network address name (with the address name label including at least one record character having a record character set type), a record character set identifier identifying the record character set type, and a network address uniquely associated with the address name label. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In a preferred embodiment of the invention, the network address server comprises a domain name server for resolving a target domain label with a network address. Each domain name server has a correlation indication response time, and the domain name server which returns the response to the query has the shortest of the correlation indication response times. Preferably, each database record includes at least one record character leaving a record character set type, and a record character set identifier identifying the record character set type. The target domain name label includes at least one domain name character having a domain name character set type, and a domain name character set identifier identifying the domain name character set type. The correlation processor determines the correlation between the target domain name label and the respective unique domain name region by querying the respective database records with the target domain name label, and obtaining a correlation of the domain name characters and the associated domain name character set identifier with each database record of record characters and the associated record character set identifier. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Further, the domain name label of each database record is associated with a hash code derived from a hashing function which uniquely associates the derived hash code with the corresponding domain name label. The correlation processor includes a hash code processor for encoding the target domain name label with the hashing function, and a search engine in communication with the correlation processor for querying the hashed database records with the hashed domain name label. The correlation processor obtains the correlation by encoding the target domain name label with the hashing function, and querying the hashed database records with the hashed domain name label.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The preferred embodiment of the invention will now be described, by way of example only, with reference to the drawings, in which: </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic view of network address name resolution system, according to the present invention, depicting a plurality of network clients, a plurality of network address servers, and a communications network interconnecting the network clients and the network address servers; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schematic view of the network address server shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, depicting the address name database, and the correlation processor, the correlation transceiver and the response processor of the address name processor; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>3</bold></highlight><highlight><italic>d </italic></highlight>are schematic views of sample database records comprising the address name database shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a schematic diagram of a data packet used to query the name network address servers; and </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow chart depicting the sequence of steps executed by the network address server in resolving a target network address name label with a network address.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Turning to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> network address name resolution system, denoted generally as <highlight><bold>100</bold></highlight>, is shown comprising a plurality of network clients <highlight><bold>102</bold></highlight>, a plurality of network servers <highlight><bold>104</bold></highlight>, a plurality of network address servers <highlight><bold>200</bold></highlight>, a plurality of name resolution servers <highlight><bold>250</bold></highlight>, and a communications network <highlight><bold>106</bold></highlight> interconnecting the network clients <highlight><bold>102</bold></highlight>, the network servers <highlight><bold>104</bold></highlight>, the network address servers <highlight><bold>200</bold></highlight> and the name resolution servers <highlight><bold>250</bold></highlight>. Preferably, each network client <highlight><bold>102</bold></highlight> comprises a personal computer equipped with software for communicating with the network servers <highlight><bold>104</bold></highlight> over the communications network <highlight><bold>106</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Typically, the communications network <highlight><bold>106</bold></highlight> comprises the Internet, however the communications network <highlight><bold>106</bold></highlight> may also comprise other network forms, such as an intranet. Further, although the network address name resolution system <highlight><bold>100</bold></highlight> will be described below as a domain name resolution system, it should be understood that the network address name resolution system <highlight><bold>100</bold></highlight> can have other applications, including acting as an e-mail user account name resolution system. Other applications of the network address name resolution system <highlight><bold>100</bold></highlight> will be apparent to those skilled in the art, and are encompassed by the present invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, each network address server <highlight><bold>200</bold></highlight> comprises a network interface <highlight><bold>202</bold></highlight> for communicating with the network clients <highlight><bold>102</bold></highlight> over the communications network <highlight><bold>106</bold></highlight>, and a central processing unit (CPU) <highlight><bold>204</bold></highlight> in communication with the network interface <highlight><bold>202</bold></highlight>, and a non-volatile memory (NVM) <highlight><bold>206</bold></highlight> and a volatile memory (RAM) <highlight><bold>208</bold></highlight> in communication with the CPU <highlight><bold>204</bold></highlight>. Preferably the NVM <highlight><bold>206</bold></highlight> comprises a magnetic or optical storage device, and includes a zone file <highlight><bold>210</bold></highlight> which has records associating domain names with network addresses. The NVM <highlight><bold>206</bold></highlight> also includes processor instructions for the CPU <highlight><bold>204</bold></highlight> which establish in the RAM <highlight><bold>208</bold></highlight> a network address name database <highlight><bold>212</bold></highlight> as a copy of the zone file <highlight><bold>210</bold></highlight>, and a memory object defining an address name processor <highlight><bold>214</bold></highlight> in communication with the address name database <highlight><bold>212</bold></highlight>. As will be appreciated, the network address name database <highlight><bold>212</bold></highlight> is established in the RAM <highlight><bold>208</bold></highlight> to increase the speed of the resolving process and may be dispensed with in applications where speed is not a paramount concern. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In accordance with the present structure of the Internet, the domain names of the network servers <highlight><bold>104</bold></highlight> (each of which is associated with a particular network address and comprises a plurality of domain name labels) together define a hierarchical network address name space having a plurality of address name space levels. For instance, generic top-level domain name labels, such as COM, EDU, MIL, NET, ORG, and country-specific top-level domain name labels, such as CA, UK, JP etc. each reside in the uppermost level of the network address name space. Below each top-level domain name label reside a plurality of second level domain name labels, and below each second level domain name label typically reside at least one lower level domain name label. The address name database <highlight><bold>212</bold></highlight> of each network address server <highlight><bold>200</bold></highlight> includes a plurality of database records <highlight><bold>300</bold></highlight>, each defining a unique region of the address name space level. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> To enhance the speed of the resolution process, preferably each level of network address name space is distributed across a plurality of different network address servers <highlight><bold>200</bold></highlight>, with each address name database <highlight><bold>212</bold></highlight> being associated with a unique subset of the domain name labels defined for a particular address name space level. In essence, each network address server <highlight><bold>200</bold></highlight> is associated with a unique region of the entire address name space, with the address name databases <highlight><bold>212</bold></highlight> of all the network address servers <highlight><bold>200</bold></highlight> associated with a particular address name space level together identifying all the domain name labels defined for the associated address name space level. However, consistent with the existing DNS structure, preferably the network address name resolution system <highlight><bold>100</bold></highlight> includes redundant or secondary network address servers <highlight><bold>200</bold></highlight>, so that each unique region of the address name space is serviced by two or more network address servers <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The structure of typical database records <highlight><bold>300</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>300</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>300</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>300</bold></highlight><highlight><italic>d </italic></highlight>are shown in text format in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As will be apparent, the database records <highlight><bold>300</bold></highlight> are substantially similar to the BIND-based text zone file resource records presently used in the DNS described by Mockapetris, in that each database record <highlight><bold>300</bold></highlight> includes an address name label identifying a particular domain name, and at least one network address <highlight><bold>304</bold></highlight> associated with the address name label <highlight><bold>302</bold></highlight>. In accordance with the existing DNS convention, each network address <highlight><bold>304</bold></highlight> is either (1) a network address server network address <highlight><bold>304</bold></highlight><highlight><italic>a </italic></highlight>of a network address server <highlight><bold>200</bold></highlight> which contains in its address name database <highlight><bold>212</bold></highlight> a network address name associated with the next lowermost level of the network address name space, or (2) the domain name network address <highlight><bold>304</bold></highlight><highlight><italic>b </italic></highlight>of the domain name being resolved. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> However, unlike the ASCII text used in existing BIND-based zone file records, to overcome the character set limitation inherent in the conventional domain name system preferably each address name label <highlight><bold>302</bold></highlight> is defined using characters from the Unicode character set (ISO 10646), since the Unicode character set includes symbols and characters from a number of different languages. However, to avoid limiting the network address name resolution system <highlight><bold>100</bold></highlight> to any particular character set, it is envisaged that each address name label <highlight><bold>302</bold></highlight> may use characters from any of a plurality of character set. Therefore, preferably each database record <highlight><bold>300</bold></highlight> also includes a character set identifier identifying the character set type used to define the address name label <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> For instance, the database record <highlight><bold>300</bold></highlight><highlight><italic>b </italic></highlight>includes as the characters set identifier <highlight><bold>306</bold></highlight> the string &ldquo;Big5&rdquo; to denote the Big5 Chinese character set, whereas the database record <highlight><bold>300</bold></highlight><highlight><italic>c </italic></highlight>includes as the character set identifier <highlight><bold>306</bold></highlight> the string &ldquo;UTF8&rdquo; to denote the UTF8 double-byte Chinese character set. Further, the Chinese language extension for the Microsoft Internet Explorer browser incorrectly treats each UTF8 double-byte character as two separate characters, thereby providing an incorrect transformation of UTF8 characters. Therefore, the database record <highlight><bold>300</bold></highlight><highlight><italic>d </italic></highlight>includes as the character set identifier <highlight><bold>306</bold></highlight> the string &ldquo;UTF8-BIG5&rdquo; to transparently provide Internet Explorer users with the correct resolution of domain names defined by UTF8 characters. In addition, preferably each database record <highlight><bold>300</bold></highlight> also includes as the character set identifier <highlight><bold>306</bold></highlight> the string &ldquo;UTF7&rdquo; to interface with name resolution servers <highlight><bold>250</bold></highlight> which are not 8-bit compliant. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in one variation the address name database <highlight><bold>212</bold></highlight> also includes a hash table <highlight><bold>308</bold></highlight> having a plurality of hash values, each derived from a respective one of the address name labels <highlight><bold>302</bold></highlight>. As will be explained, the hash table <highlight><bold>308</bold></highlight> improves the speed of the domain name resolution process and may be eliminated if speed is not a paramount concern, or if the address name database <highlight><bold>212</bold></highlight> does not contain a large number of records <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The sample database records <highlight><bold>300</bold></highlight>, depicted in <cross-reference target="DRAWINGS">FIGS. 3</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>3</bold></highlight><highlight><italic>d</italic></highlight>, each have a different character set identifier <highlight><bold>306</bold></highlight>, and corresponding address name label <highlight><bold>302</bold></highlight>, associated with the same network address <highlight><bold>304</bold></highlight>. Rather than including a separate database record <highlight><bold>300</bold></highlight> for each combination of character set identifier <highlight><bold>306</bold></highlight> and address name label <highlight><bold>302</bold></highlight>, in other variation one or more of the database records <highlight><bold>300</bold></highlight> include a plurality of alias address name labels <highlight><bold>302</bold></highlight>, each being associated with a different character set identifier <highlight><bold>306</bold></highlight>, with each database record <highlight><bold>300</bold></highlight> of alias address name labels being associated with a unique network address <highlight><bold>304</bold></highlight>. By associating each network address <highlight><bold>304</bold></highlight> with one or more alias address name labels <highlight><bold>302</bold></highlight>, the network address server <highlight><bold>200</bold></highlight> is able to resolve more readily an address name defined using any of a plurality of different character sets. For instance, the database records <highlight><bold>300</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>300</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>306</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>300</bold></highlight><highlight><italic>d </italic></highlight>could be combined into a single database record <highlight><bold>300</bold></highlight>, all being associated with a common network address <highlight><bold>304</bold></highlight>, but having one address name label <highlight><bold>302</bold></highlight> defined using characters from the Unicode character set, an alias address name label <highlight><bold>302</bold></highlight> defined using characters from the Big5 Chinese character set (and including as the character set identifier the string &ldquo;Big5&rdquo;), another alias address name label <highlight><bold>302</bold></highlight> defined using characters from the UTF8 double-byte Chinese character set (and including as the character set identifier the string &ldquo;UTF8&rdquo;), another alias address name label <highlight><bold>302</bold></highlight> for dealing with the Chinese language extension for Microsoft Internet Explorer (and including as the character set identifier the string &ldquo;UTF8-Big5&rdquo;), and another alias address name label <highlight><bold>302</bold></highlight> for dealing with name resolution servers <highlight><bold>250</bold></highlight> which are not 8-bit compliant (and including as the character set identifier the string &ldquo;UTF7&rdquo;). </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> A portion of a data packet <highlight><bold>400</bold></highlight> for querying the network address servers <highlight><bold>200</bold></highlight> with a target domain name, is shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The structure of the overall data packet <highlight><bold>400</bold></highlight> is substantially similar to the datagram message format described by Mockapetris for conventionally DNS queries, in that the data packet includes the HEADER, QUESTION, ANSWER, AUTHORITY AND ADDITIONAL records (not shown). Further, as described by Mockapetris, the QUESTION, ANSWER, AUTHORITY AND ADDITIONAL records comprise one or more of the QNAME, QTYPE, QCLASS, TTL, RDLENGTH and RDATA fields (not shown). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Further, as proposed by Mockapetris, the QNAME field includes a target domain name label <highlight><bold>402</bold></highlight> identifying the target domain name, and an 8-bit character count identifier <highlight><bold>403</bold></highlight> preceding the domain name label <highlight><bold>402</bold></highlight> which identifies the number of characters in the domain name label. However, rather than each target domain name comprising only ASCII characters, as proposed by Mockapetris, preferably each address name label <highlight><bold>402</bold></highlight> is defined using characters from the Unicode character set. On the other hand, as discussed above, to avoid limiting the network address name resolution system <highlight><bold>100</bold></highlight> to any particular character set, it is envisaged that each target domain name label <highlight><bold>402</bold></highlight> may use characters from any of a plurality of character sets. Therefore, preferably each data packet <highlight><bold>400</bold></highlight> also includes a 16-bit character set identifier <highlight><bold>404</bold></highlight> identifying the character set type used to define the target domain name label <highlight><bold>402</bold></highlight>. As shown, the character set identifier <highlight><bold>404</bold></highlight> includes a 2-bit prefix portion <highlight><bold>404</bold></highlight><highlight><italic>a </italic></highlight>which indicates to the network address server <highlight><bold>200</bold></highlight> that the data packet <highlight><bold>400</bold></highlight> includes non-ASCII characters, a 2-bit flag portion <highlight><bold>404</bold></highlight><highlight><italic>b </italic></highlight>for further enhancement purposes, and a 12-bit code portion <highlight><bold>404</bold></highlight><highlight><italic>c </italic></highlight>which identifies the character set type. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Preferably, the code portion <highlight><bold>404</bold></highlight><highlight><italic>c </italic></highlight>uses a standardized specification for the identification of the character set, such as the MIBenum specification proposed in RFC 1700. Thus, as will be apparent from RFC 1700, the value &ldquo;1000&rdquo; as used in the code portion <highlight><bold>404</bold></highlight><highlight><italic>c </italic></highlight>denotes that the following domain name label is composed of characters from the Unicode character set. However, as one goal of the network address name resolution system <highlight><bold>100</bold></highlight> is to promote the use of a common character set capable of recognizing any multi-national characters, it is expected that the 12-bit code portion <highlight><bold>404</bold></highlight><highlight><italic>c</italic></highlight>, the 2-bit prefix portion <highlight><bold>404</bold></highlight><highlight><italic>a </italic></highlight>and the 2-bit flag portion <highlight><bold>404</bold></highlight><highlight><italic>b </italic></highlight>may be eliminated altogether once all network resolution address servers <highlight><bold>200</bold></highlight> adopt a common character set for the representation of domain name labels. On the other hand, it is also expected that domain name labels may comprise symbols which are not part of any recognized character set, such as a graphic representation or logo which is being used as a trade-mark, in which case the code portion <highlight><bold>404</bold></highlight><highlight><italic>c </italic></highlight>would be retained to identify the character set associated with the symbol. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, preferably the 2-bit prefix portion <highlight><bold>404</bold></highlight><highlight><italic>a </italic></highlight>is set to &ldquo;10&rdquo; to identify that the following domain name label includes non-ASCII characters. However, as will be apparent from RFC 1035, since a domain name label is limited to 63 octets in length, the two most significant bits of the 8-bit character counter identifier <highlight><bold>403</bold></highlight> will typically be &ldquo;00&rdquo;. Therefore, to promote compatibility with the DNS standard described by Mockapetris and to promote backwards compatibility with prior art name resolution servers <highlight><bold>250</bold></highlight> (which do not recognize non-ASCII characters), if the target domain name label <highlight><bold>402</bold></highlight> consists only of ASCII characters preferably the 16-bit character set identifier <highlight><bold>404</bold></highlight> which would otherwise precede the character count identifier <highlight><bold>403</bold></highlight> for the domain name label <highlight><bold>402</bold></highlight> would be eliminated. For example, the final two &ldquo;rows&rdquo; of data in the data packet <highlight><bold>400</bold></highlight> only include the 8-bit character counter identifier <highlight><bold>403</bold></highlight> (identifying that the last domain name label in the domain name has 3 ASCII characters) and a target domain name label <highlight><bold>402</bold></highlight> whose characters together define the &ldquo;com&rdquo; domain name label. Consequently, since the two most significant bits of the 8-bit character counter identifier <highlight><bold>403</bold></highlight> will not be &ldquo;10&rdquo; for a domain name label consisting only of ASCII characters, name resolution servers <highlight><bold>250</bold></highlight> will be able to resolve such a domain name label without modification to the prior art DNS algorithm. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Turning again to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the address name processor <highlight><bold>214</bold></highlight> (which is in communication with the address name database <highlight><bold>212</bold></highlight>) is shown comprising a correlation processor <highlight><bold>216</bold></highlight>, a correlation transceiver <highlight><bold>218</bold></highlight> in communication with the correlation processor <highlight><bold>216</bold></highlight>, and a response processor <highlight><bold>220</bold></highlight> in communication with the correlation processor <highlight><bold>216</bold></highlight> and the correlation transceiver <highlight><bold>218</bold></highlight>. The correlation processor <highlight><bold>216</bold></highlight> is configured to determine a correlation between the domain name label <highlight><bold>402</bold></highlight> being resolved and the unique address name region associated with the particular network address server <highlight><bold>200</bold></highlight>. In other words, the correlation processor <highlight><bold>216</bold></highlight> of each network address server <highlight><bold>200</bold></highlight> is configured to determine whether a target domain name label <highlight><bold>402</bold></highlight> (as queried by one of the network clients <highlight><bold>102</bold></highlight>) has a corresponding entry in the network address server&apos;s <highlight><bold>200</bold></highlight> address name database <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The correlation processor <highlight><bold>216</bold></highlight> is configured to determine the correlation between the target domain name label <highlight><bold>402</bold></highlight> and the network address server&apos;s <highlight><bold>200</bold></highlight> assigned unique domain name region by querying the database records <highlight><bold>300</bold></highlight> of the network address server <highlight><bold>200</bold></highlight> with the target domain name label <highlight><bold>402</bold></highlight>, and then comparing the domain name characters and the associated domain name character set identifier <highlight><bold>404</bold></highlight> with the record characters (of the address name label <highlight><bold>302</bold></highlight>) and the associated record character set identifier <highlight><bold>306</bold></highlight>. As will be apparent, the correlation processor <highlight><bold>216</bold></highlight> continues to analyse each database record <highlight><bold>300</bold></highlight> until either a matching database record <highlight><bold>300</bold></highlight> is located in the respective address name database <highlight><bold>212</bold></highlight> or until all the database records <highlight><bold>300</bold></highlight> in the respective address name database <highlight><bold>212</bold></highlight> have been analyzed. If the address name database <highlight><bold>212</bold></highlight> includes one or more alias address name labels <highlight><bold>302</bold></highlight>, the correlation processor <highlight><bold>216</bold></highlight> analyzes each database record <highlight><bold>300</bold></highlight> until all database records <highlight><bold>300</bold></highlight> have been analyzed, or until a database record <highlight><bold>300</bold></highlight> is located in which the address name label <highlight><bold>302</bold></highlight> or alias address name label(s) <highlight><bold>302</bold></highlight> (and the associated character set identifier <highlight><bold>306</bold></highlight>) matches the character sequence of the target domain name label <highlight><bold>402</bold></highlight> (and the associated domain name character set identifier <highlight><bold>404</bold></highlight>). </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The correlation processor <highlight><bold>216</bold></highlight> includes a search engine <highlight><bold>222</bold></highlight> for querying the database records with the domain name label. However, in the variation, discussed above, where the address name database <highlight><bold>212</bold></highlight> includes the hash table <highlight><bold>308</bold></highlight>, preferably the correlation processor <highlight><bold>216</bold></highlight> also includes a hash code processor <highlight><bold>224</bold></highlight> for encoding the target domain name label with the hashing function, with the search engine <highlight><bold>222</bold></highlight> being in communication with the hash code processor <highlight><bold>224</bold></highlight> for querying the hashed database records with the hashed domain name label. In this variation, the correlation processor <highlight><bold>216</bold></highlight> obtains the correlation by encoding the target domain name label with the hashing function used to create the hash table <highlight><bold>308</bold></highlight>, and then querying the hashed database records <highlight><bold>300</bold></highlight> with the hashed domain name label <highlight><bold>402</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The correlation transceiver <highlight><bold>218</bold></highlight> of each network address server <highlight><bold>200</bold></highlight> is configured to provide the other network address server <highlight><bold>200</bold></highlight> with a respective indication of the determined correlation, and to receive corresponding correlation indications from at least one of the other network address servers <highlight><bold>200</bold></highlight>. The response processor <highlight><bold>220</bold></highlight> is configured to provide a response to the query in accordance with the correlation indications. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The operation of the network address name resolution system <highlight><bold>100</bold></highlight> will now be described with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. To demonstrate the resolution process, the name &ldquo;www.&PHgr;.com&rdquo; will be used as the target domain name, as processed by one of the network address servers <highlight><bold>200</bold></highlight>. As will be apparent, all of the network address servers <highlight><bold>200</bold></highlight> of the network address name resolution system <highlight><bold>100</bold></highlight> function in a similar manner. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Once the network address servers <highlight><bold>200</bold></highlight> are deployed, upon power-up each network address server <highlight><bold>200</bold></highlight> reads its zone file <highlight><bold>210</bold></highlight> from its NVM <highlight><bold>206</bold></highlight> and creates (as a copy) its network address name database <highlight><bold>212</bold></highlight> in its RAM <highlight><bold>208</bold></highlight>. Then, at step <highlight><bold>500</bold></highlight>, using a data packet <highlight><bold>400</bold></highlight> similar to that shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, one of the network clients <highlight><bold>102</bold></highlight> transmits a target domain name query request (to communicate with one of the network servers <highlight><bold>104</bold></highlight>) to one of the name resolution servers <highlight><bold>250</bold></highlight> for resolution of the target domain name to a network address. As discussed above, if the network client <highlight><bold>102</bold></highlight> is compliant with the name resolution protocol disclosed herein, since the target domain name includes the character &ldquo;&PHgr;&rdquo;, the two most significant bits of the 8-bit character counter identifier <highlight><bold>403</bold></highlight> will be &ldquo;10&rdquo;. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Upon receipt of the data packet <highlight><bold>400</bold></highlight>, the name resolution server <highlight><bold>250</bold></highlight> transmits the query to all the network address servers <highlight><bold>200</bold></highlight> associated with the top-level of the address name space. In this example, the query is transmitted to the root network address servers <highlight><bold>200</bold></highlight> for identification of the network address of one of the network address servers <highlight><bold>200</bold></highlight> assigned to the &ldquo;COM&rdquo; domain name space. The network interface <highlight><bold>202</bold></highlight> of the top-level network address servers <highlight><bold>200</bold></highlight> receive the query, and transmit the query to their respective address name processors <highlight><bold>214</bold></highlight>. At step <highlight><bold>502</bold></highlight>, the address name processor <highlight><bold>214</bold></highlight> of each top-level network address server <highlight><bold>200</bold></highlight> extracts the target domain name label <highlight><bold>402</bold></highlight> and the associated character set identifier <highlight><bold>404</bold></highlight> from the data packet <highlight><bold>400</bold></highlight>. The address name processor <highlight><bold>214</bold></highlight> then determines the correlation between the target address name label <highlight><bold>402</bold></highlight> and the unique address name region assigned to tho respective network address server <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> To do so, at step <highlight><bold>504</bold></highlight> preferably the correlation processor <highlight><bold>216</bold></highlight> of the top-level network address server <highlight><bold>200</bold></highlight> which is first to receive and process the domain name query (hereinafter the &ldquo;first top-level network address server <highlight><bold>200</bold></highlight>&rdquo;) transmits the query to the other top-level network address servers <highlight><bold>200</bold></highlight> to the other top-level network address servers <highlight><bold>200</bold></highlight>, with a flag indicating that these other top-level network address servers <highlight><bold>200</bold></highlight> should transmit their respective responses to the first top-level network address server <highlight><bold>200</bold></highlight>. Besides increasing the speed of the resolution process, as will be explained below, this step ensures that the network client <highlight><bold>102</bold></highlight> will only receive a single response to the domain name query. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> After the notification is sent, at step <highlight><bold>506</bold></highlight> the hash code processor <highlight><bold>224</bold></highlight> of the correlation processor <highlight><bold>216</bold></highlight> of each top level network address server <highlight><bold>200</bold></highlight> derives a hash code from the extracted target domain name label <highlight><bold>402</bold></highlight> and the associated character set identifier <highlight><bold>404</bold></highlight>. The search engine <highlight><bold>222</bold></highlight> of the correlation processor <highlight><bold>216</bold></highlight> of each top level network address server <highlight><bold>200</bold></highlight> then queries the database records <highlight><bold>300</bold></highlight> of their respective network address name databases <highlight><bold>212</bold></highlight> with the derived hash code for a matching entry in their network address name database <highlight><bold>212</bold></highlight>. If no match is located, at step <highlight><bold>508</bold></highlight> the correlation transceiver <highlight><bold>218</bold></highlight> of each of the top-level network address servers <highlight><bold>200</bold></highlight> provides the first top-level network address server <highlight><bold>200</bold></highlight> with a data packet indicating that the domain name was not found in the network address server&apos;s address name database <highlight><bold>212</bold></highlight>. As will be apparent, if the database records <highlight><bold>300</bold></highlight> include one or more alias address name labels <highlight><bold>302</bold></highlight>, the correlation processor <highlight><bold>216</bold></highlight> of each top-level network address server <highlight><bold>200</bold></highlight> queries the address name database <highlight><bold>212</bold></highlight> for a database record <highlight><bold>300</bold></highlight> having an address name label <highlight><bold>302</bold></highlight> (or alias address name label <highlight><bold>302</bold></highlight>) and associated character set identifier <highlight><bold>306</bold></highlight> which matches the character sequence of the target domain name label <highlight><bold>402</bold></highlight> and the associated domain name character set identifier <highlight><bold>404</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> On the other hand, if a match is located, at step <highlight><bold>510</bold></highlight> the top-level network address server <highlight><bold>200</bold></highlight> having the matching entry replies to the first top-level network address server <highlight><bold>200</bold></highlight> with the network address of one of the network address servers <highlight><bold>200</bold></highlight> assigned to the &ldquo;com&rdquo; domain name space. Alternately, if the top-level network address server <highlight><bold>200</bold></highlight> has an authoritative record for the domain name, the network address server <highlight><bold>200</bold></highlight> replies to the first top-level network address server <highlight><bold>200</bold></highlight> with the network address associated with the domain name. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> At step <highlight><bold>512</bold></highlight>, the first top-level network address server <highlight><bold>200</bold></highlight> responds with the retrieved network address to the name resolution server <highlight><bold>250</bold></highlight> which initiated the query. If the first top-level network address server <highlight><bold>200</bold></highlight> only responded with the network address of one of the network address servers <highlight><bold>200</bold></highlight>, the name resolution server <highlight><bold>250</bold></highlight> transmits the query to the network address servers <highlight><bold>200</bold></highlight> having the retrieved network address. The process repeats in accordance with steps <highlight><bold>500</bold></highlight> to <highlight><bold>512</bold></highlight>, but with the query being transmitted to the &ldquo;com&rdquo; network address servers <highlight><bold>200</bold></highlight> for identification of the network address of one of the network address servers <highlight><bold>200</bold></highlight> assigned to the &ldquo;&PHgr;.com&rdquo; domain name space. As will be appreciated, at step <highlight><bold>512</bold></highlight> the first &ldquo;com&rdquo; network address server <highlight><bold>200</bold></highlight> responds to the network client <highlight><bold>102</bold></highlight> which initiated the query either with the network address of one of the network address servers <highlight><bold>200</bold></highlight> assigned to the &ldquo;&PHgr;.com&rdquo; domain name space, or the retrieved network address. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Again, the process repeats in accordance with steps <highlight><bold>500</bold></highlight> to <highlight><bold>512</bold></highlight>, but with the query being transmitted to the &ldquo;&PHgr;.com&rdquo; network address servers <highlight><bold>200</bold></highlight> for identification of the network address of one of the network address servers <highlight><bold>200</bold></highlight> assigned to the &ldquo;www.&PHgr;.com&rdquo; domain name space. At step <highlight><bold>512</bold></highlight>, the first &ldquo;&PHgr;.com&rdquo; network address server <highlight><bold>200</bold></highlight> responds to the name resolution server <highlight><bold>250</bold></highlight> which initiated the query either with the network address associated with the target domain name, or with a indication that the target domain name was not found. The network client <highlight><bold>102</bold></highlight> then transmits the response to the network client <highlight><bold>102</bold></highlight> to allow the network client <highlight><bold>102</bold></highlight> to establish communication with the target network server <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> If at any iteration of step <highlight><bold>512</bold></highlight>, no response is received from any of the other network address servers <highlight><bold>200</bold></highlight> and a matching entry cannot be found by the first network address server, the first network address server responds to the name resolution server <highlight><bold>250</bold></highlight> at step <highlight><bold>512</bold></highlight> with a time out error. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The present invention provides a number of advantages of the prior art. First, by separating each level of the domain name space into distinct portions, and assigning each domain name portion to different network address servers <highlight><bold>200</bold></highlight>, the number of domain names available is no longer limited by the hardware restrictions of any one domain name server. Second, by distributing the domain name space amongst multiple network address servers <highlight><bold>200</bold></highlight>, startup costs for establishing a network address server <highlight><bold>200</bold></highlight> is reduced. Third, by using the Unicode character set, rather than the ASCII character set used by conventional domain name servers, the number of domain names can be greatly enhanced. Fourth, by using a character set identifier to identify the character set of a domain name label, the network address name resolution system <highlight><bold>100</bold></highlight> can be readily configured to recognize new character sets and to accept enhancements to existing character sets. Further, by employing the network address servers <highlight><bold>200</bold></highlight> as account network address servers in an e-mail system, the type of characters which can be used for the account names assigned to an e-mail account can also be greatly enhanced. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The present invention is defined by the claims appended hereto, with the foregoing description being illustrative of the preferred embodiment of the invention. Those of ordinary skill may envisage certain additions, deletions and/or modifications to the described embodiment, which although not explicitly described herein, do not depart from the spirit or scope of the invention, as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A network address server for resolving a target domain name label with a network address, the network address server being one of a plurality of network address servers each being associated with a common level of a multi-level network address name space, the network address server comprising: 
<claim-text>an address name database including a plurality of database records associated with a respective region of the common level, each said database record including an address name label and a network address uniquely associated with the address name label; and </claim-text>
<claim-text>an address name processor in communication with the address name database for providing a response to a query for the network address corresponding to the target domain name label, the domain name processor including a correlation processor for determining a correlation between the target domain name label and the associated region, a correlation transceiver in communication with the correlation processor for receiving an indication of a corresponding determined correlation from at least one of the other network address servers, and a response processor in communication with the correlation processor and the correlation transceiver for providing a response to the query in accordance with the determined correlation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the address name database includes for each said database record a hash code derived from a hashing function uniquely associating the derived hash code with the corresponding address name label. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the correlation processor comprises a hash code processor for encoding the target domain name label with the hashing function, and a search engine in communication with the correlation processor for querying the hashed database records with the hash domain name label. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each said database record includes at least one record character having a record character set type, and a record character set identifier identifying the record character set type. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method for resolving a target domain name label with a network address in a multi-level network address name space, the method comprising the steps of: 
<claim-text>receiving at a first network address server a query for the network address corresponding to the target domain name label, the first network address server being one of a a plurality of network address servers each being associated with a common level of the network address name space, the network address servers each including database records defining a respective unique region of the common level, each said database record including an address name label and a network address uniquely associated with the address name label; </claim-text>
<claim-text>at the first network address server determining a correlation between the received target domain name label and the associated region; </claim-text>
<claim-text>providing the other network address servers with the determined correlation and at the first network address server receiving an indication of a corresponding determined correlation from at least one of the other network address servers; and </claim-text>
<claim-text>at the first network address server providing a response to the query in accordance with the determined correlations. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein each said network address server has a correlation response time, and the first network address server has a shortest one of the correlation response times. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the database records each include at least one record character having a record character set type, and a record character set identifier identifying the record character set type, the target domain name label includes at least one address name character having an address name character set type, and an address name character set identifier identifying the address name character set type, and the step of determining a correlation comprises the steps of querying the respective database records with the received address name label, and obtaining a correlation of the at least one address name character and the associated address name character set identifier with each said at least one record character and the associated record character set identifier. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the database records are encoded with a hashing function, and the step of obtaining a correlation comprises the steps of encoding the target address name label with the hashing function, and querying the hashed database records with the hashed address name label. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method for resolving network domain names comprising the steps of: 
<claim-text>providing a plurality of network address servers for mapping a hierarchical network address name space, the hierarchical address name space having a plurality of levels, each said network address server being associated with at least one other of said network address servers and a common level of the network address name space, each said network address server including database records defining a respective unique region of the associated common level, each said database record including an address name label and a network address uniquely associated with the address name label; </claim-text>
<claim-text>receiving at one of the network address servers a target domain name for resolving, the target domain name comprising a plurality of address name labels, each said address name label being associated with one of the regions of a respective one of the common levels; and </claim-text>
<claim-text>for each said address label querying the network address servers defining the one common level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the step of receiving the network address comprises the steps of at each said queried network address server determining a correlation between the queried address name label and the respective defined address name space subset, providing other ones of the queried network address servers with an indication of the correlation and receiving correlation indications from the other queried network address servers, and transmitting a response to the query in accordance with the correlation indications. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein each said queried network address server has a correlation indication response time, and the step of transmitting a response comprises transmitting the response from the queried network address server having a shortest one of the correlation indication response times. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the database records each include at least one record character having a record character set type, and a record character set identifier identifying the record character set type, the queried address name label includes at least one address name character having an address name character set type, and an address name character set identifier identifying the address name character set type, and the correlation determining step comprises the steps of receiving the queried address name label, and querying the respective database records with the at least one address name character and the associated address name character set identifier for obtaining a respective correlation with each said at least one record character and the associated record character set identifier. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the database records are encoded with a hashing function, and the step of querying the respective database records comprises the steps of encoding with the hashing function each queried address name label, and querying the hashed database records with the hashed address name labels. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A data packet for resolving a target network address name label with a network address, the data packet comprising: 
<claim-text>at least one address name character identifying the target address name label, the at least one address name character having an address name character set type; and </claim-text>
<claim-text>an address name identifier identifying the address name character set type. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A network address name database for resolving a target network address name label with a network address, the network address name database including at least one database record, each comprising: 
<claim-text>a network address name label identifying a network address name, the network address name label including at least one record character having a record character set type; </claim-text>
<claim-text>a record character set identifier identifying the record character set type; and </claim-text>
<claim-text>a network address uniquely associated with the address name label. </claim-text>
<claim-text>a network address name label identifying a network address name, the network address name label including at least one record character having a record character set type; </claim-text>
<claim-text>a record character set identifier identifying the record character set type; and </claim-text>
<claim-text>a network address uniquely associated with the address name label. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The address name database according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein each said database record is associated with a hash code uniquely derived from the address name label. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The data packet according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the target domain name label includes one portion comprising a character count identifier identifying the number of the domain name characters, and another portion identifying whether the domain name characters comprise non-ASCII characters. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A network address server for resolving a target domain name with a network address, comprising: 
<claim-text>an address name database including a plurality of database records each including an address name and a network address associated with the address name, at least one of the address names including an address name label and an address name character set identifier, the address name label including at least one record character having a record character set type, the record character set identifier being associated with the record character set type; and </claim-text>
<claim-text>an address name processor in communication with the address name database, and being configured to receive the target domain name and to resolve a query for the network address associated with the received target domain name, the received target domain name including a domain name label and a domain name character set identifier, the domain name label including at least one domain name character having a domain name character set type, the domain name character set identifier being associated with the domain name character set type. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein the received target domain name includes one portion comprising a character count identifier identifying the number of the domain name characters, and another portion identifying whether the domain name characters comprise non-ASCII characters. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein at least one of the record character set identifiers is associated with a non-ASCII character set. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The network address server according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein at least one of the database records includes a hash code uniquely associated with the associated address name label, and the address name processor is configured to resolve the query by determining a query parameter by applying a hashing function to the received target domain name label, and locating in the address name database the database record whose hash code matches the determined query parameter. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A method of resolving a target domain name, comprising the steps of: 
<claim-text>receiving over a network a request to resolve a target domain name, the received target domain name including a domain name label and a domain name character set identifier, the domain name label including at least one domain name character having a domain name character set type, the domain name character set identifier being associated with the domain name character set type; </claim-text>
<claim-text>querying an address name database for a network address associated with the received target domain name, the address name database including a plurality of database records each including an address name and a network address associated with the address name, at least one of the address names including address name label and an address name character set identifier, the address name label including at least one record character having a record character set type, the record character set identifier being associated with the record character set type; and </claim-text>
<claim-text>resolving the request in accordance with a result of the query. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the received target domain name includes one portion comprising a character count identifier identifying the number of the domain name characters, and another portion identifying whether the domain name characters comprise non-ASCII characters. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein at least one of the record character set identifiers is associated with a non-ASCII character set. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein at least one of the database records includes a hash code uniquely associated with the associated address name label, and the querying step comprises the steps of determining a query parameter by applying a hashing function to the received target domain name label, and locating in the address name database the database record whose hash code matches the determined query parameter. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A computer server for resolving a domain name, comprising: 
<claim-text>a name database including a plurality of database records each being associated with a respective network address, at least one of the database records including a plurality of address names and a plurality of record character set identifiers, each said address name comprising a sequence of record characters having a record character set type, each said record character set identifier being associated with one of the address names and with the respective record character set type; and </claim-text>
<claim-text>an address name processor in communication with the name database and being configured to receive a target domain name and to resolve a query for the network address associated with the received target domain name, the received target domain name including a domain name label and a name character set identifier, the domain name label comprising a sequence of name characters having a name character set type, the name character set identifier being associated with the name character set type, the address name processor being configured to resolve the query by locating in the name database the one database record the address name and record character set identifier of which correspond to the received target domain name, and determining the network address associated with the one database record. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer server according to <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the record character set identifiers for each said database record are uniquely associated with a respective character set. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A method of resolving a domain name, comprising the steps of: 
<claim-text>receiving over a network a request to resolve a target domain name into a network address, the received target domain name including a domain name label and a name character set identifier, the domain name label comprising a sequence of name characters having a name character set type, the name character set identifier being associated with the name character set type; </claim-text>
<claim-text>querying a name database for a network address associated with the received target domain name, the address name database including a plurality of database records each being associated with a respective network address, at least one of the database records including a plurality of address names and a plurality of record character set identifiers, each said address name comprising a sequence of record characters having a record character set type, each said record character set identifier being associated with one of the address names and with the respective record character set type; and </claim-text>
<claim-text>resolving the request in accordance with a result of the query, the resolving step comprising the steps of locating in the name database the one database record the address name and record character set identifier of which correspond to the received target domain name, and determining the network address associated with the one database record. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein the record character set identifiers for each said database record are uniquely associated with a respective character set.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005157A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005157A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005157A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005157A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005157A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005157A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005157A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
