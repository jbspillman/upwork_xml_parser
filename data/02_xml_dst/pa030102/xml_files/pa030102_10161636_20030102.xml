<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005071A1-20030102-D00000.TIF SYSTEM "US20030005071A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005071A1-20030102-D00001.TIF SYSTEM "US20030005071A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005071A1-20030102-D00002.TIF SYSTEM "US20030005071A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005071A1-20030102-D00003.TIF SYSTEM "US20030005071A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005071A1-20030102-D00004.TIF SYSTEM "US20030005071A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005071A1-20030102-D00005.TIF SYSTEM "US20030005071A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005071</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10161636</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020605</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-170377</doc-number>
</priority-application-number>
<filing-date>20010606</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/167</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>213000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Inter-processor communication system and method</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Yasushi</given-name>
<family-name>Kanoh</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>NEC CORPORATION</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>FOLEY AND LARDNER</name-1>
<name-2>SUITE 500</name-2>
<address>
<address-1>3000 K STREET NW</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20007</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A transmitter <highlight><bold>43 </bold></highlight>transmits a write address (i.e., address translation packet before sending the first data packet of a command). A receiver <highlight><bold>5, </bold></highlight>when receiving the address translation packet, executes address translation of a write address. The receiver <highlight><bold>5 </bold></highlight>also preliminarily executes address translation in advance during inter-processor communication for reducing overhead of address translation in the destination processor that occurs for each page. The transmitter reports the total number of pages in advance for suppressing wasteful address translation subsequent to the last page. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims benefit of Japanese Patent Application No. 2001-170377 filed on Jun. 6, 2001, the contents of which are incorporated by the reference. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to inter-processor communication systems and inter-processor communication methods used therefor and, more particularly, to an inter-processor communication method for a plurality of processors connected to a network, in which logical addresses are used as data read and write addresses. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In the prior art inter-processor communication, the use of an erroneous data write address in the destination processor may cause system down of the destination processor. Accordingly, destination processor protection is provided by various means. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> As an example, a received data buffer area is determined to permit writing of data only in this area in the inter-process communication (this method is hereinafter referred to as first prior art technique). In this case, the receiver in the destination processor limits their write address to a physical address determined by the receiver, or to a region which obtained by masking a physical address designated by the source processor with mask bit pattern determined by the receiver. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> As a different example, the source processor designates the write address not as physical address but as logical address (this method is hereinafter referred to as second prior art technique). In this case, the receiver in the destination processor executes the translation of the write address from a logical address to a physical address. In this method, the physical address obtained by address translation in the receiver can be limited to be in a particular address range, and it is thus possible to protect the destination processor. However, if the designated write address is invalid, it would result in failure of the address translation. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In the above first prior art, copying of data from the received data buffer area to a user&apos;s area is necessary, it causes degraded throughput performance and the latency performance of the inter-processor communication. Accordingly, the second prior art technique method is frequently used, in which the write address is designated as logical address. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In the second prior art technique, however, a means for translating the designated logical address to physical address is necessary. This address translation is needed for each page, and the normal page size is 4 Kbytes. Therefore, transmission of large quantity of data in the inter-processor communication requires a very large address translation table, which cannot be fully held in the receiver. Accordingly, the full address translation table is mounted in the main memory, and the receiver reads part of the table from the main memory as desired for the address translation. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> This means that the address translation gives rise to access to the main memory, thus leading to overhead in the inter-processor communication. Particularly, when the main memory is accessed for address translation at the time of packet reception, the writing of packet data can be executed only after the address translation. Until the end of the address translation, therefore, the receiver cannot read data from the network. This has bad effects on other inter-processor communication as well. For improving the inter-processor communication performance, it is thus necessary to reduce such overhead. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The above prior art inter-processor communication has a problem that when the write address in the destination processor is designated as logical address in the parallel computer system, it is difficult to reduce or conceal the overhead in the address translation in the receiver. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> An object of the present invention, accordingly, is to provide an inter-processor communication system and an inter-processor communication method used therefor, which permit reduction or concealment of the address translation overhead in the receiver. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to an aspect of the present invention, there is provided an inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: a transmitting means for transmitting a packet for requesting address translation of a write address in a destination processor as designated by logical address to the destination processor when transmitting data thereto; a means for translating a write address transmitted from the source processor to a physical address; and a means for using the result of the address translation as a write address for writing data transmitted subsequent to the packet for requesting the address translation. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The transmitting means transmits a packet for requesting address translation of the write address to the destination processor before translating the read address of the transmission data as designated by the logical address to physical address. The write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> According to another aspect of the present invention, there is provided an inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: a means for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the destination processor; a means for storing the result of the write address translation; and a means for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to other aspect of the present invention, there is provided an inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: a means for translating a read address of transmission data designated by logical address to physical address when transmitting data to the destination processor; and a means for storing the result of the read address translation, and a means for executing subsequently necessary read address translation in advance before the read address translation result stored earlier becomes incapable of being used. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to still other aspect of the present invention, there is provided an inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: a means for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the designation processor; a means for storing the result of the writ e address translation; a means for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used; a means for translating a read address of transmission data designated by logical address to physical address at the time of data transmission to the destination processor; a means for storing the result of the read address translation; and a means for executing subsequently necessary read address translation before the stored read address translation result becomes incapable of being used, wherein the write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. When data are transmitted in a plurality of packets under control of a communication command, a packet for requesting the address translation is transmitted only right before the first packet for transmitting the transmission data pertaining to the command, and subsequently only the packets for transmitting the transmission data are transmitted. The storing means for storing the write address translation result manages the write address translation result for each source processor, and stores two write address translation results, i.e., one being in use and the other one obtained by in-advance address translation, for the same source processor. A packet for requesting the address translation has the total number of pages in the destination processor of data transmitted under control of the command, and the destination processor counts down the pages to predict the last page to be written under control of the command, thus suppressing wasteful in-advance address translation subsequent to the last page. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to further aspect of the present invention, there is provided an inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: a step for transmitting a packet for requesting address translation of a write address in a destination processor as designated by logical address to the destination processor when transmitting data thereto; a step for translating a write address transmitted from the source processor to a physical address; and a step for using the result of the address translation as a write address for writing data transmitted subsequent to the packet for requesting the address translation. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The transmitting step transmits a packet for requesting address translation of the write address to the destination processor before translating the read address of the transmission data as designated by the logical address to physical address. The write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> According to still further aspect of the present invention, there is provided an inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: a step for translating a write address in a destination process or as designated by logical address to physical address at the time of packet reception in the destination processor; a step for storing the result of the write address translation; and a step for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to other aspect of the present invention, there is provided an inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: a step for translating a read address of transmission data designated by logical address to physical address when transmitting data to the destination processor; and a step for storing the result of the read address translation, and a means for executing subsequently necessary read address translation in advance before the read address translation result stored earlier becomes incapable of being used. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to still other aspect of the present invention, there is provided an inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: a step for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the designation processor; a step for storing the result of the write address translation; a step for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used; a step for translating a read address of transmission data designated by logical address to physical address at the time of data transmission to the destination processor; a step for storing the result of the read address translation; and a step for executing subsequently necessary read address translation before the stored read address translation result becomes incapable of being used, wherein the write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> When data are transmitted in a plurality of packets under control of a communication command, a packet for requesting the address translation is transmitted only right before the first packet for transmitting the transmission data pertaining to the command, and subsequently only the packets for transmitting the transmission data are transmitted. The storing step for storing the write address translation result manages the write address translation result for each source processor, and stores two write address translation results, i.e., one being in use and the other one obtained by in-advance address translation, for the same source processor. A packet for requesting the address translation has the total number of pages in the destination processor of data transmitted under control of the command, and the destination processor counts down the number of pages in order to predict the last page to be written under control of the command, thus suppressing wasteful in-advance address translation subsequent to the last page. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> More specifically, in a first inter-processor communication system according to the present invention, when the write address in the destination processor is designated by the logical address, a packet for requesting in-advance address translation is transmitted for the execution of address translation of the write address in the destination processor in advance. When the read address is also designated by logical address, the packet for requesting the in-advance address translation is transmitted before translating the read address in order to permit early start of the in-advance write address translation in the destination processor. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In a second inter-processor communication system according to the present invention, it is made possible to execute address translation of write addresses of transmitted data in advance. Thus, the address translation occurring during data transfer of a command is executed in advance for concealing overhead in address translation of write address in the destination processor. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In a third inter-processor communication system according to the present invention, when the read address is also designated by logical address, it is made possible to execute address translation of read addresses of the transmission data in advance. Thus, the overhead of address translation of read address occurring during data transfer of a command is concealed. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In a fourth inter-processor communication system according to the present invention, it is made possible to execute address translation of read and write addresses in advance, thus concealing overhead of address translation of read and write addresses during data transfer of a command. When a command is transmitted as a plurality of packets, the only packet for requesting address translation of write address is transmitted before packets for transmitting the transmission data to permit execution of the address translation of the write address before data arrival. The results of address translation of write addresses are managed for individual source processors, so that the result of address translation of the write address of packets transmitted by a certain processor will not be destroyed by packets from different processors. Furthermore, the packet for requesting address translation is transmitted by adding the total number of pages of data write area, so that the in-advance translation of write addresses is executed only up to the last page and not unnecessarily executed. In this way, necessary address translation is prevented from being interfered by wasteful address translation. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As shown above, before address translation of read address of the transmission data for the transmitter of transmitting side processor and data read, the address translation of the write address is executed in advance in the receiver of the destination processor. Owing to this, no address translation has to be executed at the data arrival time in the destination processor. Thus, in the inter-processor communication with write addresses designated by logical addresses, it is possible to reduce the time necessary for the address translation in the receiver of the destination processor. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Furthermore, in the case without application of the present invention, for reducing the address translation time in the receiver of the destination processor, it is necessary to hold the full address translation table in the receiver. According to the present invention, by executing the address translation in advance and storing only the result, it is possible to use the result at the data arrival time, thus permitting reduction of the capacity o f the storing means for holding the address translation result. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Moreover, in case when data of a plurality of pages are transmitted under control of a command, by executing the address translation of read and write addresses in advance, the inter-processor communication is now free from being interrupted by address translation. It is thus possible to reduce or conceal overhead of address translation in the receiver. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Other objects and features will be clarified from the following description with reference to attached drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram to illustrate an inter-processor communication system as an embodiment of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> FIGS. <highlight><bold>2</bold></highlight>(<highlight><italic>a</italic></highlight>) and <highlight><bold>2</bold></highlight>(<highlight><italic>b</italic></highlight>) represent format diagrams of an address translation packet and a normal packet used in one embodiment of the present invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram to illustrate details of the address translation table <highlight><bold>55</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow chart illustrating a command processing routine in a source processor in the embodiment; and </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow chart illustrating a packet processing routine in the destination processor in the embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">PREFERRED EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Preferred embodiments of the present invention will now be described with reference to the drawings. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram to illustrate an inter-processor communication system as an embodiment of the present invention. Referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the embodiment of the inter-processor communication system according to the present invention constitutes a parallel computer comprising a plurality of processors <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>-n connected to a network <highlight><bold>100</bold></highlight>. The processors <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>-n each includes a CPU <highlight><bold>2</bold></highlight>, a main memory <highlight><bold>3</bold></highlight>, a transmitter <highlight><bold>4</bold></highlight> and a receiver <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The transmitter <highlight><bold>4</bold></highlight> includes a command read circuit <highlight><bold>41</bold></highlight>, a command register <highlight><bold>42</bold></highlight>, a packet generating circuit <highlight><bold>43</bold></highlight>, an address translating circuit <highlight><bold>44</bold></highlight>, and an FIFO (First-In First-Out) memory <highlight><bold>45</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The command read circuit <highlight><bold>41</bold></highlight> reads out, in response to a transmission request from the CPU <highlight><bold>2</bold></highlight>, a command <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>from a command queue <highlight><bold>31</bold></highlight> provided in the main memory <highlight><bold>3</bold></highlight>, checks the contents of the command <highlight><bold>31</bold></highlight><highlight><italic>a</italic></highlight>, and if detecting no error, stores the command <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>in the command register <highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The packet generating circuit <highlight><bold>43</bold></highlight> translates a read address written in the command <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>stored in the command register <highlight><bold>42</bold></highlight> from logical address to physical address by using the address translating circuit <highlight><bold>44</bold></highlight>. The packet generating circuit <highlight><bold>43</bold></highlight> generates a header of packet by using information stored in the command register <highlight><bold>42</bold></highlight> like a destination processor and so on. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The packet generating circuit <highlight><bold>43</bold></highlight> requests the main memory <highlight><bold>3</bold></highlight> to read data from the physical read address obtained by the translation in the address translating circuit <highlight><bold>44</bold></highlight>, and causes the read data to be transmitted as a packet to the network <highlight><bold>100</bold></highlight>. The circuit <highlight><bold>43</bold></highlight> also generates an address translation packet from destination processor&apos;s write address in the command register <highlight><bold>42</bold></highlight>, and transmits the generated packet to the network <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The address translating circuit <highlight><bold>44</bold></highlight> translates the read address in the command register <highlight><bold>42</bold></highlight> from a logical address to a physical address. The circuit <highlight><bold>44</bold></highlight> executes this translation with reference to data of a page table <highlight><bold>33</bold></highlight> in the main memory <highlight><bold>3</bold></highlight>. The FIFO memory <highlight><bold>45</bold></highlight> is interposed between the network <highlight><bold>100</bold></highlight> and the packet generating circuit <highlight><bold>43</bold></highlight> to serve to change data width and to generate error detection codes, etc. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The receiver <highlight><bold>5</bold></highlight> includes an FIFO memory <highlight><bold>51</bold></highlight>, a source processor number register <highlight><bold>52</bold></highlight>, a write address register <highlight><bold>53</bold></highlight>, an address translating circuit <highlight><bold>54</bold></highlight>, a data write circuit <highlight><bold>57</bold></highlight> and a total page number counter <highlight><bold>58</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The FIFO memory <highlight><bold>51</bold></highlight> temporarily stores packets transmitted from the network <highlight><bold>100</bold></highlight>. The source processor number register <highlight><bold>52</bold></highlight> stores the processor number of the processor that transmitted the packet and the processor number is contained in the header of the packet. The write address register <highlight><bold>53</bold></highlight> stores a write address, which is contained in the header of a packet for writing the data of that packet. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The address translating circuit <highlight><bold>54</bold></highlight> translates the write address in the write address register <highlight><bold>53</bold></highlight> from a logical address to a physical address, and provides the physical write address for the data write circuit <highlight><bold>57</bold></highlight>. The address translating circuit <highlight><bold>54</bold></highlight> has a translation table <highlight><bold>55</bold></highlight>, in which a correspondence table relating logical page numbers <highlight><bold>55</bold></highlight><highlight><italic>a </italic></highlight>and physical page numbers <highlight><bold>55</bold></highlight><highlight><italic>b </italic></highlight>to one another is stored. The translation table <highlight><bold>55</bold></highlight> is re-written with reference to values in a page table <highlight><bold>33</bold></highlight> in the main memory <highlight><bold>3</bold></highlight>. The address translating circuit <highlight><bold>54</bold></highlight> reads out a logical page number <highlight><bold>55</bold></highlight><highlight><italic>a </italic></highlight>in a translation table <highlight><bold>55</bold></highlight> by using the source processor number in the source processor number register <highlight><bold>52</bold></highlight>, and it has a comparator <highlight><bold>56</bold></highlight>, which compares the read logical page number <highlight><bold>55</bold></highlight><highlight><italic>a </italic></highlight>and the logical page number <highlight><bold>59</bold></highlight> in the write address register <highlight><bold>53</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The data write circuit <highlight><bold>57</bold></highlight> writes received data <highlight><bold>34</bold></highlight> transmitted as packet in the physical write address in the main memory <highlight><bold>3</bold></highlight> that has been outputted fro m the address translating circuit <highlight><bold>54</bold></highlight>. The total page number counter <highlight><bold>58</bold></highlight> stores the total number of pages in a destination processor of data transmitted in response to one command, and reduces the stored number by one whenever address translation of one page is completed, so that address translation of pages subsequent to the last page is not made in advance. The counter <highlight><bold>58</bold></highlight> counts pages for each source processor. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>(<highlight><italic>a</italic></highlight>) represents the format diagram of an address translation packet used in one embodiment of the present invention, and <cross-reference target="DRAWINGS">FIG. 2</cross-reference>(<highlight><italic>b</italic></highlight>) represents the format diagram of a normal packet used in one embodiment of the present invention. That is, FIGS. <highlight><bold>2</bold></highlight>(<highlight><italic>a</italic></highlight>) and <highlight><bold>2</bold></highlight>(<highlight><italic>b</italic></highlight>) show two different kinds of packets f or communication in one embodiment of the inter-processor communication system according to the present invention. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Address translation packet A comprises destination processor number A<highlight><bold>1</bold></highlight>, source processor number A<highlight><bold>2</bold></highlight>, write logical address A<highlight><bold>3</bold></highlight> and total transfer page number A<highlight><bold>4</bold></highlight>. The destination processor number A<highlight><bold>1</bold></highlight> is used for routing in the network <highlight><bold>100</bold></highlight>, and the total transfer page number A<highlight><bold>4</bold></highlight> is the total number of pages of written data transmitted in response to one command. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Normal packet B comprises destination processor number B<highlight><bold>1</bold></highlight>, source processor number B<highlight><bold>2</bold></highlight>, data length B<highlight><bold>3</bold></highlight>, write logical address B<highlight><bold>4</bold></highlight> and data B<highlight><bold>5</bold></highlight>. By the term &ldquo;data length B<highlight><bold>3</bold></highlight>&rdquo; is meant the length of data transmitted in the packet. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram to illustrate details of the address translation table <highlight><bold>55</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Referring to the Figure, the address translation table <highlight><bold>55</bold></highlight> can store two pairs of logical page numbers and physical page numbers <highlight><bold>552</bold></highlight> and <highlight><bold>555</bold></highlight>, and <highlight><bold>553</bold></highlight> and <highlight><bold>556</bold></highlight> for each source processor number. Bits <highlight><bold>554</bold></highlight> and <highlight><bold>557</bold></highlight> which indicate whether the physical page number is valid are added to these pairs, respectively. Furthermore the table <highlight><bold>55</bold></highlight> has a bit <highlight><bold>551</bold></highlight> which indicates which pair is in use for each source processor number. The in-advance address translation result is stored in the pair of a logical page number and a physical page number indicated by the bit <highlight><bold>551</bold></highlight> to be out of use. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The two logical page numbers selected by the source processor number <highlight><bold>601</bold></highlight> from the address translation table <highlight><bold>55</bold></highlight> are compared in comparators <highlight><bold>56</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>56</bold></highlight><highlight><italic>b</italic></highlight>, respectively, with logical page number <highlight><bold>59</bold></highlight> from the write address register <highlight><bold>53</bold></highlight>, and the results are used for physical address selection in an MUX (multiplexer) <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The normal address translation process is as follows. The two logical page numbers <highlight><bold>552</bold></highlight> and <highlight><bold>555</bold></highlight> selected by the source processor number <highlight><bold>601</bold></highlight> are compared with the logical page number <highlight><bold>59</bold></highlight> from the write address register <highlight><bold>52</bold></highlight>. If the same logical page number is present, the MUX <highlight><bold>60</bold></highlight> selects the appropriate one of the two physical address numbers <highlight><bold>553</bold></highlight> and <highlight><bold>556</bold></highlight> also selected by the source processor number <highlight><bold>601</bold></highlight> for address translation. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> If the bit <highlight><bold>554</bold></highlight> or <highlight><bold>557</bold></highlight> indicates the selected physical page number is invalid, it means that the physical address is reading from the page table <highlight><bold>33</bold></highlight> on the main memory <highlight><bold>3</bold></highlight> now. Therefore the address translation is done after reading data from the page table <highlight><bold>33</bold></highlight>. If the physical page number selected by the MUX <highlight><bold>60</bold></highlight> is in the different pair from the pair indicated by the bit <highlight><bold>551</bold></highlight>, the bit <highlight><bold>551</bold></highlight> is re-written in order to indicate that this pair is in use. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> If both the logical page numbers <highlight><bold>552</bold></highlight> and <highlight><bold>555</bold></highlight> are different from the logical page number <highlight><bold>59</bold></highlight>, the page table <highlight><bold>33</bold></highlight> should be accessed. Where the address translation is executed in advance according to the present invention, this does not take place. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The in-advance address translation process will now be described. The processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> writes the logical page number <highlight><bold>59</bold></highlight> outputted from the written address register <highlight><bold>53</bold></highlight> in one of the two logical page numbers <highlight><bold>552</bold></highlight> and <highlight><bold>555</bold></highlight> selected by the source processor number <highlight><bold>601</bold></highlight> which is out of use, as indicated by the bit <highlight><bold>551</bold></highlight>. Subsequently, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> rewrites either one of the bits <highlight><bold>554</bold></highlight> and <highlight><bold>557</bold></highlight> which indicates whether the corresponding physical page number is valid in order to indicate the physical page number is invalid, then reads out the physical page number by accessing the page table <highlight><bold>33</bold></highlight> on the memory <highlight><bold>3</bold></highlight>, writes it in either one of the physical page number <highlight><bold>553</bold></highlight> and <highlight><bold>556</bold></highlight> and makes either one of the effective bits <highlight><bold>554</bold></highlight> and <highlight><bold>557</bold></highlight> valid. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow chart illustrating a command processing routine in a source processor in an embodiment. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flow chart illustrating a packet processing routine in the destination processor in one embodiment of the present invention. The command and packet processing routines in one embodiment of the present invention will now be described with reference to FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In command processing in the source processor, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> transmits write logical address A<highlight><bold>3</bold></highlight> and total transfer page number A<highlight><bold>4</bold></highlight> as address translation packet A to the destination processor. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Then, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> starts address translation of the read address (step S<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>), and waits for completion of the address translation of the read address (step S<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> When the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> completes the address translation, it reads out data for one packet (step S<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>), and transmits one packet (step S<highlight><bold>4</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). When the transmitted packet is not the last packet (step S<highlight><bold>5</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>), the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> checks whether in-advance address translation of the read address is necessary (step S<highlight><bold>6</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). If the in-advance address translation of the read address is necessary, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> starts the in-advance address translation (step S<highlight><bold>6</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> decides whether the in-advance address translation of the read address is necessary by checking whether the read address is close to the page boundary, and it starts the in-advance address translation at such timing that the in-advance address translation has been completed by the time the result thereof is necessary. This process is continued until completion of the transmission of the last packet of the command. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In packet processing in the destination processor, when the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> receives a packet, it checks whether the packet is the address translation packet A (step S<highlight><bold>11</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). Since the first packet in one command is the address translation packet A, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> executes the in-advance address translation of the write address designated in the packet (step S<highlight><bold>12</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> When normal packet is eventually transmitted (step S<highlight><bold>11</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>), the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> checks whether the in-advance address translation has been completed, and waits for the completion thereof (step S<highlight><bold>13</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). The check as to whether the in-advance address translation has been completed is executed by checking whether the physical page number is valid, in the address translation table shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, which is selected by the source processor number and the write logical page number of the packet. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> When the in-advance address translation is completed, the processor <highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> writes data (step S<highlight><bold>14</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>), and then checks whether the in-advance address translation is necessary (step S<highlight><bold>15</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). The in-advance address translation, like the address translation of the read address, is executed at such timing that it has been completed before arrival of the packet for using its result therefor. The in-advance address translation is done when an d only when the total page number counter <highlight><bold>58</bold></highlight> indicates that the current page in use is other than the last page (step S<highlight><bold>16</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> As has been shown, before a source processor translates read address of transmitted data and reads the data, the source processor sends an address translation packet to the destination processor in order to request to translate write address in advance. Thus, no address translation is necessary at the first normal packet with data arrival, and it is thus possible to reduce time for address translation in the receiver <highlight><bold>5</bold></highlight> of the destination processor. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In addition, when the embodiment is not applied, for reducing the address translation time in the receiver of the destination processor, it is necessary to hold the full address translation table in the receiver. According to the present invention, the address translation is executed in advance, and only the in-advance translation result is stored. Thus, at the normal packet with data arrival time the result can be used, and the capacity of the storing means necessary for holding the address translation result can be reduced. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Furthermore, when plural pages of data are transmitted under control of one command, the address translation of read and write addresses is/are executed in advance. It is thus possible to obtain inter-processor communication without being interrupted by address translation. Thus, it is possible to reduce or conceal overhead of the address translation in the receiver <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Changes in construction will occur to those skilled in the art and various apparently different modifications and embodiments may be made without departing from the scope of the present invention. The matter set forth in the foregoing description and accompanying drawings is offered by way of illustration only. It is therefore intended that the foregoing description be regarded as illustrative rather than limiting. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> As has been described in the foregoing, according to the present invention, in the inter-processor communication system with a plurality of processors connected by a network as a parallel computer, when each of the processors transmits data to the destination processor, it transmits a packet for requesting address translation of write address in the destination processor as designated by the physical address to the destination processor, the write address transmitted from the source processor is converted to the physical address, the result of the address translation is made to be write address of data transmitted subsequent to the packet for requesting the address translation. In this way, it is possible to reduce or conceal overhead of the address translation in the receiver. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each said processor including: 
<claim-text>a transmitting means for transmitting a packet for requesting address translation of a write address in a destination processor as designated by logical address to the destination processor when transmitting data thereto; </claim-text>
<claim-text>a means for translating said write address transmitted from the source processor to a physical address; and </claim-text>
<claim-text>a means for using the result of the address translation as a write address for writing data transmitted subsequent to said packet for requesting the address translation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The inter-processor communication system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said transmitting means transmits said packet for requesting address translation of the write address to the destination processor before translating the read address of the transmission data as designated by the logical address to physical address. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The inter-processor communication system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein a write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted said packet for requesting the address translation and the write address designated by said packet for transmitting the transmission data therein are different, the write address designated in said packet for transmitting the transmission data therein is re-translated for use. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. An inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: 
<claim-text>a means for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the destination processor; </claim-text>
<claim-text>a means for storing the result of the write address translation; and </claim-text>
<claim-text>a means for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. An inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: 
<claim-text>a means for translating a read address of transmission data designated by logical address to physical address when transmitting data to the destination processor; and </claim-text>
<claim-text>a means for storing the result of the read address translation, and a means for executing subsequently necessary read address translation in advance before the read address translation result stored earlier becomes incapable of being used. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. An inter-processor communication system of parallel computer in which a plurality of processors are connected by a network, each processor including: 
<claim-text>a means for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the designation processor; </claim-text>
<claim-text>a means for storing the result of the write address translation; </claim-text>
<claim-text>a means for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes incapable of being used; </claim-text>
<claim-text>a means for translating a read address of transmission data designated by logical address to physical address at the time of data transmission to the destination processor; </claim-text>
<claim-text>a means for storing the result of the read address translation; and </claim-text>
<claim-text>a means for executing subsequently necessary read address translation before the stored read address translation result becomes incapable of being used, </claim-text>
<claim-text>wherein the write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The inter-processor communication system according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein when data are transmitted in a plurality of packets under control of a communication command, said packet for requesting the address translation is transmitted only right before the first packet for transmitting the transmission data pertaining to the command, and subsequently only the packets for transmitting the transmission data are transmitted. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The inter-processor communication system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said storing means for storing the write address translation result manages the write address translation result for each source processor, and stores two write address translation results, i.e., one being in use and the other one obtained by in-advance address translation, for the same source processor. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The inter-processor communication system according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said packet for requesting the address translation has the total number of pages in the destination processor of data transmitted under control of the command, and the destination processor counts down the number of pages in order to predict the last page to be written under control of the command, thus suppressing wasteful in-advance address translation subsequent to the last page. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each said processor including steps of: 
<claim-text>a step for transmitting a packet for requesting address translation of a write address in a destination processor as designated by logical address to the destination processor when transmitting data thereto; </claim-text>
<claim-text>a step for translating said write address transmitted from the source processor to a physical address; and </claim-text>
<claim-text>a step for using the result of the address translation as a write address for writing data transmitted subsequent to said packet for requesting the address translation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The inter-processor communication method according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein said transmitting step transmits said packet for requesting address translation of the write address to the destination processor before translating the read address of the transmission data as designated by the logical address to physical address. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The inter-processor communication method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted said packet for requesting the address translation and the write address designated by said packet for transmitting the transmission data therein are different, the write address designated in said packet for transmitting the transmission data therein is re-translated for use. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: 
<claim-text>a step for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the destination processor; </claim-text>
<claim-text>a step for storing the result of the write address translation; and </claim-text>
<claim-text>a step for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes in capable of being used. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: 
<claim-text>a step for translating a read address of transmission data designated by logical address to physical address when transmitting data to the destination processor; and </claim-text>
<claim-text>a step for storing the result of the read address translation, and a means for executing subsequently necessary read address translation in advance before the read address translation result stored earlier becomes incapable of being used. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. An inter-processor communication method of parallel computer in which a plurality of processors are connected by a network, each processor including steps of: 
<claim-text>a step for translating a write address in a destination processor as designated by logical address to physical address at the time of packet reception in the designation processor; </claim-text>
<claim-text>a step for storing the result of the write address translation; </claim-text>
<claim-text>a step for executing subsequently necessary write address translation in advance before the write address translation result stored earlier becomes in capable of being used; </claim-text>
<claim-text>a step for translating a read address of transmission data designated by logical address to physical address at the time of data transmission to the destination processor; </claim-text>
<claim-text>a step for storing the result of the read address translation; and </claim-text>
<claim-text>a step for executing subsequently necessary read address translation before the stored read address translation result becomes incapable of being used, </claim-text>
<claim-text>wherein the write address is designated in the packet for transmitting the transmission data therein, and when a write address added to the previously transmitted packet for requesting the address translation and the write address designated by the packet for transmitting the transmission data therein are different, the write address designated in the packet for transmitting the transmission data therein is re-translated for use. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The inter-processor communication method according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein when data are transmitted in a plurality of packets under control of a communication command, said packet for requesting the address translation is transmitted only right before the first packet for transmitting the transmission data pertaining to the command, and subsequently only the packets for transmitting the transmission data are transmitted. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The inter-processor communication method according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said storing step for storing the write address translation result manages the write address translation result for each source processor, and stores two write address translation results, i.e., one being in use and the other one obtained by in-advance address translation, for the same source processor. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The inter-processor communication method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein said packet for requesting the address translation has the total number of pages in the destination processor of data transmitted under control of the command, and the destination processor counts down the number of pages in order to predict the last page to be written under control of the command, thus suppressing wasteful in-advance address translation subsequent to the last page.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005071A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005071A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005071A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005071A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005071A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005071A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
