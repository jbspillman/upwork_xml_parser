<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005000A1-20030102-D00000.TIF SYSTEM "US20030005000A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00001.TIF SYSTEM "US20030005000A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00002.TIF SYSTEM "US20030005000A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00003.TIF SYSTEM "US20030005000A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00004.TIF SYSTEM "US20030005000A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00005.TIF SYSTEM "US20030005000A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00006.TIF SYSTEM "US20030005000A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00007.TIF SYSTEM "US20030005000A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00008.TIF SYSTEM "US20030005000A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00009.TIF SYSTEM "US20030005000A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00010.TIF SYSTEM "US20030005000A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00011.TIF SYSTEM "US20030005000A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00012.TIF SYSTEM "US20030005000A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00013.TIF SYSTEM "US20030005000A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00014.TIF SYSTEM "US20030005000A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00015.TIF SYSTEM "US20030005000A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00016.TIF SYSTEM "US20030005000A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00017.TIF SYSTEM "US20030005000A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00018.TIF SYSTEM "US20030005000A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00019.TIF SYSTEM "US20030005000A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00020.TIF SYSTEM "US20030005000A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00021.TIF SYSTEM "US20030005000A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00022.TIF SYSTEM "US20030005000A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00023.TIF SYSTEM "US20030005000A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00024.TIF SYSTEM "US20030005000A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00025.TIF SYSTEM "US20030005000A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030005000A1-20030102-D00026.TIF SYSTEM "US20030005000A1-20030102-D00026.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005000</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10162625</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020531</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>513000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Technique for implementing browser-initiated user-transparent network-distributed advertising and for interstitially displaying an advertisement, so distributed, through a web browser in response to a user click-stream</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10162625</doc-number>
<kind-code>A1</kind-code>
<document-date>20020531</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09352398</doc-number>
<document-date>19990713</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6317761</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>09352398</doc-number>
<document-date>19990713</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09237718</doc-number>
<document-date>19990126</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>09237718</doc-number>
<document-date>19990126</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09080165</doc-number>
<document-date>19980515</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-in-part-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Rick</given-name>
<middle-name>W.</middle-name>
<family-name>Landsman</family-name>
</name>
<residence>
<residence-us>
<city>Waccabuc</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Wei-Yeh</given-name>
<family-name>Lee</family-name>
</name>
<residence>
<residence-us>
<city>New York</city>
<state>NY</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Unicast Communications Corporation, a corporation of the State of Delaware</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>MICHAELSON AND WALLACE</name-1>
<name-2>PARKWAY 109 OFFICE CENTER</name-2>
<address>
<address-1>328 NEWMAN SPRINGS RD</address-1>
<address-2>P O BOX 8489</address-2>
<city>RED BANK</city>
<state>NJ</state>
<postalcode>07701</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A technique for implementing in a networked client-server environment, e.g., the Internet, network-distributed advertising in which advertisements are downloaded, from an advertising server to a browser executing at a client computer, in a manner transparent to a user situated at the browser, and subsequently displayed, by that browser and on an interstitial basis, in response to a click-stream generated by the user to move from one web page to the next. Specifically, an HTML advertising tag is embedded into a referring web page. This tag contains two components. One component effectively downloads, from an distribution web server and to an extent necessary, and then persistently instantiates an agent at the client browser. This agent &ldquo;politely&rdquo; and transparently downloads advertising files (media and where necessary player files), originating from an ad management system residing on a third-party advertising web server, for a given advertisement into browser cache and subsequently plays those media files through the browser on an interstitial basis and in response to a user click-stream. The other component is a reference, in terms of a web address, of the advertising management system. This latter reference totally &ldquo;decouples&rdquo; advertising content from a web page such that a web page, rather than embedding actual advertising content within the page itself, merely includes an advertising tag that refers, via a URL, to a specific ad management system rather than to a particular advertisement or its content. The ad management system selects the given advertisement that is to be downloaded, rather than having that selection or its content being embedded in the web content page. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a continuation-in-part of our co-pending United States patent application entitled &ldquo;LOCALLY-SUMMONED NETWORK-DISTRIBUTED CONFIRMED INFORMATIONAL PRESENTATIONS&rdquo;, filed May 15, 1998 and assigned Ser. No. 09/080,165; the latter application is incorporated by reference herein.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE DISCLOSURE </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The invention relates to a technique, specifically apparatus and accompanying methods, for implementing in a networked client-server environment, such as the Internet, network-distributed advertising in which an advertisement is downloaded, from an advertising server to a web browser executing at a client computer, in a manner transparent to a user situated at the browser, and subsequently displayed, by that browser and on an interstitial basis, in response to a click-stream generated by the user to move from one web page to the next. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Prior Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Currently, Internet usage, and particularly that of the World Wide Web (henceforth referred to as simply the &ldquo;web&rdquo;), is growing explosively, particularly as the number of web sites and users that have access to the Internet continue to rapidly and to a great extent, exponentially, expand. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In essence, after establishing a suitable network connection to the Internet, a user at a client computer can easily employ a graphical web browser, such as the Internet Explorer (&ldquo;IE&rdquo;) browser presently available from Microsoft Corporation of Redmond, Wash., to connect to a web site and then download a desired web page by simply supplying a specific address (known as a URL or uniform resource locator) of that page to the browser. The URL identifies both an address of the site, in terms of its Internet domain name, and a page of information at that site, in terms of its corresponding file name. Each web site stores at least one, and often times substantially more pages all arranged in a pre-defined hierarchy, generally beginning, at its root, with a so-called &ldquo;home page&rdquo;. Each such page is written in HTML (hypertext markup language) form. A page, in this context, refers to content accessed via a single URL, including, e.g., text, graphics and other information specified in the code for that particular page. Once a user supplies an URL of interest, the browser operated by that user sends an appropriate command, using a TCP/IP protocol (transmission control protocol/internet protocol), to a remote HTTP (hypertext transport protocol) server, located at the web site and which stores that page, to access and download a corresponding file for that page. In response, the server then sends, using the TCP/IP protocol, a stored file containing HTML code that constitutes that page back to the browser. As the file that constitutes the page itself is received by the browser, the browser interprets and executes the HTML code in that file to properly assemble and render the page on, e.g., a monitor to a user situated at the client computer. Such a page may itself contain HTML commands that reference other files, residing on the same or different web sites, which, when these commands are appropriately interpreted and executed by the browser, result in those files being downloaded and their resulting content properly assembled by the browser into the rendered page. Once all the content associated with the page is rendered, the user can then position his(her) mouse cursor on a suitable hypertext link, button or other suitable user input field (whichever here implements a &ldquo;hotlink&rdquo;) displayed on that page and then, through, e.g., a mouse &ldquo;click&rdquo;, effectively download a file for and render another desired page in succession until the user has finished his(her) visit to that site, at which point, the user can transition through a hotlink to a page at another site, and so forth. A hotlink specifies a complete web address of an associated page, including a domain name of its hosting web site at which that page is situated. Consequently, by simply and successively positioning and &ldquo;clicking&rdquo; his(her) mouse at an appropriate hotlink for each one of a number of desired web pages, the user can readily retrieve an HTML file for each desired page in succession from its corresponding web site and render that page, and, by doing so, essentially effortlessly jump from site to site, regardless of where those sites are physically located. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Ever since their introduction several years ago, HTML and accompanying browser software, now including, e.g., attendant programming languages such as Java and JavaScript languages (&ldquo;Java&rdquo; is a registered trademark of Sun Microsystems in Mountain View, Calif.; &ldquo;JavaScript&rdquo; is a trademark of Netscape Communications in Mountain View, Calif.), have undergone rather rapid and continual evolution. A major purpose of which has been and continues to be to provide web page authors with an ability to render increasingly rich content through their pages and, as a result, heighten a &ldquo;user experience&rdquo; for those users who visit these pages. Consequently, web pages are no longer limited to relatively simple textual displays&mdash;as occurred with early versions of HTML and browser software, but can now encompass even full-motion multimedia presentations and interactive games that use rather sophisticated graphics. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The simplicity of browsing the web coupled with the relative low-cost of accessing the Internet, and the relative ease through which a web site can be established are collectively fueling unparalleled growth and diffusion of the Internet itself, web sites and the Internet user community throughout the world. In that regard, by establishing web sites, merchants, vendors and other information providers have an unparalleled opportunity, basically unheard of as little as 5-10 years ago, to reach enormous numbers of potential consumers&mdash;regardless of where these consumers reside&mdash;at costs far less than previously thought possible. Moreover, given the staggering amount and wide diversity of information currently available on the web, web browsing is becoming so popular a past-time for sufficient numbers of individuals that browsing is beginning to divert significant viewership away from traditional forms of mass entertainment, such as television and cable. While such diversion is relatively small at present, it is likely to rapidly grow. Moreover, given the ease and convenience with which users, situated at their personal computers and with basically nothing more complicated than a few mouse clicks, can effectively interact with remote web sites, electronic commerce, through which goods and services are ordered through the Internet without ever visiting a physical store, is rapidly emerging as a significant sales medium. This medium is likely to significantly challenge and possibly, over a relatively short time, may even alter traditional forms of retailing. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Given the wide and ever-growing reach of the web as a source of consumer information and the increasing consumer acceptance of electronic commerce, advertisers have clearly recognized the immense potential of the web as an effective medium for disseminating advertisements to a consuming public. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Unfortunately, conventional web-based advertising, for various practical reasons&mdash;some being technical in nature and others relating to a nature of traditional web advertisements themselves, has generally yielded unsatisfactory results and thus has usually been shunned by most large advertisers. In that regard, several approaches exist in the art for implementing web based advertisements. However, all suffer serious limitations of one form or another that have sharply restricted their desirability and use. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Currently, a predominant format, referred to as a &ldquo;banner&rdquo;, for a web advertisement takes the form of a rectangular graphical display situated, typically at a fixed location, in a rendered web page. A banner, which can be static or animated, can be situated anywhere within a rendered web page but most often is situated at a top or bottom, or along a vertical edge of that page. A banner, depending on its size, can extend across an entire page width or length, and usually contains, in a graphical eye-catching form, a name of a product or service being advertised. Increasingly, a banner for a given product or service implements a hotlink to enable a consumer to &ldquo;click-through&rdquo; the banner (i.e., generate a mouse click on the banner) in order to transition, via his browser, to a web site maintained by a corresponding advertiser and, from that site, fetch a web page to provide additional information regarding that product or service. Hence, the consumer could easily obtain more information by a click-through; while an advertiser, monitoring counts of such click-throughs that occur in a given period of time, could gain feedback on the effectiveness of the corresponding banner. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> A banner is generally produced by properly embedding specific HTML code for that banner within the HTML coding for a given web page in which the banner is to appear. A client browser, as it interprets and sequentially executes the HTML code for a fetched page, will, in turn, compile and execute the embedded code for the banner and hence display the banner, as part of a rendered page and at a specified location thereon. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In implementing a banner, whether static or even animated, its HTML coding generally involved downloading an appropriate file, for that banner, to a client browser. The file may be stored on the same server that stores the HTML file for the page, or accessed from a remote server. The file may contain a graphic itself, such as in a GIF (graphic interchange format) file, or a Java applet which, once interpreted and executed by the browser, generates and renders a desired animated graphic. This file, whether it be a graphic or applet, requires time to download and must be downloaded and assembled by the browser on the page prior to that page being fully rendered. The download time for that file, particularly as it increases in size, clearly, a priori, lengthens a time interval during which that page would completely download, thereby extending the time to fully render the page, including the banner, after a user transitioned to that page. Channel bandwidth to a client computer (e.g., personal computer&mdash;PC), such as that provided through a modem connection, is often rather limited. Consequently, if the file size for the banner were relatively large&mdash;as would certainly be the case for relatively &ldquo;rich&rdquo; content, e.g., audio or video content, the delay in downloading such a file over such a limited bandwidth connection could be excessive, and consequently highly frustrating to the user. Hence, a user would likely wait a considerable amount of time before all the page components for multimedia content are fully downloaded to permit that page to be rendered. Such delay, if encountered during a page transition, can be rather frustrating to a user, even to the point at which the user, just to end his(her) waiting, will prematurely terminate the download and transition to another page. Therefore, in an effort to preserve an appropriate &ldquo;editorial experience&rdquo; for a user, content suppliers sharply limit the file size, of such banners to be rendered on their pages, in order to minimize page download and hence latency times. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Unfortunately, such restricted file sizes effectively limit the richness of the content of a banner to a rather simplistic advertisement&mdash;even with animation. Thus, banners often failed, as advertisers soon recognized by relatively low click-through counts, to attract sufficient viewer attention to justify their use and expense. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In an effort to overcome the content limitation associated with banners, the art teaches the use of a different advertising modality: so-called &ldquo;interstitial&rdquo; advertisements. See, e.g., U.S. Pat. No. 5,305,195 (issued to A. J. Murphy on Apr. 19, 1994&mdash;hereinafter the &ldquo;Murphy&rdquo; patent) which discloses the concept of using interstitial advertisements though not in the context of web advertising. As described in the Murphy patent, pre-stored advertisements are displayed at specific intervals on each one of a group of networked ATM (automated transaction machines) terminals. In particular, the advertisements are downloaded, either directly or via a server, from a remote computer and locally stored on each such terminal and subsequently displayed on that terminal while it waits for a response, from a remote mainframe transaction server, to a transaction initiated at that terminal. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Generally speaking and with specific reference to web advertising, interstitial ads are displayed in an interval of time that occurs after a user has clicked on a hot-link displayed by a browser to retrieve a desired web page but before that browser has started rendering that page. Such an interval, commonly referred to as an &ldquo;interstitial&rdquo;, arises for the simple reason that a browser requires time, once a user clicks on a hotlink for a new page, to fetch a file(s) from a remote web server(s) for that particular page and then fully assemble and render that page. The length of an interstitial interval, which is quite variable, is governed by a variety of factors, including, e.g., a number of files required to fully render the new page and the size of each such file, and network and server congestion and attendant delays occurring when the user activated the hotlink. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Interstitial web advertising is taught in, e.g., U.S. Pat. Nos. 5,737,619 and 5,572,643 (both of which issued to D. H. Judson but on Apr. 7, 1998 and Nov. 5, 1996, respectively&mdash;hereinafter the &ldquo;Judson&rdquo; patents). The Judson patents disclose the concept of embedding an advertisement, as an information object, in a web page file in such a manner that the object will remain hidden and not displayed when the file is executed to render the page. Rather than being displayed, the information object is locally cached by the browser during execution of the code for that page. Then, during a transition initiated by user activation of a hotlink to move from that page to a next successive page, i.e., during an interstitial, the browser accesses the advertisement from local cache and displays it until such time as that next successive page is downloaded and rendered. See also, published International patent application WO 97/07656 (to E. Barkat et al and published on Mar. 6, 1997) which teaches the concept of &ldquo;polite&rdquo; downloading. Here, a browser, on a local computer (e.g., a client PC) downloads, from an remote advertising system server and ostensibly as a background process, file(s) for a web advertisement only during those intervals when bandwidth utilization of a communication channel (link) connected to the browser is less than a pre-established threshold. Such &ldquo;polite&rdquo; downloading is intended to minimally interfere with other communication applications, then executing on the client PC, which will utilize the link. The browser displays the downloaded ad(s) to the user only after the user has not interacted, as detected by a conventional screen saver process, with his(her) PC for a predefined period of time, such as by neither moving a mouse nor depressing a key on a keyboard during that period. The server selects those advertisements for download to the client PC based on a user-ID and preference information of the user, who is then situated at that PC, and configuration information of that PC, which, when a connection is established between the client PC and the server, the client PC uploads to the server. Though the files associated with an interstitial advertisement can be large, these files are advantageously fetched by a client browser during those intervals when otherwise the browser would be idle and hence bandwidth utilization of its network connection would be relatively low. Such &ldquo;idle times&rdquo; would occur, in the absence of processing an interstitial ad, after the browser has fully rendered a web page and a user is viewing the page but has not yet clicked on a hotlink to transition to another page. During such an idle time, the browser would simply wait for further user input. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> By reducing, if not eliminating, problems, inherent in banners and engendered by download latency, interstitial web advertisements, by employing idle time downloading and local caching, provide a theoretical promise of conveying very rich media content with a pleasing &ldquo;user experience&rdquo;. However, interstitial advertisements, as conventionally implemented, have serious practical deficiencies which have severely limited their use. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Conventional interstitial, as well as other forms of current, web advertisements&mdash;here not unlike banners&mdash;rely on embedding HTML ad code, as, e.g., a separate non-displayable object, within HTML coding for a web page. Unfortunately, this approach, inherent in that taught by the Judson patents, can be inflexible and expensive for an advertiser to implement and particularly later should that advertiser, for whatever reason, seek to modify his(her) ad content. In particular and presently, ad coding is manually inserted into each and every content web page that is to carry advertising. Consequently, insertion of increasingly sophisticated embedded advertising, such as multi-media or video or audio, in existing web site content requires a large investment in terms of human resources, time and cost as web sites, particularly large sites, increase a number of content pages available for advertising. In that regard, where a banner usually required insertion of, e.g., a single line of HTML code, content rich advertisements, such as those now implemented by parameterized embedded Java advertising applets, often consist of an entire page of coding and hence require far more extensive and increasingly labor-intensive and costly insertions. Moreover, over time, advertisers do change their ads&mdash;such as by replacing one ad with a totally new version. However, once HTML ad coding is embedded within a number of web pages, it can be quite impractical and rather costly for an advertiser to access each and every page in which his(her) ad coding has been inserted and then manually change the ad coding, as desired. The impracticality and attendant cost compound if these pages are copied to other web sites and hence diffuse through the Internet. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Given these deficiencies, the art teaches a concept of implementing web advertising through using so-called &ldquo;push&rdquo; technology. See, e.g., U.S. Pat. No. 5,740,549 (issued to J. P. Reilly et al on Apr. 14, 1998&mdash;hereinafter the &ldquo;Reilly et al&rdquo; patent). In essence and as described in the Reilly et al patent, a client PC, through execution of a &ldquo;push&rdquo; application program (called &ldquo;administration manager&rdquo;), establishes a network connection with an information server, i.e., a &ldquo;push&rdquo; web server, typically during off-hours, such as in the late evening or early morning, or at a predefined interval (e.g., every four hours). The information server then downloads, i.e., &ldquo;pushes&rdquo;, to the administration manager, content files, such as for advertisements and/or other predefined information, that are to be played to the user sometime later. The administration manager, i.e., the &ldquo;push&rdquo; application, in turn, stores all the &ldquo;pushed&rdquo; content files into a local database (referred to as the &ldquo;information database&rdquo;) on a local hard disk and, in response to instructions received from the information server, deletes those previously &ldquo;pushed&rdquo; content files which have already been displayed. The administration manager also maintains a user profile, which specifies user preferences as to the specific advertising and/or other information (s)he wants to receive, in the information database. As such, through each connection, the information server, by selecting content from its database relative to preferences specified in the user profile, attempts to &ldquo;push&rdquo; fresh content to the client PC that is likely to be of interest to the user but without duplicating that which was already displayed. Stored &ldquo;pushed&rdquo; content is later displayed, using a data viewer, either on user demand or during those times when the user is not interacting with the system, here too detected by a conventional screen saver procedure. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> While push technology reduces download latency, by shifting downloads to occur at off-hours, this technology also suffers serious drawbacks which have greatly restricted its practical acceptance. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In particular, to access &ldquo;pushed&rdquo; content, a user must initially download and install to his(her) client PC a separate, platform-specific, software application program, as well as subsequent updates to that program as new push capabilities are released by the manufacturer of the program. Unfortunately, these application programs can often extend to tens of megabytes in length. Since typical Internet users establish modem connections to their Internet service provider, these users will find that downloading these relatively large program files, even in compressed form, will consume an inordinate amount of time and is generally impractical while (s)he is actively using his(her) client PC. Consequently, these users are constrained to purchasing, at some cost, an off-the-shelf version of the application program or downloading that program, typically at no cost for the program itself, at off-hours, when network congestion is relatively light. Furthermore, while some efforts are underway in the art to automatically &ldquo;push&rdquo; and install incremental software updates to a client PC, thus eliminating a need for a user to manually do so, the user still faces the burden associated with the initial download and installation of the &ldquo;push&rdquo; application program. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In addition, &ldquo;push&rdquo; application programs continue to increase in size, often considerably, as they provide added capabilities to a user. Downloading and then regularly updating a push application will reduce, sometimes considerably, the amount of disk space available to the user on his(her) client PC. Furthermore, &ldquo;push&rdquo; applications rely on periodically &ldquo;pushing&rdquo; large quantities of media content from a push server to the client PC and storing that content on the hard disk of that PC pending subsequent display. This content, depending on its volume, can consume inordinate amounts of hard disk space. Furthermore, advertisers have discovered, not surprisingly, that relatively few PC users will undertake any affirmative action, such as by downloading and installing an application program&mdash;almost regardless of its size, to receive advertisements and other such information. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Faced with these practical, and rather acute, deficiencies inhering in web advertising conventionally provided on either an interstitial or &ldquo;push&rdquo; basis, web advertisers have apparently relegated their efforts to displaying their advertisements on a banner-like approach, through real-time downloading and rendering of advertising HTML files. Here, the advertising files are sited on remote web servers, rather than being embedded within given web page HTML files, with appropriate HTML tags, which reference the ad files, being embedded into the web page files themselves. Such a tag specifies when and where, within the page, an advertisement is to appear. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> To surmount the latency problems inherent in such banner-like advertisements, various proprietary media formats have appeared in the art. These formats employ increasingly sophisticated data compression, sometimes in conjunction with video and/or audio streaming. Rather than waiting for a media file to fully download prior to its being rendered, streaming permits content in a &ldquo;streamed&rdquo; media file to be presented in real-time to the user as that content arrives at his(her) client browser. While this approach clearly provides enhanced richness in content over that obtainable through a conventional banner and thus can heighten a &ldquo;user experience&rdquo;, it nevertheless relies, to its detriment, on a continuous real-time network connection existing to a remote web server. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Unfortunately, any network or server congestion which stops the download, even if temporary, can suspend, i.e., freeze, or totally halt the &ldquo;streamed&rdquo; media presentation to the user prior to its completion. This interruption, if noticeable and sufficiently long, will likely frustrate the user and degrade the &ldquo;user experience&rdquo;. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In spite of these drawbacks, particularly with respect to interstitial advertisements and push technology, and apparently for lack of a better alternative, most web advertising currently in use employs real-time streaming of graphic files with their content being rendered by the browser. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Web advertisements, like other forms of mass advertising, do generate revenue, often in the form of an on-going stream of payments to the host of the ads, in this case web site owners. Accurate user accounting is essential to ensure that an advertiser is not over- or under-charged given an extent to which an ad is actually disseminated. Hence, these payments are often tied to a function of the number of web users whom the ad reached. But with web advertisements, accurately ascertaining that number has been difficult and problematic at best, and, given a basic technique employed to do so, manifestly error-prone, thereby causing unreliable user counts and erroneous ad charges. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In particular and as conventionally employed, delivery of a web advertisement, such as, e.g., a streamed ad, is logged as a &ldquo;user impression&rdquo; at a web server at an instant an advertising file(s), e.g., a streamed file, is served, rather than after the browser has completely rendered the advertisement to the user. Unfortunately, serving these ad files does not guarantee that these files will be ultimately and completely rendered by a client browser to a user. Consequently, web server generated &ldquo;user impression&rdquo; counts can be grossly understated. For example, if a user navigates to a new content page after an advertisement has started playing but before that advertisement completes and, by doing so, prematurely terminated the advertisement, a full impression is nevertheless logged&mdash;erroneously&mdash;since that advertisement was completely served. Additional errors arise if a proxy server is situated between multiple client PCs situated on an intranet or a local area network (LAN) and a web advertisement server situated on the Internet (or other insecure public network). In this case, a request from one of the client PCs for the advertisement files will be routed to the proxy server, which, in turn, will direct that request onward to the advertisement web server. The latter, in response to the request, will serve one complete copy of the advertisement files to the proxy server. The resulting fetched advertisement files will be locally cached in the proxy server and, from there, provided to the requesting client PC. Should any of the other client PCs request the same files, the proxy server will provide these files, totally unbeknownst to the web server, from its local cache rather than directing a request from that other PC back to the web server. Hence, the web server will be totally oblivious to each additional instance in which the proxy server accessed the ad files from its local cache and disseminated the advertisement to any client PC other than that which first requested the ad. Inasmuch as some intranets situated behind a proxy server(s) can be rather extensive with tens or hundreds of thousands of individual client PCs, server-based user impression accounting based on copies delivered by a web server may, owing to the presence of proxy servers, be inordinately low and result in significant under-charges to the advertiser. As of yet, no solution apparently exists in the art that can provide accurate counts of &ldquo;user impressions&rdquo; of web advertisements. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Other conventional approaches aimed at reducing latency times associated with downloading content files through relatively slow speed communication links, e.g., modem connections, have involved development and use of new facilities within various programming languages. These approaches, most notably involving the Java and JavaScript programming languages, while helpful, still cause inefficient use of available link bandwidth and still constrain the size of the content files. These limitations arise from premature terminations of preloaded files whenever a user transitions to a new web page. Specifically, with these approaches, if a user activates a hotlink to transition to a new web page while an ad file is being downloaded but before the downloading has completed, then the downloading simply stops. The downloading will need to be re-started, but from the beginning of the file, the next time that particular ad file is requested. Hence, the time and bandwidth that has then been expended in downloading part of that ad file is completely wasted. In practice, many users tend to quickly navigate through a series of web pages until they reach a desired destination. Consequently, advertisers are constrained to again minimize content file sizes and hence &ldquo;richness&rdquo; of their advertisements in an effort to decrease a number of premature terminations per unit time and in doing so reduce latency caused by downloading duplicate sections of the same ad file. Therefore, these approaches have generally proven to be wholly unsatisfactory. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In view of the fundamental drawbacks associated with various web based advertising techniques known in the art, interstitial web advertising appears to hold the most promise of all these techniques. Yet, the limitations inherent in conventional implementations of conventional interstitial advertising have effectively prevented this form of web advertising from effectively fulfilling its promise. Moreover, the deficiencies inherent in all known web advertising techniques have, to a significant extent, collectively inhibited the use of web advertising in general. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Thus, a pressing need exists in the art for a new web-based interstitial advertising technique which does not suffer from infirmities associated with such interstitial advertising techniques known in the art. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In that regard, this new technique should preferably not embed advertising HTML files within a web page. If this could be accomplished, then advantageously such a technique would likely provide considerable economies to advertisers in saved labor, time and cost in terms of both inserting advertisements into web page files, and later changing any of those advertisements. In addition, such a new technique should preferably function in a manner that is substantially, if not totally, transparent to a user and which neither inconveniences nor burdens that user. In particular, this new technique should preferably not require a user to download and install on his(her) PC a separate application program, let alone any update to it, specifically to receive web advertising, or perform any affirmative act, other than normal web browsing, to receive such advertising. Furthermore, this new technique should preferably be platform independent and, by doing so, operate with substantially any web browser on substantially any PC. Also, this new technique, when in use, should preferably not consume excessive hard disk space on a client PC. Moreover, to provide a pleasing &ldquo;user experience&rdquo;, this new technique should render an ad fully and without any interruptions that might otherwise result from network and/or server congestion. Lastly, this new technique should provide proper accounting to an advertiser by accurately and validly ascertaining user impressions of fully rendered advertisements. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> We believe that if such a new web-based interstitial advertising technique could be provided, then this technique, which should be both effective and desirable, may well achieve broad support and use by advertisers and acceptance by web users; hence, substantially expanding the use of web-based advertising in general. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Advantageously, our present inventive technique satisfies this need by overcoming the deficiencies associated with conventional web-based interstitial advertising techniques. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Our present invention accomplishes this, in accordance with our broad inventive teachings, by: completely &ldquo;decoupling&rdquo; advert-sing content from a web content page (also hereinafter referred to as a &ldquo;referring&rdquo; page); &ldquo;politely&rdquo; dowloading advertising files, through a browser executing at a client computer, into browser caches (e.g., browser disk and RAM cache) at that computer and in a manner that is transparent to a user situated at the browser; and interstitially displaying advertisements through the browser in response to a user click-stream associated with normal user navigation across different web pages. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Specifically, our technique relies on embedding an HTML tag (which, where necessary, to distinguish this tag from other HTML tags, will be also referred to hereinafter as an &ldquo;advertising tag&rdquo;) into a referring page. This tag contains two components. One component effectively downloads, from an distribution HTTP (web) server and to an extent necessary, and then persistently instantiates an agent, implemented as a &ldquo;light-weight&rdquo; Java applet, at the client browser. This agent then &ldquo;politely&rdquo; and transparently downloads advertising files (media, and, where necessary, player files), originating from an ad management system residing on a third-party advertising HTTP (web) server, for a given advertisement into browser disk cache (also in the case of media files into the browser RAM cache) and subsequently plays those media files through the browser on an interstitial basis and in response to a user click-stream. The other component is a reference, in terms of a web address, of the advertising management system from which the advertising files are to be downloaded. This latter reference totally &ldquo;decouples&rdquo; advertising content from a web page such that a web page, rather than embedding actual advertising content within the page itself&mdash;as conventionally occurs, merely includes an advertising tag that refers, via a URL, to a specific ad management system rather than to a particular advertisement or its content. The ad management system selects the given advertisement that is to be downloaded, rather than having that selection or its content being embedded in the web content page. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Advantageously, the agent operates independently, in the client browser, of the content in any referring web page. Once loaded and started, the agent executes in parallel, with standard browser functionality, continually and transparently requesting and downloading advertisements to browser cache residing in a client computer (e.g., personal computer&mdash;PC) and interstitially playing those advertisements. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In particular, once the agent is started, the agent politely and transparently downloads, through the client browser and to the browser cache, both media and player files, originating from the advertisement management server, for an advertisement that are needed to fully play content in that advertisement. The agent also monitors a click-stream generated by a user who then operates the browser. In response to a user-initiated action, e.g., a mouse click, which instructs the client browser to transition to a next successive content web page and which signifies a start of an interstitial interval, the agent, if all the media and player files are then resident on the client hard disk, plays the media files, through the browser and during that interstitial interval, directly from the browser cache. Advertisements are interstitially played typically in the order in which they were downloaded to the client browser. Interstitial play from browser cache advantageously permits previously cached content rich advertisements to be played through the browser without adversely affecting communication link bandwidth then available to the client browser. Thus, the full available link bandwidth can be used, while an advertisement is being played, to download a next successive content web page. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Employing a user click-stream to trigger play of cached advertisements frees the user, for receiving advertising, of any need either to undertake any affirmative action, other than normal web browsing, or to learn any new procedure; thus, advantageously imposing no added burden on the user. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Advantageously, the agent &ldquo;politely&rdquo; downloads advertisement media and player files, originating from the advertising server, to the browser cache, during what otherwise would be browser idle times, i.e., while a web page is being displayed to a user and the browser is waiting for user input. Caching advertisement files in this fashion advantageously circumvents variable latency and erratic (e.g., intermittent or suspended) play that frequently occurs with conventional streamed and static media delivered over the web. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> At the start of an interstitial interval, the agent determines whether all the media and player files required to play a given advertisement (typically that having its so-called AdDescriptor file situated in a head of a play queue) then reside on the disk of the client PC or, with respect to media files, are resident in browser RAM cache. If so, the agent then accesses these files from the disk to &ldquo;play&rdquo; that advertisement. Since all the media and player files are then locally resident, the advertisement, from a user&apos;s perspective, is immediately rendered from the client hard disk or browser RAM cache with essentially no downloading delay, thus providing a highly pleasing &ldquo;user experience&rdquo; with rich multi-media content approaching that obtainable through current CD-ROM based delivery. Thereafter, the agent returns control to the browser to permit the browser, if a next successive web page has been downloaded, assembled and ready to be rendered, to render that particular page to the user. If, however, an advertisement is prematurely terminated by a user, that advertisement (in terms of its AdDescriptor file) will remain in a play queue (with its media and player files remaining on the client hard disk or, in the case of media files, in browser RAM cache) and will be re-played from its beginning at the start of a next successive interstitial interval. Furthermore, if download of the media and player files for an advertisement were to be interrupted by a user click-stream, i.e., start of interstitial interval, the agent suspends further downloading until after the ensuing interstitial interval terminates. To conserve communication link bandwidth, the agent then resumes downloading of these files at a point it was suspended, rather than, as conventionally occurs, totally re-starting the download. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In accordance with our specific inventive teachings, the agent contains two applets: a Transition Sensor applet and an &ldquo;AdController&rdquo; applet. Only the Transition Sensor applet is itself associated with any content page. Though the AdController applet, once started, executes under the browser, it is not under the control of the browser itself. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The advertising tag is itself embedded in a content web page and references a JavaScript file. The advertising tag also encapsulates a reference, i.e., a URL to a specific ad management server, typically sited on a third party advertising server, containing specific media, that collectively constitutes web advertisements, and accompanying player files. The file, when executed, downloads and implements, through dynamic writing of applet tags, the Transition Sensor applet. This particular applet remains visually transparent to a user who displays, with his(her) browser, the HTML coding for that page. In particular, the advertising tag references a JavaScript file (which contains a &ldquo;script&rdquo;) stored on a distribution server. When the JavaScript file is downloaded and the script it contains is then executed by the browser, the script dynamically writes a predefined number and combination of applet tags, i.e., which collectively form the Transition Sensor applet, into the retrieved web page content in lieu of the advertising tag. Subsequent execution of these tags, by the client browser, invokes the Transition Sensor applet. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In particular, when executed, the Transition Sensor applet instantiates an Applet Registry, which is used for inter-applet communication. Thereafter, the Transition Sensor applet determines whether the AdController applet has been downloaded to the browser disk cache or whether an updated version of this particular applet resides on the distribution server. If an updated version of this applet exists on the distribution server relative to that previously downloaded to the browser disk cache or if this applet has not been download at all onto this cache, the Transition Sensor applet loads the AdController applet from the distribution server into the browser disk cache. The Transition Sensor applet then instantiates the AdController applet. Once this occurs, the Transition Sensor applet then establishes appropriate entries in the Applet Registry for itself and the AdController applet. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The Transition Sensor applet then passes the URL of the ad management system, as specified in the advertising tag, to the AdController applet in order for the latter applet to request delivery of an advertisement, specifically an associated AdDescriptor file, originating from that system. The system then selects the advertisement to be delivered and, via the third party advertising server, so informs the AdController applet by returning the requested AdDescriptor file. For a given advertisement, this particular file, which is textual in nature, contains a manifest, i.e., a list, of: file names and corresponding web addresses of all media files that constitute content for that advertisement and all player files necessary to play all the media files; an order in which the various media files are to be played; and various configuration and other parameters need to configure and operate the operation of each player in order for it to properly play a corresponding media file(s). The AdController then &ldquo;politely&rdquo; downloads, typically via the advertising distribution server, the associated media and player files, as specified in the AdDescriptor file&mdash;and to the extent they do not already reside on the hard disk of the client PC. As noted above, the Transition Sensor applet also monitors a click-stream produced by the current user to detect a user-initiated page transition and hence the start of an interstitial interval. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Advantageously, the AdDescriptor file implements a data abstraction that totally separates the media and player files from the referring web page thus assuring that the advertisement content itself remains completely independent of the content web page that invoked its presentation. This abstraction permits our technique to provide a highly effective, generalized and very flexible mechanism for delivering rich web advertisements, particularly those that require complex sets of media files and players. Through use of this abstraction, our technique is able to handle present and future media formats, regardless of their requirements, including proprietary streaming and other content delivery technologies that rely on Java applets as a delivery mechanism&mdash;all transparently to the user. Moreover, since the AdDescriptor file can specify media and player files for different browsers, operating systems and computing platforms then in use, our technique can readily function with a wide variety of different computing and browsing platforms. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The Transition Sensor and AdController applets are each implemented through appropriate Java classes and collectively persist, through storage in the browser disk cache, across different content pages within a site, across different web sites, and across successive browser sessions. Once either of these applets is completely downloaded, providing it is not subsequently flushed from the browser disk cache as the user navigates across web sites on the web, the files for that applet will be loaded from that cache, rather than being downloaded from the distribution server, the next time that applet is required, e.g., when the user next navigates, either during a current browser session or a subsequent session, to any content page that contains an advertising tag. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Whenever the client browser encounters a next successive page containing an advertising tag, then the browser will first and automatically inquire with the distribution server to ensure that executable code for the Transition Sensor applet, if previously downloaded into the browser disk cache, has not been superseded by an updated version. If such an updated version then exists, the browser will collectively download updated files from the distribution server and replace, to the extent necessary, each Transition Sensor applet file residing in the browser disk cache with its updated version. Alternatively, if the Transition Sensor applet has not been previously downloaded into the browser disk cache, then the browser will download all the necessary files for the Transition Sensor applet from the distribution server into that cache. The Transition Sensor applet, once executing, will load, through the browser, the AdController applet. To do so, the browser will, if necessary, obtain an updated version, from the distribution server, in the same manner as it did for the Transition Sensor. As a result, any corrections or enhancements made to the agent (specifically the Transition Sensor and/or the AdController applets) since the agent was last downloaded to the client browser will be automatically and transparently, from a user perspective, distributed to that browser and downloaded into the browser disk cache the next time the browser encounters a web page containing an advertising tag. By operating in this fashion, the user is totally and advantageously relieved of any need to: both initially load and install an application program to obtain advertising and/or later update that program. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Furthermore, the agent advantageously persists and functions transparently in background, independent and transparent to user navigation across pages on a common web site and across web sites. The agent effectively implements a background process which runs in parallel with and is transparent to normal HTML and HTTP operations implemented by the client browser. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Moreover, in sharp contrast to conventional server-based accounting of web advertisements, our inventive technique provides highly accurate client-side accounting of each user impression. Each log entry, produced by the AdController applet, specifies a successful presentation of a complete advertisement at a client browser. This entry may include a source of the ad content, i.e., in terms of the URL of the associated ad management system, a title of the advertisement and the URL of the referring web page. Other client-side information can be measured and included in each entry, such as: an amount of time during which the advertisement was rendered by the browser (presumably during which the user dwelled on the advertisement); as well as an identification, in terms of a URL, of a content web page to which the user next navigated (particularly if the user reached that page through a hotlink displayed in the advertisement). Subsequently, the AdController applet uploads the log entries to the advertising server. These entries will be collectively processed, as needed, to permit shared ad revenues from web-based advertisers to be properly allocated among different web page content providers. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Advantageously, our inventive technique, by totally decoupling referring web page content from its corresponding advertising content, easily permits an advertiser to change or update any of its advertisements by just modifying, as needed, appropriate media and AdDescriptor files that reside in the third-party advertising management system. Since a referring web page merely incorporates an advertising tag totally devoid of advertising content, no changes whatsoever need to be made to that page. Hence, use of our inventive technique substantially reduces the burden, time and cost associated with maintaining and updating web-based advertising over that conventionally required. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> As a feature, our inventive technique advantageously implements, in conjunction with its persistent agent approach, multi-threaded pipelining. By processing each different advertisement as a different thread, each one of a sequence of different processing operations can be performed, effectively on a pipe-lined parallel basis, on different sequentially occurring advertisements, thereby enhancing a rate (increasing throughput) at which advertisements can be queued for playback. In addition, through such pipe-lining, logging of a fully presented advertisement can occur as a last operation in a pipeline and essentially in parallel either: with presentation of cached advertisement having its AdDescriptor file situated in the play queue immediately behind that for the just presented advertisement, or with downloading and caching of a next successive advertisement.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which: </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> depicts the correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>; </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference> collectively depict a high-level block diagram of an illustrative client-server distributed processing environment, implemented through the Internet, which embodies the teachings of our present invention, along with, as pertinent to the invention, basic inter-computer actions that occur in that environment and associated client processing operations; </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1D</cross-reference> depicts the correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 1E and 1F</cross-reference>; </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1E and 1F</cross-reference> collectively depict the same environment as shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference> but showing an detailed version of agent download/instantiate/execute operations <highlight><bold>50</bold></highlight> shown in the latter figures; </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts the correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>; </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference> collectively depict generalized web page HTML code <highlight><bold>35</bold></highlight>, specifically inclusion of advertising tag <highlight><bold>40</bold></highlight>, which transparently invokes our invention, and changes which our invention dynamically makes to that code, specifically substitution of Transition Sensor applet <highlight><bold>210</bold></highlight> for tag <highlight><bold>40</bold></highlight> to yield page <highlight><bold>35</bold></highlight>&prime;, in order to download and render web advertisements; </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a high-level block diagram of client PC <highlight><bold>5</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, and <highlight><bold>1</bold></highlight>E and <highlight><bold>1</bold></highlight>F; </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a simplified high-level block diagram of application programs <highlight><bold>400</bold></highlight> resident within client PC <highlight><bold>5</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a high-level block diagram of AdController agent <highlight><bold>420</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which implements our present invention; </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts the correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>; </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> collectively depict a high-level flowchart of processing operations <highlight><bold>600</bold></highlight> performed by AdController agent <highlight><bold>420</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a high-level block diagram of basic processing threads that implement AdController applet <highlight><bold>424</bold></highlight> which, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, forms part of AdController agent <highlight><bold>420</bold></highlight>; </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a high-level flowchart of processing operations <highlight><bold>800</bold></highlight> performed by AdController applet <highlight><bold>424</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts the correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference>; </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> collectively depict a flowchart of processing operations <highlight><bold>900</bold></highlight> performed by AdController applet <highlight><bold>424</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, specifically for processing an advertisement; </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts inter-applet events that occur within AdController agent <highlight><bold>420</bold></highlight> during execution of Transition Sensor applet <highlight><bold>422</bold></highlight>; </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> depicts a high-level block diagram of basic processing threads that implement Transition Sensor applet <highlight><bold>422</bold></highlight> which, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, forms part of AdController agent <highlight><bold>420</bold></highlight>; </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts a high-level flowchart of processing operations <highlight><bold>1200</bold></highlight> performed by Transition Sensor applet <highlight><bold>422</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>; </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> depicts a high-level block diagram of Ad Loader process <highlight><bold>1300</bold></highlight> which can be used to provide advertiser control over various functions, for advertisement play and logging, implemented by AdController applet <highlight><bold>424</bold></highlight>; </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts a high-level block diagram of Ad Pipeline <highlight><bold>545</bold></highlight> that is implemented by and form part of AdController applet <highlight><bold>424</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> depicts a high-level block diagram of Ad Producer process <highlight><bold>1500</bold></highlight> that is executed by Ad Pipeline <highlight><bold>545</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>; </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> depicts a high-level block diagram of Ad Location process <highlight><bold>1600</bold></highlight> that is also executed by Ad Pipeline <highlight><bold>545</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>; </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> depicts a high-level block diagram of Ad Downloader process <highlight><bold>1700</bold></highlight> that is also executed by Ad Pipeline <highlight><bold>545</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>; </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> depicts a flowchart of stop method <highlight><bold>1800</bold></highlight> invoked by Transition Sensor applet <highlight><bold>422</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> depicts a flowchart of start method <highlight><bold>1900</bold></highlight> invoked by Transition Sensor applet <highlight><bold>422</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; and </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> depicts contents of actual illustrative AdDescriptor file <highlight><bold>2000</bold></highlight> for use in interstitially rendering a PointCast type Java advertisement through our present invention. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> After considering the following description, those skilled in the art will clearly realize that the teachings of our present invention can be utilized in any networked client-server environment in which advertising or other information is to be presented to a user during interstitial intervals, i.e., during a transition between successively displayed web pages. Such an environment can encompass the Internet or an intranet, or any client-server environment in which a client browser (regardless of whether that browser executes on a dedicated client computer or not) is used to access and download web pages or, more generally speaking, files through a network communication channel (link) from a server (again regardless of whether that server executes on a dedicated computer or not). In that regard, the server can be a separate software application which executes on any computer in the networked environment, even if that computer is itself a client to another server in the network. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> For purposes of simplicity and to facilitate reader understanding, we will discuss our present invention in the illustrative context of use in rendering interstitial web-based advertisements to a client personal computer (PC) connected to the Internet, where specifically a client browser executing in the PC is used to download and render web pages from a remote networked Internet accessible web server. Clearly, after considering the ensuing description, anyone skilled in the art will readily appreciate how the teachings of our invention can be easily incorporated into any client-server or other similar distributed processing environment in which a client can encompass not only a specific computer connected to a network but a software process that possesses network connectivity to another such process and requests information from and, in response, obtains information supplied by the latter. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> We will first present an overview of our invention, particularly in the context of its use with an Internet web browser in a client PC, followed by describing each basic component of its implementation. </paragraph>
<paragraph id="P-0085" lvl="7"><number>&lsqb;0085&rsqb;</number> A. Overview </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> A general deployment of our invention in an Internet environment is collectively shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, with a detailed view of a portion of the inter-processor agent download/instantiation operations <highlight><bold>50</bold></highlight> shown in these figures being depicted in <cross-reference target="DRAWINGS">FIGS. 1E and 1F</cross-reference>. The correct alignment of the drawing sheets for <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, and <highlight><bold>1</bold></highlight>E and <highlight><bold>1</bold></highlight>F is shown in <cross-reference target="DRAWINGS">FIGS. 1A and 1D</cross-reference>, respectively. <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>, for which the correct alignment of the drawing sheets for these figures is shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, collectively depicts generalized web page HTML code which transparently invokes our invention, and changes which our invention dynamically makes to that code in order to download and render web advertisements. For a understanding, the reader should simultaneously refer to <cross-reference target="DRAWINGS">FIGS. 13 and 1</cross-reference>C, <highlight><bold>1</bold></highlight>E and <highlight><bold>1</bold></highlight>F, and <highlight><bold>2</bold></highlight>A and <highlight><bold>2</bold></highlight>B throughout the following discussion. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> As shown, client PC <highlight><bold>5</bold></highlight>, upon which client browser <highlight><bold>7</bold></highlight> executes, is connected through communication link <highlight><bold>9</bold></highlight> to Internet <highlight><bold>10</bold></highlight>. Browser <highlight><bold>7</bold></highlight> is a conventional web browser, such as Internet Explorer or Netscape Navigator commercially available from Microsoft Corporation or Netscape Corporation, respectively. Preferably, for reasons that will shortly become clear, that browser should preferably support dynamic writing of applet tags. Though, for ease of illustrating inter-computer actions, we depicted Internet <highlight><bold>10</bold></highlight> as having portions <highlight><bold>10</bold></highlight><highlight><subscript>A </subscript></highlight>and <highlight><bold>10</bold></highlight><highlight><subscript>B</subscript></highlight>, we will collectively refer to both portions as simply Internet <highlight><bold>10</bold></highlight>. Web server <highlight><bold>13</bold></highlight>, connected, via link <highlight><bold>11</bold></highlight>, to Internet <highlight><bold>10</bold></highlight> represents any web HTTP (hypertext transfer protocol) server. This server, in response to a request to fetch a specific file from web browser <highlight><bold>7</bold></highlight>, downloads that file, using conventional TCP/IP protocols (transmission control protocols/internet protocols), through the Internet to browser <highlight><bold>7</bold></highlight>. Browser <highlight><bold>7</bold></highlight> will, in turn, render that file typically on a monitor to a user situated at the client PC. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Advertising distribution HTTP server (also referred to as &ldquo;agent&rdquo; server) <highlight><bold>15</bold></highlight> is connected, via communications link <highlight><bold>17</bold></highlight>, to Internet <highlight><bold>10</bold></highlight> and stores files that collectively implement a predefined agent, specifically, a light weight Java applet. This agent (referred to herein as the &ldquo;AdController&rdquo; agent) transparently pre-loads itself, as well as media rich advertising content, into a local hard disk cache associated with the browser (&ldquo;browser disk cache&rdquo;) on client PC <highlight><bold>5</bold></highlight>. Server <highlight><bold>15</bold></highlight> downloads the AdController agent in a manner to be described below, to client browser <highlight><bold>7</bold></highlight>. This agent, once instantiated and started, then transparently and politely downloads (actually pre-loads) advertisements into the browser disk cache, and subsequently plays each of those advertisements, on an interstitial basis, in response to a click stream generated by the user as (s/he navigates, through use of browser <highlight><bold>7</bold></highlight>, between successive web pages. Such hard disk caching advantageously circumvents variable latency and erratic play associated with conventional streamed and static media delivered over the Internet. The agent enables rich advertising to be presented in a highly-controlled fashion, resulting in user experiences approaching that of CD-ROM. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Third-party ad HTTP server <highlight><bold>20</bold></highlight>, connected to Internet <highlight><bold>10</bold></highlight> via, e.g., communications links <highlight><bold>18</bold></highlight> and <highlight><bold>23</bold></highlight>, hosts ad management system <highlight><bold>25</bold></highlight>. In essence and as discussed in detail below, this system, in response to a request originating from the AdController agent executing in browser <highlight><bold>7</bold></highlight>, selects a given advertisement and then downloads, in a &ldquo;polite&rdquo; manner controlled by the agent, media and player files that form that advertisement to the agent for storage in the browser disk cache. Inasmuch as Java applets are currently restricted under constraints inherent in the Java programming language itself to retrieving files from an identical Internet host that served the applet itself, the request for an advertisement to system <highlight><bold>25</bold></highlight> as well as resulting media and player files served by system <highlight><bold>25</bold></highlight> are routed through agent server <highlight><bold>15</bold></highlight> as a proxy server. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Advantageously, our inventive technique completely &ldquo;decouples&rdquo; advertising content from a web content page (also hereinafter referred to as a &ldquo;referring&rdquo; page). This, in turn, permits our technique to render media-rich advertisements without requiring inclusion of any advertising content into a referring web page. This &ldquo;decoupling&rdquo; is effectuated through inclusion of an HTML tag into a content web page, which when the latter is downloaded, interpreted and executed by the browser, effectively loads and instantiates the agent and then retrieves advertisement files from an ad management system specified in the tag. Thus, advertising files (both media and player files) can be maintained totally independently of their referring web page(s), with advantageously any changes made to the former having no effect on HTML coding contained in the latter. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> In particular, HTML tag <highlight><bold>40</bold></highlight> (which, where necessary, to distinguish this tag from other HTML tags, will be also referred to hereinafter as an &ldquo;advertising tag&rdquo;) is embedded by a content provider(s) into HTML code that constitutes each referring web page, e.g., here page <highlight><bold>35</bold></highlight>. Generally, the position of this tag relative to existing HTML code (shown as HTML code portions <highlight><bold>35</bold></highlight><highlight><subscript>A </subscript></highlight>and <highlight><bold>35</bold></highlight><highlight><subscript>B </subscript></highlight>in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>) for this page is not critical. Advantageously, very rarely, if ever at all, do any changes need to be made to these code portions to accommodate the tag. As shown and as reproduced in Table 1 below, this tag, which typically consumes one line in a web page, implements a script.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>ADVERTISING TAG</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="42PT" align="left"/>
<colspec colname="1" colwidth="175PT" align="left"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;SCRIPT SRC&equals;http://unicast.com/loadad.js&gt;</entry>
</row>
<row>
<entry></entry>
<entry>AdServer&equals;&ldquo;<highlight><uline>http://AdManagement system</uline></highlight>&rdquo;</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/SCRIPT&gt;</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> One portion of the advertising tag (&ldquo;SRC&equals;http://unicast.com/loadad.js&rdquo;), when executed by the browser, downloads a JavaScript file (named &ldquo;loadad.js&rdquo;) from the agent server. This file, in turn, is then interpreted and executed, as a script, by the browser. The effect of executing this script, as symbolized by block <highlight><bold>200</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>, is to substitute applet tags, dynamically written by the script, into the referring web page in lieu of advertising tag <highlight><bold>40</bold></highlight> so as to form a modified web page, here referring content page <highlight><bold>35</bold></highlight>&prime;, residing in the browser disk cache. The script, by invoking a feature associated with dynamic writing, completely hides these tags from view should the user then display HTML source code for page <highlight><bold>35</bold></highlight>&prime; with his browser. This, in turn, hinders the user, to a certain degree, from readily ascertaining the source of the agent and ad management systems. Collectively, these applet tags form Transition Sensor applet <highlight><bold>210</bold></highlight>. This script, as described in detail below and is reproduced in Table 2 below, when interpreted and executed by a Java virtual machine (Java interpreter) resident in the browser persistently loads and then instantiates the Transition Sensor itself which, in turn, loads and instantiates the remainder of the agent in the client browser.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 2</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>TRANSITION SENSOR APPLET</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="left"/>
<tbody valign="top">
<row>
<entry>&lt;applet code&equals;&ldquo;com.unicast.adcontroller.tools.TransitionSensor&rdquo;</entry>
</row>
<row>
<entry>codebase&equals;&ldquo;http://www.unicast.com/java/classes/&rdquo;</entry>
</row>
<row>
<entry>align&equals;&ldquo;baseline&rdquo; width&equals;&ldquo;0&rdquo; height&equals;&ldquo;0&rdquo; name&equals;&ldquo;TransitionSensor&rdquo;</entry>
</row>
<row>
<entry>archive&equals;&ldquo;adcontroller.jar&rdquo;&gt;</entry>
</row>
<row>
<entry>&lt;param name&equals;&ldquo;adURL&rdquo;</entry>
</row>
<row>
<entry>value&equals;&ldquo;http://www.unicast.com/media/fireworks_01_ad_descriptor.txt&rdquo;&gt;</entry>
</row>
<row>
<entry>&lt;param name&equals;&ldquo;cabbase&rdquo; value&equals;&ldquo;adcontroller.cab&rdquo;&gt;</entry>
</row>
<row>
<entry>&lt;/applet&gt;</entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The value of attribute CODE in the Transition Sensor applet specifies a Java executable that will be executed by the client browser, when it renders this applet, to launch the Transition Sensor. The executable, implemented through an appropriate Java class, was originally compiled from its associated Java source code file. Tags labeled &ldquo;&lt;WIDTH&gt;&rdquo; and &ldquo;&lt;HEIGHT&gt;&rdquo; jointly specify a rectangular portion of a web page, as displayed by browser <highlight><bold>7</bold></highlight>, in which the applet will be rendered. Since, here that portion is non-existent, nothing will be rendered. Applets, such as this one, can be delivered transparently over the Internet to the client PC and require no user-assisted installation. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> Another portion of the advertising tag (&ldquo;AdServer&equals;&rdquo;http://AdManagement_system&rdquo;) references a URL of a particular ad management system (where &ldquo;AdManagement_system&rdquo; represents a web address (URL) of that particular system), here illustratively system <highlight><bold>25</bold></highlight>, from which the agent is to download an advertisement. As will be seen below, the Transition Sensor applet, during its execution, passes this URL, as part of an advertising download request, to the remainder of the AdController agent to subsequently download appropriate advertising files, also as described below, from that system necessary to interstitially play an advertisement. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> If advertisements are to play on client browsers (specifically Microsoft Internet Explorer version 3) that do not support dynamic writing of applet tags, then applet <highlight><bold>210</bold></highlight> would need to be inserted by content providers into each referring web page in lieu of advertising tag <highlight><bold>40</bold></highlight>. Unfortunately, Transition Sensor applet <highlight><bold>210</bold></highlight> identifies both the agent server, and an actual advertisement in terms of a URL of its source components (through contents of an &ldquo;AdDescriptor&rdquo; file&mdash;which will be discussed in detail below&mdash;specified in this applet). Since browser technology continues to rapidly advance with most users continually upgrading their browsers, most browsers now in use, and in a very short time nearly all such browsers, will support such dynamic writing. Hence, we see little, and very shortly essentially no need, to embed applet <highlight><bold>210</bold></highlight> into any referring web pages, thus minimizing ad insertion cost, effort and time while restricting disclosure of the agent server and advertisement source information. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The agent, during its execution, &ldquo;politely&rdquo; and transparently downloads advertising files (media, and where necessary player files), originating from ad management system <highlight><bold>25</bold></highlight> for a given advertisement into browser disk cache (with the media files also being written into browser RAM cache) and subsequently plays those media files through the browser on an interstitial basis and in response to the user click-stream. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Advantageously, the agent operates independently, in the client browser, of the content in any referring web page. Once loaded and started, the agent executes in parallel, with standard browser functionality, continually and transparently requesting and downloading advertisements to a browser disk cache residing on a local hard disk (&ldquo;browser disk cache&rdquo;), as well as in the case of media files into browser RAM cache, in a client computer (e.g., personal computer&mdash;PC) and interstitially playing those advertisements. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Now, with the above in mind and specific reference to <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, we will now describe the basic inter-computer actions associated with use of our invention, as well as the basic attendant processing steps that occur in the client PC. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> To begin a browsing session, the user first invokes client browser <highlight><bold>7</bold></highlight>. Once the browser is executing, the browser obtains, as an initial web page&mdash;selection of this page being referenced by numeral <highlight><bold>31</bold></highlight>, an address either of a prior so-called &ldquo;default&rdquo; content page previously specified by the user and having its URL stored in the browser or of a content page manually entered by the user. The client browser then issues, as symbolized by block <highlight><bold>33</bold></highlight>, a request to fetch a file for that page; with the request containing a URL of that page (i.e., its complete web address including its file name). We assume for simplicity that the file for that page resides on web server <highlight><bold>13</bold></highlight>. We also assume that page <highlight><bold>35</bold></highlight> is being requested which will invoke an associated interstitial advertisement in accordance with our invention. In response to the request routed to server <highlight><bold>13</bold></highlight>&mdash;as symbolized by line <highlight><bold>34</bold></highlight>, this particular server downloads, as symbolized by line <highlight><bold>36</bold></highlight>, to client PC <highlight><bold>5</bold></highlight> a file for page <highlight><bold>35</bold></highlight>, where the coding stored in this file contains advertisement tag <highlight><bold>40</bold></highlight>. Illustrative contents of this tag are shown in dashed block <highlight><bold>45</bold></highlight>, as well as in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Once this file is received as shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, browser <highlight><bold>7</bold></highlight> interprets and then executes, as symbolized by block <highlight><bold>52</bold></highlight>, the HTML code in page <highlight><bold>35</bold></highlight>, which includes tag <highlight><bold>40</bold></highlight> and thus undertakes the actions shown in agent download/instantiate/execute operations <highlight><bold>50</bold></highlight>. These operations eventually result in the AdController agent being downloaded, instantiated and started in the client browser. Generally speaking, the browser in response to executing the advertising tag, issues a request, as symbolized by line <highlight><bold>54</bold></highlight>, to agent server <highlight><bold>15</bold></highlight> to download the AdController agent. Through various several inter-processing operations, as shown in further detail in <cross-reference target="DRAWINGS">FIGS. 1E and 1F</cross-reference> and which will be described below shortly, server <highlight><bold>15</bold></highlight> accesses and downloads, as symbolized by line <highlight><bold>56</bold></highlight>, the needed files to install the AdController agent to execute under browser <highlight><bold>7</bold></highlight> on the client PC. Once files for the agent are downloaded to the browser desk cache on the client PC, the browser then instantiates and starts the agent executing, as symbolized by block <highlight><bold>58</bold></highlight>. Operations <highlight><bold>50</bold></highlight> effectively conclude once the agent begins executing. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Now referring to operations <highlight><bold>50</bold></highlight> as shown in further detail in <cross-reference target="DRAWINGS">FIGS. 1E and 1F</cross-reference>, upon entry into these operations, browser <highlight><bold>7</bold></highlight> executes, as symbolized by block <highlight><bold>110</bold></highlight>, advertising tag <highlight><bold>40</bold></highlight>. The browser then issues a request, as symbolized by line <highlight><bold>115</bold></highlight>, to agent server <highlight><bold>15</bold></highlight>, to download a JavaScript file (named, e.g., &ldquo;loadad.js&rdquo;) specified in the request. This file is specified as the first portion of the advertising tab. In response to this request, server <highlight><bold>15</bold></highlight> downloads, as symbolized by line <highlight><bold>120</bold></highlight>, this particular file onto browser <highlight><bold>7</bold></highlight> where that file is cached appropriately. Once the file is fully downloaded, it is interpreted and executed by a Java virtual machine (a Java interpreter integrated into the browser and which generates code compatible with and executable by the browser). As indicated by block <highlight><bold>125</bold></highlight>, the browser then executes the interpreted code for the script which, in turn, dynamically writes applet tags&mdash;in the manner generally shown in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference> and described above&mdash;into web page <highlight><bold>35</bold></highlight> in lieu of the advertising tag. These tags, which collectively form Transition Sensor applet <highlight><bold>210</bold></highlight>, include a reference to a specific ad management system as specified in the second portion of advertising tag <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Once these tags are dynamically written into content web page <highlight><bold>35</bold></highlight> (to yield modified version <highlight><bold>35</bold></highlight>&prime; shown in <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>), Transition Sensor applet <highlight><bold>210</bold></highlight> is instantiated and then executed. In particular, browser <highlight><bold>7</bold></highlight> determines whether executable code for the Transition Sensor applet has been previously downloaded to the browser disk cache. If this code has not been downloaded or an updated version of this code exists on agent server <highlight><bold>15</bold></highlight>, the browser issues, as symbolized by line <highlight><bold>130</bold></highlight>, a request to download a latest version of the Transition Sensor executable code from the agent server. Server <highlight><bold>15</bold></highlight>, in response to this request, downloads, as symbolized by line <highlight><bold>135</bold></highlight>, file(s) for the latest version of the transition sensor code to the browser which, in turn, stores these file(s) into the browser disk cache. Thereafter as symbolized by block <highlight><bold>140</bold></highlight>, the browser instantiates and starts execution of the Transition Sensor applet. This latter applet, as part of its initial execution, instantiates an Applet Registry. This registry provides a mechanism, within the agent, for inter-applet communication between the constituent Transition Sensor and AdController applets. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Thereafter, the Transition Sensor applet attempts to load, also as symbolized by block <highlight><bold>140</bold></highlight>, the AdController applet, through the browser, from the browser disk cache. To do so, the browser first determines whether the AdController applet has been downloaded to the browser disk cache or whether an updated version of this particular applet resides on agent server <highlight><bold>15</bold></highlight>. If an updated version of this applet exists on the agent server relative to that previously downloaded to the browser disk cache or if the AdController applet has not been download at all into this cache, the browser issues a request, as symbolized by line <highlight><bold>150</bold></highlight>, to download a latest version of the AdController applet from agent server <highlight><bold>15</bold></highlight>. Server <highlight><bold>15</bold></highlight>, in response to this request, downloads, as symbolized by line <highlight><bold>155</bold></highlight>, file(s) for the latest version of the AdController applet to the client browser which, in turn, stores these file(s) into the browser disk cache. Lastly, as symbolized by block <highlight><bold>160</bold></highlight>, the Transition Sensor applet then instantiates and starts the AdController applet; and thereafter establishes appropriate entries in the Applet Registry for itself and the AdController applet. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, once operations <highlight><bold>50</bold></highlight> have completed, such that the agent is executing under browser <highlight><bold>7</bold></highlight>, the AdController applet issues, as symbolized by block <highlight><bold>60</bold></highlight>, a request, via agent server <highlight><bold>15</bold></highlight>, to download an AdDescriptor file from the ad management system, e.g., ad management system <highlight><bold>25</bold></highlight>, specified in advertising tag <highlight><bold>40</bold></highlight>. This request contains the URL of the ad management system contained in advertising tag <highlight><bold>40</bold></highlight>. Currently, Java applets are restricted under constraints inherent in the Java programming language itself to retrieving files from an identical Internet host that served the applet itself. As such, rather than directing this request to advertising server <highlight><bold>20</bold></highlight>, on which ad management system <highlight><bold>25</bold></highlight> resides, this request, as symbolized by line <highlight><bold>62</bold></highlight>, is addressed to agent server <highlight><bold>15</bold></highlight>, which serves as a proxy server between client PC <highlight><bold>5</bold></highlight> and advertising server <highlight><bold>20</bold></highlight>. Both the request and resulting advertising (including media and player) files will be served to the client PC through agent server <highlight><bold>15</bold></highlight>. As such, once the request has been received by the agent server, this server passes the request onward, as symbolized by line <highlight><bold>64</bold></highlight>, to advertising server <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In response to this request for an AdDescriptor file, ad management system <highlight><bold>25</bold></highlight> then selects a specific advertisement to be delivered to client PC <highlight><bold>5</bold></highlight>. This selection can be selected on a predefined or random basis, or based on user preference or other user-specific information previously collected from and associated with the user then operating browser <highlight><bold>7</bold></highlight>. Such user-specific information, such as prior buying patterns, could have been appropriately pre-collected at the client PC, previously uploaded to ad management system <highlight><bold>25</bold></highlight> and processed there such that, upon receipt of the AdDescriptor request, system <highlight><bold>25</bold></highlight> would then select and download an appropriate advertisement specifically targeted to the user then situated at the client PC. In any event, once system <highlight><bold>25</bold></highlight> selects the advertisement, through whatever selection metric it employs, the corresponding AdDescriptor file is then downloaded, as symbolized by line <highlight><bold>66</bold></highlight>, to agent server <highlight><bold>15</bold></highlight> (here being a proxy server) which, in turn, as symbolized by line <highlight><bold>68</bold></highlight>, supplies that file to the AdController agent then executing under web browser <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> To digress slightly, for the selected advertisement, the AdDescriptor file is a text file that contains a manifest, i.e., a list, of file names and corresponding network locations (URLs) at which these files reside, and player instructions and configuration parameter values necessary to play the entire advertisement through web browser <highlight><bold>7</bold></highlight> to the user. <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows contents of typical AdDescriptor file <highlight><bold>2000</bold></highlight> for a PointCast Java advertisement. Specifically and as shown in section <highlight><bold>4</bold></highlight>C of file <highlight><bold>2000</bold></highlight>, this AdDescriptor file lists file names with partial addresses on the ad management system of all media files that constitute content for that advertisement, and, in section <highlight><bold>1</bold></highlight> of this file, all Java player files necessary to play all the media files. This file also respectively specifies, here shown in section <highlight><bold>3</bold></highlight> and <highlight><bold>4</bold></highlight>B, an order in which the various media files are to be played, and various configuration parameters need to properly configure the operation of each player to play each corresponding media file. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The AdDescriptor file implements a data abstraction that totally separates the media and player files from the referring web page, here page <highlight><bold>35</bold></highlight>, thus assuring that the advertisement content itself remains completely independent of the content web page that invoked its presentation. This abstraction permits our technique to provide a highly effective, generalized and very flexible mechanism for delivering rich web advertisements, particularly those that require complex sets of media files and players. Through use of this abstraction, our inventive technique can handle present and future media formats, regardless of their requirements, including proprietary streaming and other content delivery technologies that rely on Java applets as a delivery mechanism&mdash;all transparently to the user. Moreover, the AdDescriptor file can contain separate listings (though not contained in file <highlight><bold>2000</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>) that delineate media and player files for different browsers, client operating systems or computing platforms (to the extent any of these require different versions of the media and/or player files; then in use. As such, our technique can readily function with a wide variety of different client computers and browsing platforms. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Once the AdDescriptor file is downloaded to the client PC, via agent server <highlight><bold>15</bold></highlight>, the AdController then &ldquo;politely&rdquo; downloads, as symbolized by block <highlight><bold>70</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, into the browser disk cache each media and player file, as specified in the AdDescriptor file&mdash;to the extent that file does not already reside on the hard disk of the client PC. Through so-called &ldquo;polite&rdquo; downloading, media and player files are downloaded to browser <highlight><bold>7</bold></highlight> during browser idle time intervals, with the downloading suspended during each ensuing interstitial interval aster the user instructs browser <highlight><bold>7</bold></highlight> to navigate to a new content web page. In this manner, while a fully downloaded advertisement is interstitially played from browser cache, the new content page is downloaded over the full bandwidth of communications link <highlight><bold>9</bold></highlight>. Advantageously, the communications link is freed during each interstitial interval to just carry web page content, thereby expediting download of content pages. If, due to the occurrence of an interstitial interval, the AdController applet suspends downloading of an advertisement file, then upon termination of this interval, this applet then resumes downloading at a location in that file at which downloading had stopped, thus conserving communication bandwidth and reducing download time. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> In particular, as part of the operations symbolized by block <highlight><bold>70</bold></highlight>, the Adcontroller applet determines which files, of those listed on the AdDescriptor, do not then reside on the hard disk of client PC <highlight><bold>5</bold></highlight>. Once it has made that determination, this applet issues a request, as symbolized by line <highlight><bold>72</bold></highlight>, to agent server <highlight><bold>15</bold></highlight>, to fetch a first one of these files. The agent server, again serving as a proxy server, issues a request, as symbolized by line <highlight><bold>74</bold></highlight>, to fetch this file from a networked server, anywhere on Internet <highlight><bold>10</bold></highlight>, on which that file resides. For simplicity, we assume that all such files reside on server <highlight><bold>20</bold></highlight> and are accessible through ad management system <highlight><bold>25</bold></highlight>. Hence, system <highlight><bold>25</bold></highlight>, via server <highlight><bold>20</bold></highlight>, issues a response, as symbolized by line <highlight><bold>76</bold></highlight> to agent server <highlight><bold>15</bold></highlight>, containing this first advertisement file. The agent server, in turn and as symbolized by line <highlight><bold>78</bold></highlight>, downloads this particular file to client browser <highlight><bold>7</bold></highlight> for storage in the browser disk cache. Downloading of advertisement files continues in this manner until, as symbolized by line <highlight><bold>88</bold></highlight>, a last required file for the advertisement has been downloaded, via agent server <highlight><bold>15</bold></highlight>, to the browser disk cache on client PC <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> As the advertisement files for a common advertisement are being downloaded, the Transition Sensor applet also monitors, as symbolized in block <highlight><bold>90</bold></highlight>, a click-stream produced by the current user so as to detect a user-initiated page transition. Once such a transition occurs, usually caused by a user engendered mouse click, and hence an interstitial interval starts, the AdController applet plays, also as symbolized by block <highlight><bold>90</bold></highlight>, a fully cached advertisement (assuming all its media and player files have been downloaded) in the manner specified in its associated AdDescriptor file and using the players specified therein. Also, a the inception of the interstitial interval, the browser issues, also as symbolized by block <highlight><bold>90</bold></highlight>, a request to fetch the next successive web page to which the user desires to transition. Once the advertisement has fully played, or until the next successive content web page is fully downloaded and assembled, or a user has closed an advertisement window, whichever occurs first (assuming the AdDescriptor file specifies that the advertisement can be prematurely terminated), then control is returned, as symbolized by path <highlight><bold>94</bold></highlight>, to the client browser to await completion of the download and interpretation of HTML code that forms that next content page and subsequent execution, of an advertising tag therein to invoke agent download/instantiate/execute operations <highlight><bold>50</bold></highlight> for that page; and so forth. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> The Transition Sensor and AdController applets are each implemented through appropriate Java classes and collectively persist, through storage in the browser disk cache, across different content pages within a site, different web sites, and successive browser sessions. Once either of these applets is completely downloaded through operations <highlight><bold>50</bold></highlight>, providing that applet is not subsequently flushed from the browser disk cache as the user navigates across web sites on the web, the files for that applet will be loaded from that cache, rather than being downloaded from agent server <highlight><bold>15</bold></highlight>, the next time that applet is required, e.g., when the user next navigates, either during a current browser session or a subsequent session, to any successive content page that contains advertising tag <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Whenever client browser <highlight><bold>7</bold></highlight> encounters a next successive content page containing advertising tag <highlight><bold>40</bold></highlight>, then the browser, will first and automatically inquire with agent server <highlight><bold>15</bold></highlight> to ensure that executable code for the Transition Sensor applet, if previously downloaded into the browser disk cache, has not been superseded by an updated version. If such an updated version then exists, the browser will collectively download updated files from the agent server and replace, to the extent necessary, each Transition Sensor applet file residing in the browser disk cache with its updated version. Alternatively, if the Transition Sensor applet has not been previously downloaded into the browser disk cache, then the browser will download all the necessary files for the Transition Sensor applet from the agent server into that cache. The Transition Sensor applet, once executing, will load, through the browser, the AdController applet. To do so, the browser will, if necessary, obtain an updated version, from the agent server, in the same manner as it did for the Transition Sensor. As a result, any corrections or enhancements made to the agent (specifically the Transition Sensor and/or the AdController applets) since the agent was last downloaded to the client browser will be automatically and transparently, from a user perspective, distributed to that browser and downloaded into that disk cache the next time the browser encounters a web page containing an advertising tag. By operating in this fashion, the user is totally and advantageously relieved of any reed to: both initially load and install an application program to obtain advertising and/or later update that program. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Specifically, cross page persistency of the Transition Sensor agent is accomplished by using a Java &ldquo;singleton&rdquo; design. A singleton design allows only a single object to ever be created and is accomplished by declaring a Java class as static. Since all applets run in a same instance of a Java virtual machine, therefore all applets and their associated code share all static class variables. A static Applet Registry class is instantiated automatically by the Transition Sensor applet at its run time and, by implementing the Applet Registry, provides all inter-applet communication between the Transition Sensor and the AdController applets and their threads. The Applet Registry class implements a &ldquo;loadAdController&rdquo; method which, in turn, instantiates the persistent AdController applet. Through this method, the Transition Sensor applet downloads the AdController applet only if the latter applet has either been updated, relative to that version of this applet then resident in the browser disk cache, or does not then reside on the browser disk cache. The AdController applet then instantiates all its own threads that collectively implement transparent advertisement downloading and play mechanisms. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The AdController applet is itself created by an Applet Registry singleton object and creates all other objects that collectively constitute a run time agent execution module. This applet extends standard applet class definitions by over-riding standard Java applet init (initialize), start, run, stop and destroy life cycle methods, conventionally implemented in the client browser, with corresponding substitute methods. The substitute stop method ensures that a traditional response provided by the browser of halting execution for either the AdController applet does not occur whenever the browser calls the stop method to terminate the lifecycle of this applet; hence, advantageously providing persistence to the agent across successive content pages. Consequently, the agent continues executing until the user terminates execution of (closes) the browser itself. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Thus, the agent persists and functions transparently in background, independent and transparent to user navigation across pages on a common web site and across web sites. In that regard, the agent effectively implements a background process which runs in parallel with and is transparent to normal HTML and HTTP operations implemented by the client browser. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> To significantly simplify the description and the accompanying drawings, we have intentionally omitted from this discussion specific Java classes that constitute the AdController agent as well as, to increase a rate at which advertisements can be queued for playback, an accompanying software architecture for processing these classes on a multi-threaded pipelined basis. Such details are conventional in nature; hence, their use in implementing our present invention would be readily apparent to any one skilled in the art. </paragraph>
<paragraph id="P-0117" lvl="7"><number>&lsqb;0117&rsqb;</number> B. Client PC </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a block diagram of client PC <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> As shown, the client PC comprises input interfaces (I/F) <highlight><bold>320</bold></highlight>, processor <highlight><bold>340</bold></highlight>, communications interface <highlight><bold>350</bold></highlight>, memory <highlight><bold>330</bold></highlight> and output interfaces <highlight><bold>360</bold></highlight>, all conventionally interconnected by bus <highlight><bold>370</bold></highlight>. Memory <highlight><bold>330</bold></highlight>, which generally includes different modalities, including illustratively random access memory (RAM) <highlight><bold>332</bold></highlight> for temporary data and instruction store, diskette drive(s) <highlight><bold>334</bold></highlight> for exchanging information, as per user command, with floppy diskettes, and non-volatile mass store <highlight><bold>335</bold></highlight> that is implemented through a hard disk, typically magnetic in nature. Mass store <highlight><bold>335</bold></highlight> may also contain a CD-ROM or other optical media reader (not specifically shown) (or writer) to read information from (and write information onto) suitable optical storage media. The mass store stores operating system (O/S) <highlight><bold>337</bold></highlight> and application programs <highlight><bold>400</bold></highlight>; the latter illustratively containing browser <highlight><bold>7</bold></highlight> (see, e.g., <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>) which implements our inventive technique. O/S <highlight><bold>337</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, may be implemented by any conventional operating system, such as the WINDOWS NT, WINDOWS 95, or WINDOWS 98 operating system (&ldquo;WINDOWS NT&rdquo;, &ldquo;WINDOWS 95&rdquo; and &ldquo;WINDOWS 98&rdquo; are trademarks of Microsoft Corporation of Redmond, Wash.). Given that, we will not discuss any components of O/S <highlight><bold>337</bold></highlight> as they are all irrelevant. Suffice it to say, that the browser, being one of application programs <highlight><bold>400</bold></highlight>, executes under control of the O/S. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Incoming information can arise from two illustrative external sources: network supplied information, e.g., from the Internet and/or other networked facility, through communication link <highlight><bold>9</bold></highlight> to communications interface <highlight><bold>350</bold></highlight>, or from a dedicated input source, via path(es) <highlight><bold>310</bold></highlight>, to input interfaces <highlight><bold>320</bold></highlight>. Dedicated input can originate from a wide variety of sources, e.g., an external database. In addition, input information, in the form of files or specific content <highlight><bold>10</bold></highlight> therein, can also be provided by inserting a diskette containing the information into diskette drive <highlight><bold>334</bold></highlight> from which client PC <highlight><bold>5</bold></highlight>, under user instruction, will access and read that information from the diskette. Input interfaces <highlight><bold>320</bold></highlight> contain appropriate circuitry to provide necessary and corresponding electrical connections required to physically connect and interface each differing dedicated source of input information to client PC <highlight><bold>5</bold></highlight>. Under control of the operating system, application programs <highlight><bold>400</bold></highlight> exchange commands and data with the external sources, via network connection <highlight><bold>9</bold></highlight> or path(es) <highlight><bold>310</bold></highlight>, to transmit and receive information typically requested by a user during program execution. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Input interfaces <highlight><bold>320</bold></highlight> also electrically connect and interface user input device <highlight><bold>395</bold></highlight>, such as a keyboard and mouse, to client PC <highlight><bold>5</bold></highlight>. Display <highlight><bold>380</bold></highlight>, such as a conventional color monitor, and printer <highlight><bold>385</bold></highlight>, such as a conventional laser printer, are connected, via leads <highlight><bold>363</bold></highlight> and <highlight><bold>367</bold></highlight>, respectively, to output interfaces <highlight><bold>360</bold></highlight>. The output interfaces provide requisite circuitry to electrically connect and interface the display and printer to the computer system. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Furthermore, since the specific hardware components of client PC <highlight><bold>5</bold></highlight> as well as all aspects of the software stored within memory <highlight><bold>335</bold></highlight>, apart from the modules that implement the present invention, are conventional and well-known, they will not be discussed in any further detail. Generally speaking, agent server <highlight><bold>15</bold></highlight> and third-party ad server <highlight><bold>20</bold></highlight> each has an architecture that is quite similar to that of client PC <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> C. Software </paragraph>
<paragraph id="P-0124" lvl="7"><number>&lsqb;0124&rsqb;</number> 1. Application programs <highlight><bold>400</bold></highlight> </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts a simplified high-level block diagram of application programs <highlight><bold>400</bold></highlight> resident within the client PC. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> As shown, the application programs, to the extent relevant, contain browser <highlight><bold>7</bold></highlight> and resident JAVA player files <highlight><bold>410</bold></highlight>, i.e., files for JAVA media players that have previously been installed onto the hard disk of the client PC. These players may illustratively include audio, streaming audio, video and multi-media players. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Browser <highlight><bold>7</bold></highlight> contains AdController agent <highlight><bold>420</bold></highlight>, when it has been fully loaded for execution into browser cache, browser disk cache <highlight><bold>430</bold></highlight> and Java virtual machine <highlight><bold>440</bold></highlight> (which has been discussed above to the extent relevant). As noted, this agent persists whenever the user causes browser <highlight><bold>7</bold></highlight> to transition across different web content pages or different web sites, and functions independently and transparently of any such pages and sites. The AdController agent includes applet registry <highlight><bold>426</bold></highlight> for facilitating inter-applet communication within the agent. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> The AdController agent contains two applets Transition Sensor applet <highlight><bold>422</bold></highlight> and AdController applet <highlight><bold>424</bold></highlight>. As discussed above, the Transition Sensor applet accomplishes three basic functions. First, this applet loads, instantiates and starts the AdController applet. Second, the Transition Sensor applet communicates an Internet address of an advertising server, here server <highlight><bold>20</bold></highlight>, to request an advertisement, specifically an AdDescriptor file therefor, that is to be downloaded and subsequently presented. Lastly, the Transition Sensor applet, through associated click-stream monitoring (performed by a Transition Sensor implemented by this applet), determines when a user situated at client browser <highlight><bold>7</bold></highlight> undertakes an affirmative action, such as, e.g., causing a mouse click, to request a next successive web page be downloaded and rendered, and so notifies the AdController agent of that event. This event signals a start of an ensuing interstitial interval. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> AdController applet <highlight><bold>424</bold></highlight>, which is not embedded in any content page, executes under but is not controlled by browser <highlight><bold>7</bold></highlight>. This applet, also as discussed above, accomplishes several basic functions. First, it creates all other objects that collectively form a run time agent execution module for the agent. As noted above, this includes extending standard Java applet class definitions by over riding standard Java applet init, start, run, stop and destroy life cycle methods. Second, the AdController applet &ldquo;politely&rdquo; downloads advertising (including media and, where necessary, player) files, through the client browser executing at a client computer, into browser disk cache and in a manner that is transparent to a user situated at the browser. Lastly, the AdController applet interstitially plays advertisements through the client browser in response to the user click-stream associated with normal user navigation across different web pages. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Browser disk cache <highlight><bold>430</bold></highlight> stores downloaded AdDescriptor files <highlight><bold>433</bold></highlight> and accompanying and downloaded media and player files <highlight><bold>437</bold></highlight>. </paragraph>
<paragraph id="P-0131" lvl="7"><number>&lsqb;0131&rsqb;</number> 2. AdController agent <highlight><bold>420</bold></highlight> </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a high-level block diagram of AdController agent <highlight><bold>420</bold></highlight>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> As shown, the agent specifically contains Transition Sensor applet <highlight><bold>422</bold></highlight>, AdController applet <highlight><bold>424</bold></highlight> and applet registry <highlight><bold>426</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> As discussed generally above, the Transition Sensor applet implements, as one of its functions, a transition sensor which detects, through user navigation click-stream monitoring, a user-initiated transition to a new web page, and produces, in response, a corresponding Transition Sensor event. Such a transition occurs in response to an actual user initiated mouse click or key depression to activate a hotlink appearing on a currently displayed content page in order to move to new content page, either on the same site or on another site. Another such transition occurs whenever a stored history of web pages just visited by the user changes state. The latter is sensed by a JavaScript function that monitors a history stored in browser disk cache <highlight><bold>430</bold></highlight> of visited web page URLs and generates an event whenever the history changes state. For ease of reference, we will collectively define the term &ldquo;click-stream&rdquo; to encompass any user-initiated transition to a new content page, whether it is a mouse click, key depression or history state change. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Transition Sensor events are used to trigger the play of an advertisement only if, by then, all the media and player files for that advertisement have been fully cached into browser disk cache <highlight><bold>430</bold></highlight>. Otherwise, play of that advertisement is deferred until after all those files are cached and the advertisement is ready to be rendered and, importantly, in response to the next user-initiated transition. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Client browser <highlight><bold>7</bold></highlight> produces init (initialize) and start and stop Transition Sensor events, as symbolized by line <highlight><bold>505</bold></highlight> and <highlight><bold>510</bold></highlight>, respectively. The init and start events are produced by the browser to initialize (i.e., load and instantiate) and start the Transition Sensor applet. The stop events are also produced by the browser, though through a Transition Sensor stop method which has been substituted for a standard browser stop method, in response to detection, by the Transition Sensor, of user-initiated page transitions. These events control the state of applet <highlight><bold>422</bold></highlight>. Transition Sensor applet <highlight><bold>422</bold></highlight> communicates directly with AdController applet <highlight><bold>424</bold></highlight>, as symbolized by line <highlight><bold>535</bold></highlight>&mdash;such as to pass an Internet address of an advertising server, and indirectly, as symbolized by line <highlight><bold>530</bold></highlight>, through applet registry <highlight><bold>426</bold></highlight>. Registry <highlight><bold>426</bold></highlight> passes information, as symbolized by line <highlight><bold>540</bold></highlight>, to AdController applet <highlight><bold>424</bold></highlight>. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> As noted above, AdController applet <highlight><bold>424</bold></highlight> extends standard Java applet class definitions by over riding standard Java applet init, start, run, stop and destroy life cycle methods. By doing so, particularly in the case of the Stop method (which will be described below in conjunction with <cross-reference target="DRAWINGS">FIG. 18</cross-reference>), permits the AdController applet to persist in browser disk cache <highlight><bold>430</bold></highlight>, as the user navigates, across successive pages and web sites. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Advantageously, the AdController applet can readily function in a wide variety of environments, without changes to the coding of the applet itself. This is accomplished through downloading of an external configuration file (specifically file <highlight><bold>620</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>, which will be discussed below), as part of the applet files, from agent server <highlight><bold>15</bold></highlight>. Suitably changing parameter values in the configuration file permits the behavior of applet <highlight><bold>424</bold></highlight> to be readily changed to suit a desired environment without a need to utilize a different version of that applet for each different environment, otherwise requiring different software classes and with attendant modifications and re-compilation. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Execution of AdController applet <highlight><bold>424</bold></highlight> begins by Transition Sensor applet <highlight><bold>422</bold></highlight> calling a standard init Applet method, which downloads the external configuration file followed by extracting and saving its configuration parameters. These parameters are supplied, as symbolized by line <highlight><bold>515</bold></highlight>, to the AdController applet, during its execution in order to define its behavior given its current execution environment. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> As noted above, AdController applet <highlight><bold>424</bold></highlight> &ldquo;politely&rdquo; and transparently downloads advertising (including media and, where necessary, player) files, through browser <highlight><bold>7</bold></highlight> into browser disk cache <highlight><bold>430</bold></highlight>, for each and every advertisement that is to be subsequently and interstitially played. A data path through which advertisements are downloaded is shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> by dot-dashed lines; while that for advertisement play is shown in this figure by dotted lines. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Specifically, to download and play advertisements, applet <highlight><bold>424</bold></highlight> implements Ad Pipeline <highlight><bold>545</bold></highlight> (which will be discussed in detail below in conjunction with <cross-reference target="DRAWINGS">FIG. 14</cross-reference>). Pipeline <highlight><bold>545</bold></highlight> implements various threads (processes) and data structures which collectively load advertising files into browser disk cache <highlight><bold>430</bold></highlight> (and, for media files, also into browser RAM cache) and then present fully downloaded advertisements. The pipeline implements Ad Producer, Ad Location and Ad Downloader processes (processes <highlight><bold>1500</bold></highlight>, <highlight><bold>1600</bold></highlight>, <highlight><bold>1700</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 15, 16</cross-reference> and <highlight><bold>17</bold></highlight>, respectively, and discussed in detail below), and download queue <highlight><bold>1430</bold></highlight> and play queue <highlight><bold>1470</bold></highlight> (both of which are shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> and discussed in detail below). </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> In essence, once Transition Sensor applet <highlight><bold>422</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, supplies AdController applet <highlight><bold>424</bold></highlight> with a URL of an AdDescriptor file, Ad Pipeline <highlight><bold>545</bold></highlight> then downloads, as symbolized by dot-dashed line <highlight><bold>520</bold></highlight>, the AdDescriptor file, via agent server <highlight><bold>15</bold></highlight> (serving as a proxy server), from a remote advertising management system. As noted above, this file contains a manifest of media and player files necessary to fully play a complete advertisement. Once this AdDescriptor file has been downloaded into Ad Pipeline <highlight><bold>545</bold></highlight>, pipeline <highlight><bold>545</bold></highlight> then &ldquo;politely&rdquo; downloads, as symbolized by line <highlight><bold>525</bold></highlight>, each file specified in the manifest&mdash;to the extent that file does not already reside on the client hard disk. Pipeline <highlight><bold>545</bold></highlight> writes the AdDescriptor file to the play queue and each downloaded file specified therein to browser disk cache <highlight><bold>430</bold></highlight>; hence forming a queued advertisement for subsequent access. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> At the inception of an interstitial interval, signaled by a Transition Sensor stop event, the AdController applet interstitially plays an advertisement that has then been completely queued&mdash;both in terms of its media and player files. In particular, at the start of that interval, the Ad Pipeline retrieves an AdDescriptor that is then situated at the head of a play queue. Media players <highlight><bold>565</bold></highlight> required by that advertisement, as specified in the AdDescriptor file, are started in the order specified in that file along with their corresponding media file(s). A resulting processed media stream, produced by the player(s), and as symbolized by line <highlight><bold>570</bold></highlight>, is rendered through browser <highlight><bold>7</bold></highlight> to the user. Media players <highlight><bold>565</bold></highlight> may permanently reside, i.e., apart from being downloaded by agent <highlight><bold>420</bold></highlight>, on the client hard disk (thus being implemented by resident player files <highlight><bold>410</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) or be downloaded by pipeline <highlight><bold>545</bold></highlight> into browser disk cache <highlight><bold>430</bold></highlight> (and also browser RAM cache) for subsequent access and use (thus stored within files <highlight><bold>437</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> Once an advertisement completely plays, AdController applet <highlight><bold>424</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, establishes an appropriate log entry for a &ldquo;user impression&rdquo; for that advertisement. Advertisement files are retained in the browser disk cache until that cache completely fills, at which point these files, like any other content files stored in that cache, are deleted by the browser on a first-in first-out (i.e., age order) basis. Media players <highlight><bold>565</bold></highlight>, browser <highlight><bold>7</bold></highlight> and browser disk cache <highlight><bold>430</bold></highlight> are all shown in dashed lines as these components, while being used by the AdController agent, are not viewed as constituting components solely within the agent itself. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> collectively depict a high-level flowchart of processing operations <highlight><bold>600</bold></highlight> performed by AdController agent <highlight><bold>420</bold></highlight>; the correct alignment of the drawing sheets for these figures is shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Though, the operations depicted in this figure&mdash;and also in <cross-reference target="DRAWINGS">FIGS. 8, 9A</cross-reference> and <highlight><bold>9</bold></highlight>B, <highlight><bold>12</bold></highlight>, and <highlight><bold>14</bold></highlight>-<highlight><bold>19</bold></highlight>&mdash;occur through a multi-threaded approach to process multiple advertisements on a pipelined basis, to simplify all these figures, the sequential processing flow shown in each of these figures is that which processes a single common advertisement. Description of threads and classes is provided to the extent needed to provide a sufficient understanding to those skilled in the art as to how these sequential processing flows would preferably be implemented through a multi-threaded Java class methodology. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Upon entry into process <highlight><bold>600</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>, which occurs in response to an Transition Sensor init event from browser <highlight><bold>7</bold></highlight>, block <highlight><bold>610</bold></highlight> is performed. Through this block, Transition Sensor applet <highlight><bold>422</bold></highlight> instructs the applet registry to load the AdController applet. Once that occurs, block <highlight><bold>615</bold></highlight> is performed through which external AdController configuration file <highlight><bold>620</bold></highlight> is retrieved from agent server <highlight><bold>15</bold></highlight>. Thereafter, through decision block <highlight><bold>630</bold></highlight>, agent <highlight><bold>420</bold></highlight> waits, by looping through NO path <highlight><bold>631</bold></highlight>, until browser <highlight><bold>7</bold></highlight> generates a Transition Sensor start event. When such an event occurs, execution proceeds, via YES path <highlight><bold>633</bold></highlight> emanating from this decision block, to block <highlight><bold>635</bold></highlight>. Through this latter block, AdController applet <highlight><bold>424</bold></highlight> obtains an Internet address of an advertisement management system (e.g., system <highlight><bold>25</bold></highlight>) from which the agent is to retrieve AdDescriptor file <highlight><bold>645</bold></highlight>. Applet <highlight><bold>424</bold></highlight> then passes this address to Ad Pipeline <highlight><bold>545</bold></highlight>. The Ad Pipeline, as indicated in block <highlight><bold>640</bold></highlight>, then retrieves AdDescriptor file <highlight><bold>645</bold></highlight> from this address, and through agent server <highlight><bold>15</bold></highlight> serving as a proxy server. Once this file is retrieved, the agent performs block <highlight><bold>650</bold></highlight> which &ldquo;politely&rdquo; downloads all the media and player files <highlight><bold>655</bold></highlight> (to the extent each file does not already reside on the client hard disk), from advertising management system <highlight><bold>25</bold></highlight> (residing on advertising server <highlight><bold>20</bold></highlight>), and, through block <highlight><bold>660</bold></highlight>, stores these files into browser disk cache <highlight><bold>430</bold></highlight> (and, in the case of media files, into browser RAM cache). As noted above, these files are downloaded via agent server <highlight><bold>15</bold></highlight>, which here too serves as a proxy server. This downloading continues until either it finishes or a Transition Sensor stop event generated by the browser arises, whichever occurs first. As to the stop event, decision block <highlight><bold>665</bold></highlight> tests for its occurrence, with execution looping back, via NO path <highlight><bold>666</bold></highlight>, in the absence of such an event. However, whenever this event occurs, such as (as discussed above) in response to a user-initiation page transition, decision block <highlight><bold>665</bold></highlight> routes execution, via YES path <highlight><bold>668</bold></highlight>, to block <highlight><bold>670</bold></highlight>. This latter block then, using media players <highlight><bold>565</bold></highlight>, plays an advertisement then fully queued in the play queue on the browser disk cache, i.e., an AdDescriptor file for this ad then resides at a head of the play queue and all associated media and player files for that advertisement, as specified in that AdDescriptor file, then reside on the client hard disk. </paragraph>
<paragraph id="P-0147" lvl="7"><number>&lsqb;0147&rsqb;</number> 3. AdController applet <highlight><bold>424</bold></highlight> </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a high-level block diagram of basic execution threads that implement AdController applet <highlight><bold>424</bold></highlight>. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> As shown, in response to a Transition Sensor init event produced by the client browser, one thread executes block <highlight><bold>710</bold></highlight> to initialize AdController applet <highlight><bold>424</bold></highlight>. This block performs the downloading (to the extent necessary) and instantiation of applet <highlight><bold>424</bold></highlight>. In response to a Transition Sensor start event produced by the client browser, another thread, by executing block <highlight><bold>720</bold></highlight>, starts the AdController applet. Once this applet is started, this applet, in turn and as discussed above, through execution of block <highlight><bold>730</bold></highlight>, enables downloading of advertising (media and player) files to commence. In response to an received Internet address of a remote ad management system (here, e.g., system <highlight><bold>25</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>) supplied by the Transition Sensor applet, a third thread requests, through execution block <highlight><bold>740</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, an AdDescriptor file from the ad management system situated at this address and then downloads AdDescriptor file <highlight><bold>645</bold></highlight> received in response. If, by this time, block <highlight><bold>730</bold></highlight> has enabled advertisement downloading, then advertising files, as specified in AdDescriptor file <highlight><bold>645</bold></highlight>, are &ldquo;politely&rdquo; downloaded as required. In response to a Transition Sensor stop event produced by the client browser and which signals an inception of an interstitial interval, another thread, here commencing with execution of block <highlight><bold>750</bold></highlight>, suspends downloading of advertisement files in favor of displaying a queued advertisement. Once this downloading is suspended, this last thread invokes block <highlight><bold>760</bold></highlight> to commence play of an advertisement then situated, in terms of its AdDescriptor file, at a head of the play queue. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a high-level flowchart of processing operations <highlight><bold>800</bold></highlight> performed by AdController applet <highlight><bold>424</bold></highlight>. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Upon entry into operations <highlight><bold>800</bold></highlight>, which occurs in response to an init event produced by the Transition Sensor applet, block <highlight><bold>810</bold></highlight> is performed. Through this block, the AdController applet is initialized. This includes downloading files, to the extent needed, for this applet from the agent server and then instantiating this applet. Once this occurs, block <highlight><bold>810</bold></highlight> tests for an occurrence of AdController start event produced by the Transition Sensor applet. Until this event occurs, execution merely loops back, via NO path <highlight><bold>812</bold></highlight>, to block <highlight><bold>810</bold></highlight>. When this event occurs, decision block <highlight><bold>810</bold></highlight> routes execution, via YES path <highlight><bold>814</bold></highlight>, to block <highlight><bold>815</bold></highlight>. This latter block, retrieves external AdController configuration file <highlight><bold>620</bold></highlight> from the agent server. Thereafter, block <highlight><bold>820</bold></highlight> occurs through which the AdController applet creates and starts Ad Pipeline <highlight><bold>545</bold></highlight>. Once the pipeline is fully started, then, block <highlight><bold>825</bold></highlight> is performed to enable advertisement files to be &ldquo;politely&rdquo; downloaded into the ad pipeline and to thereafter actually download such files. While advertisement files are being downloaded or thereafter, if such downloading has completed, decision block <highlight><bold>830</bold></highlight> tests for an occurrence of a Play Ad event. If no such event occurs, then execution loops back, via NO path <highlight><bold>833</bold></highlight>, to decision block <highlight><bold>830</bold></highlight> to continue any further downloading. If however, a Play Ad event occurs, then decision block <highlight><bold>830</bold></highlight> routes execution, via YES path <highlight><bold>837</bold></highlight>, to block <highlight><bold>840</bold></highlight>. This latter block suspends further downloading of advertisement files into the Ad Pipeline. Once this occurs, then block <highlight><bold>845</bold></highlight>, when performed, issues a request to the ad pipeline to play an advertisement having its AdDescriptor file then located at the head of the play queue. While the advertisement is being played, decision block <highlight><bold>850</bold></highlight> tests for an occurrence of an shutdown event generated by the browser, such as caused by, e.g., a user-initiated transition or the user closing an advertisement window or closing the browser itself. If such an event does not occur, decision block <highlight><bold>850</bold></highlight> routes execution, via NO path <highlight><bold>853</bold></highlight>, back to block <highlight><bold>825</bold></highlight> to re-enable &ldquo;polite&rdquo; download of advertisement files once again. If such a shutdown event occurs, then processing operations <highlight><bold>800</bold></highlight> terminate, via YES path <highlight><bold>857</bold></highlight>. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> collectively depict a flowchart of processing operations <highlight><bold>900</bold></highlight> performed by AdController applet <highlight><bold>424</bold></highlight> specifically for processing an advertisement; the correct alignment of the drawing sheets for these figures is shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Upon entry into operations <highlight><bold>900</bold></highlight>, block <highlight><bold>905</bold></highlight> is performed to receive a request, issued by the Transition Sensor applet, to download a next advertisement, specifically an corresponding AdDescriptor file. This request contains an Internet address of a remote ad management system. In response to this request, AdController applet <highlight><bold>424</bold></highlight> performs block <highlight><bold>910</bold></highlight> to request Ad Producer process (also being a thread) <highlight><bold>1500</bold></highlight> to download an ad. The Ad Producer process, as will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, requests advertisement files, specifically an AdDescriptor file, from an Internet address communicated by the Transition Sensor applet. Thereafter, through block <highlight><bold>915</bold></highlight>, the Ad Producer process blocks (i.e., it actively waits for its input data) until this process receives the Internet address of the remote advertising management system. Thereafter, block <highlight><bold>920</bold></highlight> executes to cause Ad Location process (also being a thread) <highlight><bold>1600</bold></highlight> to block until such time as the AdDescriptor file is fully downloaded by Ad Producer process <highlight><bold>1500</bold></highlight> and is provided to the Ad Location process. Ad Location process <highlight><bold>1600</bold></highlight>, as will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, performs the following tasks: (a) on startup of process <highlight><bold>1600</bold></highlight>, this process creates an Ad Producer object; (b) it asks Ad Producer process <highlight><bold>1500</bold></highlight> for next AdDescriptor file <highlight><bold>645</bold></highlight>; and (c) once process <highlight><bold>1600</bold></highlight> obtains such AdDescriptor file <highlight><bold>645</bold></highlight> and if download queue <highlight><bold>1430</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 14</cross-reference>) is not full, it writes that file into this queue. If this queue is then full, process <highlight><bold>1600</bold></highlight> simply waits until the queue is not full before writing the AdDescriptor file into the queue. Once the AdDescriptor file has been completely downloaded, Ad Location process <highlight><bold>1600</bold></highlight> inserts, as shown in block <highlight><bold>925</bold></highlight>, this file into download queue <highlight><bold>1430</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Once AdDescriptor file <highlight><bold>645</bold></highlight> is inserted into the download queue, then Ad Downloader process (also being a thread) <highlight><bold>1700</bold></highlight> executes. This process, as will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, performs a single chain of tasks. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> First, as shown by block <highlight><bold>930</bold></highlight>, process <highlight><bold>1700</bold></highlight> blocks until such time as the AdDescriptor file for the advertisement to then be downloaded becomes available in the download queue. During its execution, this process asks the download queue <highlight><bold>1430</bold></highlight> if there is an AdDescriptor file therein, i.e., such a file for which advertising files need to be downloaded. If the download queue is empty, then AdDescriptor process <highlight><bold>1700</bold></highlight> both waits until that queue is not empty and also retrieves the AdDescriptor file over the network. Once the Ad Downloader process has retrieved the AdDescriptor file, this process downloads, as shown by block <highlight><bold>940</bold></highlight>, all the advertising files specified in the AdDescriptor file, into browser disk cache (and, in the case of media files, into browser RAM cache), by using Browser Cache Proxy <highlight><bold>1450</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 14</cross-reference>). Once all the advertising files have finished downloading, this process, as shown in block <highlight><bold>950</bold></highlight>, moves the AdDescriptor file to play queue <highlight><bold>1470</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 14</cross-reference>). However, if the play queue is then full, the Ad Downloader process will wait until the play queue is not full before moving the AdDescriptor file into this queue. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> The Browser Cache Proxy implements an interface to an abstract cache. The cache implementation could be any kind of cache&mdash;the browser disk or RAM cache, a Java virtual memory cache, a local raw disk cache, and so forth. Once passed through this cache proxy, the media files that constitute an advertisement will have been downloaded into both disk and RAM cache of the browser. Whenever the Ad Downloader process subsequently tries to access any media file having an identical URL to that downloaded, this process will first attempt to load the files from the browser disk cache or browser RAM cache instead of downloading the file, via the Internet, from its advertising management server; thus leveraging, even across different referring web pages or sites and to the extent possible, a one time download of an advertising file across different advertisements. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> Next, should a Transition Sensor stop event occur, i.e., indicative of a start of a next interstitial interval, then Transition Sensor stop method <highlight><bold>1800</bold></highlight> will request that AdController applet <highlight><bold>424</bold></highlight> then play an advertisement. In response to this request, an event scheduler thread within the applet will block, as shown in block <highlight><bold>955</bold></highlight>, until such time as applet <highlight><bold>424</bold></highlight> responds to this request by initiating play of an advertisement. The event scheduler thread controls playing of advertisements to the user. This process determines when to execute media players specific to the next advertisement in the play queue (i.e., in terms of corresponding AdDescriptor files situated in that queue), as well as provides a callback method which the player executes when that player has successfully completed presenting an advertisement as specified in its corresponding AdDescriptor file. Once the AdController applet has initiated play of an advertisement, then, as shown by block <highlight><bold>965</bold></highlight>, the event scheduler retrieves an advertisement, specifically the corresponding AdDescriptor file, then situated at the head of the play queue. Thereafter, the event scheduler, as shown in block <highlight><bold>970</bold></highlight>, launches execution of the specific media player(s) <highlight><bold>565</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 5</cross-reference>), as specified in the corresponding AdDescriptor file, to play this particular advertisement. The browser disk cache provides the associated content files for this advertisement to the media player(s). Once the advertisement has been fully presented, then, as shown in block <highlight><bold>975</bold></highlight>, AdController applet <highlight><bold>424</bold></highlight> appropriately logs this presentation into a log file maintained in the browser disk cache for subsequent uploading to the agent server. Execution then exits from operations <highlight><bold>900</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> A logger process (also implemented as a thread) keeps track of all log entries that need to be sent back to the agent server. This process simply timestamps entries and adds them to a log buffer. Then periodically, the logger process will flush the log back to the agent server where those entries can be archived and analyzed. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> For an advertisement, player mechanisms take associated media files specified in the associated AdDescriptor file from the browser cache and actually display these files to a user via a viewable frame or window. The user will view a pre-cached smoothly playing advertisement out of the browser disk cache and, where appropriate for media files, from browser RAM cache, rather than being streamed in over the Internet. Four modes for displaying advertisements are supported; namely, user-event triggered ad play, frame targeted ad play, timer based ad play and PopUp Java frame play. Each of these player mechanisms uses a media player module (contained within media players <highlight><bold>565</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) and a player thread. The player thread provides an actual presentation of advertising media to the user then operating the client browser. The combination of a player and a player thread provides capabilities of: controlling time-based frequency of advertisement play using an agent configurable timer; displaying of advertising media files in a browser window or Java frame; waiting a configurable amount of time (usually the length of the advertisement as specified in its AdDescriptor file); and terminating the advertisement visually upon completion, or at a request of the user if the advertisement, as configured in its AdDescriptor file, permits pre-mature termination. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> A frame targeted play renders advertisement media onto a browser window. Such play is interruptible and restartable upon user-demand. Tier based ad play utilizes a separate thread that continuously loops to: obtain an AdDescriptor file from the play queue; display that advertisement using a player and player thread; and sleep for a specified amount of time before repeating this sequence. Timer-based ad play is also interruptible and restartable upon user-demand. The result of this type of advertisement play is that the user will periodically view advertisements delivered at regular time intervals rather than by user initiated events. The PopUp Java frame play is a separate thread that also continuously loops to: obtain an AdDescriptor file from the play queue; waits for a signal that a user-initiated transition is occurring; pops up a display window (&ldquo;pop-up&rdquo; window) in the browser, for a pre-defined period of time, and presents the advertisement in that window; and removes the pop up window before repeating this sequence. The result of the PopUp Java Player is that the user will view successive advertisements each for pre-defined time interval (which can vary from one advertisement to the next, as specified in the AdDescriptor files for each such advertisement) whenever the user transitions between one web page and the next. Once an advertisement is completely played and in the absence, as discussed above of any instructions in the AdDescriptor file to replay that advertisement, such as through, e.g., timer-based ad play, the associated AdDescriptor file is effectively &ldquo;pulled off&rdquo; the play queue. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> In particular, downloading of advertisement files occurs, as discussed previously, continuously as effectively a background process, using a separate asynchronous thread. The stop method of the Transition Sensor (specifically Transition Sensor stop method <highlight><bold>1800</bold></highlight> as will be described below in conjunction with <cross-reference target="DRAWINGS">FIG. 18</cross-reference>) is responsible for generating a play event to the AdController agent. This event notifies the agent of an opportunity to present a downloaded advertisement to the user. This stop method is called automatically by the client browser whenever a user transitions off a web page that contains the embedded advertising tag. In particular, this method invokes a start player method in the AdController agent. The start player method, in turn, invokes a similarly named method, in the event scheduler, which initiates and controls the presentation of advertisements during content page transitions. The event scheduler ensures all media files for an advertisement have been transparently downloaded before their presentation, as well as exercises control over actual execution of the appropriate player classes required to visibly render the advertisement. In that regard, the event scheduler instantiates and invokes a player class appropriate for the current advertisement by calling a start method of that class. This start method creates the player thread that performs visual rendering of the advertisement. Then, this start method calls a run method of the player thread in order to visually present the advertising media from the browser disk and RAM caches. Upon completion, based on the configuration of the advertisement, the run method, by executing its own stop method, terminates the advertisement either upon detecting a close request by the user or completion of ad play timeout. The stop method performs any player software termination and cleanup, finally executing a callback to the scheduler object. </paragraph>
<paragraph id="P-0162" lvl="7"><number>&lsqb;0162&rsqb;</number> 4. Inter-applet events involving Transition Sensor applet <highlight><bold>422</bold></highlight> </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts inter-applet events <highlight><bold>1000</bold></highlight> that occur within AdController agent <highlight><bold>420</bold></highlight> during execution of Transition Sensor applet <highlight><bold>422</bold></highlight>. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> As shown and discussed above, whenever a browser interprets and then executes advertising tag <highlight><bold>40</bold></highlight>, specifically tag <highlight><bold>42</bold></highlight> therein, situated within content page <highlight><bold>35</bold></highlight>, this causes the browser to download script <highlight><bold>200</bold></highlight> (see <cross-reference target="DRAWINGS">FIGS. 2A and 2B</cross-reference>) from the agent server. This applet, in turn, dynamically writes Transition Sensor applet <highlight><bold>210</bold></highlight> into the referring web content page. As discussed above, once this applet is instantiated executed by the client browser, the applet, in turn, instantiates applet registry <highlight><bold>426</bold></highlight>. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Once the applet registry is instantiated, the Transition Sensor queries the registry, this operation being symbolized by line <highlight><bold>1015</bold></highlight>, to determine current status of the AdController applet. If, as symbolized by line <highlight><bold>1020</bold></highlight>, the registry indicates that the AdController applet is not loaded and hence is not executing, then Transition Sensor applet <highlight><bold>422</bold></highlight> loads, as symbolized by line <highlight><bold>1025</bold></highlight>, AdController applet <highlight><bold>424</bold></highlight> from the browser disk cache, and then instantiates and starts this applet. Once the AdController applet is instantiated, the Transition Sensor applet writes, as symbolized by line <highlight><bold>1030</bold></highlight>, appropriate entries, indicating that both the Transition Sensor applet is loaded and, as symbolized by line <highlight><bold>1035</bold></highlight>, that the AdController applet is loaded, into the applet registry. Once this occurs, then the applet registry returns, as symbolized by line <highlight><bold>1040</bold></highlight>, an appropriate handle for the AdController applet to the Transition Sensor in order to permit the latter to refer to the former. Thereafter, as symbolized by line <highlight><bold>1060</bold></highlight>, the Transition Sensor passes, as discussed above and as symbolized by line <highlight><bold>1060</bold></highlight>, a request containing an Internet address of an advertisement management system to the AdController applet to download an AdDescriptor file, for an advertisement, from that address. This address is specified in tag <highlight><bold>44</bold></highlight> of advertising tag <highlight><bold>40</bold></highlight> and, as symbolized by dashed line <highlight><bold>1050</bold></highlight>, incorporated into the request. Thereafter, the Transition Sensor, in response to a user-initiated transition (click-stream) to a next content web page, executes its stop method (method <highlight><bold>1800</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>) to instruct, i.e., issue a request to, as symbolized by line <highlight><bold>1065</bold></highlight>, the AdController applet to play a fully downloaded advertisement having its corresponding AdDescriptor file then situated at the head of the play queue. Once this occurs, the Transition Sensor applet terminates its execution until the browser next encounters, interprets and executes a content page containing advertising tag <highlight><bold>40</bold></highlight> at which point the Transition Sensor applet is re-loaded and re-started; and so forth. </paragraph>
<paragraph id="P-0166" lvl="7"><number>&lsqb;0166&rsqb;</number> <highlight><bold>5</bold></highlight>. Transition Sensor applet <highlight><bold>422</bold></highlight> </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> depicts a high-level block diagram of basic processing threads that implement Transition Sensor applet <highlight><bold>422</bold></highlight>. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> As shown, in response to a Init (Initialize) Transition Sensor applet event produced by the client browser, a thread commences by executing block <highlight><bold>1110</bold></highlight> to initialize Transition Sensor applet <highlight><bold>422</bold></highlight>. This thread, in turn, executes block <highlight><bold>1120</bold></highlight> to load AdController applet <highlight><bold>424</bold></highlight> from browser disk cache or download it from the agent server, if necessary, and then load it. Thereafter, this thread executes block <highlight><bold>1130</bold></highlight> to obtain the Internet address of an advertising management system (e.g., system <highlight><bold>25</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>, <highlight><bold>2</bold></highlight>A and <highlight><bold>2</bold></highlight>B, and <highlight><bold>10</bold></highlight>) in tag <highlight><bold>44</bold></highlight> from advertising tag <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, in response to a Start Transition Sensor applet event generated by the client browser, another thread commences by executing block <highlight><bold>1140</bold></highlight> to enable Ad Downloader process <highlight><bold>1700</bold></highlight> (as discussed above, and to be discussed in detail below in conjunction with <cross-reference target="DRAWINGS">FIG. 17</cross-reference>) to commence &ldquo;polite&rdquo; downloading an AdDescriptor file and all required and associated advertisement files (both media and player) into the browser disk cache. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> Further, as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, in response to a Stop Transition Sensor applet event generated by the client browser, a third thread commences by executing block <highlight><bold>1150</bold></highlight> to disable Ad Downloader process <highlight><bold>1700</bold></highlight> and thus suspend further downloading of advertisement files. Once this occurs, this thread then executes block <highlight><bold>1160</bold></highlight> to instruct the AdController applet to play a fully downloaded advertisement having its corresponding AdDescriptor file then situated at the head of the play queue. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts a high-level flowchart of processing operations <highlight><bold>1200</bold></highlight> performed by Transition Sensor applet <highlight><bold>422</bold></highlight>. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> Upon entry in operations <highlight><bold>1200</bold></highlight>, decision block <highlight><bold>1210</bold></highlight> tests for an occurrence of an init event produced by the client browser. Until such an event occurs, execution loops back, via NO path <highlight><bold>1213</bold></highlight>, to block <highlight><bold>1210</bold></highlight>. When this event occurs, execution proceeds, via YES path <highlight><bold>1217</bold></highlight> to block <highlight><bold>1220</bold></highlight> which, when performed, initializes Transition Sensor applet <highlight><bold>422</bold></highlight>. Thereafter, block <highlight><bold>1230</bold></highlight> is performed through which the Transition Sensor applet <highlight><bold>424</bold></highlight> instructs, by issuing a request to, the AdController applet to download an advertisement, specifically as discussed above an AdDescriptor file from an ad management server specified in the advertising tag. Once this occurs, decision block <highlight><bold>1242</bold></highlight> tests for an occurrence of a Transition Sensor start event generated by the client browser. Until such an event occurs, execution loops back, via NO path <highlight><bold>1243</bold></highlight>, to block <highlight><bold>1240</bold></highlight>. When this particular event occurs, execution proceeds, via YES path <highlight><bold>1247</bold></highlight> to block <highlight><bold>1250</bold></highlight> which, when performed, enables Ad Pipeline <highlight><bold>545</bold></highlight> to download the AdDescriptor file and associated advertising files. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> Next, decision block <highlight><bold>1260</bold></highlight> tests for an occurrence of a Transition Sensor stop event generated by the client browser. Until such an event occurs, execution loops back, via NO path <highlight><bold>1263</bold></highlight>, to block <highlight><bold>1260</bold></highlight>. When a Transition Sensor stop event occurs, execution then proceeds, via YES path <highlight><bold>1267</bold></highlight> to block <highlight><bold>1270</bold></highlight> which, when performed, requests that AdController applet <highlight><bold>424</bold></highlight>, specifically via Ad Pipeline <highlight><bold>545</bold></highlight>, then play an advertisement. </paragraph>
<paragraph id="P-0174" lvl="7"><number>&lsqb;0174&rsqb;</number> 6. Ad Loader process <highlight><bold>1300</bold></highlight> </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> depicts a high-level block diagram of Ad Loader process <highlight><bold>1300</bold></highlight> which forms a portion of AdController applet <highlight><bold>424</bold></highlight>. Process <highlight><bold>1300</bold></highlight> provides an advertiser (specifically an advertising programmer) with control over various functions, for advertisement play and logging, implemented by the AdController applet, specifically how and where this applet retrieves advertisements across a networked connection and how those advertisements are played. Through use of the Ad Loader, the AdController applet can be controlled, to an extent desired, by external programmatic calls. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> As shown, this process includes Ad Loader API (application programming interface) <highlight><bold>1310</bold></highlight> which interfaces to Ad Pipeline <highlight><bold>545</bold></highlight> and through this pipeline controls how advertisements are presented, as symbolized by block <highlight><bold>1370</bold></highlight>, by the player mechanisms. In particular, the Ad Loader API provides information regarding and, through setting various program variables, permits programmer control over advertisement display and downloading operations. In that regard, these variables provide a callback to the AdController applet indicating when a content page to which the user has just transitioned has completed its downloading; and can be used to: instruct the AdController applet when to download a next advertisement, when to play a next advertisement fully queued in the Ad Pipeline, start and stop a play timer (for use with, e.g., timer based ad play, as discussed above), log a message, set a mode so as to specify a desired location to display advertisements, suspend and resume download of advertisement files into the Ad Pipeline, suspend a current download for a given period of time, and suspend and resume advertisement play by the player mechanisms. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> In that regard, the Ad Loader API configures Ad Pipeline <highlight><bold>545</bold></highlight> such that AdDescriptor file <highlight><bold>645</bold></highlight> is downloaded, as symbolized by block <highlight><bold>1320</bold></highlight>, from a remote ad management system into the Ad Pipeline in response to receipt of an Internet address of an ad management system and, for targeted advertisements, a URL of a referring web page address. As symbolized by block <highlight><bold>1330</bold></highlight>, the API configures the Ad Pipeline such that advertisement downloading is enabled only when AdController applet <highlight><bold>424</bold></highlight> is not playing an advertisement. Furthermore, as symbolized by block <highlight><bold>1340</bold></highlight>, the API configures the Ad Pipeline such that advertisement downloading is disabled whenever the AdController applet is playing an advertisement. Furthermore, as symbolized by block <highlight><bold>1350</bold></highlight>, the API configures the Ad Pipeline such that advertisement play is to commence in response to a request to play a next advertisement, i.e., one that is fully cached in the browser disk cache and having its AdDescriptor file then situated at the head of the play queue. </paragraph>
<paragraph id="P-0178" lvl="7"><number>&lsqb;0178&rsqb;</number> 7. Ad Pipeline <highlight><bold>545</bold></highlight> </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts a high-level block diagram of Ad Pipeline <highlight><bold>545</bold></highlight>. As discussed above, the Ad Pipeline implements various threads and data structures which collectively load advertising files (needed media and player files) into the browser disk cache and, for media files, also into browser RAM cache, and then present fully downloaded advertisements. As noted, the Ad Pipeline employs Ad Producer process <highlight><bold>1500</bold></highlight>, Ad Location process <highlight><bold>1600</bold></highlight> and Ad Downloader process <highlight><bold>1700</bold></highlight> (all of these processes, as noted above, are also threads). </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> In response to an incoming request to download an advertisement, Ad Pipeline <highlight><bold>545</bold></highlight> is invoked. Specifically, within this pipeline, first block <highlight><bold>1410</bold></highlight> executes to invoke Ad Producer process <highlight><bold>1500</bold></highlight> in response to an incoming request to download an advertisement. As discussed above, this request, issued by the Transition Sensor applet, includes an Internet address of a remote ad management system (e.g., system <highlight><bold>25</bold></highlight> shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>) on which an advertisement resides and is to be downloaded (through agent server <highlight><bold>15</bold></highlight> as a proxy server). Ad Producer process <highlight><bold>1500</bold></highlight>, as will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, requests advertisement files, specifically an AdDescriptor file (e.g., file <highlight><bold>645</bold></highlight>), from an Internet address specified in the request. During its execution, the Ad Producer process waits until it receives the Internet address of the remote advertising management system, whereupon this process then downloads AdDescriptor file <highlight><bold>645</bold></highlight> from the specified ad management system. Once this file has been downloaded, block <highlight><bold>1420</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, executes to invoke Ad Location process <highlight><bold>1600</bold></highlight> (which will be discussed in detail below in conjunction with <cross-reference target="DRAWINGS">FIG. 16</cross-reference>). During its execution, Ad Location process <highlight><bold>1600</bold></highlight> blocks until such time as AdDescriptor file <highlight><bold>645</bold></highlight> is fully downloaded by Ad Producer process <highlight><bold>1500</bold></highlight> and is provided to the Ad Location process, whereupon the Ad Location process writes this AdDescriptor file into download queue <highlight><bold>1430</bold></highlight>. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> After AdDescriptor file <highlight><bold>645</bold></highlight> has been written into the download queue, Ad Location process <highlight><bold>1600</bold></highlight>, as will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, performs the following tasks: (a) on startup of process <highlight><bold>1600</bold></highlight>, this process creates an Ad Producer object; (b) this process asks Ad Producer process <highlight><bold>1500</bold></highlight> for next AdDescriptor file <highlight><bold>645</bold></highlight>; and (c) once process <highlight><bold>1600</bold></highlight> obtains AdDescriptor file <highlight><bold>645</bold></highlight> and, if download queue <highlight><bold>1430</bold></highlight> is not full, process <highlight><bold>1600</bold></highlight> writes that file into this queue. If this queue is then full, process <highlight><bold>1600</bold></highlight> simply waits until the queue is not full before writing the AdDescriptor file into the queue. Once the AdDescriptor file has been completely downloaded, Ad Location process <highlight><bold>1600</bold></highlight> inserts, as shown in block <highlight><bold>925</bold></highlight>, this file into download queue <highlight><bold>1430</bold></highlight>. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Once AdDescriptor file <highlight><bold>645</bold></highlight> is inserted into the download queue, then Ad Downloader process <highlight><bold>1700</bold></highlight> executes. Process <highlight><bold>1700</bold></highlight>, which will be discussed below in conjunction with <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, performs a single chain of tasks. First, process <highlight><bold>1700</bold></highlight> blocks until such time as the downloaded AdDescriptor file has become available in the download queue. During-its execution, this process asks download queue <highlight><bold>1430</bold></highlight> if it contains an AdDescriptor file, e.g., file <highlight><bold>645</bold></highlight>. If so, then advertising files need to be downloaded for that particular AdDescriptor file. If the download queue is empty, then process <highlight><bold>1700</bold></highlight> both waits until that queue is not empty and also retrieves the AdDescriptor file over the network. Once Ad Downloader process <highlight><bold>1700</bold></highlight> has obtained this AdDescriptor file, process <highlight><bold>1700</bold></highlight> then downloads, all the media and required player files specified in the AdDescriptor file by using Browser Cache Proxy <highlight><bold>1450</bold></highlight>, into browser disk and RAM cache. Once all the advertising files have finished downloading, process <highlight><bold>1700</bold></highlight> moves the AdDescriptor file to play queue <highlight><bold>1470</bold></highlight>. However, if the play queue is then full, the Ad Downloader process waits until play queue <highlight><bold>1470</bold></highlight> is not full before moving the AdDescriptor file into this queue for subsequent ad play. As discussed above, AdDescriptor file <highlight><bold>645</bold></highlight> for a fully queued ad (i.e., with its all the associated media and player residing on the client hard disk) is subsequently retrieved from play queue <highlight><bold>1470</bold></highlight> in response a request to play an advertisement, this request being issued in response to a Transition Sensor stop event. </paragraph>
<paragraph id="P-0183" lvl="7"><number>&lsqb;0183&rsqb;</number> 8. Ad Producer process <highlight><bold>1500</bold></highlight> </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> depicts a high-level block diagram of Ad Producer process <highlight><bold>1500</bold></highlight>. As noted above, this process requests an AdDescriptor file from an Internet address communicated by the Transition Sensor applet and subsequently downloads that file in the browser disk cache. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> As shown, upon entry into process <highlight><bold>1500</bold></highlight>, execution first proceeds to decision block <highlight><bold>1510</bold></highlight>. This block determines whether a URL has been received, from the Transition Sensor, from which to fetch an AdDescriptor file. If such a URL has not yet been received, then execution loops back, via NO path <highlight><bold>1517</bold></highlight>, to this decision block. Alternatively, if such a URL has been received, then execution proceeds, via YES path <highlight><bold>1513</bold></highlight>, to block <highlight><bold>1520</bold></highlight> which, in turn, stores this URL, as Ad URL <highlight><bold>1530</bold></highlight>, for use during a next successive advertisement download opportunity </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> Once this URL has been so stored, execution proceeds to decision block <highlight><bold>1540</bold></highlight>. This block tests for an occurrence of a user-initiated event (click-stream) signifying that advertisement downloading can now occur, such as, e.g., when the user has just closed an existing advertisement frame and a next successive content page to which the user has transitioned is being rendered by the client browser. If such an event has not yet occurred, e.g., the next successive content web page is downloading, then execution merely loops back, via NO path <highlight><bold>1543</bold></highlight>, back to decision block <highlight><bold>1540</bold></highlight>. However, if such an event occurs, then this decision block routes execution, via YES path <highlight><bold>1547</bold></highlight>, to block <highlight><bold>1550</bold></highlight>. This latter block, when executed, downloads AdDescriptor file <highlight><bold>645</bold></highlight> using the URL communicated by the Transition Sensor. Once this file is completely downloaded, then block <highlight><bold>1560</bold></highlight> executes to transfer this file to Ad Location process <highlight><bold>1600</bold></highlight>. Thereafter, execution loops back, via path <highlight><bold>1565</bold></highlight>, to decision block <highlight><bold>1510</bold></highlight>, and so forth. </paragraph>
<paragraph id="P-0187" lvl="7"><number>&lsqb;0187&rsqb;</number> 9. Ad Location process <highlight><bold>1600</bold></highlight> </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> depicts a high-level block diagram of Ad Location process <highlight><bold>1600</bold></highlight>. This process, as discussed above, accomplishes the following tasks: (a) on startup of this process, process <highlight><bold>1600</bold></highlight> creates an Ad Producer object; (b) process <highlight><bold>1600</bold></highlight> asks Ad Producer process <highlight><bold>1500</bold></highlight> for next AdDescriptor file <highlight><bold>645</bold></highlight>; and (c) once process <highlight><bold>1600</bold></highlight> obtains AdDescriptor file <highlight><bold>645</bold></highlight> and, if download queue <highlight><bold>1430</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 14</cross-reference>) is not full, process <highlight><bold>1600</bold></highlight> then writes that file into this queue. If this queue is then full, process <highlight><bold>1600</bold></highlight> simply waits until the queue is not full before writing the AdDescriptor file into the queue. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> Upon entry into process <highlight><bold>1600</bold></highlight> and with respect to advertisement downloading itself, execution proceeds to decision block <highlight><bold>1610</bold></highlight>. This decision block, when executed, determines whether an Internet address (URL) of an ad management system has been received from the Transition Sensor applet from which a next successive advertisement download. If that address has not yet been received, then execution merely loops back, via NO path <highlight><bold>1613</bold></highlight>, to decision block <highlight><bold>1610</bold></highlight>. Alternatively, if such an address has been received but not yet processed, then decision block <highlight><bold>1610</bold></highlight> routes execution, via YES path <highlight><bold>1617</bold></highlight>, to block <highlight><bold>1620</bold></highlight>. This latter block requests Ad Producer process <highlight><bold>1500</bold></highlight> to download an AdDescriptor file, e.g., file <highlight><bold>645</bold></highlight>, from this URL. Once this request occurs, execution proceeds to decision block <highlight><bold>1630</bold></highlight> to determine whether this AdDescriptor file has been completely downloaded. If this file download is still occurring, then execution merely loops back, via NO path <highlight><bold>1633</bold></highlight>, to block <highlight><bold>1630</bold></highlight> to await completion of the download. Once this download completes, decision block <highlight><bold>1630</bold></highlight> routes execution, via YES path <highlight><bold>1637</bold></highlight>, to block <highlight><bold>1640</bold></highlight>. This latter block writes the downloaded AdDescriptor file into download queue <highlight><bold>1430</bold></highlight>. Once this occurs, execution is directed, via path <highlight><bold>1645</bold></highlight>, back to decision block <highlight><bold>1610</bold></highlight>, and so forth. </paragraph>
<paragraph id="P-0190" lvl="7"><number>&lsqb;0190&rsqb;</number> 10. Ad Downloader process <highlight><bold>1700</bold></highlight> </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> depicts a high-level block diagram of Ad Downloader process <highlight><bold>1700</bold></highlight>. Essentially, as discussed above, process <highlight><bold>1700</bold></highlight> determines, from the download queue, if it contains an AdDescriptor file, e.g., file <highlight><bold>645</bold></highlight>. If it does contain such an AdDescriptor file, then advertising files need to be downloaded for that file. Consequently, process <highlight><bold>1700</bold></highlight> then downloads required advertising files specified in that AdDescriptor file. Once this fully occurs, process <highlight><bold>1700</bold></highlight> moves the AdDescriptor file to the play queue. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> In particular upon entry into process <highlight><bold>1700</bold></highlight>, execution proceeds to decision block <highlight><bold>1710</bold></highlight>. This decision block determines whether the download queue then contains an AdDescriptor file, e.g., file <highlight><bold>645</bold></highlight>. If the queue is empty, then execution merely loops back, via NO path <highlight><bold>1717</bold></highlight>, to this decision block to await such an AdDescriptor file. However, if download queue <highlight><bold>1430</bold></highlight> then contains such a file, process <highlight><bold>1720</bold></highlight> obtains the AdDescriptor file then situated at the head of this queue. Thereafter, block <highlight><bold>1730</bold></highlight> executes. This block downloads all the required advertising files, not then resident on the client hard disk, into browser proxy cache <highlight><bold>1450</bold></highlight>. This block also transfers all the associated media files in the browser proxy cache to the browser RAM cache. Execution then proceeds to decision block <highlight><bold>1740</bold></highlight> which determines whether all required advertising files have then been downloaded. If any such file remains to be downloaded, then decision block <highlight><bold>1740</bold></highlight> routes execution, via NO path <highlight><bold>1747</bold></highlight>, back to block <highlight><bold>1730</bold></highlight> to download that file. Alternatively, if all the required advertising files have been downloaded, then execution proceeds, via YES path <highlight><bold>1743</bold></highlight>, to block <highlight><bold>1750</bold></highlight>. This latter block moves the AdDescriptor file from download queue <highlight><bold>1430</bold></highlight> to an end of play queue <highlight><bold>1470</bold></highlight>. Once the AdDescriptor file is written into the play queue, the corresponding advertisement is then ready to be presented to the user, in order relative to other AdDescriptor files then queued in the play queue, during an ensuing interstitial interval. </paragraph>
<paragraph id="P-0193" lvl="7"><number>&lsqb;0193&rsqb;</number> 11. Transition Sensor stop method <highlight><bold>1800</bold></highlight> </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> depicts a flowchart of stop method <highlight><bold>1800</bold></highlight> invoked by Transition Sensor applet <highlight><bold>422</bold></highlight>. This method, in response to a stop event generated by the browser, suspends downloading of advertisement files and initiates interstitial ad play. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> In particular, upon entry into method <highlight><bold>1800</bold></highlight>, decision block <highlight><bold>1810</bold></highlight> executes to determine if a stop event has been received from browser <highlight><bold>7</bold></highlight>. If such a stop event has yet not occurred, then execution loops back, via NO path <highlight><bold>1813</bold></highlight>, back to block <highlight><bold>1810</bold></highlight> to await occurrence of this event. When this event occurs, decision block <highlight><bold>1810</bold></highlight> directs execution, via YES path <highlight><bold>1817</bold></highlight>, to decision block <highlight><bold>1820</bold></highlight>. This latter decision block determines if AdController applet <highlight><bold>424</bold></highlight> is then loaded and executing. If this applet is not then executing, decision block <highlight><bold>1820</bold></highlight> routes execution, via NO path <highlight><bold>1827</bold></highlight>, to block <highlight><bold>1830</bold></highlight>. This latter block inhibits any request from being made to the AdController applet to play any advertisement until that applet is executing and, once that occurs, a next user-initiated (click-stream) event occurs. Thereafter, execution of method <highlight><bold>1800</bold></highlight> terminates. Alternatively, if the AdController applet is loaded and executing, then decision block <highlight><bold>1820</bold></highlight> routes execution, via YES path <highlight><bold>1823</bold></highlight>, to block <highlight><bold>1840</bold></highlight>. This latter block requests the AdController applet to play a next advertisement. Once this request is issued, then execution proceeds to block <highlight><bold>1850</bold></highlight>. This block, in turn, requests the AdController applet to suspend &ldquo;polite&rdquo; background downloading of advertisement files while a next successive web content page, as requested by the user, is being downloaded by the browser. Once block <highlight><bold>1850</bold></highlight> executes, execution of method <highlight><bold>1800</bold></highlight> terminates. </paragraph>
<paragraph id="P-0196" lvl="7"><number>&lsqb;0196&rsqb;</number> 12. Transition Sensor start method <highlight><bold>1900</bold></highlight> </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> depicts a flowchart of start method <highlight><bold>1900</bold></highlight> invoked by Transition Sensor applet <highlight><bold>422</bold></highlight>. This method, in response to a start event generated by the browser, resumes background downloading of advertisement files. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Specifically, upon entry into method <highlight><bold>1900</bold></highlight>, execution proceeds to decision block <highlight><bold>1910</bold></highlight> which, when executed, determines if a start event has been received from browser <highlight><bold>7</bold></highlight>. If such a start event has not yet occurred, then execution loops back, via NO path <highlight><bold>1913</bold></highlight>, back to block <highlight><bold>1910</bold></highlight> to await occurrence of this event. When this event occurs, decision block <highlight><bold>1910</bold></highlight> directs execution, via YES path <highlight><bold>1917</bold></highlight>, to decision block <highlight><bold>1920</bold></highlight>. This latter decision block determines if AdController applet <highlight><bold>424</bold></highlight> is then loaded and executing. If this applet is not then executing, decision block <highlight><bold>1920</bold></highlight> routes execution, via NO path <highlight><bold>1927</bold></highlight>, to block <highlight><bold>1930</bold></highlight>. Block <highlight><bold>1930</bold></highlight> inhibits any request from being made to the AdController applet to download any advertisement until that applet is executing and, once that occurs, a next user-initiated (click-stream) event occurs. Once the AdController applet begins executing and thereafter a next user-initiated (click-stream) event occurs, execution proceeds to block <highlight><bold>1940</bold></highlight>. This latter block requests the AdController applet to resume background downloading of advertisement files. Once this downloading is resumed, method <highlight><bold>1900</bold></highlight>, through execution of block <highlight><bold>1960</bold></highlight>, waits for browser <highlight><bold>7</bold></highlight> to call Transition Sensor stop method <highlight><bold>1800</bold></highlight> whenever the user next unloads a web page currently rendered by the browser, i.e., causes a user initiated-event to transition to a next successive web page. Alternatively, if the AdController applet is loaded and executing, then decision block <highlight><bold>1920</bold></highlight> routes execution, via YES path <highlight><bold>1923</bold></highlight>, to block <highlight><bold>1950</bold></highlight>. Since at this point the next successive content web page has been fully executed by the browser and is, e.g., rendered to the user, block <highlight><bold>1950</bold></highlight> issues a request, through the applet registry, to the AdController applet to enable it to resume background downloading of advertisement files. Once this occurs, block <highlight><bold>1940</bold></highlight> is executed to issue a request to the AdController applet to resume the background downloading. Execution then proceeds to block <highlight><bold>1960</bold></highlight> to wait for browser <highlight><bold>7</bold></highlight> to call Transition Sensor stop method <highlight><bold>1800</bold></highlight> whenever the user next unloads a web page currently rendered by the browser, i.e., causes a user initiated-event to transition to a next successive web page. Whenever the browser generates a next Transition Sensor stop event, process <highlight><bold>1900</bold></highlight> terminates. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> Although a single embodiment which incorporates the teachings of our present invention has been shown and described in considerable detail herein, those skilled in the art can readily devise many other embodiments and applications of the present invention that still utilize these teachings. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer readable medium storing a web page wherein the web page comprises a plurality of computer readable instructions, the instructions representing page content and an embedded advertising tag, wherein the advertising tag when executed by a web browser, causes the browser to: 
<claim-text>download from a server, at least one media file forming a predefined advertisement, while the browser is displaying a content web page to a user; and </claim-text>
<claim-text>during an interstitial interval occurring in response to a user-initiated event for transitioning between successive web pages, suspending the download and displaying said one media file so as to render the advertisement through the browser to the user.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1E</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005000A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005000A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005000A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005000A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005000A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005000A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005000A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005000A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005000A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005000A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005000A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005000A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005000A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005000A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005000A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005000A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005000A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005000A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005000A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005000A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005000A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005000A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005000A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005000A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030005000A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030005000A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030005000A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
