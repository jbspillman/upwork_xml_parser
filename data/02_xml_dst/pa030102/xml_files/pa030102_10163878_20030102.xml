<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005083A1-20030102-D00000.TIF SYSTEM "US20030005083A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005083A1-20030102-D00001.TIF SYSTEM "US20030005083A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005083A1-20030102-D00002.TIF SYSTEM "US20030005083A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005083</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10163878</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020607</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>01410069.7</doc-number>
</priority-application-number>
<filing-date>20010608</filing-date>
<country-code>EP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>218000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>251000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method of and computer network arrangement for restoring an impaired software image</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Eric</given-name>
<family-name>Owhadi</family-name>
</name>
<residence>
<residence-non-us>
<city>Sassenage</city>
<country-code>FR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jean-Francois</given-name>
<family-name>Larvoire</family-name>
</name>
<residence>
<residence-non-us>
<city>Meylan</city>
<country-code>FR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Bruno</given-name>
<family-name>Richard</family-name>
</name>
<residence>
<residence-non-us>
<city>Crolles</city>
<country-code>FR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>LOWE HAUPTMAN GILMAN AND BERNER, LLP</name-1>
<name-2></name-2>
<address>
<address-1>1700 DIAGONAL ROAD</address-1>
<address-2>SUITE 300 /310</address-2>
<city>ALEXANDRIA</city>
<state>VA</state>
<postalcode>22314</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An impaired software image associated with a first networked computer is restored by generating a software image request that identifies the software image and the first computer. The software image request is passed to plural other computers on the network. If one of the other computers has the image, the other computer supplies the image to the first computer to restore the impaired image. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">DESCRIPTION OF AN BACKGROUND TO INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to a method of restoring an impaired software image and to a computer network arrangement. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Particularly, although not exclusively, the invention relates to a method of restoring an impaired software image which is associated with a networked computer, which method obviates the requirement to use standard recovery tools such as recovery CD&apos;s/DVD&apos;s, dedicated (Intranet or Internet) recovery file servers and the need to occupy substantial parts of local data stores such as a hard disk. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> As will be appreciated, data recovery using specific recovery disks such as CD&apos;s and DVD&apos;s, although effective in broad terms, inevitably requires that the recovery disk be available, and dictates, in addition, that the computer in need of support be associated with an appropriate CD/DVD drive. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Although, as an alternative, it is possible to maintain, locally, a computer copy of important software components, by using an unoccupied hard disk partition, for example, this uses a large amount of data storage space, which could be better used for other purposes. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Other proposals, such as Rembo Technology SARL&apos;s &ldquo;REMBO&rdquo; Operating System makes use of a dedicated server which, in the event of a software failure, can supply appropriate restoration instructions to the networked computer concerned. However, servers of this type are expensive to install and to maintain, and this proposal is thus commercially unviable in many situations. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> It is thus an object of the present invention to provide an improved method of restoring an impaired software image and to provide an improved computer network arrangement which enables this process to be effected. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> According to a first aspect of the present invention, there is provided a method of restoring an impaired software image associated with a first networked computer, comprising: </paragraph>
<paragraph id="P-0008" lvl="2"><number>&lsqb;0008&rsqb;</number> a) identifying the impaired software image, </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> b) generating a software image request, the software image request identifying the software image and the first computer, </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> c) passing the software image request to a plurality of other computers on the network and, in the event that one of said plurality of other computers is provided with the image, </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> d) supplying the image from said one other computer to the first computer to enable the impaired image to be restored. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The software image request may be passed substantially simultaneously to the plurality of other computers. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Alternatively, the software image request may be passed sequentially to the plurality of other computers, until the request reaches a computer provided with the image. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In this way, the software image request may be passed from computer to computer until a software image is found which will enable the impaired image to be restored. It will also be understood that especially in the case of a corporate network environment, a very large degree of software &ldquo;overlap&rdquo; will exist, in that the vast majority of the software applications being run by a given networked computer will also be present on at least one other computer on the network. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Thus, in such circumstances, there exists a high probability that the required software image can be found on one of the other networked computers, thus obviating, for example, the use of a dedicated recovery CD or DVD. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In the event that the software image request is passed to a computer which is not provided with the image, that computer may return or effect returning of all appropriate &ldquo;NO&rdquo; response to the first computer. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Passing the software image request to the plurality of computers may initiate a timeout count. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Termination of the timeout count may occur upon receipt by the first computer of the software image or on expiry of a predetermined timeout period. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In the event that each computer on the network has returned a &ldquo;NO&rdquo; response, an advisory message may be conveyed to a user of the first computer. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> During normal use of the first computer, the first computer may maintain a software inventory, detailing the software associated with it, the software image request including information obtained from the software inventory. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The software inventory may be maintained in a dedicated non-volatile data store, separate from the main data store used during operation of the computer. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Preferably, tile separate data store is a separate partition of the first computer&apos;s hard disk. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The software inventory preferably is a differential inventory, in that only changes to the inventory are recorded. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The restoration process preferably is effected without substantive server involvement, in that the first computer and the computer supplying the software image have a substantially peer-to-peer relationship. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In the event that each &ldquo;peer&rdquo; computer on the network has returned a &ldquo;NO&rdquo; response, the first computer may pass the software image request to a restoration or recovery server. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In accordance with a second aspect of the present invention, there is provided a computer network arrangement having: </paragraph>
<paragraph id="P-0027" lvl="2"><number>&lsqb;0027&rsqb;</number> a) a plurality of networked computers, </paragraph>
<paragraph id="P-0028" lvl="2"><number>&lsqb;0028&rsqb;</number> b) an impaired software image identifier, operative to identify an impaired software image on a first networked computer, </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> c) a software image request generation module, operative to generate a software image request which identifies the software image and the first computer, </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> d) a software image request dispatch module, operative to pass the software image request to a plurality of other computers on the network, and </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> e) a software image supply module, which, in the event that one of said plurality of the other networked computers is provided with the requested image, is operative to supply the image to the first computer to enable the impaired software image to be restored. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The impaired software image identifier preferably comprises a hardware/software module. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The networked computers preferably have a substantially peer-to-peer relationship.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The invention will now be described in greater detail, but strictly by way of example only, by reference to the accompanying drawings, of which: </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic illustration of how the restoration method can be put into practice on a hub-assisted ring network; and </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a somewhat similar illustration of a hub-assisted network, showing an alternative way in which the restoration method can be effected.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">BEST MODE OF THE INVENTION </heading>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring first to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the hub-assisted ring network <highlight><bold>10</bold></highlight> comprises eight networked PC&apos;s <highlight><bold>11</bold></highlight>, <highlight><bold>12</bold></highlight>, <highlight><bold>13</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, <highlight><bold>17</bold></highlight> and <highlight><bold>18</bold></highlight> linked to each other via standard ring network communication lines <highlight><bold>19</bold></highlight>, <highlight><bold>20</bold></highlight>, <highlight><bold>21</bold></highlight>, <highlight><bold>22</bold></highlight>, <highlight><bold>23</bold></highlight>, <highlight><bold>24</bold></highlight>, <highlight><bold>25</bold></highlight> and <highlight><bold>26</bold></highlight>. In addition, a central hub <highlight><bold>27</bold></highlight> is provided, through which PC-to-PC data can be passed. The hub <highlight><bold>27</bold></highlight>, however, acts purely in this example as a router, in that it does not offer any data serving capability. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> During normal (i.e. unimpaired) operation, each PC generates a software inventory <highlight><bold>28</bold></highlight>. Although each PC may, as explained below, function in the same or a similar way, the invention will be described on the basis that PC <highlight><bold>11</bold></highlight> has an impaired software image. During normal use, the PC <highlight><bold>11</bold></highlight> (conveniently using its installed Operating System) sends inventory commands <highlight><bold>29</bold></highlight> to a non-volatile data store <highlight><bold>30</bold></highlight> which is separate from the main data store used during operation of the PC <highlight><bold>11</bold></highlight>. The separate data store, in this example, is an unused partition of the PC&apos;s hard disk. Using the information received from the commands <highlight><bold>29</bold></highlight>, a software inventory is built up, representing a listing of the software applications currently been used (or stored within, and currently not being used) by the PC <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> To save space in the non-volatile data store <highlight><bold>30</bold></highlight>, the software inventory built up preferably constitutes a differential inventory, in that only changes to previous versions of the inventory are recorded. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Differential backup of this type is known in itself, and will not therefore be described here in any great detail. However, for reasons of clarity, it should be understood that differential backup is effective to store software image differences, such as differences which may exist between an extant software image and a basic &ldquo;manufactured&rdquo; image corresponding to the original state of the software concerned. As will be appreciated, such differential backup enables a &ldquo;snapshot&rdquo; of a software image to be obtained, without requiring an entire copy of the software concerned to be maintained in the non-volatile data store <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In the event of loss, damage or corruption (henceforth referred to generally as &ldquo;impairment&rdquo;) to a software image contained within the PC <highlight><bold>11</bold></highlight>, the PC <highlight><bold>11</bold></highlight> identifies, using an image identification module <highlight><bold>11</bold></highlight><highlight><italic>a, </italic></highlight>the impaired software image. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The PC <highlight><bold>11</bold></highlight>, using an image request generation module <highlight><bold>11</bold></highlight><highlight><italic>b, </italic></highlight>then generates a software image request which identifies the software image and PC concerned, and dispatches this, using an image request dispatch module <highlight><bold>11</bold></highlight><highlight><italic>c, </italic></highlight>to the hub <highlight><bold>27</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Image identification, request generation and request dispatch modules for the other PC&apos;s on the network arc shown at <highlight><bold>12</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>18</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>12</bold></highlight><highlight><italic>b </italic></highlight>to <highlight><bold>18</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>12</bold></highlight><highlight><italic>c </italic></highlight>to <highlight><bold>18</bold></highlight><highlight><italic>c. </italic></highlight>The incoming request <highlight><bold>31</bold></highlight> is then passed simultaneously (or substantially simultaneously) to each of the other PC&apos;s <highlight><bold>12</bold></highlight> to <highlight><bold>18</bold></highlight> on the network, with the forwarded requests being shown at <highlight><bold>31</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>31</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>31</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>31</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>31</bold></highlight><highlight><italic>e, </italic></highlight><highlight><bold>31</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>31</bold></highlight><highlight><italic>g. </italic></highlight></paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> If the &ldquo;recipient&rdquo; PC&apos;s of the various forwarded requests <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>31</bold></highlight><highlight><italic>g </italic></highlight>are not provided with the requested image, a &ldquo;NO&rdquo; response is generated and dispatched, via the hub <highlight><bold>27</bold></highlight>, back to the PC <highlight><bold>11</bold></highlight>. In this way, the PC <highlight><bold>11</bold></highlight> knows that the required image cannot be obtained from that other PC. The &ldquo;NO&rdquo; requests are illustrated by wavy arrows, for the sake of clarity. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> However, should one of the remaining PC&apos;s be provided with the required software image, the image is then supplied to the PC <highlight><bold>11</bold></highlight>, via the hub <highlight><bold>27</bold></highlight>, using a software image supply module <highlight><bold>16</bold></highlight><highlight><italic>d. </italic></highlight>This is illustrated by the dotted lines <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>with the image originating from PC <highlight><bold>16</bold></highlight> on the network. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Software image supply modules associated with the other PC&apos;s on the network are shown at <highlight><bold>11</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>12</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>13</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>14</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>15</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>17</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>18</bold></highlight><highlight><italic>d. </italic></highlight></paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> To facilitate identification of the &ldquo;requestor&rdquo; PC, the software image request <highlight><bold>31</bold></highlight> contains, in this example, the IP Network address of the PC <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Although, in the example shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, one of the PC&apos;s (the PC <highlight><bold>16</bold></highlight>) is able to supply tie PC <highlight><bold>11</bold></highlight> with the required software image, it will be appreciated that this may not always be the case. Under such circumstances, the PC <highlight><bold>16</bold></highlight>, in addition to the PC&apos;s <highlight><bold>12</bold></highlight>, <highlight><bold>13</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>17</bold></highlight> and <highlight><bold>18</bold></highlight>, would dispatch a &ldquo;NO&rdquo; response, meaning that the PC <highlight><bold>11</bold></highlight> would receive such &ldquo;NO&rdquo; responses from each of the PC&apos;s <highlight><bold>12</bold></highlight> to <highlight><bold>18</bold></highlight>. Should this occur, the PC <highlight><bold>11</bold></highlight> is operative to generate an appropriate advisory message to a user thereof, to inform the user that the required software image is not available from the PC&apos;s <highlight><bold>12</bold></highlight> to <highlight><bold>18</bold></highlight> situated on the local network <highlight><bold>10</bold></highlight>. In view of this, an alternative restoration strategy will thus be required, and the user may thus attempt to do this using a recovery CD/DVD, or by obtaining the required software image from an Intranet server <highlight><bold>33</bold></highlight> or an Internet server <highlight><bold>34</bold></highlight>, in generally conventional manner. This, however, is not strictly part of the present invention. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In the event that more than one of the PC&apos;s is able to supply the PC <highlight><bold>11</bold></highlight> with the required software image, a plurality of software images may be supplied to the PC <highlight><bold>11</bold></highlight>. It will be appreciated that this activity is superfluous, and the PC <highlight><bold>11</bold></highlight>, under such circumstances, may be arranged to generate and dispatch an appropriate &ldquo;DECLINE&rdquo; response to all but one of said other PC&apos;s. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As will be appreciated from the foregoing, the recovery process of the invention does not rely upon the provision of any &ldquo;standard&rdquo; recovery apparatus such as recovery CD&apos;s, DVD&apos;s, Intranet servers or Internet servers, but instead operates on tie basis that in a LAN environment, it is probable that one of the other, functioning, PC&apos;s will be provided with the required software image. Thus, it will be appreciated that the present invention operates on the basis that the PC&apos;s involved have something of a &ldquo;peer-to-peer&rdquo; relationship, in that the recovery image is obtained from a networked PC having the same or a similar level of importance on the network. This of course contrasts quite clearly with a client/server configuration which attracts far greater costs. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> It should be understood, however, that the words &ldquo;peer-to-peer&rdquo; are used in this specification simply to explain the substantially non-hierarchical relationship that exists between the networked PC&apos;s <highlight><bold>11</bold></highlight> to <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a software image restoration process in which the software image request is forwarded substantially simultaneously to each of the other PC&apos;s on the network. If the required image is available from any one of such other PC&apos;s, proceeding in this way is likely to result in the image being supplied to the requestor PC <highlight><bold>11</bold></highlight> fairly quickly, although it results in increased traffic through the hub <highlight><bold>27</bold></highlight>, which may slow the throughput of other network information. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> To alleviate this, sequential passing of the software image request is also envisaged, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> As the hardware components of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> are substantially identical to those of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, corresponding reference numerals have been used. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> However, the way in which the process operates is different, as follows. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Upon detection of an impaired software image, the PC <highlight><bold>11</bold></highlight> dispatches a software image request <highlight><bold>40</bold></highlight> to a neighbouring PC <highlight><bold>12</bold></highlight>, which then determines whether it is provided with the required image. If it is not so provided, a &ldquo;NO&rdquo; response <highlight><bold>41</bold></highlight> is dispatched to the hub <highlight><bold>27</bold></highlight> for forwarding to the PC <highlight><bold>11</bold></highlight>. It will be appreciated that the &ldquo;NO&rdquo; response <highlight><bold>41</bold></highlight> could also be sent direct from the PC <highlight><bold>12</bold></highlight> to the PC <highlight><bold>11</bold></highlight>, obviating the involvement of the hub <highlight><bold>27</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Either way, the generation and dispatch of a &ldquo;NO&rdquo; response has the effect of forwarding the software image request <highlight><bold>40</bold></highlight> to the next available neighbouring PC <highlight><bold>13</bold></highlight>, which then determines the availability or otherwise of the required software image, in the same way as the PC <highlight><bold>12</bold></highlight>. In this example, the PC <highlight><bold>13</bold></highlight> is provided with the requested image, and the image <highlight><bold>42</bold></highlight> is thus supplied, via the hub <highlight><bold>27</bold></highlight>, to the PC <highlight><bold>11</bold></highlight>, to enable the recovery/restoration process to be concluded. It will be appreciated that by passing the software image request <highlight><bold>40</bold></highlight> sequentially from PC to PC, the data traffic through the hub <highlight><bold>27</bold></highlight> is minimised, thus expediting the flow of other data which may exist therethrough. Similarly, the PC&apos;s <highlight><bold>14</bold></highlight> to <highlight><bold>18</bold></highlight> are not thus involved in the restoration process, allowing them to continue operating in an unhindered manner. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Whilst, in the preceding description, identification of the impaired software image is effected substantially without user input, in that a software image identifier, in the form of a hardware/software identification module, is used, it will be appreciated that this need not necessarily be the case. Thus, the applicants envisage situations where the identity of the impaired software image is readily apparent to the user, thus enabling the user to generate and dispatch the software image request of his/her own volition. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Situations such as this could occur, for example, where a specific file is required by the user, and where the user knows that the file was available&mdash;unimpaired&mdash;at a particular point in the past. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> It will be appreciated from the foregoing that the invention also provides for an arrangement whereby a plurality of impaired software images can be sought, on a &ldquo;file-by-file&rdquo; basis. Thus, where restoration of an impaired image requires a number of different files, the invention can be used to seek these files from a plurality of different peers, with each file being sought generally in the manner previously described. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> It will also be understood by those skilled in the art that the network configuration shown in <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference> is intended simply to illustrate how the invention can be used, in practice. With this in mind, it will be understood that many other network configurations may be suitable, and that the particular layout of <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference> is in no way intended to limit the scope of the protection sought by the applicants. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In the present specification &ldquo;comprise&rdquo; means &ldquo;includes or consists of&rdquo; and &ldquo;comprising&rdquo; means &ldquo;including or consisting of&rdquo;. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The features disclosed in the foregoing description, or the following claims, or the accompanying drawings, expressed in their specific forms or in terms of a means for performing the disclosed function, or a method or process for attaining the disclosed result, as appropriate, may, separately, or in any combination of such features, be utilised for realising the invention in diverse forms thereof. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of restoring an impaired software image associated with a first networked computer, comprising: 
<claim-text>a) generating an image request, the image request identifying the software image and the first computer, </claim-text>
<claim-text>b) passing the image request to another computer on the network, and </claim-text>
<claim-text>c) if the other computer in the network has the image, supplying the image from said another computer to the first computer to restore the impaired image. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the network includes at least several computers and the image request is passed to plural computers in the network and step (c) is performed if one of the plural computers has the image. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the image request is passed substantially simultaneously to the plural computers. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the image request is passed sequentially to the plural computers, until the request reaches a computer provided with the image. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein, in the event that the request is passed to a computer which does not have the image, that computer causes an appropriate &ldquo;NO&rdquo; response to be returned to the first computer. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein passing the software image request to the plural computers initiates a timeout count. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein termination of the timeout count occurs upon receipt by the first computer of the software image or on expiry of a predetermined timeout period. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further including conveying an advisory message to a user of the first computer if each computer on the network has returned a &ldquo;NO&rdquo; response. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein, during normal use of the first computer, the first computer maintains a software inventory detailing the software associated with it, the software image request including information obtained from the software inventory. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the software inventory is maintained in a dedicated non-volatile data store, separate from the main data store used during operation of the computer. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the software inventory is maintained in a separate partition of the computer&apos;s hard disk. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the software inventory is a differential inventory. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the first computer and the computer supplying the unimpaired image have a substantially peer-to-peer relationship so the method is performed without substantive server involvement. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> further including causing the first computer to pass the software image request to a restoration or recovery server if each &ldquo;peer&rdquo; computer on the network has returned a &ldquo;NO&rdquo; response. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the image request is a software image request. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A computer network arrangement having: 
<claim-text>a) plural networked computers, </claim-text>
<claim-text>b) an impaired software image identification module for identifying an impaired software image on a first networked computer, </claim-text>
<claim-text>c) an image request generation module for generating an image request for identifying the impaired software image and the first computer, </claim-text>
<claim-text>d) an image request dispatch module for passing the software image request to another computer on the network, and </claim-text>
<claim-text>e) a software image supply module, which, in the event that said another networked computer has the requested image, is operative to supply the image to the first computer to enable the impaired software image to be restored. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer network arrangement according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the networked computers have a substantially peer-to-peer relationship. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer network arrangement according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the network includes at least several computers and the image request dispatch module is arranged for passing the software request to plural other computers on the network. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer network arrangement according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein the network includes at least several computers and the image request dispatch module is arranged for passing the software request to plural other computers on the network.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005083A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005083A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005083A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
