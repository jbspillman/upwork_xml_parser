<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002672A1-20030102-D00000.TIF SYSTEM "US20030002672A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002672A1-20030102-D00001.TIF SYSTEM "US20030002672A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002672A1-20030102-D00002.TIF SYSTEM "US20030002672A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002672</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10167180</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020611</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>01202293.5</doc-number>
</priority-application-number>
<filing-date>20010613</filing-date>
<country-code>EP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N007/167</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>380</class>
<subclass>202000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and device for detecting a watermark</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Jan</given-name>
<middle-name>Johannes Petrus Maria</middle-name>
<family-name>Beekmans</family-name>
</name>
<residence>
<residence-non-us>
<city>Eindhoven</city>
<country-code>NL</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Frits</given-name>
<middle-name>Anthony</middle-name>
<family-name>Steenhof</family-name>
</name>
<residence>
<residence-non-us>
<city>Eindhoven</city>
<country-code>NL</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Corporate Patent Counsel</name-1>
<name-2>U.S. Philips Corporation</name-2>
<address>
<address-1>580 White Plains Road</address-1>
<city>Tarrytown</city>
<state>NY</state>
<postalcode>10591</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Method of and system for detecting a watermark in MPEG-2 encoded video data during high-speed copying of the video data. A bus spy (<highlight><bold>120</bold></highlight>) selects independently coded frames, such as I-frames, from the video data and feeds the selected frames to a watermark detector (<highlight><bold>130</bold></highlight>) for detecting a watermark therein. By only supplying some of the frames to the watermark detector (<highlight><bold>130</bold></highlight>), the average input data rate for the watermark detector (<highlight><bold>130</bold></highlight>) is much lower than the data rate during the high-speed copying. Various embodiments present various ways to efficiently supply the contents of the selected frames to the watermark detector (<highlight><bold>130</bold></highlight>). </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates to a method of detecting a watermark in a data stream comprising frames. The invention further relates to a device for detecting a watermark in a data stream comprising frames. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Watermarking, the process of inserting extra information in a data stream such as an audio or video stream, is an important and well-known technique to mark or protect those data streams. A movie can be watermarked so its origin can be identified, or unauthorized copies can be distinguished from the original. Watermarks are also increasingly being used to enforce restrictions on the copying of the data stream. In DVD copy protection, watermarks are used to label material as &ldquo;copy once&rdquo;, &ldquo;never copy&rdquo;, &ldquo;copy no more&rdquo; or &ldquo;no restriction&rdquo;. When a data stream is copied from a DVD disc, the device performing the copying must check for the presence of a watermark. If one is found, and the watermark indicates that the data stream may not be copied (any further), then the device must refuse to make a copy of the data stream. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> When the data stream is a video stream, the amount of data to be processed is huge. Typically, a video stream will be compressed using a scheme such as ISO/IEC 11172 MPEG-1 or ISO/IEC 13818 MPEG-2 compression. In future, also the ISO/IEC 14496 MPEG-4 scheme may be used. This achieves a substantial reduction in the size of the video stream. However, it also means a substantial increase in the processing power required for the detection of a watermark in a video stream. The detection of a watermark requires the decompression of the frames of the video stream, and the processing of the decompressed frames to detect any watermark. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Although processing an MPEG-2 compressed video stream is feasible when the video stream is being copied in real time, during high speed copying the required processing speed becomes impossibly large. For example, a typical video stream comprises 25 or 30 frames per second. When copying this video stream at a high speed of 20 times the normal speed, that means 500 or 600 frames per second are to be processed to detect a watermark. This is a bitstream of about 300-400 Mbit per second, with peaks of up to 800 Mbit per second. In contrast, current hardware-based watermark detectors operating on MPEG bitstreams cannot reliably detect a watermark in a bitstream of more than 100 Mbit per second. At the same time, it is not acceptable to delay the detection of a watermark when watermarks are used for enforcing copy restrictions. The longer the time between starting the copying process and detecting a watermark that indicates that copying is not permitted, the more material a pirate can illegally copy. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> It is an object of the invention to provide a method according to the preamble, which can operate quickly during a high speed copying process. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> This object is achieved according to the invention in a method comprising selecting an independently coded frame from the data stream, and supplying identifying data for the selected frame to a watermark detector for detecting a watermark therein. The data to be copied from a DVD or other source will contain a mixture of audio streams, video streams and other information. It suffices to detect a watermark in only one of these streams. Further, not all frames of the selected data stream are necessary to detect a watermark in the selected data stream. Some frames contain more watermark information than others. In particular, independently coded frames typically contain more watermark information than dependently coded frames. By selecting only the independently coded frames, the watermark detector is provided with data at a much lower rate than the copying process. Still, these frames provide the watermark detector with sufficient information to facilitate reliable watermark detection. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In an embodiment the method further comprises buffering the frame in a buffer memory, determining an address location in the buffer memory of the frame, and supplying the address location to the watermark detector. Often, the copying process involves temporarily storing (parts of) the data stream in a buffer memory. The size of this buffer memory is normally relatively high, so the frames stored therein will stay there for a relatively long time before they are overwritten by new data. The stored frames remain in the buffer memory after they have been read out. Since the watermark detector needs the contents of the selected frames, it is advantageous to determine an address location in the buffer memory of these frames. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In a further embodiment the method further comprises copying at least a content portion of the frame into a local memory and supplying the contents of the local memory to the watermark detector. By storing (content portions of) selected frames in a local memory, the watermark detector can simply access the local memory, retrieve the stored frame data and detect the watermark therein. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In a further embodiment the data stream comprises a Video Elementary Stream formatted in accordance with the ISO/IEC 13818 MPEG-2 format, and the selected frame comprises an I-frame of the Video Elementary Stream. In a typical MPEG-2 video stream, usually about one in every ten to twelve frames is an I-frame. So, by selecting only the I-frames of the video portion of the data stream, a substantial reduction in the size of the data stream fed to the watermark detector is achieved. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In a further embodiment the method further comprises processing the selected frame to obtain at least one DCT coefficient, and supplying the at least one DCT coefficient to the watermark detector. Watermark detectors do not always require all the data from the selected frames to detect a watermark. In particular, the watermarking detection system as disclosed in WO 99/45707 (Attorney Docket PHN 17315) by the same applicant as the present application can detect a watermark in a video stream using only DCT coefficients from individual frames. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> It is a further object of the invention to provide a device according to the preamble, which can quickly detect a watermark during high speed copying. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> This object is achieved according to the invention in a device comprising frames, the device comprising selection means for selecting an independently coded frame from the data stream, and processing means for supplying identifying data for the selected frame to a watermark detector for detecting a watermark therein. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Advantageous embodiments of the device are laid out in claims 7-9. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The invention further relates to a computer program product arranged for causing a processor to execute the method according to the invention.</paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> These and other aspect of the invention will be apparent from and elucidated with reference to the embodiments shown in the drawings, in which: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically shows a first embodiment of the device according to the invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> schematically shows the structure of a data stream formatted in accordance with the MPEG-2 standard; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> schematically shows a second embodiment of the device according to the invention. </paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Throughout the Fig.s, same reference numerals indicate similar or corresponding features. Some of the features indicated in the drawings are typically implemented in software, and as such represent software entities such as software modules and objects. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically shows a first embodiment of a device <highlight><bold>100</bold></highlight> arranged for detecting a watermark in a data stream. The device <highlight><bold>100</bold></highlight> is for instance a processing IC which is used in a DVD drive, but may also be a computer program running on a general purpose computer system. An input processor <highlight><bold>101</bold></highlight>, for example a DVD player, reads a data stream from a DVD <highlight><bold>190</bold></highlight>. Of course the invention is not restricted to data streams read from a DVD. Other data sources can also be used. The data stream is preferably formatted in accordance with the ISO/IEC 13818 MPEG-2 format. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The input processor <highlight><bold>101</bold></highlight> is connected to a bus <highlight><bold>102</bold></highlight>, to which it feeds the data stream. An output processor <highlight><bold>110</bold></highlight> reads the data stream from the bus <highlight><bold>102</bold></highlight> and outputs the data stream to an output terminal <highlight><bold>170</bold></highlight>. The output terminal <highlight><bold>170</bold></highlight> can be connected to an external MPEG decoding and display device (not shown). The output terminal <highlight><bold>170</bold></highlight> can also be connected to a hard disk or a DVD-read/write unit, so that a copy of the data stream can be made thereon The operations that can be performed by the device <highlight><bold>100</bold></highlight> depend in part on what the output terminal <highlight><bold>170</bold></highlight> is coupled to. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> It is assumed that the data stream as read from the DVD <highlight><bold>190</bold></highlight> comprises a watermark indicating restrictions on copying and/or playback of the data stream. The device <highlight><bold>100</bold></highlight> is provided with a watermark detector <highlight><bold>130</bold></highlight>, which is also connected to the bus <highlight><bold>102</bold></highlight>. The watermark detector <highlight><bold>130</bold></highlight> reads the data stream as it passes over the bus <highlight><bold>102</bold></highlight>, and determines whether a watermark is present in the data stream. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> When the watermark detector <highlight><bold>130</bold></highlight> detects a watermark in the data stream, and this watermark prohibits the operation currently in progress, the watermark detector <highlight><bold>130</bold></highlight> operates a switch <highlight><bold>160</bold></highlight> to prohibit output to the output terminal <highlight><bold>170</bold></highlight>. For example, if the data stream is being copied, and the watermark indicates a &ldquo;copy never&rdquo; restriction, then the watermark detector <highlight><bold>130</bold></highlight> will open the switch <highlight><bold>160</bold></highlight> to prevent the data from being output to the output terminal <highlight><bold>170</bold></highlight>. If no watermark was found, or the watermark found does not prohibit the operation in progress, the switch <highlight><bold>160</bold></highlight> is closed and the output is passed on to the output terminal <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In an alternative embodiment, the watermark detector <highlight><bold>130</bold></highlight> simply sends a signal to a controlling module (not shown) to indicate that a watermark was found. The controlling module can then take appropriate action. For example, the controlling module may warn the user that the operation is not permitted, or temporarily suspends the operation to ask the user to make a payment before proceeding. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The watermark detector <highlight><bold>130</bold></highlight> is coupled to a processing module <highlight><bold>125</bold></highlight>, which can decode and process frames from the data stream before they are supplied to the watermark detector <highlight><bold>130</bold></highlight>. The processing module <highlight><bold>125</bold></highlight> may for instance comprise an MPEG decoder which converts frames from an MPEG-encoded data stream into raw image data suitable for processing by the watermark detector <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In a preferred embodiment, the watermark detector <highlight><bold>130</bold></highlight> operates as disclosed in WO 99/45707 (Attorney Docket PHN 17.315) by the same applicant as the present application. In this embodiment, the processing module <highlight><bold>125</bold></highlight> processes the selected frame to obtain at least one DCT coefficient, and supplies the at least one DCT coefficient to the watermark detector <highlight><bold>130</bold></highlight>. Watermark detectors do not always require all the data from the selected frames to detect a watermark. In particular, the watermarking detection system as disclosed in WO 99/45707 can detect a watermark in a video stream using only DCT coefficients from individual frames. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> When the data stream is being copied, it is often temporarily stored in a buffer memory <highlight><bold>150</bold></highlight> before outputting to the output terminal <highlight><bold>170</bold></highlight>. A memory controller <highlight><bold>151</bold></highlight> is connected to the bus <highlight><bold>102</bold></highlight> to control the buffering process. The buffer memory <highlight><bold>150</bold></highlight>, external to the device <highlight><bold>100</bold></highlight>, can be for instance a <highlight><bold>16</bold></highlight> megabit SDRAM. The input processor <highlight><bold>101</bold></highlight> writes the data stream to the bus <highlight><bold>102</bold></highlight>, where the memory controller <highlight><bold>151</bold></highlight> can read it and store it in the buffer memory <highlight><bold>150</bold></highlight>. The output processor <highlight><bold>110</bold></highlight> requests portions of the data stream as stored in the buffer memory <highlight><bold>150</bold></highlight> and outputs then towards the output terminal <highlight><bold>170</bold></highlight>. By using buffering, variations in the input data rate can be eliminated, so that the output processor <highlight><bold>110</bold></highlight> can output the data stream at a substantially constant speed. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The memory controller <highlight><bold>151</bold></highlight> uses a read pointer and a write pointer to manage the information in the buffer memory <highlight><bold>150</bold></highlight>. Frames are written to the buffer memory <highlight><bold>150</bold></highlight> at the address location pointed to by the write pointer, after which the write pointer is moved ahead to the next available address location. Frames are similarly read out from the buffer memory <highlight><bold>150</bold></highlight> at the address location pointed to by the read pointer, after which the read pointer is moved ahead to the address location of the next buffered frame. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Other processing, such as error correction, may also be performed on the data stream as it is being read from the DVD <highlight><bold>190</bold></highlight> e.g. by error correcting module <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> When making a copy of the DVD <highlight><bold>190</bold></highlight>, it is desirable that the copy is made at a high speed, such as 20 or 25 times the normal playback speed. This means that the device <highlight><bold>100</bold></highlight> will have to process a large amount of data per second. For example, a video stream formatted in accordance with the PAL standard comprises 25 frames per second. At 20 times the normal speed, that means 500 frames per second. However, no watermark detector will be able to process 500 MPEG-encoded frames per second to detect a watermark therein. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> To obtain a lower average data rate for the watermark detector <highlight><bold>130</bold></highlight>, a bus spy <highlight><bold>120</bold></highlight> is connected to the bus <highlight><bold>102</bold></highlight>. The bus spy <highlight><bold>120</bold></highlight> observes the data stream as it passes over the bus, e.g. from the input processor <highlight><bold>101</bold></highlight> to the memory controller <highlight><bold>151</bold></highlight>. The bus spy <highlight><bold>120</bold></highlight> performs simple processing such that independently coded frames in the data stream are identified. In a preferred embodiment, the bus spy <highlight><bold>120</bold></highlight> identifies the I-frames from the MPEG-2 formatted data stream. Having identified such a frame, the bus spy <highlight><bold>120</bold></highlight> needs to supply the contents of the selected frame to the processing module <highlight><bold>125</bold></highlight> for further processing, and then to the watermark detector <highlight><bold>130</bold></highlight> for use in the watermark detection process. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> As the selected frame is already being stored in the buffer memory <highlight><bold>150</bold></highlight> as part of the buffering process, it makes sense to use the buffer memory <highlight><bold>150</bold></highlight> as an input for the watermark detector <highlight><bold>130</bold></highlight>. Frames are written to the buffer memory <highlight><bold>150</bold></highlight> in a cyclic manner. Initially, the write pointer points to the first memory location in the buffer memory <highlight><bold>150</bold></highlight>, and so the first frame will be written to the first memory location in the buffer memory <highlight><bold>150</bold></highlight>. The write pointer is then moved to the second location, and then the second frame is written to to the second location, and so on. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Once a frame has been written to the last memory location in the buffer memory <highlight><bold>150</bold></highlight>, the write pointer moves back to the first memory location and then the next frame will be written to the first memory location. However, as normally the size of the buffer memory <highlight><bold>150</bold></highlight> is relatively high with respect to the size of a frame, frames will stay in the buffer memory <highlight><bold>150</bold></highlight> for a long time before they are being overwritten by new frames. Also, they are not being erased after having being read out. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> So, when a frame has been identified as being an independently coded frame, the bus spy <highlight><bold>120</bold></highlight> now determines an address location in the buffer memory <highlight><bold>150</bold></highlight> of that frame. The processing module <highlight><bold>125</bold></highlight> can then directly access the selected frame from the buffer memory <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Optionally, the bus spy <highlight><bold>120</bold></highlight> examines a header portion of the frame to determine the starting point of the content portion of the frame. Typically, the header of the frame will have a variable size, so the header needs to be examined to determine where the content portion starts. The watermark detector <highlight><bold>130</bold></highlight> only needs the data from the content portion, so it makes sense to remember only this position. The bus spy <highlight><bold>120</bold></highlight> can then determine an address location in the buffer memory <highlight><bold>150</bold></highlight> of the content portion. This address location can then be provided to the watermark detector <highlight><bold>130</bold></highlight>. The watermark detector <highlight><bold>130</bold></highlight> can then directly read the content portion of the selected frame from the buffer memory <highlight><bold>150</bold></highlight>, and process it to determine if watermark data is present in the selected frame. However, this only works if the processing module <highlight><bold>125</bold></highlight> can extract the necessary information without having access to the header portion of the frame. This in turn depends on what information the watermark detector <highlight><bold>130</bold></highlight> needs from individual frames. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> It may happen that, by the time the watermark detector <highlight><bold>130</bold></highlight> accesses the address location as supplied, the frame in question has been overwritten by new data. In general, the new data at that address location will not be the start of a new frame, let alone an independently coded frame. If the processing module <highlight><bold>125</bold></highlight> nor the watermark detector <highlight><bold>130</bold></highlight> guard against this situation, then decoding of the new data will fail. The processing module <highlight><bold>125</bold></highlight> may go out of sync and have to restart the decoding process from scratch, which takes time. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> So, in a preferred embodiment the bus spy <highlight><bold>120</bold></highlight> not only records the address location of an independently coded frame, but also the time at which this address location was recorded. The processing module <highlight><bold>125</bold></highlight> can then determine the current time, the current location of the write pointer in the buffer memory <highlight><bold>150</bold></highlight> and derive from that whether the address location is still valid. If the processing module <highlight><bold>125</bold></highlight> determines that the address location has been overwritten by new data, it skips that address location and proceeds with the next one. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Since frames are coming in at a high rate, also independently coded frames will come in at a high rate, so on the average it takes little time before the processing module <highlight><bold>125</bold></highlight> gets in sync again. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> By reusing the contents of the buffer memory <highlight><bold>150</bold></highlight>, the memory demands of the device <highlight><bold>100</bold></highlight> are reduced. Also, the device <highlight><bold>100</bold></highlight> has the lowest possible additional memory requirements to do the additional processing. By operating in this way, the device <highlight><bold>100</bold></highlight> uses a minimal overhead time to search for video elementary stream data in a data stream. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> schematically shows the structure of a data stream <highlight><bold>200</bold></highlight> formatted in accordance with the MPEG-2 standard. This structure will now be discussed briefly to explain those elements thereof that are relevant to the present invention. Details on the exact structure and the meaning of the elements thereof can be found in the MPEG-2 specification, ISO/IEC 13818. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The data stream <highlight><bold>200</bold></highlight> comprises sequences <highlight><bold>201</bold></highlight>, <highlight><bold>202</bold></highlight>, <highlight><bold>203</bold></highlight>, <highlight><bold>204</bold></highlight>. Each of the sequences <highlight><bold>201</bold></highlight>-<highlight><bold>204</bold></highlight> can be a video sequence, an audio sequence or a sequence containing other information. Such sequences are also called streams. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Assume that the sequence <highlight><bold>202</bold></highlight> is a video sequence or video elementary stream (VES). A video sequence begins with a sequence header, comprising a start code <highlight><bold>211</bold></highlight>, video parameters <highlight><bold>212</bold></highlight>, bitstream parameters <highlight><bold>213</bold></highlight> and other header information <highlight><bold>214</bold></highlight>. The header is followed by one or more groups of pictures (GOP) <highlight><bold>215</bold></highlight>-<highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> A group of pictures (GOP) <highlight><bold>215</bold></highlight> in turn comprises a header, and a number of pictures. The header comprises a GOP start code <highlight><bold>221</bold></highlight>, a time code <highlight><bold>222</bold></highlight>, and GOP parameters <highlight><bold>223</bold></highlight>. This is followed by the actual pictures <highlight><bold>224</bold></highlight>-<highlight><bold>227</bold></highlight>. In the context of MPEG-2, these pictures are also referred to as &ldquo;frames&rdquo;. A frame in an MPEG-2 video stream can be one of three types. The type of a frame defines which prediction modes may be used to code the blocks in the frame. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> I-frames (Intra-frames) are coded without reference to other frames. Moderate compression is achieved by reducing spatial redundancy, but not temporal redundancy. I-frames are used periodically to provide access points in the data stream where decoding can begin. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> P-frames (Predictive frames) are coded with reference to previous I- or P-frames. The blocks in a P-frame can either be predicted or intra-coded. By reducing spatial and temporal redundancy, P-frames offer increased compression compared to I-frames. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> B-frames (bidirectionally predictive frames) are coded with reference to previous and next I- or P-frames. The blocks in a B-frame can be forward, backward or bidirectionally predicted or intra-coded. B-frames offer the highest degree of compression. To enable backward prediction from future frames, the MPEG coder reorders the frames from the normal &ldquo;display&rdquo; order to &ldquo;bit stream&rdquo; order so that the B-frame is transmitted after the previous and next P- and I-frames. This introduces a reordering delay dependent on the number of consecutive B-frames. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A typical GOP in display order is: </paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> B<highlight><subscript>1 </subscript></highlight>B<highlight><subscript>2 </subscript></highlight>I<highlight><subscript>3 </subscript></highlight>B<highlight><subscript>4 </subscript></highlight>B<highlight><subscript>5 </subscript></highlight>P<highlight><subscript>6 </subscript></highlight>B<highlight><subscript>7 </subscript></highlight>B<highlight><subscript>8 </subscript></highlight>P<highlight><subscript>9 </subscript></highlight>B<highlight><subscript>10 </subscript></highlight>B<highlight><subscript>11 </subscript></highlight>P<highlight><subscript>12 </subscript></highlight>B<highlight><subscript>13 </subscript></highlight>B<highlight><subscript>14 </subscript></highlight>I<highlight><subscript>15 </subscript></highlight></paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> The corresponding bitstream order is: </paragraph>
<paragraph id="P-0050" lvl="2"><number>&lsqb;0050&rsqb;</number> I<highlight><subscript>3 </subscript></highlight>B<highlight><subscript>1 </subscript></highlight>B<highlight><subscript>2 </subscript></highlight>P<highlight><subscript>6 </subscript></highlight>B<highlight><subscript>4 </subscript></highlight>B<highlight><subscript>5 </subscript></highlight>P<highlight><subscript>9 </subscript></highlight>B<highlight><subscript>7 </subscript></highlight>B<highlight><subscript>8 </subscript></highlight>P<highlight><subscript>12 </subscript></highlight>B<highlight><subscript>10 </subscript></highlight>B<highlight><subscript>11 </subscript></highlight>I<highlight><subscript>15 </subscript></highlight>B<highlight><subscript>13 </subscript></highlight>B<highlight><subscript>14 </subscript></highlight></paragraph>
<paragraph id="P-0051" lvl="7"><number>&lsqb;0051&rsqb;</number> A regular GOP structure can be described with two parameters: N, which is the number of pictures in the GOP, and M, which is the spacing of P-frames. The GOP given here is described as N&equals;12 and M&equals;3. It will be appreciated that, instead of processing all the frames from a GOP to check for the presence of a watermark, processing only the I-frames provides a reduction at a factor of <highlight><bold>12</bold></highlight> in the amount of frames to be processed. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> A frame <highlight><bold>224</bold></highlight> in turn comprises a header with picture start code <highlight><bold>231</bold></highlight>, type indicator <highlight><bold>232</bold></highlight>, buffer parameters <highlight><bold>233</bold></highlight>, encoding parameters <highlight><bold>234</bold></highlight>, followed by a number of slices <highlight><bold>235</bold></highlight>-<highlight><bold>238</bold></highlight>. Slices contain information on a part of the frame. A slice <highlight><bold>235</bold></highlight> comprises a slice start code <highlight><bold>241</bold></highlight>, a vertical position indicator <highlight><bold>242</bold></highlight>, a quality scale <highlight><bold>243</bold></highlight>, followed by a set of macro blocks <highlight><bold>244</bold></highlight>-<highlight><bold>247</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> A macro block <highlight><bold>244</bold></highlight> is the basic coding unit in the MPEG-2 algorithm. It is a 16&times;16 pixel segment in a slice. The order of the macro blocks within a slice is from left to right, and from top to bottom. The macro block <highlight><bold>244</bold></highlight> contains an address indicator <highlight><bold>251</bold></highlight>, a type <highlight><bold>252</bold></highlight>, a motion vector <highlight><bold>253</bold></highlight>, a quality scale <highlight><bold>254</bold></highlight>, a coded block pattern <highlight><bold>255</bold></highlight> and six blocks <highlight><bold>256</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> A picture or frame in MPEG-2 consists of three rectangular matrices representing luminance (Y) and two chrominance (Cb and Cr) values. The Y matrix has an even number of rows and columns, the Cb and Cr matrices are one-half the size of the Y matrix in each direction. Since each chrominance component has one-half the vertical and horizontal resolution of the luminance component, a macro block consists of four Y, one Cr and one Cb block, giving a total of six blocks. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a second embodiment of a device <highlight><bold>300</bold></highlight> according to the invention. Although the device <highlight><bold>300</bold></highlight> is similar to the device <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the device <highlight><bold>300</bold></highlight> is not connected to a buffer memory <highlight><bold>150</bold></highlight>. Still, it is desirable that the device <highlight><bold>300</bold></highlight> is able to detect a watermark in a data stream from the DVD <highlight><bold>190</bold></highlight> as it is being copied at high speed. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The bus spy <highlight><bold>120</bold></highlight> now still inspects the frames as they pass over the bus <highlight><bold>102</bold></highlight>, and examines the header portions of the frames to determine whether they are independently coded frames. In the case of MPEG-2, the bus spy <highlight><bold>120</bold></highlight> examines the header portion of the frame to determine whether the frame is an I-frame. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> If it turns out that this is the case, the bus spy <highlight><bold>120</bold></highlight> copies the selected frame to a local memory <highlight><bold>302</bold></highlight>. This local memory <highlight><bold>302</bold></highlight> is preferably a 32 kB SDRAM. The processing module <highlight><bold>125</bold></highlight> can then read the contents of the local memory <highlight><bold>302</bold></highlight> and supply the contents to the watermark detector <highlight><bold>130</bold></highlight>, e.g. via the bus <highlight><bold>102</bold></highlight>. As explained above, the processing module <highlight><bold>125</bold></highlight> may first process the frames stored in the local memory <highlight><bold>302</bold></highlight> to obtain at least one DCT coefficient, and supply the at least one DCT coefficient to the watermark detector <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Preferably, instead of storing the whole frame, the bus spy <highlight><bold>120</bold></highlight> copies only a content portion of the frame into the local memory <highlight><bold>302</bold></highlight>. This way the amount of data stored in the local memory <highlight><bold>302</bold></highlight> is smaller per frame. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> It may not even be necessary to store the whole content of the I-frame in the local memory <highlight><bold>302</bold></highlight>. A number of slices from the I-frame can be sufficient. When watermarking a data stream, watermark data is often repeated in various portions of a frame, so that the watermark detector <highlight><bold>130</bold></highlight> can even operate on only a partial frame. So, the bus spy <highlight><bold>120</bold></highlight> may only need to store one or more slices from the I-frame. It can theoretically happen that a slice is larger than the size of the local memory <highlight><bold>302</bold></highlight>. In such a case, only the first 32 kB of a slice is to be stored in the local memory <highlight><bold>302</bold></highlight>. This should be sufficient to detect a watermark. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> When multiple I-frames are stored, it may be advantageous to store different slices from different I-frames. For example, the first slice of the first I-frame is stored, the second slice of the second I-frame, and so on. Alternatively, all the slices of the first I-frame are stored, the second and further slices of the second I-frame are stored, the third and further slices of the third I-frame are being stored, and so on. This way, the watermark detector <highlight><bold>130</bold></highlight> is provided with a representative sample of the data stream, since the difference slices will represent different portions of the scene being depicted in the video stream. If from all the I-frames only the first slice were to be stored, it may happen that these slices all represent relatively continuous areas carrying insufficient information to reliably detect a watermark. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In this embodiment of the device <highlight><bold>300</bold></highlight>, the bus spy <highlight><bold>120</bold></highlight>, the local memory <highlight><bold>302</bold></highlight>, the processing module <highlight><bold>125</bold></highlight> and the watermark detector <highlight><bold>130</bold></highlight>, only interact with the rest of the device <highlight><bold>100</bold></highlight> by reading data from the bus <highlight><bold>102</bold></highlight> and writing data to it. This makes it possible to embody the bus spy unit <highlight><bold>120</bold></highlight>, the local memory <highlight><bold>302</bold></highlight>, the processing module <highlight><bold>125</bold></highlight> and the watermark detector <highlight><bold>130</bold></highlight> as a separate component <highlight><bold>310</bold></highlight>, such as an integrated circuit. This component <highlight><bold>310</bold></highlight> can then be manufactured separately and added to any device in which it is desirable to be able to reliably detect a watermark during high speed copying. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The component <highlight><bold>310</bold></highlight> can alternatively be constructed without the watermark detector <highlight><bold>130</bold></highlight>, so that the component <highlight><bold>310</bold></highlight> and the watermark detector <highlight><bold>130</bold></highlight> can be sold as two separate units. The device <highlight><bold>300</bold></highlight> may already comprise a watermark detector. By adding a component comprising the bus spy <highlight><bold>120</bold></highlight>, the local memory <highlight><bold>302</bold></highlight> and the processing module <highlight><bold>125</bold></highlight>, the device <highlight><bold>300</bold></highlight> can then reliably detect watermarks at high speed. Component <highlight><bold>310</bold></highlight> then communicates with the watermark detector <highlight><bold>130</bold></highlight> via the bus <highlight><bold>102</bold></highlight> or via a separate connection. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Instead of supplying the selected frames to the watermark detector <highlight><bold>130</bold></highlight>, the selected frames could conceivably also be supplied to another module which requires only a part of the data stream. The method according to the invention can thus be in general used in any high speed system where only a part of the data needs to be processed on a lower speed. For example, the invention can be applied to create a so-called trick play stream for a video stream. Such a stream is representative of the original video stream, but has a much lower number of frames. It is created by selecting e.g. the I-frames from an MPEG-2 video stream, and processing them to obtain a new video stream. When this new video stream is played back, the view gets the impression that he is watching the original video stream at a higher playback speed, typically associated with fast forward or fast backward playback. As outlined above, the bus spy <highlight><bold>120</bold></highlight> can be used to identify the I-frames, and the processing module <highlight><bold>125</bold></highlight> can feed those frames to a trick play generator <highlight><bold>160</bold></highlight>. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of detecting a watermark in a data stream comprising frames, comprising selecting an independently coded frame from the data stream, and supplying identifying data for the selected frame to a watermark detector for detecting a watermark therein. </claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising buffering the frame in a buffer memory, determining an address location in the buffer memory of the frame, and supplying the address location to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising copying at least a content portion of the frame into a local memory and supplying the contents of the local memory to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, whereby the data stream comprises a Video Elementary Stream formatted in accordance with the ISO/IEC 13818 MPEG-2 format, and the selected frame comprises an I-frame of the Video Elementary Stream. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method as claimed in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising processing the selected frame to obtain at least one DCT coefficient, and supplying the at least one DCT coefficient to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A device for detecting a watermark in a data stream comprising frames, the device comprising selection means for selecting an independently coded frame from the data stream, and processing means for supplying identifying data for the selected frame to a watermark detector for detecting a watermark therein. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The device as claimed in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising buffering means for buffering the frame in a buffer memory, the selection means being arranged for determining an address location in the buffer memory of the frame, and the processing means being arranged for supplying the address location to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The device as claimed in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, the selection means being arranged for copying at least a content portion of the frame into a local memory, and the processing means being arranged for supplying the contents of the local memory to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The device as claimed in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, the processing means being arranged for processing the selected frame to obtain at least one DCT coefficient, and for supplying the at least one DCT coefficient to the watermark detector. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer program product arranged for causing a processor to execute the method as claimed in claim <highlight><bold>1</bold></highlight>.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002672A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002672A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002672A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
