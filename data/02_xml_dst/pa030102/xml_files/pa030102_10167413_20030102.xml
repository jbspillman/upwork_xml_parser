<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005047A1-20030102-D00000.TIF SYSTEM "US20030005047A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00001.TIF SYSTEM "US20030005047A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00002.TIF SYSTEM "US20030005047A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00003.TIF SYSTEM "US20030005047A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00004.TIF SYSTEM "US20030005047A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00005.TIF SYSTEM "US20030005047A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00006.TIF SYSTEM "US20030005047A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00007.TIF SYSTEM "US20030005047A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00008.TIF SYSTEM "US20030005047A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00009.TIF SYSTEM "US20030005047A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00010.TIF SYSTEM "US20030005047A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00011.TIF SYSTEM "US20030005047A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00012.TIF SYSTEM "US20030005047A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00013.TIF SYSTEM "US20030005047A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00014.TIF SYSTEM "US20030005047A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00015.TIF SYSTEM "US20030005047A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00016.TIF SYSTEM "US20030005047A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00017.TIF SYSTEM "US20030005047A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00018.TIF SYSTEM "US20030005047A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00019.TIF SYSTEM "US20030005047A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00020.TIF SYSTEM "US20030005047A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00021.TIF SYSTEM "US20030005047A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00022.TIF SYSTEM "US20030005047A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00023.TIF SYSTEM "US20030005047A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00024.TIF SYSTEM "US20030005047A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030005047A1-20030102-D00025.TIF SYSTEM "US20030005047A1-20030102-D00025.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005047</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10167413</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020613</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-179016</doc-number>
</priority-application-number>
<filing-date>20010613</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-179015</doc-number>
</priority-application-number>
<filing-date>20010613</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Data transfer scheme using caching technique for reducing network load</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Toshibumi</given-name>
<family-name>Seki</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Tatsunori</given-name>
<family-name>Kanai</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Kenichiro</given-name>
<family-name>Yoshii</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Hideki</given-name>
<family-name>Yoshida</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Haruhiko</given-name>
<family-name>Toyama</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Hideaki</given-name>
<family-name>Sato</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Yasuhiro</given-name>
<family-name>Kimura</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Takayuki</given-name>
<family-name>Miyazawa</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>KABUSHIKI KAISHA TOSHIBA</organization-name>
<address>
<address-1>1-1, Shibaura 1-chome, Minato-ku</address-1>
<city>Tokyo</city>
<country>
<country-code>JP</country-code>
</country>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>OBLON SPIVAK MCCLELLAND MAIER &amp; NEUSTADT PC</name-1>
<name-2>FOURTH FLOOR</name-2>
<address>
<address-1>1755 JEFFERSON DAVIS HIGHWAY</address-1>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22202</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In a data transfer scheme using a caching technique and/or a compression technique which is capable of reducing the network load of a network connecting between data transfer devices, correspondences between data and their names are registered at the data transfer devices and the corresponding names are transferred, instead of transferring the data, for those data for which the correspondences are registered, so that it is possible to reduce the amount of transfer data among the data transfer devices. Server side data transfer devices and client side data transfer devices can be provided in multiple-to-one, one-to-multiple, or multiple-to-multiple manners. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a data transfer scheme for carrying out data transfer at a data transfer device on behalf of another device. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The client-server type information system formed by servers for providing various services through a network and clients for requesting desired services to the servers has been widely used. In particular, the World Wide Web system (which is also simply called Web) formed by Web servers and clients that communicate with each other by using the HTTP protocol on the Internet is the very widely used client-server type information system. Usually, a server program is operating on a server and a prescribed tool (program) such as a browser is operating on a client. The contents of the services provided on the Internet are also wide ranging so that there are various existing services including services for providing, delivering or transferring information such as that of text, still image, video and audio (home pages, e-mails, and digital contents, for example) or programs, electronic shop services for selling goods, reservation services for seats, rooms, etc., agency services for various contracts, etc., and services in new styles are appearing steadily. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Now, in the client-server type information system such as the Web, the service is provided basically by carrying out data transfer between the client and the server, regardless of the style of the service to be provided. Consequently, a capacity (bandwidth) of the network to be used for communications between the client and the server tends to be a bottleneck of the entire system. For this reason, usually, the caching technique has been used in order to reduce the network load. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In the case of the Web system, the browser or the like that is operating on the client often uses a cache mechanism for caching recently accessed data. In the Web, accesses are made by specifying information or services by using names called URLs, so that among data that are returned in response to information or services requested to the Web servers in the past, those data that are cachable are recorded in the cache on the client in correspondence with their URLs. In this case, when an information or service with the same URL as that recorded in the cache is requested, if it is possible to judge that the response data recorded in the cache has not become obsolete, it is possible to eliminate a communication between the client and the Web server by returning that response data recorded in the cache. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> When a plurality of users are existing on a LAN inside offices of an enterprise, a LAN of a research organization or a LAN inside a home, it is also popular to provide a proxy server between that LAN and the Internet and provide the cache mechanism in the proxy server. The cache inside the client (the cache of the browser, for example) will be operated as a dedicated cache of that client or user, but the cache of the proxy server on the LAN will be operated as a cache shared by users of the plurality of clients or users. For this reason, the cache of the proxy server works even in the case of making an access to the URL accessed by the other (another client) in the past. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Now, in the Web, communications between the client and the server are carried out by the protocol called HTTP. The HTTP protocol uses a set of a &ldquo;request message&rdquo; to be sent from the client to the server and a &ldquo;reply message&rdquo; to be returned from the server to the client in response to that request. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The request message is formed by a &ldquo;request header&rdquo; and a &ldquo;request body&rdquo;. The request header contains various information necessary for the access such as a URL for specifying an information or service to be accessed and a method name indicating the type of access. The request body contains data to be sent to the server. Such data contained in the request body are also referred to as &ldquo;request data&rdquo;. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The reply message is formed by a &ldquo;reply header&rdquo; and a &ldquo;reply body&rdquo;. The reply header contains information such as a processing result status, and the reply body contains the requested information or data of the processing result of the requested service. Such data contained in the reply body are also referred to as &ldquo;reply data&rdquo;. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The major methods for the request message that are used for accesses of information or services include a &ldquo;GET method&rdquo; that reads out an information on the server, a &ldquo;PUT method&rdquo; that writes data of the user into the server, and a &ldquo;POST method&rdquo; that receives a processing result in response to the request. Besides them, methods such as a &ldquo;DELETE method&rdquo; are also defined. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In many cases, the request body of the request message in the GET method and the reply body of the reply message in the PUT method are empty. The request body of the request message in the POST message contains information to be used for the processing on the server side according to the need, and the reply body of the reply message in the POST method contains data obtained as a result of that processing. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The data to be read out from the server by the GET method can be classified into &ldquo;dynamic data&rdquo; that are to be generated at the server side at a time of each reading and &ldquo;static data&rdquo; that are to be returned as they are already stored at the server side. Among them, the dynamic data can possibly have different contents at different occasions of reading even for the same URL, so that in many cases, the server returns the reply message with the reply header that contains an indication that it is not cachable. Consequently, what are to be the caching targets among the Web data are the static data. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> These static data can be classified into &ldquo;shared data&rdquo; that can be accessed by unspecified many users and &ldquo;private data&rdquo; for which the access control for allowing accesses only to the specific user is to be carried out by utilizing the user authentication. The former shared data are cachable for any caches. However, the latter private data are not cachable for a shared cache such as that of the proxy server (because there is a need for the server to return the private data after carrying out the user authentication). The private data are cachable in the case of a personal dedicated cache such as that of the browser. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In the POST method, the result of processing at the server side is to be returned so that the server returns the result by the reply message with the reply header that contains an indication that it is not cachable in general. For this reason, the reply data of the POST method are usually not the caching target. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In the PUT method, data are to be sent to the server so that there is no processing that involves the cache. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In the conventional Web cache, the caching targets are the static contents. Many information or services disclosed on the Web were used to be those disclosed to unspecified many users for which the information updating does not occur very frequently, so that the rate of the static contents were very high and therefore even the conventional caching technique was effective in reducing the network load. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> However, in conjunction with the spread of a system in which the user makes accesses to the information or services on the server via the network by using the Web browser such as that of Web based ASP (Application Service Provider), the amount of data that cannot be handled by the conventional caching technique is increasing. For example: </paragraph>
<paragraph id="P-0019" lvl="2"><number>&lsqb;0019&rsqb;</number> there are many private data for which the accessible users are limited by carrying out the user authentication; </paragraph>
<paragraph id="P-0020" lvl="2"><number>&lsqb;0020&rsqb;</number> there are many dynamic data to be generated by referring to the back-end database; </paragraph>
<paragraph id="P-0021" lvl="2"><number>&lsqb;0021&rsqb;</number> there are many cases of using the POST method such as those of the accounting slip processing and the searching; and </paragraph>
<paragraph id="P-0022" lvl="2"><number>&lsqb;0022&rsqb;</number> there are many cases of using the PUT method for the purpose of sharing information within a group. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As a consequence, the use of the caching technique alone has been becoming rather ineffective as a method for reducing the network load. </paragraph>
</section>
<section>
<heading lvl="1">BRIEF SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> It is therefore an object of the present invention to provide a data transfer scheme using a caching technique and/or a compression technique which is capable of reducing the network load of a network connecting between data transfer devices. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> According to one aspect of the present invention there is provided a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer device comprising: a reception unit configured to receive the first data from the first communication device; a cache unit configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; a processing unit configured to carry out a processing for transmitting a first data name that is generated according to a content of the first data and assigned to the first data, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device, upon receiving the first data transmitted from the first communication device; and a transmission unit configured to transmit the first data name or the first data to the one other data transfer device according to a processing carried out by the processing unit. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> According to another aspect of the present invention there is provided a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer device comprising: a reception unit configured to receive the first data from the first communication device; a cache unit configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; a processing unit configured to carry out a processing for transmitting a first data name that is generated according to a content of the first data and assigned to the first data, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit, upon receiving the first data transmitted from the first communication device; and a transmission unit configured to transmit the first data name or the first data to the another data transfer device according to a processing carried out by the processing unit. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> According to another aspect of the present invention there is provided a data transfer method at a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer method comprising: receiving the first data from the first communication device; judging whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; and carrying out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> According to another aspect of the present invention there is provided a data transfer method at a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer method comprising: receiving the first data from the first communication device; judging whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; and carrying out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> According to another aspect of the present invention there is provided a computer program product for causing a computer to function as a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the computer program product comprising: a first computer program code for causing the computer to receive the first data from the first communication device; a second computer program code for causing the computer to judge whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; and a third computer program code for causing the computer to carry out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to another aspect of the present invention there is provided a computer program product for causing a computer to function as a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the computer program product comprising: a first computer program code for causing the computer to receive the first data from the first communication device; a second computer program code for causing the computer to judge whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; and a third computer program code for causing the computer to carry out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Other features and advantages of the present invention will become apparent from the following description taken in conjunction with the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram showing one exemplary configuration of a computer network system according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a diagram for explaining a fingerprint to be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a diagram for explaining a fingerprint cache to be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A and 7B</cross-reference> are diagrams showing exemplary message formats that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a diagram showing another exemplary message format that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> are diagrams showing another exemplary message formats that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 10A and 10B</cross-reference> are diagrams showing another exemplary message formats that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a diagram showing another exemplary message format that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram showing one exemplary configuration of a server side proxy according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram showing one exemplary configuration of a client side proxy according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a diagram showing one exemplary data structure of a ringerpring cache that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a diagram showing another exemplary data structure of a ringerpring cache that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a diagram showing another exemplary data structure of a ringerpring cache that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a diagram showing another exemplary data structure of a ringerpring cache that can be used in one embodiment of the present invention. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a flow chart showing one exemplary processing procedure of the server side proxy of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a flow chart showing one exemplary processing procedure of the client side proxy of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a diagram for explaining one exemplary data transfer between the server side proxy of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> and the client side proxy of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a diagram for explaining another exemplary data transfer between the server side proxy of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> and the client side proxy of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> according to one embodiment of the present invention. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a diagram showing an exemplary configuration of a conventional computer network system to which the present invention is to be applied. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> is a diagram showing one exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a diagram for explaining a fingerprint to be used in another embodiment of the present invention. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a flow chart showing one exemplary processing procedure of the server side proxy according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> is a diagram showing another exemplary configuration of a computer network system according to another embodiment of the present invention. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is a flow chart showing another exemplary processing procedure of the server side proxy according to another embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, one embodiment of the data transfer scheme according to the present invention will be described in detail. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In the following, an exemplary case in which a WAN is the Internet, clients are connected to a user&apos;s office LAN, and the HTTP protocol is used will be described, but the present invention is also applicable to the cases where the WAN is other than the Internet, the cases where the clients are located at LAN other than the user&apos;s office LAN such as a LAN inside a home, and the cases where the protocol other than the HTTP protocol is to be used. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> shows an exemplary basic configuration of a computer network system to which the present invention is applied. In this exemplary configuration, a local area network (LAN) <highlight><bold>12</bold></highlight> inside an ASP server center <highlight><bold>2</bold></highlight> and a local area network (LAN) <highlight><bold>16</bold></highlight> inside a user&apos;s office <highlight><bold>4</bold></highlight> are connected through a wide area network (WAN) <highlight><bold>14</bold></highlight> such as the Internet or dedicated line, such that a server <highlight><bold>20</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight> and a client <highlight><bold>50</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> are capable of carrying out communications through the LAN <highlight><bold>12</bold></highlight>, the WAN <highlight><bold>14</bold></highlight> and the LAN <highlight><bold>16</bold></highlight>. One or a plurality of servers <highlight><bold>20</bold></highlight> are connected to the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight> and one or a plurality of clients <highlight><bold>50</bold></highlight> are connected to the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The Web based ASP provides services using various application programs from the server <highlight><bold>20</bold></highlight> provided at the ASP server center <highlight><bold>2</bold></highlight> through the WAN <highlight><bold>14</bold></highlight>, and a user can access these services by using a Web browser or the like on the client <highlight><bold>50</bold></highlight> provided at the user&apos;s office <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Note that it is possible to have a plurality of the ASP server centers <highlight><bold>2</bold></highlight> and/or user&apos;s offices <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In such a configuration, the effective communication capacity (bandwidth) of the network connecting between the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> and the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight>, especially that of the WAN <highlight><bold>14</bold></highlight> such as the Internet, is lower than those of the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>12</bold></highlight> and the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight>, so that it can become a bottleneck of the performance that can cause the communication delay and give rise to the problem of the lower response performance of the applications. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> For this reason, in this embodiment, as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, two modules called a server side proxy <highlight><bold>30</bold></highlight> and a client side proxy <highlight><bold>40</bold></highlight> are provided at two ends of the WAN <highlight><bold>14</bold></highlight> that are connecting between the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight> and the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> and a fingerprint compression (FP compression) to be described below is carried out between them, such that the amount of communication data is reduced and the bottleneck of the wide area network is resolved. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Note here that the following description is directed to the case of applying the FP compression to communications between one server side proxy <highlight><bold>30</bold></highlight> and a plurality of client side proxies <highlight><bold>40</bold></highlight> (the case where one client side proxy <highlight><bold>40</bold></highlight> carries out a communication to which the FP compression is applied, with one server side proxy <highlight><bold>30</bold></highlight> at a given timing). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Each one of the server <highlight><bold>20</bold></highlight>, the server side proxy <highlight><bold>30</bold></highlight>, the client proxy <highlight><bold>40</bold></highlight> and the client <highlight><bold>50</bold></highlight> can be realized in a form of operating a software (a server program, a server side proxy program, a client side proxy program, or a client program, respectively) on a computer. In this case, the computer will be provided with or connected with softwares such as OS, driver software, packet communication software and encryption software which have desired functions, and hardwares such as communication interface device, external memory device and input/output device. Also, in this case, it is preferable to use the graphical user interface (GUI) for the purpose of entering information from the user or a manager and presenting information to the user. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> On the client <highlight><bold>50</bold></highlight> used by the user in order to utilize the service, a Web browser program or the like is operated according to the purpose. The user utilizes the service by sending a request message to a server that provides the desired service such as the information transfer or the order taking through the Internet from the Web browser and receiving a reply message, or repeating this procedure according to the need, for example. Of course, it is also possible to use a software other than the general purpose software like the Web browser, such as a dedicated software for the purpose of utilizing specific service. Also, the client can be a portable telephone terminal or the like that has the Internet function, for example, rather than the general purpose computer. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> On the server <highlight><bold>20</bold></highlight>, a prescribed server program is operated, to provide the service specific to that server site with respect to the user of the client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The server side proxy <highlight><bold>30</bold></highlight> can be provided to operate as a transparent proxy by being connected with both the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>12</bold></highlight> and the WAN <highlight><bold>14</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The server side proxy <highlight><bold>30</bold></highlight> can also be provided on the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>12</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The server side proxy <highlight><bold>30</bold></highlight> can also be realized as a built-in function of the server <highlight><bold>20</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Similarly, the client side proxy <highlight><bold>40</bold></highlight> can be provided to operate as a transparent proxy by being connected with both the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> and the WAN <highlight><bold>14</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be provided on the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>16</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be realized as a built-in function of the browser or the like that operates on the client <highlight><bold>50</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be realized as a personal client side proxy that is operated on the client <highlight><bold>50</bold></highlight> on which the browser or the like is operated. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Note that the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> can be provided in the same form as shown in FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>. They can also be provided in different forms, such that some server side proxy <highlight><bold>30</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, some other server proxy <highlight><bold>30</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, some client side proxy <highlight><bold>40</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, and some other slide side proxy <highlight><bold>40</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, for instance. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Also, the client side proxy <highlight><bold>40</bold></highlight> may be provided in a form of a built-in element of a mobile terminal or a mobile computer, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, for example. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Each one of the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> of this embodiment has a caching mechanism called fingerprint cache (FP cache). The fingerprint cache records and manages data to be exchanged by the HTTP protocol, by using a name called fingerprint (FP). </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the fingerprint is a short numerical value that is determined by using a prescribed calculation method (a hash function in the example of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) from the content of the data (contents in the example of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) to be exchanged by the HTTP protocol. This numerical value may have a variable length, but the numerical value with a fixed length is easier to handle from a viewpoint of the ease of the processing. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> As a method for calculating the fingerprint, it is possible to use the well known hash function such as MD-5, SHA-1, etc. These hash functions are already in use for the electronic signature with respect to data, and they can convert arbitrary data given to them into a numerical value of 128 bits in the case of MD-5 or a numerical value of 160 bits in the case of SHA-1. The characteristic of these hash function is that, when two data X<highlight><bold>1</bold></highlight> and X<highlight><bold>2</bold></highlight> are given and the data X<highlight><bold>1</bold></highlight> and the data X<highlight><bold>2</bold></highlight> are identical, the hash value calculated with respect to the data X<highlight><bold>1</bold></highlight> and the hash value calculated with respect to the data X<highlight><bold>2</bold></highlight> will be the same, but when two different data A and B are given, the hash value calculated with respect to the data A and the hash value calculated with respect to the data B will be different at a very high probability (there is a possibility for the hash values calculated with respect to two different data A and B to be the same in principle, but that possibility is negligibly small in practice). </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the fingerprint cache <highlight><bold>60</bold></highlight> to be provided in the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> is recording and managing the data body <highlight><bold>61</bold></highlight> that were exchanged by using the HTTP protocol in the past, by using the fingerprint value <highlight><bold>62</bold></highlight> calculated from that data body <highlight><bold>61</bold></highlight> as its name. Note that, as will be described in detail below, the server side proxy <highlight><bold>30</bold></highlight> manages a correspondence between a fingerprint and data for each client side proxy <highlight><bold>40</bold></highlight> which is a correspondent of a communication to which the FP compression is to be applied. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> For example, when the data are to be transferred from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> by using the HTTP protocol, the server side proxy <highlight><bold>30</bold></highlight> calculates the fingerprint of that data, and if the data corresponding to that fingerprint exists in the fingerprint cache corresponding to that client side proxy <highlight><bold>40</bold></highlight>, it implies that (data with the same content as) this data had been transferred to that client side proxy <highlight><bold>40</bold></highlight> in the past, so that the server side proxy <highlight><bold>30</bold></highlight> transfers the corresponding fingerprint value without transferring that data itself. The client side proxy <highlight><bold>40</bold></highlight> that received the fingerprint can reproduce the data to be transferred by taking out the data corresponding to that fingerprint value from the fingerprint cache. In this scheme (i.e., the sequence of data compression&rarr;data transfer&rarr;data decompression), it is possible to reduce the amount of data to be transferred through the network considerably because it suffices to send the fingerprint values for those data that are the same as the data already sent in the past. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Note that the server side proxy <highlight><bold>30</bold></highlight> can identify the client side proxy <highlight><bold>40</bold></highlight> to which the data received from the server <highlight><bold>20</bold></highlight> should be transferred, according to a prescribed communication regulation, for example. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Also, the client side proxy <highlight><bold>40</bold></highlight> can be provided in a configuration which uses the fingerprint that is described in a message from the server side proxy <highlight><bold>30</bold></highlight> at a time of the registration, a configuration which calculates the fingerprint itself as the fingerprint is not to be described in a message from the server side proxy <highlight><bold>30</bold></highlight>, or a configuration which calculates the fingerprint itself even though the fingerprint is described in a message from the server side proxy <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> For the convenience of the explanation, the compression of the amount of transfer data by replacing the data body of a message with the fingerprint by utilizing the fingerprint cache at a time of the data transfer between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> will be referred to as a fingerprint compression (FP compression) hereafter. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Note that every message can be a target for applying the FP compression (i.e., a target for which the processing to replace the data with the fingerprint is to be carried out) between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight>, but it is also possible to set those messages that satisfy a prescribed condition as not targets for applying the FP compression (which are always to be transferred without the FP compression), in order to omit the application of the FP compression with respect to those messages for which the fingerprint cache effect cannot be expected, for example. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> In this case, the prescribed condition can be that a prescribed information is described in the message header, for example. More specifically, the prescribed condition can be that an information indicating the GET method and an information indicating the request are described in the message header, for example. As another example, the prescribed condition can be that data to be transferred is null or in a very compact size. Of course there are many other variations for the prescribed condition, and it is also possible to use a plurality of conditions in combination. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Note that the setting regarding the application target of such FP compression can be the same for the entire system or can be made for each pair of the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight>. Also, in the latter case, the setting can be made in advance or the setting can be made at each session. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Next, with references to <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the message format to be used between proxies (for a message that is a target for applying the FP compression) at a time of the data transfer between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> will be described. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The message that is not a target for applying the FP compression can be transferred between proxies in an original message format (at a time of receiving it at the FP compression side (transmitting side) proxy) without making any change. It is also possible to transfer such a message by providing an information capable of identifying that this message is not a target for applying the FP compression in the message header, for example, at the FP compression side (transmitting side) proxy. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Now, in the case of the data transfer between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight>, the messages that are targets for applying the FP compression include those messages (compressed messages) in which data is FP compressed and replaced with the fingerprint and those messages (non-compressed messages) in which data is loaded without applying the FP compression. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The non-compressed message format is used when data contained in the message is not registered in the fingerprint cache of the server side proxy <highlight><bold>30</bold></highlight> corresponding to its transfer target client side proxy <highlight><bold>40</bold></highlight>. On the other hand, the compressed message format is used when data contained in the message is registered in the fingerprint cache of the server side proxy <highlight><bold>30</bold></highlight> corresponding to its transfer target client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> At the decompression side (receiving side), the registration of data into the fingerprint cache can be carried out at a timing of receiving the message in the non-compressed format. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A and 7B</cross-reference> show exemplary message formats, where <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> shows the non-compressed message and <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> shows the compressed message. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, the data is loaded on the message body, whereas in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>B, the fingerprint (FP) is loaded on the message body instead of the data. Also, in this example, an identification information for enabling identification of the presence or absence of the FP compression is described in a message header (at the compression side proxy), and the presence or absence of the FP compression is identified according to this identification information (at the decompression side proxy) (the compression is absent if it is 0, the compression is present if it is 1, for example). Note that the identification information can be a special one to be used between proxies or one that utilizes a field already existing in the ordinary HTTP message header, either independently or in combination with the original purpose of that field. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Note that, in the example of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>A, in the case of the non-compression, the fingerprint is not included in the message but it is also possible to include the fingerprint in the message body in addition to the data, or it is also possible to include the fingerprint in the message header as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. In this way, it is possible to omit a task to obtain the fingerprint from the data again at a time of carrying out the registration of the data into the fingerprint cache at the decompression side, because the fingerprint included in the message can be utilized directly. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Note that, in the case where messages that are not targets for applying the FP compression can exist, it is also possible for the decompression side (receiving side) to judge whether it is a message that is a target for applying the FP compression or a message that is not a target for applying the FP compression according to whether the above described identification information is contained in the message header or not. It is also possible to provide the identification information in the header of the message that is not a target for applying the FP compression, so as to identify three types of the messages by this identification information (a message that is not a target for applying the FP compression if it is 01, (a message that is a target for applying the FP compression and) the compression is absent if it is 10, and (a message that is a target for applying the FP compression and) the compression is present if it is 11, for example). </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> show another exemplary message formats, where <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> shows the non-compressed message and <cross-reference target="DRAWINGS">FIG. 9B</cross-reference> shows the compressed message. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>A, the data is loaded on the message body, whereas in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>B, the message body is null. Also, in this example, the fingerprint (FP) is described in the message header in both formats. The identification information for enabling identification of the presence or absence of the FP compression is the same as in the above described example. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Note that, in this case, it is also possible to use the message format similar to that of <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> in the case of the non-compression (a format that does not contain the fingerprint). </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Note that, in the case where messages that are not targets for applying the FP compression can exist and the compression side (transmitting side) proxy has a configuration for always describing the fingerprint in the message header of the message that is a target for applying the FP compression, it is also possible for the decompression side (receiving side) to judge whether it is a message that is a target for applying the FP compression or a message that is not a target for applying the FP compression according to whether the fingerprint is contained in the message header or not, besides the method based on the identification information described above. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 10A and 10B</cross-reference> show still another exemplary message formats, where <cross-reference target="DRAWINGS">FIG. 10A</cross-reference> shows the non-compressed message and <cross-reference target="DRAWINGS">FIG. 10B</cross-reference> shows the compressed message. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 10</cross-reference>A, the data is loaded on the message body, whereas in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>B, the message body is null. Also, in this example, the fingerprint (FP) is described in the message header in both formats. However, in this example, the identification information for enabling identification of the presence or absence of the FP compression is not used. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In this example, the presence or absence of the FP compression can be identified according to whether the message body is null or not. However, in the case where messages that are not targets for applying the FP compression and that have the null message body can exist, it is possible to judge whether it is the compressed message that is a target for applying the FP compression or a message that is not a target for applying the FP compression and that has the null message body according to whether the fingerprint is contained in the message header or not, for example. It is also possible to provide an information indicating whether it is a message that is a target for applying the FP compression or not in the message header. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Note that it is also possible to use a format in which the fingerprint is not described in the message as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> in the case of the non-compression. In this case, it is possible to identify the presence or absence of the FP compression according to whether the fingerprint is contained in the message header or not. However, in the case where messages that are not targets for applying the FP compression can exist, it is possible to provide an information indicating whether it is a message that is a target for applying the FP compression or not in the message header, for example. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In the following, the operation in the case of applying the FP compression/decompression to the reply data at a time of transferring the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> will be described in detail. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows an exemplary configuration of the server side proxy <highlight><bold>30</bold></highlight> in this embodiment, and <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows an exemplary configuration of the client side proxy <highlight><bold>40</bold></highlight> in this embodiment. Note that <cross-reference target="DRAWINGS">FIG. 12</cross-reference> and <cross-reference target="DRAWINGS">FIG. 13</cross-reference> mainly show configurations relevant to the data transfer from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the server side proxy <highlight><bold>30</bold></highlight> has a reception unit <highlight><bold>31</bold></highlight> for carrying out a processing for receiving a transfer message from the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight> or the wide area network <highlight><bold>14</bold></highlight>, a processing unit <highlight><bold>32</bold></highlight> for applying the FP compression to data contained in the transfer message, a transmission unit <highlight><bold>33</bold></highlight> for carrying out a processing for transmitting the transfer message to the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>2</bold></highlight> or the wide area network <highlight><bold>14</bold></highlight>, and fingerprint caches (FP caches) <highlight><bold>34</bold></highlight> for storing the fingerprint and its source data in correspondence. Also, the processing unit <highlight><bold>32</bold></highlight> has a fingerprint (FP) compression judgement unit <highlight><bold>321</bold></highlight> for judging whether the data contained in the transfer message should be a compression target or not, a fingerprint cache (FP cache) management unit <highlight><bold>322</bold></highlight> for carrying out the search and the registration with respect to the fingerprint caches <highlight><bold>34</bold></highlight>, and a fingerprint (FP) compression processing unit <highlight><bold>323</bold></highlight> for carrying out a processing for replacing the data contained in the transfer message with the corresponding fingerprint. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Now, the FP cache management unit <highlight><bold>322</bold></highlight> manages a correspondence between the fingerprint and the data for each client side proxy <highlight><bold>40</bold></highlight> which is a correspondent of a communication to which the FP compression is to be applied. There are many variations for a form of realizing this management. In the following, some of them will be described (note that <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows a configuration in which the FP cache <highlight><bold>34</bold></highlight> is provided logically in correspondence to each one of the client side proxies <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> (1) <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows an exemplary configuration in which a hash table is provided for each client side proxy <highlight><bold>40</bold></highlight> and data corresponding to the fingerprint is also stored for each client side proxy <highlight><bold>40</bold></highlight> (a copy is stored for each one of the client side proxies even when they have the same contents). </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> In this case, the FP cache management unit <highlight><bold>322</bold></highlight> identifies the FP cache <highlight><bold>34</bold></highlight> corresponding to the client side proxy <highlight><bold>40</bold></highlight> which is the data transfer target, and checks whether the fingerprint corresponding to that data is stored in that FP cache <highlight><bold>34</bold></highlight> or not. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> (2) <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows an exemplary configuration in which a hash table is provided for each client side proxy <highlight><bold>40</bold></highlight> but only one copy of the same contents is stored and information on pointers to the data is stored in the hash table (note that the different client side proxies <highlight><bold>40</bold></highlight> that have the same fingerprint value will have respective data stored if the contents of the original data contents are different). </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In this case, the FP cache management unit <highlight><bold>322</bold></highlight> identifies the FP cache <highlight><bold>34</bold></highlight> corresponding to the client side proxy <highlight><bold>40</bold></highlight> which is the data transfer target, and checks whether the fingerprint corresponding to that data is stored in that FP cache <highlight><bold>34</bold></highlight> or not. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> (3) <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows an exemplary configuration in which a hash table is not provided for each client side proxy <highlight><bold>40</bold></highlight> but a client side proxy identification information for identifying the client side proxy which is the data transfer target corresponding to that fingerprint is added to the hash table such that the client side proxy identification information and the fingerprint value are stored in pair. Note that <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows a configuration in which only one copy of the same contents is stored and information on pointers to the data is stored in the hash table, but it is also possible to use a configuration for storing data for each entry as in the above (1). Note also that the order of storing the fingerprint value and the client side proxy identification information may be reversed from that shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The client side proxy identification information is information capable of uniquely identifying the client side proxy, which can be provided by an IP address, a MAC address, a host ID, a channel identifier, or information capable uniquely identifying any one of them. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In this case, the FP cache management unit <highlight><bold>322</bold></highlight> identifies the client side proxy identification information of the client side proxy <highlight><bold>40</bold></highlight> which is the data transfer target, and checks whether a pair of that client side proxy identification information and the fingerprint corresponding to that data is stored in the FP cache <highlight><bold>34</bold></highlight> or not. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> (4) <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows an exemplary configuration in which the FP cache <highlight><bold>34</bold></highlight> is not provided for each client side proxy <highlight><bold>40</bold></highlight> but a hash table stores the fingerprint value in correspondence to a client side proxy identification information group (request source client group) capable of utilizing that fingerprint. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In this case, the FP cache management unit <highlight><bold>322</bold></highlight> identifies the client side proxy identification information of the client side proxy <highlight><bold>40</bold></highlight> which is the data transfer target, and checks whether the fingerprint corresponding to that data is stored in the FP cache <highlight><bold>34</bold></highlight> or not, and whether that client side proxy identification information is stored among the client side proxy identification information group corresponding to that fingerprint or not. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Next, as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the client side proxy <highlight><bold>40</bold></highlight> has a reception unit <highlight><bold>41</bold></highlight> for carrying out a processing for receiving a transfer message from the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> or the wide area network <highlight><bold>14</bold></highlight>, a processing unit <highlight><bold>42</bold></highlight> for applying the FP decompression to data contained in the transfer message, a transmission unit <highlight><bold>43</bold></highlight> for carrying out a processing for transmitting the transfer message to the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> or the wide area network <highlight><bold>14</bold></highlight>, and a fingerprint cache (FP cache) <highlight><bold>44</bold></highlight> for storing the fingerprint and its source data in correspondence. Also, the processing unit <highlight><bold>42</bold></highlight> has a fingerprint (FP) compression judgement unit <highlight><bold>421</bold></highlight> for judging whether the data contained in the transfer message should be a compression target or not and the presence or absence of the FP compression with respect to the transfer message, a fingerprint cache (FP cache) management unit <highlight><bold>422</bold></highlight> for carrying out the search and the registration with respect to the fingerprint cache <highlight><bold>44</bold></highlight>, and a fingerprint (FP) decompression processing unit <highlight><bold>423</bold></highlight> for carrying out a processing for decompressing the original data from the fingerprint contained in the FP compressed transfer message. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Note that the FP compression judgement unit <highlight><bold>321</bold></highlight> on the compression side and the FP compression judgement unit <highlight><bold>421</bold></highlight> on the decompression side judge whether the data contained in that message should be a target for applying the FP compression or not, by checking whether the message satisfies a prescribed condition or not as described above. In the case of setting every message as a target for applying the FP compression, the FP compression judgement unit <highlight><bold>321</bold></highlight> on the compression side and the corresponding part of the exemplary procedure to be described below are unnecessary, and the FP compression judgement unit <highlight><bold>421</bold></highlight> on the decompression side and the corresponding part of the exemplary procedure to be described below are also unnecessary. Note also that the FP compression judgement unit <highlight><bold>421</bold></highlight> on the decompression side judges whether the data of the message that is a target for applying the FP compression is FP compressed or not. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> In the following, the case of transferring the message that is a target for applying the FP compression (the case in which the message is judged as a target for applying the FP compression or the case in which every message is set as a target for applying the FP compression) will be mainly described. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> shows an exemplary processing procedure of the server side proxy <highlight><bold>30</bold></highlight> since receiving the request message from the client side proxy <highlight><bold>40</bold></highlight> until transferring the reply message to that client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Note that <cross-reference target="DRAWINGS">FIG. 18</cross-reference> shows the processing of the server side proxy <highlight><bold>30</bold></highlight> in the case of receiving one request message from the client side proxy <highlight><bold>40</bold></highlight>, but when the request messages are received simultaneously from a plurality of client side proxies <highlight><bold>40</bold></highlight>, the processing of <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is carried out in parallel when each request is received. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Note also that <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is an exemplary procedure for the case where the FP compression is not used in the transfer of the request message from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>, and the FP compression is used in the transfer of the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In the following, the request source client side proxy is a client side proxy corresponding to a request source client in the processing of a pair of a request message and a reply message, i.e., a client side proxy which is a source of a request message and a destination of a reply message. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> When the request message is received from one client side proxy (i.e., the request source client side proxy) <highlight><bold>40</bold></highlight> among a plurality of client side proxies (step S<highlight><bold>1</bold></highlight>), the server side proxy <highlight><bold>30</bold></highlight> transmits it to the server <highlight><bold>20</bold></highlight> which is a destination (step S<highlight><bold>2</bold></highlight>). At this point, the processing for this pair of the request message and the reply message once enters a state waiting for the receiving of the corresponding reply message. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Then, when the server side proxy <highlight><bold>30</bold></highlight> receives the reply message from the server <highlight><bold>20</bold></highlight> at the reception unit <highlight><bold>31</bold></highlight> (step S<highlight><bold>3</bold></highlight>), the FP compression judgement unit <highlight><bold>321</bold></highlight> checks and judges whether the reply data of this reply message is a target for applying the FP compression or not (step S<highlight><bold>4</bold></highlight>). When the reply data is judged as not a target for applying the FP compression (step S<highlight><bold>4</bold></highlight> NO), the received reply message is transferred to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>9</bold></highlight>). </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> When the reply data of this reply message is judged as a target for applying the FP compression at the step S<highlight><bold>4</bold></highlight>, the fingerprint value of this reply data is calculated at the FP cache management unit <highlight><bold>322</bold></highlight> (step S<highlight><bold>5</bold></highlight>), and the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to the request source client side proxy <highlight><bold>40</bold></highlight> is searched through by using this fingerprint value as a key (step S<highlight><bold>6</bold></highlight>). </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> When a set of this fingerprint value and the corresponding data is registered in the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> (step S<highlight><bold>7</bold></highlight> YES), the received reply message is converted into the FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, for example) by using this fingerprint value at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to that request source client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>8</bold></highlight>). At this point, a value of a field indicating the data length (Content-Length field) in the reply header is set in accordance with the FP compression format, according to the need. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> On the other hand, when a set of this fingerprint value and the corresponding data is not registered in the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> as a result of the search of the step S<highlight><bold>6</bold></highlight> (step S<highlight><bold>7</bold></highlight> NO), the following two operations are carried out. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> (1) The received reply message is converted into a non-FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>A, for example) (by using this fingerprint value according to the need) at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>10</bold></highlight>). </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> (2) This fingerprint value and this reply data are set in correspondence (the fingerprint value is set as a key) and registered into the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> at the FP cache management unit <highlight><bold>322</bold></highlight> (step S<highlight><bold>11</bold></highlight>). </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Note that these operations (1) and (2) can be carried out in any desired order or in parallel. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows an exemplary processing procedure of the client side proxy <highlight><bold>40</bold></highlight> since receiving the request message from the client <highlight><bold>50</bold></highlight> until transferring the reply message to that client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Note that <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows the processing of the client side proxy <highlight><bold>40</bold></highlight> in the case of receiving one request message from the client <highlight><bold>50</bold></highlight>, but when the request messages are received simultaneously from a plurality of clients <highlight><bold>50</bold></highlight>, the processing of <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is carried out in parallel when each request is received. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Note also that <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is an exemplary procedure for the case where the FP compression is not used in the transfer of the request message from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>, and the FP compression is used in the transfer of the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> When the request message is received from the request source client <highlight><bold>50</bold></highlight> (step S<highlight><bold>21</bold></highlight>), the client side proxy <highlight><bold>40</bold></highlight> transmits it to the server side proxy <highlight><bold>30</bold></highlight> corresponding to the server <highlight><bold>20</bold></highlight> which is a destination (step S<highlight><bold>22</bold></highlight>). At this point, the processing for this pair of the request message and the reply message once enters a state waiting for the receiving of the corresponding reply message. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Then, when the client side proxy <highlight><bold>40</bold></highlight> receives the reply message from the server side proxy <highlight><bold>30</bold></highlight> at the reception unit <highlight><bold>41</bold></highlight> (step S<highlight><bold>23</bold></highlight>), the FP compression judgement unit <highlight><bold>421</bold></highlight> checks and judges whether the reply data of this reply message is a target for applying the FP compression or not (step S<highlight><bold>24</bold></highlight>). When the reply data is judged as not a target for applying the FP compression (step S<highlight><bold>24</bold></highlight> NO), the received reply message is transferred to the client <highlight><bold>50</bold></highlight> from the transmission unit <highlight><bold>43</bold></highlight> (step S<highlight><bold>32</bold></highlight>). </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> When the reply data of this reply message is judged as a target for applying the FP compression at the step S<highlight><bold>24</bold></highlight>, the FP compression judgement unit <highlight><bold>421</bold></highlight> also checks and judges whether the reply data is FP compressed or not (step S<highlight><bold>25</bold></highlight>). </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> When the reply data of this reply message is judged as FP compressed (as shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, for example) at the step S<highlight><bold>25</bold></highlight>, the fingerprint value of this reply data is obtained at the FP cache management unit <highlight><bold>422</bold></highlight> (step S<highlight><bold>26</bold></highlight>), and the fingerprint cache <highlight><bold>44</bold></highlight> is searched through by using this fingerprint value as a key (step S<highlight><bold>27</bold></highlight>). </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Then, the data corresponding to this fingerprint value obtained from the fingerprint cache <highlight><bold>44</bold></highlight> is attached to the received reply message and a special information to be used between the proxies is deleted in the case of using such an information at the FP decompression processing unit <highlight><bold>423</bold></highlight>, and the resulting reply message is transmitted to the client <highlight><bold>50</bold></highlight> from the transmission unit <highlight><bold>43</bold></highlight> (step S<highlight><bold>28</bold></highlight>). At this point, a value of a field indicating the data length (Content-Length field) in the reply header is set to be a length of the data corresponding to this fingerprint value, according to the need. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> On the other hand, when the reply data of this reply message is judged as not FP compressed (as shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>A, for example) at the step S<highlight><bold>25</bold></highlight>, the following two operations are carried out. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> (1) The special information to be used between the proxies is deleted from the received reply message in the case of using such an information at the FP decompression processing unit <highlight><bold>423</bold></highlight>, and the resulting reply message is transmitted to the client <highlight><bold>50</bold></highlight> from the transmission unit <highlight><bold>43</bold></highlight> (step S<highlight><bold>30</bold></highlight>). </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> (2) The fingerprint value of this reply data is obtained (step S<highlight><bold>29</bold></highlight>), and this fingerprint value and this reply data are set in correspondence (the fingerprint value is set as a key) and registered into the fingerprint cache <highlight><bold>44</bold></highlight> at the FP cache management unit <highlight><bold>422</bold></highlight> (step S<highlight><bold>31</bold></highlight>). </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Note that these operations (1) and (2) can be carried out in any desired order or in parallel. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Here, the fingerprint value can be obtained at the step S<highlight><bold>26</bold></highlight> from the fingerprint that is described in the message. However, the step S<highlight><bold>29</bold></highlight> can use a method for obtaining the fingerprint from the message when the fingerprint is described in the message or a method for calculating the fingerprint value by using the hash function or the like from the reply data when the fingerprint is not described in the message. It is also possible to use a method for calculating the fingerprint value from the reply data even when the fingerprint is described in the message. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> Note also that it is possible to carry out the step S<highlight><bold>26</bold></highlight> or the step S<highlight><bold>29</bold></highlight> between the step S<highlight><bold>24</bold></highlight> and the step S<highlight><bold>25</bold></highlight>, and it is also possible to carry out the step S<highlight><bold>29</bold></highlight> between the step S<highlight><bold>30</bold></highlight> and the step S<highlight><bold>31</bold></highlight>. Note also that the judgement of the step S<highlight><bold>24</bold></highlight> and the judgement of the step S<highlight><bold>25</bold></highlight> can be made simultaneously. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Next, with reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, the operation in the case of transferring data that is not registered in the fingerprint cache from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> while registering this data into the fingerprint cache will be described. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> (1) Suppose that the browser or the like on the client <highlight><bold>50</bold></highlight> issued the request message of the POST method to the server <highlight><bold>20</bold></highlight> by using the URL of &ldquo;/A.cgi&rdquo;, for example. Here, the browser or the like is set in advance to send the request message for the server <highlight><bold>20</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> first. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> (2), (3) This request message is transferred to the server <highlight><bold>20</bold></highlight> by the client side proxy <highlight><bold>40</bold></highlight> and the server side proxy <highlight><bold>30</bold></highlight> corresponding to the server <highlight><bold>20</bold></highlight> which is a destination. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> (4) The server <highlight><bold>20</bold></highlight> carries out a processing with respect to this request message, and then returns the reply message to the server side proxy <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> (5), (6) The server side proxy <highlight><bold>30</bold></highlight> registers the reply data of the received reply message into the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to the request source client side proxy <highlight><bold>40</bold></highlight> as this reply data is data received for the first time for the request source client side proxy <highlight><bold>40</bold></highlight>, and transfers this reply message to that client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> (7), (8) The client side proxy <highlight><bold>40</bold></highlight> obtains the fingerprint according the reply data of the received reply message and registers the fingerprint along with that reply data into the fingerprint cache <highlight><bold>44</bold></highlight> as this reply data is data received for the first time, and transfers this reply message to (the browser or the like operating on) the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Next, with reference to <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, the operation in the case of transferring data that is registered in the fingerprint cache by the operation of <cross-reference target="DRAWINGS">FIG. 20</cross-reference> from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> will be described. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> (1) to (4) are the same as (1) to (4) in the operation of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> (5), (6) The server side proxy <highlight><bold>30</bold></highlight> replaces the reply data of the reply message received from the server <highlight><bold>20</bold></highlight> with the corresponding fingerprint registered in the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to the request source client side proxy <highlight><bold>40</bold></highlight>, and transfers the resulting reply message to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> (7), (8) The client side proxy <highlight><bold>40</bold></highlight> detects that the reply data of the reply message is replaced with the fingerprint, takes out the corresponding data from the fingerprint cache <highlight><bold>44</bold></highlight> by using the specified fingerprint, enters this data into the reply body, and transfers that reply message to (the browser or the like operating on) the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> Now, up to this point, the case of handling the reply message transferred from the server side proxy to the client side proxy has been mainly described, but of course the present invention is applicable to the other messages as well. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> Also, up to this point, at a time of transferring the data from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>, if this data is the same as that registered in the fingerprint cache, the network traffic is reduced by transferring the corresponding fingerprint instead of this data. This FP compression can be applied also to the case of transferring the request data or the like from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight> as well. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> Also, up to this point, the embodiment in which the entire data contained in one message is a target for applying the FP compression (a target for the registration into the fingerprint cache) has been described, but in the case where the data contained in one message is formed by a set of prescribed unit data, for example, it is also possible to set only a part of the unit data contained in one message as a target for applying the FP compression (a target for the registration into the fingerprint cache). </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 23</cross-reference> to <cross-reference target="DRAWINGS">FIG. 31</cross-reference>, another embodiment of the data transfer scheme according to the present invention will be described in detail. In the following, the differences from the previous embodiment will be mainly described. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> In this embodiment, as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, two modules called a server side proxy <highlight><bold>30</bold></highlight> and a client side proxy <highlight><bold>40</bold></highlight> are provided at two ends of the WAN <highlight><bold>14</bold></highlight> that are connecting between the LANs <highlight><bold>12</bold></highlight> inside the ASP server centers <highlight><bold>2</bold></highlight> and the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> and the fingerprint compression (FP compression) is carried out between them, such that the amount of communication data is reduced and the bottleneck of the wide area network is resolved, similarly as in the previous embodiment. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> Note here that the following description is directed to the case of applying the FP compression to communications between a plurality of server side proxies <highlight><bold>30</bold></highlight> and one client side proxy <highlight><bold>40</bold></highlight> (the case where one server side proxy <highlight><bold>30</bold></highlight> carries out a communication to which the FP compression is applied, with one client side proxy <highlight><bold>40</bold></highlight> at a given timing). </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> The server side proxy <highlight><bold>30</bold></highlight> can be provided to operate as a transparent proxy by being connected with both the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>12</bold></highlight> and the WAN <highlight><bold>14</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. The server side proxy <highlight><bold>30</bold></highlight> can also be provided on the LAN <highlight><bold>12</bold></highlight> inside the ASP server center <highlight><bold>12</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. The server side proxy <highlight><bold>30</bold></highlight> can also be realized as a built-in function of the server <highlight><bold>20</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Similarly, the client side proxy <highlight><bold>40</bold></highlight> can be provided to operate as a transparent proxy by being connected with both the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>4</bold></highlight> and the WAN <highlight><bold>14</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be provided on the LAN <highlight><bold>16</bold></highlight> inside the user&apos;s office <highlight><bold>16</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be realized as a built-in function of the browser or the like that operates on the client <highlight><bold>50</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>. The client side proxy <highlight><bold>40</bold></highlight> can also be realized as a personal client side proxy that is operated on the client <highlight><bold>50</bold></highlight> on which the browser or the like is operated. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> Note that the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> can be provided in the same form as shown in FIGS. <highlight><bold>23</bold></highlight> to <highlight><bold>25</bold></highlight>. They can also be provided in different forms, such that some server side proxy <highlight><bold>30</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, some other server proxy <highlight><bold>30</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 24</cross-reference>, some client side proxy <highlight><bold>40</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, and some other slide side proxy <highlight><bold>40</bold></highlight> is provided in a form of <cross-reference target="DRAWINGS">FIG. 25</cross-reference>, for instance. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Also, the client side proxy <highlight><bold>40</bold></highlight> may be provided in a form of a built-in element of a mobile terminal or a mobile computer, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> described above, for example. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> Each one of the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> of this embodiment has the caching mechanism called fingerprint cache (FP cache), similarly as in the previous embodiment. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> shows an exemplary data structure of the fingerprint to be exchanged between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> in this embodiment. In this case, the fingerprint contains a portion (server side proxy identification information) formed by a server side proxy identification information of the server side proxy <highlight><bold>30</bold></highlight> which issues this fingerprint and a portion (contents dependent information) formed by information obtained according to the content of the data. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The server side proxy identification information is information capable of uniquely identifying the server side proxy <highlight><bold>30</bold></highlight>, which can be given by an IP address, a MAC address, a host ID, etc., for example. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> The contents dependent information is information dependent on the content of the data, which can be a value obtained as a hash value from the contents as will be described below, for example. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> By including the server side proxy identification information in the fingerprint, the different server side proxies will have different fingerprints even when the contents dependent information is the same, so that it is possible to avoid having the identical name for different data contents and it becomes possible to maintain the consistency in the correspondence between the data and the name. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> The contents dependent information of the fingerprint of <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a numerical value similar to the fingerprint of the previous embodiment, and can be calculated by the similar method as described above. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> As in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> described above, the fingerprint cache <highlight><bold>60</bold></highlight> to be provided in the server side proxy <highlight><bold>30</bold></highlight> is recording and managing the data body <highlight><bold>61</bold></highlight> that were exchanged by using the HTTP protocol in the past, by using the fingerprint value <highlight><bold>62</bold></highlight> formed by a value of the server side proxy identification information of this server side proxy <highlight><bold>30</bold></highlight> and a value of the contents dependent information calculated from that data body <highlight><bold>61</bold></highlight> as its name. On the other hand, the fingerprint cache to be provided in the client side proxy <highlight><bold>40</bold></highlight> has a format similar to the fingerprint cache of the server side proxy <highlight><bold>30</bold></highlight>, except that a portion of the server side proxy identification information of the fingerprint will describe the server side proxy identification information of the server side proxy <highlight><bold>30</bold></highlight> that is a correspondent. Note however that the client side proxy <highlight><bold>40</bold></highlight> need not be particularly conscious of the server side proxy identification information at a time of replacing the fingerprint given from the server side proxy <highlight><bold>30</bold></highlight> with the original data. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> For example, when the data are to be transferred from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> by using the HTTP protocol, the server side proxy <highlight><bold>30</bold></highlight> calculates the contents dependent information of the fingerprint of that data, and if the data corresponding to that fingerprint formed by the own server side proxy identification information and that contents dependent information exists in the fingerprint cache, it implies that (data with the same content as) this data had been transferred to that client side proxy <highlight><bold>40</bold></highlight> in the past, so that the server side proxy <highlight><bold>30</bold></highlight> transfers the corresponding fingerprint value without transferring that data itself. The client side proxy <highlight><bold>40</bold></highlight> that received the fingerprint can reproduce the data to be transferred by taking out the data corresponding to that fingerprint value from the fingerprint cache. In this scheme (i.e., the sequence of data compression&rarr;data transfer&rarr;data decompression), it is possible to reduce the amount of data to be transferred through the network considerably because it suffices to send the fingerprint values for those data that are the same as the data already sent in the past. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Note that the client side proxy <highlight><bold>40</bold></highlight> can be provided in a configuration which uses the fingerprint that is described in a message from the server side proxy <highlight><bold>30</bold></highlight> at a time of the registration, a configuration which calculates the fingerprint itself as the fingerprint is not to be described in a message from the server side proxy <highlight><bold>30</bold></highlight>, or a configuration which calculates the fingerprint itself even though the fingerprint is described in a message from the server side proxy <highlight><bold>30</bold></highlight>. In the configuration for calculating the fingerprint itself at a time of the registration, the server side proxy identification information of the server side proxy <highlight><bold>30</bold></highlight> which is a correspondent is obtained while the contents dependent information is obtained from that data, and the fingerprint is generated from them. Here, the server side proxy identification information can be identified from information (such as IP address, for example) of the request transfer target proxy at a time of the request message transmission, for example. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> Note also that the message format to be used between proxies (for a message that is a target for applying the FP compression) at a time of the data transfer between the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> can be the same as those shown in <cross-reference target="DRAWINGS">FIGS. 7A, 7B</cross-reference>, <highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight>A, <highlight><bold>9</bold></highlight>B, <highlight><bold>10</bold></highlight>A, <highlight><bold>10</bold></highlight>B and <highlight><bold>11</bold></highlight> described above. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> In these exemplary formats, when a source information (such as IP address, for example) that already exists in the header of the reply data can be utilized as the server side proxy identification information, it is also possible to use a format for describing only the contents dependent information in the fingerprint portion, where the fingerprint is obtained at the client side proxy by combining the server side proxy identification information and the contents dependent information. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> In this embodiment, an exemplary configuration of the server side proxy <highlight><bold>30</bold></highlight> is similar to that of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> described above, except that only one FP cache <highlight><bold>34</bold></highlight> is provided, and an exemplary configuration of the client side proxy <highlight><bold>40</bold></highlight> is similar to that of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> described above. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> shows an exemplary processing procedure of the server side proxy <highlight><bold>30</bold></highlight> since receiving the request message from the client side proxy <highlight><bold>40</bold></highlight> until transferring the reply message to that client side proxy <highlight><bold>40</bold></highlight> in this embodiment. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> Note that <cross-reference target="DRAWINGS">FIG. 27</cross-reference> shows the processing of the server side proxy <highlight><bold>30</bold></highlight> in the case of receiving one request message from the client side proxy <highlight><bold>40</bold></highlight>, but when the request messages are received simultaneously from a plurality of client side proxies <highlight><bold>40</bold></highlight>, the processing of <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is carried out in parallel when each request is received. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Note also that <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is an exemplary procedure for the case where the FP compression is not used in the transfer of the request message from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>, and the FP compression is used in the transfer of the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> When the request message is received from the client side proxy <highlight><bold>40</bold></highlight> corresponding to the request source client <highlight><bold>50</bold></highlight> (step S<highlight><bold>101</bold></highlight>), the server side proxy <highlight><bold>30</bold></highlight> transmits it to the server <highlight><bold>20</bold></highlight> which is a destination (step S<highlight><bold>102</bold></highlight>). At this point, the processing for this pair of the request message and the reply message once enters a state waiting for the receiving of the corresponding reply message. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> Then, when the server side proxy <highlight><bold>30</bold></highlight> receives the reply message from the server <highlight><bold>20</bold></highlight> at the reception unit <highlight><bold>31</bold></highlight> (step S<highlight><bold>103</bold></highlight>), the FP compression judgement unit <highlight><bold>321</bold></highlight> checks and judges whether the reply data of this reply message is a target for applying the FP compression or not (step S<highlight><bold>104</bold></highlight>). When the reply data is judged as not a target for applying the FP compression (step S<highlight><bold>104</bold></highlight> NO), the received reply message is transferred to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>110</bold></highlight>). </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> When the reply data of this reply message is judged as a target for applying the FP compression at the step S<highlight><bold>104</bold></highlight>, at the FP cache management unit <highlight><bold>322</bold></highlight>, the contents dependent information value of the fingerprint of this reply data is calculated (step S<highlight><bold>105</bold></highlight>) and the fingerprint is obtained by attaching the own server side proxy identification information to that contents dependent information (step S<highlight><bold>106</bold></highlight>). Then, the fingerprint cache <highlight><bold>34</bold></highlight> is searched through by using this fingerprint value as a key (step S<highlight><bold>107</bold></highlight>). </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> When a set of this fingerprint value and the corresponding data is registered in the fingerprint cache <highlight><bold>34</bold></highlight> (step S<highlight><bold>108</bold></highlight> YES), the received reply message is converted into the FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, for example) by using this fingerprint value at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to that request source client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>109</bold></highlight>). At this point, a value of a field indicating the data length (Content-Length field) in the reply header is set in accordance with the FP compression format, according to the need. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> On the other hand, when a set of this fingerprint value and the corresponding data is not registered in the fingerprint cache <highlight><bold>34</bold></highlight> as a result of the search of the step S<highlight><bold>107</bold></highlight> (step S<highlight><bold>108</bold></highlight> NO), the following two operations are carried out. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> (1) The received reply message is converted into a non-FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>A, for example) (by using this fingerprint value according to the need) at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step Sill). </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> (2) This fingerprint value and this reply data are set in correspondence (the fingerprint value is set as a key) and registered into the fingerprint cache <highlight><bold>34</bold></highlight> at the FP cache management unit <highlight><bold>322</bold></highlight> (step S<highlight><bold>112</bold></highlight>). </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Note that these operations (1) and (2) can be carried out in any desired order or in parallel. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> In this embodiment, an exemplary processing procedure of the client side proxy <highlight><bold>40</bold></highlight> since receiving the request message from the client <highlight><bold>50</bold></highlight> until transferring the reply message to that client <highlight><bold>50</bold></highlight> can be carried out similarly as that of <cross-reference target="DRAWINGS">FIG. 19</cross-reference> described above. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Also, in this embodiment, the operation in the case of transferring data that is not registered in the fingerprint cache from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> while registering this data into the fingerprint cache can be carried out according to <cross-reference target="DRAWINGS">FIG. 20</cross-reference> described above, as follows. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> (1) Suppose that the browser or the like on the client <highlight><bold>50</bold></highlight> issued the request message of the POST method to the server <highlight><bold>20</bold></highlight> by using the URL of &ldquo;/A.cgi&rdquo;, for example. Here, the browser or the like is set in advance to send the request message for the server <highlight><bold>20</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> first. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> (2), (3) This request message is transferred to the server <highlight><bold>20</bold></highlight> by the client side proxy <highlight><bold>40</bold></highlight> and the server side proxy <highlight><bold>30</bold></highlight> corresponding to the server <highlight><bold>20</bold></highlight> which is a destination. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> (4) The server <highlight><bold>20</bold></highlight> carries out a processing with respect to this request message, and then returns the reply message to the server side proxy <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> (5), (6) The server side proxy <highlight><bold>30</bold></highlight> registers the reply data of the received reply message into the fingerprint cache <highlight><bold>34</bold></highlight> as this reply data is data received for the first time, and transfers this reply message to that client side proxy <highlight><bold>40</bold></highlight> corresponding to the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> (7), (8) The client side proxy <highlight><bold>40</bold></highlight> obtains the fingerprint according the reply data of the received reply message and registers the fingerprint along with that reply data into the fingerprint cache <highlight><bold>44</bold></highlight> as this reply data is data received for the first time, and transfers this reply message to (the browser or the like operating on) the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Also, in this embodiment, the operation in the case of transferring data that is registered in the fingerprint cache by the operation of <cross-reference target="DRAWINGS">FIG. 20</cross-reference> from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> can be carried out according to <cross-reference target="DRAWINGS">FIG. 21</cross-reference> described above, as follows. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> (1) to (4) are the same as (1) to (4) in the operation of <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> (5), (6) The server side proxy <highlight><bold>30</bold></highlight> replaces the reply data of the reply message received from the server <highlight><bold>20</bold></highlight> with the fingerprint, and transfers the resulting reply message to the client side proxy <highlight><bold>40</bold></highlight> corresponding to the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> (7), (8) The client side proxy <highlight><bold>40</bold></highlight> detects that the reply data of the reply message is replaced with the fingerprint, takes out the corresponding data from the fingerprint cache <highlight><bold>44</bold></highlight> by using the specified fingerprint, enters this data into the reply body, and transfers that reply message to (the browser or the like operating on) the request source client <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> Now, up to this point, the case of multiple-to-one communications between a plurality of server side proxies and one client side proxy has been described, but the present invention is also applicable to the system using multiple-to-multiple communications between the server side proxies and the client side proxies. In the following, such a system using multiple-to-multiple communications between server side proxies and the client side proxies will be described. Note that, in the following, the differences from the above described embodiment will be mainly described. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 28, 29</cross-reference> and <highlight><bold>30</bold></highlight> show exemplary configurations of a computer network system in this case, corresponding to <cross-reference target="DRAWINGS">FIGS. 23, 24</cross-reference> and <highlight><bold>25</bold></highlight> described above, respectively. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The basic functions of the server <highlight><bold>20</bold></highlight>, the server side proxy <highlight><bold>30</bold></highlight>, the client side proxy <highlight><bold>40</bold></highlight>, and the client <highlight><bold>50</bold></highlight> are the same as the above described embodiment. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> Similarly as in the above described embodiment, the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> can be provided in the same form as shown in FIGS. <highlight><bold>28</bold></highlight> to <highlight><bold>30</bold></highlight>, for example, or in different forms. Also, the client side proxy <highlight><bold>40</bold></highlight> may be provided in a form of a built-in element of a mobile terminal or a mobile computer, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> described above, for example. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> In the following, the configuration and the operation of the server side proxy <highlight><bold>30</bold></highlight> in this case will be described. Note that an exemplary configuration of the client side proxy <highlight><bold>40</bold></highlight> is basically the same as that of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> described above. Also, an exemplary processing procedure of the client side proxy <highlight><bold>40</bold></highlight> at a time of transferring the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> is basically the same as that of <cross-reference target="DRAWINGS">FIG. 19</cross-reference> described above. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> An exemplary configuration of the server side proxy <highlight><bold>30</bold></highlight> is similar to that of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> described above, which is provided with a function for managing the correspondence between the fingerprint and the data for each client side proxy <highlight><bold>40</bold></highlight> which is a correspondent of the communications to which the FP compression is to be applied. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> For example, when the FP compression target data are to be transferred from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight> by using the HTTP protocol, the server side proxy <highlight><bold>30</bold></highlight> obtains the fingerprint (the own server side proxy identification information and the contents dependent information corresponding to that data) of that data, and if the data corresponding to that fingerprint exists in the fingerprint cache corresponding to that client side proxy <highlight><bold>40</bold></highlight>, it implies that (data with the same content as) this data had been transferred to that client side proxy <highlight><bold>40</bold></highlight> in the past, so that the server side proxy <highlight><bold>30</bold></highlight> transfers the corresponding fingerprint value without transferring that data itself. On the other hand, if the data corresponding to that fingerprint does not exist in the fingerprint cache corresponding to that client side proxy <highlight><bold>40</bold></highlight>, it implies that (data with the same content as) this data had not been transferred to that client side proxy <highlight><bold>40</bold></highlight> in the past, so that the server side proxy <highlight><bold>30</bold></highlight> transfers that data, while carrying out the registration to the fingerprint cache corresponding to that client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> Note that the server side proxy <highlight><bold>30</bold></highlight> can identify the client side proxy <highlight><bold>40</bold></highlight> to which the data received from the server <highlight><bold>20</bold></highlight> should be transferred, according to a prescribed communication regulation, for example. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> Similarly as in the above described embodiment, the FP cache management unit <highlight><bold>322</bold></highlight> manages a correspondence between the fingerprint and the data for each client side proxy <highlight><bold>40</bold></highlight> which is a correspondent of a communication to which the FP compression is to be applied, by using various forms such as those shown in FIGS. <highlight><bold>14</bold></highlight> to <highlight><bold>17</bold></highlight> described above. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> shows an exemplary processing procedure of the server side proxy <highlight><bold>30</bold></highlight> since receiving the request message from the client side proxy <highlight><bold>40</bold></highlight> until transferring the reply message to that client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> Note that <cross-reference target="DRAWINGS">FIG. 31</cross-reference> shows the processing of the server side proxy <highlight><bold>30</bold></highlight> in the case of receiving one request message from the client side proxy <highlight><bold>40</bold></highlight>, but when the request messages are received simultaneously from a plurality of client side proxies <highlight><bold>40</bold></highlight>, the processing of <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is carried out in parallel when each request is received. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> Note also that <cross-reference target="DRAWINGS">FIG. 31</cross-reference> is an exemplary procedure for the case where the FP compression is not used in the transfer of the request message from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>, and the FP compression is used in the transfer of the reply message from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> In the following, the request source client side proxy is a client side proxy corresponding to a request source client in the processing of a pair of a request message and a reply message, i.e., a client side proxy which is a source of a request message and a destination of a reply message. </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> When the request message is received from one client side proxy (i.e., the request source client side proxy) <highlight><bold>40</bold></highlight> among a plurality of client side proxies (step S<highlight><bold>41</bold></highlight>), the server side proxy <highlight><bold>30</bold></highlight> transmits it to the server <highlight><bold>20</bold></highlight> which is a destination (step S<highlight><bold>42</bold></highlight>). At this point, the processing for this pair of the request message and the reply message once enters a state waiting for the receiving of the corresponding reply message. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> Then, when the server side proxy <highlight><bold>30</bold></highlight> receives the reply message from the server <highlight><bold>20</bold></highlight> at the reception unit <highlight><bold>31</bold></highlight> (step S<highlight><bold>43</bold></highlight>), the FP compression judgement unit <highlight><bold>321</bold></highlight> checks and judges whether the reply data of this reply message is a target for applying the FP compression or not (step S<highlight><bold>44</bold></highlight>). When the reply data is judged as not a target for applying the FP compression (step S<highlight><bold>44</bold></highlight> NO), the received reply message is transferred to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>50</bold></highlight>). </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> When the reply data of this reply message is judged as a target for applying the FP compression at the step S<highlight><bold>44</bold></highlight>, at the FP cache management unit <highlight><bold>322</bold></highlight>, the contents dependent information value of the fingerprint of this reply data is calculated (step S<highlight><bold>45</bold></highlight>) and the fingerprint is obtained by attaching the own server side proxy identification information to that contents dependent information (step S<highlight><bold>46</bold></highlight>). Then, the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to the request source client side proxy <highlight><bold>40</bold></highlight> is searched through by using this fingerprint value as a key (step S<highlight><bold>47</bold></highlight>). </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> When a set of this fingerprint value and the corresponding data is registered in the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> (step S<highlight><bold>48</bold></highlight> YES), the received reply message is converted into the FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, for example) by using this fingerprint value at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to that request source client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>49</bold></highlight>). At this point, a value of a field indicating the data length (Content-Length field) in the reply header is set in accordance with the FP compression format, according to the need. </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> On the other hand, when a set of this fingerprint value and the corresponding data is not registered in the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> as a result of the search of the step S<highlight><bold>47</bold></highlight> (step S<highlight><bold>48</bold></highlight> NO), the following two operations are carried out. </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> (1) The received reply message is converted into a non-FP compression format (of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>A, for example) (by using this fingerprint value according to the need) at the FP compression processing unit <highlight><bold>323</bold></highlight>, and transmitted to the client side proxy <highlight><bold>40</bold></highlight> from the transmission unit <highlight><bold>33</bold></highlight> (step S<highlight><bold>51</bold></highlight>) </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> (2) This fingerprint value and this reply data are set in correspondence (the fingerprint value is set as a key) and registered into the fingerprint cache <highlight><bold>34</bold></highlight> corresponding to that request source client side proxy <highlight><bold>40</bold></highlight> at the FP cache management unit <highlight><bold>322</bold></highlight> (step S<highlight><bold>52</bold></highlight>). </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> Note that these operations (1) and (2) can be carried out in any desired order or in parallel. </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> Now, in the examples described so far, at a time of transferring the reply data from the server side proxy <highlight><bold>30</bold></highlight> to the client side proxy <highlight><bold>40</bold></highlight>, if this reply data is the same as that registered in the fingerprint cache, the network traffic is reduced by transferring the corresponding fingerprint instead of this reply data. This FP compression can be applied also to the case of transferring the request data from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight> as well. Note that it is also possible to apply the FP compression only to the case of transferring the request data from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> In the case of applying the FP compression to the request data transfer from the client side proxy <highlight><bold>40</bold></highlight> to the server side proxy <highlight><bold>30</bold></highlight>, the roles of the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> with respect to the reply data described above should be interchanged. In the case of applying the FP compression to both the request data transfer and the reply data transfer, the server side proxy <highlight><bold>30</bold></highlight> and the client side proxy <highlight><bold>40</bold></highlight> should have a fingerprint decompression processing unit and a fingerprint compression processing unit (or a fingerprint compression/decompression processing unit that combines a fingerprint compression processing unit and a fingerprint decompression processing unit). </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> Also, in this case, in the server side proxy <highlight><bold>30</bold></highlight> and/or the client side proxy <highlight><bold>40</bold></highlight>, it is possible to provide the fingerprint cache for the request data transfer independently from the fingerprint cache for the reply data transfer, and it is also possible to share the same fingerprint cache among the reply data transfer and the request data transfer. </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> Note that, in this embodiment, the cases of handling the request message to be transferred from the client side proxy to the server side proxy or the reply message to be transferred from the server side proxy to the client side proxy have been described, but in the case where one proxy is connected with both a device for transmitting the request message and a device for transmitting the reply message, or with a device for transmitting both the request message and the reply message, it is of course possible to handle the request message and the reply message to be transferred from the client side proxy to the server side proxy as well as the request message and the reply message to be transferred from the server side proxy to the client side proxy. It is also possible to handle only the request message to be transferred from the client side proxy to the server side proxy and the request message to be transferred from the server side proxy to the client side proxy, for example. </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> Also, up to this point, the embodiment in which the entire data contained in one message is a target for applying the FP compression (a target for the registration into the fingerprint cache) has been described, but in the case where the data contained in one message is formed by a set of prescribed unit data, for example, it is also possible to set only a part of the unit data contained in one message as a target for applying the FP compression (a target for the registration into the fingerprint cache). </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> As described, according to the present invention, correspondences between data and their names are registered at the data transfer devices and the corresponding names are transferred, instead of transferring the data, for those data for which the correspondences are registered, so that it is possible to reduce the amount of transfer data among the data transfer devices. </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> For example, even when the reply message of the GET method is a private data, it is possible to compress this message by using the fingerprint and transfer it between the data transfer devices. Also, for example, even when the reply message of the GET method is a dynamic data, it is possible to compress this message by using the fingerprint and transfer it between the data transfer devices as long as the content of the data is the same. Also, for example, even in the case of using the POST method, it is possible to compress the data by using the fingerprint and transfer it between the data transfer device as long as the resulting data is the same. </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> Also, for example, by registering the data written by the PUT method into the fingerprint cache, when this data is to be read out as a result of the GET method or the POST method, it is possible to compress this data by using the fingerprint and transfer it between the data transfer devices. </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> According to the present invention, a data transfer device on a first communication device side maintains a correspondence between data and its name, with respect to each other data transfer device on a second communication device side, and at a time of transferring some data to some other data transfer device, the corresponding name is transferred instead of transferring the data for which this correspondence is maintained, with respect to that some other data transfer device, so that it is possible to reduce the amount of transfer data between the data transfer devices. </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> Also, when the data transfer device on the first communication device side and the other data transfer devices on the second communication device side are connected in one-to-multiple manner, the data transfer device on the first communication device side manages the correspondence between the data and its name for each one of the other data transfer devices on the second communication device side, so that when some data is to be transferred, it is possible to avoid transferring its name instead of that some data to the other data transfer device which does not share the correspondence between that data and its name. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> Also, according to the present invention, each data transfer device on a first communication device side maintains a correspondence between data and its name, which is formed by a data transfer device identification information of each data transfer device and data dependent information generated according to a content of that data, with respect to another data transfer device on a second communication device side, and at a time of transferring some data to the another data transfer device, the corresponding name is transferred instead of transferring the data for which this correspondence is maintained, with respect to the another data transfer device, so that it is possible to reduce the amount of transfer data between the data transfer devices. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> Also, when the data transfer devices on the first communication device side and the another data transfer device on the second communication device side are connected in multiple-to-one manner, the names of data will be different when the data transfer devices on the first communication device side are different, so that it is possible to avoid having the identical name for different data contents and it becomes possible to maintain the consistency in the correspondence between the data and the name. </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> Also, according to the present invention, each data transfer device on a first communication device side maintains a correspondence between data and its name, which is formed by a data transfer device identification information of each data transfer device and data dependent information generated according to a content of that data, with respect to each other data transfer device on a second communication device side, and at a time of transferring some data to some other data transfer device, the corresponding name is transferred instead of transferring the data for which this correspondence is maintained, with respect to that some other data transfer device, so that it is possible to reduce the amount of transfer data between the data transfer devices. </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> Also, when the data transfer devices on the first communication device side and the other data transfer devices on the second communication device side are connected in multiple-to-multiple manner, it becomes possible to maintain the consistency in the correspondence between the data and the name as described above, and each data transfer device on the first communication device side manages the correspondence between the data and its name for each one of the other data transfer devices on the second communication device side, so that when some data is to be transferred, it is possible to avoid transferring its name instead of that some data to the other data transfer device which does not share the correspondence between that data and its name. </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> It is to be noted that the above described embodiments according to the present invention may be conveniently implemented using a conventional general purpose digital computer programmed according to the teachings of the present specification, as will be apparent to those skilled in the computer art. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> In particular, each one of the server side proxy and the client side proxy of the above described embodiments can be conveniently implemented in a form of a software package. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> Such a software package can be a computer program product which employs a storage medium including stored computer code which is used to program a computer to perform the disclosed function and process of the present invention. The storage medium may include, but is not limited to, any type of conventional floppy disks, optical disks, CD-ROMs, magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or any other suitable media for storing electronic instructions. </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> It is also to be noted that, besides those already mentioned above, many modifications and variations of the above embodiments may be made without departing from the novel and advantageous features of the present invention. Accordingly, all such modifications and variations are intended to be included within the scope of the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer device comprising: 
<claim-text>a reception unit configured to receive the first data from the first communication device; </claim-text>
<claim-text>a cache unit configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; </claim-text>
<claim-text>a processing unit configured to carry out a processing for transmitting a first data name that is generated according to a content of the first data and assigned to the first data, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device, upon receiving the first data transmitted from the first communication device; and </claim-text>
<claim-text>a transmission unit configured to transmit the first data name or the first data to the one other data transfer device according to a processing carried out by the processing unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache unit registers a correspondence between each cache data name corresponding to each cache data and an identification information for identifying a corresponding other data transfer device. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache unit registers a correspondence between each cache data name corresponding to each cache data and one or a plurality of identification information for identifying a group of other data transfer devices to which each cache data name is available. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache unit registers the cache data names each of which is a value obtained by compressing each cache data by a prescribed method, and the processing unit transmits or registers the first data name which is a value obtained by compressing the first data by the prescribed method, </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache unit registers the cache data names each of which is a value obtained by applying a prescribed hash function to each cache data, and the processing unit transmits or registers the first data name which is a value obtained by applying the prescribed hash function to the first data. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the processing unit also transmits the first data name to be assigned to the first data at a time of transmitting the first data to the one other data transfer device as the first data name is not registered in the cache unit. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the processing unit transmits the first data name and registers the first data into the cache unit at least with respect to a data of a reply message which is not null. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the processing unit excludes data that satisfy a prescribed condition from targets for carrying out a registration into the cache unit. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is connected to the first communication device through a local area network. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is provided in a form of a software implemented on the first communication device. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is connected to the first communication device which is a server device, while each other data transfer device is connected to the second communication device which is a client device. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is connected through Internet with each other data transfer device which is a proxy device. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer device comprising: 
<claim-text>a reception unit configured to receive the first data from the first communication device; </claim-text>
<claim-text>a cache unit configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; </claim-text>
<claim-text>a processing unit configured to carry out a processing for transmitting a first data name that is generated according to a content of the first data and assigned to the first data, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit, upon receiving the first data transmitted from the first communication device; and </claim-text>
<claim-text>a transmission unit configured to transmit the first data name or the first data to the another data transfer device according to a processing carried out by the processing unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device transmits the first data to the another data transfer device which is one of other data transfer devices connected to one of second communication devices and receives the second data transmitted from one of the second communication devices through the another data transfer device which is one of the other data transfer devices; 
<claim-text>the cache unit registers the cache data in correspondence to the cache data names, for each one of the other data transfer devices; and </claim-text>
<claim-text>the processing unit transmits the first data name when the first data name is registered in the cache unit as corresponding to the another data transfer device to which the first data should be transferred, or registers the first data in correspondence to the first data name into the cache unit as corresponding to the another data transfer device, and transmits the first data, when the first data name is not registered in the cache unit as corresponding to the another data transfer device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the cache unit registers a correspondence between each cache data name corresponding to each cache data and an identification information for identifying a corresponding other data transfer device. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the cache unit registers a correspondence between each cache data name corresponding to each cache data and one or a plurality of identification information for identifying a group of other data transfer devices to which each cache data name is available. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the cache unit registers the cache data names each of which is formed by the data transfer device identification information unique to the data transfer device and a value obtained by compressing each cache data by a prescribed method, and the processing unit transmits or registers the first data name which is formed by the data transfer device identification information unique to the data transfer device and a value obtained by compressing the first data by the prescribed method, </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the cache unit registers the cache data names each of which is formed by the data transfer device identification information unique to the data transfer device and a value obtained by applying a prescribed hash function to each cache data, and the processing unit transmits or registers the first data name which is formed by the data transfer device identification information unique to the data transfer device and a value obtained by applying the prescribed hash function to the first data. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the processing unit also transmits the first data name to be assigned to the first data at a time of transmitting the first data to the another data transfer device as the first data name is not registered in the cache unit. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the processing unit transmits the first data name and registers the first data into the cache unit at least with respect to a data of a reply message which is not null. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the processing unit excludes data that satisfy a prescribed condition from targets for carrying out a registration into the cache unit. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the data transfer device is connected to the first communication device through a local area network. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the data transfer device is provided in a form of a software implemented on the first communication device. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is connected to the first communication device which is a server device, while the another data transfer device is connected to the second communication device which is a client device. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The data transfer device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data transfer device is connected through Internet with the another data transfer device which is a proxy device. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A data transfer method at a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer method comprising: 
<claim-text>receiving the first data from the first communication device; </claim-text>
<claim-text>judging whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; and </claim-text>
<claim-text>carrying out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A data transfer method at a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the data transfer method comprising: 
<claim-text>receiving the first data from the first communication device; </claim-text>
<claim-text>judging whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; and </claim-text>
<claim-text>carrying out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The data transfer method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, wherein the data transfer device transmits the first data to the another data transfer device which is one of other data transfer devices connected to one of second communication devices and receives the second data transmitted from one of the second communication devices through the another data transfer device which is one of the other data transfer devices; 
<claim-text>the judging step uses the cache unit which registers the cache data in correspondence to the cache data names, for each one of the other data transfer devices; and </claim-text>
<claim-text>the carrying out step transmits the first data name when the first data name is registered in the cache unit as corresponding to the another data transfer device to which the first data should be transferred, or registers the first data in correspondence to the first data name into the cache unit as corresponding to the another data transfer device, and transmits the first data, when the first data name is not registered in the cache unit as corresponding to the another data transfer device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A computer program product for causing a computer to function as a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to one of other data transfer devices connected to one of second communication devices that is a destination of the first data, receiving second data transmitted from one of the second communication devices through one of the other data transfer devices, and transmitting the second data to the first communication device that is a destination of the second data, the computer program product comprising: 
<claim-text>a first computer program code for causing the computer to receive the first data from the first communication device; </claim-text>
<claim-text>a second computer program code for causing the computer to judge whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to one other data transfer device in past, in correspondence to cache data names each of which is generated according to a content of each cache data and assigned to each cache data, for each one of the other data transfer devices; and </claim-text>
<claim-text>a third computer program code for causing the computer to carry out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit as corresponding to the one other data transfer device to which the first data should be transferred, or a processing for registering the first data in correspondence to the first data name into the cache unit as corresponding to the one other data transfer device, and transmitting the first data, when the first data name is not registered in the cache unit as corresponding to the one other data transfer device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A computer program product for causing a computer to function as a data transfer device for receiving first data transmitted from a first communication device, transmitting the first data to another data transfer device connected to a second communication device that is a destination of the first data, receiving second data transmitted from the second communication device through the another data transfer device, and transmitting the second data to the first communication device that is a destination of the second data, the computer program product comprising: 
<claim-text>a first computer program code for causing the computer to receive the first data from the first communication device; </claim-text>
<claim-text>a second computer program code for causing the computer to judge whether a first data name that is generated according to a content of the first data and assigned to the first data is registered in a cache unit, which is configured to register cache data that were transmitted to the another data transfer device in past, in correspondence to cache data names each of which is formed by a prescribed data transfer device identification information for uniquely identifying the data transfer device among a plurality of data transfer devices for transmitting data to the another data transfer device and data dependent information generated according to a content of each cache data and assigned to each cache data; and </claim-text>
<claim-text>a third computer program code for causing the computer to carry out a processing for transmitting the first data name, instead of transmitting the first data, when the first data name is registered in the cache unit, or a processing for registering the first data in correspondence to the first data name into the cache unit and transmitting the first data, when the first data name is not registered in the cache unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The computer program product of claim <highlight><bold>30</bold></highlight>, wherein the data transfer device transmits the first data to the another data transfer device which is one of other data transfer devices connected to one of second communication devices and receives the second data transmitted from one of the second communication devices through the another data transfer device which is one of the other data transfer devices; 
<claim-text>the second computer program code uses the cache unit which registers the cache data in correspondence to the cache data names, for each one of the other data transfer devices; and </claim-text>
<claim-text>the third computer program code causes the computer to transmit the first data name when the first data name is registered in the cache unit as corresponding to the another data transfer device to which the first data should be transferred, or register the first data in correspondence to the first data name into the cache unit as corresponding to the another data transfer device, and transmit the first data, when the first data name is not registered in the cache unit as corresponding to the another data transfer device.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005047A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005047A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005047A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005047A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005047A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005047A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005047A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005047A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005047A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005047A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005047A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005047A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005047A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005047A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005047A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005047A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005047A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005047A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005047A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005047A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005047A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005047A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005047A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005047A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030005047A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030005047A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
